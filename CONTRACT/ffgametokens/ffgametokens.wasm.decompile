(data (i32.const 4) "@j\00\00")
(data (i32.const 16) "ffgametokens\00")
(data (i32.const 32) "invalid symbol name\00")
(data (i32.const 64) "invalid supply\00")
(data (i32.const 80) "max-supply must be positive\00")
(data (i32.const 112) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 176) "token with symbol already exists\00")
(data (i32.const 224) "cannot create objects in table of another contract\00")
(data (i32.const 288) "write\00")
(data (i32.const 304) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 368) "error reading iterator\00")
(data (i32.const 400) "read\00")
(data (i32.const 416) "cannot transfer to self\00")
(data (i32.const 448) "to account does not exist\00")
(data (i32.const 480) "unable to find key\00")
(data (i32.const 512) "invalid quantity\00")
(data (i32.const 544) "must transfer positive quantity\00")
(data (i32.const 576) "symbol precision mismatch\00")
(data (i32.const 608) "memo has more than 256 bytes\00")
(data (i32.const 640) "cannot pass end iterator to modify\00")
(data (i32.const 688) "object passed to modify is not in multi_index\00")
(data (i32.const 736) "cannot modify objects in table of another contract\00")
(data (i32.const 800) "attempt to add asset with different symbol\00")
(data (i32.const 848) "addition underflow\00")
(data (i32.const 880) "addition overflow\00")
(data (i32.const 912) "updater cannot change primary key when modifying an object\00")
(data (i32.const 976) "no balance object found\00")
(data (i32.const 1008) "attempt to subtract asset with different symbol\00")
(data (i32.const 1056) "subtraction underflow\00")
(data (i32.const 1088) "subtraction overflow\00")
(data (i32.const 1120) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1184) "overdrawn balance\00")
(data (i32.const 1216) "object passed to erase is not in multi_index\00")
(data (i32.const 1264) "cannot erase objects in table of another contract\00")
(data (i32.const 1328) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1392) "buyer account does not exist\00")
(data (i32.const 1424) "cannot buy to issuer\00")
(data (i32.const 1456) "ffteamwallet\00")
(data (i32.const 1472) "team contract cannot issuer\00")
(data (i32.const 1504) "ffgameioteam\00")
(data (i32.const 1520) "ffgamemarket\00")
(data (i32.const 1536) "active\00")
(data (i32.const 1552) "Mining reward for game_id:\00")
(data (i32.const 1584) " \e2\80\94 https://ffgame.io\00")
(data (i32.const 1616) "token with symbol does not exist\00")
(data (i32.const 1664) "quantity must positive\00")
(data (i32.const 1696) "no permission\00")
(data (i32.const 1712) "ffgamemanage\00")
(data (i32.const 1728) "invalid type\00")
(data (i32.const 1744) "invalid game account\00")
(data (i32.const 1776) "account already exist\00")
(data (i32.const 1808) "account does not exist\00")
(data (i32.const 1840) "cannot pass end iterator to erase\00")
(data (i32.const 1888) "cannot increment end iterator\00")
(data (i32.const 1920) "ffgamebonus1\00")
(data (i32.const 1936) "enable must be 0 or 1\00")
(data (i32.const 1968) "300005 invalid quantity\00")
(data (i32.const 2000) "300003 FFG overdrawn balance\00")
(data (i32.const 2032) "global data not found\00")
(data (i32.const 2064) "300001 Not allowed to stake\00")
(data (i32.const 2096) "300006 stake info not found\00")
(data (i32.const 2128) "300007 stake amount not enought\00")
(data (i32.const 2160) "300002 Not allowed to unstake\00")
(data (i32.const 2192) "300004 no unstake amount\00")
(data (i32.const 2224) "onerror\00")
(data (i32.const 2240) "eosio\00")
(data (i32.const 2256) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 2320) "get\00")
(data (i32.const 10720) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$20 (param i64)))
(import "env" "send_inline" (func $fimport$21 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN8ffgtoken6createEN5eosio5assetE" (func $5))
(export "_ZN8ffgtoken8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $11))
(export "_ZN8ffgtoken11sub_balanceEyN5eosio5assetE" (func $13))
(export "_ZN8ffgtoken11add_balanceEyN5eosio5assetEy" (func $14))
(export "_ZN8ffgtoken6miningEyyN5eosio5assetEyy" (func $25))
(export "_ZN8ffgtoken7setgameEyhyN5eosio5assetE" (func $59))
(export "_ZN8ffgtoken7settingEyyh" (func $63))
(export "_ZN8ffgtoken5stakeEyN5eosio5assetE" (func $70))
(export "_ZN8ffgtoken7unstakeEyN5eosio5assetE" (func $76))
(export "_ZN8ffgtoken7restakeEy" (func $83))
(export "apply" (func $85))
(export "malloc" (func $101))
(export "free" (func $104))
(export "memcmp" (func $116))
(export "strlen" (func $117))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $118 $83 $11 $63 $5 $25 $70 $59 $76)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $99($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $108($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $105($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $108($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $106($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $107($7)
	return (unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2320])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $46($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [400])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [400])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $98(*($1), ($0 + [32]))
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $115(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $115(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $106(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $106(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [112])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [56])) = (int_64)1398362884
	*($10 + [32]) = [0]
	*($10 + [24]) = (int_64)0
	*($10 + [40]) = (int_64)0
	*($10 + [48]) = (int_64)0
	CALL eosio_assert([1], [304])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [32])
	*($10 + [100]) = $6
	*($10 + [96]) = $6
	*($10 + [104]) = ($6 + $3)
	*($10 + [64]) = ($10 + [96])
	*($10 + [80]) = ($10 + [24])
	CALL $94(($10 + [80]), ($10 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	*(($10 + [76])) = *(($10 + [60]))
	$8 = *((($10 + [24]) + [8]))
	*(($1 = (($10 + [64]) + [8]))) = *(($10 + [56]))
	$7 = *($10 + [24])
	*($10 + [64]) = *($10 + [48])
	*($10 + [68]) = *(($10 + [52]))
	$4 = *(($10 + [40]))
	*((($10 + [80]) + [8])) = *($1)
	*($10 + [80]) = *($10 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [80]) + [8]))
	*((($10 + [96]) + [8])) = $5
	*((($10 + [8]) + [8])) = $5
	$5 = *($10 + [80])
	*($10 + [96]) = $5
	*($10 + [8]) = $5
	CALL void $1((int_32 $7), (int_64 ($8 & [255])), (int_32 $4), (int_64 ($10 + [8])), (int_32 $9))
	*([0] + [4]) = ($10 + [112])
	return [1]
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [400])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [400])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [400])
	$5 = (($8 + [8]) + [16])
	CALL memcpy($5, ($6 + [16]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *($5)
	$4 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_64 ($6 & [255])), (int_32 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [304])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [32])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [400])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [400])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [400])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [400])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $105($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [288])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [288])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [288])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $46($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [288])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [288])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $50(CALL $49($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL $39($0)
	*($0 + [72]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	$3 = *($2)
	$5 = *($1 + [4])
	*($0 + [8]) = *($5)
	*(($0 + [16])) = *(($5 + [8]))
	$5 = *($1 + [8])
	*($0 + [24]) = *($5)
	*(($0 + [32])) = *(($5 + [8]))
	$1 = *($1 + [12])
	*($0 + [40]) = *($1)
	$4 = *(($1 + [8]))
	*($0 + [56]) = (int_64)1
	*(($0 + [48])) = $4
	*($0 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [88]) = ($6 + [72])
	*($6 + [84]) = $6
	*($6 + [80]) = $6
	*($6 + [96]) = ($6 + [80])
	*($6 + [108]) = ($0 + [8])
	*($6 + [104]) = $0
	*($6 + [112]) = ($0 + [24])
	*($6 + [116]) = ($0 + [40])
	*($6 + [120]) = ($0 + [56])
	*($6 + [124]) = ($0 + [64])
	CALL $38(($6 + [104]), ($6 + [96]))
	$4 = *($0)
	*($0 + [76]) = CALL db_store_i64(*($3 + [8]), (int_64)-7807295948991758336, *(*($2 + [8])), $4, $6, [72])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $51(*($1), ($0 + [32]))
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $105($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $114($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $106($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $45 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $105($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $46($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $47(($9 + [72]), ($9 + [64]))
	CALL $48(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $106($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $106($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $106($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $106($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $114(($9 + [8]))
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$4), [800])
	$5 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [880])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [912])
	*($6 + [48]) = ($6 + [40])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [56]) = ($6 + [40])
	*($6 + [68]) = ($1 + [16])
	*($6 + [64]) = $1
	*($6 + [72]) = ($1 + [32])
	CALL $8(($6 + [64]), ($6 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $105([56])
	CALL $7($6)
	*($6 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	CALL $10(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $7 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [32])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN8ffgtoken6createEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$4 = [0]
	$8 = *($1 + [8])
	$5 = (uint_64)$8 >> (uint_64)(int_64)8
	$6 = $5)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	CALL eosio_assert($2, [32])
	$2 = [0]
	$3 = *($1)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$4 = [0]
	$6 = $5
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$2 = [0]
	
.LABEL $label$10
	CALL eosio_assert($2, [64])
	CALL eosio_assert(((int_64)$3 > (int_64)0), [80])
	*((($9 + [8]) + [32])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$6 = *($0)
	*($9 + [8]) = $6
	*($9 + [16]) = $5
	$4 = CALL db_find_i64($6, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(CALL $6(($9 + [8]), $4) + [40]) == (int_32)($9 + [8])), [112])
	$4 = [0]
	goto $label$15 
	
.LABEL $label$16
	$4 = [1]
	
.LABEL $label$15
	CALL eosio_assert($4, [176])
	$5 = *($0)
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [224])
	$4 = CALL $105([56])
	CALL $7($4)
	*($4 + [40]) = ($9 + [8])
	*($4 + [8]) = $8
	*(($4 + [28])) = *(($1 + [12]))
	*(($4 + [24])) = *(($1 + [8]))
	*(($4 + [20])) = *(($1 + [4]))
	*($4 + [16]) = *($1)
	*($4 + [32]) = $7
	*($9 + [96]) = (($9 + [48]) + [40])
	*($9 + [92]) = ($9 + [48])
	*($9 + [88]) = ($9 + [48])
	*($9 + [104]) = ($9 + [88])
	*($9 + [116]) = ($4 + [16])
	*($9 + [112]) = $4
	*($9 + [120]) = ($4 + [32])
	CALL $8(($9 + [112]), ($9 + [104]))
	$6 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$1 = CALL db_store_i64(*((($9 + [8]) + [8])), (int_64)-4157508551318700032, $5, $6), ($9 + [48]), [40]
	*($4 + [44]) = $1)
	$2 = (($9 + [8]) + [16])
	if ( (uint_64)($6 <= *($2)) ){ goto $label$17 }
	*($2) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$17
	*($9 + [112]) = $4
	$6 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($9 + [48]) = $6)
	*($9 + [88]) = $1
	$2 = *((($9 + [8]) + [28]))
	if ( ((uint_32)$2 >= (uint_32)*(($9 + [40]))) ){ goto $label$19 }
	*($2 + [8]) = $6
	*($2 + [16]) = $1
	*($9 + [112]) = [0]
	*($2) = $4
	*(($9 + [36])) = ($2 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $9(($9 + [32]), ($9 + [112]), ($9 + [48]), ($9 + [88]))
	
.LABEL $label$18
	$4 = *($9 + [112])
	*($9 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL $106($4)
	
.LABEL $label$20
	$1 = *($9 + [32])
	if ( ($1 == 0) ){ goto $label$21 }
	$0 = ($9 + [36])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	CALL $106($2)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($9 + [32]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $1
	
.LABEL $label$22
	*($0) = $1
	CALL $106($4)
	
.LABEL $label$21
	*([0] + [4]) = ($9 + [128])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN8ffgtoken11add_balanceEyN5eosio5assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$8 = [0]
	*((($9 + [8]) + [32])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$6 = *($0)
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$4 = *($2 + [8])
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $15(($9 + [8]), $0)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($9 + [8])), [112])
	CALL eosio_assert([1], [640])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($9 + [8])), [688])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [736])
	$1 = *($8 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$1), [800])
	$6 = ((int_64)*($8) + (int_64)*($2))
	*($8) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [880])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [912])
	CALL eosio_assert([1], [288])
	CALL memcpy(($9 + [64]), $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($9 + [64]) | [8]), ($8 + [8]), [8])
	CALL db_update_i64(*($8 + [20]), (int_64)0, ($9 + [64]), [16])
	$8 = (($9 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$3 }
	*($8) = ((int_64)$1 + (int_64)1)
	$2 = *($9 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [224])
	*(($0 = CALL $105([32])) + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$5 = ($0 + [8])
	$1 = (int_64)5462355
	
.LOOP $label$6:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($7, [32])
	*($0 + [16]) = ($9 + [8])
	*(($8 = ($0 + [8]))) = *(($2 + [8]))
	*($0) = *($2)
	CALL eosio_assert([1], [288])
	CALL memcpy(($9 + [64]), $0, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($9 + [64]) | [8]), $5, [8])
	$1 = (uint_64)*($8) >> (uint_64)(int_64)8
	$2 = CALL db_store_i64(*((($9 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($9 + [64]), [16]
	*($0 + [20]) = $2)
	$7 = (($9 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$9 }
	*($7) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	*($9 + [56]) = $0
	$1 = (uint_64)*($8) >> (uint_64)(int_64)8
	*($9 + [64]) = $1)
	*($9 + [52]) = $2
	$7 = ($9 + [36])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($9 + [40]))) ){ goto $label$11 }
	*($8 + [8]) = $1
	*($8 + [16]) = $2
	*($9 + [56]) = [0]
	*($8) = $0
	*($7) = ($8 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $16(($9 + [32]), ($9 + [56]), ($9 + [64]), ($9 + [52]))
	
.LABEL $label$10
	$8 = *($9 + [56])
	*($9 + [56]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $106($8)
	
.LABEL $label$3
	$2 = *($9 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($9 + [36])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $106($0)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$14 }
	$8 = *(($9 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$8 = $2
	
.LABEL $label$12
	*($7) = $2
	CALL $106($8)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $105([32])
	$6 = CALL $17($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $16(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [32])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC _ZN8ffgtoken8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [416])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$14($2), [448])
	$5 = *($3 + [8])
	$8 = [0]
	*(($11 + [104])) = [0]
	$9 = (uint_64)$5 >> (uint_64)(int_64)8
	*($11 + [80]) = $9)
	*($11 + [88]) = (int_64)-1
	*($11 + [96]) = (int_64)0
	*($11 + [72]) = *($0)
	$6 = CALL $12(($11 + [72]), $9, [480])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [512])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [544])
	CALL eosio_assert(((int_64)$5 == (int_64)*($6 + [8])), [576])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$7 }
	$10 = uint_32($10 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$10 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($10 <= [257]), [608])
	$8 = ($3 + [8])
	*(($10 = (($11 + [56]) + [8]))) = *($8)
	$9 = *($3)
	*((($11 + [24]) + [12])) = *((($11 + [56]) + [12]))
	*((($11 + [24]) + [8])) = *($10)
	*($11 + [56]) = $9
	*($11 + [28]) = *($11 + [60])
	*($11 + [24]) = *($11 + [56])
	CALL _ZN8ffgtoken11sub_balanceEyN5eosio5assetE($0, $1, ($11 + [24]))
	*(($10 = (($11 + [40]) + [8]))) = *($8)
	$9 = *($3)
	*((($11 + [8]) + [12])) = *((($11 + [40]) + [12]))
	*((($11 + [8]) + [8])) = *($10)
	*($11 + [40]) = $9
	*($11 + [12]) = *($11 + [44])
	*($11 + [8]) = *($11 + [40])
	CALL _ZN8ffgtoken11add_balanceEyN5eosio5assetEy($0, $2, ($11 + [8]), $1)
	$8 = *($11 + [96])
	if ( ($8 == 0) ){ goto $label$8 }
	$0 = ($11 + [100])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$10 = ($10 + [-24])
	$3 = *($10)
	*($10) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $106($3)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$11 }
	$10 = *(($11 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$10 = $8
	
.LABEL $label$9
	*($0) = $8
	CALL $106($10)
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [112])
}

int_32 .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [112])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $6($0, $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [112])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN8ffgtoken11sub_balanceEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	*($8 + [56]) = $1
	*(($8 + [48])) = [0]
	*($8 + [24]) = $1
	*($8 + [32]) = (int_64)-1
	*($8 + [40]) = (int_64)0
	*($8 + [16]) = *($0)
	$3 = *($2 + [8])
	$7 = CALL $18(($8 + [16]), (uint_64)$3 >> (uint_64)(int_64)8), [976])
	CALL $19($8, $0, ($8 + [56]))
	$1 = *($7)
	$4 = *($7 + [8])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$4), [1008])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *($8))) > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$4 == (int_64)$3), [1120])
	$4 = *($2)
	CALL eosio_assert(((int_64)$1 >= (int_64)$4), [1184])
	if ( ((int_64)$4 != (int_64)*($7)) ){ goto $label$3 }
	CALL $20(($8 + [16]), $7)
	$0 = *($8 + [40])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($8 + [56])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($8 + [16])), [688])
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)CALL $fimport$2()), [736])
	$2 = ($7 + [8])
	$1 = *($2)
	CALL eosio_assert(((int_64)$3 == (int_64)$1), [1008])
	$3 = (int_64)
	*($7) = $3(*($7) - $4))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [1088])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($2) >> (uint_64)(int_64)8)), [912])
	CALL eosio_assert([1], [288])
	CALL memcpy(($8 + [64]), $7, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($8 + [64]) | [8]), $2, [8])
	CALL db_update_i64(*($7 + [20]), $5, ($8 + [64]), [16])
	$7 = (($8 + [16]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$4 }
	*($7) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$4
	$0 = *($8 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($8 + [44])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $106($2)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($8 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $0
	
.LABEL $label$5
	*($6) = $0
	CALL $106($7)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [800])
	$5 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [880])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	*($6 + [48]) = ($6 + [26])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [56]) = ($6 + [40])
	*($6 + [68]) = ($1 + [8])
	*($6 + [64]) = $1
	*($6 + [72]) = ($1 + [9])
	*($6 + [76]) = ($1 + [16])
	CALL $68(($6 + [64]), ($6 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $6, [26])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [112])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $15($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [112])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$5 = *($1)
	*($7 + [8]) = $5
	*($7 + [16]) = $5
	*($7 + [44]) = [0]
	$2 = CALL db_find_i64($5, $5, (int_64)-4157661383434960896, *($2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $21(($7 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($7 + [8])), [112])
	$3 = CALL current_time()
	$4 = *(($6 + [16]))
	$5 = *($6 + [8])
	if ( ((int_64)*($6 + [24]) < (int_64)1) ){ goto $label$4 }
	if ( ((uint_64)((int_64)*($6 + [40]) + (int_64)86400) <= (uint_64)((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$4 }
	CALL eosio_assert(((int_64)*(($6 + [32])) == (int_64)$4), [800])
	$5 = ((int_64)*(($6 + [24])) + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [880])
	
.LABEL $label$4
	*($0 + [8]) = $4
	*($0) = $5
	$2 = *($7 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($0 + [8]) = (int_64)1195787780
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$5 = (int_64)4671046
	
.LOOP $label$6:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$0 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($0, [32])
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = ($7 + [36])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL $106($0)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($7 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $2
	
.LABEL $label$9
	*($1) = $2
	CALL $106($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN8ffgtoken7setgameEyhyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1712]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [2]), [1728])
	CALL eosio_assert(CALL $fimport$14($3), [1744])
	CALL $60($0, $4)
	$6 = [0]
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	$8 = *($0)
	*($12 + [8]) = $8
	*($12 + [16]) = $8
	$5 = CALL db_find_i64($8, $8, (int_64)7035937633859534848, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $56(($12 + [8]), $5)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($12 + [8])), [112])
	
.LABEL $label$5
	if ( ((int_64)$1 == (int_64)2) ){ goto $label$11 }
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$8 }
	CALL eosio_assert(($6 == 0), [1776])
	$7 = *($0)
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)CALL $fimport$2()), [224])
	*(($5 = CALL $105([48])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$0 = ($5 + [16])
	$8 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$11 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1808])
	CALL eosio_assert($5, [1840])
	CALL eosio_assert($5, [1888])
	$5 = CALL db_next_i64(*($6 + [36]), ($12 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	CALL $56(($12 + [8]), $5)
	
.LABEL $label$15
	CALL $62(($12 + [8]), $6)
	$4 = *($12 + [32])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$10
	$11 = [0]
	
.LABEL $label$9
	CALL eosio_assert($11, [32])
	*($5 + [32]) = ($12 + [8])
	*($5 + [8]) = $2
	*($5) = $3
	*(($0 + [12])) = *(($4 + [12]))
	*(($0 + [8])) = *(($4 + [8]))
	*(($0 + [4])) = *(($4 + [4]))
	*($0) = *($4)
	*($12 + [96]) = (($12 + [48]) + [25])
	*($12 + [92]) = ($12 + [48])
	*($12 + [88]) = ($12 + [48])
	*($12 + [104]) = ($12 + [88])
	*($12 + [116]) = ($5 + [8])
	*($12 + [112]) = $5
	*($12 + [120]) = $0
	CALL $61(($12 + [112]), ($12 + [104]))
	$8 = *($5)
	$4 = CALL db_store_i64(*((($12 + [8]) + [8])), (int_64)7035937633859534848, $7, $8, ($12 + [48]), [25])
	*($5 + [36]) = $4
	$6 = ($12 + [24])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$16 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($12 + [112]) = $5
	$8 = *($5)
	*($12 + [48]) = $8
	*($12 + [88]) = $4
	$0 = ($12 + [36])
	$6 = *($0)
	if ( ((uint_32)$6 >= (uint_32)*(($12 + [40]))) ){ goto $label$18 }
	*($6 + [8]) = $8
	*($6 + [16]) = $4
	*($12 + [112]) = [0]
	*($6) = $5
	*($0) = ($6 + [24])
	goto $label$17 
	
.LABEL $label$18
	CALL $58(($12 + [32]), ($12 + [112]), ($12 + [48]), ($12 + [88]))
	
.LABEL $label$17
	$6 = *($12 + [112])
	*($12 + [112]) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $106($6)
	
.LABEL $label$8
	$4 = *($12 + [32])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($12 + [36])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	CALL $106($5)
	
.LABEL $label$22
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($12 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $4
	
.LABEL $label$19
	*($0) = $4
	CALL $106($6)
	
.LABEL $label$6
	*([0] + [4]) = ($12 + [128])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $105($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $109($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

int_32 .FUNC $53 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [32])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $105([88])
	CALL $42($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $41(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $106($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [368])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $105([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = ($4 + [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [32])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = $3
	CALL $57(($8 + [32]), ($8 + [24]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $58($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $106($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [400])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $105([88])
	CALL $39($6)
	*($6 + [72]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [56])
	*($8 + [60]) = ($6 + [64])
	CALL $40(($8 + [40]), ($8 + [32]))
	*($6 + [76]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $41(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $113($0, $1, $2, CALL $117($2))
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $110($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $105($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $106($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	return CALL $109($0, $1, CALL $117($1))
}

void .FUNC $118 ()
{
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $105([80])
	CALL $53($6)
	*($6 + [64]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	*($8 + [44]) = ($6 + [48])
	CALL $54(($8 + [32]), ($8 + [24]))
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [68])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $55(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	$4 = *(($1 + [32]))
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$3 = *($1)
	*($6 + [8]) = $3
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($6 + [16]) = $4)
	$1 = [0]
	$2 = CALL db_find_i64($3, $4, (int_64)-4157508551318700032, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $6(($6 + [8]), $2)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($6 + [8])), [112])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1616])
	CALL memcpy($0, $1, [40])
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $106($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $106($1)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $106 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $105([64])
	CALL $22($6)
	*($6 + [48]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	CALL $23(($8 + [32]), ($8 + [24]))
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [52])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1328])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $106($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $106($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [400])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $22 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [32])
	return $0
}

void .FUNC _ZN8ffgtoken6miningEyyN5eosio5assetEyy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	float_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [384])
	*([0] + [4]) = $14
	*($14 + [376]) = $1
	CALL require_auth($2)
	CALL $26($0, $2)
	CALL eosio_assert(CALL $fimport$14($1), [1392])
	CALL $27($0, $3)
	CALL $28(($14 + [336]), $0)
	CALL eosio_assert(((int_64)*($14 + [368]) != (int_64)$1), [1424])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1456]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$10 != (int_64)$1), [1472])
	$9 = *(($0 + [32]))
	$12 = [0]
	*((($14 + [288]) + [32])) = [0]
	*($14 + [304]) = (int_64)-1
	*($14 + [312]) = (int_64)0
	$8 = *($0)
	*($14 + [288]) = $8
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	*($14 + [296]) = $9)
	$7 = CALL db_find_i64($8, $9, (int_64)-7949128890230767616, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $29(($14 + [288]), $7)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)($14 + [288])), [112])
	
.LABEL $label$5
	$9 = *($12)
	if ( ((uint_64)$9 > (uint_64)(int_64)14700000000) ){ goto $label$8 }
	*($14 + [328]) = (int_64)4611686018427387904
	$13 = (float_64)2
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_64)$9 > (uint_64)(int_64)29400000000) ){ goto $label$9 }
	*($14 + [328]) = (int_64)4607182418800017408
	$13 = (float_64)1
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_64)$9 > (uint_64)(int_64)44100000000) ){ goto $label$10 }
	*($14 + [328]) = (int_64)4602678819172646912
	$13 = (float_64)0.5
	goto $label$7 
	
.LABEL $label$10
	if ( ((uint_64)$9 > (uint_64)(int_64)58800000000) ){ goto $label$11 }
	*($14 + [328]) = (int_64)4598175219545276416
	$13 = (float_64)0.25
	goto $label$7 
	
.LABEL $label$11
	if ( ((uint_64)$9 > (uint_64)(int_64)88200000000) ){ goto $label$12 }
	*($14 + [328]) = (int_64)4593671619917905920
	$13 = (float_64)0.125
	goto $label$7 
	
.LABEL $label$12
	if ( ((uint_64)$9 > (uint_64)(int_64)117600000000) ){ goto $label$13 }
	*($14 + [328]) = (int_64)4589168020290535424
	$13 = (float_64)0.0625
	goto $label$7 
	
.LABEL $label$13
	if ( ((uint_64)$9 > (uint_64)(int_64)147000000000) ){ goto $label$6 }
	*($14 + [328]) = (int_64)4584664420663164928
	$13 = (float_64)0.03125
	
.LABEL $label$7
	*($14 + [280]) = (int_64)1195787780
	$8 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)$13))
	*($14 + [272]) = $8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	CALL eosio_assert($6, [32])
	*($14 + [264]) = (int_64)1195787780
	*($14 + [256]) = (int_64)0
	CALL eosio_assert([1], [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$6 = [0]
	
.LABEL $label$19
	CALL eosio_assert($6, [32])
	*($14 + [248]) = (int_64)1195787780
	*($14 + [240]) = (int_64)0
	CALL eosio_assert([1], [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	
.LOOP $label$28:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$28 }
	
.LABEL $label$27
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$6 = [0]
	
.LABEL $label$24
	CALL eosio_assert($6, [32])
	CALL $30(($14 + [224]), $0, $4)
	*(($7 = (($14 + [208]) + [8]))) = *((($14 + [272]) + [8]))
	$9 = *($14 + [376])
	*($14 + [208]) = *($14 + [272])
	CALL $115(($14 + [192]), ($14 + [224]))
	*((($14 + [56]) + [8])) = *($7)
	*($14 + [56]) = *($14 + [208])
	CALL $31($0, $9, ($14 + [56]), $2, ($14 + [192]))
	if ( ((*($14 + [192]) & [1]) == 0) ){ goto $label$29 }
	CALL $106(*($14 + [200]))
	$8 = *($14 + [272])
	
.LABEL $label$29
	$13 = ((float_64)(CASTING float_64)(int_64 $8) / (float_64)(float_64)147e9)
	if ( ((int_64)*($12 + [16]) >= (int_64)42000000000) ){ goto $label$30 }
	$8 = (Rounds 0)(((float_64)$13 * (float_64)(float_64)42e9))
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$6 = [0]
	
.LABEL $label$31
	CALL eosio_assert($6, [32])
	*(($14 + [264])) = (int_64)1195787780
	*($14 + [256]) = $8
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1504]
	$10 = (int_64)0
	
.LOOP $label$36:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$37 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$6 = ($6 + [165])
	goto $label$38 
	
.LABEL $label$39
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$37
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$36 }
	*(($7 = (($14 + [176]) + [8]))) = *((($14 + [256]) + [8]))
	*($14 + [176]) = *($14 + [256])
	CALL $115(($14 + [160]), ($14 + [224]))
	*((($14 + [40]) + [8])) = *($7)
	*($14 + [40]) = *($14 + [176])
	CALL $31($0, $10, ($14 + [40]), $2, ($14 + [160]))
	if ( ((*($14 + [160]) & [1]) == 0) ){ goto $label$30 }
	CALL $106(*($14 + [168]))
	
.LABEL $label$30
	if ( ((int_64)*($12 + [32]) >= (int_64)21000000000) ){ goto $label$40 }
	$8 = (Rounds 0)(((float_64)$13 * (float_64)(float_64)21e9))
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$6 = [0]
	
.LABEL $label$41
	CALL eosio_assert($6, [32])
	*(($14 + [248])) = (int_64)1195787780
	*($14 + [240]) = $8
	CALL eosio_assert([1], [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$6 = [0]
	
.LABEL $label$46
	CALL eosio_assert($6, [32])
	if ( ((int_64)*($0) == (int_64)$5) ){ goto $label$51 }
	$8 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($14 + [272])) * (float_64)(float_64)0.05))
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$9 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	
.LOOP $label$56:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$56 }
	
.LABEL $label$55
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$6 = [0]
	
.LABEL $label$52
	CALL eosio_assert($6, [32])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$51 }
	$7 = (($14 + [240]) + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)1195787780), [1120])
	if ( ((int_64)*($14 + [240]) <= (int_64)$8) ){ goto $label$51 }
	CALL eosio_assert(((int_64)*($7) == (int_64)1195787780), [1008])
	$9 = (int_64)
	*($14 + [240]) = $9(*($14 + [240]) - $8))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)*($14 + [240]) < (int_64)4611686018427387904), [1088])
	*($14 + [152]) = (int_64)1195787780
	*($14 + [144]) = $8
	CALL $115(($14 + [128]), ($14 + [224]))
	*((($14 + [24]) + [8])) = *($14 + [152])
	*($14 + [24]) = *($14 + [144])
	CALL $31($0, $5, ($14 + [24]), $2, ($14 + [128]))
	if ( ((*($14 + [128]) & [1]) == 0) ){ goto $label$51 }
	CALL $106(*($14 + [136]))
	
.LABEL $label$51
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1520]
	$10 = (int_64)0
	
.LOOP $label$57:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$58 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$6 = ($6 + [165])
	goto $label$59 
	
.LABEL $label$60
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$58
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$57 }
	*(($7 = (($14 + [112]) + [8]))) = *((($14 + [240]) + [8]))
	*($14 + [112]) = *($14 + [240])
	CALL $115(($14 + [96]), ($14 + [224]))
	*((($14 + [8]) + [8])) = *($7)
	*($14 + [8]) = *($14 + [112])
	CALL $31($0, $10, ($14 + [8]), $2, ($14 + [96]))
	if ( ((*($14 + [96]) & [1]) == 0) ){ goto $label$40 }
	CALL $106(*($14 + [104]))
	
.LABEL $label$40
	*($14 + [84]) = $0
	*($14 + [76]) = ($14 + [256])
	*($14 + [72]) = ($14 + [272])
	*($14 + [80]) = ($14 + [240])
	*($14 + [88]) = ($14 + [328])
	CALL $32(($14 + [288]), $12, ($14 + [72]))
	$9 = *((($14 + [256]) + [8]))
	*((($14 + [72]) + [8])) = $9
	*($14 + [72]) = *($14 + [256])
	CALL eosio_assert(((int_64)$9 == (int_64)*((($14 + [240]) + [8]))), [800])
	$9 = ((int_64)*($14 + [72]) + (int_64)*($14 + [240]))
	*($14 + [72]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [880])
	CALL $33($0, ($14 + [376]), $3, ($14 + [272]), ($14 + [72]))
	if ( ((*($14 + [224]) & [1]) == 0) ){ goto $label$6 }
	CALL $106(*($14 + [232]))
	
.LABEL $label$6
	$0 = *($14 + [312])
	if ( ($0 == 0) ){ goto $label$61 }
	$12 = ($14 + [316])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$63 }
	
.LOOP $label$64:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$65 }
	CALL $106($6)
	
.LABEL $label$65
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$64 }
	$7 = *(($14 + [312]))
	goto $label$62 
	
.LABEL $label$63
	$7 = $0
	
.LABEL $label$62
	*($12) = $0
	CALL $106($7)
	
.LABEL $label$61
	*([0] + [4]) = ($14 + [384])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$2 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [512])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [1664])
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)1397703940), [512])
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	$5 = [0]
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$3 = *($0)
	*($6 + [8]) = $3
	*($6 + [16]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)7035937633859534848, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $56(($6 + [8]), $0) + [32]) == (int_32)($6 + [8])), [112])
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [1696])
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $106($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $106($5)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $110($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [400])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [400])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [288])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [288])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $105(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $106($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = *($1)
	$5 = *(*($3))
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$3 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	*($1 + [8]) = *(*($3 + [4]))
	goto $label$1 
	
.LABEL $label$3
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [9]) = *(*($3 + [4]))
	goto $label$1 
	
.LABEL $label$2
	*($1 + [9]) = *(*($3 + [4]))
	
.LABEL $label$1
	CALL eosio_assert([1], [912])
	$7 = $7
	$3 = ($7 + [-32])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-6])
	*($6 + [24]) = ($6 + [8])
	*($6 + [32]) = $1
	*($6 + [36]) = ($1 + [8])
	*($6 + [40]) = ($1 + [9])
	*($6 + [44]) = ($1 + [16])
	CALL $68(($6 + [32]), ($6 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $3, [26])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [368])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $105([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = ($4 + [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [32])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [9])
	*($8 + [44]) = $3
	CALL $69(($8 + [32]), ($8 + [24]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $67($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $106($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1 + [8]) = [257]
	*($1) = *(*($6))
	$2 = *($0)
	CALL eosio_assert([1], [304])
	$4 = ($1 + [9])
	$3 = ($1 + [8])
	$5 = (int_64)4671046
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [32])
	*(($1 + [24])) = (int_64)1195787780
	*($1 + [16]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-32])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-6])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $1
	*($8 + [40]) = $4
	*($8 + [44]) = ($1 + [16])
	CALL $68(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), $5, $6, [26])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [288])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$2 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [512])
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)1397703940), [512])
}

void .FUNC _ZN8ffgtoken7settingEyyh (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	*($9 + [64]) = $2
	*($9 + [63]) = $3
	CALL require_auth($1)
	$2 = (int_64)0
	$6 = (int_64)59
	$5 = [1712]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$5 = [1]
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$5 }
	$2 = (int_64)0
	$6 = (int_64)59
	$5 = [1920]
	$7 = (int_64)0
	
.LOOP $label$6:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$7 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$7
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$6 }
	$5 = ((int_64)$7 == (int_64)$1)
	
.LABEL $label$5
	CALL eosio_assert($5, [1696])
	CALL eosio_assert(((int_32)($3 | [1]) == (int_32)[1]), [1936])
	$5 = [0]
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	*($9 + [40]) = (int_64)0
	$2 = *($0)
	*($9 + [16]) = $2
	*($9 + [24]) = $2
	$4 = CALL db_find_i64($2, $2, (int_64)7235159550150574080, $2)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$12 }
	$5 = CALL $64(($9 + [16]), $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($9 + [16])), [112])
	$2 = *($0)
	*($9 + [84]) = ($9 + [63])
	*($9 + [80]) = ($9 + [64])
	CALL eosio_assert([1], [640])
	CALL $65(($9 + [16]), $5, $2, ($9 + [80]))
	$0 = *($9 + [40])
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = *($0)
	*($9 + [8]) = $0
	*($9 + [104]) = $2
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)CALL $fimport$2()), [224])
	*($9 + [84]) = ($9 + [8])
	*($9 + [80]) = ($9 + [16])
	*($9 + [88]) = ($9 + [104])
	*(($0 = CALL $105([48])) + [24]) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$2 = (int_64)5462355
	
.LOOP $label$14:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($4, [32])
	*($0 + [32]) = ($9 + [16])
	CALL $66(($9 + [80]), $0)
	*($9 + [96]) = $0
	$2 = *($0)
	*($9 + [80]) = $2
	$4 = *($0 + [36])
	*($9 + [76]) = $4
	$3 = ($9 + [44])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($9 + [48]))) ){ goto $label$18 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($9 + [96]) = [0]
	*($5) = $0
	*($3) = ($5 + [24])
	goto $label$17 
	
.LABEL $label$18
	CALL $67(($9 + [40]), ($9 + [96]), ($9 + [80]), ($9 + [76]))
	
.LABEL $label$17
	$5 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL $106($5)
	
.LABEL $label$19
	$0 = *($9 + [40])
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = ($9 + [44])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL $106($4)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($9 + [40]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $0
	
.LABEL $label$20
	*($3) = $0
	CALL $106($5)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1328])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $106($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $106($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $102([2324], $0)
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [32])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [400])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [400])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10806]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10808])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10806]) = [1]
	$7 = ($7 << [16])
	*([0] + [10808]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10808])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10808]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10806]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10806]) = [1]
	$3 = ($3 << [16])
	*([0] + [10808]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10808])
	
.LABEL $label$8
	*([0] + [10808]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $103($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10720])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10812])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10708])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10516]
	$1 = (((int_32)$2 * (int_32)[12]) + [10516])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$10 = (*([0] + [4]) - [112])
	$12 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$11 = *($1)
	$1 = [0]
	$8 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $3)
	
.LABEL $label$1
	*((($12 + [16]) + [24])) = (int_64)1398362884
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = (int_64)0
	*($12 + [32]) = (int_64)0
	CALL eosio_assert([1], [304])
	$9 = (int_64)5462355
	
.LOOP $label$5:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$10 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($10, [32])
	*($12 + [56]) = (int_64)0
	*($12 + [48]) = (int_64)0
	*($12 + [100]) = $8
	*($12 + [96]) = $8
	*($12 + [104]) = ($8 + $3)
	*($12 + [64]) = ($12 + [96])
	*($12 + [80]) = ($12 + [16])
	CALL $95(($12 + [80]), ($12 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	$9 = *((($12 + [16]) + [8]))
	*(($12 + [76])) = *(($12 + [44]))
	*(($1 = (($12 + [64]) + [8]))) = *(($12 + [40]))
	$4 = *($12 + [16])
	*($12 + [64]) = *($12 + [32])
	*($12 + [68]) = *(($12 + [36]))
	$6 = *(($12 + [56]))
	$5 = *(($12 + [48]))
	*((($12 + [80]) + [8])) = *($1)
	*($12 + [80]) = *($12 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$11 = *((*($1) + $11))
	
.LABEL $label$9
	$7 = *((($12 + [80]) + [8]))
	*((($12 + [96]) + [8])) = $7
	*(($12 + [8])) = $7
	$7 = *($12 + [80])
	*($12 + [96]) = $7
	*($12) = $7
	CALL void $1((int_32 $4), (int_64 $9), (int_64 $12), (int_32 $5), (int_64 $6), (int_64 $11))
	*([0] + [4]) = ($12 + [112])
	return [1]
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [32])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $96(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $97(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $106(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $100(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

int_32 .FUNC $86 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = $1
	*(($0 + [16])) = (int_64)1397703940
	CALL eosio_assert([1], [304])
	$1 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [32])
	*(($0 + [32])) = (int_64)1195787780
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (int_64)4671046
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [32])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2224]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2240]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2256])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2224]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $86(($9 + [136]), $0)
	if ( ((int_64)$2 > (int_64)-4157661383434960897) ){ goto $label$28 }
	if ( ((int_64)$2 > (int_64)-4417253565123264513) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-7807295961876660224) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$14 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [1]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $93($4, ($9 + [64]))
	goto $label$14 
	
.LABEL $label$28
	if ( ((int_64)$2 > (int_64)-3102536759825661953) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [2]
	*($9 + [16 align=4]) = *($9 + [120])
	CALL $88($4, ($9 + [16]))
	goto $label$14 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)-4417253565123264512) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-4417020450404564992) ){ goto $label$14 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $91($4, ($9 + [40]))
	goto $label$14 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$14 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [4]
	*($9 + [8 align=4]) = *($9 + [128])
	CALL $87($4, ($9 + [8]))
	goto $label$14 
	
.LABEL $label$25
	*($9 + [116]) = [0]
	*($9 + [112]) = [5]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $89($4, ($9 + [24]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [92]) = [0]
	*($9 + [88]) = [6]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $92($4, ($9 + [48]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [108]) = [0]
	*($9 + [104]) = [7]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $90($4, ($9 + [32]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [84]) = [0]
	*($9 + [80]) = [8]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $92($4, ($9 + [56]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [176])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = ($1 + [40])
	*(($8 = $9) + [16]) = *($4)
	$5 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [800])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [880])
	CALL eosio_assert([1], [304])
	$6 = (int_64)4671046
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [32])
	*(($1 + [32])) = (int_64)1195787780
	*($1 + [24]) = (int_64)0
	*(($1 + [40])) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [912])
	$7 = $9
	$3 = ($7 + [-48])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = $7
	*($8 + [24]) = $8
	*($8 + [36]) = ($1 + [8])
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = $4
	CALL $73(($8 + [32]), ($8 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $3, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [32]) = *($4)
	if ( (CALL memcmp(($8 + [16]), ($8 + [32]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [56])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157661383434960896, ($8 + [24]), $5)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($8 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN8ffgtoken7restakeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL $71($0)
	*((($6 + [56]) + [32])) = [0]
	*($6 + [72]) = (int_64)-1
	*($6 + [80]) = (int_64)0
	$4 = *($0)
	*($6 + [56]) = $4
	*($6 + [64]) = $4
	*($6 + [92]) = [0]
	$3 = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)-4157661383434960896, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $21(($6 + [56]), $2)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($6 + [56])), [112])
	
.LABEL $label$1
	$2 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($2, [2192])
	*(($5 = (($6 + [40]) + [8]))) = *(($3 + [32]))
	$4 = *($3 + [24])
	*($6 + [40]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)0), [2192])
	$4 = *($0)
	*($6 + [36]) = $0
	*($6 + [32]) = ($6 + [40])
	CALL eosio_assert($2, [640])
	CALL $84(($6 + [56]), $3, $4, ($6 + [32]))
	$4 = *($5)
	*((($6 + [16]) + [8])) = $4
	*(($6 + [8])) = $4
	$4 = *($6 + [40])
	*($6 + [16]) = $4
	*($6) = $4
	CALL $74($0, $6)
	$2 = *($6 + [80])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [84])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $106($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [80]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $106($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	*(($9 = $10) + [16]) = *($1 + [40])
	$5 = *($1)
	CALL eosio_assert([1], [304])
	$4 = ($1 + [40])
	$6 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [32])
	*(($1 + [32])) = (int_64)1195787780
	*($1 + [24]) = (int_64)0
	*(($1 + [40])) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [912])
	$8 = $10
	$7 = ($8 + [-48])
	*([0] + [4]) = $7
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = $8
	*($9 + [24]) = $9
	*($9 + [36]) = ($1 + [8])
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + [24])
	*($9 + [44]) = $4
	CALL $73(($9 + [32]), ($9 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $7, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [32]) = *($4)
	if ( (CALL memcmp(($9 + [16]), ($9 + [32]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [56])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157661383434960896, ($9 + [24]), $5)
	*($1) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $2, ($9 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [1008])
	$5 = (int_64)
	*($1 + [16]) = $5(*($1 + [16]) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	*($6 + [48]) = ($6 + [26])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [56]) = ($6 + [40])
	*($6 + [68]) = ($1 + [8])
	*($6 + [64]) = $1
	*($6 + [72]) = ($1 + [9])
	*($6 + [76]) = ($1 + [16])
	CALL $68(($6 + [64]), ($6 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $6, [26])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$4 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)7235159550150574080, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $64(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	$3 = *($0)
	*($5) = $1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [640])
	CALL $81(($5 + [8]), $4, $3, $5)
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$2 = ($5 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $106($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($2) = $1
	CALL $106($4)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$7 = *($0 + [4])
	*($1) = *(*($7))
	$2 = *($0)
	$7 = *($7 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	CALL eosio_assert([1], [304])
	$3 = ($1 + [8])
	$6 = (int_64)4671046
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [32])
	*(($1 + [32])) = (int_64)1195787780
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$8 = $10
	$7 = ($8 + [-48])
	*([0] + [4]) = $7
	*($9 + [12]) = $7
	*($9 + [8]) = $7
	*($9 + [16]) = $8
	*($9 + [24]) = ($9 + [8])
	*($9 + [36]) = $3
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + [24])
	$8 = ($1 + [40])
	*($9 + [44]) = $8
	CALL $73(($9 + [32]), ($9 + [24]))
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-4157661383434960896, *(*($0 + [8])), $6, $7, [48])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [32]) = *($8)
	*($1 + [56]) = CALL db_idx64_store($6, (int_64)-4157661383434960896, $4, $5, ($9 + [32]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC _ZN8ffgtoken5stakeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [192])
	*([0] + [4]) = $10
	*($10 + [88]) = $1
	CALL require_auth($1)
	CALL $71($0)
	$9 = *($2 + [8])
	*((($10 + [96]) + [32])) = [0]
	*($10 + [104]) = $1
	*($10 + [112]) = (int_64)-1
	*($10 + [120]) = (int_64)0
	*($10 + [96]) = *($0)
	$8 = CALL $18(($10 + [96]), (uint_64)$9 >> (uint_64)(int_64)8), [480]
	$1 = *($8) + [8])
	$7 = *($8)
	$3 = *($10 + [120])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($10 + [124])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $106($4)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$4 }
	$8 = *(($10 + [120]))
	goto $label$2 
	
.LABEL $label$3
	$8 = $3
	
.LABEL $label$2
	*($5) = $3
	CALL $106($8)
	$9 = *(($2 + [8]))
	
.LABEL $label$1
	CALL $19(($10 + [72]), $0, ($10 + [88]))
	$6 = *($2)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [1968])
	CALL eosio_assert(((int_64)*($10 + [80]) == (int_64)$1), [1008])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($10 + [72]))) > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$1 == (int_64)$9), [1120])
	CALL eosio_assert(((int_64)$7 >= (int_64)$6), [2000])
	*((($10 + [32]) + [32])) = [0]
	$1 = *($0)
	*($10 + [32]) = $1
	*($10 + [48]) = (int_64)-1
	*($10 + [56]) = (int_64)0
	*($10 + [40]) = $1
	*($10 + [68]) = [0]
	$8 = CALL db_find_i64($1, $1, (int_64)-4157661383434960896, *($10 + [88]))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$7 }
	$8 = CALL $21(($10 + [32]), $8)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($10 + [32])), [112])
	$9 = *($0)
	CALL eosio_assert([1], [640])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($10 + [32])), [688])
	CALL eosio_assert(((int_64)*($10 + [32]) == (int_64)CALL $fimport$2()), [736])
	$4 = ($8 + [40])
	*($10 + [160]) = *($4)
	$1 = *($8)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($8 + [16]))), [800])
	$7 = ((int_64)*($8 + [8]) + (int_64)*($2))
	*($8 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [880])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [912])
	*($10 + [152]) = (($10 + [96]) + [48])
	*($10 + [148]) = ($10 + [96])
	*($10 + [144]) = ($10 + [96])
	*($10 + [168]) = ($10 + [144])
	*($10 + [180]) = ($8 + [8])
	*($10 + [176]) = $8
	*($10 + [184]) = ($8 + [24])
	*($10 + [188]) = $4
	CALL $73(($10 + [176]), ($10 + [168]))
	CALL db_update_i64(*($8 + [52]), $9, ($10 + [96]), [48])
	$3 = (($10 + [32]) + [16])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$8 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($10 + [176]) = *($4)
	if ( (CALL memcmp(($10 + [160]), ($10 + [176]), [8]) == 0) ){ goto $label$6 }
	$4 = ($8 + [56])
	$8 = *($4)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$9 }
	$8 = CALL db_idx64_find_primary(*($10 + [32]), *(($10 + [40])), (int_64)-4157661383434960896, ($10 + [168]), $1)
	*($4) = $8
	
.LABEL $label$9
	CALL db_idx64_update($8, $9, ($10 + [176]))
	goto $label$6 
	
.LABEL $label$7
	$1 = *($0)
	*($10 + [180]) = $2
	*($10 + [184]) = $0
	*($10 + [176]) = ($10 + [88])
	*($10 + [144]) = $1
	CALL eosio_assert(((int_64)*($10 + [32]) == (int_64)CALL $fimport$2()), [224])
	*($10 + [100]) = ($10 + [176])
	*($10 + [96]) = ($10 + [32])
	*($10 + [104]) = ($10 + [144])
	$8 = CALL $105([64])
	CALL $22($8)
	*($8 + [48]) = ($10 + [32])
	CALL $72(($10 + [96]), $8)
	*($10 + [168]) = $8
	$1 = *($8)
	*($10 + [96]) = $1
	$3 = *($8 + [52])
	*($10 + [160]) = $3
	$5 = ($10 + [60])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($10 + [64]))) ){ goto $label$11 }
	*($4 + [8]) = $1
	*($4 + [16]) = $3
	*($10 + [168]) = [0]
	*($4) = $8
	*($5) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $24(($10 + [56]), ($10 + [168]), ($10 + [96]), ($10 + [160]))
	
.LABEL $label$10
	$8 = *($10 + [168])
	*($10 + [168]) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $106($8)
	
.LABEL $label$6
	$1 = *(($2 + [8]))
	*((($10 + [16]) + [8])) = $1
	$9 = *($2)
	*(($10 + [8])) = $1
	*($10 + [16]) = $9
	*($10 + [4]) = *($10 + [20])
	*($10) = *($10 + [16])
	CALL $74($0, $10)
	$3 = *($10 + [56])
	if ( ($3 == 0) ){ goto $label$12 }
	$0 = ($10 + [60])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $106($4)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($10 + [56]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $3
	
.LABEL $label$13
	*($0) = $3
	CALL $106($8)
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [192])
}

void .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$0 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)7235159550150574080, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $64(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [2032])
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)[1]), [2064])
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $106($2)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $1
	
.LABEL $label$3
	*($4) = $1
	CALL $106($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC _ZN8ffgtoken7unstakeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($6 + [88]) = $1
	CALL require_auth($1)
	CALL $77($0)
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1968])
	$3 = [0]
	*(($6 + [80])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	$4 = *($0)
	*($6 + [48]) = $4
	*($6 + [56]) = $4
	*($6 + [84]) = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-4157661383434960896, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $21(($6 + [48]), $5)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($6 + [48])), [112])
	*($6 + [44]) = $3
	*($6 + [40]) = ($6 + [48])
	$5 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($6 + [44]) = [0]
	*($6 + [40]) = ($6 + [48])
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [2096])
	CALL eosio_assert(((int_64)*(($3 + [16])) == (int_64)*($2 + [8])), [1120])
	CALL eosio_assert(((int_64)*($3 + [8]) >= (int_64)*($2)), [2128])
	CALL $78($0, ($6 + [88]))
	$1 = *($0)
	*($6 + [32]) = $2
	*($6 + [36]) = ($6 + [40])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [640])
	CALL $79(($6 + [48]), $3, $1, ($6 + [32]))
	*(($3 = (($6 + [16]) + [8]))) = *($2 + [8])
	$1 = *($2)
	*(($6 + [12])) = *((($6 + [16]) + [12]))
	*(($6 + [8])) = *($3)
	*($6 + [16]) = $1
	*($6 + [4]) = *($6 + [20])
	*($6) = *($6 + [16])
	CALL $80($0, $6)
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = ($6 + [76])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $106($3)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($6 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $0
	
.LABEL $label$4
	*($5) = $0
	CALL $106($2)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$0 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)7235159550150574080, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $64(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [2032])
	CALL eosio_assert(((int_32)*($0 + [9]) == (int_32)[1]), [2160])
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $106($2)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $1
	
.LABEL $label$3
	*($4) = $1
	CALL $106($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$4 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)7235159550150574080, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $64(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	$3 = *($0)
	*($5) = $1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [640])
	CALL $75(($5 + [8]), $4, $3, $5)
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$2 = ($5 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $106($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($2) = $1
	CALL $106($4)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $39 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [32])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [304])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [32])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = *($1)
	CALL $37($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [8])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [24])
	*($5 + [116]) = ($1 + [40])
	*($5 + [120]) = ($1 + [56])
	*($5 + [124]) = ($1 + [64])
	CALL $38(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [16]))), [800])
	$3 = ((int_64)*($1 + [8]) + (int_64)*($2))
	*($1 + [8]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [880])
	$2 = *($0 + [4])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [32]))), [800])
	$3 = ((int_64)*($1 + [24]) + (int_64)*($2))
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [880])
	$0 = *($0 + [8])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [48]))), [800])
	$3 = ((int_64)*($1 + [40]) + (int_64)*($0))
	*($1 + [40]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [880])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$4 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	*($5 + [44]) = [0]
	$1 = CALL db_find_i64($2, $2, (int_64)-4157661383434960896, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $21(($5 + [8]), $1)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	$2 = CALL current_time()
	if ( ((int_64)*($4 + [24]) < (int_64)1) ){ goto $label$2 }
	if ( ((uint_64)((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)((int_64)*($4 + [40]) + (int_64)86400)) ){ goto $label$2 }
	$2 = *($0)
	*($5) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [640])
	CALL $82(($5 + [8]), $4, $2, $5)
	
.LABEL $label$2
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = ($5 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $106($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($5 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	
.LABEL $label$4
	*($3) = $1
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = ($1 + [40])
	*(($8 = $9) + [16]) = *($4)
	$5 = *($1)
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [16]))), [1008])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($6)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1088])
	if ( ((int_64)*(*(*($3 + [4]) + [4]) + [24]) < (int_64)1) ){ goto $label$2 }
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)((int_64)*(*(*(($3 + [4])) + [4]) + [40]) + (int_64)86400)) ){ goto $label$2 }
	$3 = *($3)
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$6 = ($1 + [24])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [800])
	$7 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [880])
	$6 = ($1 + [24])
	
.LABEL $label$1
	*(($1 + [40])) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [912])
	$9 = $9
	$3 = ($9 + [-48])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = $9
	*($8 + [24]) = $8
	*($8 + [36]) = ($1 + [8])
	*($8 + [32]) = $1
	*($8 + [40]) = $6
	*($8 + [44]) = $4
	CALL $73(($8 + [32]), ($8 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $3, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($8 + [32]) = *($4)
	if ( (CALL memcmp(($8 + [16]), ($8 + [32]), [8]) == 0) ){ goto $label$4 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157661383434960896, ($8 + [24]), $5)
	*($3) = $1
	
.LABEL $label$5
	CALL db_idx64_update($1, $2, ($8 + [32]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$5 = *($1 + [8])
	$6 = *($2)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)$5), [800])
	$3 = ((int_64)*($1) + (int_64)*($6))
	*($1) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [880])
	$6 = *($2 + [4])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [24]))), [800])
	$3 = ((int_64)*($1 + [16]) + (int_64)*($6))
	*($1 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [880])
	$6 = *($2 + [8])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [40]))), [800])
	$3 = ((int_64)*($1 + [32]) + (int_64)*($6))
	*($1 + [32]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [880])
	$4 = (Rounds 0)(((float_64)*(*($2 + [16])) * (float_64)(float_64)1e4))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$5 = (int_64)4671046
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [32])
	*(($1 + [56])) = (int_64)1195787780
	*($1 + [48]) = $4
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [912])
	$6 = $8
	$2 = ($6 + [-64])
	*([0] + [4]) = $2
	*($7 + [12]) = $2
	*($7 + [8]) = $2
	*($7 + [16]) = $6
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($1 + [16])
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + [32])
	*($7 + [44]) = ($1 + [48])
	CALL $43(($7 + [32]), ($7 + [24]))
	CALL db_update_i64(*($1 + [68]), (int_64)0, $2, [64])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$6 = *($0)
	*($7 + [24]) = $6
	*($7 + [32]) = $6
	$5 = CALL db_find_i64($6, $6, (int_64)-7807295948991758336, *($1))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL $35(($7 + [24]), $5)
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)($7 + [24])), [112])
	$6 = *($0)
	*($7 + [12]) = $3
	*($7 + [8]) = $2
	*($7 + [16]) = $4
	CALL eosio_assert([1], [640])
	CALL $36(($7 + [24]), $1, $6, ($7 + [8]))
	$2 = *($7 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($0)
	*($7 + [12]) = $2
	*($7 + [8]) = $1
	*($7 + [16]) = $3
	*($7 + [20]) = $4
	CALL $34($7, ($7 + [24]), $6, ($7 + [8]))
	$2 = *($7 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($7 + [52])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $106($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($3) = $2
	CALL $106($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$2 % (uint_64)(int_64)10))
	CALL $52(($6 + [16]), ( ($4 | [48]) ? ($4 + [55]) : ($4 <= [10]) ), $6)
	$3 = ((uint_64)$2 / (uint_64)(int_64)10)
	if ( (*($6) & [1]) ){ goto $label$3 }
	*($6) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($6 + [8]))) = [0]
	*($6 + [4]) = [0]
	
.LABEL $label$2
	CALL $108($6, [0])
	*(($6 + [8])) = *((($6 + [16]) + [8]))
	*($6) = *($6 + [16])
	$4 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $3
	if ( $4 ){ goto $label$1 }
	$4 = CALL $112($6, [0], [1552])
	$5 = ($4 + [8])
	*((($6 + [16]) + [8])) = *($5)
	*($6 + [16]) = *($4)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$4 = CALL $111(($6 + [16]), [1584])
	$2 = *($4)
	*($4) = (int_64)0
	*($0) = $2
	$4 = ($4 + [8])
	*(($0 + [8])) = *($4)
	*($4) = [0]
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $106(*($6 + [24]))
	
.LABEL $label$4
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	CALL $106(*(($6 + [8])))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [192])
	*([0] + [4]) = $13
	$9 = *(($0 + [32]))
	*((($13 + [88]) + [32])) = [0]
	*($13 + [104]) = (int_64)-1
	*($13 + [112]) = (int_64)0
	$11 = *($0)
	*($13 + [88]) = $11
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	*($13 + [96]) = $9)
	$12 = [0]
	$5 = CALL db_find_i64($11, $9, (int_64)-4157508551318700032, $9)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $6(($13 + [88]), $5)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)($13 + [88])), [112])
	
.LABEL $label$1
	*($13 + [128]) = $2
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [640])
	CALL $44(($13 + [88]), $12, (int_64)0, ($13 + [128]))
	$9 = *($12 + [32])
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$2 }
	$11 = *(($2 + [8]))
	*((($13 + [72]) + [8])) = $11
	$8 = *($2)
	*((($13 + [8]) + [8])) = $11
	*($13 + [72]) = $8
	*($13 + [12]) = *($13 + [76])
	*($13 + [8]) = *($13 + [72])
	CALL _ZN8ffgtoken11add_balanceEyN5eosio5assetEy($0, $9, ($13 + [8]), $9)
	$7 = *(($12 + [32]))
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$12 = [1536]
	$10 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$8 }
	$0 = *($12)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$0 = ($0 + [165])
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$4
	$12 = ($12 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$3 }
	*(($13 + [52])) = *(($2 + [12]))
	*(($0 = (($13 + [24]) + [24]))) = *(($2 + [8]))
	*(($13 + [44])) = *(($2 + [4]))
	*($13 + [32]) = $1
	*($13 + [24]) = $7
	*($13 + [40]) = *($2)
	CALL $115(($13 + [56]), $4)
	*(($12 = CALL $105([16]))) = $7
	*($12 + [8]) = $10
	*($13 + [176]) = $12
	$12 = ($12 + [16])
	*($13 + [184]) = $12
	*($13 + [180]) = $12
	*($13 + [128]) = *($13 + [24])
	*($13 + [136]) = *($13 + [32])
	*((($13 + [128]) + [24])) = *($0)
	*($13 + [144]) = *($13 + [40])
	$12 = (($13 + [24]) + [40])
	*(($0 = (($13 + [128]) + [40]))) = *($12)
	*($13 + [160]) = *($13 + [56])
	*($13 + [56]) = [0]
	*(($13 + [60])) = [0]
	*($12) = [0]
	CALL $45($6, (int_64)-3617168760277827584, ($13 + [176]), ($13 + [128]))
	if ( ((*($13 + [160]) & [1]) == 0) ){ goto $label$9 }
	CALL $106(*($0))
	
.LABEL $label$9
	$12 = *($13 + [176])
	if ( ($12 == 0) ){ goto $label$10 }
	*($13 + [180]) = $12
	CALL $106($12)
	
.LABEL $label$10
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$2 }
	CALL $106(*(($13 + [64])))
	
.LABEL $label$2
	$2 = *($13 + [112])
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($13 + [116])
	$12 = *($5)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $106($0)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$14 }
	$12 = *(($13 + [112]))
	goto $label$12 
	
.LABEL $label$13
	$12 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL $106($12)
	
.LABEL $label$11
	*([0] + [4]) = ($13 + [192])
}