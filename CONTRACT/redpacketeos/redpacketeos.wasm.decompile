(data (i32.const 4) "\c0~\00\00")
(data (i32.const 16) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 272) "carry == 0\00")
(data (i32.const 288) "./decode.hpp\00")
(data (i32.const 304) "DecodeBase58\00")
(data (i32.const 320) "EOS\00")
(data (i32.const 336) "Public key should be prefix with EOS\00")
(data (i32.const 384) "Decode pubkey failed\00")
(data (i32.const 416) "Invalid public key\00")
(data (i32.const 448) "only a-z1-5. can be used in first 12 ch of name.\00")
(data (i32.const 512) "only a-p. can be used in the 13th ch of name.\00")
(data (i32.const 560) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 624) "invalid symbol name\00")
(data (i32.const 656) "unexpected asset symbol input\00")
(data (i32.const 688) "invalid sell\00")
(data (i32.const 704) "invalid conversion\00")
(data (i32.const 736) "ACCOUNT\00")
(data (i32.const 752) "1\00")
(data (i32.const 768) "REDPACKET\00")
(data (i32.const 784) "2\00")
(data (i32.const 800) "TRANSFER\00")
(data (i32.const 816) "3\00")
(data (i32.const 832) "255\00")
(data (i32.const 848) "MULTY_NORMAL_ACCOUNT\00")
(data (i32.const 880) "MULTY_RANDOM_ACCOUNT\00")
(data (i32.const 912) "eosio\00")
(data (i32.const 928) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 992) "RAMCORE market not found\00")
(data (i32.const 1024) "error reading iterator\00")
(data (i32.const 1056) "read\00")
(data (i32.const 1072) "no such redpacket\00")
(data (i32.const 1104) "_\00")
(data (i32.const 1120) "get\00")
(data (i32.const 1136) "cannot transfer to self\00")
(data (i32.const 1168) "invalid quantity\00")
(data (i32.const 1200) "must transfer positive quantity\00")
(data (i32.const 1232) "token not supported\00")
(data (i32.const 1264) "eosio.token\00")
(data (i32.const 1280) "eosiotokener\00")
(data (i32.const 1296) "active\00")
(data (i32.const 1312) "transfer\00")
(data (i32.const 1328) "write\00")
(data (i32.const 1344) "ping:\t\00")
(data (i32.const 1360) "delete: \00")
(data (i32.const 1376) "defersend\00")
(data (i32.const 1392) "attempt to subtract asset with different symbol\00")
(data (i32.const 1440) "subtraction underflow\00")
(data (i32.const 1472) "subtraction overflow\00")
(data (i32.const 1504) "automatic withdraw red packet\00")
(data (i32.const 1536) "cannot pass end iterator to erase\00")
(data (i32.const 1584) "cannot increment end iterator\00")
(data (i32.const 1616) "object passed to erase is not in multi_index\00")
(data (i32.const 1664) "cannot erase objects in table of another contract\00")
(data (i32.const 1728) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1792) "not time up\00")
(data (i32.const 1808) "manual withdraw red packet\00")
(data (i32.const 1840) "cannot pass end iterator to modify\00")
(data (i32.const 1888) "object passed to modify is not in multi_index\00")
(data (i32.const 1936) "cannot modify objects in table of another contract\00")
(data (i32.const 2000) "updater cannot change primary key when modifying an object\00")
(data (i32.const 2064) "attempt to add asset with different symbol\00")
(data (i32.const 2112) "addition underflow\00")
(data (i32.const 2144) "addition overflow\00")
(data (i32.const 2176) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2240) "Not enough asset\00")
(data (i32.const 2272) "out of date\00")
(data (i32.const 2288) "cant get twice\00")
(data (i32.const 2304) "sig already used\00")
(data (i32.const 2336) "cannot create objects in table of another contract\00")
(data (i32.const 2400) "redpacket not valid\00")
(data (i32.const 2432) "this redpacket can only be used to create account\00")
(data (i32.const 2496) "redpacket is over\00")
(data (i32.const 2528) "remove\00")
(data (i32.const 2544) "redpacket fee\00")
(data (i32.const 2560) "redpacket asset too small.\00")
(data (i32.const 2592) "Welcome to CryptoKylin\00")
(data (i32.const 2624) "only EOS can be used to create account\00")
(data (i32.const 2672) "next primary key in table is at autoincrement limit\00")
(data (i32.const 2736) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 2800) "cannot decrement iterator at beginning of table\00")
(data (i32.const 2848) "illegal param count\00")
(data (i32.const 2880) "name has been used\00")
(data (i32.const 2912) "asset not enough\00")
(data (i32.const 2944) "create account: transfer remain asset\00")
(data (i32.const 2992) "unknow red packet type\00")
(data (i32.const 3024) "illegal receiver count\00")
(data (i32.const 3056) "asset too small\00")
(data (i32.const 3072) "asset to small\00")
(data (i32.const 3088) "existing: \00")
(data (i32.const 3104) "true\00")
(data (i32.const 3120) "false\00")
(data (i32.const 3136) "unknown command\00")
(data (i32.const 3152) "onerror\00")
(data (i32.const 3168) "redpacket\00")
(data (i32.const 3184) "fund\00")
(data (i32.const 3200) "admin\00")
(data (i32.const 11616) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11712) "stoull\00")
(data (i32.const 11728) ": no conversion\00")
(data (i32.const 11744) ": out of range\00")
(data (i32.const 11760) "%llu\00")
(data (i32.const 11776) "\d0<\00\00")
(data (i32.const 11792) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 11828) "H.\00\00")
(data (i32.const 11848) "\05\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0b\00\00\00\0c\00\00\00\e8.\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 13040) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13504) "0123456789ABCDEF")
(data (i32.const 13520) "-+   0X0x\00")
(data (i32.const 13536) "(null)\00")
(data (i32.const 13552) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13584) "inf\00")
(data (i32.const 13600) "INF\00")
(data (i32.const 13616) "nan\00")
(data (i32.const 13632) "NAN\00")
(data (i32.const 13648) ".\00")
(data (i32.const 13664) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 13760) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 15568) "\05\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0d\00\00\00\0c\00\00\00h=\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 15728) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 15744) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 15760) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 15776) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 16048) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "cancel_deferred" (func $fimport$13 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_store_i64" (func $fimport$29 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$30 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$31 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$32 (param i32)))
(import "env" "is_account" (func $fimport$33 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$37 (param i32)))
(import "env" "prints_l" (func $fimport$38 (param i32 i32)))
(import "env" "printui" (func $fimport$39 (param i64)))
(import "env" "read_action_data" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "recover_key" (func $fimport$41 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$42 (param i64)))
(import "env" "require_auth2" (func $fimport$43 (param i64 i64)))
(import "env" "ripemd160" (func $fimport$44 (param i32 i32 i32)))
(import "env" "send_deferred" (func $fimport$45 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$46 (param i32 i32)))
(import "env" "sha256" (func $fimport$47 (param i32 i32 i32)))
(import "env" "tapos_block_prefix" (func $fimport$48 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE" (func $5))
(export "_Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE" (func $8))
(export "_Z9memo_argsRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEc" (func $9))
(export "_Z13decode_pubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $11))
(export "_Z16decode_eospubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $12))
(export "_Z11decode_nameRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $13))
(export "_Z12murmur_hash2PKcj" (func $14))
(export "_ZN11eosiosystem14exchange_state19convert_to_exchangeERNS0_9connectorEN5eosio5assetE" (func $15))
(export "_ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE" (func $16))
(export "_ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE" (func $17))
(export "_Z13string_to_cmdRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $18))
(export "_Z20pockettype_to_string10PacketType" (func $19))
(export "_Z20string_to_pockettypeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $20))
(export "_ZN5eosio11buyrambytesEm" (func $21))
(export "_Z6randomPvj" (func $26))
(export "_Z12is_sig_valid11checksum2569signature10public_key" (func $27))
(export "_ZNK9redpacket9valid_sigERK9signatureRK10public_keyy" (func $28))
(export "_ZNK9redpacket8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE" (func $38))
(export "_ZN9redpacket5_pingEv" (func $44))
(export "_ZN9redpacket9_withdrawEy" (func $61))
(export "_ZN9redpacket8_setfundEy" (func $62))
(export "_ZN9redpacket9_setadminEy" (func $69))
(export "_ZNK9redpacket7calcfeeERN5eosio5assetE" (func $71))
(export "_ZN9redpacket14create_accountEyN5eosio10public_keyERKS1_RKNS0_5assetE" (func $72))
(export "_ZN9redpacket14_get_or_createEyy9signaturebPKN5eosio10public_keyES4_" (func $87))
(export "_ZN9redpacket19handle_withdraw_errERKN5eosio8currency8transferE" (func $100))
(export "_ZN9redpacket22_handle_create_accountENSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEEN5eosio5assetE" (func $107))
(export "_ZN9redpacket24_handle_create_redpacketENSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEEN5eosio5assetEy15SupportedTokens" (func $108))
(export "_ZN9redpacket16_handle_transferEy" (func $114))
(export "_ZN9redpacket5applyEyy" (func $116))
(export "apply" (func $141))
(export "malloc" (func $147))
(export "free" (func $150))
(export "_ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $160))
(export "_ZNSt3__19to_stringEy" (func $164))
(export "isspace" (func $170))
(export "__errno_location" (func $171))
(export "__assert_fail" (func $172))
(export "fprintf" (func $173))
(export "fflush" (func $174))
(export "__ofl_lock" (func $175))
(export "__lockfile" (func $176))
(export "__unlockfile" (func $177))
(export "__ofl_unlock" (func $178))
(export "__unlock" (func $179))
(export "__lock" (func $180))
(export "__stdio_close" (func $181))
(export "__stdout_write" (func $182))
(export "__stdio_seek" (func $183))
(export "__stdio_write" (func $184))
(export "vfprintf" (func $185))
(export "__fwritex" (func $187))
(export "strerror" (func $189))
(export "strnlen" (func $190))
(export "wctomb" (func $191))
(export "__signbitl" (func $192))
(export "__fpclassifyl" (func $193))
(export "frexpl" (func $194))
(export "wcrtomb" (func $195))
(export "memchr" (func $196))
(export "__lctrans" (func $197))
(export "__lctrans_impl" (func $198))
(export "__mo_lookup" (func $199))
(export "strcmp" (func $200))
(export "__towrite" (func $201))
(export "pow" (func $202))
(export "sqrt" (func $203))
(export "fabs" (func $204))
(export "scalbn" (func $205))
(export "snprintf" (func $206))
(export "vsnprintf" (func $207))
(export "strtoull" (func $209))
(export "__shlim" (func $210))
(export "__intscan" (func $211))
(export "__shgetc" (func $212))
(export "__uflow" (func $213))
(export "__toread" (func $214))
(export "memcmp" (func $215))
(export "strlen" (func $216))
(table $0 14 14 anyfunc)
(elem (i32.const 0) $217 $132 $123 $127 $121 $129 $125 $128 $130 $208 $181 $182 $183 $184)



int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [11828]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [11828]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $5) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $152($5)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($3 << [1])
	$4 = ( $1 ? $5 : ($5 <= $1) )
	
.LABEL $label$6
	$5 = CALL $151($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($5) = *($2)
	$5 = (*($0) + [1])
	*($0) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $5)
	$4 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memset($5, *($2), $4)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$5 = ($0 + [4])
	$0 = *($5)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($5) + [1])
	*($5) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC __errno_location ()
{
	return [11768]
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [11776]), [11792], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $151($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $152($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([11832])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL isspace(int_32(($10 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$5:
	$11 = ($0 + $10)
	$8 = ($10 + [1])
	$10 = $8
	if ( ((int_32)*(($11 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$0 = ($0 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$11 = ((uint_32)((int_32)CALL strlen($0) * (int_32)[733]) / (uint_32)[1000])
	$10 = ((int_32)$11 ^ (int_32)[-1])
	$2 = ($11 + [1])
	$3 = CALL $151($2)
	$5 = $3
	
.LOOP $label$6:
	*($5) = [0]
	$4 = $5
	$5 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	$11 = [0]
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$17 }
	$6 = [0]
	
.LOOP $label$18:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$15 }
	$10 = *($0)
	$9 = *(($10 + [16]))
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$20 }
	$11 = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	$11 = [0]
	$10 = $5
	
.LOOP $label$21:
	$7 = (((int_32)*($10) * (int_32)[58]) + $9)
	*(($10 = ($10 + [-1]))) = $7
	$11 = ($11 + [1])
	$9 = ((int_32)$7 / (int_32)[256])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$19 }
	if ( (((uint_32)($7 + [255]) > (uint_32)[510]) | ((int_32)$11 < (int_32)$6)) ){ goto $label$21 }
	
.LABEL $label$19
	if ( $9 ){ goto $label$7 }
	$10 = *($0 + [1])
	$6 = $11
	$7 = ($0 + [1])
	$0 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	
.LOOP $label$22:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$16 }
	$10 = *($0)
	if ( ((int_32)*(($10 + [16])) == (int_32)[255]) ){ goto $label$10 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$7 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$22 }
	$11 = [0]
	
.LABEL $label$16
	$7 = $0
	goto $label$14 
	
.LABEL $label$15
	$7 = $0
	$11 = $6
	
.LABEL $label$14
	$10 = ($7 + [-1])
	
.LOOP $label$23:
	$10 = ($10 + [1])
	if ( CALL isspace(*($10)) ){ goto $label$23 }
	$7 = [0]
	if ( (*($10) == 0) ){ goto $label$24 }
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$24
	$11 = ($3 + ($2 - $11))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$12 }
	$9 = ([0] - $4)
	$7 = *($12 + [8])
	
.LOOP $label$26:
	$10 = $11
	if ( *($10) ){ goto $label$25 }
	$7 = $10
	$11 = ($10 + [1])
	if ( ((int_32)($11 + $9) != (int_32)[1]) ){ goto $label$26 }
	$10 = $11
	$7 = $4
	
.LABEL $label$25
	*($12 + [8]) = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$10 = $5
	
.LABEL $label$11
	$11 = (($5 - $11) + $8)
	$7 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $7) >= (uint_32)$11) ){ goto $label$27 }
	$9 = *($1 + [4])
	$7 = *($1)
	$9 = (*($1 + [4]) - $7)
	$0 = CALL $151($11)
	$2 = ($0 + ($9 - $7))
	$6 = ($2 - $9)
	$11 = ($0 + $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $7, $9)
	$7 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $2
	*(($1 + [8])) = $11
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $152($7)
	
.LABEL $label$27
	*($12 + [7]) = [0]
	CALL $6($1, $8, ($12 + [7]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$29 }
	$5 = ($4 + [1])
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	
.LOOP $label$30:
	$11 = ($10 + [1])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$32 }
	*($9) = *($10)
	*($7) = (*($7) + [1])
	goto $label$31 
	
.LABEL $label$32
	CALL $7($1, $10)
	
.LABEL $label$31
	$10 = $11
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $152($3)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
	return $7
	
.LABEL $label$7
	CALL __assert_fail([272], [288], [62], [304])
	return (unreachable)
}

void .FUNC $127 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL _ZN9redpacket8_setfundEy($0, $1)
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13664])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [13760]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [13760]
	return .LABEL $label$1
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [104])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [108])) = $6
	CALL $152($6)
	
.LABEL $label$7
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$8 }
	CALL $152(*(($4 + [96])))
	
.LABEL $label$8
	CALL $152($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	$6 = *($4 + [104])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($4 + [108])) = $6
	CALL $152($6)
	
.LABEL $label$11
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$12 }
	CALL $152(*(($4 + [96])))
	
.LABEL $label$12
	CALL $152($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [120]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $56(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1584])
	$8 = *($0 + [4])
	$6 = *(($8 + [128]))
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5002563355403616255, ($9 + [8]), *($8))
	*((*(($0 + [4])) + [128])) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$2), [928])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)-5002563355403616256, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $29($2, $6)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$2), [928])
	
.LABEL $label$5
	*(($7 + [128])) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1328])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1328])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1328])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1328])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1328])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $42(CALL $41($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $57($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $37($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $58($4, $1)
	CALL $60(CALL $59(CALL $59($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $151(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $151([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $37($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $39(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $152($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $152($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $152($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-5002563355403616255, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [928])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $29($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-5002563355403616256, $5))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [928])
	
.LABEL $label$4
	*(($2 + [128])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN9redpacket5_pingEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [256])
	*([0] + [4]) = $13
	CALL prints([1344])
	*((($13 + [184]) + [32])) = [0]
	*($13 + [200]) = (int_64)-1
	*($13 + [208]) = (int_64)0
	$8 = *($0)
	*($13 + [184]) = $8
	*($13 + [192]) = $8
	*(($13 + [222])) = [0]
	*($13 + [220]) = [0]
	*($13 + [176]) = ($13 + [184])
	*($13 + [104]) = (int_64)0
	CALL $45(($13 + [168]), ($13 + [176]), ($13 + [104]))
	$6 = *($13 + [172])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)*($6 + [100])) ){ goto $label$6 }
	$2 = (($13 + [24]) + [32])
	$11 = (($13 + [8]) | [1])
	$1 = ($13 + [140])
	$6 = *($13 + [172])
	CALL prints([1360])
	CALL printui(*($6))
	*($13 + [104]) = [9]
	CALL prints_l(($13 + [104]), [1])
	$3 = *(*($13 + [172]))
	$8 = CALL current_time()
	*(($13 + [116])) = [0]
	*(($13 + [120])) = [0]
	*(($13 + [124])) = [0]
	*(($13 + [128])) = [0]
	*(($13 + [132])) = [0]
	*(($13 + [136])) = [0]
	*($13 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*(($13 + [140])) = [0]
	*(($13 + [144])) = [0]
	*(($13 + [148])) = [0]
	*(($13 + [152])) = [0]
	*(($13 + [156])) = [0]
	*(($13 + [160])) = [0]
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1296]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$12 }
	$12 = *($6)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$12 = ($12 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*(($13 + [88])) = $9
	*($13 + [80]) = $4
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1376]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$18 }
	$12 = *($6)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$12 = ($12 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$13 }
	*($13 + [72]) = $9
	$5 = *($13 + [172])
	$10 = *(($5 + [80]))
	$8 = *($5 + [72])
	$12 = *(($5 + [108]))
	$6 = *($5 + [104])
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$19 }
	
.LOOP $label$20:
	CALL eosio_assert(((int_64)*(($6 + [16])) == (int_64)$10), [1392])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *(($6 + [8])))) > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1472])
	$6 = ($6 + [24])
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$20 }
	
.LABEL $label$19
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$6 = CALL strlen([1504])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($13 + [8]) = ($6 << [1])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = *(($13 + [208]))
	if ( ($5 == 0) ){ goto $label$2 }
	$11 = ($13 + [212])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$12 = ($12 + [-24])
	$6 = *($12)
	*($12) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	$0 = *($6 + [104])
	if ( ($0 == 0) ){ goto $label$25 }
	*(($6 + [108])) = $0
	CALL $152($0)
	
.LABEL $label$25
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$26 }
	CALL $152(*(($6 + [96])))
	
.LABEL $label$26
	CALL $152($6)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$23 }
	$6 = *(($13 + [208]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $5
	
.LABEL $label$21
	*($11) = $5
	CALL $152($6)
	goto $label$2 
	
.LABEL $label$5
	$12 = (($6 + [16]) & [-16])
	$11 = CALL $151($12)
	*(($13 + [16])) = $11
	*($13 + [8]) = ($12 | [1])
	*($13 + [12]) = $6
	
.LABEL $label$4
	CALL memcpy($11, [1504], $6)
	
.LABEL $label$3
	*(($11 + $6)) = [0]
	*((($13 + [24]) + [8])) = *(($5 + [24]))
	*((($13 + [24]) + [24])) = $10
	*((($13 + [24]) + [16])) = $8
	*(($2 + [4])) = *($13 + [12 align=4])
	$8 = *($0)
	*($13 + [24]) = $8
	*($2) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*((($13 + [8]) + [8])) = [0]
	$12 = *(($13 + [144]))
	if ( ((uint_32)$12 >= (uint_32)*(($13 + [148]))) ){ goto $label$30 }
	*($12 + [8]) = *($13 + [72])
	*($12) = $8
	*($12 + [16 align=4]) = (int_64)0
	*(($5 = ($12 + [24]))) = [0]
	$6 = CALL $151([16])
	*($12 + [16]) = $6
	$11 = ($6 + [16])
	*($5) = $11
	*(($6 + [8])) = *((($13 + [80]) + [8]))
	*($6) = *($13 + [80])
	*(($12 + [20])) = $11
	*($12 + [28]) = [0]
	*(($12 + [32])) = [0]
	*(($12 + [36])) = [0]
	$6 = *((($13 + [24]) + [32]))
	$5 = ( *((($13 + [24]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [32])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = ($12 + [28])
	
.LOOP $label$31:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$31 }
	if ( ($6 == 0) ){ goto $label$29 }
	CALL $37($5, $6)
	$5 = *(($12 + [32]))
	$6 = *(($12 + [28]))
	goto $label$28 
	
.LABEL $label$30
	CALL $46($1, ($13 + [80]), $0, ($13 + [72]), ($13 + [24]))
	goto $label$27 
	
.LABEL $label$29
	$5 = [0]
	$6 = [0]
	
.LABEL $label$28
	*(($13 + [232])) = $5
	*($13 + [228]) = $6
	*($13 + [224]) = $6
	*($13 + [240]) = ($13 + [224])
	*($13 + [248]) = ($13 + [24])
	CALL $39(($13 + [248]), ($13 + [240]))
	*(($6 = (($13 + [104]) + [40]))) = (*($6) + [40])
	
.LABEL $label$27
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$32 }
	CALL $152(*(($13 + [64])))
	
.LABEL $label$32
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL $152(*(($13 + [16])))
	
.LABEL $label$33
	*(($13 + [124])) = [30]
	*($13 + [80]) = (int_64)2
	*($13 + [88]) = *(*($13 + [172]))
	CALL cancel_deferred(($13 + [80]))
	$8 = *($0)
	CALL $47(($13 + [24]), ($13 + [104]))
	$6 = *($13 + [24])
	CALL send_deferred(($13 + [80]), $8, $6, (*($13 + [28]) - $6), [1])
	$6 = *($13 + [24])
	if ( ($6 == 0) ){ goto $label$34 }
	*($13 + [28]) = $6
	CALL $152($6)
	
.LABEL $label$34
	$8 = *($13 + [168])
	*($13 + [24]) = $8
	$6 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [1536])
	CALL $48(($13 + [24]))
	CALL $49(*($13 + [176]), $6)
	*(($13 + [40])) = (int_64)-1
	*(($6 = ($13 + [48]))) = (int_64)0
	*(($13 + [56])) = [0]
	$8 = *($0)
	*(($13 + [32])) = $8
	*($13 + [24]) = $8
	$12 = CALL db_find_i64($8, $8, (int_64)-5003134530400288768, $3)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$35 }
	$12 = CALL $50(($13 + [24]), $12)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)($13 + [24])), [928])
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1584])
	$0 = CALL db_next_i64(*($12 + [60]), ($13 + [224]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$36 }
	CALL $50(($13 + [24]), $0)
	
.LABEL $label$36
	CALL $51(($13 + [24]), $12)
	
.LABEL $label$35
	$5 = *($6)
	if ( ($5 == 0) ){ goto $label$37 }
	$11 = ($13 + [52])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$12 = *($6)
	*($6) = [0]
	if ( ($12 == 0) ){ goto $label$41 }
	$0 = *($12 + [44])
	if ( ($0 == 0) ){ goto $label$42 }
	*(($12 + [48])) = $0
	CALL $152($0)
	
.LABEL $label$42
	CALL $152($12)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($13 + [48]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $5
	
.LABEL $label$38
	*($11) = $5
	CALL $152($6)
	
.LABEL $label$37
	CALL $52(($13 + [104]))
	$5 = *(($13 + [208]))
	if ( ($5 == 0) ){ goto $label$2 }
	$11 = ($13 + [212])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$44 }
	
.LOOP $label$45:
	$12 = ($12 + [-24])
	$6 = *($12)
	*($12) = [0]
	if ( ($6 == 0) ){ goto $label$46 }
	$0 = *($6 + [104])
	if ( ($0 == 0) ){ goto $label$47 }
	*(($6 + [108])) = $0
	CALL $152($0)
	
.LABEL $label$47
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$48 }
	CALL $152(*(($6 + [96])))
	
.LABEL $label$48
	CALL $152($6)
	
.LABEL $label$46
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$45 }
	$6 = *(($13 + [208]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $5
	
.LABEL $label$43
	*($11) = $5
	CALL $152($6)
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [256])
	return (unreachable)
	
.LABEL $label$1
	CALL $153(($13 + [8]))
}

void .FUNC $167 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $151($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $152($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $166($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [11760], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $165(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $165(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $151($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $157($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $162 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $163($1, $0, [11728])
	CALL abort()
	(unreachable)
}

void .FUNC $161 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $163($1, $0, [11744])
	CALL abort()
	(unreachable)
}

int_64 .FUNC _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([11712])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $151($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [11712], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoull($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $152(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($7)
	
.LABEL $label$1
	CALL $162($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $151($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $151($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([11832])
	return [11840]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [1328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $42(CALL $41($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $151([72])) + [52]) = [0]
	*($6 + [44 align=4]) = (int_64)0
	*($6 + [56]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1056])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[33]), [1056])
	CALL memcpy(($6 + [8]), $3, [34])
	*($8 + [36]) = ($4 + [42])
	CALL $53(($8 + [32]), ($6 + [44]))
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [44])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [48])) = $7
	CALL $152($7)
	
.LABEL $label$10
	CALL $152($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [44])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [48])) = $6
	CALL $152($6)
	
.LABEL $label$7
	CALL $152($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [44])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [48])) = $6
	CALL $152($6)
	
.LABEL $label$10
	CALL $152($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $152($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $152($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $152($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $152($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $152($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $152($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $152($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $152($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1120])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $55($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [1056])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $151(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [44])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $6
	CALL $152($6)
	
.LABEL $label$11
	CALL $152($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $152($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $151(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $152($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *($4 + [124])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5002563355403616256, ($7 + [8]), *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *(($4 + [128]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5002563355403616255, ($7 + [8]), *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($6)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$0 = *(($5 + [132]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($6)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616254, ($7 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

void .FUNC $152 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $153 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11592])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11400]
	$1 = (((int_32)$2 * (int_32)[12]) + [11400])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $151 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11708])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $151(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $152($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $155($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $155($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $151($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $152($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	return CALL $157($0, $1, CALL $216($1))
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

void .FUNC _ZN9redpacket9_setadminEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [56]) = $1
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	$1 = *($0)
	*($9 + [16]) = $1
	*($9 + [24]) = $1
	*($9 + [40]) = (int_64)0
	$8 = [0]
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)-6219918586631159808, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $63(($9 + [16]), $7)
	
.LABEL $label$1
	$1 = *($0)
	*($9 + [8]) = ($9 + [56])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1840])
	CALL $70(($9 + [16]), $8, $1, ($9 + [8]))
	$2 = *($9 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($9 + [44])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = ($3 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$9 }
	$0 = ([0] - $4)
	$8 = ($8 + [-24])
	
.LOOP $label$10:
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL $152(*(($8 + [8])))
	
.LABEL $label$11
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $0) != (int_32)[-24]) ){ goto $label$10 }
	$8 = *(($3 + [8]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $4
	
.LABEL $label$8
	*($6) = $4
	CALL $152($8)
	
.LABEL $label$7
	CALL $152($3)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	$8 = *(($9 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$8 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $152($8)
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$2 = ($3 + $1)
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$3 }
	$5 = [178956970]
	$6 = ((int_32)($6 - $4) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$6 }
	$5 = ($6 << [1])
	$5 = ( $2 ? $5 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$6 = CALL $151(((int_32)$5 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$6 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($5 + [8]))) = (int_64)0
	*($5) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($4) = [0]
	$5 = (*($6) + [24])
	*($6) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	$2 = ($6 + ((int_32)$5 * (int_32)[24]))
	$6 = ($6 + ((int_32)$3 * (int_32)[24]))
	$5 = $6
	
.LOOP $label$8:
	*($5) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*(($5 + [8])) = (int_64)0
	$5 = ($5 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-24])
	
.LOOP $label$11:
	*(($6 + [-24])) = *($1)
	$4 = ($1 + [8])
	*(($6 + [-16])) = *($4)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($4) = [0]
	*(($6 + [-8])) = *(($1 + [16]))
	$6 = ($6 + [-24])
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $4
	
.LABEL $label$9
	*($0) = $6
	*(($0 + [4])) = $5
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$12 }
	$1 = ([0] - $3)
	$5 = ($4 + [-24])
	
.LOOP $label$13:
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL $152(*(($5 + [8])))
	
.LABEL $label$14
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $152($3)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $43($0, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($5 + [4]), ($7 + [16]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1888])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1936])
	$8 = [8]
	*(*(($5 = ($1 + [8]))) + [16]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [2000])
	$3 = *($5)
	$6 = *(($1 + [12]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($6 - $3) / (int_32)[24]))
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = *($3)
	$7 = ( *($3 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$8 = (($7 + $8) + [8])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($8)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	*($10) = $3
	*($10 + [8]) = ($3 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1328])
	CALL memcpy($3, $1, [8])
	*($10 + [4]) = ($3 + [8])
	CALL $65($10, $5)
	CALL db_update_i64(*($1 + [24]), $2, $3, $8)
	if ( ($8 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $151(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [12])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-24])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $152(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $6) != (int_32)[-24]) ){ goto $label$14 }
	$1 = *(($2 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $152($1)
	
.LABEL $label$11
	CALL $152($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $152($7)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1120])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$6 = *($1 + [4])
	$7 = ((int_32)($6 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $68($1, ($4 - $7))
	$6 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($6 + [-24])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $152(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$6 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = CALL $33($0, $7)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy(($7 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC _ZN9redpacket9_withdrawEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [240])
	*([0] + [4]) = $14
	*((($14 + [168]) + [32])) = [0]
	*($14 + [184]) = (int_64)-1
	$10 = (int_64)0
	*($14 + [192]) = (int_64)0
	$12 = *($0)
	*($14 + [168]) = $12
	*($14 + [176]) = $12
	*(($14 + [206])) = [0]
	*($14 + [204]) = [0]
	$5 = [0]
	$8 = CALL db_find_i64($12, $12, (int_64)-5002563355403616256, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $29(($14 + [168]), $8)
	CALL eosio_assert(((int_32)*($5 + [116]) == (int_32)($14 + [168])), [928])
	
.LABEL $label$1
	$2 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($2, [1072])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)) > (uint_32)*($5 + [100])), [1792])
	$12 = CALL current_time()
	*(($14 + [132])) = [0]
	*((($14 + [104]) + [32])) = [0]
	*($14 + [116]) = [0]
	*($14 + [120]) = [0]
	*($14 + [124]) = [0]
	*($14 + [128]) = [0]
	*($14 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$12 / (uint_64)(int_64)1000000)) + [60])
	*($14 + [140]) = [0]
	*(($14 + [144])) = [0]
	*(($14 + [148])) = [0]
	*($14 + [152]) = [0]
	*(($14 + [156])) = [0]
	*(($14 + [160])) = [0]
	$4 = ($14 + [140])
	$3 = *($0)
	$9 = (int_64)59
	$8 = [1296]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$7 }
	$13 = *($8)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$13 = ($13 + [165])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$2 }
	*($14 + [88]) = $11
	*($14 + [80]) = $3
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1376]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)8) ){ goto $label$13 }
	$13 = *($8)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$13 = ($13 + [165])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	*($14 + [72]) = $11
	$12 = *(($5 + [80]))
	$10 = *($5 + [72])
	$13 = *(($5 + [108]))
	$8 = *($5 + [104])
	if ( ((int_32)$8 == (int_32)$13) ){ goto $label$14 }
	
.LOOP $label$15:
	CALL eosio_assert(((int_64)*(($8 + [16])) == (int_64)$12), [1392])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - *(($8 + [8])))) > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [1472])
	$8 = ($8 + [24])
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$14
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$8 = CALL strlen([1808])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$19 }
	*($14 + [8]) = ($8 << [1])
	$13 = (($14 + [8]) | [1])
	if ( $8 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = (($8 + [16]) & [-16])
	$13 = CALL $151($6)
	*($14 + [8]) = ($6 | [1])
	*($14 + [16]) = $13
	*($14 + [12]) = $8
	
.LABEL $label$18
	CALL memcpy($13, [1808], $8)
	
.LABEL $label$17
	*(($13 + $8)) = [0]
	$9 = *(($5 + [24]))
	*((($14 + [24]) + [24])) = $12
	*(($6 = (($14 + [24]) + [36]))) = *($14 + [12 align=4])
	$12 = *($0)
	*($14 + [24]) = $12
	*($14 + [32]) = $9
	*($14 + [40]) = $10
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*((($14 + [8]) + [8])) = [0]
	$13 = *(($14 + [144]))
	if ( ((uint_32)$13 >= (uint_32)*(($14 + [148]))) ){ goto $label$23 }
	*($13 + [8]) = *($14 + [72])
	*($13) = $12
	*($13 + [16 align=4]) = (int_64)0
	*(($4 = ($13 + [24]))) = [0]
	$8 = CALL $151([16])
	*($13 + [16]) = $8
	$7 = ($8 + [16])
	*($4) = $7
	*(($8 + [8])) = *((($14 + [80]) + [8]))
	*($8) = *($14 + [80])
	*(($13 + [20])) = $7
	*($13 + [28]) = [0]
	*(($13 + [32])) = [0]
	*(($13 + [36])) = [0]
	$8 = *($14 + [56])
	$4 = ( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($4 + [32])
	$10 = (CASTING uint_64)(uint_32 $4)
	$4 = ($13 + [28])
	
.LOOP $label$24:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$24 }
	if ( ($8 == 0) ){ goto $label$22 }
	CALL $37($4, $8)
	$4 = *(($13 + [32]))
	$8 = *(($13 + [28]))
	goto $label$21 
	
.LABEL $label$23
	CALL $46($4, ($14 + [80]), $0, ($14 + [72]), ($14 + [24]))
	goto $label$20 
	
.LABEL $label$22
	$4 = [0]
	$8 = [0]
	
.LABEL $label$21
	*($14 + [212]) = $8
	*($14 + [208]) = $8
	*($14 + [216]) = $4
	*($14 + [224]) = ($14 + [208])
	*($14 + [232]) = ($14 + [24])
	CALL $39(($14 + [232]), ($14 + [224]))
	*(($8 = (($14 + [104]) + [40]))) = (*($8) + [40])
	
.LABEL $label$20
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$25 }
	CALL $152(*(($14 + [64])))
	
.LABEL $label$25
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL $152(*(($14 + [16])))
	
.LABEL $label$26
	*(($14 + [124])) = [30]
	*($14 + [80]) = (int_64)2
	*($14 + [88]) = *($5)
	CALL cancel_deferred(($14 + [80]))
	$10 = *($0)
	CALL $47(($14 + [24]), ($14 + [104]))
	$8 = *($14 + [24])
	CALL send_deferred(($14 + [80]), $10, $8, (*($14 + [28]) - $8), [1])
	$8 = *($14 + [24])
	if ( ($8 == 0) ){ goto $label$27 }
	*($14 + [28]) = $8
	CALL $152($8)
	
.LABEL $label$27
	CALL eosio_assert($2, [1536])
	CALL eosio_assert($2, [1584])
	$8 = CALL db_next_i64(*($5 + [120]), ($14 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$28 }
	CALL $29(($14 + [168]), $8)
	
.LABEL $label$28
	CALL $49(($14 + [168]), $5)
	*(($14 + [56])) = [0]
	*($14 + [40]) = (int_64)-1
	*($14 + [48]) = (int_64)0
	$10 = *($0)
	*($14 + [24]) = $10
	*($14 + [32]) = $10
	$8 = CALL db_find_i64($10, $10, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$29 }
	$8 = CALL $50(($14 + [24]), $8)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($14 + [24])), [928])
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1584])
	$13 = CALL db_next_i64(*($8 + [60]), ($14 + [208]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$30 }
	CALL $50(($14 + [24]), $13)
	
.LABEL $label$30
	CALL $51(($14 + [24]), $8)
	
.LABEL $label$29
	$0 = *($14 + [48])
	if ( ($0 == 0) ){ goto $label$31 }
	$2 = ($14 + [52])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$8 = ($8 + [-24])
	$13 = *($8)
	*($8) = [0]
	if ( ($13 == 0) ){ goto $label$35 }
	$5 = *($13 + [44])
	if ( ($5 == 0) ){ goto $label$36 }
	*(($13 + [48])) = $5
	CALL $152($5)
	
.LABEL $label$36
	CALL $152($13)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$34 }
	$8 = *(($14 + [48]))
	goto $label$32 
	
.LABEL $label$33
	$8 = $0
	
.LABEL $label$32
	*($2) = $0
	CALL $152($8)
	
.LABEL $label$31
	CALL $52(($14 + [104]))
	$0 = *($14 + [192])
	if ( ($0 == 0) ){ goto $label$37 }
	$2 = ($14 + [196])
	$13 = *($2)
	if ( ((int_32)$13 == (int_32)$0) ){ goto $label$39 }
	
.LOOP $label$40:
	$13 = ($13 + [-24])
	$8 = *($13)
	*($13) = [0]
	if ( ($8 == 0) ){ goto $label$41 }
	$5 = *($8 + [104])
	if ( ($5 == 0) ){ goto $label$42 }
	*(($8 + [108])) = $5
	CALL $152($5)
	
.LABEL $label$42
	if ( ((*($8 + [88]) & [1]) == 0) ){ goto $label$43 }
	CALL $152(*(($8 + [96])))
	
.LABEL $label$43
	CALL $152($8)
	
.LABEL $label$41
	if ( ((int_32)$0 != (int_32)$13) ){ goto $label$40 }
	$8 = *(($14 + [192]))
	goto $label$38 
	
.LABEL $label$39
	$8 = $0
	
.LABEL $label$38
	*($2) = $0
	CALL $152($8)
	
.LABEL $label$37
	*([0] + [4]) = ($14 + [240])
	return (unreachable)
	
.LABEL $label$16
	CALL $153(($14 + [8]))
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [1328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $42($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $4)
	*($8 + [36]) = $6
	*($8 + [32]) = $6
	$7 = ($6 + $4)
	*($8 + [40]) = $7
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($6)
	$7 = *(($8 + [40]))
	$6 = *($8 + [36])
	
.LABEL $label$7
	*(($4 = CALL $151([32])) + [16]) = [0]
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $6) > (uint_32)[7]), [1056])
	CALL memcpy($4, $6, [8])
	*($8 + [36]) = ($6 + [8])
	CALL $66(($8 + [32]), ($4 + [8]))
	*($4 + [24]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $67(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [12])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-24])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $152(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $7) != (int_32)[-24]) ){ goto $label$13 }
	$6 = *(($1 + [8]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $152($6)
	
.LABEL $label$10
	CALL $152($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN9redpacket8_setfundEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [56]) = $1
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	$1 = *($0)
	*($9 + [16]) = $1
	*($9 + [24]) = $1
	*($9 + [40]) = (int_64)0
	$8 = [0]
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)-6219918586631159808, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $63(($9 + [16]), $7)
	
.LABEL $label$1
	$1 = *($0)
	*($9 + [8]) = ($9 + [56])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1840])
	CALL $64(($9 + [16]), $8, $1, ($9 + [8]))
	$2 = *($9 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($9 + [44])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = ($3 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$9 }
	$0 = ([0] - $4)
	$8 = ($8 + [-24])
	
.LOOP $label$10:
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL $152(*(($8 + [8])))
	
.LABEL $label$11
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $0) != (int_32)[-24]) ){ goto $label$10 }
	$8 = *(($3 + [8]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $4
	
.LABEL $label$8
	*($6) = $4
	CALL $152($8)
	
.LABEL $label$7
	CALL $152($3)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	$8 = *(($9 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$8 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $152($8)
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$3 = *($6 + [4])
	$4 = ($1 + [48])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)*(($1 + [52]))) ){ goto $label$2 }
	$8 = ($6 + [4])
	*($4) = $8
	*($6) = *($3)
	$5 = ($1 + [44])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [44])
	CALL $98($5, $3)
	$8 = *($4)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	$6 = [42]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-4]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9 + [8]) = $8
	$10 = ($8 + $6)
	*($9 + [16]) = $10
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1328])
	CALL memcpy($8, $1, [8])
	CALL memcpy(($9 + [22]), ($1 + [8]), [34])
	CALL memcpy(($9 + [56]), ($9 + [22]), [34])
	$3 = ($8 + [8])
	CALL eosio_assert(((int_32)($10 - $3) > (int_32)[33]), [1328])
	CALL memcpy($3, ($9 + [56]), [34])
	*($9 + [12]) = ($8 + [42])
	CALL $99(($9 + [8]), $5)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [96])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1888])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1936])
	$5 = *($3)
	$4 = *($1)
	$8 = ($1 + [48])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [52]))) ){ goto $label$2 }
	*($8) = ($3 + [4])
	*($3) = *($5)
	$8 = ($1 + [44])
	$9 = $4
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [44])
	CALL $98($8, $5)
	$9 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$9), [2000])
	$6 = *($8)
	$5 = *(($1 + [48]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$3 = [42]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = (($7 & [-4]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11 + [8]) = $10
	$5 = ($10 + $3)
	*($11 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1328])
	CALL memcpy($10, $1, [8])
	CALL memcpy(($11 + [22]), ($1 + [8]), [34])
	CALL memcpy(($11 + [56]), ($11 + [22]), [34])
	$6 = ($10 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[33]), [1328])
	CALL memcpy($6, ($11 + [56]), [34])
	*($11 + [12]) = ($10 + [42])
	CALL $99(($11 + [8]), $8)
	CALL db_update_i64(*($1 + [60]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [96])
}

void .FUNC _ZN9redpacket14_get_or_createEyy9signaturebPKN5eosio10public_keyES4_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [336])
	*([0] + [4]) = $17
	*($17 + [312]) = $1
	*($17 + [304]) = $2
	*(($17 + [296])) = [0]
	*($17 + [280]) = (int_64)-1
	*($17 + [288]) = (int_64)0
	$1 = *($0)
	*($17 + [264]) = $1
	*($17 + [272]) = $1
	*(($17 + [302])) = [0]
	*($17 + [300]) = [0]
	$10 = [0]
	$16 = CALL db_find_i64($1, $1, (int_64)-5002563355403616256, $2)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $29(($17 + [264]), $16)
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)($17 + [264])), [928])
	
.LABEL $label$1
	$7 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($7, [1072])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)) <= (uint_32)*($10 + [100])), [2272])
	$11 = *(($10 + [108]))
	$16 = *($10 + [104])
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$2 }
	$1 = *($17 + [312])
	
.LOOP $label$3:
	if ( ((int_64)*($16) == (int_64)$1) ){ goto $label$2 }
	$16 = ($16 + [24])
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$3 }
	$16 = $11
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$16 == (int_32)$11), [2288])
	$9 = [0]
	*(($17 + [256])) = [0]
	$1 = *($0)
	*($17 + [224]) = $1
	*($17 + [240]) = (int_64)-1
	*($17 + [248]) = (int_64)0
	*($17 + [232]) = $1
	$16 = CALL db_find_i64($1, $1, (int_64)-5003134530400288768, *($17 + [304]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $50(($17 + [224]), $16)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($17 + [224])), [928])
	
.LABEL $label$4
	$11 = [66]
	$16 = $3
	$13 = [66]
	
.LOOP $label$5:
	$12 = ((int_32)((((*(($16 + [1])) << [8]) | *($16)) | (*(($16 + [2])) << [16])) | (*(($16 + [3])) << [24])) * (int_32)[1540483477])
	$11 = ((int_32)((int_32)((int_32)uint_32($12 >> [24]) ^ (int_32)$12) * (int_32)[1540483477]) ^ (int_32)((int_32)$11 * (int_32)[1540483477]))
	$16 = ($16 + [4])
	$13 = ($13 + [-4])
	if ( ((uint_32)$13 > (uint_32)[3]) ){ goto $label$5 }
	$16 = ((int_32)((int_32)((int_32)(*(($3 + [65])) << [8]) ^ (int_32)$11) ^ (int_32)*(($3 + [64]))) * (int_32)[1540483477])
	$16 = ((int_32)((int_32)uint_32($16 >> [13]) ^ (int_32)$16) * (int_32)[1540483477])
	*($17 + [220]) = ((int_32)uint_32($16 >> [15]) ^ (int_32)$16)
	if ( ($9 == 0) ){ goto $label$8 }
	$11 = [0]
	*($17 + [112]) = [0]
	*($17 + [104]) = (int_64)0
	$16 = [0]
	$12 = (*(($9 + [48])) - *($9 + [44]))
	$13 = int_32($12 >> [2])
	if ( ($13 == 0) ){ goto $label$9 }
	if ( ((uint_32)$13 >= (uint_32)[1073741824]) ){ goto $label$6 }
	$11 = CALL $151($12)
	*(($17 + [112])) = ($11 + ($13 << [2]))
	*($17 + [104]) = $11
	*($17 + [108]) = $11
	$13 = *(($9 + [44]))
	$16 = (*(($9 + [48])) - $13)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($11, $13, $16)
	$11 = (*($17 + [108]) + $16)
	*($17 + [108]) = $11
	$16 = *($17 + [104])
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$10 }
	$13 = *($17 + [220])
	
.LOOP $label$11:
	if ( ((int_32)*($16) == (int_32)$13) ){ goto $label$9 }
	$16 = ($16 + [4])
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$11 }
	
.LABEL $label$10
	$16 = $11
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$16 == (int_32)$11), [2304])
	$1 = *($0)
	*($17 + [184]) = ($17 + [220])
	CALL eosio_assert([1], [1840])
	CALL $88(($17 + [224]), $9, $1, ($17 + [184]))
	$16 = *($17 + [104])
	if ( ($16 == 0) ){ goto $label$7 }
	*($17 + [108]) = $16
	CALL $152($16)
	goto $label$7 
	
.LABEL $label$8
	$1 = *($0)
	*($17 + [172]) = ($17 + [220])
	*($17 + [168]) = ($17 + [304])
	*($17 + [184]) = $1
	CALL eosio_assert(((int_64)*($17 + [224]) == (int_64)CALL $fimport$14()), [2336])
	*($17 + [108]) = ($17 + [168])
	*($17 + [104]) = ($17 + [224])
	*($17 + [112]) = ($17 + [184])
	*(($16 = CALL $151([72])) + [52]) = [0]
	*($16 + [44 align=4]) = (int_64)0
	*($16 + [56]) = ($17 + [224])
	CALL $89(($17 + [104]), $16)
	*($17 + [80]) = $16
	$1 = *($16)
	*($17 + [104]) = $1
	$13 = *($16 + [60])
	*($17 + [320]) = $13
	$12 = ($17 + [252])
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)*(($17 + [256]))) ){ goto $label$13 }
	*($11 + [8]) = $1
	*($11 + [16]) = $13
	*($17 + [80]) = [0]
	*($11) = $16
	*($12) = ($11 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $54(($17 + [248]), ($17 + [80]), ($17 + [104]), ($17 + [320]))
	
.LABEL $label$12
	$16 = *($17 + [80])
	*($17 + [80]) = [0]
	if ( ($16 == 0) ){ goto $label$7 }
	$11 = *($16 + [44])
	if ( ($11 == 0) ){ goto $label$14 }
	*(($16 + [48])) = $11
	CALL $152($11)
	
.LABEL $label$14
	CALL $152($16)
	
.LABEL $label$7
	CALL memcpy(($17 + [184]), ($10 + [32]), [34])
	if ( ($9 == 0) ){ goto $label$15 }
	if ( *($9 + [8]) ){ goto $label$16 }
	if ( *(($9 + [9])) ){ goto $label$16 }
	if ( *(($9 + [10])) ){ goto $label$16 }
	if ( *(($9 + [11])) ){ goto $label$16 }
	if ( *(($9 + [12])) ){ goto $label$16 }
	if ( *(($9 + [13])) ){ goto $label$16 }
	if ( *(($9 + [14])) ){ goto $label$16 }
	if ( *(($9 + [15])) ){ goto $label$16 }
	if ( *(($9 + [16])) ){ goto $label$16 }
	if ( *(($9 + [17])) ){ goto $label$16 }
	if ( *(($9 + [18])) ){ goto $label$16 }
	if ( *(($9 + [19])) ){ goto $label$16 }
	if ( *(($9 + [20])) ){ goto $label$16 }
	if ( *(($9 + [21])) ){ goto $label$16 }
	if ( *(($9 + [22])) ){ goto $label$16 }
	if ( *(($9 + [23])) ){ goto $label$16 }
	if ( *(($9 + [24])) ){ goto $label$16 }
	if ( *(($9 + [25])) ){ goto $label$16 }
	if ( *(($9 + [26])) ){ goto $label$16 }
	if ( *(($9 + [27])) ){ goto $label$16 }
	if ( *(($9 + [28])) ){ goto $label$16 }
	if ( *(($9 + [29])) ){ goto $label$16 }
	if ( *(($9 + [30])) ){ goto $label$16 }
	if ( *(($9 + [31])) ){ goto $label$16 }
	if ( *(($9 + [32])) ){ goto $label$16 }
	if ( *(($9 + [33])) ){ goto $label$16 }
	if ( *(($9 + [34])) ){ goto $label$16 }
	if ( *(($9 + [35])) ){ goto $label$16 }
	if ( *(($9 + [36])) ){ goto $label$16 }
	if ( *(($9 + [37])) ){ goto $label$16 }
	if ( *(($9 + [38])) ){ goto $label$16 }
	if ( *(($9 + [39])) ){ goto $label$16 }
	if ( *(($9 + [40])) ){ goto $label$16 }
	if ( (*(($9 + [41])) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL memcpy(($17 + [184]), ($9 + [8]), [34])
	
.LABEL $label$15
	CALL eosio_assert(CALL $28($0, $3, ($17 + [184]), *($17 + [304])), [2400])
	if ( ($4 == 0) ){ goto $label$18 }
	$16 = ($10 + [80])
	CALL eosio_assert(((int_64)*($16) == (int_64)1397703940), [2624])
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert(((int_32)*($10 + [8]) != (int_32)[3]), [2432])
	$16 = ($10 + [80])
	
.LABEL $label$17
	*($17 + [168]) = (int_64)0
	*($17 + [176]) = *($16)
	CALL eosio_assert([1], [560])
	$1 = (uint_64)*($17 + [176]) >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$11 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$11 = [0]
	
.LABEL $label$19
	CALL eosio_assert($11, [624])
	$11 = ($10 + [108])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14(*($10 + [16]) - (CASTING uint_64)(uint_32 ((int_32)(*($11) - *($10 + [104])) / (int_32)[24])))) != (int_64)0), [2496])
	if ( ((int_64)$14 != (int_64)1) ){ goto $label$25 }
	$2 = *(($10 + [80]))
	$1 = *($10 + [72])
	$11 = *($11)
	$16 = *(($10 + [104]))
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$27:
	CALL eosio_assert(((int_64)*(($16 + [16])) == (int_64)$2), [1392])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *(($16 + [8])))) > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [1472])
	$16 = ($16 + [24])
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$27 }
	
.LABEL $label$26
	*(($17 + [176])) = $2
	*($17 + [168]) = $1
	$1 = *($0)
	*($17 + [108]) = ($17 + [168])
	*($17 + [104]) = ($17 + [312])
	CALL eosio_assert($7, [1840])
	CALL $90(($17 + [264]), $10, $1, ($17 + [104]))
	$1 = CALL current_time()
	*(($17 + [132])) = [0]
	*(($17 + [136])) = [0]
	*($17 + [116]) = [0]
	*($17 + [120]) = [0]
	*($17 + [124]) = [0]
	*($17 + [128]) = [0]
	*($17 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($17 + [140]) = [0]
	*(($17 + [144])) = [0]
	*(($17 + [148])) = [0]
	*($17 + [152]) = [0]
	*(($17 + [156])) = [0]
	*(($17 + [160])) = [0]
	$13 = ($17 + [140])
	$8 = *($0)
	$1 = (int_64)0
	$14 = (int_64)59
	$16 = [1296]
	$15 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$33 }
	$11 = *($16)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$11 = ($11 + [165])
	goto $label$31 
	
.LABEL $label$33
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$29
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$28 }
	*($17 + [88]) = $15
	*($17 + [80]) = $8
	$1 = (int_64)0
	$14 = (int_64)59
	$16 = [2528]
	$15 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$39 }
	$11 = *($16)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$11 = ($11 + [165])
	goto $label$37 
	
.LABEL $label$39
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$35
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$34 }
	*($17 + [320]) = $15
	CALL $91($13, ($17 + [80]), $0, ($17 + [320]), $10)
	*(($17 + [124])) = [43200]
	*($17 + [80]) = (int_64)1
	*($17 + [88]) = *($10)
	CALL cancel_deferred(($17 + [80]))
	$1 = *($0)
	CALL $47(($17 + [320]), ($17 + [104]))
	$16 = *($17 + [320])
	CALL send_deferred(($17 + [80]), $1, $16, (*($17 + [324]) - $16), [1])
	$16 = *($17 + [320])
	if ( ($16 == 0) ){ goto $label$40 }
	*($17 + [324]) = $16
	CALL $152($16)
	
.LABEL $label$40
	CALL $52(($17 + [104]))
	goto $label$24 
	
.LABEL $label$25
	$16 = *($10 + [8])
	if ( ((int_32)$16 == (int_32)[1]) ){ goto $label$41 }
	if ( ((int_32)$16 == (int_32)[3]) ){ goto $label$41 }
	if ( ((int_32)$16 != (int_32)[2]) ){ goto $label$24 }
	$2 = *(($10 + [80]))
	$1 = *($10 + [72])
	$11 = *(($10 + [108]))
	$16 = *(($10 + [104]))
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$42 }
	
.LOOP $label$43:
	CALL eosio_assert(((int_64)*(($16 + [16])) == (int_64)$2), [1392])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *(($16 + [8])))) > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [1472])
	$16 = ($16 + [24])
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$43 }
	
.LABEL $label$42
	*($17 + [80]) = CALL tapos_block_prefix()
	$1 = (Rounds 0)(((float_64)((float_64)(float_64)2 / (float_64)(CASTING float_64)(uint_64 $14)) * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 CALL _Z6randomPvj(($17 + [80]), [4])) % (int_64)$1))))
	$15 = (int_64)
	$1 = ( $15($1 - ((int_64)$2 * (int_64)((int_64)$14 + (int_64)-1)))) ? $1 : ((uint_64)$1 > (uint_64)$15) 
	$2 = ( (int_64)10000 ? (int_64)10 : ((int_64)$2 == (int_64)1413956868) )
	*($17 + [168]) = ( $2 ? $1) : (uint_64)($1 <= $2) )
	$1 = *($0)
	*($17 + [108]) = ($17 + [168])
	*($17 + [104]) = ($17 + [312])
	CALL eosio_assert($7, [1840])
	CALL $93(($17 + [264]), $10, $1, ($17 + [104]))
	goto $label$24 
	
.LABEL $label$41
	$2 = *(($10 + [80]))
	$14 = ((uint_64)*($10 + [72]) / (uint_64)*(($10 + [16])))
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	
.LOOP $label$48:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$48 }
	
.LABEL $label$47
	$11 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$11 = [0]
	
.LABEL $label$44
	CALL eosio_assert($11, [624])
	*(($17 + [176])) = $2
	*($17 + [168]) = $14
	$1 = *($0)
	*($17 + [108]) = ($17 + [168])
	*($17 + [104]) = ($17 + [312])
	CALL eosio_assert($7, [1840])
	CALL $92(($17 + [264]), $10, $1, ($17 + [104]))
	
.LABEL $label$24
	$1 = *(($17 + [176]))
	*($17 + [88]) = $1
	$2 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($17 + [168])) * (float_64)(float_64)0.001))
	$2 = ( $2 ? (int_64)1 : ((int_64)$2 > (int_64)1) )
	*($17 + [80]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	
.LOOP $label$53:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$53 }
	
.LABEL $label$52
	$11 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$11 = [0]
	
.LABEL $label$49
	CALL eosio_assert($11, [624])
	$1 = *($0)
	*(($17 + [136])) = [0]
	*($17 + [112]) = $1
	*($17 + [104]) = $1
	*($17 + [120]) = (int_64)-1
	*($17 + [128]) = (int_64)0
	$2 = *(*(CALL $63(($17 + [104]), CALL $fimport$25($1, $1, (int_64)-6219918586631159808, (int_64)0)) + [8]) + [16])
	*(($17 + [328])) = [0]
	*($17 + [320]) = (int_64)0
	$16 = CALL strlen([2544])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$55 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$58 }
	*($17 + [320]) = ($16 << [1])
	$11 = (($17 + [320]) | [1])
	if ( $16 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$13 = (($16 + [16]) & [-16])
	$11 = CALL $151($13)
	*($17 + [320]) = ($13 | [1])
	*($17 + [328]) = $11
	*($17 + [324]) = $16
	
.LABEL $label$57
	CALL memcpy($11, [2544], $16)
	
.LABEL $label$56
	*(($11 + $16)) = [0]
	CALL _ZNK9redpacket8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($16, $1, $2, ($17 + [80]), ($17 + [320]))
	if ( ((*($17 + [320]) & [1]) == 0) ){ goto $label$59 }
	CALL $152(*($17 + [328]))
	
.LABEL $label$59
	$9 = *($17 + [128])
	if ( ($9 == 0) ){ goto $label$60 }
	$7 = ($17 + [132])
	$13 = *($7)
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$62 }
	
.LOOP $label$63:
	$13 = ($13 + [-24])
	$12 = *($13)
	*($13) = [0]
	if ( ($12 == 0) ){ goto $label$64 }
	$10 = *($12 + [8])
	if ( ($10 == 0) ){ goto $label$65 }
	$3 = ($12 + [12])
	$16 = *($3)
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$67 }
	$11 = ([0] - $10)
	$16 = ($16 + [-24])
	
.LOOP $label$68:
	if ( ((*($16) & [1]) == 0) ){ goto $label$69 }
	CALL $152(*(($16 + [8])))
	
.LABEL $label$69
	$16 = ($16 + [-24])
	if ( ((int_32)($16 + $11) != (int_32)[-24]) ){ goto $label$68 }
	$16 = *(($12 + [8]))
	goto $label$66 
	
.LABEL $label$67
	$16 = $10
	
.LABEL $label$66
	*($3) = $10
	CALL $152($16)
	
.LABEL $label$65
	CALL $152($12)
	
.LABEL $label$64
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$63 }
	$16 = *(($17 + [128]))
	goto $label$61 
	
.LABEL $label$62
	$16 = $9
	
.LABEL $label$61
	*($7) = $9
	CALL $152($16)
	
.LABEL $label$60
	$11 = (($17 + [168]) + [8])
	CALL eosio_assert(((int_64)*((($17 + [80]) + [8])) == (int_64)*($11)), [1392])
	$1 = (int_64)
	*($17 + [168]) = $1(*($17 + [168]) - *($17 + [80])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($17 + [168]) < (int_64)4611686018427387904), [1472])
	if ( ($4 == 0) ){ goto $label$70 }
	$1 = *($17 + [312])
	CALL memcpy(($17 + [40]), $5, [40])
	$16 = CALL memcpy($17, ($17 + [40]), [40])
	CALL _ZN9redpacket14create_accountEyN5eosio10public_keyERKS1_RKNS0_5assetE(($16 + [104]), $0, $1, $16, $6, ($16 + [168]))
	CALL eosio_assert(((int_64)*($16 + [112]) == (int_64)*($11)), [1392])
	$1 = (int_64)
	*($16 + [168]) = $1(*($16 + [168]) - *($16 + [104])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($16 + [168]) < (int_64)4611686018427387904), [1472])
	
.LABEL $label$70
	CALL eosio_assert(((int_64)*($17 + [168]) > (int_64)0), [2560])
	$1 = *($0)
	$2 = *($17 + [312])
	*((($17 + [104]) + [8])) = [0]
	*($17 + [104]) = (int_64)0
	$16 = CALL strlen([2592])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$54 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$73 }
	*($17 + [104]) = ($16 << [1])
	$11 = (($17 + [104]) | [1])
	if ( $16 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$13 = (($16 + [16]) & [-16])
	$11 = CALL $151($13)
	*($17 + [104]) = ($13 | [1])
	*($17 + [112]) = $11
	*($17 + [108]) = $16
	
.LABEL $label$72
	CALL memcpy($11, [2592], $16)
	
.LABEL $label$71
	*(($11 + $16)) = [0]
	CALL _ZNK9redpacket8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($16, $1, $2, ($17 + [168]), ($17 + [104]))
	if ( ((*($17 + [104]) & [1]) == 0) ){ goto $label$74 }
	CALL $152(*($17 + [112]))
	
.LABEL $label$74
	$12 = *($17 + [248])
	if ( ($12 == 0) ){ goto $label$75 }
	$10 = ($17 + [252])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$12) ){ goto $label$77 }
	
.LOOP $label$78:
	$16 = ($16 + [-24])
	$11 = *($16)
	*($16) = [0]
	if ( ($11 == 0) ){ goto $label$79 }
	$13 = *($11 + [44])
	if ( ($13 == 0) ){ goto $label$80 }
	*(($11 + [48])) = $13
	CALL $152($13)
	
.LABEL $label$80
	CALL $152($11)
	
.LABEL $label$79
	if ( ((int_32)$12 != (int_32)$16) ){ goto $label$78 }
	$16 = *(($17 + [248]))
	goto $label$76 
	
.LABEL $label$77
	$16 = $12
	
.LABEL $label$76
	*($10) = $12
	CALL $152($16)
	
.LABEL $label$75
	$12 = *($17 + [288])
	if ( ($12 == 0) ){ goto $label$81 }
	$10 = ($17 + [292])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$83 }
	
.LOOP $label$84:
	$11 = ($11 + [-24])
	$16 = *($11)
	*($11) = [0]
	if ( ($16 == 0) ){ goto $label$85 }
	$13 = *($16 + [104])
	if ( ($13 == 0) ){ goto $label$86 }
	*(($16 + [108])) = $13
	CALL $152($13)
	
.LABEL $label$86
	if ( ((*($16 + [88]) & [1]) == 0) ){ goto $label$87 }
	CALL $152(*(($16 + [96])))
	
.LABEL $label$87
	CALL $152($16)
	
.LABEL $label$85
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$84 }
	$16 = *(($17 + [288]))
	goto $label$82 
	
.LABEL $label$83
	$16 = $12
	
.LABEL $label$82
	*($10) = $12
	CALL $152($16)
	
.LABEL $label$81
	*([0] + [4]) = ($17 + [336])
	return (unreachable)
	
.LABEL $label$55
	CALL $153(($17 + [320]))
	
.LABEL $label$54
	CALL $153(($17 + [104]))
	
.LABEL $label$6
	CALL $167(($17 + [104]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = *($1)
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = ($0 + [8])
	$4 = [4]
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)(*($2) - $7) > (int_32)[0]), [1328])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ($1 + $4), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[37]) ){ goto $label$2 }
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1328])
	CALL memcpy(*($4), ($7 + [4]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1328])
	CALL memcpy(*($4), ($7 + [16]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[44]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $86($0, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[1]), [1328])
	CALL memcpy(*($5 + [4]), ($7 + [40]), [2])
	*($5 + [4]) = (*($5 + [4]) + [2])
	$7 = ($7 + [44])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $83($0, ($3 + [20]))
	CALL $84($0, ($3 + [32]))
	CALL $85($0, ($3 + [44]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $83($0, ($3 + [60]))
	CALL $84($0, ($3 + [72]))
	CALL $85($0, ($3 + [84]))
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($6 = *($1))) = (*($6) + [4])
	$5 = *($6)
	$6 = *($0 + [4])
	$3 = *($6 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[44]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = ($6 + [35])
	$7 = *($5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [44])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	*($2) = $6
	
.LABEL $label$2
	$3 = *($6)
	$6 = *($0 + [8])
	$5 = *($6 + [4])
	$4 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)($4 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $6) + [18])
	
.LABEL $label$6
	*($2) = $6
	$3 = *($6)
	$6 = *($0 + [12])
	$5 = *($6 + [4])
	$0 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	$1 = *($1)
	$6 = *($1)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $6) + [6])
	
.LABEL $label$8
	*($1) = $6
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [16]
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [20])
	*($4 + [16]) = ($1 + [16])
	*($4 + [24]) = ($1 + [32])
	*($4 + [28]) = ($1 + [44])
	CALL $81(($4 + [16]), ($4 + [8]))
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [60])
	*($4 + [16]) = ($1 + [56])
	*($4 + [24]) = ($1 + [72])
	*($4 + [28]) = ($1 + [84])
	CALL $81(($4 + [16]), ($4 + [8]))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $37($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $0
	*($4 + [16]) = $0
	*($4 + [24]) = $3
	*($4) = ($4 + [16])
	*($4 + [8]) = $1
	CALL $82(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11702]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11704])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11702]) = [1]
	$7 = ($7 << [16])
	*([0] + [11704]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11704])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11704]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11702]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11702]) = [1]
	$3 = ($3 << [16])
	*([0] + [11704]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11704])
	
.LABEL $label$8
	*([0] + [11704]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $149($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11616])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $145 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	*((($6 + [16]) + [8])) = [0]
	*($6 + [16]) = (int_64)0
	$3 = CALL strlen([3184])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [16]) = ($3 << [1])
	$5 = (($6 + [16]) | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = (($3 + [16]) & [-16])
	$5 = CALL $151($2)
	*($6 + [16]) = ($2 | [1])
	*($6 + [24]) = $5
	*($6 + [20]) = $3
	
.LABEL $label$4
	CALL memcpy($5, [3184], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL $168(($6 + [32]), ($6 + [16]))
	*($6 + [4 align=4]) = (int_64)0
	*($6) = [0]
	*($6 + [48]) = $1
	$3 = CALL strlen([3200])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = ($0 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$8 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $151($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$7
	CALL memcpy($5, [3200], $3)
	
.LABEL $label$6
	*(($5 + $3)) = [0]
	CALL $168(($6 + [56]), $6)
	*(($6 + [72])) = $1
	CALL $146($2, ($6 + [32]), ($6 + [80]))
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$9 }
	CALL $152(*(($6 + [64])))
	
.LABEL $label$9
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $152(*($6 + [40]))
	
.LABEL $label$10
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	CALL $152(*($6 + [8]))
	
.LABEL $label$11
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $152(*($6 + [24]))
	
.LABEL $label$12
	*([0] + [4]) = ($6 + [80])
	return $0
	
.LABEL $label$2
	CALL $153(($6 + [16]))
	
.LABEL $label$1
	CALL $153($6)
	(unreachable)
	return (unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	$2 = *($0)
	$11 = $12
	$5 = CALL $145(($11 + [8]), *(*(*($0 + [4]))))
	*($1) = *($5)
	$3 = ($1 + [8])
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$4 }
	$7 = ($1 + [12])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$9 = ([0] - $4)
	$8 = ($8 + [-24])
	
.LOOP $label$5:
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	CALL $152(*(($8 + [8])))
	
.LABEL $label$6
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $9) != (int_32)[-24]) ){ goto $label$5 }
	$8 = *($3)
	goto $label$2 
	
.LABEL $label$4
	$6 = ($1 + [16])
	$7 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$3
	$8 = $4
	
.LABEL $label$2
	*(($1 + [12])) = $4
	CALL $152($8)
	*(($6 = ($1 + [16]))) = [0]
	*(($1 + [8])) = (int_64)0
	
.LABEL $label$1
	$8 = [8]
	$9 = *(($5 + [8]))
	*($3) = $9
	$4 = *(($5 + [12]))
	*($7) = $4
	*($6) = *(($5 + [16]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($4 - $9) / (int_32)[24]))
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *($9)
	$5 = ( *($9 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$8 = (($5 + $8) + [8])
	$10 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$10:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$10 }
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($8 <= [513]) ){ goto $label$12 }
	$9 = CALL malloc($8)
	goto $label$11 
	
.LABEL $label$12
	$9 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$11
	*($11 + [8]) = $9
	*($11 + [16]) = ($9 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1328])
	CALL memcpy($9, $1, [8])
	*($11 + [12]) = ($9 + [8])
	CALL $65(($11 + [8]), $3)
	$10 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-6219918586631159808, *(*($0 + [8])), $10, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$13 }
	CALL free($9)
	
.LABEL $label$13
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$14 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $148([3208], $0)
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-24])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $152(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $154($6, $1)
	*(($6 + [16])) = *(($1 + [16]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	CALL $168($1, $7)
	*($1 + [16]) = *(($7 + [16]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-24])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $152(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $152($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $151($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $168($6, $1)
	*($6 + [16]) = *(($1 + [16]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL _ZN9redpacket5applyEyy(CALL $142(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $151(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $152($6)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2336])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $151([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $144(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [12])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$3 = ($3 + [-24])
	
.LOOP $label$7:
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $152(*(($3 + [8])))
	
.LABEL $label$8
	$3 = ($3 + [-24])
	if ( ((int_32)($3 + $1) != (int_32)[-24]) ){ goto $label$7 }
	$3 = *(($0 + [8]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $152($3)
	
.LABEL $label$4
	CALL $152($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $142 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($0) = $1
	*(($10 + [56])) = [0]
	*($10 + [32]) = $1
	*($10 + [24]) = $1
	*($10 + [40]) = (int_64)-1
	*($10 + [48]) = (int_64)0
	$9 = CALL db_lowerbound_i64($1, $1, (int_64)-6219918586631159808, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	CALL $63(($10 + [24]), $9)
	$2 = *($10 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($10 + [16]) = $0
	CALL $143(($10 + [8]), ($10 + [24]), $1, ($10 + [16]))
	$2 = *($10 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($10 + [52])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	$7 = ($3 + [12])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$10 }
	$5 = ([0] - $4)
	$9 = ($9 + [-24])
	
.LOOP $label$11:
	if ( ((*($9) & [1]) == 0) ){ goto $label$12 }
	CALL $152(*(($9 + [8])))
	
.LABEL $label$12
	$9 = ($9 + [-24])
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$11 }
	$9 = *(($3 + [8]))
	goto $label$9 
	
.LABEL $label$10
	$9 = $4
	
.LABEL $label$9
	*($7) = $4
	CALL $152($9)
	
.LABEL $label$8
	CALL $152($3)
	
.LABEL $label$7
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$6 }
	$9 = *(($10 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$9 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL $152($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [64])
	return $0
}

void .FUNC _ZN9redpacket14create_accountEyN5eosio10public_keyERKS1_RKNS0_5assetE (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [432])
	*([0] + [4]) = $14
	CALL _ZN5eosio11buyrambytesEm(($14 + [328]), [3072])
	CALL eosio_assert([1], [560])
	$8 = [0]
	$10 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [624])
	CALL eosio_assert([1], [560])
	$10 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [624])
	$10 = *($14 + [328])
	$12 = *($14 + [336])
	CALL eosio_assert(((int_64)1397703940 == (int_64)$12), [2064])
	$9 = ((int_64)$10 + (int_64)1500)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [2144])
	CALL eosio_assert(((int_64)$12 == (int_64)1397703940), [2064])
	$10 = ((int_64)$10 + (int_64)2000)
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [2144])
	CALL eosio_assert(((int_64)$12 == (int_64)*($5 + [8])), [2176])
	CALL eosio_assert(((int_64)$10 <= (int_64)*($5)), [2240])
	*($14 + [288]) = [1]
	*($14 + [376]) = [0]
	$6 = CALL memcpy((($14 + [376]) | [4]), ($3 + [4]), [33])
	*($14 + [416]) = [1]
	$8 = CALL $151([44])
	$5 = ($8 + [44])
	*((($14 + [288]) + [12])) = $5
	*($14 + [292]) = $8
	CALL memcpy($8, ($14 + [376]), [44])
	*((($14 + [288]) + [8])) = $5
	*((($14 + [288]) + [20])) = [0]
	*((($14 + [288]) + [24])) = [0]
	*((($14 + [288]) + [32])) = [0]
	*((($14 + [288]) + [36])) = [0]
	*($14 + [304]) = [0]
	*($14 + [316]) = [0]
	*($14 + [248]) = [1]
	*($14 + [376]) = [0]
	CALL memcpy($6, ($4 + [4]), [33])
	*(($6 = (($14 + [248]) + [12]))) = [0]
	*($14 + [416]) = [1]
	$10 = (int_64)0
	*($14 + [252 align=4]) = (int_64)0
	$8 = CALL $151([44])
	$5 = ($8 + [44])
	*($6) = $5
	*($14 + [252]) = $8
	CALL memcpy($8, ($14 + [376]), [44])
	*((($14 + [248]) + [8])) = $5
	*((($14 + [248]) + [20])) = [0]
	*((($14 + [248]) + [24])) = [0]
	*((($14 + [248]) + [32])) = [0]
	*((($14 + [248]) + [36])) = [0]
	*($14 + [264]) = [0]
	*($14 + [276]) = [0]
	$9 = (int_64)59
	$8 = [912]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$16 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$16
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	$7 = *($1)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$22 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$17 }
	*($14 + [384]) = $13
	*($14 + [376]) = $7
	*($14 + [240]) = [0]
	*($14 + [232]) = (int_64)0
	*((($8 = CALL $151([16])) + [12])) = *((($14 + [376]) + [12]))
	*(($8 + [4])) = *($14 + [380])
	*($14 + [232]) = $8
	*($8) = *($14 + [376])
	$6 = ($8 + [16])
	*($14 + [240]) = $6
	*(($8 + [8])) = *($14 + [384])
	*($14 + [236]) = $6
	*($14 + [136]) = *($1)
	*($14 + [144]) = $2
	CALL $73((($14 + [136]) + [16]), ($14 + [288]))
	CALL $73(($14 + [192]), ($14 + [248]))
	CALL $74($11, ($14 + [232]), ($14 + [136]))
	$8 = *(($14 + [220]))
	if ( ($8 == 0) ){ goto $label$23 }
	*(($14 + [224])) = $8
	CALL $152($8)
	
.LABEL $label$23
	$8 = *(($14 + [208]))
	if ( ($8 == 0) ){ goto $label$24 }
	*(($14 + [212])) = $8
	CALL $152($8)
	
.LABEL $label$24
	$8 = *(($14 + [196]))
	if ( ($8 == 0) ){ goto $label$25 }
	*(($14 + [200])) = $8
	CALL $152($8)
	
.LABEL $label$25
	$8 = *(($14 + [180]))
	if ( ($8 == 0) ){ goto $label$26 }
	*(($14 + [184])) = $8
	CALL $152($8)
	
.LABEL $label$26
	$8 = *(($14 + [168]))
	if ( ($8 == 0) ){ goto $label$27 }
	*(($14 + [172])) = $8
	CALL $152($8)
	
.LABEL $label$27
	$8 = *(($14 + [156]))
	if ( ($8 == 0) ){ goto $label$28 }
	*(($14 + [160])) = $8
	CALL $152($8)
	
.LABEL $label$28
	$8 = *($14 + [232])
	if ( ($8 == 0) ){ goto $label$29 }
	*($14 + [236]) = $8
	CALL $152($8)
	
.LABEL $label$29
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [912]
	$11 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$35 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$6 = ($6 + [165])
	goto $label$33 
	
.LABEL $label$35
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$31
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$30 }
	$7 = *($1)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$13 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$41 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$6 = ($6 + [165])
	goto $label$39 
	
.LABEL $label$41
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$36 }
	*($14 + [128]) = $13
	*($14 + [120]) = $7
	*((($8 = CALL $151([16])) + [8])) = *($14 + [128])
	*($8) = *($14 + [120])
	*(($6 = (($14 + [104]) + [8]))) = *((($14 + [328]) + [8]))
	*($14 + [104]) = *($14 + [328])
	$10 = *($1)
	*(($5 = (($14 + [344]) + [8]))) = *($6)
	*($14 + [344]) = *($14 + [104])
	*($14 + [360]) = $8
	$8 = ($8 + [16])
	*($14 + [368]) = $8
	*($14 + [364]) = $8
	*($14 + [384]) = $2
	*($14 + [376]) = $10
	*(($8 = (($14 + [376]) + [24]))) = *($5)
	*((($14 + [64]) + [8])) = *($14 + [384])
	*($14 + [392]) = *($14 + [344])
	*((($14 + [64]) + [24])) = *($8)
	*((($14 + [64]) + [16])) = *($14 + [392])
	*($14 + [64]) = *($14 + [376])
	CALL $75($11, (int_64)4520896354024685568, ($14 + [360]), ($14 + [64]))
	$8 = *($14 + [360])
	if ( ($8 == 0) ){ goto $label$42 }
	*($14 + [364]) = $8
	CALL $152($8)
	
.LABEL $label$42
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [912]
	$11 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$48 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$6 = ($6 + [165])
	goto $label$46 
	
.LABEL $label$48
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$44
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$43 }
	$7 = *($1)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$13 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$54 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$6 = ($6 + [165])
	goto $label$52 
	
.LABEL $label$54
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$50
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$49 }
	*($14 + [352]) = $13
	*($14 + [344]) = $7
	*((($8 = CALL $151([16])) + [8])) = *($14 + [352])
	*($8) = *($14 + [344])
	$10 = *($1)
	*(($6 = (($14 + [360]) + [6]))) = *((($14 + [97]) + [6]))
	*(($1 = (($14 + [360]) + [4]))) = *((($14 + [97]) + [4]))
	*($14 + [360]) = *($14 + [97 align=1])
	$5 = ($8 + [16])
	*($14 + [124]) = $5
	*($14 + [120]) = $8
	*($14 + [128]) = $5
	*($14 + [376]) = $10
	*($14 + [384]) = $2
	*($14 + [392]) = (int_64)500
	*(($14 + [400])) = (int_64)1397703940
	*($14 + [408]) = (int_64)1500
	*(($14 + [416])) = (int_64)1397703940
	*($14 + [424]) = [1]
	*(($14 + [431])) = *($6)
	*(($14 + [429])) = *($1)
	*($14 + [425 align=1]) = *($14 + [360])
	CALL memcpy(($14 + [8]), ($14 + [376]), [56])
	CALL $76($11, (int_64)5378043540636893184, ($14 + [120]), ($14 + [8]))
	$8 = *($14 + [120])
	if ( ($8 == 0) ){ goto $label$55 }
	*($14 + [124]) = $8
	CALL $152($8)
	
.LABEL $label$55
	$10 = *($14 + [328])
	$12 = *((($14 + [328]) + [8]))
	CALL eosio_assert(((int_64)1397703940 == (int_64)$12), [2064])
	$9 = ((int_64)$10 + (int_64)1500)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [2144])
	*($0 + [8]) = $12
	CALL eosio_assert(((int_64)$12 == (int_64)1397703940), [2064])
	$10 = ((int_64)$10 + (int_64)2000)
	*($0) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [2144])
	$8 = *(($14 + [276]))
	if ( ($8 == 0) ){ goto $label$56 }
	*(($14 + [280])) = $8
	CALL $152($8)
	
.LABEL $label$56
	$8 = *(($14 + [264]))
	if ( ($8 == 0) ){ goto $label$57 }
	*(($14 + [268])) = $8
	CALL $152($8)
	
.LABEL $label$57
	$8 = *($14 + [252])
	if ( ($8 == 0) ){ goto $label$58 }
	*(($14 + [256])) = $8
	CALL $152($8)
	
.LABEL $label$58
	$8 = *(($14 + [316]))
	if ( ($8 == 0) ){ goto $label$59 }
	*(($14 + [320])) = $8
	CALL $152($8)
	
.LABEL $label$59
	$8 = *(($14 + [304]))
	if ( ($8 == 0) ){ goto $label$60 }
	*(($14 + [308])) = $8
	CALL $152($8)
	
.LABEL $label$60
	$8 = *($14 + [292])
	if ( ($8 == 0) ){ goto $label$61 }
	*(($14 + [296])) = $8
	CALL $152($8)
	
.LABEL $label$61
	*([0] + [4]) = ($14 + [432])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL $151($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $151($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	$3 = int_32($2 >> [3])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $151($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $167(($0 + [4]))
	
.LABEL $label$2
	CALL $167(($0 + [16]))
	
.LABEL $label$1
	CALL $167(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1888])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1936])
	$8 = [8]
	*((*(($5 = ($1 + [8]))) + [40])) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [2000])
	$3 = *($5)
	$6 = *(($1 + [12]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($6 - $3) / (int_32)[24]))
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = *($3)
	$7 = ( *($3 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$8 = (($7 + $8) + [8])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($8)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	*($10) = $3
	*($10 + [8]) = ($3 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1328])
	CALL memcpy($3, $1, [8])
	*($10 + [4]) = ($3 + [8])
	CALL $65($10, $5)
	CALL db_update_i64(*($1 + [24]), $2, $3, $8)
	if ( ($8 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZNK9redpacket7calcfeeERN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	$3 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.001))
	$3 = ( $3 ? (int_64)1 : ((int_64)$3 > (int_64)1) )
	*($0) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [624])
}

void .FUNC $76 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $151($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($9 + [60])) = [0]
	CALL $37(($9 + [52]), [49])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $77(($9 + [72]), ($9 + [64]))
	CALL $40(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $152($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $152($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $152($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $152($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $167(($9 + [8]))
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [1328])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $74 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$3 = *($1 + [8])
	*($1 + [8]) = [0]
	$4 = *($1)
	*($1 + [4]) = [0]
	*($8 + [96]) = $4
	*($8 + [104]) = $3
	*($1) = [0]
	*($8) = *($2)
	*($8 + [8]) = *($2 + [8])
	*($8 + [16]) = *($2 + [16])
	$1 = ($2 + [20])
	*(($8 + [20])) = *($1)
	$3 = ($2 + [24])
	*(($8 + [24])) = *($3)
	*($3) = [0]
	$3 = ($2 + [28])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [28])) = $5
	*($1) = [0]
	$1 = ($2 + [32])
	*(($8 + [32])) = *($1)
	$3 = ($2 + [36])
	*(($8 + [36])) = *($3)
	*($3) = [0]
	$3 = ($2 + [40])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [40])) = $5
	*($1) = [0]
	$1 = ($2 + [44])
	*(($8 + [44])) = *($1)
	$3 = ($2 + [48])
	*(($8 + [48])) = *($3)
	*($3) = [0]
	$3 = ($2 + [52])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [52])) = $5
	*($1) = [0]
	*($8 + [56]) = *($2 + [56])
	$1 = ($2 + [60])
	*(($8 + [60])) = *($1)
	$3 = ($2 + [64])
	*(($8 + [64])) = *($3)
	*($3) = [0]
	$3 = ($2 + [68])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [68])) = $5
	*($1) = [0]
	$3 = ($2 + [72])
	*(($1 = ($8 + [72]))) = *($3)
	$5 = ($2 + [76])
	*(($8 + [76])) = *($5)
	*($5) = [0]
	$5 = ($2 + [80])
	$6 = *($5)
	*($5) = [0]
	*(($8 + [80])) = $6
	*($3) = [0]
	$5 = ($2 + [84])
	*(($3 = ($8 + [84]))) = *($5)
	$6 = ($2 + [88])
	*(($7 = ($8 + [88]))) = *($6)
	*($6) = [0]
	$2 = ($2 + [92])
	$6 = *($2)
	*($2) = [0]
	*(($8 + [92])) = $6
	*($5) = [0]
	CALL $79($0, (int_64)-7297973096368160768, ($8 + [96]), $8)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$1 }
	*($7) = $2
	CALL $152($2)
	
.LABEL $label$1
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$2 }
	*(($8 + [76])) = $2
	CALL $152($2)
	
.LABEL $label$2
	$2 = *(($8 + [60]))
	if ( ($2 == 0) ){ goto $label$3 }
	*(($8 + [64])) = $2
	CALL $152($2)
	
.LABEL $label$3
	$2 = *(($8 + [44]))
	if ( ($2 == 0) ){ goto $label$4 }
	*(($8 + [48])) = $2
	CALL $152($2)
	
.LABEL $label$4
	$2 = *(($8 + [32]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($8 + [36])) = $2
	CALL $152($2)
	
.LABEL $label$5
	$2 = *(($8 + [20]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($8 + [24])) = $2
	CALL $152($2)
	
.LABEL $label$6
	$2 = *($8 + [96])
	if ( ($2 == 0) ){ goto $label$7 }
	*($8 + [100]) = $2
	CALL $152($2)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $75 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $151($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = (($9 + [24]) + [32]))) = [0]
	*(($9 + [60])) = [0]
	CALL $37(($9 + [52]), [32])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $78(($9 + [72]), ($9 + [64]))
	CALL $40(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $152($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $152($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $152($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $152($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $167(($9 + [8]))
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $79 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $151($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $80(($9 + [52]), $3)
	CALL $40(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $152($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $152($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $152($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $152($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $167(($9 + [8]))
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $151(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $152($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [1328])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_64 .FUNC $94 (int_32 $0)
{
	int_32 $1
	$0 = ((int_32)((((*(($0 + [34])) << [8]) | *(($0 + [33]))) | (*(($0 + [35])) << [16])) | (*(($0 + [36])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [38])) << [8]) | *(($0 + [37]))) | (*(($0 + [39])) << [16])) | (*(($0 + [40])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [42])) << [8]) | *(($0 + [41]))) | (*(($0 + [43])) << [16])) | (*(($0 + [44])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [46])) << [8]) | *(($0 + [45]))) | (*(($0 + [47])) << [16])) | (*(($0 + [48])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [50])) << [8]) | *(($0 + [49]))) | (*(($0 + [51])) << [16])) | (*(($0 + [52])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [54])) << [8]) | *(($0 + [53]))) | (*(($0 + [55])) << [16])) | (*(($0 + [56])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [58])) << [8]) | *(($0 + [57]))) | (*(($0 + [59])) << [16])) | (*(($0 + [60])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((((*(($0 + [62])) << [8]) | *(($0 + [61]))) | (*(($0 + [63])) << [16])) | (*(($0 + [64])) << [24])) * (int_32)[1540483477])
	$0 = ((int_32)((int_32)*(($0 + [65])) ^ (int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($0 >> [24]) ^ (int_32)$0) * (int_32)[1540483477]) ^ (int_32)[-703652811]) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477]))) * (int_32)[1540483477])
	$0 = ((int_32)((int_32)uint_32($0 >> [13]) ^ (int_32)$0) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $151(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $152($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL memcpy(($3 + [6]), ($1 + [32]), [34])
	CALL memcpy(($3 + [40]), ($3 + [6]), [34])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[33]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $43($0, ($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [100]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $97($0, ($1 + [104]))
	*([0] + [4]) = ($3 + [80])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1888])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1936])
	$10 = *(($1 + [24]))
	$5 = *(($1 + [100]))
	$7 = CALL $94($1)
	*(($12 = $13) + [8]) = $5
	*($12) = $10
	*($12 + [16]) = $7
	$5 = *($1)
	$11 = *($3 + [4])
	*((($12 + [24]) + [12])) = *(($11 + [12]))
	*(($8 = (($12 + [24]) + [8]))) = *(($11 + [8]))
	*($12 + [24]) = *($11)
	*($12 + [28]) = *(($11 + [4]))
	$10 = *(*($3))
	$7 = *($8)
	*((($12 + [64]) + [8])) = $7
	*($12 + [64]) = *($12 + [24])
	*($12 + [40]) = $10
	*(($8 = (($12 + [40]) + [16]))) = $7
	*($12 + [48]) = *($12 + [64])
	$3 = ($1 + [108])
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)*(($1 + [112]))) ){ goto $label$2 }
	*($11) = *($12 + [40])
	*(($11 + [16])) = *($8)
	*(($11 + [8])) = *((($12 + [40]) + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $95(($1 + [104]), ($12 + [40]))
	
.LABEL $label$1
	$8 = ($12 + [16])
	$4 = ($12 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [2000])
	$11 = *($1 + [88])
	$3 = ( *(($1 + [92])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($3 + [79])
	$10 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	$6 = *($1 + [104])
	$3 = *(($1 + [108]))
	$9 = ($3 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[24]))
	
.LOOP $label$4:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	$3 = ($9 + [-24])
	$11 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $11) + [24])
	
.LABEL $label$5
	if ( ($11 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($11)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($12 + [44]) = $3
	*($12 + [40]) = $3
	*($12 + [48]) = ($3 + $11)
	CALL $96(($12 + [40]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($12 + [64]) = *(($1 + [24]))
	if ( (CALL memcmp($12, ($12 + [64]), [8]) == 0) ){ goto $label$10 }
	$11 = *($1 + [124])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$11 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616256, ($12 + [24]), $5)
	*(($1 + [124])) = $11
	
.LABEL $label$11
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$10
	*($12 + [64]) = *(($1 + [100]))
	if ( (CALL memcmp($4, ($12 + [64]), [8]) == 0) ){ goto $label$12 }
	$3 = ($1 + [128])
	$11 = *($3)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$13 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616255, ($12 + [24]), $5)
	*($3) = $11
	
.LABEL $label$13
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$12
	*($12 + [64]) = CALL $94($1)
	if ( (CALL memcmp($8, ($12 + [64]), [8]) == 0) ){ goto $label$14 }
	$1 = ($1 + [132])
	$11 = *($1)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$15 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616254, ($12 + [24]), $5)
	*($1) = $11
	
.LABEL $label$15
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $151(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $151([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $37(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [1328])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $152($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $152($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $152($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1888])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1936])
	$10 = *(($1 + [24]))
	$5 = *(($1 + [100]))
	$7 = CALL $94($1)
	*(($12 = $13) + [8]) = $5
	*($12) = $10
	*($12 + [16]) = $7
	$5 = *($1)
	$11 = *($3 + [4])
	*((($12 + [24]) + [12])) = *(($11 + [12]))
	*(($8 = (($12 + [24]) + [8]))) = *(($11 + [8]))
	*($12 + [24]) = *($11)
	*($12 + [28]) = *(($11 + [4]))
	$10 = *(*($3))
	$7 = *($8)
	*((($12 + [64]) + [8])) = $7
	*($12 + [64]) = *($12 + [24])
	*($12 + [40]) = $10
	*(($8 = (($12 + [40]) + [16]))) = $7
	*($12 + [48]) = *($12 + [64])
	$3 = ($1 + [108])
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)*(($1 + [112]))) ){ goto $label$2 }
	*($11) = *($12 + [40])
	*(($11 + [16])) = *($8)
	*(($11 + [8])) = *((($12 + [40]) + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $95(($1 + [104]), ($12 + [40]))
	
.LABEL $label$1
	$8 = ($12 + [16])
	$4 = ($12 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [2000])
	$11 = *($1 + [88])
	$3 = ( *(($1 + [92])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($3 + [79])
	$10 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	$6 = *($1 + [104])
	$3 = *(($1 + [108]))
	$9 = ($3 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[24]))
	
.LOOP $label$4:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	$3 = ($9 + [-24])
	$11 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $11) + [24])
	
.LABEL $label$5
	if ( ($11 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($11)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($12 + [44]) = $3
	*($12 + [40]) = $3
	*($12 + [48]) = ($3 + $11)
	CALL $96(($12 + [40]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($12 + [64]) = *(($1 + [24]))
	if ( (CALL memcmp($12, ($12 + [64]), [8]) == 0) ){ goto $label$10 }
	$11 = *($1 + [124])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$11 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616256, ($12 + [24]), $5)
	*(($1 + [124])) = $11
	
.LABEL $label$11
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$10
	*($12 + [64]) = *(($1 + [100]))
	if ( (CALL memcmp($4, ($12 + [64]), [8]) == 0) ){ goto $label$12 }
	$3 = ($1 + [128])
	$11 = *($3)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$13 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616255, ($12 + [24]), $5)
	*($3) = $11
	
.LABEL $label$13
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$12
	*($12 + [64]) = CALL $94($1)
	if ( (CALL memcmp($8, ($12 + [64]), [8]) == 0) ){ goto $label$14 }
	$1 = ($1 + [132])
	$11 = *($1)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$15 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616254, ($12 + [24]), $5)
	*($1) = $11
	
.LABEL $label$15
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1888])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1936])
	$10 = *(($1 + [24]))
	$5 = *(($1 + [100]))
	$7 = CALL $94($1)
	*(($12 = $13) + [8]) = $5
	*($12) = $10
	*($12 + [16]) = $7
	$5 = *($1)
	$11 = *($3 + [4])
	*((($12 + [24]) + [12])) = *(($11 + [12]))
	*(($8 = (($12 + [24]) + [8]))) = *(($11 + [8]))
	*($12 + [24]) = *($11)
	*($12 + [28]) = *(($11 + [4]))
	$10 = *(*($3))
	$7 = *($8)
	*((($12 + [64]) + [8])) = $7
	*($12 + [64]) = *($12 + [24])
	*($12 + [40]) = $10
	*(($8 = (($12 + [40]) + [16]))) = $7
	*($12 + [48]) = *($12 + [64])
	$3 = ($1 + [108])
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)*(($1 + [112]))) ){ goto $label$2 }
	*($11) = *($12 + [40])
	*(($11 + [16])) = *($8)
	*(($11 + [8])) = *((($12 + [40]) + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $95(($1 + [104]), ($12 + [40]))
	
.LABEL $label$1
	$8 = ($12 + [16])
	$4 = ($12 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [2000])
	$11 = *($1 + [88])
	$3 = ( *(($1 + [92])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($3 + [79])
	$10 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	$6 = *($1 + [104])
	$3 = *(($1 + [108]))
	$9 = ($3 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[24]))
	
.LOOP $label$4:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	$3 = ($9 + [-24])
	$11 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $11) + [24])
	
.LABEL $label$5
	if ( ($11 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($11)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($12 + [44]) = $3
	*($12 + [40]) = $3
	*($12 + [48]) = ($3 + $11)
	CALL $96(($12 + [40]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($12 + [64]) = *(($1 + [24]))
	if ( (CALL memcmp($12, ($12 + [64]), [8]) == 0) ){ goto $label$10 }
	$11 = *($1 + [124])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$11 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616256, ($12 + [24]), $5)
	*(($1 + [124])) = $11
	
.LABEL $label$11
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$10
	*($12 + [64]) = *(($1 + [100]))
	if ( (CALL memcmp($4, ($12 + [64]), [8]) == 0) ){ goto $label$12 }
	$3 = ($1 + [128])
	$11 = *($3)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$13 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616255, ($12 + [24]), $5)
	*($3) = $11
	
.LABEL $label$13
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$12
	*($12 + [64]) = CALL $94($1)
	if ( (CALL memcmp($8, ($12 + [64]), [8]) == 0) ){ goto $label$14 }
	$1 = ($1 + [132])
	$11 = *($1)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$15 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5002563355403616254, ($12 + [24]), $5)
	*($1) = $11
	
.LABEL $label$15
	CALL db_idx64_update($11, $2, ($12 + [64]))
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $151(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $152($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $152($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $152($5)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1120])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $140($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1056])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1056])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL _ZNK9redpacket8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($1, *($1), *($1 + [8]), ($1 + [16]), ($1 + [32]))
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = (*([0] + [4]) - [96])
	$7 = $2
	*([0] + [4]) = $2
	$3 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $4)
	
.LABEL $label$1
	*((($2 = CALL memset($7, [0], [48])) + [24])) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [560])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [624])
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [52]) = $5
	*($2 + [48]) = $5
	*($2 + [56]) = ($5 + $4)
	CALL $106(($2 + [48]), $2)
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	*((($2 + [48]) + [24])) = *(($2 + [24]))
	*((($2 + [48]) + [16])) = *(($2 + [16]))
	*((($2 + [48]) + [8])) = *(($2 + [8]))
	*($2 + [48]) = *($2)
	CALL $168((($2 + [48]) + [32]), ($2 + [32]))
	$1 = ($0 + int_32($3 >> [1]))
	if ( (($3 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($2 + [48])), (int_32 $8))
	if ( ((*((($2 + [48]) + [32])) & [1]) == 0) ){ goto $label$11 }
	CALL $152(*(($2 + [88])))
	
.LABEL $label$11
	if ( ((*(($2 + [32])) & [1]) == 0) ){ goto $label$12 }
	CALL $152(*(($2 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $132 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL $133($0)
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)6457340698688487424, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $103($6, $0)
	CALL eosio_assert(((int_32)*($0 + [60]) == (int_32)$6), [928])
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1584])
	$3 = CALL db_next_i64(*($0 + [64]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $103($6, $3)
	
.LABEL $label$2
	CALL $134($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*(($3 + [40])) & [1]) == 0) ){ goto $label$8 }
	CALL $152(*(($3 + [48])))
	
.LABEL $label$8
	CALL $152($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $152($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $133 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	*(($13 + [40])) = [0]
	*($13 + [24]) = (int_64)-1
	$12 = *($0)
	*($13 + [8]) = $12
	*($13 + [16]) = $12
	$10 = (int_64)0
	*($13 + [32]) = (int_64)0
	$1 = *((*(CALL $63(($13 + [8]), CALL $fimport$25($12, $12, (int_64)-6219918586631159808, (int_64)0)) + [8]) + [40]))
	$2 = *($13 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	$6 = ($13 + [36])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$6 }
	$7 = ($3 + [12])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	$5 = ([0] - $4)
	$0 = ($0 + [-24])
	
.LOOP $label$9:
	if ( ((*($0) & [1]) == 0) ){ goto $label$10 }
	CALL $152(*(($0 + [8])))
	
.LABEL $label$10
	$0 = ($0 + [-24])
	if ( ((int_32)($0 + $5) != (int_32)[-24]) ){ goto $label$9 }
	$0 = *(($3 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $4
	
.LABEL $label$7
	*($7) = $4
	CALL $152($0)
	
.LABEL $label$6
	CALL $152($3)
	
.LABEL $label$5
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$4 }
	$0 = *(($13 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($6) = $2
	CALL $152($0)
	
.LABEL $label$1
	$9 = (int_64)59
	$0 = [3168]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$10 > (uint_64)(int_64)8) ){ goto $label$16 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	CALL require_auth2($1, $11)
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$7 }
	CALL $152(*(($4 + [48])))
	
.LABEL $label$7
	CALL $152($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $152(*(($4 + [48])))
	
.LABEL $label$10
	CALL $152($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	$7 = *($0)
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy($7, *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	$8 = *($2 + [4])
	$5 = [0]
	$6 = (int_64)0
	$4 = ($2 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($8 <= *(($2 + [8]))), [1120])
	$8 = *($4)
	$7 = *($8)
	$8 = ($8 + [1])
	*($4) = $8
	$5 = ($5 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $5)) | (int_64)$6)
	$5 = ($5 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	*($0 + [8]) = $6
	$7 = [12]
	$4 = ($2 + [8])
	$5 = ($2 + [4])
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)*($4) != (int_32)$8), [1056])
	CALL memcpy(($0 + $7), *($5), [1])
	$8 = (*($5) + [1])
	*($5) = $8
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[45]) ){ goto $label$2 }
	$3 = *($1)
	$8 = *($3 + [4])
	$5 = [0]
	$6 = (int_64)0
	$2 = ($3 + [8])
	$4 = ($3 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(($8 <= *($2)), [1120])
	$8 = *($4)
	$7 = *($8)
	$8 = ($8 + [1])
	*($4) = $8
	$5 = ($5 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $5)) | (int_64)$6)
	$5 = ($5 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$3 }
	*(($0 + [48])) = $6
	$4 = ($0 + [52])
	$7 = [0]
	$2 = ($3 + [8])
	$5 = ($3 + [4])
	
.LOOP $label$4:
	CALL eosio_assert(((int_32)*($2) != (int_32)$8), [1056])
	CALL memcpy(($4 + $7), *($5), [1])
	$8 = (*($5) + [1])
	*($5) = $8
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[33]) ){ goto $label$4 }
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy(($0 + [88]), *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	*($9) = *($1)
	*($9 + [12]) = ($0 + [97])
	*($9 + [8]) = ($0 + [96])
	*($9 + [16]) = ($0 + [98])
	*($9 + [20]) = ($0 + [99])
	*($9 + [24]) = ($0 + [100])
	*($9 + [28]) = ($0 + [101])
	*($9 + [32]) = ($0 + [102])
	*($9 + [36]) = ($0 + [103])
	*($9 + [40]) = ($0 + [104])
	*($9 + [44]) = ($0 + [105])
	*($9 + [48]) = ($0 + [106])
	*($9 + [52]) = ($0 + [107])
	*($9 + [56]) = ($0 + [108])
	*($9 + [60]) = ($0 + [109])
	*($9 + [64]) = ($0 + [110])
	*($9 + [68]) = ($0 + [111])
	*($9 + [72]) = ($0 + [112])
	*($9 + [76]) = ($0 + [113])
	*($9 + [80]) = ($0 + [114])
	*($9 + [84]) = ($0 + [115])
	*($9 + [88]) = ($0 + [116])
	*($9 + [92]) = ($0 + [117])
	*($9 + [96]) = ($0 + [118])
	*($9 + [100]) = ($0 + [119])
	*($9 + [104]) = ($0 + [120])
	*($9 + [108]) = ($0 + [121])
	*($9 + [112]) = ($0 + [122])
	*($9 + [116]) = ($0 + [123])
	*($9 + [120]) = ($0 + [124])
	*($9 + [124]) = ($0 + [125])
	*($9 + [128]) = ($0 + [126])
	*($9 + [132]) = ($0 + [127])
	*($9 + [136]) = ($0 + [128])
	*($9 + [140]) = ($0 + [129])
	*($9 + [144]) = ($0 + [130])
	*($9 + [148]) = ($0 + [131])
	*($9 + [152]) = ($0 + [132])
	*($9 + [156]) = ($0 + [133])
	*($9 + [160]) = ($0 + [134])
	*($9 + [164]) = ($0 + [135])
	*($9 + [168]) = ($0 + [136])
	*($9 + [172]) = ($0 + [137])
	*($9 + [176]) = ($0 + [138])
	*($9 + [180]) = ($0 + [139])
	*($9 + [184]) = ($0 + [140])
	*($9 + [188]) = ($0 + [141])
	*($9 + [192]) = ($0 + [142])
	*($9 + [196]) = ($0 + [143])
	*($9 + [200]) = ($0 + [144])
	*($9 + [204]) = ($0 + [145])
	*($9 + [208]) = ($0 + [146])
	*($9 + [212]) = ($0 + [147])
	*($9 + [216]) = ($0 + [148])
	*($9 + [220]) = ($0 + [149])
	*($9 + [224]) = ($0 + [150])
	*($9 + [228]) = ($0 + [151])
	*($9 + [232]) = ($0 + [152])
	*($9 + [236]) = ($0 + [153])
	*($9 + [240]) = ($0 + [154])
	*($9 + [244]) = ($0 + [155])
	*($9 + [248]) = ($0 + [156])
	*($9 + [252]) = ($0 + [157])
	*($9 + [256]) = ($0 + [158])
	*($9 + [260]) = ($0 + [159])
	*($9 + [264]) = ($0 + [160])
	*($9 + [268]) = ($0 + [161])
	CALL $136(($9 + [8]), $9)
	*([0] + [4]) = ($9 + [272])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1056])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1056])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $151(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $152($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $152($1)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC $208 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [15744])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [15728]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [15760]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [9]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

void .FUNC $129 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	*((($7 + [48]) + [32])) = [0]
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = (int_64)0
	$4 = *($0)
	*($7 + [48]) = $4
	*($7 + [56]) = $4
	*(($7 + [86])) = [0]
	*($7 + [84]) = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-5002563355403616256, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $29(($7 + [48]), $6)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)($7 + [48])), [928])
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1584])
	$3 = CALL db_next_i64(*($6 + [120]), ($7 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $29(($7 + [48]), $3)
	
.LABEL $label$2
	CALL $49(($7 + [48]), $6)
	
.LABEL $label$1
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [8]) = $4
	*($7 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $50(($7 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [56]) == (int_32)($7 + [8])), [928])
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1584])
	$6 = CALL db_next_i64(*($0 + [60]), ($7 + [88]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	CALL $50(($7 + [8]), $6)
	
.LABEL $label$4
	CALL $51(($7 + [8]), $0)
	
.LABEL $label$3
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	$3 = *($6 + [44])
	if ( ($3 == 0) ){ goto $label$10 }
	*(($6 + [48])) = $3
	CALL $152($3)
	
.LABEL $label$10
	CALL $152($6)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($7 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $2
	
.LABEL $label$6
	*($5) = $2
	CALL $152($0)
	
.LABEL $label$5
	$2 = *($7 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($7 + [76])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	$3 = *($0 + [104])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($0 + [108])) = $3
	CALL $152($3)
	
.LABEL $label$16
	if ( ((*($0 + [88]) & [1]) == 0) ){ goto $label$17 }
	CALL $152(*(($0 + [96])))
	
.LABEL $label$17
	CALL $152($0)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$14 }
	$0 = *(($7 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL $152($0)
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $128 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL _ZN9redpacket9_setadminEy($0, $1)
}

int_32 .FUNC _Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE (int_32 $0, int_32 $1)
{
	return CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ), $1)
}

void .FUNC _Z9memo_argsRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($11 & [1])
	$11 = *($1)
	$9 = *($1 + [4])
	if ( (( $9 ? uint_32($11 >> [1]) : $5 ) == 0) ){ goto $label$2 }
	$3 = ($1 + [1])
	$6 = *($1 + [8])
	$5 = ( $6 ? $3 : $5 )
	$4 = (($12 + [8]) | [1])
	$2 = ($2 & [255])
	$7 = (($12 + [8]) + [8])
	$8 = ($0 + [4])
	
.LOOP $label$3:
	$10 = ($11 & [1])
	$11 = (( $6 ? $3 : $10 ) + ( $9 ? uint_32(($11 & [254]) >> [1]) : $10 ))
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$2 }
	
.LOOP $label$5:
	if ( ((int_32)*($5) != (int_32)$2) ){ goto $label$4 }
	$5 = ($5 + [1])
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$2 }
	$6 = ($5 + [1])
	*($12 + [28]) = $6
	if ( ((int_32)($11 + [-1]) == (int_32)$5) ){ goto $label$6 }
	$10 = *($12 + [24])
	$9 = $6
	
.LOOP $label$8:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$7 }
	$6 = ($9 + [1])
	*($12 + [28]) = $6
	$10 = $9
	$9 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$8 }
	$10 = ($6 + [-1])
	
.LABEL $label$7
	*($12 + [24]) = $10
	
.LABEL $label$6
	*($7) = [0]
	*($12 + [8]) = (int_64)0
	$10 = ($6 - $5)
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$10 > (uint_32)[10]) ){ goto $label$11 }
	*($12 + [8]) = ($10 << [1])
	$9 = $4
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$11 = (($10 + [16]) & [-16])
	$9 = CALL $151($11)
	*($7) = $9
	*($12 + [8]) = ($11 | [1])
	*($12 + [12]) = $10
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = ($5 - $6)
	$11 = [0]
	
.LOOP $label$12:
	*(($9 + $11)) = *(($5 + $11))
	$11 = ($11 + [1])
	if ( ($6 + $11) ){ goto $label$12 }
	$9 = ($9 + $10)
	
.LABEL $label$9
	*($9) = [0]
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)*(($0 + [8]))) ){ goto $label$14 }
	CALL $168($5, ($12 + [8]))
	*($8) = (*($8) + [12])
	goto $label$13 
	
.LABEL $label$14
	CALL $10($0, ($12 + [8]))
	
.LABEL $label$13
	$5 = *($12 + [28])
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $152(*($7))
	
.LABEL $label$15
	$9 = *(($1 + [4]))
	$11 = *($1)
	$10 = ($11 & [1])
	$6 = *(($1 + [8]))
	if ( ((int_32)$5 != (int_32)(( $6 ? $3 : $10 ) + ( $9 ? uint_32($11 >> [1]) : $10 ))) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $153(($12 + [8]))
}

void .FUNC $123 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	CALL $133($0)
	CALL memcpy(($6 + [72]), $5, [66])
	CALL memcpy(($6 + [6]), ($6 + [72]), [66])
	CALL _ZN9redpacket14_get_or_createEyy9signaturebPKN5eosio10public_keyES4_($0, $1, $4, ($6 + [6]), [1], $2, $3)
	CALL _ZN9redpacket5_pingEv($0)
	*([0] + [4]) = ($6 + [144])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = (*([0] + [4]) - [576])
	$9 = $2
	*([0] + [4]) = $2
	$3 = *($1 + [4])
	$8 = *($1)
	$7 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	*($9 + [88]) = (int_64)0
	*($9 + [80]) = (int_64)0
	$2 = CALL memset(($9 + [96]), [0], [66])
	*($9 + [244]) = $7
	*($9 + [240]) = $7
	*($9 + [248]) = ($7 + $1)
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1056])
	CALL memcpy(($9 + [80]), *($9 + [244]), [8])
	$6 = (*($9 + [244]) + [8])
	*($9 + [244]) = $6
	CALL eosio_assert(((uint_32)(*($9 + [248]) - $6) > (uint_32)[7]), [1056])
	$6 = (($9 + [80]) + [8])
	CALL memcpy($6, *($9 + [244]), [8])
	*($9 + [244]) = (*($9 + [244]) + [8])
	*($9 + [168]) = ($9 + [240])
	*($9 + [316]) = ($9 + [97])
	*($9 + [312]) = $2
	*($9 + [320]) = ($9 + [98])
	*($9 + [324]) = ($9 + [99])
	*($9 + [328]) = ($9 + [100])
	*($9 + [332]) = ($9 + [101])
	*($9 + [336]) = ($9 + [102])
	*($9 + [340]) = ($9 + [103])
	*($9 + [344]) = ($9 + [104])
	*($9 + [348]) = ($9 + [105])
	*($9 + [352]) = ($9 + [106])
	*($9 + [356]) = ($9 + [107])
	*($9 + [360]) = ($9 + [108])
	*($9 + [364]) = ($9 + [109])
	*($9 + [368]) = ($9 + [110])
	*($9 + [372]) = ($9 + [111])
	*($9 + [376]) = ($9 + [112])
	*($9 + [380]) = ($9 + [113])
	*($9 + [384]) = ($9 + [114])
	*($9 + [388]) = ($9 + [115])
	*($9 + [392]) = ($9 + [116])
	*($9 + [396]) = ($9 + [117])
	*($9 + [400]) = ($9 + [118])
	*($9 + [404]) = ($9 + [119])
	*($9 + [408]) = ($9 + [120])
	*($9 + [412]) = ($9 + [121])
	*($9 + [416]) = ($9 + [122])
	*($9 + [420]) = ($9 + [123])
	*($9 + [424]) = ($9 + [124])
	*($9 + [428]) = ($9 + [125])
	*($9 + [432]) = ($9 + [126])
	*($9 + [436]) = ($9 + [127])
	*($9 + [440]) = ($9 + [128])
	*($9 + [444]) = ($9 + [129])
	*($9 + [448]) = ($9 + [130])
	*($9 + [452]) = ($9 + [131])
	*($9 + [456]) = ($9 + [132])
	*($9 + [460]) = ($9 + [133])
	*($9 + [464]) = ($9 + [134])
	*($9 + [468]) = ($9 + [135])
	*($9 + [472]) = ($9 + [136])
	*($9 + [476]) = ($9 + [137])
	*($9 + [480]) = ($9 + [138])
	*($9 + [484]) = ($9 + [139])
	*($9 + [488]) = ($9 + [140])
	*($9 + [492]) = ($9 + [141])
	*($9 + [496]) = ($9 + [142])
	*($9 + [500]) = ($9 + [143])
	*($9 + [504]) = ($9 + [144])
	*($9 + [508]) = ($9 + [145])
	*($9 + [512]) = (($9 + [80]) + [66])
	*($9 + [516]) = ($9 + [147])
	*($9 + [520]) = ($9 + [148])
	*($9 + [524]) = ($9 + [149])
	*($9 + [528]) = ($9 + [150])
	*($9 + [532]) = ($9 + [151])
	*($9 + [536]) = ($9 + [152])
	*($9 + [540]) = ($9 + [153])
	*($9 + [544]) = ($9 + [154])
	*($9 + [548]) = ($9 + [155])
	*($9 + [552]) = ($9 + [156])
	*($9 + [556]) = ($9 + [157])
	*($9 + [560]) = ($9 + [158])
	*($9 + [564]) = ($9 + [159])
	*($9 + [568]) = ($9 + [160])
	*($9 + [572]) = ($9 + [161])
	CALL $136(($9 + [312]), ($9 + [168]))
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	$5 = *($6)
	$4 = *($9 + [80])
	CALL memcpy(($9 + [168]), $2, [66])
	CALL memcpy(($9 + [240]), ($9 + [168]), [66])
	$1 = ($0 + int_32($3 >> [1]))
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$8 = *((*($1) + $8))
	
.LABEL $label$5
	CALL memcpy(($9 + [312]), ($9 + [240]), [66])
	CALL memcpy(($9 + [14]), ($9 + [312]), [66])
	CALL void $1((int_32 $4), (int_64 $5), (int_64 ($9 + [14])), (int_32 $8))
	*([0] + [4]) = ($9 + [576])
	return [1]
}

void .FUNC $121 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL $133($0)
	CALL memcpy(($4 + [72]), $3, [66])
	CALL memcpy(($4 + [6]), ($4 + [72]), [66])
	CALL _ZN9redpacket14_get_or_createEyy9signaturebPKN5eosio10public_keyES4_($0, $1, $2, ($4 + [6]), [0], [0], [0])
	CALL _ZN9redpacket5_pingEv($0)
	*([0] + [4]) = ($4 + [144])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1120])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $137($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $152($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [1056])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $36($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1056])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $125 (int_32 $0, int_64 $1)
{
	CALL $133($0)
	CALL _ZN9redpacket9_withdrawEy($0, $1)
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [480])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	CALL memset(($7 + [20]), [0], [36])
	*($7 + [16]) = [0]
	CALL memset(($7 + [60]), [0], [36])
	*($7 + [96]) = (int_64)0
	*($7 + [56]) = [0]
	$8 = CALL memset(($7 + [104]), [0], [66])
	*($7 + [412]) = $1
	*($7 + [408]) = $1
	*($7 + [416]) = ($1 + $3)
	*($7 + [368]) = ($7 + [408])
	*($7 + [176]) = ($7 + [8])
	CALL $135(($7 + [176]), ($7 + [368]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$4 = *($7 + [8])
	CALL memcpy(($7 + [288]), ($7 + [16]), [40])
	CALL memcpy(($7 + [248]), ($7 + [56]), [40])
	$5 = *(($7 + [96]))
	CALL memcpy(($7 + [176]), $8, [66])
	CALL memcpy(($7 + [408]), ($7 + [176]), [66])
	CALL memcpy(($7 + [368]), ($7 + [248]), [40])
	CALL memcpy(($7 + [328]), ($7 + [288]), [40])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 ($7 + [328])), (int_32 ($7 + [368])), (int_32 $5), (int_64 ($7 + [408])), (int_32 $6))
	*([0] + [4]) = ($7 + [480])
	return [1]
}

int_32 .FUNC _Z12murmur_hash2PKcj (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ($1 <= [4]) ){ goto $label$2 }
	$2 = ($1 + [-4])
	$3 = ($2 & [-4])
	$6 = (($0 + $3) + [4])
	$5 = $1
	
.LOOP $label$3:
	$4 = ((int_32)((((*(($0 + [1])) << [8]) | *($0)) | (*(($0 + [2])) << [16])) | (*(($0 + [3])) << [24])) * (int_32)[1540483477])
	$1 = ((int_32)((int_32)((int_32)uint_32($4 >> [24]) ^ (int_32)$4) * (int_32)[1540483477]) ^ (int_32)((int_32)$1 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$3 }
	$5 = ($2 - $3)
	goto $label$1 
	
.LABEL $label$2
	$5 = $1
	$6 = $0
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$5 }
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$4 }
	$1 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$1)
	
.LABEL $label$6
	$1 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$1)
	
.LABEL $label$5
	$1 = ((int_32)((int_32)*($6) ^ (int_32)$1) * (int_32)[1540483477])
	
.LABEL $label$4
	$0 = ((int_32)((int_32)uint_32($1 >> [13]) ^ (int_32)$1) * (int_32)[1540483477])
	return ((int_32)uint_32($0 >> [15]) ^ (int_32)$0)
}

void .FUNC _ZN11eosiosystem14exchange_state19convert_to_exchangeERNS0_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	$4 = *($1)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)$6 + (int_64)*($2)))) + (float_64)(float_64)1), ((float_64)*($2 + [16]) / (float_64)(float_64)1e3))
	*($2) = ((int_64)$6 + (int_64)*($2))
	$6 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $5))
	*($0) = $6)
	$4 = *($1 + [8])
	*($0 + [8]) = $4
	*($1) = ((int_64)$6 + (int_64)*($1))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [624])
}

void .FUNC _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [656])
	$4 = *($2)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $6))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $6)
	$6 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)))
	*($0) = $6
	*($2) = (int_64))(*($2) - $6)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [624])
}

void .FUNC _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$5 = *(($1 + [48]))
	$7 = *(($1 + [24]))
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)*($1 + [8])) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$9 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [80]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [16]) + [12])) = *((($10 + [80]) + [12]))
	*((($10 + [16]) + [8])) = *($8)
	*($10 + [80]) = $7
	*($10 + [20]) = *($10 + [84])
	*($10 + [16]) = *($10 + [80])
	CALL _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE(($10 + [96]), $1, ($1 + [16]), ($10 + [16]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$8 }
	$4 = *($1)
	$8 = ($1 + [16])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [32])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1) = ((int_64)$4) + (int_64)*($1))
	$5 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [64]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [32]) + [12])) = *((($10 + [64]) + [12]))
	*((($10 + [32]) + [8])) = *($8)
	*($10 + [64]) = $7
	*($10 + [36]) = *($10 + [68])
	*($10 + [32]) = *($10 + [64])
	CALL _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE(($10 + [96]), $1, ($1 + [40]), ($10 + [32]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$4 }
	$4 = *($1)
	$8 = ($1 + [40])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [56])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1) = ((int_64)$4) + (int_64)*($1))
	$5 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [560])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [624])
	*(($2 + [8])) = $5
	*($2) = $4
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [704])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [688])
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [624])
	*(($2 + [8])) = $5
	*($2) = $4
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$18 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	goto $label$17 
	
.LABEL $label$18
	$7 = *($8)
	*((($10 + [48]) + [8])) = $7
	$4 = *($2)
	*(($10 + [8])) = $7
	*($10 + [48]) = $4
	*($10 + [4]) = *($10 + [52])
	*($10) = *($10 + [48])
	CALL _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE($0, $1, $10, $3)
	
.LABEL $label$17
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $151(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $168($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $152(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $152($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z13decode_pubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*(($7 + [72])) = [0]
	*($7 + [64]) = (int_64)0
	$4 = CALL strlen([320])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($7 + [64]) = ($4 << [1])
	$2 = (($7 + [64]) | [1])
	$3 = $2
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$3 = CALL $151($6)
	*($7 + [64]) = ($6 | [1])
	*($7 + [72]) = $3
	*($7 + [68]) = $4
	$2 = (($7 + [64]) | [1])
	
.LABEL $label$3
	CALL memcpy($3, [320], $4)
	
.LABEL $label$2
	$6 = [0]
	*(($3 + $4)) = [0]
	$5 = ( *($7 + [68]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($7 + [64])
	$5 = ($3 & [1])
	$4 = ( *($7 + [72]) ? $2 : $5 )
	$2 = ($4 + $5)
	if ( ($5 == 0) ){ goto $label$5 }
	$3 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)*($3)) ){ goto $label$5 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 == (int_32)$2), [336])
	$4 = *($7 + [64])
	CALL $169(($7 + [48]), $1, ( *($7 + [68]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = [0]
	CALL eosio_assert(CALL $5(( *($7 + [56]) ? (($7 + [48]) | [1]) : (*($7 + [48]) & [1]) ), ($7 + [32])), [384])
	CALL eosio_assert(((int_32)(*($7 + [36]) - *($7 + [32])) == (int_32)[37]), [416])
	*($0) = [0]
	$4 = ($0 + [1])
	$3 = *($7 + [32])
	
.LOOP $label$7:
	*(($4 + $6)) = *(($3 + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[33]) ){ goto $label$7 }
	CALL ripemd160(($0 + [1]), [33], $7)
	CALL eosio_assert((CALL $215($7, (*($7 + [36]) + [-4]), [4]) == 0), [416])
	$6 = *($7 + [32])
	if ( ($6 == 0) ){ goto $label$8 }
	*($7 + [36]) = $6
	CALL $152($6)
	
.LABEL $label$8
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL $152(*(($7 + [56])))
	
.LABEL $label$9
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $152(*(($7 + [72])))
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $153(($7 + [64]))
}

void .FUNC _Z16decode_eospubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*(($7 + [72])) = [0]
	*($7 + [64]) = (int_64)0
	$4 = CALL strlen([320])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($7 + [64]) = ($4 << [1])
	$2 = (($7 + [64]) | [1])
	$3 = $2
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$3 = CALL $151($6)
	*($7 + [64]) = ($6 | [1])
	*($7 + [72]) = $3
	*($7 + [68]) = $4
	$2 = (($7 + [64]) | [1])
	
.LABEL $label$3
	CALL memcpy($3, [320], $4)
	
.LABEL $label$2
	$6 = [0]
	*(($3 + $4)) = [0]
	$5 = ( *($7 + [68]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($7 + [64])
	$5 = ($3 & [1])
	$4 = ( *($7 + [72]) ? $2 : $5 )
	$2 = ($4 + $5)
	if ( ($5 == 0) ){ goto $label$5 }
	$3 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)*($3)) ){ goto $label$5 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 == (int_32)$2), [336])
	$4 = *($7 + [64])
	CALL $169(($7 + [48]), $1, ( *($7 + [68]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = [0]
	CALL eosio_assert(CALL $5(( *($7 + [56]) ? (($7 + [48]) | [1]) : (*($7 + [48]) & [1]) ), ($7 + [32])), [384])
	CALL eosio_assert(((int_32)(*($7 + [36]) - *($7 + [32])) == (int_32)[37]), [416])
	*($0) = [0]
	$4 = ($0 + [4])
	$3 = *($7 + [32])
	
.LOOP $label$7:
	*(($4 + $6)) = *(($3 + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[33]) ){ goto $label$7 }
	CALL ripemd160(($0 + [4]), [33], $7)
	CALL eosio_assert((CALL $215($7, (*($7 + [36]) + [-4]), [4]) == 0), [416])
	$6 = *($7 + [32])
	if ( ($6 == 0) ){ goto $label$8 }
	*($7 + [36]) = $6
	CALL $152($6)
	
.LABEL $label$8
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL $152(*(($7 + [56])))
	
.LABEL $label$9
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $152(*(($7 + [72])))
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $153(($7 + [64]))
}

int_64 .FUNC _Z11decode_nameRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$5 = *($0)
	$2 = ( *($0 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	$4 = ($0 + [8])
	$6 = [1]
	
.LOOP $label$3:
	$5 = *(((( *($4) ? $1 : ($5 & [1]) ) + $6) + [-1]))
	if ( ((int_32)$5 < (int_32)[97]) ){ goto $label$6 }
	if ( ((int_32)$5 >= (int_32)[123]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$5 < (int_32)[49]) ){ goto $label$7 }
	if ( ((int_32)$5 >= (int_32)[54]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)[46]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [448])
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$8 }
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$8 }
	$6 = ($6 + [1])
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$2 }
	$5 = *($0)
	$2 = ($5 & [1])
	$6 = ($0 + [1])
	$5 = (((*(((( *($0 + [8]) ? $6 : $2 ) + ( *(($0 + [4])) ? uint_32($5 >> [1]) : $2 )) + [-1])) + [-97]) & [255]) <= [16])
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	$6 = ($0 + [1])
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	$6 = ( *(($0 + [8])) ? $6 : (*($0) & [1]) )
	$5 = [-1]
	
.LOOP $label$9:
	$0 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($0 + [1])) ){ goto $label$9 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$3) ){ goto $label$11 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$15 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$14 
	
.LABEL $label$15
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$10 }
	return $9
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $186([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $186($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $186($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC _Z13string_to_cmdRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = [1]
	$2 = *($0)
	$1 = CALL strlen([736])
	if ( ((int_32)$1 != (int_32)( *($0 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$4 }
	if ( (CALL $159($0, [0], [-1], [736], $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = *($0)
	$2 = ($0 + [4])
	$1 = CALL strlen([752])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$6 }
	if ( (CALL $159($0, [0], [-1], [752], $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = *($0)
	$1 = CALL strlen([768])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$7 }
	if ( (CALL $159($0, [0], [-1], [768], $1) == 0) ){ goto $label$2 }
	
.LABEL $label$7
	$3 = *($0)
	$2 = ($0 + [4])
	$1 = CALL strlen([784])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$8 }
	if ( (CALL $159($0, [0], [-1], [784], $1) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	$3 = [255]
	$2 = *($0)
	$1 = CALL strlen([800])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$3 }
	return (( [-1] ? [3] : CALL $159($0, [0], [-1], [800], $1) ) & [255])
	
.LABEL $label$5
	$3 = [1]
	
.LABEL $label$3
	return $3
	
.LABEL $label$2
	return [2]
	
.LABEL $label$1
	return [2]
}

void .FUNC _Z20pockettype_to_string10PacketType (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	if ( ((int_32)$1 == (int_32)[3]) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$17 }
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$15 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL strlen([752])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$17
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL strlen([784])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$14 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$16
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL strlen([816])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$8 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$15
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL strlen([832])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$14
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $151($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$13
	CALL memcpy($3, [784], $1)
	
.LABEL $label$12
	$0 = ($3 + $1)
	goto $label$2 
	
.LABEL $label$11
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $151($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$10
	CALL memcpy($3, [752], $1)
	
.LABEL $label$9
	$0 = ($3 + $1)
	goto $label$2 
	
.LABEL $label$8
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $151($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$7
	CALL memcpy($3, [816], $1)
	
.LABEL $label$6
	$0 = ($3 + $1)
	goto $label$2 
	
.LABEL $label$5
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $151($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$4
	CALL memcpy($3, [832], $1)
	
.LABEL $label$3
	$0 = ($3 + $1)
	
.LABEL $label$2
	*($0) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $153($0)
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [13040]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $188(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13520]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13552]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13558] ? [13553] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13522] ? [13520] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13555]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $171()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13520]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13520]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13504])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13520])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13536] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13520]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [13616] ? [13632] : $30 ) ? ( [13584] ? [13600] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13520]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13521]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13520] ? [13525] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13504])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13504])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13504])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13648], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13648], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13648], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $188(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $188(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $188(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $188(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $188(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $188(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $188(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $188(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $188(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

void .FUNC _ZN9redpacket5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [256])
	*([0] + [4]) = $17
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1312]
	$14 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($11)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$14 != (int_64)$2) ){ goto $label$8 }
	CALL _ZN9redpacket16_handle_transferEy($0, $1)
	goto $label$7 
	
.LABEL $label$8
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [912]
	$14 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$13 > (uint_64)(int_64)4) ){ goto $label$14 }
	$3 = *($11)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$10
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$14 != (int_64)$1) ){ goto $label$15 }
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [3152]
	$14 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$13 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($11)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$17
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$14 != (int_64)$2) ){ goto $label$15 }
	CALL $117(($17 + [128]))
	$5 = ($17 + [148])
	$3 = *($5)
	$11 = *($17 + [144])
	$13 = CALL current_time()
	*(($17 + [204])) = [0]
	*(($17 + [208])) = [0]
	*($17 + [188]) = [0]
	*($17 + [192]) = [0]
	*($17 + [196]) = [0]
	*($17 + [200]) = [0]
	*($17 + [176]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($17 + [212]) = [0]
	*(($16 = ($17 + [216]))) = [0]
	*(($17 + [220])) = [0]
	*($17 + [224]) = [0]
	*(($17 + [228])) = [0]
	*(($17 + [232])) = [0]
	*($17 + [244]) = $11
	*($17 + [240]) = $11
	*($17 + [248]) = $3
	CALL $118(($17 + [240]), ($17 + [176]))
	$3 = ($17 + [212])
	CALL $120(CALL $119(CALL $119(($17 + [240]), ($17 + [200])), $3), ($17 + [224]))
	$11 = *($17 + [144])
	if ( ($11 == 0) ){ goto $label$22 }
	*($5) = $11
	CALL $152($11)
	
.LABEL $label$22
	$4 = *($16)
	$3 = *($3)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$23 }
	$7 = ($17 + [144])
	$8 = (($17 + [128]) + [24])
	$9 = (($17 + [128]) + [40])
	$10 = ($17 + [248])
	
.LOOP $label$24:
	if ( ((int_64)*($3) != (int_64)*($0)) ){ goto $label$25 }
	if ( ((int_64)*($3 + [8]) != (int_64)5374672189566484480) ){ goto $label$25 }
	*($7) = (int_64)0
	$5 = *($3 + [28])
	*($8) = (int_64)1398362884
	$11 = *(($3 + [32]))
	CALL eosio_assert([1], [560])
	$6 = ($11 - $5)
	$13 = (int_64)5462355
	$11 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$16 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$16 = [0]
	
.LABEL $label$26
	CALL eosio_assert($16, [624])
	*($9) = [0]
	*(($11 = (($17 + [128]) + [32]))) = (int_64)0
	*($10) = ($5 + $6)
	*($17 + [244]) = $5
	*($17 + [240]) = $5
	CALL $106(($17 + [240]), ($17 + [128]))
	CALL _ZN9redpacket19handle_withdraw_errERKN5eosio8currency8transferE($0, ($17 + [128]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$25 }
	CALL $152(*($9))
	
.LABEL $label$25
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$24 }
	
.LABEL $label$23
	CALL $52(($17 + [176]))
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$37 }
	if ( ((int_64)$2 > (int_64)-4417357466505838593) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)-4997502827547852800) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)-4857581600784072704) ){ goto $label$7 }
	*($17 + [68]) = [0]
	*($17 + [64]) = [1]
	*($17 + [56 align=4]) = *($17 + [64])
	CALL $126($0, ($17 + [56]))
	goto $label$7 
	
.LABEL $label$37
	if ( ((int_64)$2 > (int_64)5374672189566484479) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$7 }
	*($17 + [116]) = [0]
	*($17 + [112]) = [2]
	*($17 + [8 align=4]) = *($17 + [112])
	CALL $124($0, ($17 + [8]))
	goto $label$7 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)-4417357466505838592) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)-4417260145550032896) ){ goto $label$7 }
	*($17 + [100]) = [0]
	*($17 + [96]) = [3]
	*($17 + [24 align=4]) = *($17 + [96])
	CALL $126($0, ($17 + [24]))
	goto $label$7 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)5374672189566484480) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)7111746761571434496) ){ goto $label$7 }
	*($17 + [124]) = [0]
	*($17 + [120]) = [4]
	*($17) = *($17 + [120])
	CALL $122($0, $17)
	goto $label$7 
	
.LABEL $label$34
	*($17 + [84]) = [0]
	*($17 + [80]) = [5]
	*($17 + [40 align=4]) = *($17 + [80])
	CALL $126($0, ($17 + [40]))
	goto $label$7 
	
.LABEL $label$33
	*($17 + [108]) = [0]
	*($17 + [104]) = [6]
	*($17 + [16 align=4]) = *($17 + [104])
	CALL $126($0, ($17 + [16]))
	goto $label$7 
	
.LABEL $label$32
	*($17 + [92]) = [0]
	*($17 + [88]) = [7]
	*($17 + [32 align=4]) = *($17 + [88])
	CALL $126($0, ($17 + [32]))
	goto $label$7 
	
.LABEL $label$31
	*($17 + [76]) = [0]
	*($17 + [72]) = [8]
	*($17 + [48 align=4]) = *($17 + [72])
	CALL $131($0, ($17 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($17 + [256])
}

void .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($3 + [8]) = ($2 + $1)
	*($3) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[15]), [1056])
	CALL memcpy($0, $2, [16])
	*($3 + [4]) = ($2 + [16])
	CALL $36($3, ($0 + [16]))
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [16])
}

void .FUNC _ZN9redpacket16_handle_transferEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [160])
	*([0] + [4]) = $13
	CALL $115(($13 + [112]))
	if ( ((int_64)*($13 + [120]) != (int_64)*($0)) ){ goto $label$3 }
	$2 = ($13 + [128])
	$3 = [0]
	if ( ((uint_64)((int_64)*($13 + [128]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$9 = (uint_64)*((($13 + [112]) + [24])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	CALL eosio_assert($3, [1168])
	$9 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1200])
	$8 = (int_64)59
	$7 = [1264]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$14 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$9 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$16 }
	$4 = [1]
	if ( ((int_64)*(($13 + [136])) == (int_64)1397703940) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1280]
	$10 = (int_64)0
	
.LOOP $label$17:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$18 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$3 }
	$4 = [2]
	if ( ((int_64)*(($13 + [136])) != (int_64)1413956868) ){ goto $label$3 }
	
.LABEL $label$15
	$7 = *($13 + [144])
	if ( (( *(($13 + [148])) ? uint_32($7 >> [1]) : ($7 & [1]) ) == 0) ){ goto $label$3 }
	CALL _Z9memo_argsRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEc(($13 + [96]), ($13 + [144]), [45])
	$5 = CALL _Z13string_to_cmdRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(*($13 + [96]))
	$3 = *($13 + [100])
	$7 = *($13 + [96])
	$12 = ($7 + [12])
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$23 }
	$6 = ($3 + [-12])
	
.LOOP $label$24:
	if ( (*($7) & [1]) ){ goto $label$26 }
	*($7) = [0]
	goto $label$25 
	
.LABEL $label$26
	*(*(($7 + [8]))) = [0]
	*(($7 + [4])) = [0]
	
.LABEL $label$25
	CALL $156($7, [0])
	$3 = ($7 + [12])
	$9 = *($3)
	*(($7 + [16])) = [0]
	*($3) = [0]
	$12 = ($7 + [20])
	*(($7 + [8])) = *($12)
	*($7) = $9
	*($12) = [0]
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$24 }
	$12 = *($13 + [100])
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$3 = $7
	
.LABEL $label$22
	
.LOOP $label$27:
	$7 = ($12 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$28 }
	CALL $152(*(($12 + [-4])))
	
.LABEL $label$28
	$12 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$27 }
	
.LABEL $label$21
	*($13 + [100]) = $3
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$36 }
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$35 }
	*($13 + [80]) = (int_64)0
	*($13 + [88]) = [0]
	$7 = ($3 - *($13 + [96]))
	$12 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$37 }
	if ( ((uint_32)$12 >= (uint_32)[357913942]) ){ goto $label$2 }
	$3 = CALL $151($7)
	*(($13 + [88])) = ($3 + ((int_32)$12 * (int_32)[12]))
	*($13 + [80]) = $3
	*($13 + [84]) = $3
	$12 = *($13 + [100])
	$7 = *($13 + [96])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$37 }
	
.LOOP $label$38:
	CALL $168($3, $7)
	$3 = (*($13 + [84]) + [12])
	*($13 + [84]) = $3
	$7 = ($7 + [12])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$38 }
	
.LABEL $label$37
	$9 = *(($2 + [8]))
	*((($13 + [64]) + [8])) = $9
	$11 = *($2)
	*(($13 + [8])) = $9
	*($13 + [64]) = $11
	*($13 + [4]) = *($13 + [68])
	*($13) = *($13 + [64])
	CALL _ZN9redpacket22_handle_create_accountENSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEEN5eosio5assetE($0, ($13 + [80]), $13)
	$12 = *($13 + [80])
	if ( ($12 == 0) ){ goto $label$30 }
	$7 = *($13 + [84])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$34 }
	$3 = ([0] - $12)
	$7 = ($7 + [-12])
	
.LOOP $label$39:
	if ( ((*($7) & [1]) == 0) ){ goto $label$40 }
	CALL $152(*(($7 + [8])))
	
.LABEL $label$40
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $3) != (int_32)[-12]) ){ goto $label$39 }
	$7 = *($13 + [80])
	goto $label$33 
	
.LABEL $label$36
	*($13 + [48]) = (int_64)0
	*($13 + [56]) = [0]
	$7 = ($3 - *($13 + [96]))
	$12 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$41 }
	if ( ((uint_32)$12 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL $151($7)
	*(($13 + [56])) = ($3 + ((int_32)$12 * (int_32)[12]))
	*($13 + [48]) = $3
	*($13 + [52]) = $3
	$12 = *($13 + [100])
	$7 = *($13 + [96])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$41 }
	
.LOOP $label$42:
	CALL $168($3, $7)
	$3 = (*($13 + [52]) + [12])
	*($13 + [52]) = $3
	$7 = ($7 + [12])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$42 }
	
.LABEL $label$41
	$11 = *(($2 + [8]))
	*((($13 + [32]) + [8])) = $11
	$9 = *($2)
	*((($13 + [16]) + [8])) = $11
	*($13 + [32]) = $9
	$11 = *($13 + [112])
	*($13 + [16]) = $9
	CALL _ZN9redpacket24_handle_create_redpacketENSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEEN5eosio5assetEy15SupportedTokens($0, ($13 + [48]), ($13 + [16]), $11, ($4 & [255]))
	$12 = *($13 + [48])
	if ( ($12 == 0) ){ goto $label$30 }
	$7 = *($13 + [52])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$32 }
	$3 = ([0] - $12)
	$7 = ($7 + [-12])
	
.LOOP $label$43:
	if ( ((*($7) & [1]) == 0) ){ goto $label$44 }
	CALL $152(*(($7 + [8])))
	
.LABEL $label$44
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $3) != (int_32)[-12]) ){ goto $label$43 }
	$7 = *($13 + [48])
	goto $label$31 
	
.LABEL $label$35
	CALL eosio_assert([0], [3136])
	$12 = *($13 + [96])
	if ( $12 ){ goto $label$29 }
	goto $label$3 
	
.LABEL $label$34
	$7 = $12
	
.LABEL $label$33
	*($13 + [84]) = $12
	CALL $152($7)
	$12 = *($13 + [96])
	if ( $12 ){ goto $label$29 }
	goto $label$3 
	
.LABEL $label$32
	$7 = $12
	
.LABEL $label$31
	*($13 + [52]) = $12
	CALL $152($7)
	
.LABEL $label$30
	$12 = *($13 + [96])
	if ( ($12 == 0) ){ goto $label$3 }
	
.LABEL $label$29
	$7 = *($13 + [100])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$46 }
	$3 = ([0] - $12)
	$7 = ($7 + [-12])
	
.LOOP $label$47:
	if ( ((*($7) & [1]) == 0) ){ goto $label$48 }
	CALL $152(*(($7 + [8])))
	
.LABEL $label$48
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $3) != (int_32)[-12]) ){ goto $label$47 }
	$7 = *($13 + [96])
	goto $label$45 
	
.LABEL $label$46
	$7 = $12
	
.LABEL $label$45
	*($13 + [100]) = $12
	CALL $152($7)
	
.LABEL $label$3
	if ( ((*($13 + [144]) & [1]) == 0) ){ goto $label$49 }
	CALL $152(*(($13 + [152])))
	
.LABEL $label$49
	*([0] + [4]) = ($13 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $167(($13 + [80]))
	
.LABEL $label$1
	CALL $167(($13 + [48]))
	(unreachable)
}

void .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [560])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [624])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $106($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $151(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $152($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $152($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [560])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [624])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1056])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1056])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [32])
	$11 = $10
	*([0] + [4]) = $10
	$9 = *($0 + [4])
	*($1) = *(*($9))
	$2 = *($0)
	*($1 + [8]) = *(*($9 + [4]))
	*($1 + [16]) = *(*($9 + [8]))
	*($1 + [24]) = *(*($9 + [12]))
	$4 = *($9 + [16])
	*($1 + [72]) = *($4)
	*(($1 + [80])) = *(($4 + [8]))
	CALL memcpy(($1 + [32]), *($9 + [20]), [34])
	*($1 + [100]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [86400])
	CALL $154(($1 + [88]), *($9 + [24]))
	$9 = *($1 + [88])
	$4 = ( *(($1 + [92])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [79])
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [104])
	$4 = *(($1 + [108]))
	$5 = ($4 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	
.LOOP $label$2:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$4 = ($5 + [-24])
	$9 = ((($4 - ((uint_32)$4 % (uint_32)[24])) + $9) + [24])
	
.LABEL $label$3
	if ( ($9 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($9)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11 + [12]) = $10
	*($11 + [8]) = $10
	*($11 + [16]) = ($10 + $9)
	CALL $96(($11 + [8]), $1)
	$8 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)-5002563355403616256, *(*($0 + [8])), $8, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$9 = ($2 + [8])
	$8 = *($9)
	$10 = *(($0 + [8]))
	$6 = *($10)
	$7 = *($1)
	*($11 + [24]) = *(($1 + [24]))
	*($1 + [124]) = CALL db_idx64_store($8, (int_64)-5002563355403616256, $6, $7, ($11 + [24]))
	$8 = *($10)
	$6 = *($9)
	$7 = *($1)
	*($11 + [24]) = *(($1 + [100]))
	*(($1 + [128])) = CALL db_idx64_store($6, (int_64)-5002563355403616255, $8, $7, ($11 + [24]))
	$8 = *($10)
	$6 = *($9)
	$7 = *($1)
	*($11 + [24]) = CALL $94($1)
	*(($1 + [132])) = CALL db_idx64_store($6, (int_64)-5002563355403616254, $8, $7, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $151([40])
	$6 = CALL $113($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [16]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $112(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $152($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1056])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1056])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1056])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [1120])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [1056])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [1120])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1120])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $138($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $152($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $152($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [1056])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $36(CALL $139($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $151([136])
	$6 = CALL $30($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [120])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [104])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [108])) = $7
	CALL $152($7)
	
.LABEL $label$10
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $152(*(($4 + [96])))
	
.LABEL $label$11
	CALL $152($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC _ZNK9redpacket9valid_sigERK9signatureRK10public_keyy (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [432])
	*([0] + [4]) = $8
	*(($8 + [232])) = [0]
	*($8 + [216]) = (int_64)-1
	*($8 + [224]) = (int_64)0
	$4 = *($0)
	*($8 + [200]) = $4
	*($8 + [208]) = $4
	*(($8 + [238])) = [0]
	*($8 + [236]) = [0]
	$0 = [0]
	$7 = CALL db_find_i64($4, $4, (int_64)-5002563355403616256, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $29(($8 + [200]), $7)
	CALL eosio_assert(((int_32)*($0 + [116]) == (int_32)($8 + [200])), [928])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1072])
	CALL _ZNSt3__19to_stringEy(($8 + [240]), $3)
	$7 = CALL $158(($8 + [240]), [1104])
	$5 = ($7 + [8])
	*((($8 + [352]) + [8])) = *($5)
	*($8 + [352]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($5) = [0]
	CALL _Z20pockettype_to_string10PacketType(($8 + [144]), *($0 + [8]))
	$7 = *($8 + [144])
	$5 = ($7 & [1])
	$7 = CALL $157(($8 + [352]), ( *($8 + [152]) ? (($8 + [144]) | [1]) : $5 ), ( *($8 + [148]) ? uint_32($7 >> [1]) : $5 ))
	$5 = ($7 + [8])
	*((($8 + [392]) + [8])) = *($5)
	*($8 + [392]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($5) = [0]
	$7 = CALL $158(($8 + [392]), [1104])
	$5 = ($7 + [8])
	*((($8 + [280]) + [8])) = *($5)
	*($8 + [280]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($5) = [0]
	$7 = *($0 + [88])
	$5 = ($7 & [1])
	$0 = CALL $157(($8 + [280]), ( *(($0 + [96])) ? ($0 + [89]) : $5 ), ( *(($0 + [92])) ? uint_32($7 >> [1]) : $5 ))
	$7 = ($0 + [8])
	*((($8 + [184]) + [8])) = *($7)
	*($8 + [184]) = *($0)
	*($0) = [0]
	*(($0 + [4])) = [0]
	*($7) = [0]
	if ( ((*($8 + [280]) & [1]) == 0) ){ goto $label$2 }
	CALL $152(*($8 + [288]))
	
.LABEL $label$2
	if ( ((*($8 + [392]) & [1]) == 0) ){ goto $label$3 }
	CALL $152(*($8 + [400]))
	
.LABEL $label$3
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$4 }
	CALL $152(*(($8 + [152])))
	
.LABEL $label$4
	if ( ((*($8 + [352]) & [1]) == 0) ){ goto $label$5 }
	CALL $152(*($8 + [360]))
	
.LABEL $label$5
	if ( ((*($8 + [240]) & [1]) == 0) ){ goto $label$6 }
	CALL $152(*($8 + [248]))
	
.LABEL $label$6
	$0 = *($8 + [184])
	$7 = ($0 & [1])
	CALL sha256(( *($8 + [192]) ? (($8 + [184]) | [1]) : $7 ), ( *($8 + [188]) ? uint_32($0 >> [1]) : $7 ), ($8 + [144]))
	*(($0 = (($8 + [112]) + [24]))) = *((($8 + [144]) + [24]))
	*(($7 = (($8 + [112]) + [16]))) = *((($8 + [144]) + [16]))
	*($8 + [120]) = *($8 + [152])
	*($8 + [112]) = *($8 + [144])
	CALL memcpy(($8 + [46]), $1, [66])
	CALL memcpy(($8 + [12]), $2, [34])
	CALL memcpy(($8 + [352]), ($8 + [12]), [34])
	CALL memcpy(($8 + [280]), ($8 + [46]), [66])
	*((($8 + [240]) + [24])) = *($0)
	*((($8 + [240]) + [16])) = *($7)
	*($8 + [248]) = *($8 + [120])
	*($8 + [240]) = *($8 + [112])
	CALL recover_key(($8 + [240]), ($8 + [280]), [66], ($8 + [392]), [34])
	$5 = CALL memcmp(($8 + [352]), ($8 + [392]), [34])
	if ( ((*($8 + [184]) & [1]) == 0) ){ goto $label$7 }
	CALL $152(*(($8 + [192])))
	
.LABEL $label$7
	$2 = *($8 + [224])
	if ( ($2 == 0) ){ goto $label$8 }
	$6 = ($8 + [228])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	$1 = *($0 + [104])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($0 + [108])) = $1
	CALL $152($1)
	
.LABEL $label$13
	if ( ((*($0 + [88]) & [1]) == 0) ){ goto $label$14 }
	CALL $152(*(($0 + [96])))
	
.LABEL $label$14
	CALL $152($0)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$11 }
	$0 = *(($8 + [224]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $2
	
.LABEL $label$9
	*($6) = $2
	CALL $152($0)
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [432])
	return ($5 == 0)
}

void .FUNC _ZN5eosio11buyrambytesEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [912]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [912]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$12 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$4 = [0]
	*(($10 + [136])) = [0]
	*($10 + [120]) = (int_64)-1
	*($10 + [128]) = (int_64)0
	*($10 + [112]) = $9
	*($10 + [104]) = $7
	$2 = [0]
	$3 = CALL db_find_i64($7, $9, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$2 = CALL $22(($10 + [104]), $3)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($10 + [104])), [928])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [992])
	CALL memcpy(($10 + [40]), $2, [64])
	*($10 + [32]) = (int_64)1296126464
	*($10 + [24]) = (CASTING uint_64)(uint_32 $1)
	CALL eosio_assert([1], [560])
	$6 = (int_64)5062994
	
.LOOP $label$15:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($2, [624])
	*((($10 + [8]) + [8])) = *((($10 + [24]) + [8]))
	*($10 + [8]) = *($10 + [24])
	CALL _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE($0, ($10 + [40]), ($10 + [8]), (int_64)1397703940)
	$0 = *($10 + [128])
	if ( ($0 == 0) ){ goto $label$18 }
	$1 = ($10 + [132])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $152($2)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($10 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($1) = $0
	CALL $152($4)
	
.LABEL $label$18
	*([0] + [4]) = ($10 + [144])
}

int_32 .FUNC _Z20string_to_pockettypeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = [1]
	$2 = *($0)
	$1 = CALL strlen([848])
	if ( ((int_32)$1 != (int_32)( *($0 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$4 }
	if ( (CALL $159($0, [0], [-1], [848], $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = *($0)
	$2 = ($0 + [4])
	$1 = CALL strlen([752])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$6 }
	if ( (CALL $159($0, [0], [-1], [752], $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = *($0)
	$1 = CALL strlen([880])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$7 }
	if ( (CALL $159($0, [0], [-1], [880], $1) == 0) ){ goto $label$2 }
	
.LABEL $label$7
	$3 = *($0)
	$2 = ($0 + [4])
	$1 = CALL strlen([784])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$8 }
	if ( (CALL $159($0, [0], [-1], [784], $1) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	$3 = [255]
	$2 = *($0)
	$1 = CALL strlen([816])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$3 }
	return (( [-1] ? [3] : CALL $159($0, [0], [-1], [816], $1) ) & [255])
	
.LABEL $label$5
	$3 = [1]
	
.LABEL $label$3
	return $3
	
.LABEL $label$2
	return [2]
	
.LABEL $label$1
	return [2]
}

int_32 .FUNC $23 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [560])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [624])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [560])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [624])
	*($0 + [40]) = (int_64)0
	*(($0 + [32])) = (int_64)4602678819172646912
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [560])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [624])
	*(($0 + [56])) = (int_64)4602678819172646912
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [8]) = $0
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	$6 = CALL $151([80])
	CALL $23($6)
	*($6 + [64]) = $0
	CALL $24(($8 + [8]), $6)
	*($8 + [24]) = $6
	$5 = *($6 + [8])
	*($8 + [8]) = $5
	$7 = *($6 + [68])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $152($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $151(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $152($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $152($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy($1, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
}

int_32 .FUNC _Z12is_sig_valid11checksum2569signature10public_key (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	CALL recover_key($0, $1, [66], ($3 + [8]), [34])
	$2 = CALL memcmp($2, ($3 + [8]), [34])
	*([0] + [4]) = ($3 + [48])
	return ($2 == 0)
}

int_32 .FUNC _Z6randomPvj (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	$32 = (*([0] + [4]) - [32])
	*([0] + [4]) = $32
	CALL sha256($0, $1, $32)
	$0 = *($32 + [6])
	$1 = *($32 + [5])
	$2 = *($32 + [4])
	$3 = *($32 + [7])
	$4 = *($32 + [2])
	$5 = *($32 + [1])
	$6 = *($32)
	$7 = *($32 + [3])
	$8 = *($32 + [10])
	$9 = *($32 + [9])
	$10 = *($32 + [8])
	$11 = *($32 + [11])
	$12 = *($32 + [14])
	$13 = *($32 + [13])
	$14 = *($32 + [12])
	$15 = *($32 + [15])
	$16 = *($32 + [18])
	$17 = *($32 + [17])
	$18 = *($32 + [16])
	$19 = *($32 + [19])
	$20 = *($32 + [22])
	$21 = *($32 + [21])
	$22 = *($32 + [20])
	$23 = *($32 + [23])
	$24 = *($32 + [26])
	$25 = *($32 + [25])
	$26 = *($32 + [24])
	$27 = *($32 + [27])
	$28 = *($32 + [30])
	$29 = *($32 + [29])
	$30 = *($32 + [28])
	$31 = *($32 + [31])
	*([0] + [4]) = ($32 + [32])
	$32 = ((int_32)((($6 | ($5 << [8])) | ($4 << [16])) | ($7 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($2 | ($1 << [8])) | ($0 << [16])) | ($3 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($10 | ($9 << [8])) | ($8 << [16])) | ($11 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($14 | ($13 << [8])) | ($12 << [16])) | ($15 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($18 | ($17 << [8])) | ($16 << [16])) | ($19 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($22 | ($21 << [8])) | ($20 << [16])) | ($23 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($26 | ($25 << [8])) | ($24 << [16])) | ($27 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((($30 | ($29 << [8])) | ($28 << [16])) | ($31 << [24])) * (int_32)[1540483477])
	$32 = ((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)((int_32)((int_32)((int_32)((int_32)uint_32($32 >> [24]) ^ (int_32)$32) * (int_32)[1540483477]) ^ (int_32)[2050831008]) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477])) * (int_32)[1540483477]))
	$32 = ((int_32)((int_32)uint_32($32 >> [13]) ^ (int_32)$32) * (int_32)[1540483477])
	return ((int_32)uint_32($32 >> [15]) ^ (int_32)$32)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)6457340698688487424, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $103($5, $3)
	*($8 + [4]) = [0]
	*($8) = $5
	$6 = *(*(CALL $104($8) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [2672])
	*($1) = *(($5 + [16]))
	$5 = *($4 + [4])
	*($1 + [8]) = *($5)
	*(($1 + [32])) = *(($5 + [24]))
	*(($1 + [24])) = *(($5 + [16]))
	*(($1 + [16])) = *(($5 + [8]))
	$4 = ($1 + [40])
	CALL $154($4, ($5 + [32]))
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = *($4)
	$4 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [44])
	$6 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [56])
	$4 = ($1 + [8])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($5)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [1328])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	$4 = CALL $105($8, $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$6 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($2 + [8]), (int_64)6457340698688487424, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL free($7)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN9redpacket19handle_withdraw_errERKN5eosio8currency8transferE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	$4 = [0]
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$3 = *($0)
	*($5 + [16]) = $3
	*($5 + [24]) = $3
	*($5 + [12]) = $1
	*($5 + [8]) = ($5 + [16])
	*($5 + [88]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$14()), [2336])
	*($5 + [68]) = ($5 + [8])
	*($5 + [64]) = ($5 + [16])
	*($5 + [72]) = ($5 + [88])
	*(($1 = CALL $151([72])) + [32]) = (int_64)1398362884
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [560])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [624])
	*($1 + [48]) = [0]
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [60]) = ($5 + [16])
	CALL $101(($5 + [64]), $1)
	*($5 + [80]) = $1
	$3 = *($1)
	*($5 + [64]) = $3
	$0 = *($1 + [64])
	*($5 + [60]) = $0
	$2 = ($5 + [44])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [48]))) ){ goto $label$7 }
	*($4 + [8]) = $3
	*($4 + [16]) = $0
	*($5 + [80]) = [0]
	*($4) = $1
	*($2) = ($4 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $102(($5 + [40]), ($5 + [80]), ($5 + [64]), ($5 + [60]))
	
.LABEL $label$6
	$4 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$9 }
	CALL $152(*(($4 + [48])))
	
.LABEL $label$9
	CALL $152($4)
	
.LABEL $label$8
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = ($5 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ((*(($1 + [40])) & [1]) == 0) ){ goto $label$15 }
	CALL $152(*(($1 + [48])))
	
.LABEL $label$15
	CALL $152($1)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($5 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $0
	
.LABEL $label$11
	*($2) = $0
	CALL $152($4)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $151([72])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [560])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [624])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [60]) = $0
	$5 = *($8 + [36])
	CALL eosio_assert(((uint_32)(*((($8 + [32]) + [8])) - $5) > (uint_32)[7]), [1056])
	CALL memcpy($4, $5, [8])
	*($8 + [36]) = ($5 + [8])
	$5 = CALL $106(($8 + [32]), ($4 + [8]))
	CALL eosio_assert(((uint_32)(*($5 + [8]) - *($5 + [4])) > (uint_32)[3]), [1056])
	CALL memcpy(($4 + [56]), *($5 + [4]), [4])
	*($4 + [64]) = $1
	*($5 + [4]) = (*($5 + [4]) + [4])
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [64])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $102($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*(($5 + [40])) & [1]) == 0) ){ goto $label$15 }
	CALL $152(*(($5 + [48])))
	
.LABEL $label$15
	CALL $152($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $151(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*(($1 + [40])) & [1]) == 0) ){ goto $label$11 }
	CALL $152(*(($1 + [48])))
	
.LABEL $label$11
	CALL $152($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $152($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $43($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [64]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2800])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6457340698688487424)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2736])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2736])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $103(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN9redpacket22_handle_create_accountENSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)(*($1 + [4]) - *($1)) == (int_32)[24]), [2848])
	$3 = CALL _Z11decode_nameRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(*($1))
	CALL _Z16decode_eospubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($5 + [136]), (*($1) + [12]))
	CALL eosio_assert(((int_32)CALL $fimport$33($3) ^ (int_32)[1]), [2880])
	CALL memcpy(($5 + [80]), ($5 + [136]), [40])
	CALL memcpy(($5 + [8]), ($5 + [80]), [40])
	CALL _ZN9redpacket14create_accountEyN5eosio10public_keyERKS1_RKNS0_5assetE(($5 + [120]), $0, $3, ($5 + [8]), ($5 + [136]), $2)
	$4 = *(($2 + [8]))
	*((($5 + [64]) + [8])) = $4
	*($5 + [64]) = *($2)
	CALL eosio_assert(((int_64)$4 == (int_64)*($5 + [128])), [1392])
	$4 = (int_64)
	*($5 + [64]) = $4(*($5 + [64]) - *($5 + [120])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [1472])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [2912])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$2 }
	$4 = *($0)
	*((($5 + [48]) + [8])) = [0]
	*($5 + [48]) = (int_64)0
	$1 = CALL strlen([2944])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($5 + [48]) = ($1 << [1])
	$2 = (($5 + [48]) | [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$0 = (($1 + [16]) & [-16])
	$2 = CALL $151($0)
	*($5 + [48]) = ($0 | [1])
	*($5 + [56]) = $2
	*($5 + [52]) = $1
	
.LABEL $label$4
	CALL memcpy($2, [2944], $1)
	
.LABEL $label$3
	*(($2 + $1)) = [0]
	CALL _ZNK9redpacket8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($5, $4, $3, ($5 + [64]), ($5 + [48]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL $152(*($5 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $153(($5 + [48]))
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $33($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [96])
	$11 = $10
	*([0] + [4]) = $10
	$8 = *($0 + [4])
	*($1) = *(*($8))
	$3 = *($0)
	$2 = CALL memcpy(($1 + [8]), *($8 + [4]), [34])
	$4 = ($1 + [44])
	$6 = *($1 + [44])
	$5 = *(($1 + [48]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$8 = [42]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$8 = (($7 & [-4]) + $8)
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($8)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [8]) = $10
	$5 = ($10 + $8)
	*($11 + [16]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1328])
	CALL memcpy($10, $1, [8])
	CALL memcpy(($11 + [22]), $2, [34])
	CALL memcpy(($11 + [56]), ($11 + [22]), [34])
	$2 = ($10 + [8])
	CALL eosio_assert(((int_32)($5 - $2) > (int_32)[33]), [1328])
	CALL memcpy($2, ($11 + [56]), [34])
	*($11 + [12]) = ($10 + [42])
	CALL $99(($11 + [8]), $4)
	$9 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($3 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($3 + [16])) ){ goto $label$6 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [96])
}

void .FUNC _ZN9redpacket24_handle_create_redpacketENSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEEN5eosio5assetEy15SupportedTokens (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [240])
	*([0] + [4]) = $10
	*($10 + [192]) = $3
	CALL eosio_assert(((int_32)(*($1 + [4]) - *($1)) == (int_32)[72]), [2848])
	$6 = CALL _Z20string_to_pockettypeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(*($1))
	*($10 + [191]) = $6
	CALL eosio_assert(((int_32)$6 != (int_32)[255]), [2992])
	*($10 + [176]) = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($1) + [12]), [0], [10])
	$3 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($1) + [24]), [0], [10])
	*($10 + [168]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)100), [3024])
	$7 = *($2)
	$4 = ((int_32)$4 == (int_32)[2])
	CALL eosio_assert(((uint_64)( (int_64)1000000 ? (int_64)1000 : $4 ) <= (uint_64)$7), [3056])
	CALL eosio_assert(((uint_64)((int_64)$3 * (int_64)( (int_64)10000 ? (int_64)10 : $4 )) <= (uint_64)$7), [3072])
	CALL _Z13decode_pubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($10 + [128]), (*($1) + [36]))
	CALL _Z13decode_pubkeyRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($10 + [88]), (*($1) + [48]))
	CALL $168(($10 + [72]), (*($1) + [60]))
	*(($6 = ($10 + [64]))) = [0]
	*($10 + [48]) = (int_64)-1
	*($10 + [56]) = (int_64)0
	$3 = *($0)
	*($10 + [32]) = $3
	*($10 + [40]) = $3
	*($10 + [236]) = ($10 + [88])
	*($10 + [232]) = ($10 + [176])
	*($10 + [208]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$14()), [2336])
	*($10 + [4]) = ($10 + [232])
	*($10) = ($10 + [32])
	*($10 + [8]) = ($10 + [208])
	*(($1 = CALL $151([72])) + [52]) = [0]
	*($1 + [44 align=4]) = (int_64)0
	*($1 + [56]) = ($10 + [32])
	CALL $109($10, $1)
	*($10 + [224]) = $1
	$3 = *($1)
	*($10) = $3
	$5 = *($1 + [60])
	*($10 + [204]) = $5
	$8 = ($10 + [60])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*($6)) ){ goto $label$2 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($10 + [224]) = [0]
	*($4) = $1
	*($8) = ($4 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $54((($10 + [32]) + [24]), ($10 + [224]), $10, ($10 + [204]))
	
.LABEL $label$1
	$1 = *($10 + [224])
	*($10 + [224]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [48])) = $4
	CALL $152($4)
	
.LABEL $label$4
	CALL $152($1)
	
.LABEL $label$3
	$5 = *($10 + [56])
	if ( ($5 == 0) ){ goto $label$5 }
	$8 = ($10 + [60])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [44])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [48])) = $6
	CALL $152($6)
	
.LABEL $label$10
	CALL $152($4)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$8 }
	$1 = *(($10 + [56]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($8) = $5
	CALL $152($1)
	
.LABEL $label$5
	*(($10 + [64])) = [0]
	*($10 + [48]) = (int_64)-1
	*($10 + [56]) = (int_64)0
	$3 = *($0)
	*($10 + [32]) = $3
	*($10 + [40]) = $3
	*(($10 + [70])) = [0]
	*($10 + [68]) = [0]
	*($10 + [16]) = $2
	*($10 + [4]) = ($10 + [191])
	*($10) = ($10 + [176])
	*($10 + [8]) = ($10 + [168])
	*($10 + [12]) = ($10 + [192])
	*($10 + [20]) = ($10 + [128])
	*($10 + [24]) = ($10 + [72])
	*($10 + [232]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$14()), [2336])
	*($10 + [212]) = $10
	*($10 + [208]) = ($10 + [32])
	*($10 + [216]) = ($10 + [232])
	*(($4 = CALL $151([136])) + [80]) = (int_64)1398362884
	*($4 + [72]) = (int_64)0
	CALL eosio_assert([1], [560])
	$3 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [624])
	*($4 + [96]) = [0]
	*($4 + [88 align=4]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [108]) = [0]
	*($4 + [112]) = [0]
	*($4 + [116]) = ($10 + [32])
	CALL $110(($10 + [208]), $4)
	*($10 + [224]) = $4
	$3 = *($4)
	*($10 + [208]) = $3
	$6 = *($4 + [120])
	*($10 + [204]) = $6
	$5 = ($10 + [60])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($10 + [64]))) ){ goto $label$17 }
	*($1 + [8]) = $3
	*($1 + [16]) = $6
	*($10 + [224]) = [0]
	*($1) = $4
	*($5) = ($1 + [24])
	goto $label$16 
	
.LABEL $label$17
	CALL $31(($10 + [56]), ($10 + [224]), ($10 + [208]), ($10 + [204]))
	
.LABEL $label$16
	$1 = *($10 + [224])
	*($10 + [224]) = [0]
	if ( ($1 == 0) ){ goto $label$18 }
	$4 = *($1 + [104])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($1 + [108])) = $4
	CALL $152($4)
	
.LABEL $label$19
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$20 }
	CALL $152(*(($1 + [96])))
	
.LABEL $label$20
	CALL $152($1)
	
.LABEL $label$18
	$5 = *($10 + [56])
	if ( ($5 == 0) ){ goto $label$21 }
	$8 = ($10 + [60])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$25 }
	$6 = *($1 + [104])
	if ( ($6 == 0) ){ goto $label$26 }
	*(($1 + [108])) = $6
	CALL $152($6)
	
.LABEL $label$26
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$27 }
	CALL $152(*(($1 + [96])))
	
.LABEL $label$27
	CALL $152($1)
	
.LABEL $label$25
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$24 }
	$1 = *(($10 + [56]))
	goto $label$22 
	
.LABEL $label$23
	$1 = $5
	
.LABEL $label$22
	*($8) = $5
	CALL $152($1)
	
.LABEL $label$21
	$1 = [0]
	*(($10 + [64])) = [0]
	*($10 + [48]) = (int_64)-1
	*($10 + [56]) = (int_64)0
	$3 = *($0)
	*($10 + [32]) = $3
	*($10 + [40]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-4157495357179166720, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$28 }
	$1 = CALL $111(($10 + [32]), $4)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($10 + [32])), [928])
	
.LABEL $label$28
	CALL prints([3088])
	CALL prints(( [3104] ? [3120] : $1 ))
	$7 = *($0)
	if ( ($1 == 0) ){ goto $label$32 }
	CALL eosio_assert([1], [1840])
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($10 + [32])), [1888])
	CALL eosio_assert(((int_64)*($10 + [32]) == (int_64)CALL $fimport$14()), [1936])
	*($1) = ((int_64)*($1) + (int_64)1)
	$4 = ($1 + [16])
	$3 = *($4)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$3), [2064])
	$9 = ((int_64)*($1 + [8]) + (int_64)*($2))
	*($1 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2144])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($4) >> (uint_64)(int_64)8)), [2000])
	CALL eosio_assert([1], [1328])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert([1], [1328])
	CALL memcpy(($10 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1328])
	CALL memcpy(($10 + [16]), $4, [8])
	CALL db_update_i64(*($1 + [28]), $7, $10, [24])
	$1 = (($10 + [32]) + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$31 }
	*($1) = ((int_64)$3 + (int_64)1)
	$6 = *($10 + [56])
	if ( $6 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	CALL eosio_assert(((int_64)*($10 + [32]) == (int_64)CALL $fimport$14()), [2336])
	*(($4 = CALL $151([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [560])
	$0 = ($4 + [16])
	$6 = ($4 + [8])
	$3 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	
.LOOP $label$37:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$37 }
	
.LABEL $label$36
	$5 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$5 = [0]
	
.LABEL $label$33
	CALL eosio_assert($5, [624])
	*($4 + [24]) = ($10 + [32])
	*($4) = (int_64)1
	*(($6 + [12])) = *(($2 + [12]))
	*(($6 + [8])) = *(($2 + [8]))
	*(($6 + [4])) = *(($2 + [4]))
	*($6) = *($2)
	CALL eosio_assert([1], [1328])
	CALL memcpy($10, $4, [8])
	CALL eosio_assert([1], [1328])
	CALL memcpy(($10 | [8]), $6, [8])
	CALL eosio_assert([1], [1328])
	CALL memcpy(($10 + [16]), $0, [8])
	$1 = ($4 + [16])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*((($10 + [32]) + [8])), (int_64)-4157495357179166720, $7, $3), $10, [24]
	*($4 + [28]) = $6)
	$5 = (($10 + [32]) + [16])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$38 }
	*($5) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$38
	*($10 + [208]) = $4
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8
	*($10) = $3)
	*($10 + [232]) = $6
	$5 = ($10 + [60])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($10 + [64]))) ){ goto $label$40 }
	*($1 + [8]) = $3
	*($1 + [16]) = $6
	*($10 + [208]) = [0]
	*($1) = $4
	*($5) = ($1 + [24])
	goto $label$39 
	
.LABEL $label$40
	CALL $112(($10 + [56]), ($10 + [208]), $10, ($10 + [232]))
	
.LABEL $label$39
	$1 = *($10 + [208])
	*($10 + [208]) = [0]
	if ( ($1 == 0) ){ goto $label$31 }
	CALL $152($1)
	
.LABEL $label$31
	$6 = *($10 + [56])
	if ( ($6 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$5 = ($10 + [60])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$42 }
	
.LOOP $label$43:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL $152($4)
	
.LABEL $label$44
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$43 }
	$1 = *(($10 + [56]))
	goto $label$41 
	
.LABEL $label$42
	$1 = $6
	
.LABEL $label$41
	*($5) = $6
	CALL $152($1)
	
.LABEL $label$29
	if ( ((*($10 + [72]) & [1]) == 0) ){ goto $label$45 }
	CALL $152(*($10 + [80]))
	
.LABEL $label$45
	*([0] + [4]) = ($10 + [240])
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

void .FUNC _ZNK9redpacket8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [1136])
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1168])
	$8 = (int_64)0
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1200])
	$6 = [1]
	$9 = *(($3 + [8]))
	if ( ((int_64)$9 == (int_64)1397703940) ){ goto $label$6 }
	$6 = ((int_64)$9 == (int_64)1413956868)
	
.LABEL $label$6
	CALL eosio_assert($6, [1232])
	$7 = (int_64)59
	$6 = [1264]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$10 = ((int_64)$9 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$7 }
	$8 = *(($3 + [8]))
	if ( ((int_64)$8 == (int_64)1397703940) ){ goto $label$13 }
	if ( ((int_64)$8 != (int_64)1413956868) ){ goto $label$13 }
	$8 = (int_64)0
	$9 = (int_64)59
	$6 = [1280]
	$10 = (int_64)0
	
.LOOP $label$14:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$15 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$7 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$14 }
	
.LABEL $label$13
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1296]
	$11 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$23 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [165])
	goto $label$21 
	
.LABEL $label$23
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$18 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1312]
	$12 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$29 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$5 = ($5 + [165])
	goto $label$27 
	
.LABEL $label$29
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$24 }
	*((($13 + [8]) + [28])) = *(($3 + [12]))
	*((($13 + [8]) + [24])) = *(($3 + [8]))
	*((($13 + [8]) + [20])) = *(($3 + [4]))
	*($13 + [16]) = $2
	*($13 + [8]) = $1
	*($13 + [24]) = *($3)
	CALL $168((($13 + [8]) + [32]), $4)
	*($13 + [64]) = $12
	*($13 + [56]) = $10
	*(($6 = CALL $151([16]))) = $1
	*($6 + [8]) = $11
	*((($13 + [56]) + [32])) = [0]
	$5 = ($6 + [16])
	*((($13 + [56]) + [24])) = $5
	*((($13 + [56]) + [20])) = $5
	*($13 + [72]) = $6
	*($13 + [84]) = [0]
	*((($13 + [56]) + [36])) = [0]
	$6 = *($13 + [40])
	$5 = ( *((($13 + [8]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [32])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = (($13 + [56]) + [28])
	
.LOOP $label$30:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$30 }
	if ( ($6 == 0) ){ goto $label$32 }
	CALL $37($5, $6)
	$5 = *(($13 + [88]))
	$6 = *(($13 + [84]))
	goto $label$31 
	
.LABEL $label$32
	$5 = [0]
	$6 = [0]
	
.LABEL $label$31
	*($13 + [100]) = $6
	*($13 + [96]) = $6
	*($13 + [104]) = $5
	*($13 + [112]) = ($13 + [96])
	*($13 + [120]) = ($13 + [8])
	CALL $39(($13 + [120]), ($13 + [112]))
	CALL $40(($13 + [96]), ($13 + [56]))
	$6 = *($13 + [96])
	CALL send_inline($6, (*($13 + [100]) - $6))
	$6 = *($13 + [96])
	if ( ($6 == 0) ){ goto $label$33 }
	*($13 + [100]) = $6
	CALL $152($6)
	
.LABEL $label$33
	$6 = *($13 + [84])
	if ( ($6 == 0) ){ goto $label$34 }
	*(($13 + [88])) = $6
	CALL $152($6)
	
.LABEL $label$34
	$6 = *($13 + [72])
	if ( ($6 == 0) ){ goto $label$35 }
	*(($13 + [76])) = $6
	CALL $152($6)
	
.LABEL $label$35
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$36 }
	CALL $152(*(($13 + [48])))
	
.LABEL $label$36
	*([0] + [4]) = ($13 + [128])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1120])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $37($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1056])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $151($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $152($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1120])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $35($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1056])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1056])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $151(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [560])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [624])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $167($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [560])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [624])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $152($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $34($0, ($1 + [104]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1056])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1056])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[33]), [1056])
	CALL memcpy(($1 + [32]), *($0 + [4]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1056])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $33($0, ($1 + [88]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1056])
	CALL memcpy(($1 + [100]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $36($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $156($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $151($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $156($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $152($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $153($7)
	return (unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [72]) = (int_64)0
	*(($4 = ($0 + [80]))) = (int_64)1398362884
	CALL eosio_assert([1], [560])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [624])
	*(($0 + [96])) = [0]
	*($0 + [88 align=4]) = (int_64)0
	*($0 + [104]) = [0]
	*(($0 + [108])) = [0]
	*(($0 + [112])) = [0]
	*($0 + [116]) = $1
	CALL $32(*($2 + [4]), $0)
	$4 = *(*($2 + [8]))
	*($0 + [124]) = [-1]
	*($0 + [120]) = $4
	*(($0 + [128])) = [-1]
	*(($0 + [132])) = [-1]
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $151(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $167($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [104])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [108])) = $6
	CALL $152($6)
	
.LABEL $label$11
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$12 }
	CALL $152(*(($1 + [96])))
	
.LABEL $label$12
	CALL $152($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $152($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $217 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [15777])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [15777])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [15777]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [15777]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16048]))
	$10 = *(($13 + [15777]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [15777]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [15777]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [15777]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [15777])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [15777])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}