(data (i32.const 4) "`h\00\00")
(data (i32.const 16) "active\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "init\00")
(data (i32.const 112) "cannot create objects in table of another contract\00")
(data (i32.const 176) "Contract is not initialization\00")
(data (i32.const 208) "stop\00")
(data (i32.const 224) "cannot pass end iterator to modify\00")
(data (i32.const 272) "debug\00")
(data (i32.const 288) "start\00")
(data (i32.const 304) "Contract is not running\00")
(data (i32.const 336) "object passed to modify is not in multi_index\00")
(data (i32.const 384) "cannot modify objects in table of another contract\00")
(data (i32.const 448) "updater cannot change primary key when modifying an object\00")
(data (i32.const 512) "write\00")
(data (i32.const 528) "gifts\00")
(data (i32.const 544) "fastwin  gifts\00")
(data (i32.const 560) "error reading iterator\00")
(data (i32.const 592) "read\00")
(data (i32.const 608) "get\00")
(data (i32.const 624) "eosio.token\00")
(data (i32.const 640) "transfer\00")
(data (i32.const 656) "Must transfer EOS\00")
(data (i32.const 688) "resolvebet\00")
(data (i32.const 704) "min should be less than max.\00")
(data (i32.const 736) "roll result: \00")
(data (i32.const 752) " \00")
(data (i32.const 768) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 832) "invalid symbol name\00")
(data (i32.const 864) "Can\'t find record.\00")
(data (i32.const 896) "Invalid issue.\00")
(data (i32.const 912) "Invalid room id.\00")
(data (i32.const 944) "Invalid amount\00")
(data (i32.const 960) "remain count error.\00")
(data (i32.const 992) "remain amount error.\00")
(data (i32.const 1024) "cannot pass end iterator to erase\00")
(data (i32.const 1072) "cannot increment end iterator\00")
(data (i32.const 1104) "FAST GIFTS REWARD: https://www.fastwin.io\00")
(data (i32.const 1152) "Invalid room\00")
(data (i32.const 1168) "object passed to erase is not in multi_index\00")
(data (i32.const 1216) "cannot erase objects in table of another contract\00")
(data (i32.const 1280) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1344) "fastnewyear1\00")
(data (i32.const 1360) "FAST GIFTS JACKPOT: https://www.fastwin.io\00")
(data (i32.const 1408) "fastwincards\00")
(data (i32.const 1424) "FAST GIFTS CARDS PROFIT: https://www.fastwin.io\00")
(data (i32.const 1472) "fastwinteam1\00")
(data (i32.const 1488) "FAST GIFTS TEAM PROFIT: https://www.fastwin.io\00")
(data (i32.const 1536) "fastwinhold2\00")
(data (i32.const 1552) "FAST GIFTS HOLD PROFIT: https://www.fastwin.io\00")
(data (i32.const 1600) "fastauction1\00")
(data (i32.const 1616) "FAST GIFTS DARK AUCTION: https://www.fastwin.io\00")
(data (i32.const 1664) "fastgiftrank\00")
(data (i32.const 1680) "assert\00")
(data (i32.const 1696) "Must bet greater than min\00")
(data (i32.const 1728) "Must bet less than max\00")
(data (i32.const 1760) "Invalid quantity\00")
(data (i32.const 1792) "Hello World.\00")
(data (i32.const 1808) "Happy New Year!\00")
(data (i32.const 1824) "Fast To The Moon!\00")
(data (i32.const 10240) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "printui" (func $fimport$16 (param i64)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z15check_whitelisty" (func $5))
(export "_Z12safety_checkyyy" (func $6))
(export "apply" (func $17))
(export "malloc" (func $87))
(export "free" (func $90))
(export "memcmp" (func $100))
(export "strlen" (func $101))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $102 $22 $19 $25 $23 $24 $21)



void .FUNC $98 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $91($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $95($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $91($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $92($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $91(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $92($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $95($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10228])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10036]
	$1 = (((int_32)$2 * (int_32)[12]) + [10036])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10332])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $92 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $93 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	*(($0 + [32])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $40($1, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [28])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $92($7)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	*(($0 + [32])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $40($1, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	*(($0 + [32])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $40($1, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $14($0, ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [592])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [592])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[80]) >= (uint_32)$1) ){ goto $label$5 }
	$2 = *($0)
	$7 = ((int_32)($5 - $2) / (int_32)[80])
	$3 = ($7 + $1)
	if ( ((uint_32)$3 >= (uint_32)[53687092]) ){ goto $label$3 }
	$5 = [53687091]
	$6 = ((int_32)($6 - $2) / (int_32)[80])
	if ( ((uint_32)$6 > (uint_32)[26843544]) ){ goto $label$6 }
	$5 = ($6 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$6 = CALL $91(((int_32)$5 * (int_32)[80]))
	goto $label$2 
	
.LABEL $label$5
	$7 = ($0 + [4])
	
.LOOP $label$7:
	*(($5 = (($2 = CALL memset($5, [0], [80])) + [16]))) = (int_64)1397703940
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [768])
	$4 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($6, [832])
	*($2 + [64]) = [0]
	*($2 + [24]) = [0]
	*(($2 + [68])) = [0]
	*(($2 + [72])) = [0]
	$5 = (*($7) + [80])
	*($7) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $98($0)
	
.LABEL $label$2
	$3 = ($6 + ((int_32)$5 * (int_32)[80]))
	$7 = ($6 + ((int_32)$7 * (int_32)[80]))
	$6 = $7
	
.LOOP $label$12:
	*(($5 = (($2 = CALL memset($6, [0], [80])) + [16]))) = (int_64)1397703940
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [768])
	$4 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$14:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($6, [832])
	*($2 + [64]) = [0]
	*($2 + [24]) = [0]
	*(($2 + [68])) = [0]
	*(($2 + [72])) = [0]
	$6 = ($2 + [80])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	$5 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	$1 = ([0] - $5)
	$5 = ($2 + [-16])
	
.LOOP $label$19:
	CALL memcpy(($7 + [-80]), ($5 + [-64]), [64])
	$2 = ($5 + [8])
	*(($7 + [-8])) = *($2)
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($2) = [0]
	$7 = ($7 + [-80])
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $1) != (int_32)[-16]) ){ goto $label$19 }
	$5 = *(($0 + [4]))
	$2 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $3
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$20 }
	$6 = ([0] - $2)
	$5 = ($5 + [-16])
	
.LOOP $label$21:
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	CALL $92(*(($5 + [8])))
	
.LABEL $label$22
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $92($2)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[80])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $41($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[80])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $92(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-80])
	if ( ((int_32)($4 + $7) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $42($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $13(*($1), ($0 + [40]))
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [512])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [512])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [512])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [28])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $92($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	CALL $97($1, [528])
	$5 = ($1 + [12])
	CALL $97($5, [544])
	*($1 + [24]) = (int_64)0
	$7 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [8])
	$6 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$4 = *(($1 + [12]))
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$7 = ($4 + $7)
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	$5 = CALL $13(CALL $13($9, $1), $5)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($5 + [4]), $3, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)4983122594567055472, *(*($0 + [8])), (int_64)1, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $92(*(($1 + [20])))
	
.LABEL $label$11
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	CALL $92(*($1 + [8]))
	
.LABEL $label$12
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $92($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC _Z12safety_checkyyy (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($11 + [48])) = [0]
	*($11 + [24]) = $0
	*($11 + [16]) = $0
	*($11 + [32]) = (int_64)-1
	$8 = (int_64)0
	*($11 + [40]) = (int_64)0
	$6 = CALL db_find_i64($0, $0, (int_64)4983122594567055472, (int_64)1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$11 }
	$4 = CALL $7(($11 + [16]), $6)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($11 + [16])), [32])
	$7 = (int_64)59
	$6 = [208]
	$9 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$8 > (uint_64)(int_64)3) ){ goto $label$17 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$12 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$5 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [272]
	$9 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$23 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$18 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$4 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [288]
	$9 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$29 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$24 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$3 }
	$8 = *($4 + [24])
	if ( ((int_64)$8 == (int_64)1) ){ goto $label$30 }
	if ( ((int_64)$8 != (int_64)2) ){ goto $label$2 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$36 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$3 = ($3 + [165])
	goto $label$34 
	
.LABEL $label$36
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$32
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$31 }
	CALL require_auth2($0, $9)
	
.LABEL $label$30
	$4 = *($11 + [40])
	if ( ($4 == 0) ){ goto $label$8 }
	$5 = ($11 + [44])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$37:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	if ( ((*($6 + [12]) & [1]) == 0) ){ goto $label$39 }
	CALL $92(*(($6 + [20])))
	
.LABEL $label$39
	if ( ((*($6) & [1]) == 0) ){ goto $label$40 }
	CALL $92(*($6 + [8]))
	
.LABEL $label$40
	CALL $92($6)
	
.LABEL $label$38
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$37 }
	$6 = *(($11 + [40]))
	goto $label$9 
	
.LABEL $label$11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$46 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$42
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$41 }
	CALL require_auth2($0, $9)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [96]
	$9 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$8 > (uint_64)(int_64)3) ){ goto $label$52 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$3 = ($3 + [165])
	goto $label$50 
	
.LABEL $label$52
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$48
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$53 }
	*($11 + [88]) = $0
	CALL eosio_assert(((int_64)*($11 + [16]) == (int_64)CALL $fimport$2()), [112])
	*($11 + [68]) = ($11 + [8])
	*($11 + [64]) = ($11 + [16])
	*($11 + [72]) = ($11 + [88])
	*(($6 = CALL $91([48]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [32]) = ($11 + [16])
	CALL $8(($11 + [64]), $6)
	*($11 + [80]) = $6
	*($11 + [64]) = (int_64)1
	$4 = *($6 + [36])
	*($11 + [60]) = $4
	$5 = ($11 + [44])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($11 + [48]))) ){ goto $label$7 }
	*($3 + [8]) = (int_64)1
	*($3 + [16]) = $4
	*($11 + [80]) = [0]
	*($3) = $6
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$53
	CALL eosio_assert([0], [176])
	goto $label$1 
	
.LABEL $label$10
	$6 = $4
	
.LABEL $label$9
	*($5) = $4
	CALL $92($6)
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [96])
	return (unreachable)
	
.LABEL $label$7
	CALL $9(($11 + [40]), ($11 + [80]), ($11 + [64]), ($11 + [60]))
	
.LABEL $label$6
	$6 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($6 == 0) ){ goto $label$54 }
	if ( ((*($6 + [12]) & [1]) == 0) ){ goto $label$55 }
	CALL $92(*(($6 + [20])))
	
.LABEL $label$55
	if ( ((*($6) & [1]) == 0) ){ goto $label$56 }
	CALL $92(*($6 + [8]))
	
.LABEL $label$56
	CALL $92($6)
	
.LABEL $label$54
	CALL eosio_exit([0])
	
.LABEL $label$5
	CALL _Z15check_whitelisty($0)
	CALL eosio_assert([1], [224])
	CALL $10(($11 + [16]), $4, $0)
	CALL eosio_exit([0])
	
.LABEL $label$4
	CALL _Z15check_whitelisty($0)
	CALL eosio_assert([1], [224])
	CALL $11(($11 + [16]), $4, $0)
	CALL eosio_exit([0])
	
.LABEL $label$3
	CALL _Z15check_whitelisty($0)
	CALL eosio_assert([1], [224])
	CALL $12(($11 + [16]), $4, $0)
	CALL eosio_exit([0])
	
.LABEL $label$2
	CALL eosio_assert([0], [304])
	
.LABEL $label$1
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [560])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $91([48]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [32]) = $0
	$4 = CALL $14(CALL $14(($7 + [32]), $5), ($5 + [12]))
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($5 + [24]), *($4 + [4]), [8])
	*($5 + [36]) = $1
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$10 }
	CALL $92(*(($4 + [20])))
	
.LABEL $label$10
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $92(*($4 + [8]))
	
.LABEL $label$11
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z15check_whitelisty (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [16]
	$5 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$6 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$6
	$6 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($0, $5)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $15($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $96($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $91($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $96($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $92($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $93($7)
	return (unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $16($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [592])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $91($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $98($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $92($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [384])
	*([0] + [4]) = $16
	CALL _Z12safety_checkyyy($0, $11, $2)
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	$11 = (int_64)0
	$10 = (int_64)59
	$15 = [624]
	$12 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$8 }
	$7 = *($15)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$8
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$15 = ($15 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$12 != (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = (int_64)0
	$10 = (int_64)59
	$15 = [640]
	$12 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$14 }
	$7 = *($15)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$7 = ($7 + [165])
	goto $label$12 
	
.LABEL $label$14
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$15 = ($15 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$12 != (int_64)$2) ){ goto $label$15 }
	$11 = (int_64)0
	$10 = (int_64)59
	$15 = [624]
	$12 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$21 }
	$7 = *($15)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [165])
	goto $label$19 
	
.LABEL $label$21
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$17
	$15 = ($15 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$16 }
	CALL eosio_assert(((int_64)$12 == (int_64)$1), [656])
	
.LABEL $label$15
	$3 = CALL $18(($16 + [104]), $0)
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4994130327835885568) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-4149697620714979328) ){ goto $label$22 }
	*($16 + [84]) = [0]
	*($16 + [80]) = [1]
	*($16 + [24 align=4]) = *($16 + [80])
	CALL $20($3, ($16 + [24]))
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)5372695399406501888) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$22 }
	*($16 + [100]) = [0]
	*($16 + [96]) = [2]
	*($16 + [8 align=4]) = *($16 + [96])
	CALL $20($3, ($16 + [8]))
	goto $label$22 
	
.LABEL $label$26
	*($16 + [60]) = [0]
	*($16 + [56]) = [3]
	*($16 + [48 align=4]) = *($16 + [56])
	CALL $26($3, ($16 + [48]))
	goto $label$22 
	
.LABEL $label$25
	*($16 + [76]) = [0]
	*($16 + [72]) = [4]
	*($16 + [32 align=4]) = *($16 + [72])
	CALL $20($3, ($16 + [32]))
	goto $label$22 
	
.LABEL $label$24
	*($16 + [68]) = [0]
	*($16 + [64]) = [5]
	*($16 + [40 align=4]) = *($16 + [64])
	CALL $20($3, ($16 + [40]))
	goto $label$22 
	
.LABEL $label$23
	*($16 + [92]) = [0]
	*($16 + [88]) = [6]
	*($16 + [16 align=4]) = *($16 + [88])
	CALL $20($3, ($16 + [16]))
	
.LABEL $label$22
	$4 = *(($3 + [264]))
	if ( ($4 == 0) ){ goto $label$28 }
	$8 = ($3 + [268])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$30 }
	
.LOOP $label$31:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$32 }
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$33 }
	$9 = ($5 + [20])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$35 }
	$7 = ([0] - $6)
	$15 = ($15 + [-16])
	
.LOOP $label$36:
	if ( ((*($15) & [1]) == 0) ){ goto $label$37 }
	CALL $92(*(($15 + [8])))
	
.LABEL $label$37
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $7) != (int_32)[-16]) ){ goto $label$36 }
	$15 = *(($5 + [16]))
	goto $label$34 
	
.LABEL $label$35
	$15 = $6
	
.LABEL $label$34
	*($9) = $6
	CALL $92($15)
	
.LABEL $label$33
	CALL $92($5)
	
.LABEL $label$32
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$31 }
	$15 = *(($3 + [264]))
	goto $label$29 
	
.LABEL $label$30
	$15 = $4
	
.LABEL $label$29
	*($8) = $4
	CALL $92($15)
	
.LABEL $label$28
	$4 = *(($3 + [224]))
	if ( ($4 == 0) ){ goto $label$38 }
	$8 = ($3 + [228])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$40 }
	
.LOOP $label$41:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$42 }
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$43 }
	$9 = ($5 + [20])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$45 }
	$7 = ([0] - $6)
	$15 = ($15 + [-16])
	
.LOOP $label$46:
	if ( ((*($15) & [1]) == 0) ){ goto $label$47 }
	CALL $92(*(($15 + [8])))
	
.LABEL $label$47
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $7) != (int_32)[-16]) ){ goto $label$46 }
	$15 = *(($5 + [16]))
	goto $label$44 
	
.LABEL $label$45
	$15 = $6
	
.LABEL $label$44
	*($9) = $6
	CALL $92($15)
	
.LABEL $label$43
	CALL $92($5)
	
.LABEL $label$42
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$41 }
	$15 = *(($3 + [224]))
	goto $label$39 
	
.LABEL $label$40
	$15 = $4
	
.LABEL $label$39
	*($8) = $4
	CALL $92($15)
	
.LABEL $label$38
	$4 = *(($3 + [184]))
	if ( ($4 == 0) ){ goto $label$48 }
	$8 = ($3 + [188])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$50 }
	
.LOOP $label$51:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$52 }
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$53 }
	$9 = ($5 + [20])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$55 }
	$7 = ([0] - $6)
	$15 = ($15 + [-16])
	
.LOOP $label$56:
	if ( ((*($15) & [1]) == 0) ){ goto $label$57 }
	CALL $92(*(($15 + [8])))
	
.LABEL $label$57
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $7) != (int_32)[-16]) ){ goto $label$56 }
	$15 = *(($5 + [16]))
	goto $label$54 
	
.LABEL $label$55
	$15 = $6
	
.LABEL $label$54
	*($9) = $6
	CALL $92($15)
	
.LABEL $label$53
	CALL $92($5)
	
.LABEL $label$52
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$51 }
	$15 = *(($3 + [184]))
	goto $label$49 
	
.LABEL $label$50
	$15 = $4
	
.LABEL $label$49
	*($8) = $4
	CALL $92($15)
	
.LABEL $label$48
	$4 = *(($3 + [144]))
	if ( ($4 == 0) ){ goto $label$58 }
	$8 = ($3 + [148])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$60 }
	
.LOOP $label$61:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$62 }
	$6 = *($5 + [24])
	if ( ($6 == 0) ){ goto $label$63 }
	$9 = ($5 + [28])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$65 }
	$7 = ([0] - $6)
	$15 = ($15 + [-16])
	
.LOOP $label$66:
	if ( ((*($15) & [1]) == 0) ){ goto $label$67 }
	CALL $92(*(($15 + [8])))
	
.LABEL $label$67
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $7) != (int_32)[-16]) ){ goto $label$66 }
	$15 = *(($5 + [24]))
	goto $label$64 
	
.LABEL $label$65
	$15 = $6
	
.LABEL $label$64
	*($9) = $6
	CALL $92($15)
	
.LABEL $label$63
	CALL $92($5)
	
.LABEL $label$62
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$61 }
	$15 = *(($3 + [144]))
	goto $label$59 
	
.LABEL $label$60
	$15 = $4
	
.LABEL $label$59
	*($8) = $4
	CALL $92($15)
	
.LABEL $label$58
	$4 = *(($3 + [104]))
	if ( ($4 == 0) ){ goto $label$68 }
	$8 = ($3 + [108])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$70 }
	
.LOOP $label$71:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$72 }
	$6 = *($5 + [24])
	if ( ($6 == 0) ){ goto $label$73 }
	$9 = ($5 + [28])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$75 }
	$7 = ([0] - $6)
	$15 = ($15 + [-16])
	
.LOOP $label$76:
	if ( ((*($15) & [1]) == 0) ){ goto $label$77 }
	CALL $92(*(($15 + [8])))
	
.LABEL $label$77
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $7) != (int_32)[-16]) ){ goto $label$76 }
	$15 = *(($5 + [24]))
	goto $label$74 
	
.LABEL $label$75
	$15 = $6
	
.LABEL $label$74
	*($9) = $6
	CALL $92($15)
	
.LABEL $label$73
	CALL $92($5)
	
.LABEL $label$72
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$71 }
	$15 = *(($3 + [104]))
	goto $label$69 
	
.LABEL $label$70
	$15 = $4
	
.LABEL $label$69
	*($8) = $4
	CALL $92($15)
	
.LABEL $label$68
	$4 = *(($3 + [64]))
	if ( ($4 == 0) ){ goto $label$1 }
	$8 = ($3 + [68])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$79 }
	
.LOOP $label$80:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$81 }
	$6 = *($5 + [24])
	if ( ($6 == 0) ){ goto $label$82 }
	$9 = ($5 + [28])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$84 }
	$7 = ([0] - $6)
	$15 = ($15 + [-16])
	
.LOOP $label$85:
	if ( ((*($15) & [1]) == 0) ){ goto $label$86 }
	CALL $92(*(($15 + [8])))
	
.LABEL $label$86
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $7) != (int_32)[-16]) ){ goto $label$85 }
	$15 = *(($5 + [24]))
	goto $label$83 
	
.LABEL $label$84
	$15 = $6
	
.LABEL $label$83
	*($9) = $6
	CALL $92($15)
	
.LABEL $label$82
	CALL $92($5)
	
.LABEL $label$81
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$80 }
	$15 = *(($3 + [64]))
	goto $label$78 
	
.LABEL $label$79
	$15 = $4
	
.LABEL $label$78
	*($8) = $4
	CALL $92($15)
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [384])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [448])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [8])
	$5 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = ($4 + $6)
	$5 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	$4 = CALL $13(CALL $13($8, $1), $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL db_update_i64(*(($1 + [36])), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	*($1 + [24]) = (int_64)2
	CALL eosio_assert([1], [448])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [8])
	$5 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = ($4 + $6)
	$5 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	$4 = CALL $13(CALL $13($8, $1), $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL db_update_i64(*(($1 + [36])), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	*($1 + [24]) = (int_64)1
	CALL eosio_assert([1], [448])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [8])
	$5 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = ($4 + $6)
	$5 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	$4 = CALL $13(CALL $13($8, $1), $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL db_update_i64(*(($1 + [36])), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [512])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [512])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *($1 + [16])) / (int_32)[80]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [512])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $65($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [8]) = (int_64)10000
	*($0) = $1
	*($0 + [16]) = (int_64)100000
	*($0 + [24]) = (int_64)10000000000
	*($0 + [32]) = (int_64)600
	*($0 + [40]) = $1
	*(($0 + [48])) = $1
	*(($0 + [56])) = (int_64)-1
	*(($0 + [64])) = [0]
	*(($0 + [68])) = [0]
	*(($0 + [72])) = [0]
	*($0 + [80]) = $1
	*(($0 + [88])) = $1
	*(($0 + [96])) = (int_64)-1
	*(($0 + [104])) = [0]
	*(($0 + [108])) = [0]
	*(($0 + [112])) = [0]
	*($0 + [120]) = $1
	*(($0 + [128])) = $1
	*(($0 + [136])) = (int_64)-1
	*(($0 + [144])) = [0]
	*(($0 + [148])) = [0]
	*(($0 + [152])) = [0]
	*($0 + [160]) = $1
	*(($0 + [168])) = $1
	*(($0 + [176])) = (int_64)-1
	*(($0 + [184])) = [0]
	*(($0 + [188])) = [0]
	*(($0 + [192])) = [0]
	*($0 + [200]) = $1
	*(($0 + [208])) = $1
	*(($0 + [216])) = (int_64)-1
	*(($0 + [224])) = [0]
	*(($0 + [228])) = [0]
	*(($0 + [232])) = [0]
	*($0 + [240]) = $1
	*(($0 + [248])) = $1
	*(($0 + [256])) = (int_64)-1
	*(($0 + [264])) = [0]
	*(($0 + [268])) = [0]
	*(($0 + [272])) = [0]
	$2 = ($0 + [160])
	$3 = CALL db_find_i64($1, $1, (int_64)7176370890153132032, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $52($2, $3) + [28]) == (int_32)$2), [32])
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $0
	CALL $81($4, $2, $1, ($4 + [8]))
	
.LABEL $label$1
	$2 = ($0 + [200])
	$3 = *(($0 + [228]))
	if ( ((int_32)$3 == (int_32)*(($0 + [224]))) ){ goto $label$5 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$2), [32])
	if ( $3 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)7176370890153656320, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $56($2, $3) + [28]) == (int_32)$2), [32])
	goto $label$3 
	
.LABEL $label$4
	*($4 + [8]) = $0
	CALL $82($4, $2, $1, ($4 + [8]))
	
.LABEL $label$3
	$2 = ($0 + [240])
	$3 = *(($0 + [268]))
	if ( ((int_32)$3 == (int_32)*(($0 + [264]))) ){ goto $label$8 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$2), [32])
	if ( $3 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)7176370890154180608, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $60($2, $3) + [28]) == (int_32)$2), [32])
	goto $label$6 
	
.LABEL $label$7
	*($4 + [8]) = $0
	CALL $83($4, $2, $1, ($4 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $19 (int_32 $0)
{
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [112])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $91([48])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [36]) = $1
	CALL $72(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [40])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $44(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [28])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$3 = ($3 + [-16])
	
.LOOP $label$7:
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($3 + [8])))
	
.LABEL $label$8
	$3 = ($3 + [-80])
	if ( ((int_32)($3 + $1) != (int_32)[-16]) ){ goto $label$7 }
	$3 = *(($0 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $92($3)
	
.LABEL $label$4
	CALL $92($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	*($1) = ((int_64)*($1) + (int_64)1)
	$4 = *($1 + [16])
	$5 = ($1 + [20])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$7 = ([0] - $4)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $7) != (int_32)[-16]) ){ goto $label$2 }
	
.LABEL $label$1
	*($5) = $4
	CALL eosio_assert([1], [448])
	$7 = *($1 + [16])
	$4 = *($5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)($4 - $7) / (int_32)[80]))
	$6 = [16]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = *($7 + [64])
	$5 = ( *(($7 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [60])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [80])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$9 }
	$7 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$8
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = ($7 + $6)
	CALL $71($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$11 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $79($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([1792])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $91($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [1792], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*(($6 + [20])) = [0]
	*($6 + [12 align=4]) = (int_64)0
	$5 = ($6 | [12])
	$3 = CALL strlen([1808])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($6 + [12]) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $91($4)
	*(($6 + [20])) = $5
	*(($6 + [16])) = $3
	*($6 + [12]) = ($4 | [1])
	
.LABEL $label$8
	CALL memcpy($5, [1808], $3)
	
.LABEL $label$7
	*(($5 + $3)) = [0]
	*(($6 + [32])) = [0]
	*($6 + [24]) = (int_64)0
	$5 = ($6 + [24])
	$3 = CALL strlen([1824])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$12 }
	*(($6 + [24])) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $91($4)
	*(($6 + [24])) = ($4 | [1])
	*(($6 + [32])) = $5
	*(($6 + [28])) = $3
	
.LABEL $label$11
	CALL memcpy($5, [1824], $3)
	
.LABEL $label$10
	*(($5 + $3)) = [0]
	CALL $99($0, ($6 + ((int_32)((uint_32)$2 % (uint_32)[3]) * (int_32)[12])))
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $92(*(($6 + [32])))
	
.LABEL $label$13
	if ( ((*($6 + [12]) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($6 + [20])))
	
.LABEL $label$14
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*($6 + [8]))
	
.LABEL $label$15
	*([0] + [4]) = ($6 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $93($6)
	
.LABEL $label$2
	CALL $93($5)
	
.LABEL $label$1
	CALL $93($5)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [560])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	CALL db_get_i64($1, $5, $4)
	*($7 + [36]) = $5
	*($7 + [32]) = $5
	$6 = ($5 + $4)
	*($7 + [40]) = $6
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($5)
	$6 = *(($7 + [40]))
	$5 = *($7 + [36])
	
.LABEL $label$7
	*(($4 = CALL $91([40])) + [24]) = [0]
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $5) > (uint_32)[7]), [592])
	CALL memcpy($4, $5, [8])
	$3 = ($5 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [592])
	CALL memcpy(($4 + [8]), $3, [8])
	*($7 + [36]) = ($5 + [16])
	CALL $40(($7 + [32]), ($4 + [16]))
	*($4 + [32]) = $1
	*($7 + [24]) = $4
	*($7 + [16]) = (int_64)1
	$6 = *($4 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $6
	*($7 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $78(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$1 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [20])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$12 }
	$6 = ([0] - $3)
	$5 = ($5 + [-16])
	
.LOOP $label$13:
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($5 + [8])))
	
.LABEL $label$14
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$13 }
	$5 = *(($1 + [16]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $92($5)
	
.LABEL $label$10
	CALL $92($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $4
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$6 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL $99((CALL $fimport$12($4, $6, [64]) + [64]), ($6 + [64]))
	*($5) = (*($5) + [80])
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($3 + [16]), $6)
	
.LABEL $label$1
	CALL eosio_assert([1], [448])
	$6 = *($1 + [16])
	$4 = *(($1 + [20]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($4 - $6) / (int_32)[80]))
	$3 = [16]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = *($6 + [64])
	$5 = ( *(($6 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [60])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$6 = ($6 + [80])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$8 }
	$6 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$6 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$7
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $3)
	CALL $75($8, $1)
	CALL db_update_i64(*($1 + [32]), $2, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$10 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [112])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $91([48])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [36]) = $1
	CALL $76(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [40])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $49(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [28])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$3 = ($3 + [-16])
	
.LOOP $label$7:
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($3 + [8])))
	
.LABEL $label$8
	$3 = ($3 + [-80])
	if ( ((int_32)($3 + $1) != (int_32)[-16]) ){ goto $label$7 }
	$3 = *(($0 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $92($3)
	
.LABEL $label$4
	CALL $92($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $91([48])
	$7 = CALL $43($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$1 = *($6 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $1
	*($8 + [24]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [28])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$4 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$13 }
	$6 = *(($1 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $92($6)
	
.LABEL $label$10
	CALL $92($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [560])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	CALL db_get_i64($1, $5, $4)
	*($7 + [36]) = $5
	*($7 + [32]) = $5
	$6 = ($5 + $4)
	*($7 + [40]) = $6
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($5)
	$6 = *(($7 + [40]))
	$5 = *($7 + [36])
	
.LABEL $label$7
	*(($4 = CALL $91([40])) + [24]) = [0]
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $5) > (uint_32)[7]), [592])
	CALL memcpy($4, $5, [8])
	$3 = ($5 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [592])
	CALL memcpy(($4 + [8]), $3, [8])
	*($7 + [36]) = ($5 + [16])
	CALL $40(($7 + [32]), ($4 + [16]))
	*($4 + [32]) = $1
	*($7 + [24]) = $4
	*($7 + [16]) = (int_64)1
	$6 = *($4 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $6
	*($7 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $74(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$1 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [20])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$12 }
	$6 = ([0] - $3)
	$5 = ($5 + [-16])
	
.LOOP $label$13:
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($5 + [8])))
	
.LABEL $label$14
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$13 }
	$5 = *(($1 + [16]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $92($5)
	
.LABEL $label$10
	CALL $92($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $4
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$6 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL $99((CALL $fimport$12($4, $6, [64]) + [64]), ($6 + [64]))
	*($5) = (*($5) + [80])
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($3 + [16]), $6)
	
.LABEL $label$1
	CALL eosio_assert([1], [448])
	$6 = *($1 + [16])
	$4 = *(($1 + [20]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($4 - $6) / (int_32)[80]))
	$3 = [16]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = *($6 + [64])
	$5 = ( *(($6 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [60])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$6 = ($6 + [80])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$8 }
	$6 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$6 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$7
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $3)
	CALL $71($8, $1)
	CALL db_update_i64(*($1 + [32]), $2, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$10 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [1168])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1216])
	$4 = *($0 + [24])
	$5 = ($0 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$2 = *($1)
	$8 = ([0] - $4)
	$10 = ($9 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [1280])
	$8 = ($9 + [-24])
	$3 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = *($9)
	*($9) = [0]
	$4 = *($8)
	*($8) = $10
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($4 + [28])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$10 = ($10 + [-16])
	
.LOOP $label$10:
	if ( ((*($10) & [1]) == 0) ){ goto $label$11 }
	CALL $92(*(($10 + [8])))
	
.LABEL $label$11
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $6) != (int_32)[-16]) ){ goto $label$10 }
	$10 = *(($4 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$10 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $92($10)
	
.LABEL $label$7
	CALL $92($4)
	
.LABEL $label$6
	*($8 + [8]) = *($9 + [8])
	*(($8 + [16])) = *(($9 + [16]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$12:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$14 }
	$3 = ($4 + [28])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	$6 = ([0] - $5)
	$10 = ($10 + [-16])
	
.LOOP $label$17:
	if ( ((*($10) & [1]) == 0) ){ goto $label$18 }
	CALL $92(*(($10 + [8])))
	
.LABEL $label$18
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $6) != (int_32)[-16]) ){ goto $label$17 }
	$10 = *(($4 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$10 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL $92($10)
	
.LABEL $label$14
	CALL $92($4)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$12 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $91([48])
	$7 = CALL $48($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$1 = *($6 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $1
	*($8 + [24]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [28])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$4 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$13 }
	$6 = *(($1 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $92($6)
	
.LABEL $label$10
	CALL $92($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [592])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	*($1) = ((int_64)*($1) + (int_64)1)
	$4 = *($1 + [16])
	$5 = ($1 + [20])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$7 = ([0] - $4)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $7) != (int_32)[-16]) ){ goto $label$2 }
	
.LABEL $label$1
	*($5) = $4
	CALL eosio_assert([1], [448])
	$7 = *($1 + [16])
	$4 = *($5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)($4 - $7) / (int_32)[80]))
	$6 = [16]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = *($7 + [64])
	$5 = ( *(($7 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [60])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [80])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$9 }
	$7 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$8
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = ($7 + $6)
	CALL $75($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$11 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $21 (int_32 $0)
{
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $23 (int_32 $0)
{
}

void .FUNC $22 (int_32 $0)
{
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_32 $30
	$30 = (*([0] + [4]) - [384])
	*([0] + [4]) = $30
	$6 = *($0)
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [688]
	$28 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$27 > (uint_64)(int_64)9) ){ goto $label$6 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$11 = ($11 + [165])
	goto $label$4 
	
.LABEL $label$6
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$2
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($6, $28)
	CALL memcpy(($30 + [206]), $3, [66])
	CALL memcpy(($30 + [296]), ($30 + [206]), [66])
	CALL sha256(($30 + [296]), [66], ($30 + [32]))
	CALL eosio_assert([1], [704])
	$27 = ((int_64)((uint_64)(int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($30 + [33]) + (int_64)*($30 + [32])) + (int_64)*($30 + [34])) + (int_64)*($30 + [35])) + (int_64)*($30 + [36])) + (int_64)*($30 + [37])) + (int_64)*($30 + [38])) + (int_64)*($30 + [39])) << (int_64)32) >> (int_64)32) % (uint_64)(int_64)100) + (int_64)1
	*($30 + [272]) = $27)
	CALL memcpy(($30 + [140]), $4, [66])
	CALL memcpy(($30 + [296]), ($30 + [140]), [66])
	CALL sha256(($30 + [296]), [66], ($30 + [32]))
	CALL eosio_assert([1], [704])
	$29 = ((int_64)((uint_64)(int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($30 + [33]) + (int_64)*($30 + [32])) + (int_64)*($30 + [34])) + (int_64)*($30 + [35])) + (int_64)*($30 + [36])) + (int_64)*($30 + [37])) + (int_64)*($30 + [38])) + (int_64)*($30 + [39])) << (int_64)32) >> (int_64)32) % (uint_64)(int_64)100) + (int_64)1
	*($30 + [280]) = $29)
	CALL memcpy(($30 + [74]), $5, [66])
	CALL memcpy(($30 + [296]), ($30 + [74]), [66])
	CALL sha256(($30 + [296]), [66], ($30 + [32]))
	CALL eosio_assert([1], [704])
	$26 = ((int_64)((uint_64)(int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($30 + [33]) + (int_64)*($30 + [32])) + (int_64)*($30 + [34])) + (int_64)*($30 + [35])) + (int_64)*($30 + [36])) + (int_64)*($30 + [37])) + (int_64)*($30 + [38])) + (int_64)*($30 + [39])) << (int_64)32) >> (int_64)32) % (uint_64)(int_64)100) + (int_64)1
	*($30 + [288]) = $26)
	CALL prints([736])
	CALL printui($27)
	CALL prints([752])
	CALL printui($29)
	CALL prints([752])
	CALL printui($26)
	CALL eosio_assert([1], [768])
	$27 = (int_64)5459781
	$25 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $27) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$27 = (uint_64)$27 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$27) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$27 = (uint_64)$27 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$27) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$11 = [1]
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [832])
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [624]
	$6 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$27 > (uint_64)(int_64)10) ){ goto $label$17 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$11 = ($11 + [165])
	goto $label$15 
	
.LABEL $label$17
	$29 = (int_64)0
	if ( ((int_64)$27 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$13
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)-5)
	$6 = ((int_64)$29 | (int_64)$6)
	$27 = ((int_64)$27 + (int_64)1)
	if ( ((int_64)$27 != (int_64)13) ){ goto $label$12 }
	if ( ((int_64)$1 == (int_64)3) ){ goto $label$28 }
	if ( ((int_64)$1 == (int_64)2) ){ goto $label$27 }
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$26 }
	$5 = *(($0 + [64]))
	$3 = *(($0 + [68]))
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$29 }
	$25 = ($3 + [-24])
	$4 = ([0] - $5)
	
.LOOP $label$30:
	if ( ((int_64)*(*($25)) == (int_64)$2) ){ goto $label$29 }
	$3 = $25
	$11 = ($25 + [-24])
	$25 = $11
	if ( ((int_32)($11 + $4) != (int_32)[-24]) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = ($0 + [40])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$25 }
	$22 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [36]) == (int_32)$7), [32])
	goto $label$24 
	
.LABEL $label$28
	$5 = *(($0 + [144]))
	$3 = *(($0 + [148]))
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$31 }
	$25 = ($3 + [-24])
	$4 = ([0] - $5)
	
.LOOP $label$32:
	if ( ((int_64)*(*($25)) == (int_64)$2) ){ goto $label$31 }
	$3 = $25
	$11 = ($25 + [-24])
	$25 = $11
	if ( ((int_32)($11 + $4) != (int_32)[-24]) ){ goto $label$32 }
	
.LABEL $label$31
	$7 = ($0 + [120])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$23 }
	$22 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [36]) == (int_32)$7), [32])
	goto $label$22 
	
.LABEL $label$27
	$5 = *(($0 + [104]))
	$3 = *(($0 + [108]))
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$33 }
	$25 = ($3 + [-24])
	$4 = ([0] - $5)
	
.LOOP $label$34:
	if ( ((int_64)*(*($25)) == (int_64)$2) ){ goto $label$33 }
	$3 = $25
	$11 = ($25 + [-24])
	$25 = $11
	if ( ((int_32)($11 + $4) != (int_32)[-24]) ){ goto $label$34 }
	
.LABEL $label$33
	$7 = ($0 + [80])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$21 }
	$22 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [36]) == (int_32)$7), [32])
	goto $label$20 
	
.LABEL $label$26
	CALL eosio_assert([0], [1152])
	goto $label$19 
	
.LABEL $label$25
	$22 = [0]
	$25 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)7176372460584435712, $2)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$24 }
	$22 = CALL $29($7, $25)
	CALL eosio_assert(((int_32)*($22 + [36]) == (int_32)$7), [32])
	
.LABEL $label$24
	$8 = ((int_32)$22 != (int_32)[0])
	CALL eosio_assert($8, [864])
	CALL eosio_assert(((int_64)*($22) == (int_64)$2), [896])
	CALL eosio_assert(((int_64)*($22 + [8]) == (int_64)1), [912])
	CALL eosio_assert(((int_64)*($22 + [16]) == (int_64)30000), [944])
	$24 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $27) * (float_64)(float_64)0.94))
	$27 = *($22 + [16])
	$9 = (int_64))($27 - $24)
	$10 = ($30 | [1])
	$23 = (int_64)3
	$13 = (($30 + [16]) + [8])
	$14 = ($22 + [24])
	$16 = (($30 + [296]) + [16])
	$17 = (($30 + [296]) + [32])
	$5 = ($30 + [336])
	$18 = ($5 + [4])
	$19 = ($30 + [60])
	$21 = ($30 + [344])
	$20 = ($30 + [52])
	$3 = [0]
	
.LOOP $label$35:
	$1 = $24
	if ( ((int_64)$23 == (int_64)1) ){ goto $label$36 }
	$1 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *((($30 + [272]) + ($3 << [3])))) * (float_64)(float_64)0.01) * (float_64)(CASTING float_64)(uint_64 ((int_64)((uint_64)$24 / (uint_64)$23) << (int_64)1))) + (float_64)(float_64)1))
	
.LABEL $label$36
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$37 }
	$2 = *($0)
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [688]
	$28 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$27 > (uint_64)(int_64)9) ){ goto $label$43 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$11 = ($11 + [165])
	goto $label$41 
	
.LABEL $label$43
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$39
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$38 }
	*($13) = $28
	*($30 + [16]) = $2
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [624]
	$28 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$27 > (uint_64)(int_64)10) ){ goto $label$49 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$11 = ($11 + [165])
	goto $label$47 
	
.LABEL $label$49
	$29 = (int_64)0
	if ( ((int_64)$27 == (int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$45
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)-5)
	$28 = ((int_64)$29 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)1)
	if ( ((int_64)$27 != (int_64)13) ){ goto $label$44 }
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [640]
	$2 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$27 > (uint_64)(int_64)7) ){ goto $label$55 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$11 = ($11 + [165])
	goto $label$53 
	
.LABEL $label$55
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$51
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$2 = ((int_64)$29 | (int_64)$2)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$50 }
	$4 = *($14)
	*(($11 = ($30 + [8]))) = [0]
	*($30) = (int_64)0
	$25 = CALL strlen([1104])
	if ( ((uint_32)$25 >= (uint_32)[-16]) ){ goto $label$18 }
	$12 = ($4 + ((int_32)$3 * (int_32)[80]))
	if ( ((uint_32)$25 >= (uint_32)[11]) ){ goto $label$58 }
	*($30) = ($25 << [1])
	$4 = $10
	if ( $25 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$15 = (($25 + [16]) & [-16])
	$4 = CALL $91($15)
	*($11) = $4
	*($30) = ($15 | [1])
	*($30 + [4]) = $25
	
.LABEL $label$57
	CALL memcpy($4, [1104], $25)
	
.LABEL $label$56
	*(($4 + $25)) = [0]
	$27 = *($12)
	*($16) = $1
	*((($30 + [296]) + [24])) = (int_64)1397703940
	*($17) = $6
	*((($30 + [296]) + [8])) = $27
	*($30 + [296]) = *($0)
	*($18) = *($30 + [4 align=4])
	*($5) = *($30)
	*($30) = [0]
	*($30 + [4]) = [0]
	*($11) = [0]
	CALL $33(($30 + [368]), CALL $32(($30 + [32]), ($30 + [16]), $28, $2, ($30 + [296])))
	$25 = *($30 + [368])
	CALL send_inline($25, (*($30 + [372]) - $25))
	$25 = *($30 + [368])
	if ( ($25 == 0) ){ goto $label$59 }
	*($30 + [372]) = $25
	CALL $92($25)
	
.LABEL $label$59
	$25 = *($19)
	if ( ($25 == 0) ){ goto $label$60 }
	*((($30 + [32]) + [32])) = $25
	CALL $92($25)
	
.LABEL $label$60
	$25 = *((($30 + [32]) + [16]))
	if ( ($25 == 0) ){ goto $label$61 }
	*($20) = $25
	CALL $92($25)
	
.LABEL $label$61
	if ( ((*($5) & [1]) == 0) ){ goto $label$62 }
	CALL $92(*($21))
	
.LABEL $label$62
	if ( ((*($30) & [1]) == 0) ){ goto $label$37 }
	CALL $92(*($11))
	
.LABEL $label$37
	$23 = ((int_64)$23 + (int_64)-1)
	$24 = (int_64))($24 - $1)
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[3]) ){ goto $label$35 }
	CALL eosio_assert((int_64)($23 == 0), [960])
	CALL eosio_assert((int_64)($24 == 0), [992])
	CALL $30($0, $9)
	CALL eosio_assert($8, [1024])
	CALL eosio_assert($8, [1072])
	$25 = CALL db_next_i64(*($22 + [40]), ($30 + [296]))
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$63 }
	CALL $29($7, $25)
	
.LABEL $label$63
	CALL $31($7, $22)
	goto $label$19 
	
.LABEL $label$23
	$22 = [0]
	$25 = CALL db_find_i64(*(($0 + [120])), *(($0 + [128])), (int_64)7176372460585484288, $2)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$22 }
	$22 = CALL $36($7, $25)
	CALL eosio_assert(((int_32)*($22 + [36]) == (int_32)$7), [32])
	
.LABEL $label$22
	$8 = ((int_32)$22 != (int_32)[0])
	CALL eosio_assert($8, [864])
	CALL eosio_assert(((int_64)*($22) == (int_64)$2), [896])
	$24 = (int_64)3
	CALL eosio_assert(((int_64)*($22 + [8]) == (int_64)3), [912])
	CALL eosio_assert(((int_64)*($22 + [16]) == (int_64)300000), [944])
	$23 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $27) * (float_64)(float_64)0.94))
	$27 = *($22 + [16])
	$9 = (int_64))($27 - $23)
	$10 = ($30 | [1])
	$13 = (($30 + [16]) + [8])
	$14 = ($22 + [24])
	$16 = (($30 + [296]) + [16])
	$17 = (($30 + [296]) + [32])
	$5 = ($30 + [336])
	$18 = ($5 + [4])
	$19 = ($30 + [60])
	$21 = ($30 + [344])
	$20 = ($30 + [52])
	$3 = [0]
	
.LOOP $label$64:
	$1 = $23
	if ( ((int_64)$24 == (int_64)1) ){ goto $label$65 }
	$1 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *((($30 + [272]) + ($3 << [3])))) * (float_64)(float_64)0.01) * (float_64)(CASTING float_64)(uint_64 ((int_64)((uint_64)$23 / (uint_64)$24) << (int_64)1))) + (float_64)(float_64)1))
	
.LABEL $label$65
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$66 }
	$2 = *($0)
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [688]
	$28 = (int_64)0
	
.LOOP $label$67:
	if ( ((uint_64)$27 > (uint_64)(int_64)9) ){ goto $label$72 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$11 = ($11 + [165])
	goto $label$70 
	
.LABEL $label$72
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$69
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$68
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$67 }
	*($13) = $28
	*($30 + [16]) = $2
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [624]
	$28 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$27 > (uint_64)(int_64)10) ){ goto $label$78 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$11 = ($11 + [165])
	goto $label$76 
	
.LABEL $label$78
	$29 = (int_64)0
	if ( ((int_64)$27 == (int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$74
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)-5)
	$28 = ((int_64)$29 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)1)
	if ( ((int_64)$27 != (int_64)13) ){ goto $label$73 }
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [640]
	$2 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$27 > (uint_64)(int_64)7) ){ goto $label$84 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$11 = ($11 + [165])
	goto $label$82 
	
.LABEL $label$84
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$80
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$2 = ((int_64)$29 | (int_64)$2)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$79 }
	$4 = *($14)
	*(($11 = ($30 + [8]))) = [0]
	*($30) = (int_64)0
	$25 = CALL strlen([1104])
	if ( ((uint_32)$25 >= (uint_32)[-16]) ){ goto $label$18 }
	$12 = ($4 + ((int_32)$3 * (int_32)[80]))
	if ( ((uint_32)$25 >= (uint_32)[11]) ){ goto $label$87 }
	*($30) = ($25 << [1])
	$4 = $10
	if ( $25 ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$15 = (($25 + [16]) & [-16])
	$4 = CALL $91($15)
	*($11) = $4
	*($30) = ($15 | [1])
	*($30 + [4]) = $25
	
.LABEL $label$86
	CALL memcpy($4, [1104], $25)
	
.LABEL $label$85
	*(($4 + $25)) = [0]
	$27 = *($12)
	*($16) = $1
	*((($30 + [296]) + [24])) = (int_64)1397703940
	*($17) = $6
	*((($30 + [296]) + [8])) = $27
	*($30 + [296]) = *($0)
	*($18) = *($30 + [4 align=4])
	*($5) = *($30)
	*($30) = [0]
	*($30 + [4]) = [0]
	*($11) = [0]
	CALL $33(($30 + [368]), CALL $32(($30 + [32]), ($30 + [16]), $28, $2, ($30 + [296])))
	$25 = *($30 + [368])
	CALL send_inline($25, (*($30 + [372]) - $25))
	$25 = *($30 + [368])
	if ( ($25 == 0) ){ goto $label$88 }
	*($30 + [372]) = $25
	CALL $92($25)
	
.LABEL $label$88
	$25 = *($19)
	if ( ($25 == 0) ){ goto $label$89 }
	*((($30 + [32]) + [32])) = $25
	CALL $92($25)
	
.LABEL $label$89
	$25 = *((($30 + [32]) + [16]))
	if ( ($25 == 0) ){ goto $label$90 }
	*($20) = $25
	CALL $92($25)
	
.LABEL $label$90
	if ( ((*($5) & [1]) == 0) ){ goto $label$91 }
	CALL $92(*($21))
	
.LABEL $label$91
	if ( ((*($30) & [1]) == 0) ){ goto $label$66 }
	CALL $92(*($11))
	
.LABEL $label$66
	$24 = ((int_64)$24 + (int_64)-1)
	$23 = (int_64))($23 - $1)
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[3]) ){ goto $label$64 }
	CALL eosio_assert((int_64)($24 == 0), [960])
	CALL eosio_assert((int_64)($23 == 0), [992])
	CALL $30($0, $9)
	CALL eosio_assert($8, [1024])
	CALL eosio_assert($8, [1072])
	$25 = CALL db_next_i64(*($22 + [40]), ($30 + [296]))
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$92 }
	CALL $36($7, $25)
	
.LABEL $label$92
	CALL $37($7, $22)
	goto $label$19 
	
.LABEL $label$21
	$22 = [0]
	$25 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)7176372460584960000, $2)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$20 }
	$22 = CALL $34($7, $25)
	CALL eosio_assert(((int_32)*($22 + [36]) == (int_32)$7), [32])
	
.LABEL $label$20
	$8 = ((int_32)$22 != (int_32)[0])
	CALL eosio_assert($8, [864])
	CALL eosio_assert(((int_64)*($22) == (int_64)$2), [896])
	CALL eosio_assert(((int_64)*($22 + [8]) == (int_64)2), [912])
	CALL eosio_assert(((int_64)*($22 + [16]) == (int_64)150000), [944])
	$24 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $27) * (float_64)(float_64)0.94))
	$27 = *($22 + [16])
	$9 = (int_64))($27 - $24)
	$10 = ($30 | [1])
	$23 = (int_64)3
	$13 = (($30 + [16]) + [8])
	$14 = ($22 + [24])
	$16 = (($30 + [296]) + [16])
	$17 = (($30 + [296]) + [32])
	$5 = ($30 + [336])
	$18 = ($5 + [4])
	$19 = ($30 + [60])
	$21 = ($30 + [344])
	$20 = ($30 + [52])
	$3 = [0]
	
.LOOP $label$93:
	$1 = $24
	if ( ((int_64)$23 == (int_64)1) ){ goto $label$94 }
	$1 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *((($30 + [272]) + ($3 << [3])))) * (float_64)(float_64)0.01) * (float_64)(CASTING float_64)(uint_64 ((int_64)((uint_64)$24 / (uint_64)$23) << (int_64)1))) + (float_64)(float_64)1))
	
.LABEL $label$94
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$95 }
	$2 = *($0)
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [688]
	$28 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$27 > (uint_64)(int_64)9) ){ goto $label$101 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$11 = ($11 + [165])
	goto $label$99 
	
.LABEL $label$101
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$97
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$96 }
	*($13) = $28
	*($30 + [16]) = $2
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [624]
	$28 = (int_64)0
	
.LOOP $label$102:
	if ( ((uint_64)$27 > (uint_64)(int_64)10) ){ goto $label$107 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$11 = ($11 + [165])
	goto $label$105 
	
.LABEL $label$107
	$29 = (int_64)0
	if ( ((int_64)$27 == (int_64)11) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$103
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)-5)
	$28 = ((int_64)$29 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)1)
	if ( ((int_64)$27 != (int_64)13) ){ goto $label$102 }
	$27 = (int_64)0
	$26 = (int_64)59
	$25 = [640]
	$2 = (int_64)0
	
.LOOP $label$108:
	if ( ((uint_64)$27 > (uint_64)(int_64)7) ){ goto $label$113 }
	$11 = *($25)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$112 }
	$11 = ($11 + [165])
	goto $label$111 
	
.LABEL $label$113
	$29 = (int_64)0
	if ( ((uint_64)$27 <= (uint_64)(int_64)11) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$112
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$111
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$110
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$109
	$25 = ($25 + [1])
	$27 = ((int_64)$27 + (int_64)1)
	$2 = ((int_64)$29 | (int_64)$2)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$108 }
	$4 = *($14)
	*(($11 = ($30 + [8]))) = [0]
	*($30) = (int_64)0
	$25 = CALL strlen([1104])
	if ( ((uint_32)$25 >= (uint_32)[-16]) ){ goto $label$18 }
	$12 = ($4 + ((int_32)$3 * (int_32)[80]))
	if ( ((uint_32)$25 >= (uint_32)[11]) ){ goto $label$116 }
	*($30) = ($25 << [1])
	$4 = $10
	if ( $25 ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	$15 = (($25 + [16]) & [-16])
	$4 = CALL $91($15)
	*($11) = $4
	*($30) = ($15 | [1])
	*($30 + [4]) = $25
	
.LABEL $label$115
	CALL memcpy($4, [1104], $25)
	
.LABEL $label$114
	*(($4 + $25)) = [0]
	$27 = *($12)
	*($16) = $1
	*((($30 + [296]) + [24])) = (int_64)1397703940
	*($17) = $6
	*((($30 + [296]) + [8])) = $27
	*($30 + [296]) = *($0)
	*($18) = *($30 + [4 align=4])
	*($5) = *($30)
	*($30) = [0]
	*($30 + [4]) = [0]
	*($11) = [0]
	CALL $33(($30 + [368]), CALL $32(($30 + [32]), ($30 + [16]), $28, $2, ($30 + [296])))
	$25 = *($30 + [368])
	CALL send_inline($25, (*($30 + [372]) - $25))
	$25 = *($30 + [368])
	if ( ($25 == 0) ){ goto $label$117 }
	*($30 + [372]) = $25
	CALL $92($25)
	
.LABEL $label$117
	$25 = *($19)
	if ( ($25 == 0) ){ goto $label$118 }
	*((($30 + [32]) + [32])) = $25
	CALL $92($25)
	
.LABEL $label$118
	$25 = *((($30 + [32]) + [16]))
	if ( ($25 == 0) ){ goto $label$119 }
	*($20) = $25
	CALL $92($25)
	
.LABEL $label$119
	if ( ((*($5) & [1]) == 0) ){ goto $label$120 }
	CALL $92(*($21))
	
.LABEL $label$120
	if ( ((*($30) & [1]) == 0) ){ goto $label$95 }
	CALL $92(*($11))
	
.LABEL $label$95
	$23 = ((int_64)$23 + (int_64)-1)
	$24 = (int_64))($24 - $1)
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[3]) ){ goto $label$93 }
	CALL eosio_assert((int_64)($23 == 0), [960])
	CALL eosio_assert((int_64)($24 == 0), [992])
	CALL $30($0, $9)
	CALL eosio_assert($8, [1024])
	CALL eosio_assert($8, [1072])
	$25 = CALL db_next_i64(*($22 + [40]), ($30 + [296]))
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$121 }
	CALL $34($7, $25)
	
.LABEL $label$121
	CALL $35($7, $22)
	
.LABEL $label$19
	*([0] + [4]) = ($30 + [384])
	return (unreachable)
	
.LABEL $label$18
	CALL $93($30)
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL $50(($5 + [128]))
	$2 = *($0)
	if ( ((int_64)*($5 + [128]) == (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($5 + [136]) == (int_64)$2), [1680])
	CALL eosio_assert(((int_64)*((($5 + [128]) + [24])) == (int_64)1397703940), [1680])
	CALL eosio_assert(((uint_64)*($5 + [144]) >= (uint_64)*($0 + [8])), [1696])
	CALL eosio_assert(((uint_64)*($5 + [144]) <= (uint_64)*($0 + [16])), [1728])
	*(($3 = (($5 + [48]) + [16]))) = (int_64)1397703940
	*($5 + [56]) = (int_64)0
	CALL eosio_assert([1], [768])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$1 = (($5 + [128]) + [16])
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [832])
	*(($5 + [116])) = [0]
	*(($5 + [120])) = [0]
	*(($5 + [68])) = *(($1 + [12]))
	*(($5 + [64])) = *(($1 + [8]))
	*($5 + [112]) = [0]
	*($5 + [72]) = [0]
	*($5 + [48]) = *($5 + [128])
	*($5 + [60]) = *(($1 + [4]))
	*($5 + [56]) = *($1)
	*($5 + [72]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = CALL read_transaction([0], [0])
	$4 = CALL malloc($3)
	CALL read_transaction($4, $3)
	$1 = (($5 + [48]) + [32])
	CALL sha256($4, $3, $1)
	$3 = *($5 + [160])
	if ( (( *(($5 + [164])) ? uint_32($3 >> [1]) : ($3 & [1]) ) == 0) ){ goto $label$8 }
	CALL $99(($5 + [32]), (($5 + [128]) + [32]))
	goto $label$7 
	
.LABEL $label$8
	CALL $51(($5 + [32]), $0, *($1))
	
.LABEL $label$7
	$3 = ($5 + [112])
	if ( (*($5 + [112]) & [1]) ){ goto $label$10 }
	*($3) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*(($5 + [120]))) = [0]
	*(($5 + [116])) = [0]
	
.LABEL $label$9
	CALL $96($3, [0])
	*(($3 + [8])) = *((($5 + [32]) + [8]))
	*($3) = *($5 + [32])
	$2 = *(($5 + [144]))
	if ( ((int_64)$2 == (int_64)100000) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)50000) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)10000) ){ goto $label$21 }
	$3 = ($0 + [160])
	$4 = *(($0 + [188]))
	if ( ((int_32)$4 == (int_32)*(($0 + [184]))) ){ goto $label$20 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$3), [32])
	*($5 + [36]) = $4
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	goto $label$16 
	
.LABEL $label$23
	$3 = ($0 + [240])
	$4 = *(($0 + [268]))
	if ( ((int_32)$4 == (int_32)*(($0 + [264]))) ){ goto $label$19 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$3), [32])
	*($5 + [36]) = $4
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	goto $label$14 
	
.LABEL $label$22
	$3 = ($0 + [200])
	$4 = *(($0 + [228]))
	if ( ((int_32)$4 == (int_32)*(($0 + [224]))) ){ goto $label$18 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$3), [32])
	*($5 + [36]) = $4
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	goto $label$12 
	
.LABEL $label$21
	CALL eosio_assert([0], [1760])
	goto $label$11 
	
.LABEL $label$20
	$4 = CALL db_find_i64(*($3), *(($0 + [168])), (int_64)7176370890153132032, (int_64)1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$17 }
	$4 = CALL $52($3, $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$3), [32])
	*($5 + [36]) = $4
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	goto $label$16 
	
.LABEL $label$19
	$4 = CALL db_find_i64(*($3), *(($0 + [248])), (int_64)7176370890154180608, (int_64)1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$15 }
	$4 = CALL $60($3, $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$3), [32])
	*($5 + [36]) = $4
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	goto $label$14 
	
.LABEL $label$18
	$4 = CALL db_find_i64(*($3), *(($0 + [208])), (int_64)7176370890153656320, (int_64)1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$13 }
	$4 = CALL $56($3, $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$3), [32])
	*($5 + [36]) = $4
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	goto $label$12 
	
.LABEL $label$17
	$4 = [0]
	*($5 + [36]) = [0]
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1680])
	CALL eosio_assert((((int_32)(*(($4 + [20])) - *($4 + [16])) / (int_32)[80]) <= [3]), [1680])
	$4 = *($5 + [36])
	$2 = *($0)
	*($5 + [28]) = ($5 + [48])
	*($5 + [24]) = ($5 + [32])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [224])
	CALL $53($3, $4, $2, ($5 + [24]))
	$4 = *($4 + [16])
	$4 = *($1)
	$1 = *(($4 + [20]))
	if ( ((int_32)($1 - $4) != (int_32)[240]) ){ goto $label$11 }
	*($5 + [24]) = (int_64)0
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$24 }
	*($5 + [24]) = ((int_64)((int_64)*($4 + [8]) + (int_64)*(($4 + [88]))) + (int_64)*(($4 + [168])))
	
.LABEL $label$24
	$2 = *($0)
	*($5 + [20]) = ($5 + [24])
	*($5 + [16]) = ($5 + [32])
	CALL $54(($5 + [8]), ($0 + [40]), $2, ($5 + [16]))
	$2 = *($0)
	$0 = *($5 + [36])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [224])
	CALL $55($3, $0, $2, ($5 + [16]))
	goto $label$11 
	
.LABEL $label$15
	$4 = [0]
	*($5 + [36]) = [0]
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1680])
	CALL eosio_assert((((int_32)(*(($4 + [20])) - *($4 + [16])) / (int_32)[80]) <= [3]), [1680])
	$4 = *($5 + [36])
	$2 = *($0)
	*($5 + [28]) = ($5 + [48])
	*($5 + [24]) = ($5 + [32])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [224])
	CALL $61($3, $4, $2, ($5 + [24]))
	$4 = *($4 + [16])
	$4 = *($1)
	$1 = *(($4 + [20]))
	if ( ((int_32)($1 - $4) != (int_32)[240]) ){ goto $label$11 }
	*($5 + [24]) = (int_64)0
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$25 }
	*($5 + [24]) = ((int_64)((int_64)*($4 + [8]) + (int_64)*(($4 + [88]))) + (int_64)*(($4 + [168])))
	
.LABEL $label$25
	$2 = *($0)
	*($5 + [20]) = ($5 + [24])
	*($5 + [16]) = ($5 + [32])
	CALL $62(($5 + [8]), ($0 + [120]), $2, ($5 + [16]))
	$2 = *($0)
	$0 = *($5 + [36])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [224])
	CALL $63($3, $0, $2, ($5 + [16]))
	goto $label$11 
	
.LABEL $label$13
	$4 = [0]
	*($5 + [36]) = [0]
	*($5 + [32]) = $3
	$1 = (($5 + [32]) | [4])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1680])
	CALL eosio_assert((((int_32)(*(($4 + [20])) - *($4 + [16])) / (int_32)[80]) <= [3]), [1680])
	$4 = *($5 + [36])
	$2 = *($0)
	*($5 + [28]) = ($5 + [48])
	*($5 + [24]) = ($5 + [32])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [224])
	CALL $57($3, $4, $2, ($5 + [24]))
	$4 = *($4 + [16])
	$4 = *($1)
	$1 = *(($4 + [20]))
	if ( ((int_32)($1 - $4) != (int_32)[240]) ){ goto $label$11 }
	*($5 + [24]) = (int_64)0
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$26 }
	*($5 + [24]) = ((int_64)((int_64)*($4 + [8]) + (int_64)*(($4 + [88]))) + (int_64)*(($4 + [168])))
	
.LABEL $label$26
	$2 = *($0)
	*($5 + [20]) = ($5 + [24])
	*($5 + [16]) = ($5 + [32])
	CALL $58(($5 + [8]), ($0 + [80]), $2, ($5 + [16]))
	$2 = *($0)
	$0 = *($5 + [36])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [224])
	CALL $59($3, $0, $2, ($5 + [16]))
	
.LABEL $label$11
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$1 }
	CALL $92(*(($5 + [120])))
	
.LABEL $label$1
	if ( ((*(($5 + [160])) & [1]) == 0) ){ goto $label$27 }
	CALL $92(*(($5 + [168])))
	
.LABEL $label$27
	*([0] + [4]) = ($5 + [176])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [17])
	*($4 + [8]) = ($3 + [16])
	*($4 + [16]) = ($3 + [18])
	*($4 + [20]) = ($3 + [19])
	*($4 + [24]) = ($3 + [20])
	*($4 + [28]) = ($3 + [21])
	*($4 + [32]) = ($3 + [22])
	*($4 + [36]) = ($3 + [23])
	*($4 + [40]) = ($3 + [24])
	*($4 + [44]) = ($3 + [25])
	*($4 + [48]) = ($3 + [26])
	*($4 + [52]) = ($3 + [27])
	*($4 + [56]) = ($3 + [28])
	*($4 + [60]) = ($3 + [29])
	*($4 + [64]) = ($3 + [30])
	*($4 + [68]) = ($3 + [31])
	*($4 + [72]) = ($3 + [32])
	*($4 + [76]) = ($3 + [33])
	*($4 + [80]) = ($3 + [34])
	*($4 + [84]) = ($3 + [35])
	*($4 + [88]) = ($3 + [36])
	*($4 + [92]) = ($3 + [37])
	*($4 + [96]) = ($3 + [38])
	*($4 + [100]) = ($3 + [39])
	*($4 + [104]) = ($3 + [40])
	*($4 + [108]) = ($3 + [41])
	*($4 + [112]) = ($3 + [42])
	*($4 + [116]) = ($3 + [43])
	*($4 + [120]) = ($3 + [44])
	*($4 + [124]) = ($3 + [45])
	*($4 + [128]) = ($3 + [46])
	*($4 + [132]) = ($3 + [47])
	*($4 + [136]) = ($3 + [48])
	*($4 + [140]) = ($3 + [49])
	*($4 + [144]) = ($3 + [50])
	*($4 + [148]) = ($3 + [51])
	*($4 + [152]) = ($3 + [52])
	*($4 + [156]) = ($3 + [53])
	*($4 + [160]) = ($3 + [54])
	*($4 + [164]) = ($3 + [55])
	*($4 + [168]) = ($3 + [56])
	*($4 + [172]) = ($3 + [57])
	*($4 + [176]) = ($3 + [58])
	*($4 + [180]) = ($3 + [59])
	*($4 + [184]) = ($3 + [60])
	*($4 + [188]) = ($3 + [61])
	*($4 + [192]) = ($3 + [62])
	*($4 + [196]) = ($3 + [63])
	*($4 + [200]) = ($3 + [64])
	*($4 + [204]) = ($3 + [65])
	*($4 + [208]) = ($3 + [66])
	*($4 + [212]) = ($3 + [67])
	*($4 + [216]) = ($3 + [68])
	*($4 + [220]) = ($3 + [69])
	*($4 + [224]) = ($3 + [70])
	*($4 + [228]) = ($3 + [71])
	*($4 + [232]) = ($3 + [72])
	*($4 + [236]) = ($3 + [73])
	*($4 + [240]) = ($3 + [74])
	*($4 + [244]) = ($3 + [75])
	*($4 + [248]) = ($3 + [76])
	*($4 + [252]) = ($3 + [77])
	*($4 + [256]) = ($3 + [78])
	*($4 + [260]) = ($3 + [79])
	*($4 + [264]) = ($3 + [80])
	*($4 + [268]) = ($3 + [81])
	CALL $28(($4 + [8]), $4)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [83])
	*($4 + [8]) = ($3 + [82])
	*($4 + [16]) = ($3 + [84])
	*($4 + [20]) = ($3 + [85])
	*($4 + [24]) = ($3 + [86])
	*($4 + [28]) = ($3 + [87])
	*($4 + [32]) = ($3 + [88])
	*($4 + [36]) = ($3 + [89])
	*($4 + [40]) = ($3 + [90])
	*($4 + [44]) = ($3 + [91])
	*($4 + [48]) = ($3 + [92])
	*($4 + [52]) = ($3 + [93])
	*($4 + [56]) = ($3 + [94])
	*($4 + [60]) = ($3 + [95])
	*($4 + [64]) = ($3 + [96])
	*($4 + [68]) = ($3 + [97])
	*($4 + [72]) = ($3 + [98])
	*($4 + [76]) = ($3 + [99])
	*($4 + [80]) = ($3 + [100])
	*($4 + [84]) = ($3 + [101])
	*($4 + [88]) = ($3 + [102])
	*($4 + [92]) = ($3 + [103])
	*($4 + [96]) = ($3 + [104])
	*($4 + [100]) = ($3 + [105])
	*($4 + [104]) = ($3 + [106])
	*($4 + [108]) = ($3 + [107])
	*($4 + [112]) = ($3 + [108])
	*($4 + [116]) = ($3 + [109])
	*($4 + [120]) = ($3 + [110])
	*($4 + [124]) = ($3 + [111])
	*($4 + [128]) = ($3 + [112])
	*($4 + [132]) = ($3 + [113])
	*($4 + [136]) = ($3 + [114])
	*($4 + [140]) = ($3 + [115])
	*($4 + [144]) = ($3 + [116])
	*($4 + [148]) = ($3 + [117])
	*($4 + [152]) = ($3 + [118])
	*($4 + [156]) = ($3 + [119])
	*($4 + [160]) = ($3 + [120])
	*($4 + [164]) = ($3 + [121])
	*($4 + [168]) = ($3 + [122])
	*($4 + [172]) = ($3 + [123])
	*($4 + [176]) = ($3 + [124])
	*($4 + [180]) = ($3 + [125])
	*($4 + [184]) = ($3 + [126])
	*($4 + [188]) = ($3 + [127])
	*($4 + [192]) = ($3 + [128])
	*($4 + [196]) = ($3 + [129])
	*($4 + [200]) = ($3 + [130])
	*($4 + [204]) = ($3 + [131])
	*($4 + [208]) = ($3 + [132])
	*($4 + [212]) = ($3 + [133])
	*($4 + [216]) = ($3 + [134])
	*($4 + [220]) = ($3 + [135])
	*($4 + [224]) = ($3 + [136])
	*($4 + [228]) = ($3 + [137])
	*($4 + [232]) = ($3 + [138])
	*($4 + [236]) = ($3 + [139])
	*($4 + [240]) = ($3 + [140])
	*($4 + [244]) = ($3 + [141])
	*($4 + [248]) = ($3 + [142])
	*($4 + [252]) = ($3 + [143])
	*($4 + [256]) = ($3 + [144])
	*($4 + [260]) = ($3 + [145])
	*($4 + [264]) = ($3 + [146])
	*($4 + [268]) = ($3 + [147])
	CALL $28(($4 + [8]), $4)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [149])
	*($4 + [8]) = ($3 + [148])
	*($4 + [16]) = ($3 + [150])
	*($4 + [20]) = ($3 + [151])
	*($4 + [24]) = ($3 + [152])
	*($4 + [28]) = ($3 + [153])
	*($4 + [32]) = ($3 + [154])
	*($4 + [36]) = ($3 + [155])
	*($4 + [40]) = ($3 + [156])
	*($4 + [44]) = ($3 + [157])
	*($4 + [48]) = ($3 + [158])
	*($4 + [52]) = ($3 + [159])
	*($4 + [56]) = ($3 + [160])
	*($4 + [60]) = ($3 + [161])
	*($4 + [64]) = ($3 + [162])
	*($4 + [68]) = ($3 + [163])
	*($4 + [72]) = ($3 + [164])
	*($4 + [76]) = ($3 + [165])
	*($4 + [80]) = ($3 + [166])
	*($4 + [84]) = ($3 + [167])
	*($4 + [88]) = ($3 + [168])
	*($4 + [92]) = ($3 + [169])
	*($4 + [96]) = ($3 + [170])
	*($4 + [100]) = ($3 + [171])
	*($4 + [104]) = ($3 + [172])
	*($4 + [108]) = ($3 + [173])
	*($4 + [112]) = ($3 + [174])
	*($4 + [116]) = ($3 + [175])
	*($4 + [120]) = ($3 + [176])
	*($4 + [124]) = ($3 + [177])
	*($4 + [128]) = ($3 + [178])
	*($4 + [132]) = ($3 + [179])
	*($4 + [136]) = ($3 + [180])
	*($4 + [140]) = ($3 + [181])
	*($4 + [144]) = ($3 + [182])
	*($4 + [148]) = ($3 + [183])
	*($4 + [152]) = ($3 + [184])
	*($4 + [156]) = ($3 + [185])
	*($4 + [160]) = ($3 + [186])
	*($4 + [164]) = ($3 + [187])
	*($4 + [168]) = ($3 + [188])
	*($4 + [172]) = ($3 + [189])
	*($4 + [176]) = ($3 + [190])
	*($4 + [180]) = ($3 + [191])
	*($4 + [184]) = ($3 + [192])
	*($4 + [188]) = ($3 + [193])
	*($4 + [192]) = ($3 + [194])
	*($4 + [196]) = ($3 + [195])
	*($4 + [200]) = ($3 + [196])
	*($4 + [204]) = ($3 + [197])
	*($4 + [208]) = ($3 + [198])
	*($4 + [212]) = ($3 + [199])
	*($4 + [216]) = ($3 + [200])
	*($4 + [220]) = ($3 + [201])
	*($4 + [224]) = ($3 + [202])
	*($4 + [228]) = ($3 + [203])
	*($4 + [232]) = ($3 + [204])
	*($4 + [236]) = ($3 + [205])
	*($4 + [240]) = ($3 + [206])
	*($4 + [244]) = ($3 + [207])
	*($4 + [248]) = ($3 + [208])
	*($4 + [252]) = ($3 + [209])
	*($4 + [256]) = ($3 + [210])
	*($4 + [260]) = ($3 + [211])
	*($4 + [264]) = ($3 + [212])
	*($4 + [268]) = ($3 + [213])
	CALL $28(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [272])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [1056])
	$9 = $10
	*([0] + [4]) = $10
	$4 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $5)
	
.LABEL $label$1
	*($9 + [216]) = (int_64)0
	*($9 + [208]) = (int_64)0
	$10 = CALL memset(($9 + [224]), [0], [66])
	$2 = CALL memset(($9 + [290]), [0], [66])
	$3 = CALL memset(($9 + [356]), [0], [66])
	*($9 + [988]) = $1
	*($9 + [984]) = $1
	*($9 + [992]) = ($1 + $5)
	*($9 + [840]) = ($9 + [984])
	*($9 + [912]) = ($9 + [208])
	CALL $27(($9 + [912]), ($9 + [840]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$7 = *(($9 + [216]))
	$6 = *($9 + [208])
	CALL memcpy(($9 + [558]), $10, [66])
	CALL memcpy(($9 + [492]), $2, [66])
	CALL memcpy(($9 + [426]), $3, [66])
	CALL memcpy(($9 + [768]), ($9 + [426]), [66])
	CALL memcpy(($9 + [696]), ($9 + [492]), [66])
	CALL memcpy(($9 + [624]), ($9 + [558]), [66])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$8 = *((*($1) + $8))
	
.LABEL $label$5
	CALL memcpy(($9 + [984]), ($9 + [624]), [66])
	CALL memcpy(($9 + [912]), ($9 + [696]), [66])
	CALL memcpy(($9 + [840]), ($9 + [768]), [66])
	CALL memcpy(($9 + [142]), ($9 + [984]), [66])
	CALL memcpy(($9 + [76]), ($9 + [912]), [66])
	CALL memcpy(($9 + [10]), ($9 + [840]), [66])
	CALL void $1((int_32 $6), (int_64 $7), (int_64 ($9 + [142])), (int_32 ($9 + [76])), (int_32 ($9 + [10])), (int_32 $8))
	*([0] + [4]) = ($9 + [1056])
	return [1]
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[80])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[53687092]) ){ goto $label$2 }
	$5 = [53687091]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[80])
	if ( ((uint_32)$6 > (uint_32)[26843544]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $91(((int_32)$5 * (int_32)[80]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[80]))
	$2 = CALL memcpy($6, $1, [64])
	CALL $99(($2 + [64]), ($1 + [64]))
	$3 = ($4 + ((int_32)$5 * (int_32)[80]))
	$2 = ($2 + [80])
	$5 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$4 = ([0] - $5)
	$5 = ($1 + [-16])
	
.LOOP $label$7:
	CALL memcpy(($6 + [-80]), ($5 + [-64]), [64])
	$1 = ($5 + [8])
	*(($6 + [-8])) = *($1)
	*(($6 + [-16])) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($1) = [0]
	$6 = ($6 + [-80])
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $4) != (int_32)[-16]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $2
	*(($0 + [8])) = $3
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$6 = ([0] - $1)
	$5 = ($5 + [-16])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $92(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $92($1)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[80]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [512])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $65($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $13($0, ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *($1 + [16])) / (int_32)[80]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [512])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $65($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[80])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[80])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-80])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[80])
	$7 = ($1 + ((int_32)$4 * (int_32)[80]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = CALL memcpy($6, $1, [64])
	CALL $94(($6 + [64]), ($1 + [64]))
	$6 = ($6 + [80])
	$1 = ($1 + [80])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $99((CALL $fimport$12($6, $7, [64]) + [64]), ($7 + [64]))
	$6 = (*($1) + [80])
	*($1) = $6
	$7 = ($7 + [80])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $92($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[53687092]) ){ goto $label$1 }
	$6 = [53687091]
	$7 = ((int_32)$7 / (int_32)[80])
	if ( ((uint_32)$7 > (uint_32)[26843544]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[80])
	$6 = CALL $91($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $99((CALL $fimport$12($6, $1, [64]) + [64]), ($1 + [64]))
	$6 = (*($7) + [80])
	*($7) = $6
	$1 = ($1 + [80])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $98($0)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*(*($6) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($6) + [4]) + [8])
	*($1 + [16]) = *(*($6 + [4]))
	$5 = [24]
	$6 = *(*($6) + [4])
	$3 = ($6 + [16])
	$4 = ($1 + [24])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	CALL $67($4, *($3), *(($6 + [20])))
	
.LABEL $label$1
	$6 = *($4)
	$3 = *(($1 + [28]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[80]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = *($6 + [64])
	$4 = ( *(($6 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$5 = (($4 + $5) + [60])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	$6 = ($6 + [80])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$7 }
	$6 = CALL malloc($5)
	goto $label$6 
	
.LABEL $label$7
	$6 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $5)
	CALL $68($8, $1)
	$7 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460585484288, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$6 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL $99((CALL $fimport$12($4, $6, [64]) + [64]), ($6 + [64]))
	*($5) = (*($5) + [80])
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($3 + [16]), $6)
	
.LABEL $label$1
	CALL eosio_assert([1], [448])
	$6 = *($1 + [16])
	$4 = *(($1 + [20]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($4 - $6) / (int_32)[80]))
	$3 = [16]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = *($6 + [64])
	$5 = ( *(($6 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [60])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$6 = ($6 + [80])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$8 }
	$6 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$6 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$7
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $3)
	CALL $64($8, $1)
	CALL db_update_i64(*($1 + [32]), $2, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$10 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [560])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	CALL db_get_i64($1, $5, $4)
	*($7 + [36]) = $5
	*($7 + [32]) = $5
	$6 = ($5 + $4)
	*($7 + [40]) = $6
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($5)
	$6 = *(($7 + [40]))
	$5 = *($7 + [36])
	
.LABEL $label$7
	*(($4 = CALL $91([40])) + [24]) = [0]
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $5) > (uint_32)[7]), [592])
	CALL memcpy($4, $5, [8])
	$3 = ($5 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [592])
	CALL memcpy(($4 + [8]), $3, [8])
	*($7 + [36]) = ($5 + [16])
	CALL $40(($7 + [32]), ($4 + [16]))
	*($4 + [32]) = $1
	*($7 + [24]) = $4
	*($7 + [16]) = (int_64)1
	$6 = *($4 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $6
	*($7 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$1 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [20])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$12 }
	$6 = ([0] - $3)
	$5 = ($5 + [-16])
	
.LOOP $label$13:
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($5 + [8])))
	
.LABEL $label$14
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$13 }
	$5 = *(($1 + [16]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $92($5)
	
.LABEL $label$10
	CALL $92($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $4
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	*($1) = ((int_64)*($1) + (int_64)1)
	$4 = *($1 + [16])
	$5 = ($1 + [20])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$7 = ([0] - $4)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $7) != (int_32)[-16]) ){ goto $label$2 }
	
.LABEL $label$1
	*($5) = $4
	CALL eosio_assert([1], [448])
	$7 = *($1 + [16])
	$4 = *($5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)($4 - $7) / (int_32)[80]))
	$6 = [16]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = *($7 + [64])
	$5 = ( *(($7 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [60])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [80])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$9 }
	$7 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$8
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = ($7 + $6)
	CALL $64($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$11 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [112])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $91([48])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [36]) = $1
	CALL $66(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [40])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $39(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [28])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$3 = ($3 + [-16])
	
.LOOP $label$7:
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($3 + [8])))
	
.LABEL $label$8
	$3 = ($3 + [-80])
	if ( ((int_32)($3 + $1) != (int_32)[-16]) ){ goto $label$7 }
	$3 = *(($0 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $92($3)
	
.LABEL $label$4
	CALL $92($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $102 ()
{
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10326]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10328])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10326]) = [1]
	$7 = ($7 << [16])
	*([0] + [10328]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10328])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10328]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10326]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10326]) = [1]
	$3 = ($3 << [16])
	*([0] + [10328]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10328])
	
.LABEL $label$8
	*([0] + [10328]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $89($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10240])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $88([1844], $0)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1 + [8]) = (int_64)1
	*($1) = ((int_64)*(*($6) + [24]) + (int_64)1)
	$2 = *($0)
	$3 = *($1 + [16])
	$5 = $3
	$4 = ($1 + [20])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$5 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $5) != (int_32)[-16]) ){ goto $label$2 }
	$5 = *($1 + [16])
	
.LABEL $label$1
	*($4) = $3
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[80]))
	$6 = [16]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = *($5 + [64])
	$4 = ( *(($5 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = (($4 + $6) + [60])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [80])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$9 }
	$5 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$5 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$8
	*($8 + [4]) = $5
	*($8) = $5
	*($8 + [8]) = ($5 + $6)
	CALL $75($8, $1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176370890153132032, *(*($0 + [8])), (int_64)1, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($5)
	
.LABEL $label$10
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$11 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$11
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1 + [8]) = (int_64)2
	*($1) = ((int_64)((int_64)*(*($6) + [24]) << (int_64)1) | (int_64)1)
	$2 = *($0)
	$3 = *($1 + [16])
	$5 = $3
	$4 = ($1 + [20])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$5 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $5) != (int_32)[-16]) ){ goto $label$2 }
	$5 = *($1 + [16])
	
.LABEL $label$1
	*($4) = $3
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[80]))
	$6 = [16]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = *($5 + [64])
	$4 = ( *(($5 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = (($4 + $6) + [60])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [80])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$9 }
	$5 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$5 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$8
	*($8 + [4]) = $5
	*($8) = $5
	*($8 + [8]) = ($5 + $6)
	CALL $71($8, $1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176370890153656320, *(*($0 + [8])), (int_64)1, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($5)
	
.LABEL $label$10
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$11 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$11
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1 + [8]) = (int_64)3
	*($1) = ((int_64)((int_64)*(*($6) + [24]) * (int_64)3) + (int_64)1)
	$2 = *($0)
	$3 = *($1 + [16])
	$5 = $3
	$4 = ($1 + [20])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$5 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $5) != (int_32)[-16]) ){ goto $label$2 }
	$5 = *($1 + [16])
	
.LABEL $label$1
	*($4) = $3
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[80]))
	$6 = [16]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = *($5 + [64])
	$4 = ( *(($5 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = (($4 + $6) + [60])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [80])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$9 }
	$5 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$5 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$8
	*($8 + [4]) = $5
	*($8) = $5
	*($8 + [8]) = ($5 + $6)
	CALL $64($8, $1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176370890154180608, *(*($0 + [8])), (int_64)1, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($5)
	
.LABEL $label$10
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$11 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$11
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [112])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $91([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $84(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)1
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $70(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [20])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-16])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $3) != (int_32)[-16]) ){ goto $label$7 }
	$1 = *(($0 + [16]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $92($1)
	
.LABEL $label$4
	CALL $92($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [112])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $91([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $85(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)1
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [20])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-16])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $3) != (int_32)[-16]) ){ goto $label$7 }
	$1 = *(($0 + [16]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $92($1)
	
.LABEL $label$4
	CALL $92($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [112])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $91([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $86(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)1
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $78(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [20])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-16])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $3) != (int_32)[-16]) ){ goto $label$7 }
	$1 = *(($0 + [16]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $92($1)
	
.LABEL $label$4
	CALL $92($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $14(*($1), *($0 + [12]))
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*(*($6) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($6) + [4]) + [8])
	*($1 + [16]) = *(*($6 + [4]))
	$5 = [24]
	$6 = *(*($6) + [4])
	$3 = ($6 + [16])
	$4 = ($1 + [24])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	CALL $67($4, *($3), *(($6 + [20])))
	
.LABEL $label$1
	$6 = *($4)
	$3 = *(($1 + [28]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[80]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = *($6 + [64])
	$4 = ( *(($6 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$5 = (($4 + $5) + [60])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	$6 = ($6 + [80])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$7 }
	$6 = CALL malloc($5)
	goto $label$6 
	
.LABEL $label$7
	$6 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $5)
	CALL $73($8, $1)
	$7 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460584960000, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[80]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [512])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $65($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [20])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [16]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $92($7)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *($1 + [16])) / (int_32)[80]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [512])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $65($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*(*($6) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($6) + [4]) + [8])
	*($1 + [16]) = *(*($6 + [4]))
	$5 = [24]
	$6 = *(*($6) + [4])
	$3 = ($6 + [16])
	$4 = ($1 + [24])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	CALL $67($4, *($3), *(($6 + [20])))
	
.LABEL $label$1
	$6 = *($4)
	$3 = *(($1 + [28]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[80]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = *($6 + [64])
	$4 = ( *(($6 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$5 = (($4 + $5) + [60])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	$6 = ($6 + [80])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$7 }
	$6 = CALL malloc($5)
	goto $label$6 
	
.LABEL $label$7
	$6 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $5)
	CALL $77($8, $1)
	$7 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460584435712, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[80]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [512])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $65($0, $4)
	$4 = ($4 + [80])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [20])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [16]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $92($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [28])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $92($7)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $91([48])
	$7 = CALL $38($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$1 = *($6 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $1
	*($8 + [24]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [28])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$4 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $92(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$13 }
	$6 = *(($1 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $92($6)
	
.LABEL $label$10
	CALL $92($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [1168])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1216])
	$4 = *($0 + [24])
	$5 = ($0 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$2 = *($1)
	$8 = ([0] - $4)
	$10 = ($9 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [1280])
	$8 = ($9 + [-24])
	$3 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = *($9)
	*($9) = [0]
	$4 = *($8)
	*($8) = $10
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($4 + [28])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$10 = ($10 + [-16])
	
.LOOP $label$10:
	if ( ((*($10) & [1]) == 0) ){ goto $label$11 }
	CALL $92(*(($10 + [8])))
	
.LABEL $label$11
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $6) != (int_32)[-16]) ){ goto $label$10 }
	$10 = *(($4 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$10 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $92($10)
	
.LABEL $label$7
	CALL $92($4)
	
.LABEL $label$6
	*($8 + [8]) = *($9 + [8])
	*(($8 + [16])) = *(($9 + [16]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$12:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$14 }
	$3 = ($4 + [28])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	$6 = ([0] - $5)
	$10 = ($10 + [-16])
	
.LOOP $label$17:
	if ( ((*($10) & [1]) == 0) ){ goto $label$18 }
	CALL $92(*(($10 + [8])))
	
.LABEL $label$18
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $6) != (int_32)[-16]) ){ goto $label$17 }
	$10 = *(($4 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$10 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL $92($10)
	
.LABEL $label$14
	CALL $92($4)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$12 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [20])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [16]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $92($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [768])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [832])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $80(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $91([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [40])
	$1 = ( *(($4 + [44])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [40])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $16($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $47(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [512])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [512])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $46(CALL $45($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [144])
	*([0] + [4]) = $18
	CALL eosio_assert([1], [768])
	$6 = (Rounds 0)(((float_64)$10 * (float_64)(float_64)0.4))
	$10 = (CASTING float_64)(uint_64 $1)
	$5 = (Rounds 0)(((float_64)$10 * (float_64)(float_64)0.1))
	$4 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $1) * (float_64)(float_64)0.05))
	$3 = (Rounds 0)(((float_64)$10 * (float_64)(float_64)0.35))
	$2 = (Rounds 0)(((float_64)$10 * (float_64)(float_64)0.25))
	$1 = (int_64)
	$7 = (int_64))((int_64))($1($1((int_64))($1 - $2) - $3)) - $4)) - $5) - $6)
	$1 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [832])
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$9 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$11 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$8 = ($8 + [165])
	goto $label$9 
	
.LABEL $label$11
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$7
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$9 = ((int_64)$14 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$6 }
	$16 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$17 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [165])
	goto $label$15 
	
.LABEL $label$17
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$13
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$12 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$23 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [165])
	goto $label$21 
	
.LABEL $label$23
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$19
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$18 }
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [640]
	$16 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$29 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$8 = ($8 + [165])
	goto $label$27 
	
.LABEL $label$29
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$25
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$24 }
	$1 = (int_64)0
	$14 = (int_64)59
	$12 = [1344]
	$17 = (int_64)0
	
.LOOP $label$30:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$31 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$8 = ($8 + [165])
	goto $label$32 
	
.LABEL $label$33
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$31
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$30 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$12 = CALL strlen([1360])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$37 }
	*($18) = ($12 << [1])
	$8 = ($18 | [1])
	if ( $12 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$11 = (($12 + [16]) & [-16])
	$8 = CALL $91($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $8
	*($18 + [4]) = $12
	
.LABEL $label$36
	CALL memcpy($8, [1360], $12)
	
.LABEL $label$35
	*(($8 + $12)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*(($18 + [48])) = $9
	*($18 + [24]) = $17
	$12 = ($18 + [8])
	*(($18 + [64])) = *($12)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $2
	*($18 + [56]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($12) = [0]
	$12 = CALL $32(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $33(($18 + [128]), $12)
	$8 = *($18 + [128])
	CALL send_inline($8, (*($18 + [132]) - $8))
	$8 = *($18 + [128])
	if ( ($8 == 0) ){ goto $label$38 }
	*($18 + [132]) = $8
	CALL $92($8)
	
.LABEL $label$38
	$8 = *($12 + [28])
	if ( ($8 == 0) ){ goto $label$39 }
	*(($12 + [32])) = $8
	CALL $92($8)
	
.LABEL $label$39
	$8 = *($12 + [16])
	if ( ($8 == 0) ){ goto $label$40 }
	*(($12 + [20])) = $8
	CALL $92($8)
	
.LABEL $label$40
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$41 }
	CALL $92(*(($18 + [64])))
	
.LABEL $label$41
	if ( ((*($18) & [1]) == 0) ){ goto $label$42 }
	CALL $92(*(($18 + [8])))
	
.LABEL $label$42
	$16 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$48 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$8 = ($8 + [165])
	goto $label$46 
	
.LABEL $label$48
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$44
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$43 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$54 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$8 = ($8 + [165])
	goto $label$52 
	
.LABEL $label$54
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$50
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$49 }
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [640]
	$16 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$60 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$8 = ($8 + [165])
	goto $label$58 
	
.LABEL $label$60
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$56
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$55 }
	$1 = (int_64)0
	$14 = (int_64)59
	$12 = [1408]
	$17 = (int_64)0
	
.LOOP $label$61:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$62 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$8 = ($8 + [165])
	goto $label$63 
	
.LABEL $label$64
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$62
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$61 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$12 = CALL strlen([1424])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$67 }
	*($18) = ($12 << [1])
	$8 = ($18 | [1])
	if ( $12 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$11 = (($12 + [16]) & [-16])
	$8 = CALL $91($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $8
	*($18 + [4]) = $12
	
.LABEL $label$66
	CALL memcpy($8, [1424], $12)
	
.LABEL $label$65
	*(($8 + $12)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*(($18 + [48])) = $9
	*($18 + [24]) = $17
	$12 = ($18 + [8])
	*(($18 + [64])) = *($12)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $5
	*($18 + [56]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($12) = [0]
	$12 = CALL $32(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $33(($18 + [128]), $12)
	$8 = *($18 + [128])
	CALL send_inline($8, (*($18 + [132]) - $8))
	$8 = *($18 + [128])
	if ( ($8 == 0) ){ goto $label$68 }
	*($18 + [132]) = $8
	CALL $92($8)
	
.LABEL $label$68
	$8 = *($12 + [28])
	if ( ($8 == 0) ){ goto $label$69 }
	*(($12 + [32])) = $8
	CALL $92($8)
	
.LABEL $label$69
	$8 = *($12 + [16])
	if ( ($8 == 0) ){ goto $label$70 }
	*(($12 + [20])) = $8
	CALL $92($8)
	
.LABEL $label$70
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$71 }
	CALL $92(*(($18 + [64])))
	
.LABEL $label$71
	if ( ((*($18) & [1]) == 0) ){ goto $label$72 }
	CALL $92(*(($18 + [8])))
	
.LABEL $label$72
	$16 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$78 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$8 = ($8 + [165])
	goto $label$76 
	
.LABEL $label$78
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$74
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$73 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$84 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$8 = ($8 + [165])
	goto $label$82 
	
.LABEL $label$84
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$80
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$79 }
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [640]
	$16 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$90 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$8 = ($8 + [165])
	goto $label$88 
	
.LABEL $label$90
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$86
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$85 }
	$1 = (int_64)0
	$14 = (int_64)59
	$12 = [1472]
	$17 = (int_64)0
	
.LOOP $label$91:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$92 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$8 = ($8 + [165])
	goto $label$93 
	
.LABEL $label$94
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$92
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$91 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$12 = CALL strlen([1488])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$97 }
	*($18) = ($12 << [1])
	$8 = ($18 | [1])
	if ( $12 ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$11 = (($12 + [16]) & [-16])
	$8 = CALL $91($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $8
	*($18 + [4]) = $12
	
.LABEL $label$96
	CALL memcpy($8, [1488], $12)
	
.LABEL $label$95
	*(($8 + $12)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*(($18 + [48])) = $9
	*($18 + [24]) = $17
	$12 = ($18 + [8])
	*(($18 + [64])) = *($12)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $7
	*($18 + [56]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($12) = [0]
	$12 = CALL $32(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $33(($18 + [128]), $12)
	$8 = *($18 + [128])
	CALL send_inline($8, (*($18 + [132]) - $8))
	$8 = *($18 + [128])
	if ( ($8 == 0) ){ goto $label$98 }
	*($18 + [132]) = $8
	CALL $92($8)
	
.LABEL $label$98
	$8 = *($12 + [28])
	if ( ($8 == 0) ){ goto $label$99 }
	*(($12 + [32])) = $8
	CALL $92($8)
	
.LABEL $label$99
	$8 = *($12 + [16])
	if ( ($8 == 0) ){ goto $label$100 }
	*(($12 + [20])) = $8
	CALL $92($8)
	
.LABEL $label$100
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$101 }
	CALL $92(*(($18 + [64])))
	
.LABEL $label$101
	if ( ((*($18) & [1]) == 0) ){ goto $label$102 }
	CALL $92(*(($18 + [8])))
	
.LABEL $label$102
	$16 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$103:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$108 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$8 = ($8 + [165])
	goto $label$106 
	
.LABEL $label$108
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$105
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$104
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$103 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$109:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$114 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$8 = ($8 + [165])
	goto $label$112 
	
.LABEL $label$114
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$113
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$111
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$110
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$109 }
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [640]
	$16 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$120 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$8 = ($8 + [165])
	goto $label$118 
	
.LABEL $label$120
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$116
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$115 }
	$1 = (int_64)0
	$14 = (int_64)59
	$12 = [1536]
	$17 = (int_64)0
	
.LOOP $label$121:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$122 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$8 = ($8 + [165])
	goto $label$123 
	
.LABEL $label$124
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$122
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$121 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$12 = CALL strlen([1552])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$127 }
	*($18) = ($12 << [1])
	$8 = ($18 | [1])
	if ( $12 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$11 = (($12 + [16]) & [-16])
	$8 = CALL $91($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $8
	*($18 + [4]) = $12
	
.LABEL $label$126
	CALL memcpy($8, [1552], $12)
	
.LABEL $label$125
	*(($8 + $12)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*(($18 + [48])) = $9
	*($18 + [24]) = $17
	$12 = ($18 + [8])
	*(($18 + [64])) = *($12)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $6
	*($18 + [56]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($12) = [0]
	$12 = CALL $32(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $33(($18 + [128]), $12)
	$8 = *($18 + [128])
	CALL send_inline($8, (*($18 + [132]) - $8))
	$8 = *($18 + [128])
	if ( ($8 == 0) ){ goto $label$128 }
	*($18 + [132]) = $8
	CALL $92($8)
	
.LABEL $label$128
	$8 = *($12 + [28])
	if ( ($8 == 0) ){ goto $label$129 }
	*(($12 + [32])) = $8
	CALL $92($8)
	
.LABEL $label$129
	$8 = *($12 + [16])
	if ( ($8 == 0) ){ goto $label$130 }
	*(($12 + [20])) = $8
	CALL $92($8)
	
.LABEL $label$130
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$131 }
	CALL $92(*(($18 + [64])))
	
.LABEL $label$131
	if ( ((*($18) & [1]) == 0) ){ goto $label$132 }
	CALL $92(*(($18 + [8])))
	
.LABEL $label$132
	$16 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$133:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$138 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$137 }
	$8 = ($8 + [165])
	goto $label$136 
	
.LABEL $label$138
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$137
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$136
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$135
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$134
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$133 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$139:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$144 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$143 }
	$8 = ($8 + [165])
	goto $label$142 
	
.LABEL $label$144
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$143
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$142
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$141
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$140
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$139 }
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [640]
	$16 = (int_64)0
	
.LOOP $label$145:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$150 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$149 }
	$8 = ($8 + [165])
	goto $label$148 
	
.LABEL $label$150
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$147 }
	goto $label$146 
	
.LABEL $label$149
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$148
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$147
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$146
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$145 }
	$1 = (int_64)0
	$14 = (int_64)59
	$12 = [1600]
	$17 = (int_64)0
	
.LOOP $label$151:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$152 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$154 }
	$8 = ($8 + [165])
	goto $label$153 
	
.LABEL $label$154
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$153
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$152
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$151 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$12 = CALL strlen([1616])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$157 }
	*($18) = ($12 << [1])
	$8 = ($18 | [1])
	if ( $12 ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$157
	$11 = (($12 + [16]) & [-16])
	$8 = CALL $91($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $8
	*($18 + [4]) = $12
	
.LABEL $label$156
	CALL memcpy($8, [1616], $12)
	
.LABEL $label$155
	*(($8 + $12)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*(($18 + [48])) = $9
	*($18 + [24]) = $17
	$12 = ($18 + [8])
	*(($18 + [64])) = *($12)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $4
	*($18 + [56]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($12) = [0]
	$12 = CALL $32(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $33(($18 + [128]), $12)
	$8 = *($18 + [128])
	CALL send_inline($8, (*($18 + [132]) - $8))
	$8 = *($18 + [128])
	if ( ($8 == 0) ){ goto $label$158 }
	*($18 + [132]) = $8
	CALL $92($8)
	
.LABEL $label$158
	$8 = *($12 + [28])
	if ( ($8 == 0) ){ goto $label$159 }
	*(($12 + [32])) = $8
	CALL $92($8)
	
.LABEL $label$159
	$8 = *($12 + [16])
	if ( ($8 == 0) ){ goto $label$160 }
	*(($12 + [20])) = $8
	CALL $92($8)
	
.LABEL $label$160
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$161 }
	CALL $92(*(($18 + [64])))
	
.LABEL $label$161
	if ( ((*($18) & [1]) == 0) ){ goto $label$162 }
	CALL $92(*(($18 + [8])))
	
.LABEL $label$162
	$16 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$163:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$168 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$167 }
	$8 = ($8 + [165])
	goto $label$166 
	
.LABEL $label$168
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$165 }
	goto $label$164 
	
.LABEL $label$167
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$166
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$165
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$164
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$163 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$169:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$174 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$173 }
	$8 = ($8 + [165])
	goto $label$172 
	
.LABEL $label$174
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$173
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$172
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$171
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$170
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$169 }
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [640]
	$16 = (int_64)0
	
.LOOP $label$175:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$180 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$179 }
	$8 = ($8 + [165])
	goto $label$178 
	
.LABEL $label$180
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$179
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$178
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$177
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$176
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$175 }
	$1 = (int_64)0
	$14 = (int_64)59
	$12 = [1664]
	$17 = (int_64)0
	
.LOOP $label$181:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$182 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$184 }
	$8 = ($8 + [165])
	goto $label$183 
	
.LABEL $label$184
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$183
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$182
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$181 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$12 = CALL strlen([1552])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$187 }
	*($18) = ($12 << [1])
	$8 = ($18 | [1])
	if ( $12 ){ goto $label$186 }
	goto $label$185 
	
.LABEL $label$187
	$11 = (($12 + [16]) & [-16])
	$8 = CALL $91($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $8
	*($18 + [4]) = $12
	
.LABEL $label$186
	CALL memcpy($8, [1552], $12)
	
.LABEL $label$185
	*(($8 + $12)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*(($18 + [48])) = $9
	*($18 + [24]) = $17
	$12 = ($18 + [8])
	*(($18 + [64])) = *($12)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $3
	*($18 + [56]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($12) = [0]
	$12 = CALL $32(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $33(($18 + [128]), $12)
	$8 = *($18 + [128])
	CALL send_inline($8, (*($18 + [132]) - $8))
	$8 = *($18 + [128])
	if ( ($8 == 0) ){ goto $label$188 }
	*($18 + [132]) = $8
	CALL $92($8)
	
.LABEL $label$188
	$8 = *($12 + [28])
	if ( ($8 == 0) ){ goto $label$189 }
	*(($12 + [32])) = $8
	CALL $92($8)
	
.LABEL $label$189
	$8 = *($12 + [16])
	if ( ($8 == 0) ){ goto $label$190 }
	*(($12 + [20])) = $8
	CALL $92($8)
	
.LABEL $label$190
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$191 }
	CALL $92(*(($18 + [64])))
	
.LABEL $label$191
	if ( ((*($18) & [1]) == 0) ){ goto $label$192 }
	CALL $92(*(($18 + [8])))
	
.LABEL $label$192
	*([0] + [4]) = ($18 + [144])
	return (unreachable)
	
.LABEL $label$34
	CALL $93($18)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [1168])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1216])
	$4 = *($0 + [24])
	$5 = ($0 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$2 = *($1)
	$8 = ([0] - $4)
	$10 = ($9 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [1280])
	$8 = ($9 + [-24])
	$3 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = *($9)
	*($9) = [0]
	$4 = *($8)
	*($8) = $10
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($4 + [28])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$10 = ($10 + [-16])
	
.LOOP $label$10:
	if ( ((*($10) & [1]) == 0) ){ goto $label$11 }
	CALL $92(*(($10 + [8])))
	
.LABEL $label$11
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $6) != (int_32)[-16]) ){ goto $label$10 }
	$10 = *(($4 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$10 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $92($10)
	
.LABEL $label$7
	CALL $92($4)
	
.LABEL $label$6
	*($8 + [8]) = *($9 + [8])
	*(($8 + [16])) = *(($9 + [16]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$12:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$14 }
	$3 = ($4 + [28])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	$6 = ([0] - $5)
	$10 = ($10 + [-16])
	
.LOOP $label$17:
	if ( ((*($10) & [1]) == 0) ){ goto $label$18 }
	CALL $92(*(($10 + [8])))
	
.LABEL $label$18
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $6) != (int_32)[-16]) ){ goto $label$17 }
	$10 = *(($4 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$10 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL $92($10)
	
.LABEL $label$14
	CALL $92($4)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$12 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}