(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "ha2domrygege\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8303) "[Eos21.com] System not configured / \e7\b3\bb\e7\bb\9f\e6\9c\aa\e9\85\8d\e7\bd\ae\00")
(data (i32.const 8355) "[Eos21.com] Staked system is not turned on / \e8\b4\a8\e6\8a\bc\e7\b3\bb\e7\bb\9f\e6\9c\aa\e5\bc\80\e5\90\af\00")
(data (i32.const 8422) "[Eos21.com]Must be EOS / \e8\bd\ac\e5\85\a5\e5\bf\85\e9\a1\bb\e6\98\afEOS\00")
(data (i32.const 8466) "[Eos21.com]Invalid token transfer / \e8\bd\ac\e8\b4\a6\e9\aa\8c\e8\af\81\e5\a4\b1\e8\b4\a5\00")
(data (i32.const 8521) "[Eos21.com]Quantity must be positive / \e8\bd\ac\e5\85\a5\e9\87\91\e9\a2\9d\e4\b8\8d\e6\ad\a3\e7\a1\ae\00")
(data (i32.const 8582) "buyname.x\00")
(data (i32.const 8592) "\e6\97\a0\e5\8f\af\e7\94\a8\e9\93\b6\e8\a1\8c\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 8614) "transfer\00")
(data (i32.const 8623) "x account staked 1 year\00")
(data (i32.const 8647) "eos21.com\00")
(data (i32.const 8657) "delegatebw\00")
(data (i32.const 8668) "[Eos21.com]Account does not exist / \e8\b4\a6\e5\8f\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 8720) "[Eos21.com]Your account is in the blacklist / \e6\82\a8\e7\9a\84\e8\b4\a6\e5\8f\b7\e5\9c\a8\e9\bb\91\e5\90\8d\e5\8d\95\e4\b8\ad...\00")
(data (i32.const 8797) "[Eos21.com]Enter the wrong amount / \e8\be\93\e5\85\a5\e9\87\91\e9\a2\9d\e9\94\99\e8\af\af...\00")
(data (i32.const 8855) "[Eos21.com]System error / \e6\97\a0\e5\8f\af\e7\94\a8\e9\93\b6\e8\a1\8c\e8\b4\a6\e5\8f\b7...\00")
(data (i32.const 8906) "[Eos21.com] CPU Staked Service .x .y .z Account Offer 49% / Eos21.com CPU\e8\b4\a8\e6\8a\bc\e6\9c\8d\e5\8a\a1 .x .y .z \e8\b4\a6\e5\8f\b7\e8\b4\a8\e6\8a\bc\e4\bc\98\e6\83\a0 49%\00")
(data (i32.const 9024) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9075) "error reading iterator\00")
(data (i32.const 9098) "read\00")
(data (i32.const 9103) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9152) "invalid symbol name\00")
(data (i32.const 9172) "cannot pass end iterator to modify\00")
(data (i32.const 9207) "object passed to modify is not in multi_index\00")
(data (i32.const 9253) "cannot modify objects in table of another contract\00")
(data (i32.const 9304) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9363) "write\00")
(data (i32.const 9369) "cannot create objects in table of another contract\00")
(data (i32.const 9420) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9472) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9526) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9574) "expireorder\00")
(data (i32.const 9588) "x%\00\00")
(data (i32.const 9592) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9625) "multiplication overflow\00")
(data (i32.const 9649) "multiplication underflow\00")
(data (i32.const 9674) "divide by zero\00")
(data (i32.const 9689) "signed division overflow\00")
(data (i32.const 9714) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9773) "\e7\94\a8\e6\88\b7\e5\9c\a8\e9\bb\91\e5\90\8d\e5\8d\95\e4\b8\ad\00")
(data (i32.const 9795) "\e7\b3\bb\e7\bb\9f\e6\9c\aa\e9\85\8d\e7\bd\ae\00")
(data (i32.const 9811) "\e8\b4\a8\e6\8a\bc\e7\b3\bb\e7\bb\9f\e6\9c\aa\e5\bc\80\e5\90\af\00")
(data (i32.const 9833) "\e5\a5\97\e9\a4\90\e4\bf\a1\e6\81\af\e9\94\99\e8\af\af\00")
(data (i32.const 9852) "\e8\b4\a8\e6\8a\bc\e5\90\88\e7\ba\a6\e9\9d\9e\e6\b3\95\e8\b0\83\e7\94\a8\00")
(data (i32.const 9877) "|\00")
(data (i32.const 9879) "undelegatebw\00")
(data (i32.const 9892) "0123456789\00")
(data (i32.const 9903) "cannot pass end iterator to erase\00")
(data (i32.const 9937) "cannot increment end iterator\00")
(data (i32.const 9967) "object passed to erase is not in multi_index\00")
(data (i32.const 10012) "cannot erase objects in table of another contract\00")
(data (i32.const 10062) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10115) "get\00")
(data (i32.const 10119) "\e9\93\b6\e8\a1\8c\e8\b4\a6\e5\8f\b7\e5\b7\b2\e7\bb\8f\e5\ad\98\e5\9c\a8.\00")
(data (i32.const 10145) "manager.x\00")
(data (i32.const 10155) "\e9\9d\9e\e6\b3\95\e8\b0\83\e7\94\a8\00")
(data (i32.const 10168) "\e9\93\b6\e8\a1\8c\e8\b4\a6\e5\8f\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 10190) "\e8\b4\a6\e5\8f\b7\e5\b7\b2\e7\bb\8f\e5\9c\a8\e9\bb\91\e5\90\8d\e5\8d\95\e4\b8\ad\00")
(data (i32.const 10218) "\e8\b4\a6\e5\8f\b7\e6\b2\a1\e6\9c\89\e5\9c\a8\e9\bb\91\e5\90\8d\e5\8d\95\e4\b8\ad\00")
(data (i32.const 10246) "invalid price\00")
(data (i32.const 10260) "invalid cpu\00")
(data (i32.const 10272) "invalid net\00")
(data (i32.const 10284) "price should between 0.01 EOS and 100 EOS\00")
(data (i32.const 10326) "\e5\a5\97\e9\a4\90\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "require_recipient" (func $fimport$2 (param i64)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$6 (param i32 i32)))
(import "env" "prints" (func $fimport$7 (param i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "send_deferred" (func $fimport$12 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$17 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$19 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$21 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "db_idx64_lowerbound" (func $fimport$26 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$28 (param i32)))
(import "env" "db_idx64_next" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $126))
(export "_Znwj" (func $124))
(export "_Znaj" (func $125))
(export "_ZdaPv" (func $127))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18752))
(global $global$2 i32 (i32.const 18752))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9363])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9363])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9363])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9363])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9152])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9152])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9152])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9098])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9098])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9098])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([104])
	$6 = CALL $92($5)
	*($5 + [88]) = $0
	CALL $93(($3 + [32]), $6)
	*($5 + [96]) = [-1]
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $94(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [9152])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [9152])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [9152])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $137($0, $1, $2, CALL $142($2))
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9098])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $68(*($1), *($0 + [12]))
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [8])
	$4 = *($0)
	$5 = *($4 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $25($4, $6)
	*($2 + [4]) = [0]
	*($2) = $4
	$5 = *(*(CALL $116($2) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [9420])
	*($1) = *(($4 + [16]))
	$0 = *($0 + [4])
	*($1 + [8]) = *($0)
	CALL $78($2, $3, *($0), (int_64)5459781)
	*(($1 + [24])) = *(($2 + [8]))
	*($1 + [16]) = *($2)
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9526])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4057297648173261632)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9472])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9472])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $24(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $132($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4057297648173261632, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $24($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $122(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9420])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = $2
	$2 = ($6 + [-32])
	$global$0 = $2
	CALL eosio_assert([1], [9363])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy(($6 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy(($6 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy(($6 + [-8]), ($1 + [24]), [8])
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-4057297648173261632, *(*($0 + [8])), $7, $2, [32])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $132($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $132($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [92]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9526])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6031111549421092864)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9472])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9472])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $91(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $140(($0 + [16]))
	
.LABEL $label$1
	CALL $140(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $146($0)
	
.LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [160]) = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9207])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9253])
	*($4 + [144]) = *($1 + [8])
	*($4 + [152]) = *($1 + [88])
	$5 = *($1)
	*($4 + [136]) = $5
	CALL $78(($4 + [96]), *($3), *(*(*($3 + [4]) + [4]) + [16]), (int_64)5459781)
	*(($1 + [24])) = *(($4 + [104]))
	*($1 + [16]) = *($4 + [96])
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9304])
	*($4 + [128]) = ($4 + [96])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	CALL $79(($4 + [120]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	$3 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [100]) = $1
	*($4 + [96]) = $0
	*($4 + [108]) = $1
	*($4 + [104]) = ($4 + [144])
	*($4 + [112]) = ($4 + [136])
	*($4 + [116]) = ($4 + [160])
	*($4 + [168]) = ($4 + [96])
	CALL $109(($4 + [168]), $3, ($3 + [1]))
	$global$0 = ($4 + [176])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4154295073967702016, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [9024])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $25($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)4154295073967702016, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [9024])
	
.LABEL $label$2
	*(($4 + [104])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([128])
	CALL $69($3)
	*($3 + [104]) = $1
	CALL $72(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [160]) = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9207])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9253])
	*($4 + [144]) = *($1 + [8])
	*($4 + [152]) = *($1 + [88])
	$5 = *($1)
	*($4 + [136]) = $5
	CALL $78(($4 + [96]), *($3), *(*(*($3 + [4]) + [4]) + [8]), (int_64)5459781)
	*(($1 + [24])) = *(($4 + [104]))
	*($1 + [16]) = *($4 + [96])
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9304])
	*($4 + [128]) = ($4 + [96])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	CALL $79(($4 + [120]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	$3 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [100]) = $1
	*($4 + [96]) = $0
	*($4 + [108]) = $1
	*($4 + [104]) = ($4 + [144])
	*($4 + [112]) = ($4 + [136])
	*($4 + [116]) = ($4 + [160])
	*($4 + [168]) = ($4 + [96])
	CALL $102(($4 + [168]), $3, ($3 + [1]))
	$global$0 = ($4 + [176])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $98($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $27($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $99($2, $1)
	CALL $101(CALL $100(CALL $100($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([128])
	$6 = CALL $69($5)
	*($5 + [104]) = $0
	CALL $89(($3 + [32]), $6)
	*($5 + [108]) = $1
	*($5 + [112 align=4]) = (int_64)-1
	*($5 + [120]) = [-1]
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([128])
	CALL $69($3)
	*($3 + [104]) = $1
	CALL $104(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [160]) = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9207])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9253])
	*($4 + [144]) = *($1 + [8])
	*($4 + [152]) = *($1 + [88])
	$5 = *($1)
	*($4 + [136]) = $5
	CALL $78(($4 + [96]), *($3), *(*(*($3 + [4]) + [4]) + [8]), (int_64)5459781)
	*(($1 + [24])) = *(($4 + [104]))
	*($1 + [16]) = *($4 + [96])
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9304])
	*($4 + [128]) = ($4 + [96])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	CALL $79(($4 + [120]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	$3 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [100]) = $1
	*($4 + [96]) = $0
	*($4 + [108]) = $1
	*($4 + [104]) = ($4 + [144])
	*($4 + [112]) = ($4 + [136])
	*($4 + [116]) = ($4 + [160])
	*($4 + [168]) = ($4 + [96])
	CALL $105(($4 + [168]), $3, ($3 + [1]))
	$global$0 = ($4 + [176])
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	CALL require_auth($1)
	$2 = [0]
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$1 }
	CALL require_auth($1)
	$2 = [1]
	
.LABEL $label$1
	$3 = (int_64)0
	$4 = (int_64)59
	$0 = [8582]
	$5 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$3 > (uint_64)(int_64)8) ){ goto $label$7 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$8 }
	$3 = (int_64)0
	$4 = (int_64)59
	$0 = [8582]
	$5 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$3 > (uint_64)(int_64)8) ){ goto $label$14 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$9 }
	CALL require_auth($5)
	$2 = [1]
	
.LABEL $label$8
	$3 = (int_64)7
	
.LOOP $label$15:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)5372695414975758336 != (int_64)$1) ){ goto $label$16 }
	$3 = (int_64)7
	
.LOOP $label$17:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$17 }
	CALL require_auth((int_64)5372695414975758336)
	return 
	
.LABEL $label$16
	if ( $2 ){ goto $label$18 }
	CALL eosio_assert([0], [9852])
	
.LABEL $label$18
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $143($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10344])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $143($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $128 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	$1 = CALL $59($0)
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	*($2 + [16]) = $2
	*($2 + [28]) = ($1 + [8])
	*($2 + [24]) = $1
	*($2 + [32]) = ($1 + [24])
	*($2 + [36]) = ($1 + [40])
	*($2 + [40]) = ($1 + [56])
	CALL $60(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$6 = ($global$0 - [192])
	$global$0 = $6
	*($6 + [184]) = $5
	CALL $53($0, $1)
	$7 = *(($2 + [8]))
	*((($6 + [168]) + [8])) = $7
	$8 = *(($3 + [8]))
	*((($6 + [152]) + [8])) = $8
	$1 = *(($4 + [8]))
	$5 = *($3)
	$9 = *($4)
	$10 = *($2)
	*((($6 + [40]) + [8])) = $7
	*((($6 + [24]) + [8])) = $8
	*((($6 + [136]) + [8])) = $1
	*((($6 + [8]) + [8])) = $1
	*($6 + [168]) = $10
	*($6 + [136]) = $9
	*($6 + [40]) = $10
	*($6 + [152]) = $5
	*($6 + [24]) = $5
	*($6 + [8]) = $9
	CALL $61($0, ($6 + [40]), ($6 + [24]), ($6 + [8]))
	*(($6 + [128])) = [0]
	*($6 + [112]) = (int_64)-1
	*($6 + [120]) = (int_64)0
	*($6 + [132]) = [0]
	$1 = *($0)
	*($6 + [96]) = $1
	*($6 + [104]) = $1
	*($6 + [88]) = ($6 + [96])
	*($6 + [80]) = *($2)
	CALL $36(($6 + [56]), ($6 + [88]), ($6 + [80]))
	$11 = *($6 + [60])
	if ( ($11 == 0) ){ goto $label$3 }
	if ( ((int_64)*($6 + [80]) != (int_64)*($11 + [8])) ){ goto $label$3 }
	$1 = *($0)
	*($6 + [60]) = $4
	*($6 + [56]) = $3
	*($6 + [64]) = ($6 + [184])
	CALL eosio_assert([1], [9172])
	CALL $62(*($6 + [88]), $11, $1, ($6 + [56]))
	$4 = *($6 + [120])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($6 + [60]) = $2
	*($6 + [64]) = $3
	*($6 + [68]) = $4
	*($6 + [56]) = ($6 + [96])
	*($6 + [72]) = ($6 + [184])
	CALL $63(($6 + [80]), ($6 + [96]), $1, ($6 + [56]))
	$4 = *($6 + [120])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($6 + [124])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [120]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($3) = $4
	CALL _ZdlPv($0)
	$global$0 = ($6 + [192])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [192])
}

int_64 .FUNC $6 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_64 $3
	$0 = ($global$0 - [16])
	$1 = $0
	$global$0 = $0
	$2 = CALL action_data_size()
	if ( ($2 <= [513]) ){ goto $label$2 }
	$0 = CALL $143($2)
	goto $label$1 
	
.LABEL $label$2
	$0 = ($0 - (($2 + [15]) & [-16]))
	$global$0 = $0
	
.LABEL $label$1
	CALL read_action_data($0, $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [8]), $0, [8])
	$3 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $3
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [400])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [360]) = [0]
	*($2 + [352]) = (int_64)0
	*(($2 + [344])) = [0]
	*(($2 + [350])) = [0]
	*($2 + [328]) = (int_64)-1
	*($2 + [336]) = (int_64)0
	*($2 + [348]) = [0]
	$3 = *($0)
	*($2 + [312]) = $3
	*($2 + [320]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-6497942746098040832, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $47(($2 + [312]), $4)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($2 + [312])), [9024])
	*($2 + [308]) = $4
	*($2 + [304]) = ($2 + [312])
	*($2) = *($4 + [8])
	CALL $35(($2 + [96]), $2)
	if ( (*($2 + [352]) & [1]) ){ goto $label$4 }
	*($2 + [352]) = [0]
	goto $label$3 
	
.LABEL $label$5
	*($2 + [308]) = [0]
	*($2 + [304]) = ($2 + [312])
	$5 = *($2 + [336])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*(*(($2 + [360]))) = [0]
	*($2 + [356]) = [0]
	
.LABEL $label$3
	CALL $133(($2 + [352]), [0])
	$4 = (($2 + [96]) + [8])
	*((($2 + [352]) + [8])) = *($4)
	*($2 + [352]) = *($2 + [96])
	*($2 + [248]) = *(*($2 + [308]) + [16])
	CALL $35($2, ($2 + [248]))
	$6 = CALL $138($2, [0], [9877])
	$5 = ($6 + [8])
	*($4) = *($5)
	*($2 + [96]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	$6 = *($2 + [96])
	$5 = ($6 & [1])
	CALL $136(($2 + [352]), ( *($4) ? (($2 + [96]) | [1]) : $5 ), ( *($2 + [100]) ? uint_32($6 >> [1]) : $5 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$6
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$7
	*($2 + [248]) = *(*($2 + [308]) + [24])
	CALL $35($2, ($2 + [248]))
	$4 = CALL $138($2, [0], [9877])
	$5 = ($4 + [8])
	*(($6 = (($2 + [96]) + [8]))) = *($5)
	*($2 + [96]) = *($4)
	*($4) = (int_64)0
	*($5) = [0]
	$4 = *($2 + [96])
	$5 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($6) ? (($2 + [96]) | [1]) : $5 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$8
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$9
	*($2 + [296]) = [0]
	*($2 + [288]) = (int_64)0
	$3 = *(*($2 + [308]) + [32])
	CALL $133(($2 + [288]), [20])
	
.LOOP $label$10:
	$7 = ((uint_64)$3 / (uint_64)(int_64)10)
	CALL $135(($2 + [288]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$7 * (int_64)10))) + [9892])))
	$4 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $7
	if ( $4 ){ goto $label$10 }
	$8 = (($2 + [288]) | [1])
	$4 = ($4 & [1])
	$4 = *($2 + [288])
	$6 = ( *($2 + [292]) ? uint_32($4 >> [1]) : $4 )
	if ( ($6 == 0) ){ goto $label$11 }
	$4 = ( *(($2 + [296])) ? $8 : $4 )
	$6 = (($4 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	$6 = ($6 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $6) ){ goto $label$12 }
	
.LABEL $label$11
	CALL $139(($2 + [96]), [9877], ($2 + [288]))
	$4 = *($2 + [96])
	$6 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$13
	$3 = *(*($2 + [308]) + [40])
	if ( (*($2 + [288]) & [1]) ){ goto $label$15 }
	*($2 + [288]) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*(($2 + [296]))) = [0]
	*($2 + [292]) = [0]
	
.LABEL $label$14
	CALL $133(($2 + [288]), [20])
	
.LOOP $label$16:
	$7 = ((uint_64)$3 / (uint_64)(int_64)10)
	CALL $135(($2 + [288]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$7 * (int_64)10))) + [9892])))
	$4 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $7
	if ( $4 ){ goto $label$16 }
	$4 = ($4 & [1])
	$4 = *($2 + [288])
	$6 = ( *($2 + [292]) ? uint_32($4 >> [1]) : $4 )
	if ( ($6 == 0) ){ goto $label$17 }
	$4 = ( *(($2 + [296])) ? $8 : $4 )
	$6 = (($4 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	$6 = ($6 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $6) ){ goto $label$18 }
	
.LABEL $label$17
	CALL $139(($2 + [96]), [9877], ($2 + [288]))
	$4 = *($2 + [96])
	$6 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$19
	$3 = *(*($2 + [308]) + [56])
	if ( (*($2 + [288]) & [1]) ){ goto $label$21 }
	*($2 + [288]) = [0]
	goto $label$20 
	
.LABEL $label$21
	*(*(($2 + [296]))) = [0]
	*($2 + [292]) = [0]
	
.LABEL $label$20
	CALL $133(($2 + [288]), [20])
	
.LOOP $label$22:
	$7 = ((uint_64)$3 / (uint_64)(int_64)10)
	CALL $135(($2 + [288]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$7 * (int_64)10))) + [9892])))
	$4 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $7
	if ( $4 ){ goto $label$22 }
	$4 = ($4 & [1])
	$4 = *($2 + [288])
	$6 = ( *($2 + [292]) ? uint_32($4 >> [1]) : $4 )
	if ( ($6 == 0) ){ goto $label$23 }
	$4 = ( *(($2 + [296])) ? $8 : $4 )
	$6 = (($4 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	$6 = ($6 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $6) ){ goto $label$24 }
	
.LABEL $label$23
	CALL $139(($2 + [96]), [9877], ($2 + [288]))
	$4 = *($2 + [96])
	$6 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$25
	$3 = *(*($2 + [308]) + [72])
	if ( (*($2 + [288]) & [1]) ){ goto $label$27 }
	*($2 + [288]) = [0]
	goto $label$26 
	
.LABEL $label$27
	*(*(($2 + [296]))) = [0]
	*($2 + [292]) = [0]
	
.LABEL $label$26
	CALL $133(($2 + [288]), [20])
	
.LOOP $label$28:
	$7 = ((uint_64)$3 / (uint_64)(int_64)10)
	CALL $135(($2 + [288]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$7 * (int_64)10))) + [9892])))
	$4 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $7
	if ( $4 ){ goto $label$28 }
	$4 = ($4 & [1])
	$4 = *($2 + [288])
	$6 = ( *($2 + [292]) ? uint_32($4 >> [1]) : $4 )
	if ( ($6 == 0) ){ goto $label$29 }
	$4 = ( *(($2 + [296])) ? $8 : $4 )
	$6 = (($4 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	$6 = ($6 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $6) ){ goto $label$30 }
	
.LABEL $label$29
	CALL $139(($2 + [96]), [9877], ($2 + [288]))
	$4 = *($2 + [96])
	$6 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$31
	$3 = *(*($2 + [308]) + [88])
	if ( (*($2 + [288]) & [1]) ){ goto $label$33 }
	*($2 + [288]) = [0]
	goto $label$32 
	
.LABEL $label$33
	*(*(($2 + [296]))) = [0]
	*($2 + [292]) = [0]
	
.LABEL $label$32
	CALL $133(($2 + [288]), [20])
	
.LOOP $label$34:
	$7 = ((uint_64)$3 / (uint_64)(int_64)10)
	CALL $135(($2 + [288]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$7 * (int_64)10))) + [9892])))
	$4 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $7
	if ( $4 ){ goto $label$34 }
	$4 = ($4 & [1])
	$4 = *($2 + [288])
	$6 = ( *($2 + [292]) ? uint_32($4 >> [1]) : $4 )
	if ( ($6 == 0) ){ goto $label$35 }
	$4 = ( *(($2 + [296])) ? $8 : $4 )
	$6 = (($4 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$35 }
	
.LOOP $label$36:
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	$6 = ($6 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $6) ){ goto $label$36 }
	
.LABEL $label$35
	CALL $139(($2 + [96]), [9877], ($2 + [288]))
	$4 = *($2 + [96])
	$6 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$37
	$3 = *(*($2 + [308]) + [96])
	if ( (*($2 + [288]) & [1]) ){ goto $label$39 }
	*($2 + [288]) = [0]
	goto $label$38 
	
.LABEL $label$39
	*(*(($2 + [296]))) = [0]
	*($2 + [292]) = [0]
	
.LABEL $label$38
	CALL $133(($2 + [288]), [20])
	
.LOOP $label$40:
	$7 = ((uint_64)$3 / (uint_64)(int_64)10)
	CALL $135(($2 + [288]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$7 * (int_64)10))) + [9892])))
	$4 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $7
	if ( $4 ){ goto $label$40 }
	$4 = ($4 & [1])
	$4 = *($2 + [288])
	$6 = ( *($2 + [292]) ? uint_32($4 >> [1]) : $4 )
	if ( ($6 == 0) ){ goto $label$41 }
	$4 = ( *(($2 + [296])) ? $8 : $4 )
	$6 = (($4 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$41 }
	
.LOOP $label$42:
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	$6 = ($6 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $6) ){ goto $label$42 }
	
.LABEL $label$41
	CALL $139(($2 + [96]), [9877], ($2 + [288]))
	$4 = *($2 + [96])
	$6 = ($4 & [1])
	CALL $136(($2 + [352]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$43
	*(($2 + [280])) = [0]
	*($2 + [264]) = (int_64)-1
	*($2 + [272]) = (int_64)0
	*($2 + [284]) = [0]
	$3 = *($0)
	*($2 + [248]) = $3
	*($2 + [256]) = $3
	$4 = *($2 + [308])
	*($2 + [240]) = ($2 + [248])
	$6 = ($4 + [16])
	CALL $48(($2 + [96]), ($2 + [240]), $6)
	$4 = *($2 + [100])
	if ( ($4 == 0) ){ goto $label$44 }
	if ( ((int_64)*($6) != (int_64)*($4 + [8])) ){ goto $label$44 }
	$3 = *($0)
	*($2 + [96]) = $0
	*($2 + [100]) = ($2 + [304])
	CALL eosio_assert([1], [9172])
	CALL $49(*($2 + [240]), $4, $3, ($2 + [96]))
	
.LABEL $label$44
	$3 = *($2 + [304])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$6 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($6), [9903])
	CALL eosio_assert($6, [9937])
	$6 = CALL db_next_i64(*($4 + [108]), ($2 + [96]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$45 }
	CALL $47((CASTING uint_32)(uint_64 $3), $6)
	
.LABEL $label$45
	CALL $50(($2 + [312]), $4)
	*(($2 + [232])) = [0]
	*($2 + [216]) = (int_64)-1
	*($2 + [224]) = (int_64)0
	$3 = *($0)
	*($2 + [200]) = $3
	*($2 + [208]) = $3
	*($2 + [100]) = ($2 + [352])
	*($2 + [96]) = ($2 + [200])
	CALL $51($2, ($2 + [200]), $3, ($2 + [96]))
	$3 = (int_64)5
	
.LOOP $label$46:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$46 }
	*(($2 + [192])) = [0]
	*($2 + [176]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [184]) = (int_64)0
	$7 = *(*($2 + [308]) + [16])
	*($2 + [168]) = $7
	*($2 + [160]) = (int_64)6138663577826885632
	$4 = CALL db_find_i64((int_64)6138663577826885632, $7, (int_64)-5001342326447013888, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$47 }
	$4 = CALL $37(($2 + [160]), $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($2 + [160])), [9024])
	if ( ((uint_32)(*($4 + [8]) + [259200]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$47 }
	$9 = CALL current_time()
	$7 = (int_64)0
	*(($2 + [124])) = (int_64)0
	*(($2 + [140])) = (int_64)0
	*(($2 + [148])) = (int_64)0
	*($2 + [108]) = [0]
	*($2 + [112]) = [0]
	*($2 + [116 align=4]) = (int_64)0
	*($2 + [132 align=4]) = (int_64)0
	*($2 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	$10 = *(*($2 + [308]) + [16])
	$11 = (int_64)59
	$4 = [8647]
	$12 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$53 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$6 = ($6 + [-91])
	goto $label$51 
	
.LABEL $label$53
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$49
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$48 }
	$7 = (int_64)5
	
.LOOP $label$54:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$54 }
	$7 = (int_64)6
	
.LOOP $label$55:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$55 }
	*(($6 = ($2 + [24]))) = [0]
	*($2) = (int_64)6138663577826885632
	*($2 + [48]) = $10
	*($2 + [8]) = (int_64)-5001342339331915776
	*($2 + [16]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $10
	*($4 + [8]) = $12
	*(($2 + [36])) = [0]
	$5 = ($4 + [16])
	*($6) = $5
	*(($2 + [20])) = $5
	*($2 + [16]) = $4
	*($2 + [28 align=4]) = (int_64)0
	CALL $27(($2 + [28]), [8])
	$4 = *($2 + [28])
	CALL eosio_assert(((int_32)(*(($2 + [32])) - $4) > (int_32)[7]), [9363])
	CALL memcpy($4, ($2 + [48]), [8])
	$4 = (($2 + [96]) + [40])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [140]))) ){ goto $label$57 }
	CALL $38($6, $2)
	*($4) = (*($4) + [40])
	goto $label$56 
	
.LABEL $label$57
	CALL $39((($2 + [96]) + [36]), $2)
	
.LABEL $label$56
	$7 = *($0)
	$9 = CALL current_time()
	*($2 + [56]) = $7
	*($2 + [48]) = ((int_64)$9 | (int_64)$1)
	$7 = *($0)
	CALL $40(($2 + [368]), ($2 + [96]))
	$4 = *($2 + [368])
	CALL send_deferred(($2 + [48]), $7, $4, (*($2 + [372]) - $4), [1])
	$4 = *($2 + [368])
	if ( ($4 == 0) ){ goto $label$58 }
	*($2 + [372]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$58
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$59 }
	*(($2 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$59
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$60 }
	*(($2 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$60
	CALL $41(($2 + [96]))
	
.LABEL $label$47
	$7 = CALL current_time()
	*(($2 + [124])) = (int_64)0
	*(($2 + [140])) = (int_64)0
	*(($2 + [148])) = (int_64)0
	*($2 + [108]) = [0]
	*($2 + [112]) = [0]
	*($2 + [116 align=4]) = (int_64)0
	*($2 + [132 align=4]) = (int_64)0
	*($2 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$5 = *($2 + [308])
	$10 = *($5 + [16])
	$9 = (int_64)59
	$4 = [8647]
	$11 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$3 > (uint_64)(int_64)8) ){ goto $label$66 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$6 = ($6 + [-91])
	goto $label$64 
	
.LABEL $label$66
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$62
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$11 = ((int_64)$7 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$61 }
	$3 = (int_64)5
	
.LOOP $label$67:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$67 }
	$3 = (int_64)0
	$7 = (int_64)59
	$4 = [9879]
	$12 = (int_64)0
	
.LOOP $label$68:
	$9 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$69 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$6 = ($6 + [-91])
	goto $label$70 
	
.LABEL $label$71
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$69
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$68 }
	*(($6 = (($2 + [48]) + [24]))) = [0]
	$3 = *($5 + [24])
	*(($2 + [24])) = *(($5 + [80]))
	*(($2 + [40])) = *(($5 + [64]))
	*($2) = $10
	*($2 + [48]) = (int_64)6138663577826885632
	*($2 + [56]) = $12
	*($2 + [64]) = (int_64)0
	*($2 + [32]) = *($5 + [56])
	*($2 + [8]) = $3
	*($2 + [16]) = *($5 + [72])
	*(($4 = CALL _Znwj([16]))) = $10
	*($4 + [8]) = $11
	*((($2 + [48]) + [36])) = [0]
	$5 = ($4 + [16])
	*($6) = $5
	*(($2 + [68])) = $5
	*($2 + [64]) = $4
	*($2 + [76 align=4]) = (int_64)0
	CALL $27(($2 + [76]), [48])
	$4 = *(($2 + [80]))
	$6 = *($2 + [76])
	*($2 + [372]) = $6
	*($2 + [368]) = $6
	*($2 + [376]) = $4
	*($2 + [384]) = ($2 + [368])
	*($2 + [392]) = $2
	CALL $52(($2 + [392]), ($2 + [384]))
	$4 = (($2 + [96]) + [40])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [140]))) ){ goto $label$73 }
	CALL $38($6, ($2 + [48]))
	*($4) = (*($4) + [40])
	goto $label$72 
	
.LABEL $label$73
	CALL $39((($2 + [96]) + [36]), ($2 + [48]))
	
.LABEL $label$72
	*(($2 + [116])) = [5]
	$3 = *($0)
	$7 = CALL current_time()
	*($2 + [8]) = $3
	*($2) = ((int_64)$7 | (int_64)((int_64)$1 + (int_64)2))
	$3 = *($0)
	CALL $40(($2 + [368]), ($2 + [96]))
	$4 = *($2 + [368])
	CALL send_deferred($2, $3, $4, (*($2 + [372]) - $4), [1])
	$4 = *($2 + [368])
	if ( ($4 == 0) ){ goto $label$74 }
	*($2 + [372]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$74
	$4 = *($2 + [76])
	if ( ($4 == 0) ){ goto $label$75 }
	*(($2 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$75
	$4 = *($2 + [64])
	if ( ($4 == 0) ){ goto $label$76 }
	*(($2 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$76
	CALL $41(($2 + [96]))
	$5 = *($2 + [184])
	if ( ($5 == 0) ){ goto $label$77 }
	$0 = ($2 + [188])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$79 }
	
.LOOP $label$80:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$81 }
	CALL _ZdlPv($6)
	
.LABEL $label$81
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$80 }
	$4 = *(($2 + [184]))
	goto $label$78 
	
.LABEL $label$79
	$4 = $5
	
.LABEL $label$78
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$77
	$5 = *($2 + [224])
	if ( ($5 == 0) ){ goto $label$82 }
	$0 = ($2 + [228])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$84 }
	
.LOOP $label$85:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$86 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$87
	CALL _ZdlPv($6)
	
.LABEL $label$86
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$85 }
	$4 = *(($2 + [224]))
	goto $label$83 
	
.LABEL $label$84
	$4 = $5
	
.LABEL $label$83
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$82
	$5 = *($2 + [272])
	if ( ($5 == 0) ){ goto $label$88 }
	$0 = ($2 + [276])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$90 }
	
.LOOP $label$91:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$92 }
	CALL _ZdlPv($6)
	
.LABEL $label$92
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$91 }
	$4 = *(($2 + [272]))
	goto $label$89 
	
.LABEL $label$90
	$4 = $5
	
.LABEL $label$89
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$88
	if ( ((*($2 + [288]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*(($2 + [296])))
	
.LABEL $label$93
	$5 = *($2 + [336])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($2 + [340])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$95 }
	
.LOOP $label$96:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$97 }
	CALL _ZdlPv($6)
	
.LABEL $label$97
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$96 }
	$4 = *(($2 + [336]))
	goto $label$94 
	
.LABEL $label$95
	$4 = $5
	
.LABEL $label$94
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	if ( ((*($2 + [352]) & [1]) == 0) ){ goto $label$98 }
	CALL _ZdlPv(*(($2 + [360])))
	
.LABEL $label$98
	$global$0 = ($2 + [400])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	$global$0 = $2
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [72]) = $2
	CALL $53($0, $1)
	*(($3 + [64])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [68]) = [0]
	$1 = *($0)
	*($3 + [32]) = $1
	*($3 + [40]) = $1
	*($3 + [24]) = ($3 + [32])
	CALL $48(($3 + [8]), ($3 + [24]), ($3 + [72]))
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$2 }
	$4 = ((int_64)*($3 + [72]) != (int_64)*($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [10119])
	$1 = *($0)
	*($3 + [16]) = $0
	*($3 + [12]) = ($3 + [72])
	*($3 + [8]) = ($3 + [32])
	CALL $54($3, ($3 + [32]), $1, ($3 + [8]))
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [60])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $143($3)
	CALL read_action_data($1, $3)
	CALL $23($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $23($0, $1, $3)
	$global$0 = $2
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	float_32 $13
	float_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	$5 = ($global$0 - [544])
	$global$0 = $5
	*($5 + [504]) = $1
	CALL require_auth($1)
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8204]
	$9 = (int_64)0
	
.LOOP $label$2:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$3 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$11 = ($11 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$1 }
	*(($5 + [496])) = [0]
	*($5 + [472]) = $2
	*($5 + [464]) = $2
	*($5 + [480]) = (int_64)-1
	*($5 + [488]) = (int_64)0
	$8 = CALL db_find_i64($2, $2, (int_64)-4057297648173261632, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$10 }
	$8 = CALL $24(($5 + [464]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($5 + [464])), [9024])
	if ( ((int_64)*($8 + [16]) == (int_64)0) ){ goto $label$9 }
	$6 = *($3 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)1397703940), [8422])
	$11 = [0]
	$2 = *($3)
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$13 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$10
	CALL prints([8303])
	$12 = *($5 + [488])
	if ( $12 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$9
	CALL prints([8355])
	$12 = *($5 + [488])
	if ( $12 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [8466])
	$6 = (int_64)0
	CALL eosio_assert(((int_64)$2 > (int_64)0), [8521])
	$10 = (int_64)59
	$8 = [8582]
	$1 = *($5 + [504])
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$19 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$11 = ($11 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$14 }
	if ( ((int_64)$1 == (int_64)$9) ){ goto $label$53 }
	$6 = (int_64)7
	
.LOOP $label$54:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$54 }
	if ( ((int_64)$1 != (int_64)5372695414975758336) ){ goto $label$52 }
	
.LABEL $label$53
	*($5 + [368]) = (int_64)1397703940
	$10 = ((int_64)$2 / (int_64)10)
	*($5 + [360]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9103])
	$6 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$58
	$6 = $7
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$59 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$11 = [0]
	
.LABEL $label$55
	CALL eosio_assert($11, [9152])
	*($5 + [312]) = (int_64)1397703940
	$6 = ((int_64)$10 * (int_64)9)
	*($5 + [304]) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9103])
	$6 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$6 = $7
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$64 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$11 = [0]
	
.LABEL $label$60
	CALL eosio_assert($11, [9152])
	if ( (*($4) & [1]) ){ goto $label$66 }
	$8 = ($4 + [1])
	goto $label$65 
	
.LABEL $label$66
	$8 = *($4 + [8])
	
.LABEL $label$65
	$11 = [0]
	
.LOOP $label$67:
	$12 = ($8 + $11)
	$4 = ($11 + [1])
	$11 = $4
	if ( *($12) ){ goto $label$67 }
	$1 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$6 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$68:
	$10 = (int_64)0
	if ( ((uint_64)$6 >= (uint_64)$1) ){ goto $label$69 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$11 = ($11 + [-91])
	goto $label$70 
	
.LABEL $label$71
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$69
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$73 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$72 
	
.LABEL $label$73
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$72
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$68 }
	*($5 + [24]) = $9
	*($5 + [416]) = [525600]
	$7 = (int_64)0
	$13 = (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) / (float_64)(float_64)432e3))
	$13 = (float_32)
	if ( ((float_32)$13($13 - (Rounds 0)($13))) < (float_32)(float_32)0.25) ){ goto $label$74 }
	$14 = (PROMOTE float_64)(float_32 $13)
	if ( ((int_32)((float_64)$14 >= (float_64)(float_64)0.2) ^ (int_32)[1]) ){ goto $label$75 }
	$7 = (int_64)1
	if ( ((float_64)$14 < (float_64)(float_64)0.4) ){ goto $label$74 }
	
.LABEL $label$75
	if ( ((int_32)((float_64)$14 >= (float_64)(float_64)0.4) ^ (int_32)[1]) ){ goto $label$76 }
	$7 = (int_64)2
	if ( ((float_64)$14 < (float_64)(float_64)0.6) ){ goto $label$74 }
	
.LABEL $label$76
	if ( ((int_32)((float_64)$14 >= (float_64)(float_64)0.6) ^ (int_32)[1]) ){ goto $label$77 }
	$7 = (int_64)3
	if ( ((float_64)$14 < (float_64)(float_64)0.8) ){ goto $label$74 }
	
.LABEL $label$77
	$7 = (int_64)0
	if ( ((int_32)((float_64)$14 > (float_64)(float_64)0.8) ^ (int_32)[1]) ){ goto $label$74 }
	$7 = (int_64)4
	
.LABEL $label$74
	*(($5 + [160])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	*($5 + [164]) = [0]
	$6 = *($0)
	*($5 + [128]) = $6
	*($5 + [136]) = $6
	$8 = CALL db_find_i64($6, $6, (int_64)4154295073967702016, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$78 }
	$8 = CALL $25(($5 + [128]), $8)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)($5 + [128])), [9024])
	*($5 + [516]) = $8
	*($5 + [512]) = ($5 + [128])
	$6 = *($0)
	$8 = *($5 + [516])
	*($5 + [224]) = $0
	*($5 + [228]) = ($5 + [512])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9172])
	CALL $26(($5 + [128]), $8, $6, ($5 + [224]))
	$8 = *($5 + [516])
	if ( ((int_64)((int_64)*($8 + [16]) + (int_64)$2) <= (int_64)((int_64)*($5 + [304]) + (int_64)*($5 + [360]))) ){ goto $label$51 }
	*($5 + [400]) = *($8 + [8])
	$2 = *($0)
	$6 = (int_64)6
	
.LOOP $label$79:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$79 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8192]
	$9 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$85 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$11 = ($11 + [-91])
	goto $label$83 
	
.LABEL $label$85
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$81
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$9 = ((int_64)$7 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$80 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8614]
	$1 = (int_64)0
	
.LOOP $label$86:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$91 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$11 = ($11 + [-91])
	goto $label$89 
	
.LABEL $label$91
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$90
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$88
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$87
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$86 }
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$8 = CALL $142([8623])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$48 }
	*($5 + [80]) = ($8 << [1])
	$11 = (($5 + [80]) | [1])
	if ( $8 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$78
	$12 = *($5 + [152])
	if ( ($12 == 0) ){ goto $label$20 }
	$0 = ($5 + [156])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$42 }
	
.LOOP $label$92:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$93 }
	CALL _ZdlPv($11)
	
.LABEL $label$93
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$92 }
	$8 = *(($5 + [152]))
	goto $label$41 
	
.LABEL $label$52
	*($5 + [416]) = $1
	$11 = *($4)
	$8 = ($11 & [1])
	if ( $8 ){ goto $label$50 }
	if ( uint_32($11 >> [1]) ){ goto $label$49 }
	goto $label$43 
	
.LABEL $label$51
	CALL prints([8592])
	$12 = *($5 + [152])
	if ( ($12 == 0) ){ goto $label$20 }
	$0 = ($5 + [156])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$34 }
	
.LOOP $label$94:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$95 }
	CALL _ZdlPv($11)
	
.LABEL $label$95
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$94 }
	$8 = *(($5 + [152]))
	goto $label$33 
	
.LABEL $label$50
	if ( (*($4 + [4]) == 0) ){ goto $label$43 }
	
.LABEL $label$49
	if ( $8 ){ goto $label$45 }
	$8 = ($4 + [1])
	goto $label$44 
	
.LABEL $label$48
	$12 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($5 + [80]) = ($12 | [1])
	*($5 + [88]) = $11
	*($5 + [84]) = $8
	
.LABEL $label$47
	CALL memcpy($11, [8623], $8)
	
.LABEL $label$46
	*(($11 + $8)) = [0]
	*(($11 = (($5 + [424]) + [24]))) = [0]
	*((($5 + [224]) + [24])) = *(($3 + [8]))
	$8 = (($5 + [80]) + [8])
	*(($5 + [264])) = *($8)
	*($8) = [0]
	*($5 + [424]) = $9
	*($5 + [432]) = $1
	*($5 + [440]) = (int_64)0
	*($5 + [224]) = *($0)
	*($5 + [232]) = *($5 + [400])
	*($5 + [240]) = *($3)
	*($5 + [256]) = *($5 + [80])
	*($5 + [80]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = (int_64)3617214756542218240
	*((($5 + [424]) + [36])) = [0]
	$12 = ($8 + [16])
	*($11) = $12
	*(($5 + [444])) = $12
	*($5 + [440]) = $8
	*($5 + [452 align=4]) = (int_64)0
	$8 = *($5 + [256])
	$11 = ( *((($5 + [224]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($11 + [32])
	$6 = (CASTING uint_64)(uint_32 $11)
	$11 = ($5 + [452])
	
.LOOP $label$96:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$96 }
	if ( ($8 == 0) ){ goto $label$98 }
	CALL $27($11, $8)
	$11 = *(($5 + [456]))
	$8 = *(($5 + [452]))
	goto $label$97 
	
.LABEL $label$98
	$11 = [0]
	$8 = [0]
	
.LABEL $label$97
	*($5 + [188]) = $8
	*($5 + [184]) = $8
	*($5 + [192]) = $11
	*($5 + [8]) = ($5 + [184])
	*($5 + [64]) = ($5 + [224])
	CALL $28(($5 + [64]), ($5 + [8]))
	CALL $29(($5 + [184]), ($5 + [424]))
	$8 = *($5 + [184])
	CALL send_inline($8, (*($5 + [188]) - $8))
	$8 = *($5 + [184])
	if ( ($8 == 0) ){ goto $label$99 }
	*($5 + [188]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$99
	$8 = *($5 + [452])
	if ( ($8 == 0) ){ goto $label$100 }
	*(($5 + [456])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$100
	$8 = *($5 + [440])
	if ( ($8 == 0) ){ goto $label$101 }
	*(($5 + [444])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$101
	if ( ((*(($5 + [256])) & [1]) == 0) ){ goto $label$102 }
	CALL _ZdlPv(*(($5 + [264])))
	
.LABEL $label$102
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$103 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$103
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8647]
	$2 = *($5 + [400])
	$9 = (int_64)0
	
.LOOP $label$104:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$109 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$108 }
	$11 = ($11 + [-91])
	goto $label$107 
	
.LABEL $label$109
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$108
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$107
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$106
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$105
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$104 }
	$6 = (int_64)5
	
.LOOP $label$110:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$110 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8657]
	$1 = (int_64)0
	
.LOOP $label$111:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$116 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$11 = ($11 + [-91])
	goto $label$114 
	
.LABEL $label$116
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$115
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$113
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$112
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$111 }
	*(($11 = (($5 + [424]) + [24]))) = [0]
	*((($5 + [224]) + [24])) = *((($5 + [360]) + [8]))
	*(($5 + [264])) = *((($5 + [304]) + [8]))
	*($5 + [224]) = $2
	*($5 + [272]) = [0]
	*($5 + [424]) = (int_64)6138663577826885632
	*($5 + [432]) = $1
	*($5 + [440]) = (int_64)0
	*($5 + [232]) = *($5 + [24])
	*($5 + [240]) = *($5 + [360])
	*($5 + [256]) = *($5 + [304])
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = $9
	*(($5 + [460])) = [0]
	$12 = ($8 + [16])
	*($11) = $12
	*(($5 + [444])) = $12
	*($5 + [440]) = $8
	*($5 + [452 align=4]) = (int_64)0
	CALL $27(($5 + [452]), [49])
	$8 = *(($5 + [456]))
	$11 = *($5 + [452])
	*($5 + [188]) = $11
	*($5 + [184]) = $11
	*($5 + [192]) = $8
	*($5 + [64]) = ($5 + [184])
	*($5 + [80]) = ($5 + [224])
	CALL $30(($5 + [80]), ($5 + [64]))
	CALL $29(($5 + [184]), ($5 + [424]))
	$8 = *($5 + [184])
	CALL send_inline($8, (*($5 + [188]) - $8))
	$8 = *($5 + [184])
	if ( ($8 == 0) ){ goto $label$117 }
	*($5 + [188]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$117
	$8 = *($5 + [452])
	if ( ($8 == 0) ){ goto $label$118 }
	*(($5 + [456])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$118
	$8 = *($5 + [440])
	if ( ($8 == 0) ){ goto $label$119 }
	*(($5 + [444])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$119
	*(($5 + [256])) = [0]
	*(($5 + [262])) = [0]
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	*($5 + [260]) = [0]
	$6 = *($0)
	*($5 + [224]) = $6
	*($5 + [232]) = $6
	*($5 + [428]) = ($5 + [504])
	*($5 + [424]) = ($5 + [224])
	*($5 + [432]) = ($5 + [400])
	*($5 + [436]) = ($5 + [24])
	*($5 + [440]) = ($5 + [304])
	*($5 + [444]) = ($5 + [360])
	*($5 + [448]) = ($5 + [416])
	*($5 + [452]) = ($5 + [184])
	CALL $31(($5 + [80]), ($5 + [224]), $6, ($5 + [424]))
	*($5 + [432]) = [0]
	*($5 + [424]) = (int_64)0
	CALL $32(($5 + [424]), ($5 + [184]))
	CALL $33($0, ($5 + [424]), *($5 + [416]))
	$8 = *($5 + [424])
	if ( ($8 == 0) ){ goto $label$120 }
	*($5 + [428]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$120
	$12 = *($5 + [248])
	if ( ($12 == 0) ){ goto $label$30 }
	$0 = ($5 + [252])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$32 }
	
.LOOP $label$121:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$122 }
	CALL _ZdlPv($11)
	
.LABEL $label$122
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$121 }
	$8 = *(($5 + [248]))
	goto $label$31 
	
.LABEL $label$45
	$8 = *($4 + [8])
	
.LABEL $label$44
	$11 = [0]
	
.LOOP $label$123:
	$12 = ($8 + $11)
	$4 = ($11 + [1])
	$11 = $4
	if ( *($12) ){ goto $label$123 }
	$1 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$6 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$124:
	$10 = (int_64)0
	if ( ((uint_64)$6 >= (uint_64)$1) ){ goto $label$125 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$127 }
	$11 = ($11 + [-91])
	goto $label$126 
	
.LABEL $label$127
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$126
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$125
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$129 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$128 
	
.LABEL $label$129
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$128
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$124 }
	*($5 + [416]) = $9
	if ( CALL is_account($9) ){ goto $label$43 }
	CALL eosio_assert([0], [8668])
	
.LABEL $label$43
	$15 = [0]
	*(($5 + [456])) = [0]
	*($5 + [440]) = (int_64)-1
	*($5 + [448]) = (int_64)0
	$6 = *($0)
	*($5 + [424]) = $6
	*($5 + [432]) = $6
	$8 = [0]
	$11 = CALL db_find_i64($6, $6, (int_64)4344997574076792832, *($5 + [416]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$130 }
	$8 = CALL $34(($5 + [424]), $11)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [424])), [9024])
	
.LABEL $label$130
	CALL eosio_assert(($8 == 0), [8720])
	*($5 + [224]) = *($5 + [416])
	CALL $35(($5 + [400]), ($5 + [224]))
	$8 = *($5 + [400])
	$11 = ($8 & [1])
	$11 = (( *($5 + [408]) ? (($5 + [400]) | [1]) : $11 ) + ( *($5 + [404]) ? uint_32($8 >> [1]) : $11 ))
	$8 = *(($11 + [-1]))
	if ( ((int_32)$8 == (int_32)[122]) ){ goto $label$38 }
	if ( ((int_32)$8 == (int_32)[121]) ){ goto $label$40 }
	if ( ((int_32)$8 != (int_32)[120]) ){ goto $label$37 }
	$15 = [1]
	if ( ((int_32)*(($11 + [-2])) != (int_32)[46]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$42
	$8 = $12
	
.LABEL $label$41
	*($0) = $12
	CALL _ZdlPv($8)
	$12 = *($5 + [488])
	if ( $12 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$40
	$15 = [1]
	if ( ((int_32)*(($11 + [-2])) == (int_32)[46]) ){ goto $label$37 }
	
.LABEL $label$39
	$15 = [0]
	if ( ((int_64)$2 == (int_64)100) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$15 = ((int_32)*(($11 + [-2])) == (int_32)[46])
	
.LABEL $label$37
	if ( ((int_64)$2 != (int_64)100) ){ goto $label$35 }
	
.LABEL $label$36
	CALL eosio_assert([0], [8797])
	
.LABEL $label$35
	$8 = [0]
	*(($5 + [392])) = [0]
	*($5 + [376]) = (int_64)-1
	*($5 + [384]) = (int_64)0
	*($5 + [396]) = [0]
	$6 = *($0)
	*($5 + [360]) = $6
	*($5 + [368]) = $6
	*($5 + [352]) = ($5 + [360])
	*($5 + [128]) = $2
	CALL $36(($5 + [224]), ($5 + [352]), ($5 + [128]))
	$11 = *($5 + [228])
	if ( ($11 == 0) ){ goto $label$133 }
	if ( ((int_64)*($5 + [128]) != (int_64)*($11 + [8])) ){ goto $label$132 }
	$6 = *($5 + [224])
	*($5 + [344]) = $6
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32))
	$4 = (($5 + [344]) | [4])
	goto $label$131 
	
.LABEL $label$133
	*($5 + [348]) = [0]
	*($5 + [344]) = ($5 + [352])
	$4 = (($5 + [344]) | [4])
	goto $label$131 
	
.LABEL $label$132
	$8 = [0]
	*($5 + [348]) = [0]
	*($5 + [344]) = ($5 + [352])
	$4 = (($5 + [344]) | [4])
	
.LABEL $label$131
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8797])
	$8 = [0]
	$13 = (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) / (float_64)(float_64)432e3))
	$13 = (float_32)
	if ( ((float_32)$13($13 - (Rounds 0)($13))) < (float_32)(float_32)0.25) ){ goto $label$134 }
	$8 = [1]
	$14 = (PROMOTE float_64)(float_32 $13)
	if ( ((int_32)((float_64)$14 >= (float_64)(float_64)0.2) ^ (int_32)[1]) ){ goto $label$135 }
	if ( ((float_64)$14 < (float_64)(float_64)0.4) ){ goto $label$134 }
	
.LABEL $label$135
	if ( ((int_32)((float_64)$14 >= (float_64)(float_64)0.4) ^ (int_32)[1]) ){ goto $label$136 }
	$8 = [2]
	if ( ((float_64)$14 < (float_64)(float_64)0.6) ){ goto $label$134 }
	
.LABEL $label$136
	if ( ((int_32)((float_64)$14 >= (float_64)(float_64)0.6) ^ (int_32)[1]) ){ goto $label$137 }
	$8 = [3]
	if ( ((float_64)$14 < (float_64)(float_64)0.8) ){ goto $label$134 }
	
.LABEL $label$137
	$8 = [0]
	if ( ((int_32)((float_64)$14 > (float_64)(float_64)0.8) ^ (int_32)[1]) ){ goto $label$134 }
	$8 = [4]
	
.LABEL $label$134
	*(($5 + [336])) = [0]
	*($5 + [320]) = (int_64)-1
	*($5 + [328]) = (int_64)0
	*($5 + [340]) = [0]
	$6 = *($0)
	*($5 + [304]) = $6
	*($5 + [312]) = $6
	$1 = (CASTING uint_64)(uint_32 $8)
	$8 = CALL db_find_i64($6, $6, (int_64)4154295073967702016, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$138 }
	$8 = CALL $25(($5 + [304]), $8)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)($5 + [304])), [9024])
	*($5 + [300]) = $8
	*($5 + [296]) = ($5 + [304])
	$6 = (int_64)5
	
.LOOP $label$139:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$139 }
	*(($5 + [160])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	$6 = *($8 + [8])
	*($5 + [136]) = $6
	*($5 + [128]) = (int_64)6138663577826885632
	$8 = CALL db_find_i64((int_64)6138663577826885632, $6, (int_64)-5001342326447013888, $6)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$27 }
	$8 = CALL $37(($5 + [128]), $8)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($5 + [128])), [9024])
	if ( ((uint_32)(*($8 + [8]) + [259200]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$27 }
	$7 = CALL current_time()
	$6 = (int_64)0
	*(($5 + [252])) = (int_64)0
	*(($5 + [268])) = (int_64)0
	*(($5 + [276])) = (int_64)0
	*($5 + [236]) = [0]
	*($5 + [240]) = [0]
	*($5 + [244 align=4]) = (int_64)0
	*($5 + [260 align=4]) = (int_64)0
	*($5 + [224]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$2 = *(*($5 + [300]) + [8])
	$10 = (int_64)59
	$8 = [8647]
	$9 = (int_64)0
	
.LOOP $label$140:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$145 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$144 }
	$11 = ($11 + [-91])
	goto $label$143 
	
.LABEL $label$145
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$142 }
	goto $label$141 
	
.LABEL $label$144
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$143
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$142
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$141
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$140 }
	$6 = (int_64)5
	
.LOOP $label$146:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$146 }
	$6 = (int_64)6
	
.LOOP $label$147:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$147 }
	*(($11 = ($5 + [208]))) = [0]
	*($5 + [184]) = (int_64)6138663577826885632
	*($5 + [80]) = $2
	*($5 + [192]) = (int_64)-5001342339331915776
	*($5 + [200]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = $9
	*((($5 + [184]) + [36])) = [0]
	$12 = ($8 + [16])
	*($11) = $12
	*(($5 + [204])) = $12
	*($5 + [200]) = $8
	*($5 + [212 align=4]) = (int_64)0
	CALL $27(($5 + [212]), [8])
	$8 = *($5 + [212])
	CALL eosio_assert(((int_32)(*(($5 + [216])) - $8) > (int_32)[7]), [9363])
	CALL memcpy($8, ($5 + [80]), [8])
	$8 = (($5 + [224]) + [40])
	$11 = *($8)
	if ( ((uint_32)$11 >= (uint_32)*(($5 + [268]))) ){ goto $label$29 }
	CALL $38($11, ($5 + [184]))
	*($8) = (*($8) + [40])
	goto $label$28 
	
.LABEL $label$138
	*($5 + [300]) = [0]
	*($5 + [296]) = ($5 + [304])
	CALL eosio_assert([0], [8855])
	goto $label$26 
	
.LABEL $label$34
	$8 = $12
	
.LABEL $label$33
	*($0) = $12
	CALL _ZdlPv($8)
	$12 = *($5 + [488])
	if ( $12 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$32
	$8 = $12
	
.LABEL $label$31
	*($0) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$30
	$12 = *($5 + [152])
	if ( ($12 == 0) ){ goto $label$20 }
	$0 = ($5 + [156])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$149 }
	
.LOOP $label$150:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$151 }
	CALL _ZdlPv($11)
	
.LABEL $label$151
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$150 }
	$8 = *(($5 + [152]))
	goto $label$148 
	
.LABEL $label$149
	$8 = $12
	
.LABEL $label$148
	*($0) = $12
	CALL _ZdlPv($8)
	$12 = *($5 + [488])
	if ( $12 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$29
	CALL $39((($5 + [224]) + [36]), ($5 + [184]))
	
.LABEL $label$28
	*(($5 + [244])) = [0]
	$6 = *($0)
	$7 = CALL current_time()
	*($5 + [88]) = $6
	*($5 + [80]) = ((int_64)$7 | (int_64)$1)
	$6 = *($0)
	CALL $40(($5 + [24]), ($5 + [224]))
	$8 = *($5 + [24])
	CALL send_deferred(($5 + [80]), $6, $8, (*($5 + [28]) - $8), [1])
	$8 = *($5 + [24])
	if ( ($8 == 0) ){ goto $label$152 }
	*($5 + [28]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$152
	$8 = *($5 + [212])
	if ( ($8 == 0) ){ goto $label$153 }
	*(($5 + [216])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$153
	$8 = *($5 + [200])
	if ( ($8 == 0) ){ goto $label$154 }
	*(($5 + [204])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$154
	CALL $41(($5 + [224]))
	
.LABEL $label$27
	$6 = *($0)
	$8 = *($5 + [300])
	*($5 + [224]) = $0
	*($5 + [228]) = ($5 + [296])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9172])
	CALL $42(($5 + [304]), $8, $6, ($5 + [224]))
	$12 = *($5 + [152])
	if ( ($12 == 0) ){ goto $label$26 }
	$16 = ($5 + [156])
	$8 = *($16)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$156 }
	
.LOOP $label$157:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$158 }
	CALL _ZdlPv($11)
	
.LABEL $label$158
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$157 }
	$8 = *(($5 + [152]))
	goto $label$155 
	
.LABEL $label$156
	$8 = $12
	
.LABEL $label$155
	*($16) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$8 = *($4)
	$11 = *($5 + [300])
	if ( ((int_64)*($11 + [16]) <= (int_64)((int_64)*($8 + [40]) + (int_64)*($8 + [24]))) ){ goto $label$160 }
	*($5 + [288]) = *($11 + [8])
	goto $label$159 
	
.LABEL $label$160
	CALL eosio_assert([0], [8855])
	
.LABEL $label$159
	$7 = CALL current_time()
	$6 = (int_64)0
	*(($5 + [252])) = (int_64)0
	*(($5 + [268])) = (int_64)0
	*(($5 + [276])) = (int_64)0
	*($5 + [236]) = [0]
	*($5 + [240]) = [0]
	*($5 + [244 align=4]) = (int_64)0
	*($5 + [260 align=4]) = (int_64)0
	*($5 + [224]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$10 = (int_64)59
	$8 = [8647]
	$2 = *($5 + [288])
	$9 = (int_64)0
	
.LOOP $label$161:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$166 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$165 }
	$11 = ($11 + [-91])
	goto $label$164 
	
.LABEL $label$166
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$163 }
	goto $label$162 
	
.LABEL $label$165
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$164
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$163
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$162
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$161 }
	$6 = (int_64)5
	
.LOOP $label$167:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$167 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8657]
	$1 = (int_64)0
	
.LOOP $label$168:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$173 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$172 }
	$11 = ($11 + [-91])
	goto $label$171 
	
.LABEL $label$173
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$170 }
	goto $label$169 
	
.LABEL $label$172
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$171
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$170
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$169
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$168 }
	$8 = *($4)
	*((($5 + [128]) + [24])) = *(($8 + [48]))
	$6 = *($8 + [40])
	*((($5 + [128]) + [40])) = *(($8 + [32]))
	$7 = *($8 + [24])
	*(($11 = (($5 + [184]) + [24]))) = [0]
	*($5 + [128]) = $2
	*($5 + [184]) = (int_64)6138663577826885632
	*($5 + [192]) = $1
	*($5 + [200]) = (int_64)0
	*($5 + [136]) = *($5 + [416])
	*($5 + [144]) = $6
	*($5 + [176]) = [0]
	*($5 + [160]) = $7
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = $9
	*((($5 + [184]) + [36])) = [0]
	$12 = ($8 + [16])
	*($11) = $12
	*(($5 + [204])) = $12
	*($5 + [200]) = $8
	*($5 + [212 align=4]) = (int_64)0
	CALL $27(($5 + [212]), [49])
	$8 = *((($5 + [184]) + [32]))
	$11 = *($5 + [212])
	*($5 + [84]) = $11
	*($5 + [80]) = $11
	*($5 + [88]) = $8
	*($5 + [512]) = ($5 + [80])
	*($5 + [24]) = ($5 + [128])
	CALL $30(($5 + [24]), ($5 + [512]))
	$16 = (($5 + [224]) + [36])
	$8 = (($5 + [224]) + [40])
	$11 = *($8)
	if ( ((uint_32)$11 >= (uint_32)*(($5 + [268]))) ){ goto $label$175 }
	CALL $38($11, ($5 + [184]))
	*($8) = (*($8) + [40])
	goto $label$174 
	
.LABEL $label$175
	CALL $39($16, ($5 + [184]))
	
.LABEL $label$174
	$8 = [0]
	*(($5 + [112])) = [0]
	*(($5 + [118])) = [0]
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	*($5 + [116]) = [0]
	$6 = *($0)
	*($5 + [80]) = $6
	*($5 + [88]) = $6
	*($5 + [132]) = ($5 + [504])
	*($5 + [128]) = ($5 + [80])
	*($5 + [136]) = ($5 + [344])
	*($5 + [140]) = ($5 + [288])
	*($5 + [144]) = ($5 + [416])
	*($5 + [148]) = ($5 + [120])
	CALL $43(($5 + [24]), ($5 + [80]), $6, ($5 + [128]))
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	CALL $32(($5 + [64]), ($5 + [120]))
	CALL $33($0, ($5 + [64]), *(*($4) + [56]))
	if ( ($15 == 0) ){ goto $label$21 }
	$2 = *(($3 + [8]))
	$10 = *($3)
	CALL eosio_assert([1], [9674])
	CALL eosio_assert([1], [9689])
	$17 = ((int_64)((int_64)$10 / (int_64)100) * (int_64)49)
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [9625])
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [9649])
	CALL eosio_assert([1], [9103])
	$6 = (int_64)5459781
	
.LOOP $label$177:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$176 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$178 }
	$6 = $7
	$4 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$178
	$6 = $7
	
.LOOP $label$179:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$176 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$179 }
	$4 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$177 }
	
.LABEL $label$176
	CALL eosio_assert($4, [9152])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [9714])
	if ( ((int_64)$10 < (int_64)100) ){ goto $label$21 }
	$18 = *($0)
	$6 = (int_64)6
	
.LOOP $label$180:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$180 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8192]
	$9 = (int_64)0
	
.LOOP $label$181:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$186 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$185 }
	$11 = ($11 + [-91])
	goto $label$184 
	
.LABEL $label$186
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$185
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$184
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$183
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$182
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$9 = ((int_64)$7 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$181 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8614]
	$1 = (int_64)0
	
.LOOP $label$187:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$192 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$191 }
	$11 = ($11 + [-91])
	goto $label$190 
	
.LABEL $label$192
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$189 }
	goto $label$188 
	
.LABEL $label$191
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$190
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$189
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$188
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$187 }
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$8 = CALL $142([8906])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$195 }
	*($5 + [8]) = ($8 << [1])
	$11 = (($5 + [8]) | [1])
	if ( $8 ){ goto $label$194 }
	goto $label$193 
	
.LABEL $label$195
	$12 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($5 + [8]) = ($12 | [1])
	*($5 + [16]) = $11
	*($5 + [12]) = $8
	
.LABEL $label$194
	CALL memcpy($11, [8906], $8)
	
.LABEL $label$193
	*(($11 + $8)) = [0]
	*((($5 + [128]) + [24])) = $2
	*(($11 = (($5 + [24]) + [24]))) = [0]
	$8 = ($5 + [16])
	*(($5 + [168])) = *($8)
	*($8) = [0]
	*($5 + [144]) = $17
	*($5 + [24]) = $9
	*($5 + [32]) = $1
	*($5 + [40]) = (int_64)0
	*($5 + [128]) = *($0)
	*($5 + [136]) = *($5 + [504])
	*($5 + [160]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $18
	*($8 + [8]) = (int_64)3617214756542218240
	*((($5 + [24]) + [36])) = [0]
	$12 = ($8 + [16])
	*($11) = $12
	*(($5 + [44])) = $12
	*($5 + [40]) = $8
	*($5 + [52 align=4]) = (int_64)0
	$8 = *($5 + [160])
	$11 = ( *((($5 + [128]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($11 + [32])
	$6 = (CASTING uint_64)(uint_32 $11)
	$11 = ($5 + [52])
	
.LOOP $label$196:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$196 }
	if ( ($8 == 0) ){ goto $label$198 }
	CALL $27($11, $8)
	$11 = *(($5 + [56]))
	$8 = *(($5 + [52]))
	goto $label$197 
	
.LABEL $label$198
	$11 = [0]
	$8 = [0]
	
.LABEL $label$197
	*($5 + [516]) = $8
	*($5 + [512]) = $8
	*($5 + [520]) = $11
	*($5 + [528]) = ($5 + [512])
	*($5 + [536]) = ($5 + [128])
	CALL $28(($5 + [536]), ($5 + [528]))
	if ( ((*(($5 + [160])) & [1]) == 0) ){ goto $label$199 }
	CALL _ZdlPv(*(($5 + [168])))
	
.LABEL $label$199
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$200 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$200
	$8 = (($5 + [224]) + [40])
	$11 = *($8)
	if ( ((uint_32)$11 >= (uint_32)*(($5 + [268]))) ){ goto $label$201 }
	CALL $38($11, ($5 + [24]))
	*($8) = (*($8) + [40])
	$8 = *($5 + [52])
	if ( ($8 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$201
	CALL $39($16, ($5 + [24]))
	$8 = *($5 + [52])
	if ( $8 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	CALL $128(($5 + [80]))
	
.LABEL $label$24
	CALL $128(($5 + [8]))
	
.LABEL $label$23
	*(($5 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$8 = *($5 + [40])
	if ( ($8 == 0) ){ goto $label$21 }
	*(($5 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$21
	$6 = *($0)
	$7 = CALL current_time()
	*($5 + [136]) = $6
	*($5 + [128]) = $7
	$6 = *($0)
	CALL $40(($5 + [24]), ($5 + [224]))
	$8 = *($5 + [24])
	CALL send_deferred(($5 + [128]), $6, $8, (*($5 + [28]) - $8), [1])
	$8 = *($5 + [24])
	if ( ($8 == 0) ){ goto $label$202 }
	*($5 + [28]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$202
	$8 = *($5 + [64])
	if ( ($8 == 0) ){ goto $label$203 }
	*($5 + [68]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$203
	$12 = *($5 + [104])
	if ( ($12 == 0) ){ goto $label$204 }
	$0 = ($5 + [108])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$206 }
	
.LOOP $label$207:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$208 }
	CALL _ZdlPv($11)
	
.LABEL $label$208
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$207 }
	$8 = *(($5 + [104]))
	goto $label$205 
	
.LABEL $label$206
	$8 = $12
	
.LABEL $label$205
	*($0) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$204
	$8 = *($5 + [212])
	if ( ($8 == 0) ){ goto $label$209 }
	*(($5 + [216])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$209
	$8 = *($5 + [200])
	if ( ($8 == 0) ){ goto $label$210 }
	*(($5 + [204])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$210
	CALL $41(($5 + [224]))
	$12 = *($5 + [328])
	if ( ($12 == 0) ){ goto $label$211 }
	$0 = ($5 + [332])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$213 }
	
.LOOP $label$214:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$215 }
	CALL _ZdlPv($11)
	
.LABEL $label$215
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$214 }
	$8 = *(($5 + [328]))
	goto $label$212 
	
.LABEL $label$213
	$8 = $12
	
.LABEL $label$212
	*($0) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$211
	$12 = *($5 + [384])
	if ( ($12 == 0) ){ goto $label$216 }
	$0 = ($5 + [388])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$218 }
	
.LOOP $label$219:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$220 }
	CALL _ZdlPv($11)
	
.LABEL $label$220
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$219 }
	$8 = *(($5 + [384]))
	goto $label$217 
	
.LABEL $label$218
	$8 = $12
	
.LABEL $label$217
	*($0) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$216
	if ( ((*($5 + [400]) & [1]) == 0) ){ goto $label$221 }
	CALL _ZdlPv(*(($5 + [408])))
	
.LABEL $label$221
	$12 = *($5 + [448])
	if ( ($12 == 0) ){ goto $label$20 }
	$0 = ($5 + [452])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$223 }
	
.LOOP $label$224:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$225 }
	CALL _ZdlPv($11)
	
.LABEL $label$225
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$224 }
	$8 = *(($5 + [448]))
	goto $label$222 
	
.LABEL $label$223
	$8 = $12
	
.LABEL $label$222
	*($0) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$20
	$12 = *($5 + [488])
	if ( ($12 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$0 = ($5 + [492])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$227 }
	
.LOOP $label$228:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$229 }
	CALL _ZdlPv($11)
	
.LABEL $label$229
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$228 }
	$8 = *(($5 + [488]))
	goto $label$226 
	
.LABEL $label$227
	$8 = $12
	
.LABEL $label$226
	*($0) = $12
	CALL _ZdlPv($8)
	$global$0 = ($5 + [544])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [544])
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL memory()
	*($3 + [264]) = $0
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	$2 = (int_64)0
	$4 = (int_64)59
	$5 = [8192]
	$6 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$8 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$0 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$0 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$0 = ((int_64)((int_64)$0 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$4
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$0 | (int_64)$6)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	CALL $2(($3 + [168]))
	*(($7 = (($3 + [248]) + [8]))) = *(($3 + [192]))
	*($3 + [248]) = *($3 + [184])
	$2 = *($3 + [176])
	$0 = *($3 + [168])
	$8 = ($3 + [200])
	$5 = CALL $129(($3 + [232]), $8)
	*((($3 + [8]) + [8])) = *($7)
	*($3 + [8]) = *($3 + [248])
	CALL $3(($3 + [264]), $0, $2, ($3 + [8]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$9
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [208])))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)3626093248789590415) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)-4417029162400031553) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-4417029162400031552) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-1282848416542326784) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)3626087429011144704) ){ goto $label$1 }
	CALL $4(($3 + [168]))
	CALL $5(($3 + [264]), *($3 + [168]), *($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$18
	if ( ((int_64)$2 <= (int_64)5377993503836713359) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)5377993503836713360) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)5378239800069324800) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)6299106146746281472) ){ goto $label$1 }
	CALL $7(($3 + [264]), CALL $6())
	CALL eosio_exit([0])
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-7876370025743908864) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4417089389461504000) ){ goto $label$1 }
	CALL $8(($3 + [168]))
	$2 = *(($3 + [184]))
	*((($3 + [152]) + [8])) = $2
	$0 = *(($3 + [200]))
	*((($3 + [136]) + [8])) = $0
	*(($5 = (($3 + [120]) + [8]))) = *(($3 + [216]))
	*((($3 + [56]) + [8])) = $2
	*((($3 + [40]) + [8])) = $0
	$2 = *($3 + [176])
	*($3 + [152]) = $2
	$0 = *($3 + [192])
	*($3 + [136]) = $0
	*($3 + [120]) = *($3 + [208])
	*($3 + [56]) = $2
	*($3 + [40]) = $0
	$2 = *($3 + [168])
	$0 = *($3 + [224])
	*((($3 + [24]) + [8])) = *($5)
	*($3 + [24]) = *($3 + [120])
	CALL $9(($3 + [264]), $2, ($3 + [56]), ($3 + [40]), ($3 + [24]), $0)
	CALL eosio_exit([0])
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)3626093248789590416) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5377987684058267648) ){ goto $label$1 }
	CALL $10(($3 + [168]))
	CALL $11(($3 + [264]), *($3 + [168]), *($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	CALL $12(($3 + [168]))
	CALL $13(($3 + [264]), *($3 + [168]), *($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	CALL $14(($3 + [168]))
	CALL $15(($3 + [264]), *($3 + [168]), *($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	CALL $16(($3 + [168]))
	CALL $17(($3 + [264]), *($3 + [168]), *($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	CALL $18(($3 + [168]))
	$2 = *(($3 + [184]))
	*((($3 + [104]) + [8])) = $2
	*((($3 + [72]) + [8])) = $2
	$2 = *($3 + [176])
	*($3 + [104]) = $2
	*($3 + [72]) = $2
	CALL $19(($3 + [264]), *($3 + [168]), ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	CALL $20(($3 + [168]))
	$2 = *($3 + [168])
	$7 = ($3 + [176])
	$5 = CALL $129(($3 + [88]), $7)
	CALL require_auth(*($3 + [264]))
	CALL require_recipient($2)
	if ( ((*($5) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$19
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [184])))
	CALL eosio_exit([0])
	
.LABEL $label$10
	CALL $21(($3 + [168]))
	CALL $22(($3 + [264]), *($3 + [168]), *($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$1
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	$global$0 = $2
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_32 $7
	float_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [336])
	$global$0 = $3
	*($3 + [304]) = $1
	*($3 + [296]) = $2
	CALL $44($0, $1)
	*((($3 + [256]) + [32])) = [0]
	*($3 + [272]) = (int_64)-1
	*($3 + [280]) = (int_64)0
	$1 = *($0)
	*($3 + [256]) = $1
	*($3 + [264]) = $1
	$4 = CALL db_find_i64($1, $1, (int_64)4344997574076792832, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $34(($3 + [256]), $4) + [16]) == (int_32)($3 + [256])), [9024])
	CALL prints([9773])
	$5 = *($3 + [280])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*((($3 + [216]) + [32])) = [0]
	*($3 + [232]) = (int_64)-1
	$1 = *($0)
	*($3 + [216]) = $1
	*($3 + [224]) = $1
	*($3 + [240]) = (int_64)0
	$4 = CALL db_find_i64($1, $1, (int_64)-4057297648173261632, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$18 }
	$4 = CALL $24(($3 + [216]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [216])), [9024])
	if ( (int_64)(*($4 + [16]) == 0) ){ goto $label$15 }
	CALL eosio_assert([1], [9103])
	$1 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$1 = $2
	$6 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$16 
	
.LABEL $label$20
	$1 = $2
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $6 ){ goto $label$21 }
	$6 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$16 
	
.LABEL $label$18
	CALL prints([9795])
	$5 = *($3 + [240])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [9152])
	*(($3 + [208])) = [0]
	*($3 + [192]) = (int_64)-1
	*($3 + [200]) = (int_64)0
	*($3 + [212]) = [0]
	$1 = *($0)
	*($3 + [176]) = $1
	*($3 + [184]) = $1
	*($3 + [168]) = ($3 + [176])
	*($3 + [120]) = (int_64)100
	CALL $36(($3 + [8]), ($3 + [168]), ($3 + [120]))
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$23 }
	if ( ((int_64)*($3 + [120]) != (int_64)*($4 + [8])) ){ goto $label$23 }
	$1 = *($3 + [8])
	*($3 + [160]) = $1
	if ( ((uint_64)$1 <= (uint_64)(int_64)4294967295) ){ goto $label$22 }
	$2 = (int_64)0
	$7 = (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) / (float_64)(float_64)432e3))
	$7 = (float_32)
	if ( ((float_32)$7($7 - (Rounds 0)($7))) < (float_32)(float_32)0.25) ){ goto $label$24 }
	$8 = (PROMOTE float_64)(float_32 $7)
	if ( ((int_32)((float_64)$8 >= (float_64)(float_64)0.2) ^ (int_32)[1]) ){ goto $label$25 }
	$2 = (int_64)1
	if ( ((float_64)$8 < (float_64)(float_64)0.4) ){ goto $label$24 }
	
.LABEL $label$25
	if ( ((int_32)((float_64)$8 >= (float_64)(float_64)0.4) ^ (int_32)[1]) ){ goto $label$26 }
	$2 = (int_64)2
	if ( ((float_64)$8 < (float_64)(float_64)0.6) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ((int_32)((float_64)$8 >= (float_64)(float_64)0.6) ^ (int_32)[1]) ){ goto $label$27 }
	$2 = (int_64)3
	if ( ((float_64)$8 < (float_64)(float_64)0.8) ){ goto $label$24 }
	
.LABEL $label$27
	$2 = (int_64)0
	if ( ((int_32)((float_64)$8 > (float_64)(float_64)0.8) ^ (int_32)[1]) ){ goto $label$24 }
	$2 = (int_64)4
	
.LABEL $label$24
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [156]) = [0]
	$1 = *($0)
	*($3 + [120]) = $1
	*($3 + [128]) = $1
	$4 = CALL db_find_i64($1, $1, (int_64)4154295073967702016, $2)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$14 }
	$4 = CALL $25(($3 + [120]), $4)
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($3 + [120])), [9024])
	*($3 + [116]) = $4
	*($3 + [112]) = ($3 + [120])
	$1 = *($0)
	$4 = *($3 + [116])
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [112])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9172])
	CALL $45(($3 + [120]), $4, $1, ($3 + [8]))
	$5 = *($3 + [164])
	$4 = *($3 + [116])
	if ( ((int_64)*($4 + [16]) <= (int_64)((int_64)*($5 + [40]) + (int_64)*($5 + [24]))) ){ goto $label$13 }
	$9 = *($4 + [8])
	*($3 + [104]) = $9
	$1 = (int_64)0
	$10 = (int_64)59
	$4 = [8647]
	$11 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$33 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$6 = ($6 + [-91])
	goto $label$31 
	
.LABEL $label$33
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$2 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$28 }
	$1 = (int_64)5
	
.LOOP $label$34:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$34 }
	$1 = (int_64)0
	$10 = (int_64)59
	$4 = [8657]
	$12 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$40 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$6 = ($6 + [-91])
	goto $label$38 
	
.LABEL $label$40
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$2 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$35 }
	*((($3 + [8]) + [24])) = *(($5 + [48]))
	$1 = *($5 + [40])
	*(($3 + [48])) = *(($5 + [32]))
	$2 = *($5 + [24])
	*(($6 = (($3 + [64]) + [24]))) = [0]
	*($3 + [8]) = $9
	*($3 + [64]) = (int_64)6138663577826885632
	*($3 + [72]) = $12
	*($3 + [80]) = (int_64)0
	*($3 + [16]) = *($3 + [296])
	*($3 + [24]) = $1
	*($3 + [56]) = [0]
	*($3 + [40]) = $2
	*(($4 = CALL _Znwj([16]))) = $9
	*($4 + [8]) = $11
	*(($3 + [100])) = [0]
	$5 = ($4 + [16])
	*($6) = $5
	*(($3 + [84])) = $5
	*($3 + [80]) = $4
	*($3 + [92 align=4]) = (int_64)0
	CALL $27(($3 + [92]), [49])
	$4 = *((($3 + [64]) + [32]))
	$6 = *($3 + [92])
	*($3 + [324]) = $6
	*($3 + [320]) = $6
	*($3 + [328]) = $4
	*($3 + [312]) = ($3 + [320])
	*($3) = ($3 + [8])
	CALL $30($3, ($3 + [312]))
	CALL $29(($3 + [320]), ($3 + [64]))
	$4 = *($3 + [320])
	CALL send_inline($4, (*($3 + [324]) - $4))
	$4 = *($3 + [320])
	if ( ($4 == 0) ){ goto $label$41 }
	*($3 + [324]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$41
	$4 = *($3 + [92])
	if ( ($4 == 0) ){ goto $label$42 }
	*(($3 + [96])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$42
	$4 = *($3 + [80])
	if ( ($4 == 0) ){ goto $label$43 }
	*(($3 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$43
	*(($3 + [40])) = [0]
	*(($3 + [46])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $1
	*($3 + [68]) = ($3 + [304])
	*($3 + [64]) = ($3 + [8])
	*($3 + [72]) = ($3 + [160])
	*($3 + [76]) = ($3 + [104])
	*($3 + [80]) = ($3 + [296])
	*($3 + [84]) = ($3 + [320])
	CALL $46($3, ($3 + [8]), $1, ($3 + [64]))
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	CALL $32(($3 + [64]), ($3 + [320]))
	CALL $33($0, ($3 + [64]), *(*($3 + [164]) + [56]))
	$4 = *($3 + [64])
	if ( ($4 == 0) ){ goto $label$44 }
	*($3 + [68]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$44
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	$0 = ($3 + [36])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$45:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$46 }
	CALL _ZdlPv($6)
	
.LABEL $label$46
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$45 }
	$4 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$23
	*($3 + [164]) = [0]
	*($3 + [160]) = ($3 + [168])
	
.LABEL $label$22
	CALL prints([9833])
	goto $label$8 
	
.LABEL $label$15
	CALL prints([9811])
	$5 = *($3 + [240])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$14
	*($3 + [116]) = [0]
	*($3 + [112]) = ($3 + [120])
	$5 = *($3 + [144])
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	CALL prints([8592])
	$5 = *($3 + [144])
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$0 = ($3 + [148])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$47 }
	
.LOOP $label$48:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$49 }
	CALL _ZdlPv($6)
	
.LABEL $label$49
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$48 }
	$4 = *(($3 + [144]))
	*($0) = $5
	CALL _ZdlPv($4)
	$5 = *($3 + [200])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$47
	*($0) = $5
	CALL _ZdlPv($5)
	$5 = *($3 + [200])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *($3 + [200])
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($3 + [204])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$51 }
	
.LOOP $label$52:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$53 }
	CALL _ZdlPv($6)
	
.LABEL $label$53
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$52 }
	$4 = *(($3 + [200]))
	goto $label$50 
	
.LABEL $label$51
	$4 = $5
	
.LABEL $label$50
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$5 = *($3 + [240])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = ($3 + [244])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$55 }
	
.LOOP $label$56:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$57 }
	CALL _ZdlPv($6)
	
.LABEL $label$57
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$56 }
	$4 = *(($3 + [240]))
	goto $label$54 
	
.LABEL $label$55
	$4 = $5
	
.LABEL $label$54
	*($0) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$5 = *($3 + [280])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($3 + [284])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$59 }
	
.LOOP $label$60:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$61 }
	CALL _ZdlPv($6)
	
.LABEL $label$61
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$60 }
	$4 = *(($3 + [280]))
	goto $label$58 
	
.LABEL $label$59
	$4 = $5
	
.LABEL $label$58
	*($0) = $5
	CALL _ZdlPv($4)
	$global$0 = ($3 + [336])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [336])
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	$global$0 = $2
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $53($0, $1)
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$1 = *($0)
	*($3) = $1
	*($3 + [8]) = $1
	$0 = [0]
	$4 = CALL db_find_i64($1, $1, (int_64)4344997574076792832, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $34($3, $4)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$3), [9024])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10218])
	CALL eosio_assert($4, [9903])
	CALL eosio_assert($4, [9937])
	$4 = CALL db_next_i64(*($0 + [20]), ($3 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $34($3, $4)
	
.LABEL $label$2
	CALL $58($3, $0)
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	$global$0 = $2
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [48]) = $2
	CALL $53($0, $1)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $1
	*($3) = ($3 + [8])
	CALL $48(($3 + [56]), $3, ($3 + [48]))
	$4 = $3
	$5 = *($3 + [60])
	if ( ($5 == 0) ){ goto $label$2 }
	$0 = [0]
	if ( ((int_64)*($3 + [48]) != (int_64)*($5 + [8])) ){ goto $label$1 }
	$4 = *($3 + [56])
	$0 = $5
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [10168])
	*($3 + [56]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $4))
	CALL eosio_assert($5, [9903])
	CALL $55(($3 + [56]))
	CALL $56(*($3), $0)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9098])
	CALL memcpy(($2 + [15]), ($1 + [8]), [1])
	*($0 + [8]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [71]) = $2
	*($3 + [72]) = $1
	CALL $53($0, $1)
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	$1 = *($0)
	*($3 + [24]) = $1
	*($3 + [32]) = $1
	*($3 + [48]) = (int_64)0
	$2 = CALL db_find_i64($1, $1, (int_64)-4057297648173261632, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $24(($3 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [24])), [9024])
	$1 = *($0)
	*($3 + [12]) = ($3 + [71])
	*($3 + [8]) = ($3 + [72])
	CALL eosio_assert([1], [9172])
	CALL $66(($3 + [24]), $2, $1, ($3 + [8]))
	$4 = *($3 + [48])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($3 + [12]) = ($3 + [72])
	*($3 + [8]) = ($3 + [24])
	*($3 + [16]) = ($3 + [71])
	CALL $67($3, ($3 + [24]), $1, ($3 + [8]))
	$4 = *($3 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($3 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	$2 = $3
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$21 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert($6, [9152])
	return $0
	
.LABEL $label$17
	CALL eosio_assert([0], [9152])
	return $0
	
.LABEL $label$16
	CALL eosio_assert([0], [9152])
	return $0
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [16])) = (int_64)1397703940
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [9152])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $4, [8])
	$1 = ($3 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [9098])
	CALL memcpy(($0 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [9098])
	CALL memcpy(($0 + [16]), ($4 + [16]), [8])
	$global$0 = $2
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $53($0, $1)
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $1
	*($3 + [8]) = ($3 + [16])
	*($3) = *($2)
	CALL $36(($3 + [56]), ($3 + [8]), $3)
	$2 = ($3 + [8])
	$4 = *($3 + [60])
	if ( ($4 == 0) ){ goto $label$2 }
	$0 = [0]
	if ( ((int_64)*($3) != (int_64)*($4 + [8])) ){ goto $label$1 }
	$2 = *($3 + [56])
	$0 = $4
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10326])
	*($3 + [56]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $2))
	CALL eosio_assert($4, [9903])
	CALL $64(($3 + [56]))
	CALL $65(*($3 + [8]), $0)
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($3 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9967])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [10012])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10062])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [9152])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [9152])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [9152])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [9967])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [10012])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10062])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [108]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $110(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $107(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $108(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	CALL require_auth($1)
	$2 = [0]
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$1 }
	CALL require_auth($1)
	$2 = [1]
	
.LABEL $label$1
	$3 = (int_64)0
	$4 = (int_64)59
	$0 = [10145]
	$5 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$3 > (uint_64)(int_64)8) ){ goto $label$7 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$8 }
	$3 = (int_64)0
	$4 = (int_64)59
	$0 = [10145]
	$5 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$3 > (uint_64)(int_64)8) ){ goto $label$14 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$9 }
	CALL require_auth($5)
	return 
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$15 }
	return 
	
.LABEL $label$15
	CALL eosio_assert([0], [10155])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([112])
	CALL $75($3)
	*($3 + [96]) = $1
	CALL $114(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [100])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9098])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9967])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [10012])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10062])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [100]))
	$6 = *(($1 + [104]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4154295073967702016, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [108]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4154295073967702017, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	*($5) = *(*($3))
	*($5 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9363])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy((($4 + [16]) | [8]), ($5 + [8]), [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)4344997574076792832, $2, $6, ($4 + [16]), [16])
	*($5 + [20]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $90(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [100]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9526])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4154295073967702016)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9472])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9472])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $25(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = CALL $92($0)
	*($0 + [88]) = $1
	$1 = *($2)
	CALL $118(*($2 + [4]), $4)
	*($3 + [96]) = ($3 + [88])
	*($3 + [92]) = $3
	*($3 + [88]) = $3
	CALL $119(($3 + [88]), $4)
	$5 = *($0)
	*($0 + [92]) = CALL db_store_i64(*($1 + [8]), (int_64)-6031111549421092864, *(*($2 + [8])), $5, $3, [88])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$6 = *(*(($2 + [8])))
	$7 = *($0)
	*($3 + [104]) = *($0 + [8])
	*($0 + [96]) = CALL db_idx64_store($5, (int_64)-6031111549421092864, $6, $7, ($3 + [104]))
	$global$0 = ($3 + [112])
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	CALL $115(*($0 + [4]), $1)
	*($2 + [112]) = ($2 + [96])
	*($2 + [108]) = $2
	*($2 + [104]) = $2
	CALL $79(($2 + [104]), $1)
	$4 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($3 + [8]), (int_64)4154295073967702016, *(*($0 + [8])), $4, $2, [96])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [120]) = *($1 + [8])
	*($1 + [104]) = CALL db_idx64_store($4, (int_64)4154295073967702016, $5, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [88])
	*(($1 + [108])) = CALL db_idx64_store($5, (int_64)4154295073967702017, $4, $6, ($2 + [120]))
	$global$0 = ($2 + [128])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [9588])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $130($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $133($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9526])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7760153368969871360)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9472])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9472])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $111(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10115])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $27($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9098])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [112])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040832, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [116]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040831, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040830, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9098])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	$6 = CALL $68(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy(($5 + [24]), *($6 + [4]), [8])
	*($5 + [36]) = $1
	*($6 + [4]) = (*($6 + [4]) + [8])
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $108(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $142($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $132($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6031111549421092864, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $91($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $120(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9420])
	*($1) = *(($3 + [16]))
	$3 = *($0 + [4])
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	$3 = *($0 + [8])
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$3 = *($0 + [12])
	*($1 + [40]) = *($3)
	*(($1 + [48])) = *(($3 + [8]))
	*($1 + [56]) = *(*($0 + [16]))
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $27($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9363])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9363])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $85(CALL $84($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9937])
	$2 = *($0 + [4])
	$3 = *($2 + [104])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4154295073967702016, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [104]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [9024])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $25($6, CALL $fimport$5(*($6), *($6 + [8]), (int_64)4154295073967702016, $5))
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [9024])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [104])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $111($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $112($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9420])
	*($1) = *(($6 + [16]))
	$8 = ($1 + [8])
	CALL $131($8, *($5 + [4]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [16])
	$7 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [24])
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9363])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	$5 = CALL $83($3, $8)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($5 + [4]), $9, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)7760153368969871360, *(*($0 + [8])), $7, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $146($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $88(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9420])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = *(*($0 + [8]) + [4])
	*(($1 + [48])) = *(($3 + [16]))
	*($1 + [40]) = *($3 + [8])
	*($1 + [16]) = *(*($0 + [12]))
	*($1 + [24]) = *(*($0 + [16]))
	$3 = *(*($0 + [8]) + [4])
	*($1 + [32]) = *($3)
	*(($1 + [64])) = *(($3 + [32]))
	*($1 + [56]) = *($3 + [24])
	$3 = *(*($0 + [8]) + [4])
	*($1 + [72]) = *($3 + [40])
	*(($1 + [80])) = *(($3 + [48]))
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = CALL current_time()
	*($1 + [96]) = ((int_64)((int_64)*(*(*($0 + [8]) + [4]) + [56]) * (int_64)60) + (int_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*(*($0 + [20])) = *($1)
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	$global$0 = $2
}

void .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $143($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [16])) = [0]
	*($0 + [8 align=4]) = (int_64)0
	*($2 + [8]) = ($1 + $3)
	*($2) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [9098])
	CALL memcpy($0, $1, [8])
	*($2 + [4]) = ($1 + [8])
	CALL $68($2, ($0 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [9103])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9152])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $123(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL $53($0, $1)
	$4 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)4344997574076792832, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $34(($3 + [16]), $5) + [16]) == (int_32)($3 + [16])), [9024])
	goto $label$1 
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [10190])
	$1 = *($0)
	*($3 + [8]) = ($3 + [56])
	CALL $57($3, ($3 + [16]), $1, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([112])
	$6 = CALL $75($5)
	*($5 + [96]) = $0
	CALL $76(($3 + [32]), $6)
	*($5 + [100]) = $1
	*($5 + [104 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $0
	CALL $73(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $140($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [160]) = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9207])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9253])
	*($4 + [144]) = *($1 + [8])
	*($4 + [152]) = *($1 + [88])
	$5 = *($1)
	*($4 + [136]) = $5
	CALL $78(($4 + [96]), *($3), *(*(*($3 + [4]) + [4]) + [8]), (int_64)5459781)
	*(($1 + [24])) = *(($4 + [104]))
	*($1 + [16]) = *($4 + [96])
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9304])
	*($4 + [128]) = ($4 + [96])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	CALL $79(($4 + [120]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	$3 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [100]) = $1
	*($4 + [96]) = $0
	*($4 + [108]) = $1
	*($4 + [104]) = ($4 + [144])
	*($4 + [112]) = ($4 + [136])
	*($4 + [116]) = ($4 + [160])
	*($4 + [168]) = ($4 + [96])
	CALL $80(($4 + [168]), $3, ($3 + [1]))
	$global$0 = ($4 + [176])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $141(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [104])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4154295073967702016, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [104]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $141((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [108]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4154295073967702017, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [108])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $134($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [40]) = (int_64)0
	*(($1 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9152])
	*(($1 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [9103])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [9152])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [9152])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [9152])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $113($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $133($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $133($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $128($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9967])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [10012])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10062])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [92]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6031111549421092864, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9937])
	$2 = *($0 + [4])
	$3 = *($2 + [96])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6031111549421092864, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [96]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [9024])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $91($6, CALL $fimport$5(*($6), *($6 + [8]), (int_64)-6031111549421092864, $5))
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [9024])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [96])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = $1
	CALL $121(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9207])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9253])
	*($1 + [8]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	$5 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9304])
	CALL eosio_assert([1], [9363])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [9363])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = [0]
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [10246])
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$7 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$10 }
	$4 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10260])
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $8
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $8
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [10272])
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)-100) <= (int_64)999901), [10284])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9098])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9098])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9098])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([104])
	CALL $117($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $94(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9207])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9253])
	$5 = *($3)
	*(($1 + [32])) = *(($5 + [8]))
	*($4 + [104]) = *($1 + [8])
	*($1 + [24]) = *($5)
	$5 = *($3 + [4])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	*($1 + [56]) = *(*($3 + [8]))
	$6 = *($1)
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9304])
	*($4 + [96]) = ($4 + [88])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	CALL $119(($4 + [88]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [88])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [120]) = *(($1 + [8]))
	if ( (CALL $141(($4 + [104]), ($4 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6031111549421092864, ($4 + [112]), $6)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [120]))
	
.LABEL $label$2
	$global$0 = ($4 + [128])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9363])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9363])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $85($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9363])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9363])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9363])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $85(CALL $84($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $88(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9420])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = *(*($0 + [8]) + [4])
	*(($1 + [48])) = *(($3 + [16]))
	*($1 + [40]) = *($3 + [8])
	*($1 + [16]) = *(*($0 + [12]))
	*($1 + [24]) = *(*($0 + [16]))
	$3 = *(*($0 + [8]) + [4])
	*($1 + [32]) = *($3)
	*(($1 + [64])) = *(($3 + [32]))
	*($1 + [56]) = *($3 + [24])
	$3 = *(*($0 + [8]) + [4])
	*($1 + [72]) = *($3 + [40])
	*(($1 + [80])) = *(($3 + [48]))
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = CALL current_time()
	*($1 + [96]) = ((int_64)((int_64)*(*(*($0 + [8]) + [4]) + [56]) * (int_64)60) + (int_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*(*($0 + [20])) = *($1)
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $141(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [104])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4154295073967702016, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [104]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $141((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [108]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4154295073967702017, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [108])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $141(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [104])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4154295073967702016, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [104]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $141((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [108]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4154295073967702017, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [108])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	CALL $106(*($0 + [4]), $1)
	*($2 + [112]) = ($2 + [104])
	*($2 + [108]) = $2
	*($2 + [104]) = $2
	CALL $87(($2 + [104]), $1)
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($3 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $4, $2, [104])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [120]) = *($1 + [8])
	*($1 + [112]) = CALL db_idx64_store($4, (int_64)-6497942746098040832, $5, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [96])
	*(($1 + [116])) = CALL db_idx64_store($5, (int_64)-6497942746098040831, $4, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [24])
	*(($1 + [120])) = CALL db_idx64_store($5, (int_64)-6497942746098040830, $4, $6, ($2 + [120]))
	$global$0 = ($2 + [128])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [108]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9526])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942746098040832)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9472])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9472])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $47(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $88(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9420])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	CALL eosio_assert([1], [9103])
	$4 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$4 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$7 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [9152])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	*($1 + [16]) = *(*($0 + [8]))
	*($1 + [24]) = *(*($0 + [12]))
	*($1 + [32]) = (int_64)9999
	$3 = *($0 + [16])
	*(($1 + [64])) = *(($3 + [8]))
	*($1 + [56]) = *($3)
	$3 = *($0 + [20])
	*($1 + [72]) = *($3)
	*(($1 + [80])) = *(($3 + [8]))
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = CALL current_time()
	*($1 + [96]) = ((int_64)((int_64)*(*($0 + [24])) * (int_64)60) + (int_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*(*($0 + [28])) = *($1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9363])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9363])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9363])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9363])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9363])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9363])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9363])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $143($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [9103])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9152])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9098])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [9098])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $82($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $146($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $141(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [104])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4154295073967702016, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [104]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $141((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [108]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4154295073967702017, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [108])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10348]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10352])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10348]) = [1]
	$2 = ($2 << [16])
	*([0] + [10352]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10352])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10352]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10348]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10348]) = [1]
	$3 = ($3 << [16])
	*([0] + [10352]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10352])
	
.LABEL $label$10
	*([0] + [10352]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $145($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8217])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $146 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18740])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18548]
	$3 = (((int_32)$1 * (int_32)[12]) + [18548])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $140 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $143 (int_32 $0)
{
	return CALL $144([10356], $0)
}

int_32 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	CALL $103(*($0 + [4]), $1)
	*($2 + [112]) = ($2 + [104])
	*($2 + [108]) = $2
	*($2 + [104]) = $2
	CALL $87(($2 + [104]), $1)
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($3 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $4, $2, [104])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [120]) = *($1 + [8])
	*($1 + [112]) = CALL db_idx64_store($4, (int_64)-6497942746098040832, $5, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [96])
	*(($1 + [116])) = CALL db_idx64_store($5, (int_64)-6497942746098040831, $4, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [24])
	*(($1 + [120])) = CALL db_idx64_store($5, (int_64)-6497942746098040830, $4, $6, ($2 + [120]))
	$global$0 = ($2 + [128])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	CALL $86(*($0 + [4]), $1)
	*($2 + [112]) = ($2 + [104])
	*($2 + [108]) = $2
	*($2 + [104]) = $2
	CALL $87(($2 + [104]), $1)
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($3 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $4, $2, [104])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [120]) = *($1 + [8])
	*($1 + [112]) = CALL db_idx64_store($4, (int_64)-6497942746098040832, $5, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [96])
	*(($1 + [116])) = CALL db_idx64_store($5, (int_64)-6497942746098040831, $4, $6, ($2 + [120]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [120]) = *($1 + [24])
	*(($1 + [120])) = CALL db_idx64_store($5, (int_64)-6497942746098040830, $4, $6, ($2 + [120]))
	$global$0 = ($2 + [128])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9098])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9098])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $140($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $38($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6031111549421092864, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [9024])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $91($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)-6031111549421092864, $6))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [9024])
	
.LABEL $label$2
	*(($4 + [96])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9075])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $143($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([64])
	CALL $95($5)
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $96(($3 + [32]), ($3 + [24]))
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8192]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$6 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $8
	$7 = CALL db_find_i64($8, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL $81(($4 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [9024])
	*($0) = *($7)
	*(($0 + [8])) = *(($7 + [8]))
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$9 }
	$11 = ($4 + [36])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$12 }
	CALL _ZdlPv($9)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$11 }
	$7 = *(($4 + [32]))
	goto $label$7 
	
.LABEL $label$10
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$8
	$7 = $0
	
.LABEL $label$7
	*($11) = $0
	CALL _ZdlPv($7)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9363])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $140($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	$3 = ($global$0 - [160])
	$global$0 = $3
	if ( ((int_32)*($1 + [4]) == (int_32)*($1)) ){ goto $label$1 }
	$4 = CALL current_time()
	$5 = (int_64)0
	*((($3 + [80]) + [28])) = (int_64)0
	*(($6 = ($3 + [124]))) = (int_64)0
	*(($3 + [132])) = (int_64)0
	*($3 + [92]) = [0]
	*($3 + [96]) = [0]
	*($3 + [100 align=4]) = (int_64)0
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*((($3 + [40]) + [32])) = [0]
	*(($3 + [78])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [76]) = [0]
	$4 = *($0)
	*($3 + [40]) = $4
	*($3 + [48]) = $4
	$8 = *($1)
	$7 = ($1 + [4])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$2 }
	$9 = (($3 + [80]) + [36])
	$10 = ($3 + [28])
	$11 = (($3 + [40]) + [8])
	$12 = ($3 + [24])
	$13 = ($3 + [20])
	$14 = ($3 + [32])
	$15 = (($3 + [80]) + [40])
	$16 = [0]
	$17 = [0]
	$18 = [0]
	$5 = (int_64)0
	
.LOOP $label$3:
	$19 = *(($8 + ($18 << [3])))
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$5 }
	
.LOOP $label$7:
	$8 = ($17 + [-24])
	$20 = *($8)
	if ( ((int_64)*($20) == (int_64)$19) ){ goto $label$6 }
	$17 = $8
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($20 + [104]) == (int_32)($3 + [40])), [9024])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL db_find_i64(*($3 + [40]), *($11), (int_64)-6497942746098040832, $19)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $47(($3 + [40]), $8) + [104]) == (int_32)($3 + [40])), [9024])
	
.LABEL $label$4
	$5 = ((int_64)$19 + (int_64)$5)
	$21 = *($0)
	$4 = (int_64)6
	
.LOOP $label$8:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$8 }
	$4 = (int_64)0
	$22 = (int_64)59
	$8 = [9574]
	$23 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$14 }
	$17 = *($8)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$17 = ($17 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$24 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$17 = ( ($17 + [-48]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$10
	$8 = ($8 + [1])
	$22 = ((int_64)$22 + (int_64)4294967291)
	$23 = ((int_64)$24 | (int_64)$23)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$9 }
	*(($3 + [8])) = $23
	*(($17 = ($3 + [16]))) = (int_64)0
	*($12) = [0]
	*($3) = $21
	*($3 + [144]) = $19
	$8 = CALL _Znwj([16])
	*($17) = $8
	*($8) = $21
	*($8 + [8]) = (int_64)3617214756542218240
	*($10) = (int_64)0
	*(($3 + [36])) = [0]
	$8 = ($8 + [16])
	*($12) = $8
	*($13) = $8
	CALL $27($10, [8])
	$8 = *($10)
	CALL eosio_assert(((int_32)(*($14) - $8) > (int_32)[7]), [9363])
	CALL memcpy($8, ($3 + [144]), [8])
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$17 }
	CALL $38($8, $3)
	*($15) = (*($15) + [40])
	$8 = *($10)
	if ( $8 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $39($9, $3)
	$8 = *($10)
	if ( ($8 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*($14) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($17)
	if ( ($8 == 0) ){ goto $label$18 }
	*($13) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$8 = *($1)
	$18 = ($18 + [1])
	if ( ((uint_32)$18 >= (uint_32)int_32((*($7) - $8) >> [3])) ){ goto $label$2 }
	$16 = *((($3 + [40]) + [24]))
	$17 = *((($3 + [40]) + [28]))
	goto $label$3 
	
.LABEL $label$2
	if ( (int_64)($2 == 0) ){ goto $label$19 }
	*(($3 + [100])) = ((int_32)(CASTING uint_32)(uint_64 $2) * (int_32)[60])
	
.LABEL $label$19
	$4 = *($0)
	$24 = CALL current_time()
	*($3 + [8]) = $4
	*($3) = ((int_64)$24 | (int_64)$5)
	$4 = *($0)
	CALL $40(($3 + [144]), ($3 + [80]))
	$8 = *($3 + [144])
	CALL send_deferred($3, $4, $8, (*($3 + [148]) - $8), [1])
	$8 = *($3 + [144])
	if ( ($8 == 0) ){ goto $label$20 }
	*($3 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$20
	$16 = *($3 + [64])
	if ( ($16 == 0) ){ goto $label$21 }
	$20 = ($3 + [68])
	$8 = *($20)
	if ( ((int_32)$8 == (int_32)$16) ){ goto $label$23 }
	
.LOOP $label$24:
	$8 = ($8 + [-24])
	$17 = *($8)
	*($8) = [0]
	if ( ($17 == 0) ){ goto $label$25 }
	CALL _ZdlPv($17)
	
.LABEL $label$25
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$24 }
	$8 = *(($3 + [64]))
	goto $label$22 
	
.LABEL $label$23
	$8 = $16
	
.LABEL $label$22
	*($20) = $16
	CALL _ZdlPv($8)
	
.LABEL $label$21
	CALL $41(($3 + [80]))
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9363])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9363])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9363])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9363])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [9369])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([128])
	CALL $69($3)
	*($3 + [104]) = $1
	CALL $70(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}