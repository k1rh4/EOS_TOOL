(data (i32.const 8192) "book creation is frozen\00")
(data (i32.const 8216) "book is finished\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8319) "book is being written to (locked)\00")
(data (i32.const 8353) "too many words added\00")
(data (i32.const 8374) "no books exist\00")
(data (i32.const 8389) "book is completed\00")
(data (i32.const 8407) "book cannot be written to (buy words first)\00")
(data (i32.const 8451) "book locked by another user\00")
(data (i32.const 8479) "max word length is 50\00")
(data (i32.const 8501) "book not created\00")
(data (i32.const 8518) "must provide atleast 1 word\00")
(data (i32.const 8546) "word with index does not exist.\00")
(data (i32.const 8578) "eosio.token\00")
(data (i32.const 8590) "transfer\00")
(data (i32.const 8599) "Payout for eosbooks.io\00")
(data (i32.const 8622) "you cannot refer yourself\00")
(data (i32.const 8648) "book does not exist\00")
(data (i32.const 8668) "book is not finished yet.\00")
(data (i32.const 8694) "book has been closed over a week, cannot claim.\00")
(data (i32.const 8742) "referrals table does not exist for user\00")
(data (i32.const 8782) "no referrals exist\00")
(data (i32.const 8801) "Referral Payout for eosbooks.io\00")
(data (i32.const 8833) "pot winner has already been paid.\00")
(data (i32.const 8867) "no accounts found to be winner\00")
(data (i32.const 8898) "Book Winner Payout for eosbooks.io\00")
(data (i32.const 8933) "account does not exist\00")
(data (i32.const 8956) "overdrawn balance\00")
(data (i32.const 8974) "eosbooksbank\00")
(data (i32.const 8987) "RAM and CPU Fund.\00")
(data (i32.const 9005) "eosio.stake\00")
(data (i32.const 9017) "must transfer minimum amount.\00")
(data (i32.const 9047) "must pay with EOS token.\00")
(data (i32.const 9072) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9121) "invalid symbol name\00")
(data (i32.const 9141) "attempt to add asset with different symbol\00")
(data (i32.const 9184) "addition underflow\00")
(data (i32.const 9203) "addition overflow\00")
(data (i32.const 9221) "write\00")
(data (i32.const 9227) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9278) "error reading iterator\00")
(data (i32.const 9301) "read\00")
(data (i32.const 9306) "cannot pass end iterator to erase\00")
(data (i32.const 9340) "cannot increment end iterator\00")
(data (i32.const 9370) "object passed to erase is not in multi_index\00")
(data (i32.const 9415) "cannot erase objects in table of another contract\00")
(data (i32.const 9465) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9518) "get\00")
(data (i32.const 9522) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9576) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9624) "cannot create objects in table of another contract\00")
(data (i32.const 9675) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9727) "cannot pass end iterator to modify\00")
(data (i32.const 9762) "object passed to modify is not in multi_index\00")
(data (i32.const 9808) "cannot modify objects in table of another contract\00")
(data (i32.const 9859) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9919) "attempt to subtract asset with different symbol\00")
(data (i32.const 9967) "subtraction underflow\00")
(data (i32.const 9989) "subtraction overflow\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "db_previous_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$8 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$10 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$15 (param i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$16 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$17 (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$19 (param i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "db_idx64_upperbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$24))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $58))
(export "_ZdlPv" (func $78))
(export "_Znwj" (func $76))
(export "_Znaj" (func $77))
(export "_ZdaPv" (func $79))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $29 $1 $25 $40 $13 $38)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18420))
(global $global$2 i32 (i32.const 18420))


int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10016]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10020])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10016]) = [1]
	$2 = ($2 << [16])
	*([0] + [10020]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10020])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10020]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10016]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10016]) = [1]
	$3 = ($3 << [16])
	*([0] + [10020]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10020])
	
.LABEL $label$10
	*([0] + [10020]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18408])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18216]
	$3 = (((int_32)$1 * (int_32)[12]) + [18216])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [304])
	$global$0 = $3
	$4 = [0]
	*((($3 + [72]) + [32])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$5 = *($0)
	*($3 + [72]) = $5
	*($3 + [80]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)4407066904498274304, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $2(($3 + [72]), $7)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)($3 + [72])), [9227])
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8648])
	$5 = CALL current_time()
	CALL eosio_assert(((*($6 + [96]) + *($6 + [92])) <= (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000))), [8668])
	$5 = CALL current_time()
	CALL eosio_assert(((uint_32)(*($6 + [92]) + [604800]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000))), [8694])
	*((($3 + [32]) + [32])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$5 = *($0)
	*($3 + [32]) = $5
	*($3 + [40]) = $2
	$7 = CALL db_find_i64($5, $2, (int_64)-5001621371248181248, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $6(($3 + [32]), $7)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [32])), [9227])
	
.LABEL $label$2
	$7 = [0]
	$9 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($9, [8742])
	CALL eosio_assert(((int_64)*($4 + [8]) != (int_64)0), [8782])
	$10 = ((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *($4 + [8])) / (float_64)(CASTING float_64)(uint_64 *($6 + [32]))) * (float_64)(float_64)0.5) * (float_64)(CASTING float_64)(int_64 *($6 + [56])))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$11 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$4
	$11 = (Rounds 0)($10)
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9072])
	$2 = (int_64)5459781
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$2 = $5
	$12 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$2 = $5
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$12 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $12 ){ goto $label$9 }
	$12 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$12 = [0]
	
.LABEL $label$5
	CALL eosio_assert($12, [9121])
	CALL eosio_assert($9, [9306])
	CALL eosio_assert($9, [9340])
	$7 = CALL db_next_i64(*($4 + [20]), ($3 + [128]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $6(($3 + [32]), $7)
	
.LABEL $label$10
	CALL $11(($3 + [32]), $4)
	CALL eosio_assert($8, [9727])
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)($3 + [72])), [9762])
	CALL eosio_assert(((int_64)*($3 + [72]) == (int_64)CALL $fimport$6()), [9808])
	$2 = *($6)
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)1397703940), [9141])
	$5 = ((int_64)*($6 + [40]) + (int_64)$11)
	*($6 + [40]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($6 + [40]) < (int_64)4611686018427387904), [9203])
	CALL eosio_assert(((int_64)$2 == (int_64)*($6)), [9859])
	*($3 + [24]) = (($3 + [128]) + [112])
	*($3 + [20]) = ($3 + [128])
	*($3 + [16]) = ($3 + [128])
	*($3 + [112]) = ($3 + [16])
	*($3 + [252]) = ($6 + [8])
	*($3 + [248]) = $6
	*($3 + [256]) = ($6 + [24])
	*($3 + [260]) = ($6 + [32])
	*($3 + [264]) = ($6 + [40])
	*($3 + [268]) = ($6 + [56])
	*($3 + [272]) = ($6 + [72])
	*($3 + [276]) = ($6 + [80])
	*($3 + [280]) = ($6 + [88])
	*($3 + [284]) = ($6 + [92])
	*($3 + [288]) = ($6 + [96])
	*($3 + [292]) = ($6 + [104])
	*($3 + [296]) = ($6 + [112])
	CALL $39(($3 + [248]), ($3 + [112]))
	CALL db_update_i64(*($6 + [120]), (int_64)0, ($3 + [128]), [112])
	$7 = ($3 + [88])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$11 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$5 = *($0)
	$2 = (int_64)6
	
.LOOP $label$12:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$12 }
	*($3 + [24]) = (int_64)3617214756542218240
	*($3 + [16]) = $5
	$2 = (int_64)0
	$14 = (int_64)59
	$7 = [8578]
	$15 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$18 }
	$12 = *($7)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$12 = ($12 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$5 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$12 = ( ($12 + [-48]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$14 = ((int_64)$14 + (int_64)4294967291)
	$15 = ((int_64)$5 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$13 }
	$2 = (int_64)0
	$14 = (int_64)59
	$7 = [8590]
	$16 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$24 }
	$12 = *($7)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$12 = ($12 + [-91])
	goto $label$22 
	
.LABEL $label$24
	$5 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$12 = ( ($12 + [-48]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$20
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$5 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$19 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$7 = CALL $87([8801])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$34 }
	*($3) = ($7 << [1])
	$12 = ($3 | [1])
	if ( $7 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$6 = (($7 + [16]) & [-16])
	$12 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $12
	*($3 + [4]) = $7
	
.LABEL $label$33
	CALL memcpy($12, [8801], $7)
	
.LABEL $label$32
	*(($12 + $7)) = [0]
	*(($3 + [152])) = (int_64)1397703940
	$7 = ($3 + [8])
	*(($3 + [168])) = *($7)
	*($7) = [0]
	*($3 + [136]) = $1
	*($3 + [144]) = $11
	*($3 + [128]) = *($0)
	*($3 + [160]) = *($3)
	*($3) = (int_64)0
	$7 = CALL $32(($3 + [248]), ($3 + [16]), $15, $16, ($3 + [128]))
	CALL $24(($3 + [112]), $7)
	$12 = *($3 + [112])
	CALL send_inline($12, (*($3 + [116]) - $12))
	$12 = *($3 + [112])
	if ( ($12 == 0) ){ goto $label$35 }
	*($3 + [116]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$35
	$12 = *($7 + [28])
	if ( ($12 == 0) ){ goto $label$36 }
	*(($7 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$36
	$12 = *($7 + [16])
	if ( ($12 == 0) ){ goto $label$37 }
	*(($7 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$37
	if ( (*(($3 + [160])) & [1]) ){ goto $label$39 }
	if ( (*($3) & [1]) ){ goto $label$38 }
	goto $label$30 
	
.LABEL $label$39
	CALL _ZdlPv(*(($3 + [168])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$38
	CALL _ZdlPv(*(($3 + [8])))
	$6 = *($3 + [56])
	if ( $6 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	CALL $80($3)
	
.LABEL $label$30
	$6 = *($3 + [56])
	if ( ($6 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$13 = ($3 + [60])
	$7 = *($13)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$27 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$12 = *($7)
	*($7) = [0]
	if ( ($12 == 0) ){ goto $label$41 }
	CALL _ZdlPv($12)
	
.LABEL $label$41
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($3 + [56]))
	*($13) = $6
	CALL _ZdlPv($7)
	$6 = *($3 + [96])
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$6 = *($3 + [96])
	if ( ($6 == 0) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$27
	*($13) = $6
	CALL _ZdlPv($6)
	$6 = *($3 + [96])
	if ( ($6 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = ($3 + [100])
	$7 = *($13)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$43 }
	
.LOOP $label$44:
	$7 = ($7 + [-24])
	$12 = *($7)
	*($7) = [0]
	if ( ($12 == 0) ){ goto $label$45 }
	CALL _ZdlPv($12)
	
.LABEL $label$45
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$44 }
	$7 = *(($3 + [96]))
	goto $label$42 
	
.LABEL $label$43
	$7 = $6
	
.LABEL $label$42
	*($13) = $6
	CALL _ZdlPv($7)
	$global$0 = ($3 + [304])
	return 
	
.LABEL $label$25
	$global$0 = ($3 + [304])
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9301])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $91($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $88($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9301])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 & [-8]) != (int_32)[8]), [9301])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($3 + [52]) = ($1 + [16])
	CALL $56(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $91($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $57(($3 + [48]), $3)
	$2 = *($3 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	$4 = ($3 + [20])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($1 + [-24])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [-8])))
	
.LABEL $label$9
	$1 = $0
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$1 = *(($3 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($4) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9121])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9072])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9121])
	*($0 + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($1 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9121])
	*($0 + [64]) = (int_64)0
	return $0
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	*(($4 + [40])) = (int_64)0
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $3
	$6 = CALL db_find_i64($5, $3, (int_64)3607749779137757184, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $8(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($4 + [8])), [9227])
	CALL eosio_assert([1], [9727])
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($4 + [8])), [9762])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$6()), [9808])
	$6 = ($0 + [24])
	*($4 + [144]) = (int_64))((int_64)0 - *($6))
	$7 = ($0 + [40])
	*($4 + [152]) = (int_64))((int_64)0 - *($7))
	$8 = ($0 + [48])
	*($4 + [160]) = (int_64))((int_64)0 - *($8))
	$9 = ($0 + [64])
	*($4 + [168]) = (int_64))((int_64)0 - *($9))
	$3 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($0 + [16]))), [9141])
	$1 = ((int_64)*($0 + [8]) + (int_64)*($2))
	*($0 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($0 + [8]) < (int_64)4611686018427387904), [9203])
	CALL eosio_assert(((int_64)$3 == (int_64)*($0)), [9859])
	*($4 + [136]) = (($4 + [48]) + [72])
	*($4 + [132]) = ($4 + [48])
	*($4 + [128]) = ($4 + [48])
	*($4 + [176]) = ($4 + [128])
	*($4 + [188]) = ($0 + [8])
	*($4 + [184]) = $0
	*($4 + [192]) = $6
	*($4 + [196]) = $7
	*($4 + [200]) = $8
	*($4 + [204]) = $9
	CALL $21(($4 + [184]), ($4 + [176]))
	CALL db_update_i64(*($0 + [76]), (int_64)0, ($4 + [48]), [72])
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($3 <= *($2)) ){ goto $label$5 }
	*($2) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$2 = (($4 + [144]) + [8])
	*($4 + [184]) = (int_64))((int_64)0 - *($6))
	if ( (CALL $86(($4 + [144]), ($4 + [184]), [8]) == 0) ){ goto $label$6 }
	$8 = ($0 + [80])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL db_idx64_find_primary(*($4 + [8]), *(($4 + [16])), (int_64)3607749779137757184, ($4 + [176]), $3)
	*($8) = $6
	
.LABEL $label$7
	CALL db_idx64_update($6, (int_64)0, ($4 + [184]))
	
.LABEL $label$6
	$6 = (($4 + [144]) + [16])
	*($4 + [184]) = (int_64))((int_64)0 - *($7))
	if ( (CALL $86($2, ($4 + [184]), [8]) == 0) ){ goto $label$8 }
	$7 = ($0 + [84])
	$2 = *($7)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($4 + [8]), *(($4 + [16])), (int_64)3607749779137757185, ($4 + [176]), $3)
	*($7) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)0, ($4 + [184]))
	
.LABEL $label$8
	$2 = (($4 + [144]) + [24])
	*($4 + [184]) = (int_64))((int_64)0 - *(($0 + [48])))
	if ( (CALL $86($6, ($4 + [184]), [8]) == 0) ){ goto $label$10 }
	$7 = ($0 + [88])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL db_idx64_find_primary(*($4 + [8]), *(($4 + [16])), (int_64)3607749779137757186, ($4 + [176]), $3)
	*($7) = $6
	
.LABEL $label$11
	CALL db_idx64_update($6, (int_64)0, ($4 + [184]))
	
.LABEL $label$10
	*($4 + [184]) = (int_64))((int_64)0 - *($9))
	if ( (CALL $86($2, ($4 + [184]), [8]) == 0) ){ goto $label$3 }
	$2 = ($0 + [92])
	$0 = *($2)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$12 }
	$0 = CALL db_idx64_find_primary(*($4 + [8]), *(($4 + [16])), (int_64)3607749779137757187, ($4 + [176]), $3)
	*($2) = $0
	
.LABEL $label$12
	CALL db_idx64_update($0, (int_64)0, ($4 + [184]))
	$6 = *($4 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$3 = *($0)
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$6()), [9624])
	$0 = CALL _Znwj([96])
	CALL $43($0)
	*($0 + [72]) = ($4 + [8])
	*($0) = $1
	*($0 + [8]) = *($2)
	*(($0 + [16])) = *(($2 + [8]))
	*($4 + [192]) = (($4 + [48]) + [72])
	*($4 + [188]) = ($4 + [48])
	*($4 + [184]) = ($4 + [48])
	*($4 + [128]) = ($4 + [184])
	*($4 + [148]) = ($0 + [8])
	*($4 + [144]) = $0
	$6 = ($0 + [24])
	*($4 + [152]) = $6
	$7 = ($0 + [40])
	*($4 + [156]) = $7
	$9 = ($0 + [48])
	*($4 + [160]) = $9
	$8 = ($0 + [64])
	*($4 + [164]) = $8
	CALL $21(($4 + [144]), ($4 + [128]))
	$1 = *($0)
	$2 = (($4 + [8]) + [8])
	*($0 + [76]) = CALL db_store_i64(*($2), (int_64)3607749779137757184, $3, $1, ($4 + [48]), [72])
	$10 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$13 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$1 = *($0)
	$5 = *($2)
	*($4 + [144]) = (int_64))((int_64)0 - *($6))
	*($0 + [80]) = CALL db_idx64_store($5, (int_64)3607749779137757184, $3, $1, ($4 + [144]))
	$1 = *($0)
	$5 = *($2)
	*($4 + [144]) = (int_64))((int_64)0 - *($7))
	*($0 + [84]) = CALL db_idx64_store($5, (int_64)3607749779137757185, $3, $1, ($4 + [144]))
	$1 = *($0)
	$5 = *($2)
	*($4 + [144]) = (int_64))((int_64)0 - *($9))
	*($0 + [88]) = CALL db_idx64_store($5, (int_64)3607749779137757186, $3, $1, ($4 + [144]))
	$1 = *($0)
	$5 = *($2)
	*($4 + [144]) = (int_64))((int_64)0 - *($8))
	*($0 + [92]) = CALL db_idx64_store($5, (int_64)3607749779137757187, $3, $1, ($4 + [144]))
	*($4 + [144]) = $0
	$3 = *($0)
	*($4 + [48]) = $3
	$6 = *(($0 + [76]))
	*($4 + [184]) = $6
	$7 = ($4 + [36])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$15 }
	*($2 + [8]) = $3
	*($2 + [16]) = $6
	*($4 + [144]) = [0]
	*($2) = $0
	*($7) = ($2 + [24])
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( $0 ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$15
	CALL $44(($4 + [32]), ($4 + [144]), ($4 + [48]), ($4 + [184]))
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$14
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	CALL _ZdlPv($2)
	
.LABEL $label$19
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($4 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $6
	
.LABEL $label$16
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [208])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)3607749779137757185, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9227])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $8($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)3607749779137757184, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9227])
	
.LABEL $label$2
	*(($4 + [84])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	float_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [320])
	$global$0 = $2
	*((($2 + [88]) + [32])) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	$3 = *($0)
	*($2 + [88]) = $3
	*($2 + [96]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)4407066904498274304, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($2 + [88]), $5)
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)($2 + [88])), [9227])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8648])
	$3 = CALL current_time()
	CALL eosio_assert(((*($4 + [96]) + *($4 + [92])) <= (CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))), [8668])
	$3 = CALL current_time()
	CALL eosio_assert(((uint_32)(*($4 + [92]) + [604800]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))), [8694])
	CALL eosio_assert(((int_32)CALL $fimport$15(*($4 + [72])) ^ (int_32)[1]), [8833])
	*((($2 + [48]) + [32])) = (int_64)0
	*($2 + [56]) = $1
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [48]) = *($0)
	*($2 + [40]) = ($2 + [48])
	*($2 + [144]) = (int_64)0
	CALL $41(($2 + [32]), ($2 + [40]), ($2 + [144]))
	CALL eosio_assert(((int_32)*($2 + [36]) != (int_32)[0]), [8867])
	$6 = *(*($2 + [36]))
	CALL eosio_assert($5, [9727])
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)($2 + [88])), [9762])
	CALL eosio_assert(((int_64)*($2 + [88]) == (int_64)CALL $fimport$6()), [9808])
	*($4 + [72]) = $6
	$3 = *($4)
	CALL eosio_assert([1], [9859])
	*($2 + [24]) = (($2 + [144]) + [112])
	*($2 + [20]) = ($2 + [144])
	*($2 + [16]) = ($2 + [144])
	*($2 + [128]) = ($2 + [16])
	*($2 + [268]) = ($4 + [8])
	*($2 + [264]) = $4
	*($2 + [272]) = ($4 + [24])
	*($2 + [276]) = ($4 + [32])
	*($2 + [280]) = ($4 + [40])
	*($2 + [284]) = ($4 + [56])
	*($2 + [288]) = ($4 + [72])
	*($2 + [292]) = ($4 + [80])
	*($2 + [296]) = ($4 + [88])
	*($2 + [300]) = ($4 + [92])
	*($2 + [304]) = ($4 + [96])
	*($2 + [308]) = ($4 + [104])
	*($2 + [312]) = ($4 + [112])
	CALL $39(($2 + [264]), ($2 + [128]))
	CALL db_update_i64(*($4 + [120]), (int_64)0, ($2 + [144]), [112])
	$5 = ($2 + [104])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$7 = ((float_64)(CASTING float_64)(int_64 *($4 + [56])) * (float_64)(float_64)0.5)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$8 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$4
	$8 = (Rounds 0)($7)
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9072])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$3 = $1
	$5 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$3 = $1
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $5 ){ goto $label$9 }
	$5 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [9121])
	$1 = *($0)
	$3 = (int_64)6
	
.LOOP $label$10:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$10 }
	*($2 + [24]) = (int_64)3617214756542218240
	*($2 + [16]) = $1
	$3 = (int_64)0
	$10 = (int_64)59
	$4 = [8578]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$1 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$11 = ((int_64)$1 | (int_64)$11)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$11 }
	$3 = (int_64)0
	$10 = (int_64)59
	$4 = [8590]
	$12 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$22 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$1 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$12 = ((int_64)$1 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$17 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$4 = CALL $87([8898])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$32 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	if ( $4 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$31
	CALL memcpy($5, [8898], $4)
	
.LABEL $label$30
	*(($5 + $4)) = [0]
	*(($2 + [168])) = (int_64)1397703940
	$4 = ($2 + [8])
	*(($2 + [184])) = *($4)
	*($4) = [0]
	*($2 + [152]) = $6
	*($2 + [160]) = $8
	*($2 + [144]) = *($0)
	*($2 + [176]) = *($2)
	*($2) = (int_64)0
	$4 = CALL $32(($2 + [264]), ($2 + [16]), $11, $12, ($2 + [144]))
	CALL $24(($2 + [128]), $4)
	$5 = *($2 + [128])
	CALL send_inline($5, (*($2 + [132]) - $5))
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$33 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$33
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$34 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$34
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$35 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$35
	if ( (*(($2 + [176])) & [1]) ){ goto $label$37 }
	if ( (*($2) & [1]) ){ goto $label$36 }
	goto $label$28 
	
.LABEL $label$37
	CALL _ZdlPv(*(($2 + [184])))
	if ( ((*($2) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$36
	CALL _ZdlPv(*(($2 + [8])))
	$9 = *($2 + [72])
	if ( $9 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	CALL $80($2)
	
.LABEL $label$28
	$9 = *($2 + [72])
	if ( ($9 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$0 = ($2 + [76])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$38:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$39 }
	CALL _ZdlPv($5)
	
.LABEL $label$39
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$38 }
	$4 = *(($2 + [72]))
	*($0) = $9
	CALL _ZdlPv($4)
	$9 = *($2 + [112])
	if ( $9 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$9 = *($2 + [112])
	if ( ($9 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	*($0) = $9
	CALL _ZdlPv($9)
	$9 = *($2 + [112])
	if ( ($9 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$0 = ($2 + [116])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$41 }
	
.LOOP $label$42:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$43 }
	CALL _ZdlPv($5)
	
.LABEL $label$43
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$42 }
	$4 = *(($2 + [112]))
	goto $label$40 
	
.LABEL $label$41
	$4 = $9
	
.LABEL $label$40
	*($0) = $9
	CALL _ZdlPv($4)
	$global$0 = ($2 + [320])
	return 
	
.LABEL $label$23
	$global$0 = ($2 + [320])
	(unreachable)
}

void .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $88($3)
	CALL read_action_data($1, $3)
	CALL $53($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $53($0, $1, $3)
	$global$0 = $2
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8578]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$12 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8590]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$12 }
	CALL $47(($3 + [96]))
	CALL eosio_assert(((int_64)*(($3 + [120])) == (int_64)1397703940), [9047])
	CALL $45($0, ($3 + [96]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [136])))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$12
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)4921564961737539583) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)3626464626683674624) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4520992102670139392) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4849591934554632192) ){ goto $label$11 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [16]) = *($3 + [72])
	CALL $48($0, ($3 + [16]))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)4921564961737539584) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)4921565079708631040) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678621463216128) ){ goto $label$11 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [40]) = *($3 + [48])
	CALL $49($0, ($3 + [40]))
	
.LABEL $label$11
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$10
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [8]) = *($3 + [80])
	CALL $50($0, ($3 + [8]))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$9
	*($3 + [60]) = [0]
	*($3 + [56]) = [4]
	*($3 + [32]) = *($3 + [56])
	CALL $49($0, ($3 + [32]))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$8
	*($3 + [92]) = [0]
	*($3 + [88]) = [5]
	*($3) = *($3 + [88])
	CALL $51($0, $3)
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$7
	*($3 + [68]) = [0]
	*($3 + [64]) = [6]
	*($3 + [24]) = *($3 + [64])
	CALL $52($0, ($3 + [24]))
	$global$0 = ($3 + [144])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [96])
	$global$0 = $2
	if ( ((int_64)*($1 + [8]) != (int_64)*($0)) ){ goto $label$1 }
	$3 = *($1)
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [9005]
	$7 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$7 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$8 = ($8 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$2 }
	if ( ((int_64)$3 == (int_64)$7) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($1 + [16]) > (int_64)400), [9017])
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	$9 = (int_64)0
	*($2 + [80]) = (int_64)0
	$4 = *($0)
	*($2 + [56]) = $4
	*($2 + [64]) = $4
	$6 = ($1 + [16])
	$8 = CALL db_lowerbound_i64($4, $4, (int_64)4407066904498274304, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	CALL $2(($2 + [56]), $8)
	*($2 + [52]) = [0]
	*($2 + [48]) = ($2 + [56])
	$8 = *(CALL $14(($2 + [48])) + [4])
	$4 = CALL current_time()
	if ( ((uint_32)(*($8 + [96]) + *($8 + [92])) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))) ){ goto $label$9 }
	*($2 + [44]) = [0]
	*($2 + [40]) = ($2 + [56])
	$9 = ((int_64)*(*(CALL $14(($2 + [40])) + [4])) + (int_64)1)
	goto $label$8 
	
.LABEL $label$9
	*($2 + [36]) = [0]
	*($2 + [32]) = ($2 + [56])
	$9 = *(*(CALL $14(($2 + [32])) + [4]))
	
.LABEL $label$8
	$5 = *(($6 + [8]))
	*((($2 + [16]) + [8])) = $5
	$7 = *($1)
	$4 = *($6)
	*(($2 + [8])) = $5
	*($2 + [16]) = $4
	*($2) = $4
	CALL $42($0, $7, $2, $9)
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	$0 = ($2 + [84])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	CALL _ZdlPv($8)
	
.LABEL $label$13
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($2 + [80]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $1
	
.LABEL $label$10
	*($0) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9278])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([96])
	CALL $43($5)
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	CALL $66(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($5 + [88 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $8($0, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9306])
	CALL eosio_assert([1], [9340])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [76]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $8($0, $4)
	
.LABEL $label$3
	CALL $12($0, $3)
	$3 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9278])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9301])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9301])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-5001621371248181248, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $6($0, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9306])
	CALL eosio_assert([1], [9340])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [20]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $6($0, $4)
	
.LABEL $label$3
	CALL $11($0, $3)
	$3 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9278])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $88($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([56])
	$6 = CALL $62($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [48])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-1932435666281431040, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $4($0, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9306])
	CALL eosio_assert([1], [9340])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [48]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $4($0, $4)
	
.LABEL $label$3
	CALL $10($0, $3)
	$3 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9278])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([128])
	CALL $15($5)
	*($5 + [116]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [92])
	*($3 + [80]) = ($5 + [96])
	*($3 + [84]) = ($5 + [104])
	*($3 + [88]) = ($5 + [112])
	CALL $61(($3 + [40]), ($3 + [32]))
	*($5 + [120]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [9370])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9415])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9465])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [120]))
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [120]) + [32])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	$3 = *($0)
	*($2 + [120]) = $3
	*($2 + [128]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)4407066904498274304, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($2 + [120]), $4)
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)($2 + [120])), [9227])
	CALL eosio_assert([1], [9306])
	CALL eosio_assert([1], [9340])
	$5 = CALL db_next_i64(*($4 + [120]), ($2 + [80]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $2(($2 + [120]), $5)
	
.LABEL $label$2
	CALL $3(($2 + [120]), $4)
	
.LABEL $label$1
	*((($2 + [80]) + [32])) = [0]
	*($2 + [96]) = (int_64)-1
	$3 = *($0)
	*($2 + [80]) = $3
	*($2 + [88]) = $1
	*($2 + [104]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $1, (int_64)-1932435666281431040, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $4(($2 + [80]), $4)
	CALL $5(($2 + [80]))
	
.LABEL $label$3
	*((($2 + [40]) + [32])) = [0]
	*($2 + [56]) = (int_64)-1
	$3 = *($0)
	*($2 + [40]) = $3
	*($2 + [48]) = $1
	*($2 + [64]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $1, (int_64)-5001621371248181248, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $6(($2 + [40]), $4)
	CALL $7(($2 + [40]))
	
.LABEL $label$4
	*(($2 + [32])) = (int_64)0
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $1
	$0 = CALL db_lowerbound_i64($3, $1, (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	CALL $8($2, $0)
	CALL $9($2)
	
.LABEL $label$5
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$5 = *($2 + [64])
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($2 + [68])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($2 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$5 = *($2 + [104])
	if ( ($5 == 0) ){ goto $label$16 }
	$6 = ($2 + [108])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($2 + [104]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $5
	
.LABEL $label$17
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$16
	$5 = *($2 + [144])
	if ( ($5 == 0) ){ goto $label$22 }
	$6 = ($2 + [148])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$24 }
	
.LOOP $label$25:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$26 }
	CALL _ZdlPv($4)
	
.LABEL $label$26
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$25 }
	$0 = *(($2 + [144]))
	goto $label$23 
	
.LABEL $label$24
	$0 = $5
	
.LABEL $label$23
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$22
	$global$0 = ($2 + [160])
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [120]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9576])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4407066904498274304)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9522])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9522])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9121])
	*($0 + [40]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9121])
	*(($1 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [9072])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9121])
	*($0 + [80]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [88]) = [500]
	$2 = CALL current_time()
	*($0 + [96]) = [86400]
	*($0 + [92]) = ((uint_64)$2 / (uint_64)(int_64)1000000)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4407066904498274304, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($5, $7)
	*($3 + [28]) = [0]
	*($3 + [24]) = $5
	$6 = *(*(CALL $14(($3 + [24])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [9675])
	*($1) = *(($5 + [16]))
	$2 = $2
	$5 = ($2 + [-112])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $2
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [56])
	*($3 + [48]) = ($1 + [72])
	*($3 + [52]) = ($1 + [80])
	*($3 + [56]) = ($1 + [88])
	*($3 + [60]) = ($1 + [92])
	*($3 + [64]) = ($1 + [96])
	*($3 + [68]) = ($1 + [104])
	*($3 + [72]) = ($1 + [112])
	CALL $39(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($4 + [8]), (int_64)4407066904498274304, *(*($0 + [8])), $6, $5, [112])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [9370])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9415])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9465])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9370])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9415])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9465])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [9370])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9415])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9465])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $67(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	$global$0 = ($2 + [16])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [184]) = $2
	*($3 + [192]) = $1
	CALL require_auth($1)
	*(($4 = ($3 + [176]))) = [0]
	*($3 + [160]) = (int_64)-1
	$1 = *($0)
	*($3 + [144]) = $1
	*($3 + [152]) = $1
	*($3 + [168]) = (int_64)0
	*($3 + [140]) = [0]
	*($3 + [136]) = ($3 + [144])
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)4407066904498274304, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)CALL $2(($3 + [144]), $5) == (int_32)*($3 + [140])) ){ goto $label$2 }
	$5 = *(CALL $14(($3 + [136])) + [4])
	$1 = CALL current_time()
	if ( ((uint_32)(*($5 + [96]) + *($5 + [92])) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8192])
	$1 = *($0)
	*($3 + [128]) = ($3 + [144])
	*($3 + [104]) = $1
	CALL eosio_assert(((int_64)*($3 + [144]) == (int_64)CALL $fimport$6()), [9624])
	*($3 + [68]) = ($3 + [128])
	*($3 + [64]) = ($3 + [144])
	*($3 + [72]) = ($3 + [104])
	$5 = CALL _Znwj([128])
	CALL $15($5)
	*($5 + [116]) = ($3 + [144])
	CALL $16(($3 + [64]), $5)
	*($3 + [88]) = $5
	$1 = *($5)
	*($3 + [64]) = $1
	$6 = *($5 + [120])
	*($3 + [204]) = $6
	$7 = ($3 + [172])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($4)) ){ goto $label$4 }
	*($8 + [8]) = $1
	*($8 + [16]) = $6
	*($3 + [88]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	$5 = *($3 + [88])
	*($3 + [88]) = [0]
	if ( $5 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL $17(($3 + [168]), ($3 + [88]), ($3 + [64]), ($3 + [204]))
	$5 = *($3 + [88])
	*($3 + [88]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$8 = [0]
	*($3 + [124]) = [0]
	*($3 + [120]) = ($3 + [144])
	$7 = *(CALL $14(($3 + [120])) + [4])
	$1 = CALL current_time()
	CALL eosio_assert(((uint_32)(*($7 + [96]) + *($7 + [92])) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [8216])
	$1 = CALL current_time()
	CALL eosio_assert(((uint_32)*($7 + [112]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [8319])
	$1 = *($7 + [88])
	$2 = *($7 + [80])
	*($3 + [112]) = (int_64)1397703940
	$1 = ((int_64)((uint_64)$2 / (uint_64)$1) * (int_64)4000)
	$2 = ((int_64)$1 + (int_64)2000)
	*($3 + [104]) = $2
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427389903) <= (int_64)9223372036854775807), [9072])
	$9 = ((float_64)(CASTING float_64)(int_64 $2) * (float_64)(float_64)0.08333333333)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$10 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$10 = (Rounds 0)($9)
	
.LABEL $label$5
	$1 = (int_64)5459781
	
.LOOP $label$9:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $2
	$4 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $2
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9121])
	*($3 + [96]) = (int_64)1397703940
	*($3 + [88]) = $10
	$11 = (uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($11, [9072])
	$1 = (int_64)5459781
	
.LOOP $label$14:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $2
	$4 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$1 = $2
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $4 ){ goto $label$16 }
	$4 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$4 = [0]
	
.LABEL $label$12
	CALL eosio_assert($4, [9121])
	CALL eosio_assert($11, [9072])
	$1 = (int_64)5459781
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$1 = $2
	$5 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$1 = $2
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $5 ){ goto $label$21 }
	$5 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$5 = [0]
	
.LABEL $label$17
	CALL eosio_assert($5, [9121])
	*($3 + [80]) = $0
	*($3 + [68]) = ($3 + [88])
	*($3 + [64]) = ($3 + [104])
	*($3 + [72]) = ($3 + [192])
	*($3 + [76]) = ($3 + [184])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9727])
	CALL $18(($3 + [144]), $7, ($3 + [64]))
	$1 = *((($3 + [104]) + [8]))
	*((($3 + [48]) + [8])) = $1
	$2 = *($3 + [104])
	*($3 + [48]) = $2
	$12 = *($7)
	*((($3 + [16]) + [8])) = $1
	*($3 + [16]) = $2
	CALL $19($0, *($3 + [192]), ($3 + [16]), $12, [0])
	*(($3 + [8])) = (int_64)1397703940
	*($3 + [40]) = (int_64)1397703940
	*($3) = $10
	*($3 + [32]) = $10
	CALL $20($0, $3)
	$4 = *($3 + [168])
	if ( ($4 == 0) ){ goto $label$22 }
	$6 = ($3 + [172])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($3 + [168]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$23
	*($6) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$22
	$global$0 = ($3 + [208])
}

void .FUNC $75 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$7 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$7 = *((*($6) + $7))
	
.LABEL $label$1
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$5 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*(($4 + [8])) = ($0 + ((int_32)$5 * (int_32)[24]))
	*($4) = $0
	*($4 + [4]) = $0
	$3 = *(($3 + [4]))
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	*($0) = *($5)
	CALL $81(($0 + [8]), ($5 + [8]))
	$0 = ($0 + [24])
	$5 = ($5 + [24])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	*($4 + [4]) = $0
	
.LABEL $label$3
	CALL void $6((int_32 $1), (int_64 $2), (int_64 $4), (int_32 $7))
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$5 }
	$0 = *($4 + [4])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($0 + [-24])
	if ( ((*(($0 + [-16])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($0 + [-8])))
	
.LABEL $label$9
	$0 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$0 = *($4)
	goto $label$6 
	
.LABEL $label$7
	$0 = $3
	
.LABEL $label$6
	*($4 + [4]) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $85($4)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [9762])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9808])
	$5 = *($2 + [16])
	$6 = *($1)
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [16]))), [9141])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($7))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9203])
	$7 = *($2 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [64]))), [9141])
	$8 = ((int_64)*($1 + [56]) + (int_64)*($7))
	*($1 + [56]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9203])
	$8 = CALL current_time()
	*($1 + [104]) = *(*($2 + [8]))
	*($1 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [120])
	$7 = ($1 + [104])
	$9 = ($1 + [112])
	if ( (CALL is_account(*(*($2 + [12]))) == 0) ){ goto $label$2 }
	CALL $36($5, *(*(($2 + [12]))), *(*(($2 + [8]))), *($1))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$5 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9859])
	$3 = $3
	$2 = ($3 + [-112])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = $5
	*($4 + [40]) = ($1 + [40])
	*($4 + [44]) = ($1 + [56])
	*($4 + [48]) = ($1 + [72])
	*($4 + [52]) = ($1 + [80])
	*($4 + [56]) = ($1 + [88])
	*($4 + [60]) = ($1 + [92])
	*($4 + [64]) = ($1 + [96])
	*($4 + [68]) = $7
	*($4 + [72]) = $9
	CALL $39(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [120]), (int_64)0, $2, [112])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [208])
	$global$0 = $5
	*((($5 + [8]) + [32])) = (int_64)0
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$6 = *($0)
	*($5 + [8]) = $6
	*($5 + [16]) = $3
	$0 = [0]
	$7 = CALL db_find_i64($6, $3, (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $8(($5 + [8]), $7)
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($5 + [8])), [9227])
	
.LABEL $label$1
	$7 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($7, [8933])
	$6 = *($2)
	CALL eosio_assert(((int_64)*($0 + [8]) >= (int_64)$6), [8956])
	CALL eosio_assert($7, [9727])
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($5 + [8])), [9762])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$6()), [9808])
	$7 = ($0 + [24])
	*($5 + [144]) = (int_64))((int_64)0 - *($7))
	$8 = ($0 + [40])
	*($5 + [152]) = (int_64))((int_64)0 - *($8))
	$9 = ($0 + [48])
	*($5 + [160]) = (int_64))((int_64)0 - *($9))
	$10 = ($0 + [64])
	*($5 + [168]) = (int_64))((int_64)0 - *($10))
	$3 = *($0)
	$1 = *($2 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($0 + [16]))), [9919])
	$6 = (int_64)
	*($0 + [8]) = $6(*($0 + [8]) - $6))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9967])
	CALL eosio_assert(((int_64)*($0 + [8]) < (int_64)4611686018427387904), [9989])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($0 + [32]))), [9141])
	$6 = ((int_64)*($7) + (int_64)*($2))
	*($7) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [9203])
	$6 = (CASTING int_64)(int_32 $4)
	*($8) = ((int_64)*($8) + (int_64)$6)
	CALL eosio_assert(((int_64)$1 == (int_64)*(($0 + [56]))), [9141])
	$1 = ((int_64)*($9) + (int_64)*($2))
	*($9) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [9203])
	*($10) = ((int_64)*($10) + (int_64)$6)
	CALL eosio_assert(((int_64)$3 == (int_64)*($0)), [9859])
	*($5 + [136]) = (($5 + [48]) + [72])
	*($5 + [132]) = ($5 + [48])
	*($5 + [128]) = ($5 + [48])
	*($5 + [176]) = ($5 + [128])
	*($5 + [188]) = ($0 + [8])
	*($5 + [184]) = $0
	*($5 + [192]) = $7
	*($5 + [196]) = $8
	*($5 + [200]) = $9
	*($5 + [204]) = $10
	CALL $21(($5 + [184]), ($5 + [176]))
	CALL db_update_i64(*($0 + [76]), (int_64)0, ($5 + [48]), [72])
	$2 = (($5 + [8]) + [16])
	if ( (uint_64)($3 <= *($2)) ){ goto $label$2 }
	*($2) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$2 = (($5 + [144]) + [8])
	*($5 + [184]) = (int_64))((int_64)0 - *($7))
	if ( (CALL $86(($5 + [144]), ($5 + [184]), [8]) == 0) ){ goto $label$3 }
	$9 = ($0 + [80])
	$7 = *($9)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx64_find_primary(*($5 + [8]), *(($5 + [16])), (int_64)3607749779137757184, ($5 + [176]), $3)
	*($9) = $7
	
.LABEL $label$4
	CALL db_idx64_update($7, (int_64)0, ($5 + [184]))
	
.LABEL $label$3
	$7 = (($5 + [144]) + [16])
	*($5 + [184]) = (int_64))((int_64)0 - *($8))
	if ( (CALL $86($2, ($5 + [184]), [8]) == 0) ){ goto $label$5 }
	$8 = ($0 + [84])
	$2 = *($8)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$6 }
	$2 = CALL db_idx64_find_primary(*($5 + [8]), *(($5 + [16])), (int_64)3607749779137757185, ($5 + [176]), $3)
	*($8) = $2
	
.LABEL $label$6
	CALL db_idx64_update($2, (int_64)0, ($5 + [184]))
	
.LABEL $label$5
	$2 = (($5 + [144]) + [24])
	*($5 + [184]) = (int_64))((int_64)0 - *(($0 + [48])))
	if ( (CALL $86($7, ($5 + [184]), [8]) == 0) ){ goto $label$7 }
	$8 = ($0 + [88])
	$7 = *($8)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($5 + [8]), *(($5 + [16])), (int_64)3607749779137757186, ($5 + [176]), $3)
	*($8) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, (int_64)0, ($5 + [184]))
	
.LABEL $label$7
	*($5 + [184]) = (int_64))((int_64)0 - *($10))
	if ( (CALL $86($2, ($5 + [184]), [8]) == 0) ){ goto $label$9 }
	$7 = ($0 + [92])
	$0 = *($7)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$10 }
	$0 = CALL db_idx64_find_primary(*($5 + [8]), *(($5 + [16])), (int_64)3607749779137757187, ($5 + [176]), $3)
	*($7) = $0
	
.LABEL $label$10
	CALL db_idx64_update($0, (int_64)0, ($5 + [184]))
	
.LABEL $label$9
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$11 }
	$8 = ($5 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($5 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $2
	
.LABEL $label$12
	*($8) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($5 + [208])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL memory()
	*($3 + [8]) = $0
	CALL $46(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9221])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $88($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9301])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $54(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $91($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $55(($3 + [48]), ($3 + [8]))
	$2 = *($3 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	$4 = ($3 + [20])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($0 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$9
	$0 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$8 }
	$1 = *(($3 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($4) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9301])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9301])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $91($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9301])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9301])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $91($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9121])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $72(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9518])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $73($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $64($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $34($0, *($1))
	CALL $34($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9518])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[24])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $74($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$2 = ($6 + ((int_32)$7 * (int_32)[24]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-24])
	if ( ((*(($3 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [-8])))
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $2
	$3 = $2
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	
.LOOP $label$9:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($2)) > (uint_32)[7]), [9301])
	CALL memcpy($7, *($2), [8])
	*($2) = (*($2) + [8])
	CALL $64($0, ($7 + [8]))
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	$4 = ((int_32)$3 / (int_32)[24])
	$5 = *($1 + [8])
	$6 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[24]))
	*($2) = $3
	*($2 + [4]) = $3
	$1 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	*($3) = *($4)
	CALL $81(($3 + [8]), ($4 + [8]))
	$3 = ($3 + [24])
	$4 = ($4 + [24])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$3 }
	*($2 + [4]) = $3
	
.LABEL $label$2
	CALL $75($0, $6, $5, $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	$3 = *($2 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($3 + [-24])
	if ( ((*(($3 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [-8])))
	
.LABEL $label$8
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$7 }
	$3 = *($2)
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($2 + [4]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $85($2)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $70(*($1), ($0 + [32]))
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	float_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	$4 = ($global$0 - [416])
	$global$0 = $4
	*($4 + [240]) = $2
	*($4 + [248]) = $1
	CALL require_auth($1)
	$5 = [0]
	*(($4 + [232])) = [0]
	*($4 + [216]) = (int_64)-1
	$1 = *($0)
	*($4 + [200]) = $1
	*($4 + [208]) = $1
	*($4 + [224]) = (int_64)0
	*($4 + [196]) = [0]
	*($4 + [192]) = ($4 + [200])
	$6 = [0]
	$7 = [0]
	$8 = CALL db_lowerbound_i64($1, $1, (int_64)4407066904498274304, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2(($4 + [200]), $8)
	$6 = *($4 + [196])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)$7), [8501])
	$1 = *(CALL $14(($4 + [192])))
	*($4 + [184]) = $1
	$2 = CALL current_time()
	$9 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((uint_32)(*($9) + [96]) + *($9 + [92])) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000))), [8389])
	*($4 + [176]) = (int_64)1397703940
	*($4 + [168]) = (int_64)0
	CALL eosio_assert([1], [9072])
	$1 = (int_64)5459781
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$6 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [9121])
	$10 = (($4 + [152]) | [4])
	*($4 + [152]) = $10
	*($4 + [156 align=4]) = (int_64)0
	*((($4 + [112]) + [32])) = [0]
	*($4 + [128]) = (int_64)-1
	*($4 + [136]) = (int_64)0
	*($4 + [112]) = *($0)
	*($4 + [120]) = *($9)
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)*($3)), [8518])
	$12 = *($3 + [4])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$10 }
	$13 = (($4 + [256]) + [72])
	$14 = (($4 + [352]) + [24])
	$15 = (($4 + [352]) + [16])
	$16 = (($4 + [352]) + [8])
	$17 = (($4 + [112]) + [28])
	$18 = ($4 + [108])
	$19 = ($4 + [404])
	$20 = ($4 + [412])
	
.LOOP $label$11:
	$1 = *($11)
	$6 = *($17)
	$8 = *((($4 + [112]) + [24]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$15:
	$5 = ($6 + [-24])
	$7 = *($5)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$14 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)($4 + [112])), [9227])
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	$5 = CALL db_find_i64(*($4 + [112]), *((($4 + [112]) + [8])), (int_64)-1932435666281431040, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $4(($4 + [112]), $5)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)($4 + [112])), [9227])
	
.LABEL $label$12
	$5 = [0]
	$21 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($21, [8546])
	$6 = ($7 + [24])
	CALL eosio_assert(((int_64)*($6) == (int_64)*((($4 + [168]) + [8]))), [9141])
	$1 = ((int_64)*($4 + [168]) + (int_64)*($7 + [16]))
	*($4 + [168]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($4 + [168]) < (int_64)4611686018427387904), [9203])
	$8 = ($7 + [8])
	*($4 + [72]) = $8
	CALL $30(($4 + [256]), ($4 + [152]), $8, [9918], ($4 + [72]), ($4 + [352]))
	$6 = *($4 + [256])
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($6 + [32]))), [9141])
	$1 = ((int_64)*($6) + (int_64)*($7 + [16]))
	*(($6 = ($6 + [24]))) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [9203])
	*(($22 = (($4 + [72]) + [24]))) = (int_64)0
	$1 = *($9)
	*($18) = [0]
	*(($23 = (($4 + [72]) + [16]))) = (int_64)-1
	*((($4 + [72]) + [32])) = [0]
	*(($24 = (($4 + [72]) + [8]))) = $1
	$2 = *($0)
	*($4 + [72]) = $2
	$6 = CALL db_find_i64($2, $1, (int_64)3607749779137757184, *($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	$5 = CALL $8(($4 + [72]), $6)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($4 + [72])), [9227])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9727])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($4 + [72])), [9762])
	CALL eosio_assert(((int_64)*($4 + [72]) == (int_64)CALL $fimport$6()), [9808])
	$6 = ($5 + [40])
	$1 = *($6)
	*($16) = (int_64))((int_64)0 - $1)
	$25 = ($5 + [48])
	*($15) = (int_64))((int_64)0 - *($25))
	$26 = ($5 + [64])
	*($14) = (int_64))((int_64)0 - *($26))
	*($6) = ((int_64)$1 + (int_64)-1)
	$8 = ($5 + [24])
	$1 = *($8)
	$27 = ((float_64)(CASTING float_64)(int_64 *(($7 + [16]))) * (float_64)(float_64)0.6666666666666666)
	if ( (((float_64)$27 < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$18 }
	$2 = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	$2 = (Rounds 0)($27)
	
.LABEL $label$17
	*($8) = (int_64))($1 - $2)
	*($4 + [352]) = (int_64))((int_64)0 - $1)
	$1 = *($5)
	CALL eosio_assert([1], [9859])
	*((($4 + [336]) + [8])) = $13
	*($4 + [340]) = ($4 + [256])
	*($4 + [336]) = ($4 + [256])
	*($4 + [384]) = ($4 + [336])
	*((($4 + [392]) + [8])) = $8
	*($19) = $6
	*((($4 + [392]) + [16])) = $25
	*($20) = $26
	*($4 + [396]) = ($5 + [8])
	*($4 + [392]) = $5
	CALL $21(($4 + [392]), ($4 + [384]))
	CALL db_update_i64(*($5 + [76]), (int_64)0, ($4 + [256]), [72])
	if ( (uint_64)($1 <= *($23)) ){ goto $label$19 }
	*($23) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($4 + [392]) = (int_64))((int_64)0 - *($8))
	if ( (CALL $86(($4 + [352]), ($4 + [392]), [8]) == 0) ){ goto $label$20 }
	$23 = ($5 + [80])
	$8 = *($23)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL db_idx64_find_primary(*($4 + [72]), *($24), (int_64)3607749779137757184, ($4 + [384]), $1)
	*($23) = $8
	
.LABEL $label$21
	CALL db_idx64_update($8, (int_64)0, ($4 + [392]))
	
.LABEL $label$20
	*($4 + [392]) = (int_64))((int_64)0 - *($6))
	if ( (CALL $86($16, ($4 + [392]), [8]) == 0) ){ goto $label$22 }
	$8 = ($5 + [84])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($4 + [72]), *($24), (int_64)3607749779137757185, ($4 + [384]), $1)
	*($8) = $6
	
.LABEL $label$23
	CALL db_idx64_update($6, (int_64)0, ($4 + [392]))
	
.LABEL $label$22
	*($4 + [392]) = (int_64))((int_64)0 - *($25))
	if ( (CALL $86($15, ($4 + [392]), [8]) == 0) ){ goto $label$24 }
	$8 = ($5 + [88])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$25 }
	$6 = CALL db_idx64_find_primary(*($4 + [72]), *($24), (int_64)3607749779137757186, ($4 + [384]), $1)
	*($8) = $6
	
.LABEL $label$25
	CALL db_idx64_update($6, (int_64)0, ($4 + [392]))
	
.LABEL $label$24
	*($4 + [392]) = (int_64))((int_64)0 - *($26))
	if ( (CALL $86($14, ($4 + [392]), [8]) == 0) ){ goto $label$26 }
	$6 = ($5 + [92])
	$5 = *($6)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$27 }
	$5 = CALL db_idx64_find_primary(*($4 + [72]), *($24), (int_64)3607749779137757187, ($4 + [384]), $1)
	*($6) = $5
	
.LABEL $label$27
	CALL db_idx64_update($5, (int_64)0, ($4 + [392]))
	
.LABEL $label$26
	$1 = *($4 + [248])
	*($4 + [260]) = $11
	*($4 + [256]) = ($4 + [248])
	CALL eosio_assert($21, [9727])
	CALL $31(($4 + [112]), $7, $1, ($4 + [256]))
	$7 = *($22)
	if ( ($7 == 0) ){ goto $label$28 }
	$8 = (($4 + [72]) + [28])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$30 }
	
.LOOP $label$31:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	CALL _ZdlPv($6)
	
.LABEL $label$32
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$31 }
	$5 = *($22)
	goto $label$29 
	
.LABEL $label$30
	$5 = $7
	
.LABEL $label$29
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$28
	$11 = ($11 + [24])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$11 }
	$12 = *(($3 + [4]))
	$27 = ((float_64)(CASTING float_64)(int_64 *($4 + [168])) * (float_64)(float_64)0.08333333333)
	if ( ((float_64)(float_64)|$27| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$28 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$10
	$28 = (int_64)0
	goto $label$7 
	
.LABEL $label$9
	$28 = (Rounds 0)($27)
	
.LABEL $label$8
	$11 = *($3)
	$9 = *($4 + [188])
	
.LABEL $label$7
	$1 = *((($4 + [168]) + [8]))
	*((($4 + [56]) + [8])) = $1
	$2 = *($4 + [168])
	*($4 + [56]) = $2
	$29 = *($9)
	*((($4 + [24]) + [8])) = $1
	*($4 + [24]) = $2
	CALL $19($0, *($4 + [248]), ($4 + [24]), $29, ((int_32)($12 - $11) / (int_32)[24]))
	CALL eosio_assert((uint_64)(((int_64)$28 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9072])
	$1 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$1 = $2
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$1 = $2
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$37 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$6 = [0]
	
.LABEL $label$33
	CALL eosio_assert($6, [9121])
	*((($4 + [8]) + [8])) = (int_64)1397703940
	*($4 + [48]) = (int_64)1397703940
	*($4 + [8]) = $28
	*($4 + [40]) = $28
	CALL $20($0, ($4 + [8]))
	$6 = *($4 + [152])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$38 }
	$11 = (($4 + [256]) + [32])
	$14 = (($4 + [336]) | [1])
	$25 = (($4 + [352]) + [8])
	$26 = ($4 + [100])
	$15 = ($4 + [296])
	$22 = ($4 + [92])
	
.LOOP $label$39:
	$8 = $6
	$27 = ((float_64)(CASTING float_64)(int_64 *($8 + [24])) * (float_64)(float_64)0.83333333334)
	if ( ((float_64)(float_64)|$27| < (float_64)(float_64)9223372036854775808) ){ goto $label$41 }
	$30 = (int_64)-9223372036854775808
	goto $label$40 
	
.LABEL $label$41
	$30 = (Rounds 0)($27)
	
.LABEL $label$40
	CALL eosio_assert((uint_64)(((int_64)$30 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9072])
	$1 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$1 = $2
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$1 = $2
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$46 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$6 = [0]
	
.LABEL $label$42
	CALL eosio_assert($6, [9121])
	$2 = *($0)
	$1 = (int_64)6
	
.LOOP $label$47:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$47 }
	*($25) = (int_64)3617214756542218240
	*($4 + [352]) = $2
	$1 = (int_64)0
	$28 = (int_64)59
	$5 = [8578]
	$29 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$53 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$6 = ($6 + [-91])
	goto $label$51 
	
.LABEL $label$53
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$49
	$5 = ($5 + [1])
	$28 = ((int_64)$28 + (int_64)4294967291)
	$29 = ((int_64)$2 | (int_64)$29)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$48 }
	$1 = (int_64)0
	$28 = (int_64)59
	$5 = [8590]
	$31 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$59 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$6 = ($6 + [-91])
	goto $label$57 
	
.LABEL $label$59
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$55
	$5 = ($5 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$31 = ((int_64)$2 | (int_64)$31)
	$28 = ((int_64)$28 + (int_64)4294967291)
	if ( ((int_64)$28 != (int_64)55834574842) ){ goto $label$54 }
	*(($6 = (($4 + [336]) + [8]))) = [0]
	*($4 + [336]) = (int_64)0
	$5 = CALL $87([8599])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$64 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$67 }
	*($4 + [336]) = ($5 << [1])
	$7 = $14
	if ( $5 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$23 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($23)
	*($6) = $7
	*($4 + [336]) = ($23 | [1])
	*($4 + [340]) = $5
	
.LABEL $label$66
	CALL memcpy($7, [8599], $5)
	
.LABEL $label$65
	*(($7 + $5)) = [0]
	$1 = *(($8 + [16]))
	*((($4 + [256]) + [16])) = $30
	*((($4 + [256]) + [24])) = (int_64)1397703940
	*($11) = *($4 + [336])
	*(($11 + [8])) = *($6)
	*((($4 + [256]) + [8])) = $1
	*($6) = [0]
	*($4 + [256]) = *($0)
	*($4 + [336]) = (int_64)0
	CALL $24(($4 + [392]), CALL $32(($4 + [72]), ($4 + [352]), $29, $31, ($4 + [256])))
	$5 = *($4 + [392])
	CALL send_inline($5, (*($4 + [396]) - $5))
	$5 = *($4 + [392])
	if ( ($5 == 0) ){ goto $label$68 }
	*($4 + [396]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$68
	$5 = *($26)
	if ( ($5 == 0) ){ goto $label$69 }
	*((($4 + [72]) + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$69
	$5 = *((($4 + [72]) + [16]))
	if ( ($5 == 0) ){ goto $label$70 }
	*($22) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$70
	if ( (*($11) & [1]) ){ goto $label$72 }
	if ( (*($4 + [336]) & [1]) ){ goto $label$71 }
	goto $label$63 
	
.LABEL $label$72
	CALL _ZdlPv(*($15))
	if ( ((*($4 + [336]) & [1]) == 0) ){ goto $label$63 }
	
.LABEL $label$71
	CALL _ZdlPv(*($6))
	$5 = *($8 + [4])
	if ( ($5 == 0) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	CALL $80(($4 + [336]))
	
.LABEL $label$63
	$5 = *($8 + [4])
	if ( $5 ){ goto $label$61 }
	
.LABEL $label$62
	$6 = *($8 + [8])
	if ( ((int_32)*($6) == (int_32)$8) ){ goto $label$60 }
	$7 = ($8 + [8])
	
.LOOP $label$73:
	$5 = *($7)
	$7 = ($5 + [8])
	$6 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($6)) ){ goto $label$73 }
	goto $label$60 
	
.LABEL $label$61
	
.LOOP $label$74:
	$6 = $5
	$5 = *($6)
	if ( $5 ){ goto $label$74 }
	
.LABEL $label$60
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$39 }
	$9 = *($4 + [188])
	
.LABEL $label$38
	*($4 + [268]) = $0
	*($4 + [260]) = ($4 + [248])
	*($4 + [256]) = ($4 + [168])
	*($4 + [264]) = ($4 + [240])
	*($4 + [272]) = ($4 + [184])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9727])
	CALL $33(($4 + [200]), $9, ($4 + [256]))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$75 }
	$8 = ($4 + [140])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$77 }
	
.LOOP $label$78:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$79 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($6 + [40])))
	
.LABEL $label$80
	CALL _ZdlPv($6)
	
.LABEL $label$79
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$78 }
	$5 = *(($4 + [136]))
	goto $label$76 
	
.LABEL $label$77
	$5 = $7
	
.LABEL $label$76
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$75
	CALL $34(($4 + [152]), *($4 + [156]))
	$7 = *($4 + [224])
	if ( ($7 == 0) ){ goto $label$81 }
	$8 = ($4 + [228])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$83 }
	
.LOOP $label$84:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$85 }
	CALL _ZdlPv($6)
	
.LABEL $label$85
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$84 }
	$5 = *(($4 + [224]))
	goto $label$82 
	
.LABEL $label$83
	$5 = $7
	
.LABEL $label$82
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$81
	$global$0 = ($4 + [416])
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [9762])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9808])
	$5 = *($1)
	*($1 + [24]) = *(*($2))
	$7 = *($2 + [4])
	$6 = *($1 + [80])
	*($1 + [80]) = ((int_64)$6 + (int_64)(CASTING uint_64)(uint_32 ((int_32)(*($7 + [4]) - *($7)) / (int_32)[12])))
	$8 = *($2 + [8])
	$9 = *($1 + [88])
	*($1 + [112]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_64)((uint_64)$6 / (uint_64)$9) == (int_64)((uint_64)*($1 + [80]) / (uint_64)*($1 + [88]))) ){ goto $label$1 }
	*($1 + [92]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	
.LABEL $label$1
	$10 = ($1 + [112])
	$11 = ($1 + [88])
	$12 = ($1 + [80])
	$13 = *(*($2))
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $9
	$14 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$14 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $14 ){ goto $label$6 }
	$14 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$14 = [0]
	
.LABEL $label$2
	CALL eosio_assert($14, [9121])
	$7 = *(($2 + [4]))
	$14 = *($7)
	$7 = *($7 + [4])
	$6 = *(*(*($2 + [12]) + [4]))
	*(($4 + [8])) = *((($4 + [40]) + [8]))
	*($4) = *($4 + [40])
	CALL $19($8, $13, $4, $6, ((int_32)($7 - $14) / (int_32)[12]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9859])
	$14 = $3
	$7 = ($14 + [-112])
	$global$0 = $7
	*($4 + [20]) = $7
	*($4 + [16]) = $7
	*($4 + [24]) = $14
	*($4 + [32]) = ($4 + [16])
	*($4 + [44]) = ($1 + [8])
	*($4 + [40]) = $1
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [32])
	*($4 + [56]) = ($1 + [40])
	*($4 + [60]) = ($1 + [56])
	*($4 + [64]) = ($1 + [72])
	*($4 + [68]) = $12
	*($4 + [72]) = $11
	*($4 + [76]) = ($1 + [92])
	*($4 + [80]) = ($1 + [96])
	*($4 + [84]) = ($1 + [104])
	*($4 + [88]) = $10
	CALL $39(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [120]), (int_64)0, $7, [112])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($4 + [96])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [12])) - *($1 + [8]))
	$4 = ((int_32)$3 / (int_32)[12])
	$5 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($2) = $3
	*($2 + [4]) = $3
	$1 = *(($1 + [12]))
	$4 = *(($1 + [8]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = CALL $81($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$3 }
	*($2 + [4]) = ($6 + [12])
	
.LABEL $label$2
	$3 = *($0 + [4])
	$1 = *($3 + [4])
	$4 = (*(*($0)) + int_32($1 >> [1]))
	$3 = *($3)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	$3 = *((*($4) + $3))
	
.LABEL $label$4
	CALL void $4((int_32 $5), (int_64 $2), (int_32 $3))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	$4 = *($2 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$9
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$8 }
	$3 = *($2)
	goto $label$6 
	
.LABEL $label$7
	$3 = $1
	
.LABEL $label$6
	*($2 + [4]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $85($2)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0)
	$4 = (int_64)6
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8578]
	$7 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$7 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$8 = ($8 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$2 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8590]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$13 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$8 = ($8 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$8 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [8974]
	$11 = (int_64)0
	
.LOOP $label$14:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$15 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$14 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$6 = CALL $87([8987])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($2 + [8]) = ($6 << [1])
	$8 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$12 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($12)
	*($2 + [8]) = ($12 | [1])
	*($2 + [16]) = $8
	*($2 + [12]) = $6
	
.LABEL $label$21
	CALL memcpy($8, [8987], $6)
	
.LABEL $label$20
	*(($8 + $6)) = [0]
	*((($2 + [24]) + [24])) = *(($1 + [8]))
	$6 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($6)
	*($6) = [0]
	*($2 + [32]) = $11
	*($2 + [72]) = $7
	*($2 + [80]) = $10
	*($2 + [24]) = *($0)
	*($2 + [40]) = *($1)
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $3
	*($6 + [8]) = (int_64)3617214756542218240
	*((($2 + [72]) + [36])) = [0]
	$8 = ($6 + [16])
	*((($2 + [72]) + [24])) = $8
	*(($2 + [92])) = $8
	*($2 + [88]) = $6
	*($2 + [100 align=4]) = (int_64)0
	$6 = *($2 + [56])
	$8 = ( *((($2 + [24]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$4 = (CASTING uint_64)(uint_32 $8)
	$8 = ($2 + [100])
	
.LOOP $label$23:
	$6 = ($6 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$23 }
	if ( ($6 == 0) ){ goto $label$25 }
	CALL $22($8, $6)
	$8 = *(($2 + [104]))
	$6 = *(($2 + [100]))
	goto $label$24 
	
.LABEL $label$25
	$8 = [0]
	$6 = [0]
	
.LABEL $label$24
	*($2 + [116]) = $6
	*($2 + [112]) = $6
	*($2 + [120]) = $8
	*($2 + [128]) = ($2 + [112])
	*($2 + [136]) = ($2 + [24])
	CALL $23(($2 + [136]), ($2 + [128]))
	CALL $24(($2 + [112]), ($2 + [72]))
	$6 = *($2 + [112])
	CALL send_inline($6, (*($2 + [116]) - $6))
	$6 = *($2 + [112])
	if ( ($6 == 0) ){ goto $label$26 }
	*($2 + [116]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$6 = *($2 + [100])
	if ( ($6 == 0) ){ goto $label$27 }
	*(($2 + [104])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$6 = *($2 + [88])
	if ( ($6 == 0) ){ goto $label$28 }
	*(($2 + [92])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( (*(($2 + [56])) & [1]) ){ goto $label$30 }
	if ( (*($2 + [8]) & [1]) ){ goto $label$29 }
	goto $label$18 
	
.LABEL $label$30
	CALL _ZdlPv(*(($2 + [64])))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$29
	CALL _ZdlPv(*(($2 + [16])))
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$19
	CALL $80(($2 + [8]))
	
.LABEL $label$18
	$global$0 = ($2 + [144])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $70(*($1), ($0 + [32]))
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $85($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [176])
	$global$0 = $3
	*($3 + [128]) = $1
	CALL require_auth($1)
	CALL eosio_assert((((int_32)(*($2 + [4]) - *($2)) / (int_32)[12]) <= [6]), [8353])
	$4 = [0]
	*((($3 + [88]) + [32])) = [0]
	*($3 + [104]) = (int_64)-1
	$1 = *($0)
	*($3 + [88]) = $1
	*($3 + [96]) = $1
	*($3 + [112]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)4407066904498274304, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL $2(($3 + [88]), $6)
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [8374])
	*($3 + [76]) = [0]
	*($3 + [72]) = ($3 + [88])
	$1 = *(CALL $14(($3 + [72])))
	*($3 + [80]) = $1
	$7 = CALL current_time()
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((uint_32)(*($8) + [96]) + *($8 + [92])) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000))), [8389])
	$1 = CALL current_time()
	CALL eosio_assert(((uint_32)*($8 + [112]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [8407])
	CALL eosio_assert(((int_64)*($8 + [104]) == (int_64)*($3 + [128])), [8451])
	*((($3 + [32]) + [32])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [32]) = *($0)
	*($3 + [40]) = *($8)
	$5 = *(($2 + [4]))
	$1 = *($8 + [80])
	$7 = *($8 + [88])
	$6 = *($2)
	*($3 + [24]) = (int_64)1397703940
	$9 = ((float_64)(CASTING float_64)(uint_64 ((uint_64)((int_64)((int_64)((uint_64)$1 / (uint_64)$7) * (int_64)4000) + (int_64)2000) / (uint_64)(CASTING uint_64)(uint_32 ((int_32)($5 - $6) / (int_32)[12])))) * (float_64)(float_64)1.5)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$1 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$1 = (Rounds 0)($9)
	
.LABEL $label$2
	*($3 + [16]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9072])
	$1 = (uint_64)*($3 + [24]) >> (uint_64)(int_64)8)
	
.LOOP $label$5:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $7
	$10 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = $7
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$7 }
	$10 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($10, [9121])
	$11 = *(($2 + [4]))
	$10 = *($2)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$8 }
	$12 = (($3 + [32]) + [24])
	$13 = ($3 + [12])
	$14 = ($3 + [64])
	$15 = ($3 + [60])
	
.LOOP $label$9:
	$4 = *($10)
	if ( ($4 & [1]) ){ goto $label$11 }
	$4 = uint_32($4 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$4 = *($10 + [4])
	
.LABEL $label$10
	CALL eosio_assert(($4 <= [21]), [8479])
	$1 = *($0)
	*($13) = $10
	*(($3 + [8])) = ($3 + [16])
	*($3 + [4]) = ($3 + [128])
	*($3) = ($3 + [32])
	*($3 + [168]) = $1
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$6()), [9624])
	*((($3 + [144]) + [8])) = ($3 + [168])
	*($3 + [148]) = $3
	*($3 + [144]) = ($3 + [32])
	*(($8 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$1 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $7
	$5 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$1 = $7
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$16 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$5 = [0]
	
.LABEL $label$12
	CALL eosio_assert($5, [9121])
	*($8 + [40]) = [0]
	*($8 + [32 align=4]) = (int_64)0
	*($8 + [44]) = ($3 + [32])
	CALL $26(($3 + [144]), $8)
	*($3 + [160]) = $8
	$1 = *($8)
	*($3 + [144]) = $1
	$5 = *($8 + [48])
	*($3 + [140]) = $5
	$4 = *($15)
	if ( ((uint_32)$4 >= (uint_32)*($14)) ){ goto $label$20 }
	*($4 + [8]) = $1
	*($4 + [16]) = $5
	*($3 + [160]) = [0]
	*($4) = $8
	*($15) = ($4 + [24])
	$4 = *($3 + [160])
	*($3 + [160]) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $27($12, ($3 + [160]), ($3 + [144]), ($3 + [140]))
	$4 = *($3 + [160])
	*($3 + [160]) = [0]
	if ( $4 ){ goto $label$18 }
	
.LABEL $label$19
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$9 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$21
	CALL _ZdlPv($4)
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$9 }
	
.LABEL $label$17
	$8 = *($3 + [84])
	
.LABEL $label$8
	*($3 + [4]) = $2
	*($3 + [8]) = $0
	*($3) = ($3 + [128])
	*($3 + [12]) = ($3 + [80])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9727])
	CALL $28(($3 + [88]), $8, $3)
	$6 = *($3 + [56])
	if ( ($6 == 0) ){ goto $label$22 }
	$8 = ($3 + [60])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$26 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$27
	CALL _ZdlPv($5)
	
.LABEL $label$26
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($3 + [56]))
	goto $label$23 
	
.LABEL $label$24
	$4 = $6
	
.LABEL $label$23
	*($8) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$6 = *($3 + [112])
	if ( ($6 == 0) ){ goto $label$28 }
	$8 = ($3 + [116])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$30 }
	
.LOOP $label$31:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$32 }
	CALL _ZdlPv($5)
	
.LABEL $label$32
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$31 }
	$4 = *(($3 + [112]))
	goto $label$29 
	
.LABEL $label$30
	$4 = $6
	
.LABEL $label$29
	*($8) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$global$0 = ($3 + [176])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9221])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9221])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $60(CALL $59($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-1932435666281431040, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $4($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $68(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9675])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$8 = ($1 + [32])
	CALL $82($8, *($5 + [12]))
	$5 = *($1 + [32])
	$6 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	$9 = ($1 + [16])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $88($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $9
	*($3 + [44]) = $8
	CALL $69(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)-1932435666281431040, *(*($0 + [8])), $7, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91($6)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $70(*($1), *($0 + [12]))
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [48]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9576])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-1932435666281431040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9522])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9522])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $4(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9518])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $22($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9301])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $65($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $84($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $84($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $80($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *($7 + [80])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757184, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($8)
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [84]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757185, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($8)
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [88]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757186, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($8)
	
.LABEL $label$5
	$8 = *($0)
	$6 = *($8 + [4])
	$0 = *(($6 + [92]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($8)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757187, ($5 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9301])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9301])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9301])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9301])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9221])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9221])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $64(*($1), *($0 + [12]))
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9121])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($0 + [44]) = $1
	*($3 + [8]) = *($2 + [4])
	*($3 + [20]) = ($0 + [8])
	*($3 + [16]) = $0
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [32])
	CALL $63(($3 + [16]), ($3 + [8]))
	*($0 + [48]) = *(*($2 + [8]))
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $90($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8233])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $88 (int_32 $0)
{
	return CALL $89([10024], $0)
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $85 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $83($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9301])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9301])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $64(*($1), *($0 + [12]))
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9221])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9221])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $88($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10012])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $88($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [16]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [24])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $85($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[24]))
	$5 = ($4 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [16]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$10 }
	$9 = ($3 - $6)
	$3 = [0]
	
.LOOP $label$11:
	$2 = ($6 + $3)
	*((($1 = ($5 + $3)) + [-24])) = *(($2 + [-24]))
	$4 = ($2 + [-8])
	*(($1 + [-8])) = *($4)
	$1 = ($2 + [-16])
	*(($1 + [-16])) = *($1)
	*($1) = (int_64)0
	*($4) = [0]
	$3 = ($3 + [-24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$11 }
	$5 = ($5 + $3)
	$3 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($3 + [-24])
	if ( ((*(($3 + [-16])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-8])))
	
.LABEL $label$14
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9221])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9221])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9221])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9221])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9221])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8622])
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $3
	$0 = CALL db_find_i64($5, $3, (int_64)-5001621371248181248, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $6(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [9227])
	CALL eosio_assert([1], [9727])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [9762])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$6()), [9808])
	*($0 + [8]) = ((int_64)*($0 + [8]) + (int_64)1)
	$1 = *($0)
	CALL eosio_assert([1], [9859])
	CALL eosio_assert([1], [9221])
	CALL memcpy(($4 + [48]), $0, [8])
	CALL eosio_assert([1], [9221])
	CALL memcpy((($4 + [48]) | [8]), ($0 + [8]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$6 = *($4 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$6()), [9624])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = (int_64)1
	*($0) = $1
	CALL eosio_assert([1], [9221])
	CALL memcpy(($4 + [48]), $0, [8])
	CALL eosio_assert([1], [9221])
	CALL memcpy((($4 + [48]) | [8]), ($0 + [8]), [8])
	$1 = *($0)
	$6 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)-5001621371248181248, $2, $1, ($4 + [48]), [16])
	*($0 + [20]) = $6
	$7 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [72]) = $0
	$1 = *($0)
	*($4 + [48]) = $1
	*($4 + [68]) = $6
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($4 + [72]) = [0]
	*($7) = $0
	*($8) = ($7 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $37(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $6
	
.LABEL $label$8
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $91($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $22($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $35(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	float_64 $9
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [9762])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9808])
	$5 = *($2 + [12])
	$6 = *($1)
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [16]))), [9141])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($7))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9184])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9203])
	*($1 + [24]) = *(*($2 + [4]))
	$9 = ((float_64)((float_64)(CASTING float_64)(int_64 *(*($2))) * (float_64)(float_64)0.08333333333) + (float_64)(CASTING float_64)(int_64 *($1 + [56])))
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$8 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$8 = (Rounds 0)($9)
	
.LABEL $label$1
	*($1 + [56]) = $8
	if ( (CALL is_account(*(*($2 + [8]))) == 0) ){ goto $label$4 }
	CALL $36($5, *(*(($2 + [8]))), *(*(($2 + [4]))), *(*(*($2 + [16]) + [4])))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$7 = ($1 + [32])
	goto $label$3 
	
.LABEL $label$4
	$7 = ($1 + [32])
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9859])
	$3 = $3
	$2 = ($3 + [-112])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = $7
	*($4 + [40]) = ($1 + [40])
	*($4 + [44]) = ($1 + [56])
	*($4 + [48]) = ($1 + [72])
	*($4 + [52]) = ($1 + [80])
	*($4 + [56]) = ($1 + [88])
	*($4 + [60]) = ($1 + [92])
	*($4 + [64]) = ($1 + [96])
	*($4 + [68]) = ($1 + [104])
	*($4 + [72]) = ($1 + [112])
	CALL $39(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [120]), (int_64)0, $2, [112])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($1 + [4])
	$9 = *($6 + [16])
	$8 = *($2)
	if ( (uint_64)($8 <= $9) ){ goto $label$2 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($1 + [4])
	$10 = [20]
	goto $label$1 
	
.LABEL $label$2
	$10 = [19]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$39 
	
.LABEL $label$41
	if ( ((uint_64)$9 >= (uint_64)$8) ){ goto $label$16 }
	$10 = [18]
	goto $label$4 
	
.LABEL $label$40
	$7 = ($6 + [4])
	$2 = *($6 + [4])
	if ( ($2 == 0) ){ goto $label$19 }
	$10 = [0]
	goto $label$4 
	
.LABEL $label$39
	$6 = $7
	$10 = [1]
	goto $label$4 
	
.LABEL $label$38
	$7 = $6
	$6 = $2
	$9 = *($6 + [16])
	if ( ((uint_64)$8 >= (uint_64)$9) ){ goto $label$20 }
	$10 = [19]
	goto $label$4 
	
.LABEL $label$37
	$2 = *($6)
	if ( $2 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$36
	$7 = $6
	$10 = [3]
	goto $label$4 
	
.LABEL $label$35
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$15 }
	$10 = [4]
	goto $label$4 
	
.LABEL $label$34
	*($0 + [4]) = [0]
	*($0) = $2
	return 
	
.LABEL $label$33
	*(($11 = CALL _Znwj([40])) + [16]) = *(*($4))
	*($11 + [24]) = (int_64)0
	*($11 + [32]) = (int_64)1397703940
	CALL eosio_assert([1], [9072])
	$8 = (int_64)5459781
	$2 = [0]
	$10 = [6]
	goto $label$4 
	
.LABEL $label$32
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = [12]
	goto $label$4 
	
.LABEL $label$31
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$10 = [13]
	goto $label$4 
	
.LABEL $label$30
	$8 = $9
	$4 = [1]
	$12 = $2
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$29
	$8 = $9
	$10 = [15]
	goto $label$4 
	
.LABEL $label$28
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$10 = [16]
	goto $label$4 
	
.LABEL $label$27
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$12 = ($2 + [1])
	$2 = $12
	if ( $4 ){ goto $label$5 }
	$10 = [17]
	goto $label$4 
	
.LABEL $label$26
	$4 = [1]
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$25
	$4 = [0]
	$10 = [8]
	goto $label$4 
	
.LABEL $label$24
	CALL eosio_assert($4, [9121])
	*($11 + [8]) = $6
	*($11) = (int_64)0
	*($7) = $11
	$6 = *(*($1))
	if ( ($6 == 0) ){ goto $label$8 }
	$10 = [9]
	goto $label$4 
	
.LABEL $label$23
	*($1) = $6
	$6 = *($7)
	goto $label$7 
	
.LABEL $label$22
	$6 = $11
	$10 = [10]
	goto $label$4 
	
.LABEL $label$21
	CALL $71(*($1 + [4]), $6)
	*($1 + [8]) = (*($1 + [8]) + [1])
	*($0 + [4]) = [1]
	*($0) = $11
	return 
	
.LABEL $label$20
	$10 = [2]
	goto $label$4 
	
.LABEL $label$19
	$10 = [3]
	goto $label$4 
	
.LABEL $label$18
	$10 = [20]
	goto $label$4 
	
.LABEL $label$17
	$10 = [1]
	goto $label$4 
	
.LABEL $label$16
	$10 = [3]
	goto $label$4 
	
.LABEL $label$15
	$10 = [5]
	goto $label$4 
	
.LABEL $label$14
	$10 = [6]
	goto $label$4 
	
.LABEL $label$13
	$10 = [8]
	goto $label$4 
	
.LABEL $label$12
	$10 = [6]
	goto $label$4 
	
.LABEL $label$11
	$10 = [8]
	goto $label$4 
	
.LABEL $label$10
	$10 = [7]
	goto $label$4 
	
.LABEL $label$9
	$10 = [7]
	goto $label$4 
	
.LABEL $label$8
	$10 = [11]
	goto $label$4 
	
.LABEL $label$7
	$10 = [10]
	goto $label$4 
	
.LABEL $label$6
	$10 = [14]
	goto $label$4 
	
.LABEL $label$5
	$10 = [15]
	goto $label$4 
	$10
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	float_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [9762])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9808])
	*($1 + [8]) = *(*($3))
	$6 = ((float_64)(CASTING float_64)(int_64 *($1 + [16])) * (float_64)(float_64)1.5)
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$7 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$7 = (Rounds 0)($6)
	
.LABEL $label$1
	*($1 + [16]) = $7
	$8 = *($1)
	$9 = ($1 + [32])
	CALL $82($9, (*($3 + [4]) + [8]))
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9859])
	$3 = *($1 + [32])
	$10 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [32])
	$7 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $88($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	CALL $69(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}