(data (i32.const 4) "\d0e\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "onerror\00")
(data (i32.const 64) "eosio\00")
(data (i32.const 80) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 144) "income\00")
(data (i32.const 160) "DONT DO THAT\00")
(data (i32.const 176) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 240) "invalid symbol name\00")
(data (i32.const 272) "read\00")
(data (i32.const 288) "get\00")
(data (i32.const 304) "memo has more than 256 bytes\00")
(data (i32.const 336) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 400) "cannot pass end iterator to modify\00")
(data (i32.const 448) "cannot create objects in table of another contract\00")
(data (i32.const 512) "write\00")
(data (i32.const 528) "attempt to add asset with different symbol\00")
(data (i32.const 576) "addition underflow\00")
(data (i32.const 608) "addition overflow\00")
(data (i32.const 640) "object passed to modify is not in multi_index\00")
(data (i32.const 688) "cannot modify objects in table of another contract\00")
(data (i32.const 752) "updater cannot change primary key when modifying an object\00")
(data (i32.const 816) "error reading iterator\00")
(data (i32.const 848) "Account doesn\'t exists\00")
(data (i32.const 880) "attempt to subtract asset with different symbol\00")
(data (i32.const 928) "subtraction underflow\00")
(data (i32.const 960) "subtraction overflow\00")
(data (i32.const 992) "Overdrawn balance\00")
(data (i32.const 1024) "EOS\00")
(data (i32.const 1040) "ETL\00")
(data (i32.const 1056) "This symbol not support\00")
(data (i32.const 1088) "invalid quantity\00")
(data (i32.const 1120) "must transfer positive quantity\00")
(data (i32.const 1152) "active\00")
(data (i32.const 1168) "No Account found\00")
(data (i32.const 9584) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "assert_recover_key" (func $fimport$2 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$9 (param i32 i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "require_auth2" (func $fimport$14 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "sha256" (func $fimport$17 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $83))
(export "free" (func $86))
(export "memcmp" (func $93))
(export "strlen" (func $94))
(export "strncpy" (func $95))
(export "__stpncpy" (func $96))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $97 $6 $12 $20 $14 $10 $16 $8 $18)



int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC strncpy (int_32 $0, int_32 $1, int_32 $2)
{
	CALL __stpncpy($0, $1, $2)
	return $0
}

int_32 .FUNC __stpncpy (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((((int_32)$1 ^ (int_32)$0) & [3]) == 0) ){ goto $label$4 }
	$4 = $2
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( (($1 & [3]) == 0) ){ goto $label$8 }
	
.LOOP $label$10:
	$4 = *($1)
	*($0) = $4
	if ( ($4 == 0) ){ goto $label$6 }
	$3 = ((int_32)$2 != (int_32)[1])
	$0 = ($0 + [1])
	$4 = ($2 + [-1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $4
	if ( ($1 & [3]) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$4 = $2
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	if ( (*($1) == 0) ){ goto $label$2 }
	if ( ($4 <= [4]) ){ goto $label$3 }
	
.LOOP $label$11:
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$3 }
	*($0) = $2
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	$4 = ($4 + [-4])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$3
	$5 = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LOOP $label$12:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	CALL memset($0, [0], $5)
	return $0
}

void .FUNC $97 ()
{
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $87(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $88($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $87($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[33]), [272])
	CALL memcpy(($1 + [8]), *($0 + [4]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $92(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $92(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $43 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [240])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [176])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [240])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$0 = *($0)
	$2 = *($0 + [8])
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$2 == (int_64)*(($1 + [32]))), [880])
	$2 = (int_64)
	*($1 + [24]) = $2(*($1 + [24]) - *($0)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [928])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [960])
	$0 = ($1 + [8])
	$3 = ($1 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$2 == (int_64)*(($1 + [16]))), [880])
	$2 = (int_64)
	*($1 + [8]) = $2(*($1 + [8]) - *($0)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [928])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [960])
	$3 = ($1 + [24])
	$0 = ($1 + [8])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)((int_64)*($0) | (int_64)*($3)) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [992])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	$4 = *($1)
	CALL $41($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [752])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $42(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [32]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = *($1 + [8])
	if ( (*($2) & [1]) ){ goto $label$2 }
	$6 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [8])
	
.LABEL $label$1
	$2 = [-1]
	
.LOOP $label$3:
	$5 = ($6 + $2)
	$4 = ($2 + [1])
	$2 = $4
	if ( *(($5 + [1])) ){ goto $label$3 }
	if ( ($4 == 0) ){ goto $label$5 }
	$7 = (CASTING uint_64)(uint_32 $4)
	$8 = (int_64)8
	$9 = (int_64)0
	
.LOOP $label$6:
	$2 = *($6)
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$8 & (int_64)4294967288)) | (int_64)$9)
	
.LABEL $label$7
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)8)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$9 = (int_64)0
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$3 == (int_64)((int_64)$9 | (int_64)4)), [1056])
	$6 = [0]
	$7 = *($1)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [1088])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1120])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $87(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $88($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $88($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [56]) = $1
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	$1 = *($0)
	*($5 + [16]) = $1
	*($5 + [24]) = $1
	*($5 + [40]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)8419268397136609280, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $72(($5 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($5 + [16])), [336])
	CALL require_auth(*($3 + [8]))
	$1 = *($0)
	*($5) = ($5 + [56])
	CALL eosio_assert([1], [400])
	CALL $75(($5 + [16]), $3, $1, $5)
	$2 = *($5 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL require_auth(*($0))
	$1 = *($0)
	*($5 + [8]) = ($5 + [56])
	CALL $76($5, ($5 + [16]), $1, ($5 + [8]))
	$2 = *($5 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $88($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $88($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [272])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $6 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [192])
	*([0] + [4]) = $12
	CALL $78(($12 + [144]))
	$9 = *($0)
	if ( ((int_64)*($12 + [144]) == (int_64)$9) ){ goto $label$2 }
	if ( ((int_64)*($12 + [152]) != (int_64)$9) ){ goto $label$2 }
	*((($12 + [128]) + [8])) = *(($12 + [168]))
	*((($12 + [112]) + [8])) = [0]
	*($12 + [128]) = *($12 + [160])
	*($12 + [112]) = (int_64)0
	$7 = CALL strlen([1024])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($12 + [112]) = ($7 << [1])
	$6 = (($12 + [112]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($7 + [16]) & [-16])
	$6 = CALL $87($4)
	*($12 + [112]) = ($4 | [1])
	*($12 + [120]) = $6
	*($12 + [116]) = $7
	
.LABEL $label$4
	CALL memcpy($6, [1024], $7)
	
.LABEL $label$3
	*(($6 + $7)) = [0]
	*((($12 + [8]) + [8])) = *((($12 + [128]) + [8]))
	*($12 + [8]) = *($12 + [128])
	CALL $46($0, ($12 + [8]), ($12 + [112]))
	if ( ((*($12 + [112]) & [1]) == 0) ){ goto $label$6 }
	CALL $88(*($12 + [120]))
	
.LABEL $label$6
	*(($12 + [104])) = [0]
	*($12 + [88]) = (int_64)-1
	$8 = (int_64)0
	*($12 + [96]) = (int_64)0
	$9 = *($0)
	*($12 + [72]) = $9
	*($12 + [80]) = $9
	$2 = ($12 + [177])
	$6 = ( *(($12 + [184])) ? $2 : (*($12 + [176]) & [1]) )
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$7 }
	$6 = ($6 + [1])
	$4 = [0]
	
.LOOP $label$8:
	$4 = ((int_32(($7 << [24]) >> [24]) + ((int_32)$4 * (int_32)[10])) + [-48])
	$7 = *($6)
	$6 = ($6 + [1])
	if ( $7 ){ goto $label$8 }
	$8 = (CASTING int_64)(int_32 $4)
	
.LABEL $label$7
	$5 = [0]
	$7 = CALL db_find_i64($9, $9, (int_64)-9026212813717995520, $8)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $30(($12 + [72]), $7)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)($12 + [72])), [336])
	
.LABEL $label$9
	*((($12 + [32]) + [32])) = [0]
	*($12 + [48]) = (int_64)-1
	*($12 + [56]) = (int_64)0
	$1 = *($0)
	*($12 + [32]) = $1
	*($12 + [40]) = $1
	$7 = ( *(($12 + [184])) ? $2 : (*((($12 + [144]) + [32])) & [1]) )
	$6 = [-1]
	
.LOOP $label$10:
	$4 = ($7 + $6)
	$2 = ($6 + [1])
	$6 = $2
	if ( *(($4 + [1])) ){ goto $label$10 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$11:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$3) ){ goto $label$12 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$16 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$15 
	
.LABEL $label$16
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$15
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	$7 = [0]
	$6 = CALL db_find_i64($1, $1, (int_64)-7375590407258106880, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	$7 = CALL $39(($12 + [32]), $6)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($12 + [32])), [336])
	
.LABEL $label$17
	if ( ($5 == 0) ){ goto $label$20 }
	$9 = *($0)
	*($12 + [24]) = ($12 + [144])
	CALL eosio_assert([1], [400])
	CALL $79(($12 + [72]), $5, $9, ($12 + [24]))
	$4 = *($12 + [56])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ($7 == 0) ){ goto $label$21 }
	$9 = *($0)
	*($12 + [24]) = ($12 + [144])
	CALL eosio_assert([1], [400])
	CALL $80(($12 + [32]), $7, $9, ($12 + [24]))
	$4 = *($12 + [56])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	CALL eosio_assert([0], [1168])
	$4 = *($12 + [56])
	if ( ($4 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$2 = ($12 + [60])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	CALL $88($6)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$24 }
	$7 = *(($12 + [56]))
	goto $label$22 
	
.LABEL $label$23
	$7 = $4
	
.LABEL $label$22
	*($2) = $4
	CALL $88($7)
	
.LABEL $label$18
	$4 = *($12 + [96])
	if ( ($4 == 0) ){ goto $label$2 }
	$2 = ($12 + [100])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$27 }
	
.LOOP $label$28:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$29 }
	CALL $88($6)
	
.LABEL $label$29
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$28 }
	$7 = *(($12 + [96]))
	goto $label$26 
	
.LABEL $label$27
	$7 = $4
	
.LABEL $label$26
	*($2) = $4
	CALL $88($7)
	
.LABEL $label$2
	if ( ((*($12 + [176]) & [1]) == 0) ){ goto $label$30 }
	CALL $88(*(($12 + [184])))
	
.LABEL $label$30
	*([0] + [4]) = ($12 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $89(($12 + [112]))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	*($9 + [152]) = [3]
	*($9 + [144]) = $0
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [1]
	*($9) = *($9 + [136])
	CALL $7(($9 + [144]), $9)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$22 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [80])
	goto $label$7 
	
.LABEL $label$21
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$33 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$34 }
	CALL eosio_assert(((int_64)$1 != (int_64)$0), [160])
	goto $label$7 
	
.LABEL $label$34
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-3617168760269127681) ){ goto $label$47 }
	if ( ((int_64)$2 > (int_64)-4417211348815970305) ){ goto $label$46 }
	if ( ((int_64)$2 == (int_64)-7807104303256043520) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-7807102653988601856) ){ goto $label$7 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [2]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $13(($9 + [144]), ($9 + [24]))
	goto $label$7 
	
.LABEL $label$47
	if ( ((int_64)$2 > (int_64)-3617168760267554817) ){ goto $label$45 }
	if ( ((int_64)$2 == (int_64)-3617168760269127680) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-3617168760267603968) ){ goto $label$7 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [3]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $21(($9 + [144]), ($9 + [56]))
	goto $label$7 
	
.LABEL $label$46
	if ( ((int_64)$2 == (int_64)-4417211348815970304) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-3617168760269176832) ){ goto $label$7 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $15(($9 + [144]), ($9 + [32]))
	goto $label$7 
	
.LABEL $label$45
	if ( ((int_64)$2 == (int_64)-3617168760267554816) ){ goto $label$41 }
	if ( ((int_64)$2 != (int_64)8417589614679687168) ){ goto $label$7 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [1]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $7(($9 + [144]), ($9 + [64]))
	goto $label$7 
	
.LABEL $label$44
	*($9 + [124]) = [0]
	*($9 + [120]) = [5]
	*($9 + [16 align=4]) = *($9 + [120])
	CALL $11(($9 + [144]), ($9 + [16]))
	goto $label$7 
	
.LABEL $label$43
	*($9 + [100]) = [0]
	*($9 + [96]) = [6]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $17(($9 + [144]), ($9 + [40]))
	goto $label$7 
	
.LABEL $label$42
	*($9 + [132]) = [0]
	*($9 + [128]) = [7]
	*($9 + [8 align=4]) = *($9 + [128])
	CALL $9(($9 + [144]), ($9 + [8]))
	goto $label$7 
	
.LABEL $label$41
	*($9 + [92]) = [0]
	*($9 + [88]) = [8]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $19(($9 + [144]), ($9 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [160])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [1344])
	*([0] + [4]) = $13
	CALL require_auth($7)
	*(($13 + [496])) = [0]
	*($13 + [480]) = (int_64)-1
	*($13 + [488]) = (int_64)0
	$8 = *($0)
	*($13 + [464]) = $8
	*($13 + [472]) = $8
	$12 = [0]
	$9 = *($1 + [6])
	$9 = *($1 + [4])
	$9 = *($1 + [3])
	$9 = *($1 + [1])
	$9 = *($1 + [2])
	$9 = *($1 + [5])
	$9 = CALL db_find_i64($8, $8, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [4]) + ( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) )) + (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [8])) + (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $30(($13 + [464]), $9)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)($13 + [464])), [336])
	
.LABEL $label$1
	CALL memcpy(($13 + [430]), $1, [34])
	CALL memcpy(($13 + [396]), $2, [34])
	*(($9 = (($13 + [376]) + [8]))) = *(($3 + [8]))
	*($13 + [376]) = *($3)
	CALL $92(($13 + [360]), $4)
	*(($10 = (($13 + [344]) + [8]))) = *(($5 + [8]))
	*($13 + [344]) = *($5)
	$8 = *($12 + [48])
	CALL memcpy(($13 + [278]), $6, [66])
	CALL memcpy(($13 + [616]), ($13 + [278]), [66])
	*((($13 + [600]) + [8])) = *($10)
	*((($13 + [584]) + [8])) = *($9)
	*($13 + [600]) = *($13 + [344])
	*($13 + [584]) = *($13 + [376])
	CALL memcpy(($13 + [544]), ($13 + [396]), [34])
	CALL memcpy(($13 + [504]), ($13 + [430]), [34])
	*($13 + [1336]) = $8
	$5 = CALL strncpy(($13 + [1072]), ( *($13 + [368]) ? (($13 + [360]) | [1]) : (*($13 + [360]) & [1]) ), [256])
	*($13 + [1327]) = [0]
	CALL memcpy(($13 + [688]), ($13 + [504]), [34])
	CALL memcpy((($13 + [688]) + [34]), ($13 + [544]), [34])
	CALL memcpy(($13 + [756]), ($13 + [584]), [8])
	CALL memcpy(($13 + [764]), $5, [256])
	CALL memcpy(($13 + [1020]), ($13 + [600]), [8])
	CALL memcpy(($13 + [1028]), ($13 + [1336]), [8])
	CALL sha256(($13 + [688]), [348], ($13 + [1040]))
	CALL assert_recover_key(($13 + [1040]), ($13 + [616]), [66], ($13 + [504]), [34])
	if ( ((*($13 + [360]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*(($13 + [368])))
	
.LABEL $label$2
	$5 = ($3 + [8])
	$8 = *($5)
	*((($13 + [256]) + [8])) = $8
	$11 = *($3)
	*((($13 + [112]) + [8])) = $8
	*($13 + [256]) = $11
	*($13 + [116]) = *($13 + [260])
	*($13 + [112]) = *($13 + [256])
	CALL $27($0, ($13 + [112]))
	CALL $92(($13 + [240]), $4)
	$4 = *($13 + [240])
	CALL eosio_assert((( *($13 + [244]) ? uint_32($4 >> [1]) : ($4 & [1]) ) <= [257]), [304])
	if ( ((*($13 + [240]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($13 + [248]))
	
.LABEL $label$3
	CALL memcpy(($13 + [200]), $1, [34])
	*(($1 = (($13 + [184]) + [8]))) = *($5)
	*($13 + [184]) = *($3)
	CALL memcpy(($13 + [78]), ($13 + [200]), [34])
	*((($13 + [56]) + [8])) = *($1)
	*($13 + [56]) = *($13 + [184])
	CALL $64($0, ($13 + [78]), ($13 + [56]), $7, [1])
	CALL memcpy(($13 + [144]), $2, [34])
	*(($1 = (($13 + [128]) + [8]))) = *($5)
	*($13 + [128]) = *($3)
	CALL memcpy(($13 + [22]), ($13 + [144]), [34])
	*(($13 + [8])) = *($1)
	*($13) = *($13 + [128])
	CALL $29($0, ($13 + [22]), $13, $7, [0])
	$0 = *($13 + [488])
	if ( ($0 == 0) ){ goto $label$4 }
	$2 = ($13 + [492])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $88($3)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($13 + [488]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $0
	
.LABEL $label$5
	*($2) = $0
	CALL $88($1)
	
.LABEL $label$4
	*([0] + [4]) = ($13 + [1344])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [224])
	*([0] + [4]) = $2
	*(($3 = $2) + [220]) = $0
	*($3 + [208]) = *($1)
	*($3 + [212]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $67(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [208])
	*($3) = ($3 + [220])
	CALL $68($3, ($3 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $88(*($3 + [104]))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [224])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [1184])
	*([0] + [4]) = $17
	CALL require_auth($7)
	*(($17 + [392])) = [0]
	*($17 + [376]) = (int_64)-1
	*($17 + [384]) = (int_64)0
	$13 = *($0)
	*($17 + [360]) = $13
	*($17 + [368]) = $13
	$11 = [0]
	$9 = *($1 + [6])
	$9 = *($1 + [4])
	$9 = *($1 + [3])
	$9 = *($1 + [1])
	$9 = *($1 + [2])
	$9 = *($1 + [5])
	$9 = CALL db_find_i64($13, $13, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [4]) + ( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) )) + (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [8])) + (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($9 + [256]) ? $9 : ((int_32)$9 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $30(($17 + [360]), $9)
	CALL eosio_assert(((int_32)*($11 + [88]) == (int_32)($17 + [360])), [336])
	
.LABEL $label$1
	CALL memcpy(($17 + [326]), $1, [34])
	*(($9 = (($17 + [304]) + [8]))) = *(($3 + [8]))
	*($17 + [304]) = *($3)
	CALL $92(($17 + [288]), $4)
	*(($10 = (($17 + [272]) + [8]))) = *(($5 + [8]))
	*($17 + [272]) = *($5)
	$13 = *($11 + [48])
	CALL memcpy(($17 + [206]), $6, [66])
	CALL memcpy(($17 + [472]), ($17 + [206]), [66])
	*((($17 + [456]) + [8])) = *($10)
	*((($17 + [440]) + [8])) = *($9)
	*($17 + [456]) = *($17 + [272])
	*($17 + [440]) = *($17 + [304])
	CALL memcpy(($17 + [400]), ($17 + [326]), [34])
	*($17 + [1176]) = $2
	*($17 + [1168]) = $13
	$5 = CALL strncpy(($17 + [912]), ( *($17 + [296]) ? (($17 + [288]) | [1]) : (*($17 + [288]) & [1]) ), [256])
	*($17 + [1167]) = [0]
	CALL memcpy(($17 + [544]), ($17 + [400]), [34])
	CALL memcpy((($17 + [544]) + [34]), ($17 + [1176]), [8])
	CALL memcpy(($17 + [586]), ($17 + [440]), [8])
	CALL memcpy(($17 + [594]), $5, [256])
	CALL memcpy(($17 + [850]), ($17 + [456]), [8])
	CALL memcpy(($17 + [858]), ($17 + [1168]), [8])
	CALL sha256(($17 + [544]), [322], ($17 + [880]))
	CALL assert_recover_key(($17 + [880]), ($17 + [472]), [66], ($17 + [400]), [34])
	if ( ((*($17 + [288]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*(($17 + [296])))
	
.LABEL $label$2
	$5 = ($3 + [8])
	$13 = *($5)
	*((($17 + [184]) + [8])) = $13
	$12 = *($3)
	*((($17 + [80]) + [8])) = $13
	*($17 + [184]) = $12
	*($17 + [84]) = *($17 + [188])
	*($17 + [80]) = *($17 + [184])
	$9 = CALL $27($0, ($17 + [80]))
	CALL $92(($17 + [168]), $4)
	$11 = *($17 + [168])
	CALL eosio_assert((( *($17 + [172]) ? uint_32($11 >> [1]) : ($11 & [1]) ) <= [257]), [304])
	if ( ((*($17 + [168]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($17 + [176]))
	
.LABEL $label$3
	CALL memcpy(($17 + [128]), $1, [34])
	*(($1 = (($17 + [112]) + [8]))) = *($5)
	*($17 + [112]) = *($3)
	CALL memcpy(($17 + [46]), ($17 + [128]), [34])
	*((($17 + [24]) + [8])) = *($1)
	*($17 + [24]) = *($17 + [112])
	CALL $64($0, ($17 + [46]), ($17 + [24]), $7, [1])
	if ( ($9 == 0) ){ goto $label$8 }
	$8 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$1 = [1152]
	$14 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$14 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$0 = ($0 + [165])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$10
	$1 = ($1 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$7 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	$13 = (int_64)0
	$12 = (int_64)59
	$1 = [16]
	$15 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$20 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$0 = ($0 + [165])
	goto $label$18 
	
.LABEL $label$20
	$7 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$16
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$15 = ((int_64)$7 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$15 }
	$13 = (int_64)0
	$12 = (int_64)59
	$1 = [32]
	$16 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$26 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$0 = ($0 + [165])
	goto $label$24 
	
.LABEL $label$26
	$7 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$22
	$1 = ($1 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$7 | (int_64)$16)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$21 }
	*((($17 + [544]) + [28])) = *(($3 + [12]))
	*((($17 + [544]) + [24])) = *(($3 + [8]))
	*((($17 + [544]) + [20])) = *(($3 + [4]))
	*($17 + [552]) = $2
	*($17 + [544]) = $8
	*($17 + [560]) = *($3)
	CALL $92((($17 + [544]) + [32]), $4)
	*($17 + [920]) = $16
	*($17 + [912]) = $15
	*(($1 = CALL $87([16]))) = $8
	*($1 + [8]) = $14
	*((($17 + [912]) + [32])) = [0]
	$0 = ($1 + [16])
	*((($17 + [912]) + [24])) = $0
	*((($17 + [912]) + [20])) = $0
	*($17 + [928]) = $1
	*($17 + [940]) = [0]
	*((($17 + [912]) + [36])) = [0]
	$1 = *($17 + [576])
	$0 = ( *((($17 + [544]) + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($0 + [32])
	$13 = (CASTING uint_64)(uint_32 $0)
	$0 = (($17 + [912]) + [28])
	
.LOOP $label$27:
	$1 = ($1 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$27 }
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $26($0, $1)
	$0 = *(($17 + [944]))
	$1 = *(($17 + [940]))
	goto $label$6 
	
.LABEL $label$8
	$13 = *(($3 + [8]))
	*((($17 + [96]) + [8])) = $13
	$12 = *($3)
	*((($17 + [8]) + [8])) = $13
	*($17 + [96]) = $12
	*($17 + [12]) = *($17 + [100])
	*($17 + [8]) = *($17 + [96])
	CALL $51($0, $2, ($17 + [8]), $7)
	$3 = *($17 + [384])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$0 = [0]
	$1 = [0]
	
.LABEL $label$6
	*($17 + [476]) = $1
	*($17 + [472]) = $1
	*($17 + [480]) = $0
	*($17 + [880]) = ($17 + [472])
	*($17 + [400]) = ($17 + [544])
	CALL $49(($17 + [400]), ($17 + [880]))
	CALL $50(($17 + [472]), ($17 + [912]))
	$1 = *($17 + [472])
	CALL send_inline($1, (*($17 + [476]) - $1))
	$1 = *($17 + [472])
	if ( ($1 == 0) ){ goto $label$28 }
	*($17 + [476]) = $1
	CALL $88($1)
	
.LABEL $label$28
	$1 = *($17 + [940])
	if ( ($1 == 0) ){ goto $label$29 }
	*(($17 + [944])) = $1
	CALL $88($1)
	
.LABEL $label$29
	$1 = *($17 + [928])
	if ( ($1 == 0) ){ goto $label$30 }
	*(($17 + [932])) = $1
	CALL $88($1)
	
.LABEL $label$30
	if ( ((*($17 + [576]) & [1]) == 0) ){ goto $label$31 }
	CALL $88(*(($17 + [584])))
	
.LABEL $label$31
	$3 = *($17 + [384])
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = ($17 + [388])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$33 }
	
.LOOP $label$34:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$35 }
	CALL $88($0)
	
.LABEL $label$35
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$34 }
	$1 = *(($17 + [384]))
	goto $label$32 
	
.LABEL $label$33
	$1 = $3
	
.LABEL $label$32
	*($4) = $3
	CALL $88($1)
	
.LABEL $label$4
	*([0] + [4]) = ($17 + [1184])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [208])
	*([0] + [4]) = $2
	*(($3 = $2) + [204]) = $0
	*($3 + [192]) = *($1)
	*($3 + [196]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $59(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [192])
	*($3 + [8]) = ($3 + [204])
	CALL $60(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $88(*($3 + [88]))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [208])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [224])
	*([0] + [4]) = $9
	*(($9 + [216])) = [0]
	*($9 + [200]) = (int_64)-1
	$4 = *($0)
	*($9 + [184]) = $4
	*($9 + [192]) = $4
	*($9 + [208]) = (int_64)0
	$6 = [0]
	$8 = CALL db_find_i64($4, $4, (int_64)8419268397136609280, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $72(($9 + [184]), $8)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($9 + [184])), [336])
	
.LABEL $label$1
	CALL require_auth(*($6 + [8]))
	*((($9 + [168]) + [8])) = *(($2 + [8]))
	*((($9 + [152]) + [8])) = [0]
	*($9 + [168]) = *($2)
	*($9 + [152]) = (int_64)0
	$8 = CALL strlen([1040])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($9 + [152]) = ($8 << [1])
	$7 = (($9 + [152]) | [1])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($8 + [16]) & [-16])
	$7 = CALL $87($5)
	*($9 + [152]) = ($5 | [1])
	*($9 + [160]) = $7
	*($9 + [156]) = $8
	
.LABEL $label$4
	CALL memcpy($7, [1040], $8)
	
.LABEL $label$3
	*(($7 + $8)) = [0]
	*((($9 + [64]) + [8])) = *((($9 + [168]) + [8]))
	*($9 + [64]) = *($9 + [168])
	CALL $46($0, ($9 + [64]), ($9 + [152]))
	if ( ((*($9 + [152]) & [1]) == 0) ){ goto $label$6 }
	CALL $88(*($9 + [160]))
	
.LABEL $label$6
	CALL $92(($9 + [136]), $3)
	$8 = *($9 + [136])
	CALL eosio_assert((( *($9 + [140]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [257]), [304])
	if ( ((*($9 + [136]) & [1]) == 0) ){ goto $label$7 }
	CALL $88(*($9 + [144]))
	
.LABEL $label$7
	CALL memcpy(($9 + [96]), $1, [34])
	*(($8 = (($9 + [80]) + [8]))) = *(($2 + [8]))
	*($9 + [80]) = *($2)
	$4 = *(($6 + [8]))
	CALL memcpy(($9 + [30]), ($9 + [96]), [34])
	*((($9 + [8]) + [8])) = *($8)
	*($9 + [8]) = *($9 + [80])
	CALL $29($0, ($9 + [30]), ($9 + [8]), $4, [0])
	$0 = *($9 + [208])
	if ( ($0 == 0) ){ goto $label$8 }
	$6 = ($9 + [212])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $88($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$11 }
	$8 = *(($9 + [208]))
	goto $label$9 
	
.LABEL $label$10
	$8 = $0
	
.LABEL $label$9
	*($6) = $0
	CALL $88($8)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [224])
	return (unreachable)
	
.LABEL $label$2
	CALL $89(($9 + [152]))
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*(($7 = $6) + [92]) = $0
	*($7 + [80]) = *($1)
	*($7 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($6 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	CALL memset(($7 + [8]), [0], [34])
	*($7 + [56]) = (int_64)1398362884
	*($7 + [48]) = (int_64)0
	CALL eosio_assert([1], [176])
	$4 = ($7 + [56])
	$3 = ($7 + [48])
	$5 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [240])
	*($7 + [72]) = [0]
	*($7 + [64]) = (int_64)0
	*($7 + [96]) = $0
	$1 = ($0 + $2)
	*($7 + [104]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[33]), [272])
	CALL memcpy(($7 + [8]), $0, [34])
	$6 = ($0 + [34])
	CALL eosio_assert(((uint_32)($1 - $6) > (uint_32)[7]), [272])
	CALL memcpy($3, $6, [8])
	$6 = ($0 + [42])
	CALL eosio_assert(((uint_32)($1 - $6) > (uint_32)[7]), [272])
	CALL memcpy($4, $6, [8])
	*($7 + [100]) = ($0 + [50])
	$1 = ($7 + [64])
	CALL $24(($7 + [96]), $1)
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($7 + [100]) = ($7 + [80])
	*($7 + [96]) = ($7 + [92])
	CALL $74(($7 + [96]), ($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $88(*(($7 + [72])))
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [112])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	*(($9 + [136])) = [0]
	*($9 + [120]) = (int_64)-1
	$4 = *($0)
	*($9 + [104]) = $4
	*($9 + [112]) = $4
	*($9 + [128]) = (int_64)0
	$6 = [0]
	$8 = CALL db_find_i64($4, $4, (int_64)8419268397136609280, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $72(($9 + [104]), $8)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($9 + [104])), [336])
	
.LABEL $label$1
	CALL require_auth(*($6 + [8]))
	*((($9 + [88]) + [8])) = *(($2 + [8]))
	*((($9 + [72]) + [8])) = [0]
	*($9 + [88]) = *($2)
	*($9 + [72]) = (int_64)0
	$8 = CALL strlen([1040])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($9 + [72]) = ($8 << [1])
	$7 = (($9 + [72]) | [1])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($8 + [16]) & [-16])
	$7 = CALL $87($5)
	*($9 + [72]) = ($5 | [1])
	*($9 + [80]) = $7
	*($9 + [76]) = $8
	
.LABEL $label$4
	CALL memcpy($7, [1040], $8)
	
.LABEL $label$3
	*(($7 + $8)) = [0]
	*((($9 + [24]) + [8])) = *((($9 + [88]) + [8]))
	*($9 + [24]) = *($9 + [88])
	CALL $46($0, ($9 + [24]), ($9 + [72]))
	if ( ((*($9 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $88(*($9 + [80]))
	
.LABEL $label$6
	CALL $92(($9 + [56]), $3)
	$8 = *($9 + [56])
	CALL eosio_assert((( *($9 + [60]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [257]), [304])
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL $88(*($9 + [64]))
	
.LABEL $label$7
	*(($8 = (($9 + [40]) + [8]))) = *(($2 + [8]))
	*($9 + [40]) = *($2)
	$4 = *(($6 + [8]))
	*((($9 + [8]) + [8])) = *($8)
	*($9 + [8]) = *($9 + [40])
	CALL $51($0, $1, ($9 + [8]), $4)
	$0 = *($9 + [128])
	if ( ($0 == 0) ){ goto $label$8 }
	$6 = ($9 + [132])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $88($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$11 }
	$8 = *(($9 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$8 = $0
	
.LABEL $label$9
	*($6) = $0
	CALL $88($8)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $89(($9 + [72]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [240])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	$1 = ($0 + $2)
	*($5 + [72]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [272])
	CALL memcpy(($5 + [8]), $0, [8])
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [272])
	CALL memcpy((($5 + [8]) + [8]), $4, [8])
	$4 = ($0 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [272])
	CALL memcpy((($5 + [8]) + [16]), $4, [8])
	*($5 + [68]) = ($0 + [24])
	CALL $24(($5 + [64]), (($5 + [8]) + [24]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $71(($5 + [64]), ($5 + [8]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $88(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [80])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [752])
	CALL eosio_assert([1], [512])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [240])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$7 = ($3 + [8])
	*(($6 = (($14 + [192]) + [8]))) = *($7)
	$11 = *($3)
	*((($14 + [40]) + [12])) = *((($14 + [192]) + [12]))
	*((($14 + [40]) + [8])) = *($6)
	*($14 + [192]) = $11
	*($14 + [44]) = *($14 + [196])
	*($14 + [40]) = *($14 + [192])
	$6 = CALL $27($0, ($14 + [40]))
	CALL $92(($14 + [176]), $4)
	$8 = *($14 + [176])
	CALL eosio_assert((( *($14 + [180]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [257]), [304])
	if ( ((*($14 + [176]) & [1]) == 0) ){ goto $label$1 }
	CALL $88(*($14 + [184]))
	
.LABEL $label$1
	$11 = *($7)
	*((($14 + [160]) + [8])) = $11
	$9 = *($3)
	*((($14 + [24]) + [8])) = $11
	*($14 + [160]) = $9
	*($14 + [28]) = *($14 + [164])
	*($14 + [24]) = *($14 + [160])
	CALL $28($0, $1, ($14 + [24]), $1)
	if ( ($6 == 0) ){ goto $label$5 }
	$5 = *($0)
	$1 = (int_64)0
	$9 = (int_64)59
	$0 = [1152]
	$10 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$11 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$11
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$6 }
	$1 = (int_64)0
	$9 = (int_64)59
	$0 = [16]
	$12 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$17 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$12 }
	$1 = (int_64)0
	$9 = (int_64)59
	$0 = [32]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$23 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [165])
	goto $label$21 
	
.LABEL $label$23
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$0 = ($0 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	*((($14 + [72]) + [28])) = *(($3 + [12]))
	*((($14 + [72]) + [24])) = *(($3 + [8]))
	*((($14 + [72]) + [20])) = *(($3 + [4]))
	*($14 + [80]) = $2
	*($14 + [72]) = $5
	*($14 + [88]) = *($3)
	CALL $92((($14 + [72]) + [32]), $4)
	*($14 + [128]) = $13
	*($14 + [120]) = $12
	*(($0 = CALL $87([16]))) = $5
	*($0 + [8]) = $10
	*((($14 + [120]) + [32])) = [0]
	$6 = ($0 + [16])
	*((($14 + [120]) + [24])) = $6
	*((($14 + [120]) + [20])) = $6
	*($14 + [136]) = $0
	*($14 + [148]) = [0]
	*((($14 + [120]) + [36])) = [0]
	$0 = *($14 + [104])
	$6 = ( *((($14 + [72]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($6 + [32])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = (($14 + [120]) + [28])
	
.LOOP $label$24:
	$0 = ($0 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$24 }
	if ( ($0 == 0) ){ goto $label$4 }
	CALL $26($6, $0)
	$6 = *(($14 + [152]))
	$0 = *(($14 + [148]))
	goto $label$3 
	
.LABEL $label$5
	$11 = *(($3 + [8]))
	*((($14 + [56]) + [8])) = $11
	$9 = *($3)
	*((($14 + [8]) + [8])) = $11
	*($14 + [56]) = $9
	*($14 + [12]) = *($14 + [60])
	*($14 + [8]) = *($14 + [56])
	CALL $51($0, $2, ($14 + [8]), $1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	$0 = [0]
	
.LABEL $label$3
	*($14 + [212]) = $0
	*($14 + [208]) = $0
	*($14 + [216]) = $6
	*($14 + [224]) = ($14 + [208])
	*($14 + [232]) = ($14 + [72])
	CALL $49(($14 + [232]), ($14 + [224]))
	CALL $50(($14 + [208]), ($14 + [120]))
	$0 = *($14 + [208])
	CALL send_inline($0, (*($14 + [212]) - $0))
	$0 = *($14 + [208])
	if ( ($0 == 0) ){ goto $label$25 }
	*($14 + [212]) = $0
	CALL $88($0)
	
.LABEL $label$25
	$0 = *($14 + [148])
	if ( ($0 == 0) ){ goto $label$26 }
	*(($14 + [152])) = $0
	CALL $88($0)
	
.LABEL $label$26
	$0 = *($14 + [136])
	if ( ($0 == 0) ){ goto $label$27 }
	*(($14 + [140])) = $0
	CALL $88($0)
	
.LABEL $label$27
	if ( ((*($14 + [104]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*(($14 + [112])))
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [240])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [240])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $47(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $48(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $88(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [512])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [512])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = [0]
	*(($0 = CALL memset($0, [0], [34])) + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [72]) = [0]
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [240])
	CALL memset(($0 + [96]), [0], [66])
	*($0 + [168]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $61(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [512])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [512])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $57(CALL $56($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $1
	CALL require_recipient($1)
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)-7375590407258106880, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $39(($7 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($7 + [16])), [336])
	$1 = *($0)
	*($7 + [8]) = $2
	CALL eosio_assert([1], [400])
	CALL $52(($7 + [16]), $4, $1, ($7 + [8]))
	$4 = *($7 + [40])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($7 + [12]) = $2
	*($7 + [8]) = ($7 + [56])
	CALL $53($7, ($7 + [16]), $3, ($7 + [8]))
	$4 = *($7 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $88($2)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL $88($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	$4 = *($1)
	CALL $55($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [752])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $42(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [448])
	$4 = CALL $87([56])
	$6 = CALL $43($4)
	*($4 + [40]) = $1
	CALL $54($3, $6)
	*($8 + [72]) = (($8 + [16]) + [40])
	*($8 + [68]) = ($8 + [16])
	*($8 + [64]) = ($8 + [16])
	CALL $42(($8 + [64]), $6)
	$5 = *($4)
	*($4 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-7375590407258106880, $2, $5, ($8 + [16]), [40])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [64]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [44])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [64]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $45(($1 + [24]), ($8 + [64]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $88($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = *(*($0))
	*($1 + [8]) = (int_64)0
	*($1) = $2
	*(($1 + [16])) = (int_64)1280591108
	*($1 + [24]) = (int_64)0
	*(($1 + [32])) = (int_64)1397703940
	$0 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [528])
	$2 = ((int_64)*($1) + (int_64)*($0))
	*(($1 = ($1 + [24]))) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [608])
	return 
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$2 == (int_64)1280591108), [528])
	$2 = ((int_64)*($1) + (int_64)*($0))
	*(($1 = ($1 + [8]))) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [608])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$3 = *($3 + [6])
	$4 = *($3 + [4])
	$4 = *($3 + [3])
	$4 = *($3 + [1])
	$4 = *($3 + [2])
	$3 = *($0 + [4])
	$4 = *($3 + [5])
	*($1) = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [4]) + ( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) )) + (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [8])) + (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [20])))
	CALL memcpy(($1 + [8]), *($0 + [4]), [34])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*(($1 + [64])) = (int_64)1280591108
	*($1 + [72]) = (int_64)0
	*(($1 + [80])) = (int_64)1397703940
	$3 = *($0 + [8])
	$2 = *($3 + [8])
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [528])
	$2 = ((int_64)*($1) + (int_64)*($3))
	*(($1 = ($1 + [72]))) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [608])
	return 
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$2 == (int_64)1280591108), [528])
	$2 = ((int_64)*($1) + (int_64)*($3))
	*(($1 = ($1 + [56]))) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [608])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [512])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [512])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [512])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL memcpy(($3 + [6]), ($1 + [8]), [34])
	CALL memcpy(($3 + [40]), ($3 + [6]), [34])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[33]), [512])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [80])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [79]) = $4
	*(($6 + [64])) = [0]
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	$5 = *($0)
	*($6 + [32]) = $5
	*($6 + [40]) = $5
	$4 = *($1 + [6])
	$4 = *($1 + [4])
	$4 = *($1 + [3])
	$4 = *($1 + [1])
	$4 = *($1 + [2])
	$4 = *($1 + [5])
	$4 = CALL db_find_i64($5, $5, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [4]) + ( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) )) + (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [8])) + (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($4 + [256]) ? $4 : ((int_32)$4 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $30(($6 + [32]), $4)
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)($6 + [32])), [336])
	$5 = *($0)
	*($6 + [16]) = $2
	*($6 + [20]) = ($6 + [79])
	CALL eosio_assert([1], [400])
	CALL $31(($6 + [32]), $1, $5, ($6 + [16]))
	$0 = *($6 + [56])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($6 + [20]) = $1
	*($6 + [16]) = $0
	*($6 + [24]) = $2
	CALL $32(($6 + [8]), ($6 + [32]), $3, ($6 + [16]))
	$0 = *($6 + [56])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($6 + [60])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $88($4)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($6 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $0
	
.LABEL $label$4
	*($2) = $0
	CALL $88($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL require_recipient($1)
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [8]) = $4
	*($7 + [16]) = $4
	$6 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-7375590407258106880, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $39(($7 + [8]), $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($7 + [8])), [336])
	
.LABEL $label$1
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [848])
	$4 = *($0)
	*($7) = $2
	CALL eosio_assert($5, [400])
	CALL $40(($7 + [8]), $6, $4, $7)
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $88($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $88($6)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_64 $2
	$0 = *($0)
	$2 = *($0 + [8])
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$2 == (int_64)*(($1 + [32]))), [528])
	$2 = ((int_64)*($1 + [24]) + (int_64)*($0))
	*($1 + [24]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [608])
	return 
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$2 == (int_64)*(($1 + [16]))), [528])
	$2 = ((int_64)*($1 + [8]) + (int_64)*($0))
	*($1 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [608])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [128])
	*([0] + [4]) = $4
	*(($5 = $4) + [92]) = $0
	*($5 + [80]) = *($1)
	*($5 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*($5) = (int_64)0
	CALL memset(($5 + [8]), [0], [34])
	*(($5 + [56])) = (int_64)1398362884
	*($5 + [48]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [240])
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [100]) = $0
	*($5 + [96]) = $0
	*($5 + [104]) = ($0 + $2)
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = $5
	CALL $22(($5 + [120]), ($5 + [112]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [100]) = ($5 + [80])
	*($5 + [96]) = ($5 + [92])
	CALL $23(($5 + [96]), $5)
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $88(*(($5 + [72])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [128])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	CALL require_auth($1)
	$5 = ($3 + [8])
	*(($6 = (($9 + [176]) + [8]))) = *($5)
	$7 = *($3)
	*((($9 + [72]) + [12])) = *((($9 + [176]) + [12]))
	*((($9 + [72]) + [8])) = *($6)
	*($9 + [176]) = $7
	*($9 + [76]) = *($9 + [180])
	*($9 + [72]) = *($9 + [176])
	CALL $27($0, ($9 + [72]))
	CALL $92(($9 + [160]), $4)
	$4 = *($9 + [160])
	CALL eosio_assert((( *($9 + [164]) ? uint_32($4 >> [1]) : ($4 & [1]) ) <= [257]), [304])
	if ( ((*($9 + [160]) & [1]) == 0) ){ goto $label$1 }
	CALL $88(*($9 + [168]))
	
.LABEL $label$1
	$7 = *($5)
	*((($9 + [144]) + [8])) = $7
	$8 = *($3)
	*((($9 + [56]) + [8])) = $7
	*($9 + [144]) = $8
	*($9 + [60]) = *($9 + [148])
	*($9 + [56]) = *($9 + [144])
	CALL $28($0, $1, ($9 + [56]), $1)
	CALL memcpy(($9 + [104]), $2, [34])
	*(($2 = (($9 + [88]) + [8]))) = *($5)
	*($9 + [88]) = *($3)
	CALL memcpy(($9 + [22]), ($9 + [104]), [34])
	*(($9 + [8])) = *($2)
	*($9) = *($9 + [88])
	CALL $29($0, ($9 + [22]), $9, $1, [0])
	*([0] + [4]) = ($9 + [192])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [256])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL memcpy(($4 + [94]), ($1 + [8]), [34])
	*(($3 = (($4 + [72]) + [8]))) = *(($1 + [56]))
	*($4 + [72]) = *($1 + [48])
	CALL $92(($4 + [56]), ($1 + [64]))
	*((($4 + [168]) + [8])) = *($3)
	*($4 + [168]) = *($4 + [72])
	CALL memcpy(($4 + [128]), ($4 + [94]), [34])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($4 + [216]), ($4 + [128]), [34])
	*(($3 = (($4 + [200]) + [8]))) = *((($4 + [168]) + [8]))
	*($4 + [200]) = *($4 + [168])
	CALL $92(($4 + [184]), ($4 + [56]))
	CALL memcpy(($4 + [22]), ($4 + [216]), [34])
	*(($4 + [8])) = *($3)
	*($4) = *($4 + [200])
	CALL void $0((int_32 $2), (int_64 ($4 + [22])), (int_32 $4), (int_32 ($4 + [184])), (int_32 $1))
	if ( ((*($4 + [184]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*($4 + [192]))
	
.LABEL $label$2
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($4 + [64]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [256])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [272])
	CALL memcpy(($0 + [8]), *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [64]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [288])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $26($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [272])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $25($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $90($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $87($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $90($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $88($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $89($7)
	return (unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	if ( ((int_64)*($1 + [8]) != (int_64)1397703940) ){ goto $label$10 }
	*((($4 + [80]) + [8])) = *(($1 + [8]))
	*((($4 + [64]) + [8])) = [0]
	*($4 + [80]) = *($1)
	*($4 + [64]) = (int_64)0
	$1 = CALL strlen([1024])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$9 }
	*($4 + [64]) = ($1 << [1])
	$3 = (($4 + [64]) | [1])
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	*((($4 + [48]) + [8])) = *(($1 + [8]))
	*((($4 + [32]) + [8])) = [0]
	*($4 + [48]) = *($1)
	*($4 + [32]) = (int_64)0
	$1 = CALL strlen([1040])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*($4 + [32]) = ($1 << [1])
	$2 = (($4 + [32]) | [1])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$9
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $87($2)
	*($4 + [64]) = ($2 | [1])
	*($4 + [72]) = $3
	*($4 + [68]) = $1
	
.LABEL $label$8
	CALL memcpy($3, [1024], $1)
	
.LABEL $label$7
	*(($3 + $1)) = [0]
	*(($4 + [8])) = *((($4 + [80]) + [8]))
	*($4) = *($4 + [80])
	CALL $46($0, $4, ($4 + [64]))
	$3 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($4 + [72]))
	goto $label$3 
	
.LABEL $label$6
	$3 = (($1 + [16]) & [-16])
	$2 = CALL $87($3)
	*($4 + [32]) = ($3 | [1])
	*($4 + [40]) = $2
	*($4 + [36]) = $1
	
.LABEL $label$5
	CALL memcpy($2, [1040], $1)
	
.LABEL $label$4
	$3 = [0]
	*(($2 + $1)) = [0]
	*((($4 + [16]) + [8])) = *((($4 + [48]) + [8]))
	*($4 + [16]) = *($4 + [48])
	CALL $46($0, ($4 + [16]), ($4 + [32]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($4 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [96])
	return $3
	
.LABEL $label$2
	CALL $89(($4 + [64]))
	
.LABEL $label$1
	CALL $89(($4 + [32]))
	(unreachable)
	return (unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $87($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $88($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [272])
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [272])
	CALL memcpy(($0 + [34]), *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [80]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [88]))
	*($4 + [8]) = $0
	CALL $70(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [752])
	*([0] + [4]) = $5
	CALL memcpy(($5 + [334]), $1, [34])
	CALL memcpy(($5 + [300]), ($1 + [34]), [34])
	*(($3 = (($5 + [280]) + [8]))) = *(($1 + [80]))
	*($5 + [280]) = *($1 + [72])
	CALL $92(($5 + [264]), ($1 + [88]))
	*(($4 = (($5 + [248]) + [8]))) = *(($1 + [112]))
	*($5 + [248]) = *($1 + [104])
	CALL memcpy(($5 + [182]), ($1 + [120]), [66])
	$2 = *($1 + [192])
	CALL memcpy(($5 + [480]), ($5 + [182]), [66])
	*((($5 + [464]) + [8])) = *($4)
	*((($5 + [448]) + [8])) = *($3)
	*($5 + [464]) = *($5 + [248])
	*($5 + [448]) = *($5 + [280])
	CALL memcpy(($5 + [408]), ($5 + [300]), [34])
	CALL memcpy(($5 + [368]), ($5 + [334]), [34])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($5 + [712]), ($5 + [368]), [34])
	CALL memcpy(($5 + [672]), ($5 + [408]), [34])
	*(($3 = (($5 + [656]) + [8]))) = *((($5 + [448]) + [8]))
	*($5 + [656]) = *($5 + [448])
	CALL $92(($5 + [640]), ($5 + [264]))
	*(($4 = (($5 + [624]) + [8]))) = *((($5 + [464]) + [8]))
	*($5 + [624]) = *($5 + [464])
	CALL memcpy(($5 + [552]), ($5 + [480]), [66])
	CALL memcpy(($5 + [148]), ($5 + [712]), [34])
	CALL memcpy(($5 + [114]), ($5 + [672]), [34])
	*((($5 + [96]) + [8])) = *($3)
	*((($5 + [80]) + [8])) = *($4)
	*($5 + [96]) = *($5 + [656])
	*($5 + [80]) = *($5 + [624])
	CALL memcpy(($5 + [14]), ($5 + [552]), [66])
	CALL void $0((int_32 ($5 + [148])), (int_32 ($5 + [114])), (int_32 ($5 + [96])), (int_32 ($5 + [640])), (int_32 ($5 + [80])), (int_32 ($5 + [14])), (int_32 $2), (int_64 $1))
	if ( ((*($5 + [640]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*($5 + [648]))
	
.LABEL $label$2
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($5 + [272]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [752])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	$4 = *($1)
	CALL $66($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [752])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $35(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [63]) = $4
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$4 = [0]
	$1 = *($1 + [6])
	$6 = *($1 + [4])
	$6 = *($1 + [3])
	$6 = *($1 + [1])
	$6 = *($1 + [2])
	$6 = *($1 + [5])
	$1 = CALL db_find_i64($5, $5, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [4]) + ( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) )) + (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [8])) + (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($1 + [256]) ? $1 : ((int_32)$1 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $30(($7 + [16]), $1)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($7 + [16])), [336])
	
.LABEL $label$1
	$1 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($1, [848])
	$5 = *($0)
	*($7 + [8]) = $2
	*($7 + [12]) = ($7 + [63])
	CALL eosio_assert($1, [400])
	CALL $65(($7 + [16]), $4, $5, ($7 + [8]))
	$0 = *($7 + [40])
	if ( ($0 == 0) ){ goto $label$2 }
	$6 = ($7 + [44])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $88($4)
	
.LABEL $label$6
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($7 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $0
	
.LABEL $label$3
	*($6) = $0
	CALL $88($1)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = [0]
	$0 = CALL memset($0, [0], [34])
	CALL memset(($0 + [34]), [0], [34])
	*($0 + [80]) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [96]) = [0]
	*($0 + [88]) = (int_64)0
	*($0 + [104]) = (int_64)0
	*($0 + [112]) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [240])
	CALL memset(($0 + [120]), [0], [66])
	*($0 + [192]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $69(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = *($0)
	$3 = *($2 + [8])
	if ( ((int_64)$3 != (int_64)1397703940) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [80]))), [880])
	$3 = (int_64)
	*($1 + [72]) = $3(*($1 + [72]) - *($2)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [928])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [960])
	$2 = ($1 + [56])
	$4 = ($1 + [72])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [64]))), [880])
	$3 = (int_64)
	*($1 + [56]) = $3(*($1 + [56]) - *($2)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [928])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [960])
	$4 = ($1 + [72])
	$2 = ($1 + [56])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)((int_64)*($2) | (int_64)*($4)) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [992])
	if ( (*(*($0 + [4])) == 0) ){ goto $label$3 }
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	
.LABEL $label$3
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [272])
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [64]))
	*($4 + [8]) = $0
	CALL $62(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [608])
	*([0] + [4]) = $6
	CALL memcpy(($6 + [270]), $1, [34])
	*(($6 + [260])) = *(($1 + [60]))
	*(($4 = (($6 + [248]) + [8]))) = *(($1 + [56]))
	*($6 + [252]) = *(($1 + [52]))
	*($6 + [248]) = *($1 + [48])
	$2 = *($1 + [40])
	CALL $92(($6 + [232]), ($1 + [64]))
	*(($5 = (($6 + [216]) + [8]))) = *(($1 + [88]))
	*($6 + [216]) = *($1 + [80])
	CALL memcpy(($6 + [150]), ($1 + [96]), [66])
	$3 = *($1 + [168])
	CALL memcpy(($6 + [376]), ($6 + [150]), [66])
	*((($6 + [360]) + [8])) = *($5)
	*((($6 + [344]) + [8])) = *($4)
	*($6 + [360]) = *($6 + [216])
	*($6 + [344]) = *($6 + [248])
	CALL memcpy(($6 + [304]), ($6 + [270]), [34])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($6 + [568]), ($6 + [304]), [34])
	*(($4 = (($6 + [552]) + [8]))) = *((($6 + [344]) + [8]))
	*($6 + [552]) = *($6 + [344])
	CALL $92(($6 + [536]), ($6 + [232]))
	*(($5 = (($6 + [520]) + [8]))) = *((($6 + [360]) + [8]))
	*($6 + [520]) = *($6 + [360])
	CALL memcpy(($6 + [448]), ($6 + [376]), [66])
	CALL memcpy(($6 + [116]), ($6 + [568]), [34])
	*((($6 + [96]) + [8])) = *($4)
	*((($6 + [80]) + [8])) = *($5)
	*($6 + [96]) = *($6 + [552])
	*($6 + [80]) = *($6 + [520])
	CALL memcpy(($6 + [14]), ($6 + [448]), [66])
	CALL void $0((int_32 ($6 + [116])), (int_32 $2), (int_64 ($6 + [96])), (int_32 ($6 + [536])), (int_32 ($6 + [80])), (int_32 ($6 + [14])), (int_32 $3), (int_64 $1))
	if ( ((*($6 + [536]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*($6 + [544]))
	
.LABEL $label$2
	if ( ((*($6 + [232]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($6 + [240]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [608])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [272])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [272])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [272])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($2 + [80]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [272])
	CALL memcpy(($2 + [88]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	*($5) = *($1)
	*($5 + [12]) = ($4 + [97])
	*($5 + [8]) = ($4 + [96])
	*($5 + [16]) = ($4 + [98])
	*($5 + [20]) = ($4 + [99])
	*($5 + [24]) = ($4 + [100])
	*($5 + [28]) = ($4 + [101])
	*($5 + [32]) = ($4 + [102])
	*($5 + [36]) = ($4 + [103])
	*($5 + [40]) = ($4 + [104])
	*($5 + [44]) = ($4 + [105])
	*($5 + [48]) = ($4 + [106])
	*($5 + [52]) = ($4 + [107])
	*($5 + [56]) = ($4 + [108])
	*($5 + [60]) = ($4 + [109])
	*($5 + [64]) = ($4 + [110])
	*($5 + [68]) = ($4 + [111])
	*($5 + [72]) = ($4 + [112])
	*($5 + [76]) = ($4 + [113])
	*($5 + [80]) = ($4 + [114])
	*($5 + [84]) = ($4 + [115])
	*($5 + [88]) = ($4 + [116])
	*($5 + [92]) = ($4 + [117])
	*($5 + [96]) = ($4 + [118])
	*($5 + [100]) = ($4 + [119])
	*($5 + [104]) = ($4 + [120])
	*($5 + [108]) = ($4 + [121])
	*($5 + [112]) = ($4 + [122])
	*($5 + [116]) = ($4 + [123])
	*($5 + [120]) = ($4 + [124])
	*($5 + [124]) = ($4 + [125])
	*($5 + [128]) = ($4 + [126])
	*($5 + [132]) = ($4 + [127])
	*($5 + [136]) = ($4 + [128])
	*($5 + [140]) = ($4 + [129])
	*($5 + [144]) = ($4 + [130])
	*($5 + [148]) = ($4 + [131])
	*($5 + [152]) = ($4 + [132])
	*($5 + [156]) = ($4 + [133])
	*($5 + [160]) = ($4 + [134])
	*($5 + [164]) = ($4 + [135])
	*($5 + [168]) = ($4 + [136])
	*($5 + [172]) = ($4 + [137])
	*($5 + [176]) = ($4 + [138])
	*($5 + [180]) = ($4 + [139])
	*($5 + [184]) = ($4 + [140])
	*($5 + [188]) = ($4 + [141])
	*($5 + [192]) = ($4 + [142])
	*($5 + [196]) = ($4 + [143])
	*($5 + [200]) = ($4 + [144])
	*($5 + [204]) = ($4 + [145])
	*($5 + [208]) = ($4 + [146])
	*($5 + [212]) = ($4 + [147])
	*($5 + [216]) = ($4 + [148])
	*($5 + [220]) = ($4 + [149])
	*($5 + [224]) = ($4 + [150])
	*($5 + [228]) = ($4 + [151])
	*($5 + [232]) = ($4 + [152])
	*($5 + [236]) = ($4 + [153])
	*($5 + [240]) = ($4 + [154])
	*($5 + [244]) = ($4 + [155])
	*($5 + [248]) = ($4 + [156])
	*($5 + [252]) = ($4 + [157])
	*($5 + [256]) = ($4 + [158])
	*($5 + [260]) = ($4 + [159])
	*($5 + [264]) = ($4 + [160])
	*($5 + [268]) = ($4 + [161])
	CALL $63(($5 + [8]), $5)
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($4 + [168]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	*([0] + [4]) = ($5 + [272])
}

void .FUNC $89 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $88 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9676])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9572])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9380]
	$1 = (((int_32)$2 * (int_32)[12]) + [9380])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9670]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9672])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9670]) = [1]
	$7 = ($7 << [16])
	*([0] + [9672]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9672])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9672]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9670]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9670]) = [1]
	$3 = ($3 << [16])
	*([0] + [9672]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9672])
	
.LABEL $label$8
	*([0] + [9672]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $85($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9584])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $84([1188], $0)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [272])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $24(*($1), *($0 + [12]))
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $82(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	*(($1 + [32])) = *((*($3) + [24]))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3) + [16]))
	CALL eosio_assert([1], [752])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $42(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [816])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $87([32])) + [16]) = $0
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [272])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [272])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $88($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $87(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $88($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $88($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [272])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($2 + [104]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [272])
	CALL memcpy(($2 + [112]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	*($5) = *($1)
	*($5 + [12]) = ($4 + [121])
	*($5 + [8]) = ($4 + [120])
	*($5 + [16]) = ($4 + [122])
	*($5 + [20]) = ($4 + [123])
	*($5 + [24]) = ($4 + [124])
	*($5 + [28]) = ($4 + [125])
	*($5 + [32]) = ($4 + [126])
	*($5 + [36]) = ($4 + [127])
	*($5 + [40]) = ($4 + [128])
	*($5 + [44]) = ($4 + [129])
	*($5 + [48]) = ($4 + [130])
	*($5 + [52]) = ($4 + [131])
	*($5 + [56]) = ($4 + [132])
	*($5 + [60]) = ($4 + [133])
	*($5 + [64]) = ($4 + [134])
	*($5 + [68]) = ($4 + [135])
	*($5 + [72]) = ($4 + [136])
	*($5 + [76]) = ($4 + [137])
	*($5 + [80]) = ($4 + [138])
	*($5 + [84]) = ($4 + [139])
	*($5 + [88]) = ($4 + [140])
	*($5 + [92]) = ($4 + [141])
	*($5 + [96]) = ($4 + [142])
	*($5 + [100]) = ($4 + [143])
	*($5 + [104]) = ($4 + [144])
	*($5 + [108]) = ($4 + [145])
	*($5 + [112]) = ($4 + [146])
	*($5 + [116]) = ($4 + [147])
	*($5 + [120]) = ($4 + [148])
	*($5 + [124]) = ($4 + [149])
	*($5 + [128]) = ($4 + [150])
	*($5 + [132]) = ($4 + [151])
	*($5 + [136]) = ($4 + [152])
	*($5 + [140]) = ($4 + [153])
	*($5 + [144]) = ($4 + [154])
	*($5 + [148]) = ($4 + [155])
	*($5 + [152]) = ($4 + [156])
	*($5 + [156]) = ($4 + [157])
	*($5 + [160]) = ($4 + [158])
	*($5 + [164]) = ($4 + [159])
	*($5 + [168]) = ($4 + [160])
	*($5 + [172]) = ($4 + [161])
	*($5 + [176]) = ($4 + [162])
	*($5 + [180]) = ($4 + [163])
	*($5 + [184]) = ($4 + [164])
	*($5 + [188]) = ($4 + [165])
	*($5 + [192]) = ($4 + [166])
	*($5 + [196]) = ($4 + [167])
	*($5 + [200]) = ($4 + [168])
	*($5 + [204]) = ($4 + [169])
	*($5 + [208]) = ($4 + [170])
	*($5 + [212]) = ($4 + [171])
	*($5 + [216]) = ($4 + [172])
	*($5 + [220]) = ($4 + [173])
	*($5 + [224]) = ($4 + [174])
	*($5 + [228]) = ($4 + [175])
	*($5 + [232]) = ($4 + [176])
	*($5 + [236]) = ($4 + [177])
	*($5 + [240]) = ($4 + [178])
	*($5 + [244]) = ($4 + [179])
	*($5 + [248]) = ($4 + [180])
	*($5 + [252]) = ($4 + [181])
	*($5 + [256]) = ($4 + [182])
	*($5 + [260]) = ($4 + [183])
	*($5 + [264]) = ($4 + [184])
	*($5 + [268]) = ($4 + [185])
	CALL $63(($5 + [8]), $5)
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($4 + [192]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	*([0] + [4]) = ($5 + [272])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*((($4 + [32]) + [12])) = *(($1 + [20]))
	*(($3 = (($4 + [32]) + [8]))) = *(($1 + [16]))
	*($4 + [32]) = *($1 + [8])
	*($4 + [36]) = *(($1 + [12]))
	$2 = *($1)
	CALL $92(($4 + [16]), ($1 + [24]))
	*((($4 + [48]) + [8])) = *($3)
	*($4 + [48]) = *($4 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [8]))) = *((($4 + [48]) + [8]))
	*($4 + [80]) = *($4 + [48])
	CALL $92(($4 + [64]), ($4 + [16]))
	*(($4 + [8])) = *($3)
	*($4) = *($4 + [80])
	CALL void $0((int_32 $2), (int_64 $4), (int_32 ($4 + [64])), (int_32 $1))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*($4 + [72]))
	
.LABEL $label$2
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($4 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [96])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [448])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $87([32])
	CALL $77($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $88($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	$1 = *($2 + [4])
	*($0) = (int_64)0
	*($0 + [8]) = *(*($1))
	$1 = *($2)
	CALL eosio_assert([1], [512])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)8419268397136609280, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [256])
	*([0] + [4]) = $3
	CALL memcpy(($3 + [94]), $1, [34])
	*(($2 = (($3 + [72]) + [8]))) = *(($1 + [48]))
	*($3 + [72]) = *($1 + [40])
	CALL $92(($3 + [56]), ($1 + [56]))
	*((($3 + [168]) + [8])) = *($2)
	*($3 + [168]) = *($3 + [72])
	CALL memcpy(($3 + [128]), ($3 + [94]), [34])
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($3 + [216]), ($3 + [128]), [34])
	*(($2 = (($3 + [200]) + [8]))) = *((($3 + [168]) + [8]))
	*($3 + [200]) = *($3 + [168])
	CALL $92(($3 + [184]), ($3 + [56]))
	CALL memcpy(($3 + [22]), ($3 + [216]), [34])
	*(($3 + [8])) = *($2)
	*($3) = *($3 + [200])
	CALL void $0((int_32 ($3 + [22])), (int_32 $3), (int_32 ($3 + [184])), (int_32 $1))
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$2 }
	CALL $88(*($3 + [192]))
	
.LABEL $label$2
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL $88(*($3 + [64]))
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [256])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [816])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $87([56])
	$4 = CALL $43($6)
	*($6 + [40]) = $0
	CALL $44(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $88($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $87(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $88($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $88($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	$3 = *($2 + [8])
	if ( ((int_64)$3 != (int_64)1397703940) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [80]))), [528])
	$3 = ((int_64)*($1 + [72]) + (int_64)*($2))
	*($1 + [72]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [608])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [64]))), [528])
	$3 = ((int_64)*($1 + [56]) + (int_64)*($2))
	*($1 + [56]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [576])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [608])
	
.LABEL $label$1
	if ( (*(*($0 + [4])) == 0) ){ goto $label$3 }
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	
.LABEL $label$3
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $81($0, $2, $1)
	*([0] + [4]) = $3
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	*(($1 + [80])) = *((*($3) + [24]))
	$4 = *($1)
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3) + [16]))
	CALL eosio_assert([1], [752])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $35(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [448])
	$4 = CALL $87([104])
	$6 = CALL $33($4)
	*($4 + [88]) = $1
	CALL $34($3, $6)
	*($8 + [120]) = (($8 + [16]) + [82])
	*($8 + [116]) = ($8 + [16])
	*($8 + [112]) = ($8 + [16])
	CALL $35(($8 + [112]), $6)
	$5 = *($4)
	*($4 + [92]) = CALL db_store_i64(*($1 + [8]), (int_64)-9026212813717995520, $2, $5, ($8 + [16]), [82])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [112]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [92])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [112]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $36(($1 + [24]), ($8 + [112]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [112])
	*($8 + [112]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $88($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [128])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [56]) = (int_64)0
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [240])
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [176])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [240])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [816])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $87([104])
	$4 = CALL $33($6)
	*($6 + [88]) = $0
	CALL $38(($8 + [32]), $4)
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $88($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [688])
	$4 = *($1)
	CALL $37($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [752])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $35(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}