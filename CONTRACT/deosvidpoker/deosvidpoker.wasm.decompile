(data (i32.const 8192) "2d 3d 4d 5d 6d 7d 8d 9d Td Jd Qd Kd Ad 2k 3k 4k 5k 6k 7k 8k 9k Tk Jk Qk Kk Ak 2h 3h 4h 5h 6h 7h 8h 9h Th Jh Qh Kh Ah 2s 3s 4s 5s 6s 7s 8s 9s Ts Js Qs Ks As\00")
(data (i32.const 8348) "thedeosgames\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8447) "Global setting must be set up.\00")
(data (i32.const 8478) "Game is on pause.\00")
(data (i32.const 8496) "new\00")
(data (i32.const 8500) "ongoing\00")
(data (i32.const 8508) "hold\00")
(data (i32.const 8513) "Game was started!\00")
(data (i32.const 8531) "Game don\'t start\00")
(data (i32.const 8549) "Some cards on hold hand wasn\'t on start hand\00")
(data (i32.const 8594) "time_p: \00")
(data (i32.const 8603) " \00")
(data (i32.const 8605) "flush\00")
(data (i32.const 8611) "royal flush\00")
(data (i32.const 8623) "straight flush\00")
(data (i32.const 8638) "straight\00")
(data (i32.const 8647) "jacks or better\00")
(data (i32.const 8663) "two pair\00")
(data (i32.const 8672) "three of a kind\00")
(data (i32.const 8688) "full house\00")
(data (i32.const 8699) "four of a kind\00")
(data (i32.const 8714) "lose\00")
(data (i32.const 8719) "setup\00")
(data (i32.const 8725) "startgame\00")
(data (i32.const 8735) "deltable\00")
(data (i32.const 8744) "resolvegame\00")
(data (i32.const 8756) "resolve2game\00")
(data (i32.const 8769) "cleantable\00")
(data (i32.const 8780) "string is too long to be a valid name\00")
(data (i32.const 8818) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8885) "character is not in allowed character set for names\00")
(data (i32.const 8937) "error reading iterator\00")
(data (i32.const 8960) "read\00")
(data (i32.const 8965) "cannot create objects in table of another contract\00")
(data (i32.const 9016) "EOS\00")
(data (i32.const 9020) "string is too long to be a valid symbol_code\00")
(data (i32.const 9065) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9118) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9167) "invalid symbol name\00")
(data (i32.const 9187) "write\00")
(data (i32.const 9193) "cannot pass end iterator to modify\00")
(data (i32.const 9228) "object passed to modify is not in multi_index\00")
(data (i32.const 9274) "cannot modify objects in table of another contract\00")
(data (i32.const 9325) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9384) "attempt to add asset with different symbol\00")
(data (i32.const 9427) "addition underflow\00")
(data (i32.const 9446) "addition overflow\00")
(data (i32.const 9464) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9515) "get\00")
(data (i32.const 9519) "cannot pass end iterator to erase\00")
(data (i32.const 9553) "object passed to erase is not in multi_index\00")
(data (i32.const 9598) "cannot erase objects in table of another contract\00")
(data (i32.const 9648) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9701) "cannot increment end iterator\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "printui" (func $fimport$10 (param i64)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "__lttf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $33))
(export "_Znwj" (func $52))
(export "_ZdlPv" (func $54))
(export "_Znaj" (func $53))
(export "_ZdaPv" (func $55))
(export "_ZnwjSt11align_val_t" (func $56))
(export "_ZnajSt11align_val_t" (func $57))
(export "_ZdlPvSt11align_val_t" (func $58))
(export "_ZdaPvSt11align_val_t" (func $59))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $2 $7 $17 $30 $14 $20 $31)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18148))
(global $global$2 i32 (i32.const 18148))


int_32 .FUNC $79 (int_32 $0)
{
	return CALL $80([9752], $0)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($1 + [4])
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$6 = ($2 + [1])
	$7 = (($3 + [16]) | [1])
	$8 = ($2 + [4])
	$9 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$9 >= (int_32)$5) ){ goto $label$4 }
	CALL $62($3, $1, $9, [2], $1)
	if ( (*($3 + [16]) & [1]) ){ goto $label$7 }
	*($3 + [16]) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$6
	CALL $65(($3 + [16]), [0])
	*(($10 = (($3 + [16]) + [8]))) = *(($3 + [8]))
	*($3 + [16]) = *($3)
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$9 }
	$11 = uint_32($4 >> [1])
	$12 = $6
	goto $label$8 
	
.LABEL $label$9
	$11 = *($8)
	$12 = *(($2 + [8]))
	
.LABEL $label$8
	$13 = [0]
	$14 = ($4 & [1])
	$4 = *($3 + [16])
	$4 = ( *($3 + [20]) ? uint_32($4 >> [1]) : $14 )
	if ( ($4 == 0) ){ goto $label$10 }
	$15 = [0]
	if ( ((int_32)$11 < (int_32)$4) ){ goto $label$3 }
	$16 = ($12 + $11)
	$14 = ( *($10) ? $7 : $14 )
	$10 = *($14)
	$13 = $12
	
.LOOP $label$11:
	$11 = (($11 - $4) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $74($13, $10, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $75($11, $14, $4) == 0) ){ goto $label$12 }
	$13 = ($11 + [1])
	$11 = ($16 - $13)
	if ( ((int_32)$11 >= (int_32)$4) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$12
	if ( ((int_32)$11 == (int_32)$16) ){ goto $label$3 }
	$13 = ($11 - $12)
	
.LABEL $label$10
	$9 = ($9 + [3])
	$15 = [0]
	if ( ((int_32)$13 != (int_32)[-1]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$15 = [1]
	
.LABEL $label$3
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return $15
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9228])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9274])
	$5 = *($1)
	$6 = ($1 + [68])
	CALL $63($6, *($3))
	$7 = ($1 + [80])
	CALL $66($7, [8508])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9325])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$8 = ($1 + [8])
	*($3 + [36]) = $8
	*($3 + [32]) = $1
	$9 = ($1 + [16])
	*($3 + [40]) = $9
	$10 = ($1 + [32])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	*($3 + [56]) = $6
	*($3 + [60]) = $7
	CALL $46(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $79($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $6
	*($3 + [60]) = $7
	*($3 + [32]) = $1
	CALL $47(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $82($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $72())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $78($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $76($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $64($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $64($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $79($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8960])
	CALL memcpy(($4 + [56]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [44])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)0
	$8 = ($4 + [36])
	$3 = CALL $76([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*(($4 + [36])) = ($3 << [1])
	$8 = ($8 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($3 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*(($4 + [44])) = $8
	*(($4 + [40])) = $3
	*($4 + [36]) = ($9 | [1])
	
.LABEL $label$6
	CALL memcpy($8, [8192], $3)
	
.LABEL $label$5
	*(($8 + $3)) = [0]
	*($4 + [48]) = [20]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($3) + $6))
	
.LABEL $label$8
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $82($2)
	
.LABEL $label$9
	if ( ((*(($4 + [36])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$10
	$global$0 = ($4 + [64])
	return [1]
	
.LABEL $label$4
	CALL $60($8)
	return (unreachable)
}

void .FUNC $73 (int_32 $0)
{
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $76($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $64($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($1 + [1])
	$5 = [0]
	$6 = ($1 + [8])
	$7 = ($2 + [4])
	
.LOOP $label$2:
	$8 = *((( *($6) ? $4 : (*($1) & [1]) ) + $5))
	$9 = ($8 + [-65])
	if ( ((uint_32)$9 > (uint_32)[19]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$14
	*($3 + [8]) = [14]
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [8]))) ){ goto $label$8 }
	*($9) = [14]
	*($7) = ($9 + [4])
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$13
	$8 = ($8 + [-48])
	*($3 + [8]) = $8
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [8]))) ){ goto $label$7 }
	*($9) = $8
	*($7) = ($9 + [4])
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$12
	*($3 + [8]) = [11]
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [8]))) ){ goto $label$6 }
	*($9) = [11]
	*($7) = ($9 + [4])
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$11
	*($3 + [8]) = [13]
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [8]))) ){ goto $label$5 }
	*($9) = [13]
	*($7) = ($9 + [4])
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$10
	*($3 + [8]) = [12]
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [8]))) ){ goto $label$4 }
	*($9) = [12]
	*($7) = ($9 + [4])
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	*($3 + [8]) = [10]
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [8]))) ){ goto $label$3 }
	*($9) = [10]
	*($7) = ($9 + [4])
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$8
	CALL $1($2, ($3 + [8]))
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	CALL $1($2, ($3 + [8]))
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	CALL $1($2, ($3 + [8]))
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $1($2, ($3 + [8]))
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $1($2, ($3 + [8]))
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $1($2, ($3 + [8]))
	$5 = ($5 + [3])
	if ( ($5 <= [15]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL $49(*($2), *(($2 + [4])), ($3 + [8]))
	$global$0 = ($3 + [16])
	$9
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9228])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9274])
	*($1 + [48]) = *(*($3))
	$3 = *($3 + [4])
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [32]) = *($3)
	$5 = *($1)
	CALL eosio_assert([1], [9325])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [16])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [48])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [68])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	CALL $46(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $79($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [32]) = $1
	CALL $47(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $82($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9228])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9274])
	$4 = *($1)
	$5 = ($1 + [68])
	CALL $66($5, [8548])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [9325])
	*(($6 = $3) + [24]) = [0]
	*($6 + [8]) = ($6 + [24])
	$7 = ($1 + [8])
	*($6 + [36]) = $7
	*($6 + [32]) = $1
	$8 = ($1 + [16])
	*($6 + [40]) = $8
	$9 = ($1 + [32])
	*($6 + [44]) = $9
	$10 = ($1 + [48])
	*($6 + [48]) = $10
	$11 = ($1 + [56])
	*($6 + [52]) = $11
	*($6 + [56]) = $5
	$12 = ($1 + [80])
	*($6 + [60]) = $12
	CALL $46(($6 + [32]), ($6 + [8]))
	$13 = *($6 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$3 = CALL $79($13)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($13 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($3 + $13)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = $7
	*($6 + [40]) = $8
	*($6 + [44]) = $9
	*($6 + [48]) = $10
	*($6 + [52]) = $11
	*($6 + [56]) = $5
	*($6 + [60]) = $12
	*($6 + [32]) = $1
	CALL $47(($6 + [32]), ($6 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $3, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $82($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [64])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [432])
	$global$0 = $3
	*($3 + [304]) = [8348]
	*($3 + [308]) = CALL $76([8348])
	*($3 + [40]) = *($3 + [304])
	CALL require_auth(*(CALL $3(($3 + [312]), ($3 + [40]))))
	$4 = [0]
	*((($3 + [264]) + [32])) = [0]
	*($3 + [280]) = (int_64)-1
	$5 = *($0)
	*($3 + [264]) = $5
	*($3 + [272]) = $5
	*($3 + [288]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($5, $5, (int_64)-4417013817575866368, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $4(($3 + [264]), $7)
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8447])
	CALL eosio_assert((*($6 + [16]) == 0), [8478])
	*((($3 + [224]) + [32])) = [0]
	*($3 + [240]) = (int_64)-1
	*($3 + [248]) = (int_64)0
	$5 = *($0)
	*($3 + [224]) = $5
	*($3 + [232]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)-5894997192451555328, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $9(($3 + [224]), $7)
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)($3 + [224])), [9464])
	
.LABEL $label$2
	$9 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($9, [8531])
	$10 = CALL $61(($3 + [208]), ($4 + [68]))
	$11 = CALL $61(($3 + [192]), ($4 + [80]))
	*($3 + [184]) = [0]
	*($3 + [176]) = (int_64)0
	*(($3 + [168])) = [0]
	*($3 + [160]) = (int_64)0
	$7 = CALL $76([8548])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$13 }
	*($3 + [160]) = ($7 << [1])
	$12 = (($3 + [160]) | [1])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$13 = (($7 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($3 + [160]) = ($13 | [1])
	*($3 + [168]) = $12
	*($3 + [164]) = $7
	
.LABEL $label$12
	CALL memcpy($12, [8548], $7)
	
.LABEL $label$11
	*(($12 + $7)) = [0]
	$7 = CALL $61(($3 + [144]), ($4 + [56]))
	*((($3 + [128]) + [8])) = *(($4 + [24]))
	*($3 + [128]) = *($4 + [16])
	$5 = *($0)
	CALL eosio_assert($9, [9193])
	CALL $21(($3 + [224]), $4, $5)
	$12 = CALL $61(($3 + [112]), $7)
	CALL $22($0, $12, ($3 + [176]))
	if ( ((*($12) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$14
	$14 = *(($2 + [24]))
	*((($3 + [80]) + [24])) = $14
	$15 = *(($2 + [16]))
	*((($3 + [80]) + [16])) = $15
	$5 = *(($2 + [8]))
	$1 = *($2)
	*(($3 + [16])) = $15
	*(($3 + [24])) = $14
	*($3 + [80]) = $1
	*($3 + [88]) = $5
	*($3) = $1
	*($3 + [8]) = $5
	CALL $15($0, ($3 + [160]), ($3 + [176]), [2], $3)
	CALL $23($3, $10, ($3 + [160]))
	$5 = *($0)
	*($3 + [320]) = $10
	CALL eosio_assert($9, [9193])
	CALL $24(($3 + [224]), $4, $5, ($3 + [320]))
	$2 = CALL $61(($3 + [64]), $10)
	CALL $25($0, $11, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$15
	$12 = ($6 + [16])
	$5 = *($0)
	*($3 + [320]) = $11
	CALL eosio_assert($9, [9193])
	CALL $26(($3 + [224]), $4, $5, ($3 + [320]))
	$2 = CALL $61(($3 + [48]), $11)
	CALL $27($3, ($3 + [128]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$16
	$1 = *($0)
	CALL eosio_assert($8, [9193])
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($3 + [264])), [9228])
	CALL eosio_assert(((int_64)*($3 + [264]) == (int_64)CALL $fimport$3()), [9274])
	$5 = *($6)
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)*(($6 + [48]))), [9384])
	$14 = ((int_64)*($6 + [40]) + (int_64)*($3 + [128]))
	*($6 + [40]) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [9427])
	CALL eosio_assert(((int_64)*($6 + [40]) < (int_64)4611686018427387904), [9446])
	CALL eosio_assert(((int_64)$5 == (int_64)*($6)), [9325])
	*($3 + [392]) = (($3 + [320]) + [52])
	*($3 + [388]) = ($3 + [320])
	*($3 + [384]) = ($3 + [320])
	*($3 + [400]) = ($3 + [384])
	*($3 + [412]) = ($6 + [8])
	*($3 + [408]) = $6
	*($3 + [416]) = $12
	*($3 + [420]) = ($6 + [24])
	*($3 + [424]) = ($6 + [40])
	CALL $8(($3 + [408]), ($3 + [400]))
	CALL db_update_i64(*($6 + [60]), $1, ($3 + [320]), [52])
	$6 = ($3 + [280])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$17 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*($3 + [320]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = *($0)
	*($3 + [412]) = ($3 + [128])
	*($3 + [408]) = ($3 + [320])
	CALL eosio_assert($9, [9193])
	CALL $28(($3 + [224]), $4, $5, ($3 + [408]))
	if ( (*($3 + [144]) & [1]) ){ goto $label$19 }
	if ( (*($3 + [160]) & [1]) ){ goto $label$18 }
	goto $label$9 
	
.LABEL $label$19
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$18
	CALL _ZdlPv(*($3 + [168]))
	$6 = [1]
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $60(($3 + [160]))
	
.LABEL $label$9
	$6 = [1]
	if ( (*($3 + [176]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($3 + [192]) & $6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [184])))
	if ( ((*($3 + [192]) & $6) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($11 + [8]))
	if ( (*($3 + [208]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$3
	CALL $13(($3 + [248]))
	$0 = *($3 + [288])
	if ( ($0 == 0) ){ goto $label$20 }
	$7 = ($3 + [292])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($3 + [288]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $0
	
.LABEL $label$21
	*($7) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$global$0 = ($3 + [432])
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$8
	CALL $62($3, $2, [0], [14], $2)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$7
	CALL $67($1, [8603])
	$4 = *($3)
	$5 = ($4 & [1])
	$2 = CALL $62($3, $2, [0], [11], $2)
	CALL $68($1, ( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [8])))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	CALL $67($1, [8603])
	$4 = *($3)
	$5 = ($4 & [1])
	$2 = CALL $62($3, $2, [0], [8], $2)
	CALL $68($1, ( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [8])))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	CALL $67($1, [8603])
	$4 = *($3)
	$5 = ($4 & [1])
	$2 = CALL $62($3, $2, [0], [5], $2)
	CALL $68($1, ( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [8])))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	CALL $67($1, [8603])
	$4 = *($3)
	$5 = ($4 & [1])
	$2 = CALL $62($3, $2, [0], [2], $2)
	CALL $68($1, ( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*(($1 + [4])) = [0]
	
.LABEL $label$1
	CALL $65($1, [0])
	*(($1 + [8])) = *(($3 + [8]))
	*($1) = *($3)
	$global$0 = ($3 + [16])
	$4
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $63($2, ($0 + [28]))
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$2 }
	$4 = uint_32($0 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [4])
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	$5 = ($2 + [1])
	$6 = (($3 + [16]) | [1])
	$7 = ($2 + [4])
	$8 = [0]
	
.LOOP $label$4:
	CALL $62($3, $1, $8, [2], $1)
	if ( (*($3 + [16]) & [1]) ){ goto $label$6 }
	*($3 + [16]) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$5
	$9 = [0]
	CALL $65(($3 + [16]), [0])
	$10 = *(($3 + [8]))
	*((($3 + [16]) + [8])) = $10
	*($3 + [16]) = *($3)
	$11 = ($0 & [1])
	$0 = *($3 + [16])
	$0 = ( *($3 + [20]) ? uint_32($0 >> [1]) : $11 )
	if ( ($0 == 0) ){ goto $label$10 }
	$12 = ($9 & [1])
	$9 = *($2)
	$9 = ( *($7) ? uint_32($9 >> [1]) : $12 )
	if ( ((int_32)$9 < (int_32)$0) ){ goto $label$9 }
	$13 = ( *(($2 + [8])) ? $5 : $12 )
	$14 = ($13 + $9)
	$12 = ( $10 ? $6 : $11 )
	$11 = *($12)
	$10 = $13
	
.LOOP $label$11:
	$9 = (($9 - $0) + [1])
	if ( ($9 == 0) ){ goto $label$9 }
	$9 = CALL $74($10, $11, $9)
	if ( ($9 == 0) ){ goto $label$9 }
	if ( (CALL $75($9, $12, $0) == 0) ){ goto $label$12 }
	$10 = ($9 + [1])
	$9 = ($14 - $10)
	if ( ((int_32)$9 >= (int_32)$0) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$9 }
	$9 = ($9 - $13)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)(((int_32)$8 * (int_32)[-3]) + [151])) ){ goto $label$8 }
	CALL $69($2, $9, [2])
	
.LABEL $label$9
	$8 = ($8 + [3])
	if ( ((int_32)$8 < (int_32)$4) ){ goto $label$4 }
	goto $label$7 
	
.LABEL $label$8
	CALL $69($2, $9, [3])
	$8 = ($8 + [3])
	if ( ((int_32)$8 < (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$7
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL $29($2, $2, $3)
	$4 = (*($2) & [1])
	if ( $4 ){ goto $label$3 }
	if ( ((int_32)*(($2 + [2])) != (int_32)*(($2 + [1]) + [4])) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$5 = *($2 + [8])
	if ( ((int_32)*(($5 + [1])) != (int_32)*($5 + [4])) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $4 ){ goto $label$5 }
	if ( ((int_32)*(($2 + [5])) != (int_32)*(($2 + [1]) + [7])) ){ goto $label$1 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($2 + [8])
	if ( ((int_32)*(($5 + [4])) != (int_32)*($5 + [7])) ){ goto $label$1 }
	
.LABEL $label$4
	$5 = ($2 + [8])
	if ( $4 ){ goto $label$7 }
	if ( ((int_32)*($5) != (int_32)*(($2 + [1]) + [10])) ){ goto $label$1 }
	goto $label$6 
	
.LABEL $label$7
	$6 = *($5)
	if ( ((int_32)*(($6 + [7])) != (int_32)*($6 + [10])) ){ goto $label$1 }
	
.LABEL $label$6
	if ( $4 ){ goto $label$9 }
	if ( ((int_32)*(($2 + [11])) == (int_32)*(($2 + [1]) + [13])) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$2 = *($5)
	if ( ((int_32)*(($2 + [10])) != (int_32)*($2 + [13])) ){ goto $label$1 }
	
.LABEL $label$8
	CALL $66($1, [8605])
	
.LABEL $label$1
	$2 = *($3)
	$4 = *($2)
	if ( ((int_32)($4 + [1]) != (int_32)*($2 + [4])) ){ goto $label$10 }
	$4 = *($2 + [8])
	if ( ((int_32)($4 + [2]) != (int_32)$4) ){ goto $label$10 }
	$4 = *($2 + [12])
	if ( ((int_32)($4 + [1]) != (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)($4 + [1]) != (int_32)*($2 + [16])) ){ goto $label$10 }
	$2 = *($1)
	$4 = CALL $76([8605])
	if ( ((int_32)$4 != (int_32)( *(($1 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$12 }
	if ( (CALL $70($1, [0], [-1], [8605], $4) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $66($1, [8638])
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)*(*($3)) != (int_32)[10]) ){ goto $label$13 }
	CALL $66($1, [8611])
	goto $label$10 
	
.LABEL $label$13
	CALL $66($1, [8623])
	
.LABEL $label$10
	$4 = [0]
	$7 = [0]
	$8 = [0]
	$2 = *($1)
	$5 = CALL $76([8508])
	if ( ((int_32)$5 != (int_32)( *(($1 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$14 }
	$4 = [0]
	$7 = [0]
	$8 = [0]
	if ( CALL $70($1, [0], [-1], [8508], $5) ){ goto $label$14 }
	$6 = [0]
	$9 = *($3)
	$8 = [0]
	$7 = [0]
	$4 = [0]
	
.LOOP $label$15:
	$5 = $4
	$6 = ($2 + [1])
	$2 = $6
	$10 = *(($9 + ($2 << [2])))
	if ( ((int_32)$10 != (int_32)*(($9 + ($6 << [2])))) ){ goto $label$16 }
	$4 = ($5 + [1])
	$8 = $10
	if ( ((int_32)$2 < (int_32)[3]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( ($7 == 0) ){ goto $label$17 }
	$4 = $5
	if ( ((int_32)$2 < (int_32)[3]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$18 }
	$4 = $5
	if ( ((int_32)$2 < (int_32)[3]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$19
	$4 = $5
	if ( ((int_32)$2 < (int_32)[3]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	$4 = [0]
	$6 = $2
	$7 = $5
	if ( ((int_32)($2 + [-1]) < (int_32)[3]) ){ goto $label$15 }
	
.LABEL $label$14
	$2 = (($7 + $4) & [65535])
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$23 }
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$24 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$20 }
	if ( ($8 <= [11]) ){ goto $label$24 }
	CALL $66($1, [8647])
	goto $label$20 
	
.LABEL $label$24
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$22 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$22 }
	CALL $66($1, [8663])
	goto $label$20 
	
.LABEL $label$23
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$21 }
	CALL $66($1, [8699])
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$25 }
	if ( ((($4 == 0) & ((int_32)$7 == (int_32)[2])) == 0) ){ goto $label$20 }
	
.LABEL $label$25
	CALL $66($1, [8672])
	goto $label$20 
	
.LABEL $label$21
	CALL $66($1, [8688])
	
.LABEL $label$20
	$2 = *($1)
	$4 = CALL $76([8508])
	if ( ((int_32)$4 != (int_32)( *(($1 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$26 }
	if ( CALL $70($1, [0], [-1], [8508], $4) ){ goto $label$26 }
	CALL $66($1, [8714])
	
.LABEL $label$26
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$27 }
	*($3 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$27
	$global$0 = ($3 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9228])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9274])
	$5 = *($1)
	$6 = ($1 + [68])
	CALL $63($6, *($3))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9325])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$7 = ($1 + [8])
	*($3 + [36]) = $7
	*($3 + [32]) = $1
	$8 = ($1 + [16])
	*($3 + [40]) = $8
	$9 = ($1 + [32])
	*($3 + [44]) = $9
	$10 = ($1 + [48])
	*($3 + [48]) = $10
	$11 = ($1 + [56])
	*($3 + [52]) = $11
	*($3 + [56]) = $6
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	CALL $46(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $79($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	*($3 + [52]) = $11
	*($3 + [56]) = $6
	*($3 + [60]) = $12
	*($3 + [32]) = $1
	CALL $47(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $82($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($2)
	$3 = CALL $76([8714])
	if ( ((int_32)$3 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$10 }
	if ( (CALL $70($2, [0], [-1], [8714], $3) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = *($2)
	$3 = ($2 + [4])
	$5 = CALL $76([8647])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$12 }
	if ( (CALL $70($2, [0], [-1], [8647], $5) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$4 = *($2)
	$5 = CALL $76([8663])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$13 }
	if ( (CALL $70($2, [0], [-1], [8663], $5) == 0) ){ goto $label$8 }
	
.LABEL $label$13
	$4 = *($2)
	$3 = ($2 + [4])
	$5 = CALL $76([8672])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$14 }
	if ( (CALL $70($2, [0], [-1], [8672], $5) == 0) ){ goto $label$7 }
	
.LABEL $label$14
	$4 = *($2)
	$5 = CALL $76([8638])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$15 }
	if ( (CALL $70($2, [0], [-1], [8638], $5) == 0) ){ goto $label$6 }
	
.LABEL $label$15
	$4 = *($2)
	$3 = ($2 + [4])
	$5 = CALL $76([8605])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$16 }
	if ( (CALL $70($2, [0], [-1], [8605], $5) == 0) ){ goto $label$5 }
	
.LABEL $label$16
	$4 = *($2)
	$5 = CALL $76([8688])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$17 }
	if ( (CALL $70($2, [0], [-1], [8688], $5) == 0) ){ goto $label$4 }
	
.LABEL $label$17
	$4 = *($2)
	$3 = ($2 + [4])
	$5 = CALL $76([8699])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$18 }
	if ( (CALL $70($2, [0], [-1], [8699], $5) == 0) ){ goto $label$3 }
	
.LABEL $label$18
	$4 = *($2)
	$5 = CALL $76([8623])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$19 }
	if ( (CALL $70($2, [0], [-1], [8623], $5) == 0) ){ goto $label$2 }
	
.LABEL $label$19
	$4 = *($2)
	$3 = CALL $76([8611])
	if ( ((int_32)$3 != (int_32)( *(($2 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$11 }
	if ( (CALL $70($2, [0], [-1], [8611], $3) == 0) ){ goto $label$1 }
	
.LABEL $label$11
	return 
	
.LABEL $label$9
	*($1) = (int_64)0
	return 
	
.LABEL $label$8
	*($1) = ((int_64)*($1) << (int_64)1)
	return 
	
.LABEL $label$7
	*($1) = ((int_64)*($1) * (int_64)3)
	return 
	
.LABEL $label$6
	*($1) = ((int_64)*($1) << (int_64)2)
	return 
	
.LABEL $label$5
	*($1) = ((int_64)*($1) * (int_64)6)
	return 
	
.LABEL $label$4
	*($1) = ((int_64)*($1) << (int_64)3)
	return 
	
.LABEL $label$3
	*($1) = ((int_64)*($1) * (int_64)23)
	return 
	
.LABEL $label$2
	*($1) = ((int_64)*($1) * (int_64)50)
	return 
	
.LABEL $label$1
	*($1) = ((int_64)*($1) * (int_64)800)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9228])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9274])
	$5 = *($1)
	$6 = ($1 + [80])
	CALL $63($6, *($3))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9325])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$7 = ($1 + [8])
	*($3 + [36]) = $7
	*($3 + [32]) = $1
	$8 = ($1 + [16])
	*($3 + [40]) = $8
	$9 = ($1 + [32])
	*($3 + [44]) = $9
	$10 = ($1 + [48])
	*($3 + [48]) = $10
	$11 = ($1 + [56])
	*($3 + [52]) = $11
	$12 = ($1 + [68])
	*($3 + [56]) = $12
	*($3 + [60]) = $6
	CALL $46(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $79($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	*($3 + [52]) = $11
	*($3 + [56]) = $12
	*($3 + [60]) = $6
	*($3 + [32]) = $1
	CALL $47(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $82($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	
.LOOP $label$1:
	$5 = ($1 + [-8])
	$6 = ($1 + [-4])
	
.LOOP $label$6:
	$4 = $0
	$0 = ($1 - $4)
	$7 = int_32($0 >> [2])
	if ( ((uint_32)$7 <= (uint_32)[5]) ){ goto $label$45 }
	if ( ((int_32)$0 <= (int_32)[123]) ){ goto $label$44 }
	$8 = ($4 + (((int_32)$7 / (int_32)[2]) << [2]))
	if ( ((int_32)$0 < (int_32)[3997]) ){ goto $label$46 }
	$0 = (((int_32)$7 / (int_32)[4]) << [2])
	$9 = CALL $50($4, ($4 + $0), $8, ($8 + $0), $6, $2)
	goto $label$16 
	
.LABEL $label$46
	$0 = *($6)
	$10 = *($4)
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$49 }
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$48 }
	*($4) = $0
	*($6) = $10
	$9 = [1]
	$10 = *($8)
	$3 = *($4)
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$49
	$9 = [0]
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$16 }
	*($8) = $0
	*($6) = $7
	$9 = [1]
	$7 = *($4)
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$16 }
	*($4) = $0
	*($8) = $7
	goto $label$47 
	
.LABEL $label$48
	*($4) = $7
	*($8) = $10
	$9 = [1]
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$16 }
	*($8) = $0
	*($6) = $10
	
.LABEL $label$47
	$9 = [2]
	$10 = *($8)
	$3 = *($4)
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$45
	goto $label$30 
	
.LABEL $label$50
	$10 = *($4)
	$0 = ($1 + [-4])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$23 }
	*($4) = $7
	*($0) = $10
	return 
	
.LABEL $label$44
	$0 = *($4 + [8])
	$10 = *($4)
	$7 = *($4 + [4])
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$56 }
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$55 }
	*($4) = $0
	*(($4 + [8])) = $10
	goto $label$54 
	
.LABEL $label$56
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$52 }
	*(($4 + [8])) = $7
	*(($11 = ($4 + [4]))) = $0
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($11) = $10
	$12 = ($4 + [12])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$51 }
	goto $label$21 
	
.LABEL $label$55
	*($4) = $7
	*(($7 = ($4 + [4]))) = $10
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$52 }
	*(($4 + [8])) = $10
	*($7) = $0
	
.LABEL $label$54
	$7 = $10
	
.LABEL $label$53
	$12 = ($4 + [12])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$51 }
	goto $label$22 
	
.LABEL $label$52
	$7 = $0
	$12 = ($4 + [12])
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$20 }
	
.LABEL $label$51
	$6 = [8]
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)$7) ){ goto $label$31 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$43
	$10 = ($1 + [-4])
	$0 = *($10)
	$11 = *($4)
	$7 = *($4 + [4])
	if ( ((uint_32)$7 >= (uint_32)$11) ){ goto $label$40 }
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$38 }
	*($4) = $0
	*($10) = $11
	return 
	
.LABEL $label$42
	CALL $50($4, ($4 + [4]), ($4 + [8]), ($4 + [12]), ($1 + [-4]), $2)
	return 
	
.LABEL $label$41
	$11 = ($1 + [-4])
	$7 = *($4 + [8])
	$10 = *($4)
	$0 = *($4 + [4])
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$37 }
	*($4) = $7
	*(($4 + [8])) = $10
	goto $label$36 
	
.LABEL $label$40
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$26 }
	*(($11 = ($4 + [4]))) = $0
	*($10) = $7
	$7 = *($4)
	$0 = *($11)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$25 }
	*($4) = $0
	*($11) = $7
	return 
	
.LABEL $label$39
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$35 }
	*(($4 + [8])) = $0
	*(($12 = ($4 + [4]))) = $7
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$33 }
	*($4) = $7
	*($12) = $10
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$19 }
	goto $label$32 
	
.LABEL $label$38
	*($4) = $7
	*(($0 = ($4 + [4]))) = $11
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)$11) ){ goto $label$24 }
	*($0) = $7
	*($10) = $11
	return 
	
.LABEL $label$37
	*($4) = $0
	*(($0 = ($4 + [4]))) = $10
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$34 }
	*(($4 + [8])) = $10
	*($0) = $7
	
.LABEL $label$36
	$0 = $10
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$17 }
	goto $label$32 
	
.LABEL $label$35
	$0 = $7
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$18 }
	goto $label$32 
	
.LABEL $label$34
	$0 = $7
	
.LABEL $label$33
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$29 }
	
.LABEL $label$32
	*(($7 = ($4 + [8]))) = $12
	*($11) = $0
	$10 = ($4 + [4])
	$11 = *($10)
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$28 }
	*($7) = $11
	*($10) = $0
	$7 = *($4)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$27 }
	*($4) = $0
	*(($4 + [4])) = $7
	return $13
	
.LABEL $label$31
	$13 = [0]
	goto $label$3 
	
.LABEL $label$30
	$13 = [7]
	goto $label$3 
	
.LABEL $label$29
	$13 = [7]
	goto $label$3 
	
.LABEL $label$28
	$13 = [7]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$24
	$13 = [7]
	goto $label$3 
	
.LABEL $label$23
	$13 = [7]
	goto $label$3 
	
.LABEL $label$22
	$13 = [7]
	goto $label$3 
	
.LABEL $label$21
	$13 = [7]
	goto $label$3 
	
.LABEL $label$20
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$13 = [7]
	goto $label$3 
	
.LABEL $label$18
	$13 = [7]
	goto $label$3 
	
.LABEL $label$17
	$13 = [7]
	goto $label$3 
	
.LABEL $label$16
	$10 = *($8)
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = $6
	$3 = ($4 + [4])
	if ( ($3 <= $7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$0 = $5
	
.LOOP $label$57:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$7 = *($0)
	$11 = ($0 + [-4])
	$0 = $11
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$57 }
	*($4) = $7
	*(($7 = ($11 + [4]))) = $3
	$9 = ($9 + [1])
	$3 = ($4 + [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$11 }
	
.LABEL $label$13
	
.LOOP $label$58:
	$0 = ($3 + [-4])
	$10 = *($8)
	
.LOOP $label$59:
	$0 = ($0 + [4])
	$11 = *($0)
	if ( ($11 <= $10) ){ goto $label$59 }
	$3 = ($0 + [4])
	
.LOOP $label$60:
	$7 = ($7 + [-4])
	$12 = *($7)
	if ( ((uint_32)$12 >= (uint_32)$10) ){ goto $label$60 }
	if ( ((uint_32)$0 > (uint_32)$7) ){ goto $label$61 }
	*($0) = $12
	*($7) = $11
	$8 = ( $7 ? $8 : ((int_32)$8 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$58 
	
.LABEL $label$61
	$3 = $0
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$12 = ($4 + [4])
	$10 = *($6)
	if ( ($3 <= $10) ){ goto $label$66 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$65 }
	$12 = ($4 + [8])
	
.LOOP $label$68:
	$0 = ($12 + [-4])
	$7 = *($0)
	if ( ($3 <= $7) ){ goto $label$67 }
	$12 = ($12 + [4])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$68 }
	goto $label$64 
	
.LABEL $label$67
	*($0) = $10
	*($6) = $7
	
.LABEL $label$66
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$63 }
	
.LOOP $label$69:
	$0 = ($12 + [-4])
	$7 = *($4)
	
.LOOP $label$70:
	$0 = ($0 + [4])
	$10 = *($0)
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$70 }
	$12 = ($0 + [4])
	
.LOOP $label$71:
	$6 = ($6 + [-4])
	$11 = *($6)
	if ( ($7 <= $11) ){ goto $label$71 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$72 }
	*($0) = $11
	*($6) = $10
	goto $label$69 
	
.LABEL $label$72
	$7 = ([4] & [7])
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$62 }
	goto $label$4 
	
.LABEL $label$65
	$13 = [7]
	goto $label$3 
	
.LABEL $label$64
	$13 = [7]
	goto $label$3 
	
.LABEL $label$63
	$13 = [7]
	goto $label$3 
	
.LABEL $label$62
	$13 = [7]
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$10
	$7 = *($3)
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$9 }
	*($3) = $0
	*($8) = $7
	if ( ($9 + [1]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$8
	$7 = CALL $51($4, $3, $2)
	$0 = ($3 + [4])
	if ( CALL $51($0, $1, $2) ){ goto $label$5 }
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $49($4, $3, $2)
	$0 = ($3 + [4])
	goto $label$6 
	
.LABEL $label$5
	$1 = ( $1 ? $3 : $7 )
	$0 = $4
	$7 = (( [1] ? [2] : $7 ) & [7])
	if ( ((uint_32)$7 <= (uint_32)[4]) ){ goto $label$4 }
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $7) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$73:
	goto $label$81 
	
.LABEL $label$88
	$0 = $6
	$13 = [3]
	goto $label$73 
	
.LABEL $label$87
	*((($10 = ($4 + $0)) + [4])) = $7
	if ( ($0 == 0) ){ goto $label$75 }
	$13 = [4]
	goto $label$73 
	
.LABEL $label$86
	$0 = ($0 + [-4])
	$7 = *(($10 + [-4]))
	if ( ($11 <= $7) ){ goto $label$76 }
	$13 = [5]
	goto $label$73 
	
.LABEL $label$85
	$0 = (($4 + $0) + [4])
	goto $label$74 
	
.LABEL $label$84
	$0 = $4
	$13 = [6]
	goto $label$73 
	
.LABEL $label$83
	*($0) = $11
	$0 = ($12 + [4])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$77 }
	$13 = [1]
	goto $label$73 
	
.LABEL $label$82
	$6 = ($6 + [4])
	$7 = *($12)
	$12 = $0
	$11 = *($12)
	if ( ($11 <= $7) ){ goto $label$79 }
	$13 = [0]
	goto $label$73 
	
.LABEL $label$81
	$0 = ($12 + [4])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$78 }
	$13 = [7]
	goto $label$73 
	
.LABEL $label$80
	return 
	
.LABEL $label$79
	$13 = [2]
	goto $label$73 
	
.LABEL $label$78
	$13 = [1]
	goto $label$73 
	
.LABEL $label$77
	$13 = [7]
	goto $label$73 
	
.LABEL $label$76
	$13 = [3]
	goto $label$73 
	
.LABEL $label$75
	$13 = [8]
	goto $label$73 
	
.LABEL $label$74
	$13 = [6]
	goto $label$73 
	
.LABEL $label$2
	CALL $49(($3 + [4]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$7
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9187])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9187])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $64($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $81($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8361])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9515])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $44($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8960])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8960])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8960])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), *($0 + [20]))
	CALL $40(*($1), *($0 + [24]))
	CALL $40(*($1), *($0 + [28]))
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8960])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8960])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8960])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8960])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $43($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $65($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $65($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $60($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $48(*($1), *($0 + [20]))
	CALL $48(*($1), *($0 + [24]))
	CALL $48(*($1), *($0 + [28]))
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [56])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0)
	$0 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [88])))
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [76])))
	if ( (*($1 + [56]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $72 ()
{
	return [9736]
}

void .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18136])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17944]
	$3 = (((int_32)$1 * (int_32)[12]) + [17944])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = int_32(($1 - $0) >> [2])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$21 }
	goto $label$3 
	
.LABEL $label$22
	$4 = *($0)
	$3 = ($1 + [-4])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$3 }
	*($0) = $2
	*($3) = $4
	return [1]
	
.LABEL $label$21
	$3 = *($0 + [8])
	$4 = *($0)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$17 }
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$14 }
	*($0) = $3
	*(($0 + [8])) = $4
	goto $label$13 
	
.LABEL $label$20
	$4 = ($1 + [-4])
	$3 = *($4)
	$5 = *($0)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$16 }
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$9 }
	*($0) = $3
	*($4) = $5
	return [1]
	
.LABEL $label$19
	CALL $50($0, ($0 + [4]), ($0 + [8]), ($0 + [12]), ($1 + [-4]), $2)
	return [1]
	
.LABEL $label$18
	$5 = ($1 + [-4])
	$2 = *($0 + [8])
	$4 = *($0)
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$15 }
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [8])) = $4
	goto $label$7 
	
.LABEL $label$17
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$11 }
	*(($0 + [8])) = $2
	*(($5 = ($0 + [4]))) = $3
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$12 }
	*($0) = $3
	*($5) = $4
	$6 = ($0 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$16
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$3 }
	*(($5 = ($0 + [4]))) = $3
	*($4) = $2
	$2 = *($0)
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$3 }
	*($0) = $3
	*($5) = $2
	return [1]
	
.LABEL $label$15
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$5 }
	*(($0 + [8])) = $3
	*(($6 = ($0 + [4]))) = $2
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$6 }
	*($0) = $2
	*($6) = $4
	$4 = *($5)
	if ( ($4 <= $3) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$14
	*($0) = $2
	*(($2 = ($0 + [4]))) = $4
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$11 }
	*(($0 + [8])) = $4
	*($2) = $3
	
.LABEL $label$13
	$2 = $4
	
.LABEL $label$12
	$6 = ($0 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	$2 = $3
	$6 = ($0 + [12])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$10
	$7 = [0]
	$8 = [8]
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)$2) ){ goto $label$2 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$9
	*($0) = $2
	*(($3 = ($0 + [4]))) = $5
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$3 }
	*($3) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$8
	*($0) = $3
	*(($3 = ($0 + [4]))) = $4
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$5 }
	*(($0 + [8])) = $4
	*($3) = $2
	
.LABEL $label$7
	$3 = $4
	
.LABEL $label$6
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$3 = $2
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$4
	*(($2 = ($0 + [8]))) = $4
	*($5) = $3
	$4 = ($0 + [4])
	$5 = *($4)
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)$5) ){ goto $label$3 }
	*($2) = $5
	*($4) = $3
	$2 = *($0)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$3 }
	*($0) = $3
	*(($0 + [4])) = $2
	return [1]
	
.LABEL $label$3
	return [1]
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	
.LOOP $label$23:
	goto $label$34 
	
.LABEL $label$40
	$3 = $8
	$9 = [3]
	goto $label$23 
	
.LABEL $label$39
	*((($4 = ($0 + $3)) + [4])) = $2
	if ( ($3 == 0) ){ goto $label$24 }
	$9 = [4]
	goto $label$23 
	
.LABEL $label$38
	$3 = ($3 + [-4])
	$2 = *(($4 + [-4]))
	if ( ($5 <= $2) ){ goto $label$25 }
	$9 = [5]
	goto $label$23 
	
.LABEL $label$37
	*((($0 + $3) + [4])) = $5
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$36
	*($0) = $5
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$35
	$8 = ($8 + [4])
	$2 = *($6)
	$6 = $3
	$5 = *($6)
	if ( ($5 <= $2) ){ goto $label$30 }
	$9 = [0]
	goto $label$23 
	
.LABEL $label$34
	$3 = ($6 + [4])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$31 }
	$9 = [8]
	goto $label$23 
	
.LABEL $label$33
	return [1]
	
.LABEL $label$32
	return ((int_32)($6 + [4]) == (int_32)$1)
	
.LABEL $label$31
	$9 = [1]
	goto $label$23 
	
.LABEL $label$30
	$9 = [2]
	goto $label$23 
	
.LABEL $label$29
	$9 = [6]
	goto $label$23 
	
.LABEL $label$28
	$9 = [0]
	goto $label$23 
	
.LABEL $label$27
	$9 = [6]
	goto $label$23 
	
.LABEL $label$26
	$9 = [0]
	goto $label$23 
	
.LABEL $label$25
	$9 = [3]
	goto $label$23 
	
.LABEL $label$24
	$9 = [7]
	goto $label$23 
	$3
	return $9
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $79($1)
	
.LABEL $label$2
	*(CALL $72()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $79(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $82($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $75(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9744]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9748])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9744]) = [1]
	$2 = ($2 << [16])
	*([0] + [9748]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9748])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9748]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9744]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9744]) = [1]
	$3 = ($3 << [16])
	*([0] + [9748]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9748])
	
.LABEL $label$10
	*([0] + [9748]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $60 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9187])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8937])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $79($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [92]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [68])
	*($3 + [60]) = ($5 + [80])
	CALL $42(($3 + [32]), ($3 + [24]))
	*($5 + [96]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $82($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [80]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [68]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [88])))
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [76])))
	if ( (*($1 + [56]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [80]) = $1
	*($3 + [64]) = [8348]
	*($3 + [68]) = CALL $76([8348])
	*($3 + [8]) = *($3 + [64])
	CALL require_auth(*(CALL $3(($3 + [72]), ($3 + [8]))))
	*((($3 + [24]) + [32])) = [0]
	*($3 + [40]) = (int_64)-1
	$1 = *($0)
	*($3 + [24]) = $1
	*($3 + [32]) = $1
	*($3 + [48]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)-4417013817575866368, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4(($3 + [24]), $5)
	
.LABEL $label$1
	*($3 + [20]) = $4
	*($3 + [16]) = ($3 + [24])
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8447])
	CALL eosio_assert((*($4 + [16]) == 0), [8478])
	$6 = *($0)
	CALL eosio_assert($5, [9193])
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($3 + [24])), [9228])
	CALL eosio_assert(((int_64)*($3 + [24]) == (int_64)CALL $fimport$3()), [9274])
	*($4 + [8]) = ((int_64)*($4 + [8]) + (int_64)1)
	$1 = *($4)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($4 + [32]))), [9384])
	$7 = ((int_64)*($4 + [24]) + (int_64)*($2))
	*($4 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9427])
	CALL eosio_assert(((int_64)*($4 + [24]) < (int_64)4611686018427387904), [9446])
	CALL eosio_assert(((int_64)$1 == (int_64)*($4)), [9325])
	*($3 + [176]) = (($3 + [112]) + [52])
	*($3 + [172]) = ($3 + [112])
	*($3 + [168]) = ($3 + [112])
	*($3 + [104]) = ($3 + [168])
	*($3 + [188]) = ($4 + [8])
	*($3 + [184]) = $4
	*($3 + [192]) = ($4 + [16])
	*($3 + [196]) = ($4 + [24])
	*($3 + [200]) = ($4 + [40])
	CALL $8(($3 + [184]), ($3 + [104]))
	CALL db_update_i64(*($4 + [60]), $6, ($3 + [112]), [52])
	$4 = (($3 + [24]) + [16])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 = ($3 + [144]))) = [0]
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$1 = *($0)
	*($3 + [112]) = $1
	*($3 + [120]) = $1
	$4 = CALL db_find_i64($1, $1, (int_64)-5894997192451555328, *($3 + [80]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $9(($3 + [112]), $4)
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)($3 + [112])), [9464])
	$8 = ($4 + [80])
	$11 = *($4 + [80])
	$10 = ($4 + [84])
	$9 = CALL $76([8496])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$5 }
	if ( (CALL $70($8, [0], [-1], [8496], $9) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$11 = *($8)
	$9 = CALL $76([8500])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$6 }
	if ( (CALL $70($8, [0], [-1], [8500], $9) == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$11 = *(($4 + [80]))
	$10 = CALL $76([8508])
	if ( ((int_32)$10 != (int_32)( *(($4 + [84])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$7 }
	if ( (CALL $70($8, [0], [-1], [8508], $10) == 0) ){ goto $label$4 }
	
.LABEL $label$7
	CALL eosio_assert([1], [9519])
	CALL eosio_assert([1], [9701])
	$8 = CALL db_next_i64(*($4 + [96]), ($3 + [184]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	CALL $9(($3 + [112]), $8)
	
.LABEL $label$8
	CALL $10(($3 + [112]), $4)
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [8513])
	
.LABEL $label$3
	$1 = *($0)
	*($3 + [176]) = $2
	*($3 + [172]) = ($3 + [16])
	*($3 + [168]) = ($3 + [80])
	*($3 + [104]) = $1
	CALL eosio_assert(((int_64)*($3 + [112]) == (int_64)CALL $fimport$3()), [8965])
	*($3 + [188]) = ($3 + [168])
	*($3 + [184]) = ($3 + [112])
	*($3 + [192]) = ($3 + [104])
	*(($4 = CALL _Znwj([104])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56 align=4]) = (int_64)0
	*($4 + [64 align=4]) = (int_64)0
	*($4 + [72 align=4]) = (int_64)0
	*($4 + [80 align=4]) = (int_64)0
	*($4 + [88]) = [0]
	*($4 + [92]) = ($3 + [112])
	CALL $11(($3 + [184]), $4)
	*($3 + [96]) = $4
	$1 = *($4)
	*($3 + [184]) = $1
	$2 = *($4 + [96])
	*($3 + [92]) = $2
	$8 = ($3 + [140])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*($5)) ){ goto $label$11 }
	*($0 + [8]) = $1
	*($0 + [16]) = $2
	*($3 + [96]) = [0]
	*($0) = $4
	*($8) = ($0 + [24])
	$4 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	CALL $12(($3 + [136]), ($3 + [96]), ($3 + [184]), ($3 + [92]))
	$4 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($4 + [80]) & [1]) ){ goto $label$16 }
	if ( (*($4 + [68]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [88])))
	if ( ((*($4 + [68]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [76])))
	if ( (*($4 + [56]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$9
	CALL $13(($3 + [136]))
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$17 }
	$5 = ($3 + [52])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	CALL _ZdlPv($0)
	
.LABEL $label$21
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [48]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $2
	
.LABEL $label$18
	*($5) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [208])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8937])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $79($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	CALL $41(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $82($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = [0]
	$4 = *($0)
	$5 = CALL $76([9016])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9020])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [9015]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9065])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [16])
	$10 = ($1 + [8])
	CALL eosio_assert([1], [9118])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $11
	$7 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9167])
	*(($1 + [32])) = $8
	*($1 + [24]) = (int_64)0
	$5 = CALL $76([9016])
	if ( ($5 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9020])
	goto $label$14 
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($5 + [9015]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9065])
	
.LABEL $label$17
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$16 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$8 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [9118])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $11
	$7 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $11
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [9167])
	*(($1 + [48])) = $8
	*($1 + [40]) = (int_64)0
	$7 = $2
	$5 = ($7 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($7 + [-12])
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [40])
	CALL $8(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-4417013817575866368, *(*($0 + [8])), $6, $5, [52])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$23 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$global$0 = ($3 + [48])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [112])
	$global$0 = $1
	*($1 + [56]) = [8348]
	*($1 + [60]) = CALL $76([8348])
	*($1) = *($1 + [56])
	CALL require_auth(*(CALL $3(($1 + [64]), $1)))
	*(($2 = ($1 + [48]))) = [0]
	*($1 + [32]) = (int_64)-1
	$3 = *($0)
	*($1 + [16]) = $3
	*($1 + [24]) = $3
	*($1 + [40]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-4417013817575866368, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $4(($1 + [16]), $4)
	$2 = *($1 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($1 + [104]) = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$3()), [8965])
	*($1 + [84]) = ($1 + [8])
	*($1 + [80]) = ($1 + [16])
	*($1 + [88]) = ($1 + [104])
	*(($0 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = ($1 + [16])
	CALL $5(($1 + [80]), $0)
	*($1 + [96]) = $0
	$3 = *($0)
	*($1 + [80]) = $3
	$5 = *($0 + [60])
	*($1 + [76]) = $5
	$6 = ($1 + [44])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*($2)) ){ goto $label$6 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($1 + [96]) = [0]
	*($4) = $0
	*($6) = ($4 + [24])
	$0 = *($1 + [96])
	*($1 + [96]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $6(($1 + [40]), ($1 + [96]), ($1 + [80]), ($1 + [76]))
	$0 = *($1 + [96])
	*($1 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($1 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($1 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [112])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8780])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8885])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8818])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8885])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [192]) = [8348]
	*($3 + [196]) = CALL $76([8348])
	*($3 + [32]) = *($3 + [192])
	CALL require_auth(*(CALL $3(($3 + [200]), ($3 + [32]))))
	$4 = [0]
	*((($3 + [152]) + [32])) = [0]
	*($3 + [168]) = (int_64)-1
	$5 = *($0)
	*($3 + [152]) = $5
	*($3 + [160]) = $5
	*($3 + [176]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($5, $5, (int_64)-4417013817575866368, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $4(($3 + [152]), $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8447])
	CALL eosio_assert((*($6 + [16]) == 0), [8478])
	*((($3 + [112]) + [32])) = [0]
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$5 = *($0)
	*($3 + [112]) = $5
	*($3 + [120]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-5894997192451555328, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $9(($3 + [112]), $6)
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)($3 + [112])), [9464])
	
.LABEL $label$2
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [8531])
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	$6 = CALL $76([8548])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($3 + [96]) = ($6 << [1])
	$7 = (($3 + [96]) | [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($3 + [96]) = ($9 | [1])
	*($3 + [104]) = $7
	*($3 + [100]) = $6
	
.LABEL $label$5
	CALL memcpy($7, [8548], $6)
	
.LABEL $label$4
	*(($7 + $6)) = [0]
	$5 = *(($2 + [8]))
	$1 = *(($2 + [24]))
	$10 = *($2)
	$11 = *(($2 + [16]))
	*(($3 + [16])) = $11
	*(($3 + [24])) = $1
	*((($3 + [48]) + [16])) = $11
	*((($3 + [48]) + [24])) = $1
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	*($3) = $10
	*($3 + [8]) = $5
	*($3 + [48]) = $10
	*($3 + [56]) = $5
	CALL $15($0, ($3 + [80]), ($3 + [96]), [1], $3)
	$5 = *($0)
	*($3 + [40]) = ($3 + [80])
	CALL eosio_assert($8, [9193])
	CALL $16(($3 + [112]), $4, $5, ($3 + [40]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*((($3 + [80]) + [8])))
	
.LABEL $label$7
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [104]))
	
.LABEL $label$8
	CALL $13(($3 + [136]))
	$0 = *($3 + [176])
	if ( ($0 == 0) ){ goto $label$9 }
	$4 = ($3 + [180])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($3 + [176]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $0
	
.LABEL $label$10
	*($4) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$3
	CALL $60(($3 + [96]))
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = [0]
	*($5 + [88]) = [0]
	*($5 + [80]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$1 }
	CALL $63($2, ($0 + [28]))
	*(($0 = (($5 + [32]) + [24]))) = *(($4 + [24]))
	*(($7 = (($5 + [32]) + [16]))) = *(($4 + [16]))
	*($5 + [40]) = *(($4 + [8]))
	*($5 + [32]) = *($4)
	*((($5 + [96]) + [24])) = *($0)
	*((($5 + [96]) + [16])) = *($7)
	*($5 + [96]) = *($5 + [32])
	*($5 + [104]) = *($5 + [40])
	*($5 + [140]) = ((uint_32)*($5 + [96]) % (uint_32)[52])
	CALL $1(($5 + [80]), ($5 + [140]))
	$8 = (($5 + [80]) + [8])
	$0 = *($8)
	$7 = *($5 + [84])
	$9 = ((uint_32)*($5 + [97]) % (uint_32)[52])
	*($5 + [140]) = $9
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$3 }
	*($7) = $9
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$2 
	
.LABEL $label$3
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *($8)
	$7 = *($5 + [84])
	
.LABEL $label$2
	$8 = ((uint_32)*($5 + [98]) % (uint_32)[52])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$5 }
	*($7) = $8
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$4 
	
.LABEL $label$5
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *(($5 + [88]))
	$7 = *($5 + [84])
	
.LABEL $label$4
	$8 = ((uint_32)*($5 + [99]) % (uint_32)[52])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$7 }
	*($7) = $8
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$6 
	
.LABEL $label$7
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *(($5 + [88]))
	$7 = *($5 + [84])
	
.LABEL $label$6
	$8 = ((uint_32)*($5 + [100]) % (uint_32)[52])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$9 }
	*($7) = $8
	$0 = ($7 + [4])
	*($5 + [84]) = $0
	goto $label$8 
	
.LABEL $label$9
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *($5 + [84])
	
.LABEL $label$8
	$10 = *($5 + [80])
	$0 = ($0 - $10)
	if ( ((int_32)$0 < (int_32)[5]) ){ goto $label$10 }
	$9 = int_32($0 >> [2])
	$6 = ($9 + [-1])
	$0 = [0]
	
.LOOP $label$11:
	$11 = ($0 + [1])
	if ( ((int_32)$11 >= (int_32)$9) ){ goto $label$12 }
	$12 = ($10 + ($0 << [2]))
	$0 = $11
	
.LOOP $label$13:
	$8 = ($10 + ($0 << [2]))
	$7 = *($12)
	if ( ((int_32)$7 != (int_32)*($8)) ){ goto $label$14 }
	$0 = (((uint_32)($7 + [10]) % (uint_32)([51] - $7)) + $7)
	*($8) = ($0 + ((uint_32)($0 + [10]) % (uint_32)([47] - $0)))
	$0 = $11
	if ( ((int_32)$0 < (int_32)$9) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)$9) ){ goto $label$13 }
	
.LABEL $label$12
	$0 = $11
	if ( ((int_32)$11 < (int_32)$6) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = CALL $62(($5 + [96]), $2, ((int_32)*($10) * (int_32)[3]), [2], $2)
	$0 = (($5 + [64]) | [1])
	if ( (*($5 + [64]) & [1]) ){ goto $label$16 }
	*($5 + [64]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($5 + [72]))) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$15
	CALL $65(($5 + [64]), [0])
	$8 = *((($5 + [96]) + [8]))
	*(($12 = (($5 + [64]) + [8]))) = $8
	*($5 + [64]) = *($5 + [96])
	$9 = *($5 + [64])
	$10 = ($9 & [1])
	CALL $68($1, ( $8 ? $0 : $10 ), ( *($5 + [68]) ? uint_32($9 >> [1]) : $10 ))
	CALL $67($1, [8603])
	$7 = CALL $62($7, $2, ((int_32)*(*($5 + [80]) + [4]) * (int_32)[3]), [2], $2)
	if ( (*($5 + [64]) & [1]) ){ goto $label$18 }
	*($5 + [64]) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*($12)) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$17
	CALL $65(($5 + [64]), [0])
	$8 = *((($5 + [96]) + [8]))
	*(($12 = (($5 + [64]) + [8]))) = $8
	*($5 + [64]) = *($5 + [96])
	$9 = *($5 + [64])
	$10 = ($9 & [1])
	CALL $68($1, ( $8 ? $0 : $10 ), ( *($5 + [68]) ? uint_32($9 >> [1]) : $10 ))
	CALL $67($1, [8603])
	$7 = CALL $62($7, $2, ((int_32)*(*($5 + [80]) + [8]) * (int_32)[3]), [2], $2)
	if ( (*($5 + [64]) & [1]) ){ goto $label$20 }
	*($5 + [64]) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*($12)) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$19
	CALL $65(($5 + [64]), [0])
	$8 = *((($5 + [96]) + [8]))
	*(($12 = (($5 + [64]) + [8]))) = $8
	*($5 + [64]) = *($5 + [96])
	$9 = *($5 + [64])
	$10 = ($9 & [1])
	CALL $68($1, ( $8 ? $0 : $10 ), ( *($5 + [68]) ? uint_32($9 >> [1]) : $10 ))
	CALL $67($1, [8603])
	$7 = CALL $62($7, $2, ((int_32)*(*($5 + [80]) + [12]) * (int_32)[3]), [2], $2)
	if ( (*($5 + [64]) & [1]) ){ goto $label$22 }
	*($5 + [64]) = [0]
	goto $label$21 
	
.LABEL $label$22
	*(*($12)) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$21
	CALL $65(($5 + [64]), [0])
	$8 = *((($5 + [96]) + [8]))
	*(($12 = (($5 + [64]) + [8]))) = $8
	*($5 + [64]) = *($5 + [96])
	$9 = *($5 + [64])
	$10 = ($9 & [1])
	CALL $68($1, ( $8 ? $0 : $10 ), ( *($5 + [68]) ? uint_32($9 >> [1]) : $10 ))
	CALL $67($1, [8603])
	CALL $62($7, $2, ((int_32)*(*($5 + [80]) + [16]) * (int_32)[3]), [2], $2)
	if ( (*($5 + [64]) & [1]) ){ goto $label$24 }
	*($5 + [64]) = [0]
	goto $label$23 
	
.LABEL $label$24
	*(*($12)) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$23
	CALL $65(($5 + [64]), [0])
	$7 = *((($5 + [96]) + [8]))
	*((($5 + [64]) + [8])) = $7
	*($5 + [64]) = *($5 + [96])
	$8 = *($5 + [64])
	$9 = ($8 & [1])
	CALL $68($1, ( $7 ? $0 : $9 ), ( *($5 + [68]) ? uint_32($8 >> [1]) : $9 ))
	CALL $67($1, [8603])
	$6 = [5]
	
.LABEL $label$1
	if ( ((int_32)$3 != (int_32)[2]) ){ goto $label$25 }
	*(($0 = ($5 + [24]))) = *(($4 + [24]))
	*(($7 = ($5 + [16]))) = *(($4 + [16]))
	*($5) = *($4)
	*($5 + [8]) = *(($4 + [8]))
	*((($5 + [96]) + [24])) = *($0)
	*((($5 + [96]) + [16])) = *($7)
	*($5 + [96]) = *($5)
	*($5 + [104]) = *($5 + [8])
	$8 = ((uint_32)*($5 + [96]) % (uint_32)[47])
	*($5 + [140]) = $8
	$9 = (($5 + [80]) + [8])
	$0 = *($9)
	$7 = *($5 + [84])
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$27 }
	*($7) = $8
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$26 
	
.LABEL $label$27
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *($9)
	$7 = *($5 + [84])
	
.LABEL $label$26
	$8 = ((uint_32)*($5 + [97]) % (uint_32)[47])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$29 }
	*($7) = $8
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$28 
	
.LABEL $label$29
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *(($5 + [88]))
	$7 = *($5 + [84])
	
.LABEL $label$28
	$8 = ((uint_32)*($5 + [98]) % (uint_32)[47])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$31 }
	*($7) = $8
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$30 
	
.LABEL $label$31
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *(($5 + [88]))
	$7 = *($5 + [84])
	
.LABEL $label$30
	$8 = ((uint_32)*($5 + [99]) % (uint_32)[47])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$33 }
	*($7) = $8
	$7 = ($7 + [4])
	*($5 + [84]) = $7
	goto $label$32 
	
.LABEL $label$33
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *(($5 + [88]))
	$7 = *($5 + [84])
	
.LABEL $label$32
	$8 = ((uint_32)*($5 + [100]) % (uint_32)[47])
	*($5 + [140]) = $8
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$35 }
	*($7) = $8
	$0 = ($7 + [4])
	*($5 + [84]) = $0
	goto $label$34 
	
.LABEL $label$35
	CALL $1(($5 + [80]), ($5 + [140]))
	$0 = *($5 + [84])
	
.LABEL $label$34
	$7 = *($5 + [80])
	$0 = ($0 - $7)
	if ( ((int_32)$0 < (int_32)[5]) ){ goto $label$36 }
	$9 = int_32($0 >> [2])
	$11 = ($9 + [-1])
	$12 = [0]
	
.LOOP $label$37:
	$8 = $12
	$12 = ($8 + [1])
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$38 }
	$10 = *(($7 + ($8 << [2])))
	$0 = $12
	
.LOOP $label$39:
	$0 = (( $8 ? $0 : ((int_32)$10 == (int_32)*(($7 + ($0 << [2])))) ) + [1])
	if ( ((int_32)$0 < (int_32)$9) ){ goto $label$39 }
	
.LABEL $label$38
	if ( ((int_32)$12 < (int_32)$11) ){ goto $label$37 }
	
.LABEL $label$36
	if ( ((int_32)$6 == (int_32)[5]) ){ goto $label$25 }
	$0 = ($6 << [2])
	$10 = (($5 + [64]) | [1])
	
.LOOP $label$40:
	CALL $62(($5 + [96]), $2, ((int_32)*(($7 + $0)) * (int_32)[3]), [2], $2)
	if ( (*($5 + [64]) & [1]) ){ goto $label$42 }
	*($5 + [64]) = [0]
	goto $label$41 
	
.LABEL $label$42
	*(*((($5 + [64]) + [8]))) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$41
	CALL $65(($5 + [64]), [0])
	$7 = *((($5 + [96]) + [8]))
	*((($5 + [64]) + [8])) = $7
	*($5 + [64]) = *($5 + [96])
	$8 = *($5 + [64])
	$9 = ($8 & [1])
	CALL $68($1, ( $7 ? $10 : $9 ), ( *($5 + [68]) ? uint_32($8 >> [1]) : $9 ))
	CALL $67($1, [8603])
	if ( ((int_32)$0 == (int_32)[16]) ){ goto $label$25 }
	$0 = ($0 + [4])
	$7 = *($5 + [80])
	goto $label$40 
	
.LABEL $label$25
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$43
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$44 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$44
	$global$0 = ($5 + [144])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9228])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9274])
	$5 = *($1)
	$6 = ($1 + [56])
	CALL $63($6, *($3))
	$7 = ($1 + [80])
	CALL $66($7, [8500])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9325])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$8 = ($1 + [8])
	*($3 + [36]) = $8
	*($3 + [32]) = $1
	$9 = ($1 + [16])
	*($3 + [40]) = $9
	$10 = ($1 + [32])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	*($3 + [52]) = $6
	$12 = ($1 + [68])
	*($3 + [56]) = $12
	*($3 + [60]) = $7
	CALL $46(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $79($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $6
	*($3 + [56]) = $12
	*($3 + [60]) = $7
	*($3 + [32]) = $1
	CALL $47(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $82($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [144]) = [8348]
	*($3 + [148]) = CALL $76([8348])
	*($3) = *($3 + [144])
	CALL require_auth(*(CALL $3(($3 + [152]), $3)))
	$4 = [0]
	*((($3 + [104]) + [32])) = [0]
	*($3 + [120]) = (int_64)-1
	$5 = *($0)
	*($3 + [104]) = $5
	*($3 + [112]) = $5
	*($3 + [128]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($5, $5, (int_64)-4417013817575866368, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $4(($3 + [104]), $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8447])
	CALL eosio_assert((*($6 + [16]) == 0), [8478])
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$5 = *($0)
	*($3 + [64]) = $5
	*($3 + [72]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-5894997192451555328, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $9(($3 + [64]), $6)
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)($3 + [64])), [9464])
	
.LABEL $label$2
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [8531])
	$6 = CALL $61(($3 + [48]), ($4 + [56]))
	$9 = CALL $61(($3 + [16]), $6)
	$7 = CALL $61(($3 + [32]), $2)
	$10 = CALL $18($4, $7, $9)
	if ( (*($9) & [1]) ){ goto $label$7 }
	if ( (*($7) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($7 + [8]))
	if ( $10 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	if ( $10 ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [8549])
	
.LABEL $label$3
	$5 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert($8, [9193])
	CALL $19(($3 + [64]), $4, $5, ($3 + [8]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$8
	CALL $13(($3 + [88]))
	$6 = *($3 + [128])
	if ( ($6 == 0) ){ goto $label$9 }
	$2 = ($3 + [132])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($3 + [128]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $6
	
.LABEL $label$10
	*($2) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$global$0 = ($3 + [160])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [9553])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9598])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9648])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [88])))
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [76])))
	if ( (*($3 + [56]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [88])))
	if ( ((*($5 + [68]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [68]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [76])))
	if ( (*($5 + [56]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [96]))
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1 + [48]) = (int_64)0
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*(*($4 + [4]) + [4]) + [8])
	$5 = *($0)
	$4 = *($4 + [8])
	*(($1 + [24])) = *(($4 + [8]))
	*($1 + [16]) = *($4)
	$4 = CALL $76([9016])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9020])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [9015]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9065])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [16])
	$10 = ($1 + [8])
	$11 = ($1 + [48])
	CALL eosio_assert([1], [9118])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $12
	$7 = [1]
	$13 = $4
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$13 = ($4 + [1])
	$4 = $13
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9167])
	*(($1 + [40])) = $8
	*($1 + [32]) = (int_64)0
	$13 = ($1 + [56])
	CALL $66($13, [8548])
	$14 = ($1 + [68])
	CALL $66($14, [8548])
	$15 = ($1 + [80])
	CALL $66($15, [8496])
	*($3 + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = $9
	$16 = ($1 + [32])
	*($3 + [44]) = $16
	*($3 + [48]) = $11
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	CALL $46(($3 + [32]), ($3 + [8]))
	$7 = *($3 + [24])
	if ( ($7 <= [513]) ){ goto $label$13 }
	$4 = CALL $79($7)
	goto $label$12 
	
.LABEL $label$13
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$12
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $7)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = $9
	*($3 + [44]) = $16
	*($3 + [48]) = $11
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	CALL $47(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($5 + [8]), (int_64)-5894997192451555328, *(*($0 + [8])), $6, $4, $7)
	if ( ($7 <= [513]) ){ goto $label$16 }
	CALL $82($4)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$14 }
	
.LABEL $label$15
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$14
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $45(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [88])))
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [76])))
	if ( (*($3 + [56]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $79($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [104])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [80]) = ($2 + $7)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8960])
	CALL memcpy(($4 + [88]), $2, [8])
	*($4 + [76]) = ($2 + [8])
	$8 = (($4 + [88]) + [8])
	CALL $40(($4 + [72]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($9 = (($4 + [128]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [128]) = $10
	*($4 + [112]) = $10
	$3 = *($9)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*(($4 + [60])) = [0]
	*($4 + [52 align=4]) = (int_64)0
	$9 = ($4 + [52])
	$3 = CALL $76([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*(($4 + [52])) = ($3 << [1])
	$9 = ($9 + [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = (($3 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*(($4 + [60])) = $9
	*(($4 + [56])) = $3
	*($4 + [52]) = ($11 | [1])
	
.LABEL $label$9
	CALL memcpy($9, [8192], $3)
	
.LABEL $label$8
	*(($9 + $3)) = [0]
	*($4 + [64]) = [20]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$9 = CALL $61(($4 + [128]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$11 }
	$6 = *((*($3) + $6))
	
.LABEL $label$11
	$5 = CALL $61(($4 + [144]), $9)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [144]) & [1]) ){ goto $label$13 }
	if ( (*($4 + [128]) & [1]) ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$12
	CALL _ZdlPv(*($9 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $60($9)
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $82($2)
	
.LABEL $label$4
	if ( ((*(($4 + [52])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [60])))
	
.LABEL $label$14
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$15
	$global$0 = ($4 + [160])
	(unreachable)
	return [1]
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $79($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8960])
	CALL memcpy(($4 + [56]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [44])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)0
	$8 = ($4 + [36])
	$3 = CALL $76([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*(($4 + [36])) = ($3 << [1])
	$8 = ($8 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($3 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*(($4 + [44])) = $8
	*(($4 + [40])) = $3
	*($4 + [36]) = ($9 | [1])
	
.LABEL $label$6
	CALL memcpy($8, [8192], $3)
	
.LABEL $label$5
	*(($8 + $3)) = [0]
	*($4 + [48]) = [20]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($3) + $6))
	
.LABEL $label$8
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $82($2)
	
.LABEL $label$9
	if ( ((*(($4 + [36])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$10
	$global$0 = ($4 + [64])
	return [1]
	
.LABEL $label$4
	CALL $60($8)
	return (unreachable)
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$7 = CALL $79($8)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$2
	CALL read_action_data($7, $8)
	
.LABEL $label$1
	*(($4 + [20])) = $7
	*(($4 + [24])) = ($7 + $8)
	*(($4 + [36])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $7
	*($4 + [28 align=4]) = (int_64)0
	$3 = ($4 + [28])
	$2 = CALL $76([8192])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*(($4 + [28])) = ($2 << [1])
	$3 = ($3 + [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($9)
	*(($4 + [36])) = $3
	*(($4 + [32])) = $2
	*($4 + [28]) = ($9 | [1])
	
.LABEL $label$6
	CALL memcpy($3, [8192], $2)
	
.LABEL $label$5
	*(($3 + $2)) = [0]
	*($4 + [40]) = [20]
	$2 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($2) + $6))
	
.LABEL $label$8
	CALL void $2((int_32 $6))
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL $82($7)
	
.LABEL $label$9
	if ( ((*(($4 + [28])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [36])))
	
.LABEL $label$10
	$global$0 = ($4 + [48])
	return [1]
	
.LABEL $label$4
	CALL $60($3)
	return (unreachable)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $79($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [72]) + [16]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8960])
	CALL memcpy(($4 + [72]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8960])
	$9 = (($4 + [72]) + [8])
	CALL memcpy($9, ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8960])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [52 align=4]) = (int_64)0
	$8 = ($4 + [52])
	$3 = CALL $76([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*(($4 + [52])) = ($3 << [1])
	$8 = ($8 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$10 = (($3 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*(($4 + [60])) = $8
	*(($4 + [56])) = $3
	*($4 + [52]) = ($10 | [1])
	
.LABEL $label$6
	CALL memcpy($8, [8192], $3)
	
.LABEL $label$5
	*(($8 + $3)) = [0]
	*($4 + [64]) = [20]
	*(($3 = (($4 + [96]) + [8]))) = *(($9 + [8]))
	*($4 + [96]) = *($9)
	$0 = *($4 + [72])
	*((($4 + [112]) + [8])) = *($3)
	*($4 + [112]) = *($4 + [96])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($3) + $6))
	
.LABEL $label$8
	$1 = *((($4 + [112]) + [8]))
	*((($4 + [128]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [112])
	*($4 + [8]) = $1
	*($4 + [128]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $82($2)
	
.LABEL $label$9
	if ( ((*(($4 + [52])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [60])))
	
.LABEL $label$10
	$global$0 = ($4 + [144])
	return [1]
	
.LABEL $label$4
	CALL $60($8)
	return (unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [176]) = [8719]
	*($3 + [180]) = CALL $76([8719])
	*($3 + [112]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-4416999342787788800) ){ goto $label$2 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3 + [8]) = *($3 + [168])
	CALL $34($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [176]) = [8725]
	*($3 + [180]) = CALL $76([8725])
	*($3 + [104]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$3 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [2]
	*($3 + [16]) = *($3 + [160])
	CALL $35($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [176]) = [8508]
	*($3 + [180]) = CALL $76([8508])
	*($3 + [96]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)7864006229016707072) ){ goto $label$4 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [24]) = *($3 + [152])
	CALL $36($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [176]) = [8735]
	*($3 + [180]) = CALL $76([8735])
	*($3 + [88]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [88]))
	if ( ((int_64)$2 != (int_64)5378304137773449216) ){ goto $label$5 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [32]) = *($3 + [144])
	CALL $37($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [176]) = [8744]
	*($3 + [180]) = CALL $76([8744])
	*($3 + [80]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-4994130327754206208) ){ goto $label$6 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [5]
	*($3 + [40]) = *($3 + [136])
	CALL $38($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [176]) = [8756]
	*($3 + [180]) = CALL $76([8756])
	*($3 + [72]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-4994130327919024992) ){ goto $label$7 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [48]) = *($3 + [128])
	CALL $38($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [176]) = [8769]
	*($3 + [180]) = CALL $76([8769])
	*($3 + [64]) = *($3 + [176])
	CALL $3(($3 + [184]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)4923676723943997440) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [56]) = *($3 + [120])
	CALL $39($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $73([0])
	$global$0 = ($3 + [192])
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [56]) = [8348]
	*($2 + [60]) = CALL $76([8348])
	*($2 + [8]) = *($2 + [56])
	CALL require_auth(*(CALL $3(($2 + [64]), ($2 + [8]))))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-5894997192451555328, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $9(($2 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [92]) == (int_32)($2 + [16])), [9464])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [8531])
	CALL eosio_assert($4, [9519])
	CALL eosio_assert($4, [9701])
	$4 = CALL db_next_i64(*($0 + [96]), ($2 + [72]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $9(($2 + [16]), $4)
	
.LABEL $label$2
	CALL $10(($2 + [16]), $0)
	CALL $13(($2 + [40]))
	$global$0 = ($2 + [80])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [72]) = [8348]
	*($2 + [76]) = CALL $76([8348])
	*($2 + [8]) = *($2 + [72])
	CALL require_auth(*(CALL $3(($2 + [80]), ($2 + [8]))))
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	$4 = CALL current_time()
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL prints([8594])
	$1 = (int_64)
	CALL printui($1(((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295) - $1)))
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)-5894997192451555328, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $9(($2 + [32]), $5)
	$6 = (($2 + [16]) + [8])
	$7 = ($0 + [40])
	$8 = [0]
	
.LOOP $label$2:
	$0 = *($5 + [80])
	$10 = ($5 + [84])
	$9 = CALL $76([8496])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$4 }
	$0 = ($5 + [80])
	if ( CALL $70($0, [0], [-1], [8496], $9) ){ goto $label$4 }
	$9 = *($0)
	$11 = CALL $76([8500])
	if ( ((int_32)$11 != (int_32)( *($10) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$4 }
	if ( CALL $70($0, [0], [-1], [8500], $11) ){ goto $label$4 }
	$9 = *($0)
	$11 = CALL $76([8508])
	if ( ((int_32)$11 != (int_32)( *($10) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$4 }
	if ( (CALL $70($0, [0], [-1], [8508], $11) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((uint_64)*($5 + [48]) >= (uint_64)$1) ){ goto $label$3 }
	$0 = *($2 + [20])
	if ( ((int_32)$0 == (int_32)*($6)) ){ goto $label$6 }
	*($0) = *($5)
	*($2 + [20]) = ($0 + [8])
	if ( ((uint_32)$8 <= (uint_32)*($7)) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $32(($2 + [16]), $5)
	if ( ((uint_32)$8 > (uint_32)*($7)) ){ goto $label$1 }
	
.LABEL $label$5
	$8 = ($8 + [1])
	
.LABEL $label$3
	CALL eosio_assert([1], [9701])
	$5 = CALL db_next_i64(*($5 + [96]), ($2 + [88]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $9(($2 + [32]), $5)
	goto $label$2 
	
.LABEL $label$1
	$6 = *($2 + [20])
	$10 = *($2 + [16])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$7 }
	$7 = ($2 + [60])
	$11 = ($2 + [56])
	$12 = (($2 + [32]) + [8])
	
.LOOP $label$8:
	$1 = *($10)
	$0 = *($7)
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$13:
	$5 = ($0 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$12 }
	$0 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($9 + [92]) == (int_32)($2 + [32])), [9464])
	if ( $9 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = CALL db_find_i64(*($2 + [32]), *($12), (int_64)-5894997192451555328, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $9(($2 + [32]), $5)
	CALL eosio_assert(((int_32)*($9 + [92]) == (int_32)($2 + [32])), [9464])
	
.LABEL $label$10
	CALL eosio_assert([1], [9519])
	CALL eosio_assert([1], [9701])
	$5 = CALL db_next_i64(*($9 + [96]), ($2 + [88]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	CALL $9(($2 + [32]), $5)
	
.LABEL $label$14
	CALL $10(($2 + [32]), $9)
	
.LABEL $label$9
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$8 }
	$10 = *($2 + [16])
	
.LABEL $label$7
	if ( ($10 == 0) ){ goto $label$15 }
	*($2 + [20]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$15
	CALL $13(($2 + [56]))
	$global$0 = ($2 + [96])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $82($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $64($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$8 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$5 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)$8) ){ goto $label$6 }
	*($0) = $6
	*($1) = $8
	$9 = [2]
	$7 = *($2)
	$8 = *($3)
	if ( ($8 <= $7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$6 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$7
	$7 = $8
	
.LABEL $label$6
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = $6
	$8 = *($3)
	if ( ($8 <= $7) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($3)
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2) = $8
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$11 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$10 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$11
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$1 }
	
.LABEL $label$2
	return $9
	
.LABEL $label$1
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$14 }
	*($2) = $7
	*($3) = $6
	$7 = *($1)
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$13 }
	*($1) = $3
	*($2) = $7
	$3 = *($0)
	$2 = *($1)
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$12 }
	*($0) = $2
	*($1) = $3
	return ($9 + [4])
	
.LABEL $label$14
	return ($9 + [1])
	
.LABEL $label$13
	return ($9 + [2])
	
.LABEL $label$12
	return ($9 + [3])
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $79($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*((($4 + [80]) + [40])) = (int_64)0
	*((($4 + [80]) + [32])) = (int_64)0
	*((($4 + [80]) + [24])) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [80]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8960])
	CALL memcpy(($4 + [80]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [8960])
	$8 = ($4 + [96])
	CALL memcpy($8, ($2 + [8]), [32])
	*(($4 + [52])) = ($2 + [40])
	*((($4 + [32]) + [24])) = ($2 + $7)
	*(($4 + [68])) = [0]
	*($4 + [40]) = $1
	*($4 + [32]) = $0
	*($4 + [48]) = $2
	*($4 + [60 align=4]) = (int_64)0
	$9 = ($4 + [60])
	$3 = CALL $76([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*(($4 + [60])) = ($3 << [1])
	$9 = ($9 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$10 = (($3 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*(($4 + [68])) = $9
	*(($4 + [64])) = $3
	*($4 + [60]) = ($10 | [1])
	
.LABEL $label$6
	CALL memcpy($9, [8192], $3)
	
.LABEL $label$5
	*(($9 + $3)) = [0]
	*($4 + [72]) = [20]
	*(($3 = (($4 + [128]) + [16]))) = *(($8 + [16]))
	*(($9 = (($4 + [128]) + [24]))) = *(($8 + [24]))
	*($4 + [128]) = *($8)
	*($4 + [136]) = *(($8 + [8]))
	$0 = *($4 + [80])
	*((($4 + [160]) + [24])) = *($9)
	*((($4 + [160]) + [16])) = *($3)
	*($4 + [168]) = *($4 + [136])
	*($4 + [160]) = *($4 + [128])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($3) + $6))
	
.LABEL $label$8
	$1 = *((($4 + [160]) + [24]))
	*((($4 + [192]) + [24])) = $1
	$11 = *((($4 + [160]) + [16]))
	*((($4 + [192]) + [16])) = $11
	*(($4 + [16])) = $11
	*(($4 + [24])) = $1
	$1 = *($4 + [168])
	*($4 + [200]) = $1
	$11 = *($4 + [160])
	*($4) = $11
	*($4 + [192]) = $11
	*($4 + [8]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $82($2)
	
.LABEL $label$9
	if ( ((*(($4 + [60])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [68])))
	
.LABEL $label$10
	$global$0 = ($4 + [224])
	return [1]
	
.LABEL $label$4
	CALL $60($9)
	return (unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $79($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9732])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $79($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $82($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $77(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9732])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $77(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}