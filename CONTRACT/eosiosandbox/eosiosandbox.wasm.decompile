(data (i32.const 4) "\b0f\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "sell\00")
(data (i32.const 160) "jackpot\00")
(data (i32.const 176) "\e7\b3\bb\e7\bb\9f\e6\95\b0\e6\8d\ae\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 208) "\e5\88\86\e7\ba\a2\e5\b7\b2\e7\bb\8f\e5\88\86\e9\85\8d\e5\ae\8c\00")
(data (i32.const 240) "cannot pass end iterator to modify\00")
(data (i32.const 288) "cannot increment end iterator\00")
(data (i32.const 320) "object passed to modify is not in multi_index\00")
(data (i32.const 368) "cannot modify objects in table of another contract\00")
(data (i32.const 432) "updater cannot change primary key when modifying an object\00")
(data (i32.const 496) "write\00")
(data (i32.const 512) "error reading iterator\00")
(data (i32.const 544) "read\00")
(data (i32.const 560) "cannot create objects in table of another contract\00")
(data (i32.const 624) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 688) "invalid symbol name\00")
(data (i32.const 720) "\e8\82\a1\e4\bb\bd\e6\95\b0\e9\87\8f\e4\b8\8d\e6\ad\a3\e7\a1\ae\00")
(data (i32.const 752) "\e8\af\b7\e8\87\b3\e5\b0\91\e5\87\ba\e5\94\ae1\e8\82\a1\00")
(data (i32.const 784) "\e5\8d\96\e5\87\ba\e7\9a\84\e8\82\a1\e4\bb\bd\e8\b6\85\e5\87\ba\e4\b8\8a\e9\99\90\00")
(data (i32.const 816) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 880) "\e8\b4\a6\e5\8f\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 896) "\e8\b4\a6\e5\8f\b7\e6\b2\a1\e6\9c\89\e8\b6\b3\e5\a4\9f\e5\a4\9a\e7\9a\84\e8\82\a1\e4\bb\bd\00")
(data (i32.const 928) "\e8\b5\84\e9\87\91\e5\82\a8\e5\a4\87\e6\b2\a1\e6\9c\89\e8\b6\b3\e5\a4\9f\e5\a4\9a\e7\9a\84EOS\00")
(data (i32.const 976) "\e5\b7\b2\e5\94\ae\e8\82\a1\e4\bb\bd\e6\b2\a1\e6\9c\89\e8\b6\b3\e5\a4\9f\e5\a4\9a\e7\9a\84KEY\00")
(data (i32.const 1024) "get\00")
(data (i32.const 1040) "\e6\b8\b8\e6\88\8f\e5\9c\a82018\e5\b9\b48\e6\9c\8818\e6\97\a5\e6\99\9a\e4\b8\8a8\e7\82\b98\e5\88\868\e7\a7\92\e5\90\af\e5\8a\a8\e6\b8\b8\e6\88\8f\00")
(data (i32.const 1104) "\e6\8f\90\e5\8f\96\e7\9a\84\e5\88\a9\e6\b6\a6\e4\b8\8d\e8\b6\b30.1EOS\00")
(data (i32.const 1136) "active\00")
(data (i32.const 1152) "\e6\b2\99\e7\9b\92\e6\b8\b8\e6\88\8f\e5\9b\a2\e9\98\9f\e6\84\9f\e8\b0\a2\e4\bd\a0\e7\9a\84\e6\94\af\e6\8c\81\ef\bc\9ahttps://yougou.io\00")
(data (i32.const 1216) "\e5\8f\91\e8\a1\8c\e7\9a\84\e8\82\a1\e4\bb\bd\e4\b8\8d\e8\b6\b3\e4\bb\a5\e5\87\ba\e5\94\ae\00")
(data (i32.const 1248) "\e8\b5\84\e9\87\91\e5\82\a8\e5\a4\87\e6\b2\a1\e6\9c\89\e8\b6\b3\e5\a4\9fEOS\00")
(data (i32.const 1280) "\e8\b4\ad\e4\b9\b0\e6\95\b0\e9\87\8f\e5\bf\85\e9\a1\bb\e5\a4\a7\e4\ba\8e\e7\ad\89\e4\ba\8e1EOS\00")
(data (i32.const 1328) "\e5\8d\95\e6\ac\a1\e8\b4\ad\e4\b9\b0\e6\95\b0\e9\87\8f\e8\b6\85\e5\87\ba\e4\b8\8a\e9\99\90\00")
(data (i32.const 1360) "\e5\a4\87\e6\b3\a8\e4\bf\a1\e6\81\af\e4\b8\8d\e8\83\bd\e8\b6\85\e8\bf\87256\e4\bd\8d\00")
(data (i32.const 1392) "imyogowallet\00")
(data (i32.const 9808) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $58))
(export "free" (func $61))
(export "floor" (func $68))
(export "memcmp" (func $69))
(export "strlen" (func $70))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $71 $7 $9 $11)



void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($6 + [72]) = *($1 + [24])
	$4 = *($1)
	$5 = CALL floor(((float_64)*(*($3)) * (float_64)*(*($3 + [4]))))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)(Rounds 0)($5))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [432])
	*($6 + [64]) = ($6 + [48])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	CALL $23(($6 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $6, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($6 + [72]), ($6 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9900])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [8]) = *(*(*($3) + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	CALL eosio_assert([1], [496])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [496])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $62(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $63($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $36($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [496])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [496])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $56(CALL $55($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $62($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $62(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $63($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $63($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [48]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $22(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [432])
	CALL eosio_assert([1], [496])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [496])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $62(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $63($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $63($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $62(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $63($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $63($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [496])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [496])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4406680061088890880, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$5 = *($1 + [24])
	*($6 + [72]) = $5
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)$5 + (int_64)*(*($3 + [4])))
	*($1 + [40]) = ((int_64)((int_64)((uint_64)*(*($3)) / (uint_64)(int_64)10000) * (int_64)-60) + (int_64)*(*(*($3 + [8]) + [4]) + [40]))
	CALL eosio_assert([1], [432])
	*($6 + [64]) = ($6 + [48])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	CALL $23(($6 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $6, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($6 + [72]), ($6 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$5 = *($1 + [24])
	*($6 + [72]) = $5
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)$5 + (int_64)*(*($3 + [4])))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [8])))
	$5 = CALL current_time()
	*($1 + [40]) = ((int_64)((int_64)((uint_64)*(*($3)) / (uint_64)(int_64)10000) * (int_64)-60) + (int_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [432])
	*($6 + [64]) = ($6 + [48])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	CALL $23(($6 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $6, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($6 + [72]), ($6 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_64 .FUNC floor (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$1 < (int_64)0)
	$3 = (float_64))(((float_64)( (float_64)4503599627370496 ? (float_64)-4503599627370496 : $4 ) + (float_64)((float_64)( (float_64)-4503599627370496 ? (float_64)4503599627370496 : $4 ) + (float_64)$0)) - $0)
	if ( ((uint_32)$2 > (uint_32)[1022]) ){ goto $label$2 }
	*($5 + [8]) = $3
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$1 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$3 <= (float_64)(float_64)0) | ((float_64)$3 != (float_64)$3)) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3 + [4])))
	$4 = *($1)
	*($1 + [24]) = ((int_64)((int_64)*(*($3 + [12])) + (int_64)*(*($3 + [8]))) + (int_64)*($1 + [24]))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [16])))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [20])))
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3 + [12])))
	CALL eosio_assert([1], [432])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $22(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $62([72])) + [56]) = $1
	*($4 + [16]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($9 + [88]) = (($9 + [16]) + [56])
	*($9 + [84]) = ($9 + [16])
	*($9 + [80]) = ($9 + [16])
	CALL $22(($9 + [80]), $4)
	$5 = *($4)
	*($4 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)7035937633859534848, $2, $5, ($9 + [16]), [56])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [80]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [60])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [80]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $29(($1 + [24]), ($9 + [80]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $63($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$4 = *($1 + [24])
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	*($5 + [72]) = $4
	$4 = *($1)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*(*($3) + [4]) + [24]))
	$4 = *($1)
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3 + [4])))
	CALL eosio_assert([1], [432])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $22(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [32]) = (int_64))(*($1 + [32]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $22(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $62([64])) + [48]) = $1
	CALL $54(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $25(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $63($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($5 + [72]) = *($1 + [24])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $62([64])) + [48]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($9 + [64]) = ($9 + [48])
	*($9 + [60]) = $9
	*($9 + [56]) = $9
	CALL $23(($9 + [56]), $4)
	$5 = *($4)
	*($4 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $5, $9, [48])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$7 = *($4)
	*($9 + [72]) = *(($4 + [24]))
	*($4 + [56]) = CALL db_idx64_store($5, (int_64)-3020371635640205312, $2, $7, ($9 + [72]))
	*($9 + [56]) = $4
	$2 = *($4)
	*($9) = $2
	$6 = *($4 + [52])
	*($9 + [72]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($9 + [56]) = [0]
	*($3) = $4
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $25(($1 + [24]), ($9 + [56]), $9, ($9 + [72]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [56])
	*($9 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $63($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($5 + [72]) = *($1 + [24])
	*($1 + [32]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($1 + [32])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.2)))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9894]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9896])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9894]) = [1]
	$7 = ($7 << [16])
	*([0] + [9896]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9896])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9896]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9894]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9894]) = [1]
	$3 = ($3 << [16])
	*([0] + [9896]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9896])
	
.LABEL $label$8
	*([0] + [9896]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $71 ()
{
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [624])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [688])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $32(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $33(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $63(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$6 = [0]
	$3 = *($2)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [720])
	CALL eosio_assert(((int_64)$3 > (int_64)9999), [752])
	CALL eosio_assert(((int_64)$3 < (int_64)1410065409), [784])
	$4 = *(($0 + [128]))
	$10 = *(($0 + [132]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$6 }
	$9 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$6 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = ($0 + [104])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$9 }
	$6 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$5), [816])
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$9 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $17($5, $9)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$5), [816])
	
.LABEL $label$8
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [880])
	$8 = *($2)
	CALL eosio_assert(((uint_64)*($6 + [24]) >= (uint_64)$8), [896])
	$10 = ($0 + [64])
	$9 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [64]), *(($0 + [72])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $14($10, $7)
	$8 = *($2)
	
.LABEL $label$10
	$1 = *($9 + [16])
	$3 = ((uint_64)((int_64)((int_64)$1 + (int_64)*($0 + [32])) * (int_64)$8) / (uint_64)(int_64))(((int_64)*($0 + [40]) + (int_64)$8) - *($9 + [8]))
	*($11 + [8]) = $3)
	CALL eosio_assert(((uint_64)$1 >= (uint_64)$3), [928])
	CALL eosio_assert(((uint_64)*($9 + [8]) >= (uint_64)$8), [976])
	*($11) = $2
	*($11 + [4]) = ($11 + [8])
	CALL eosio_assert($4, [240])
	CALL $30($5, $6, (int_64)0, $11)
	*($11) = $2
	*($11 + [4]) = ($11 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [240])
	CALL $31($10, $9, (int_64)0, $11)
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = (int_64)100
	*($0) = $1
	*($0 + [16]) = (int_64)604800
	*($0 + [24]) = (int_64)1534594088
	*($0 + [32]) = (int_64)100000000
	*($0 + [40]) = (int_64)10000000000
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	$4 = ($0 + [48])
	$2 = CALL strlen([1392])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $62($3)
	*(($0 + [48])) = ($3 | [1])
	*(($0 + [56])) = $4
	*(($0 + [52])) = $2
	
.LABEL $label$3
	CALL memcpy($4, [1392], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	*(($0 + [80])) = (int_64)-1
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	$1 = *($0)
	*($0 + [64]) = $1
	*(($0 + [72])) = $1
	*($0 + [104]) = $1
	*(($0 + [112])) = $1
	*(($0 + [120])) = (int_64)-1
	*(($0 + [128])) = [0]
	*(($0 + [132])) = [0]
	*(($0 + [136])) = [0]
	*(($0 + [140])) = [0]
	*($0 + [144]) = $1
	*(($0 + [152])) = $1
	*(($0 + [160])) = (int_64)-1
	*(($0 + [168])) = [0]
	*(($0 + [172])) = [0]
	*(($0 + [176])) = [0]
	return $0
	
.LABEL $label$1
	CALL $64($4)
	return (unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_64 $15
	float_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [192])
	*([0] + [4]) = $21
	*($21 + [168]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($0 + [24])), [1040])
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = *($3 + [8])
	$18 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$1 }
	$18 = *($0)
	if ( ((int_64)$18 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$18 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$20 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$19 }
	$11 = *(($0 + [128]))
	$20 = *(($0 + [132]))
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$21 }
	$3 = ($20 + [-24])
	$17 = ([0] - $11)
	
.LOOP $label$22:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$21 }
	$20 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $17) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$17 = ($0 + [104])
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$18 }
	$4 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$17), [816])
	goto $label$17 
	
.LABEL $label$20
	$11 = *(($0 + [128]))
	$20 = *(($0 + [132]))
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$23 }
	$3 = ($20 + [-24])
	$17 = ([0] - $11)
	
.LOOP $label$24:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$23 }
	$20 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $17) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$17 = ($0 + [104])
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$16 }
	$4 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$17), [816])
	goto $label$10 
	
.LABEL $label$19
	if ( ((int_64)$5 < (int_64)1000) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$5 > (int_64)9999), [1280])
	CALL eosio_assert(((int_64)$5 < (int_64)1000000001), [1328])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$13 }
	$3 = uint_32($3 >> [1])
	goto $label$12 
	
.LABEL $label$18
	$4 = [0]
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $17($17, $3)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$17), [816])
	
.LABEL $label$17
	$11 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($11, [880])
	CALL eosio_assert(((int_64)*($4 + [32]) > (int_64)999), [1104])
	$15 = *($4 + [32])
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [624])
	$18 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$20 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$20 = [0]
	
.LABEL $label$25
	CALL eosio_assert($20, [688])
	CALL eosio_assert($11, [240])
	$18 = (int_64)0
	CALL $37($17, $4, (int_64)0, ($21 + [80]))
	$7 = *($0)
	$5 = (int_64)59
	$3 = [1136]
	$2 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$35 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$4 = ($4 + [165])
	goto $label$33 
	
.LABEL $label$35
	$1 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$31
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$2 = ((int_64)$1 | (int_64)$2)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$30 }
	$18 = (int_64)0
	$5 = (int_64)59
	$3 = [112]
	$6 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$18 > (uint_64)(int_64)10) ){ goto $label$41 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$4 = ($4 + [165])
	goto $label$39 
	
.LABEL $label$41
	$1 = (int_64)0
	if ( ((int_64)$18 == (int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$37
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$6 = ((int_64)$1 | (int_64)$6)
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_64)$18 != (int_64)13) ){ goto $label$36 }
	$18 = (int_64)0
	$5 = (int_64)59
	$3 = [128]
	$19 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$18 > (uint_64)(int_64)7) ){ goto $label$47 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$4 = ($4 + [165])
	goto $label$45 
	
.LABEL $label$47
	$1 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$43
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$1 | (int_64)$19)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$42 }
	*(($21 + [72])) = [0]
	*($21 + [64]) = (int_64)0
	$3 = CALL strlen([1152])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$50 }
	*($21 + [64]) = ($3 << [1])
	$4 = (($21 + [64]) | [1])
	if ( $3 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$20 = (($3 + [16]) & [-16])
	$4 = CALL $62($20)
	*($21 + [64]) = ($20 | [1])
	*($21 + [72]) = $4
	*($21 + [68]) = $3
	
.LABEL $label$49
	CALL memcpy($4, [1152], $3)
	
.LABEL $label$48
	*(($4 + $3)) = [0]
	*((($21 + [80]) + [24])) = (int_64)1397703940
	*($21 + [80]) = *($0)
	*($21 + [88]) = *($21 + [168])
	$3 = ($21 + [72])
	*(($21 + [120])) = *($3)
	*($21 + [96]) = $15
	*($21 + [112]) = *($21 + [64])
	*($21 + [64]) = [0]
	*($21 + [68]) = [0]
	*($3) = [0]
	*($21 + [128]) = $6
	*($21 + [136]) = $19
	*(($3 = CALL $62([16]))) = $7
	*($3 + [8]) = $2
	*((($21 + [128]) + [32])) = [0]
	$0 = ($3 + [16])
	*((($21 + [128]) + [24])) = $0
	*(($21 + [148])) = $0
	*($21 + [144]) = $3
	*($21 + [156]) = [0]
	*((($21 + [128]) + [36])) = [0]
	$3 = *($21 + [112])
	$0 = ( *((($21 + [80]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($0 + [32])
	$18 = (CASTING uint_64)(uint_32 $0)
	$0 = ($21 + [156])
	
.LOOP $label$51:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$51 }
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $36($0, $3)
	$0 = *(($21 + [160]))
	$3 = *(($21 + [156]))
	goto $label$14 
	
.LABEL $label$16
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$11 }
	$4 = CALL $17($17, $3)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$17), [816])
	goto $label$10 
	
.LABEL $label$15
	$0 = [0]
	$3 = [0]
	
.LABEL $label$14
	*($21 + [180]) = $3
	*($21 + [176]) = $3
	*($21 + [184]) = $0
	*($21 + [48]) = ($21 + [176])
	*($21 + [56]) = ($21 + [80])
	CALL $38(($21 + [56]), ($21 + [48]))
	CALL $39(($21 + [176]), ($21 + [128]))
	$3 = *($21 + [176])
	CALL send_inline($3, (*($21 + [180]) - $3))
	$3 = *($21 + [176])
	if ( ($3 == 0) ){ goto $label$52 }
	*($21 + [180]) = $3
	CALL $63($3)
	
.LABEL $label$52
	$3 = *($21 + [156])
	if ( ($3 == 0) ){ goto $label$53 }
	*(($21 + [160])) = $3
	CALL $63($3)
	
.LABEL $label$53
	$3 = *($21 + [144])
	if ( ($3 == 0) ){ goto $label$54 }
	*(($21 + [148])) = $3
	CALL $63($3)
	
.LABEL $label$54
	if ( ((*(($21 + [112])) & [1]) == 0) ){ goto $label$55 }
	CALL $63(*(($21 + [120])))
	
.LABEL $label$55
	if ( ((*($21 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $63(*(($21 + [72])))
	goto $label$1 
	
.LABEL $label$13
	$3 = *($4 + [4])
	
.LABEL $label$12
	CALL eosio_assert(($3 <= [257]), [1360])
	*($21 + [128]) = $5
	$16 = (CASTING float_64)(uint_64 $5)
	$1 = (Rounds 0)(((float_64)$16 * (float_64)(float_64)0.1))
	*($21 + [176]) = $1
	$2 = (Rounds 0)(((float_64)$16 * (float_64)(float_64)0.05))
	*($21 + [64]) = $2
	$6 = (Rounds 0)(((float_64)$16 * (float_64)(float_64)0.15))
	*($21 + [56]) = $6
	$18 = (Rounds 0)(((float_64)$16 * (float_64)(float_64)0.5))
	*($21 + [48]) = $18
	*($21 + [40]) = (int_64))((int_64))((int_64))((int_64))($5 - $1) - $2) - $6) - $18)
	$8 = ($0 + [64])
	$3 = CALL db_lowerbound_i64(*($0 + [64]), *(($0 + [72])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$57 }
	$9 = CALL $14($8, $3)
	goto $label$56 
	
.LABEL $label$57
	CALL $42(($21 + [80]), $8, *($0), ($21 + [32]))
	$9 = *($21 + [84])
	$18 = *($21 + [48])
	
.LABEL $label$56
	$18 = ((int_64)((int_64)*($0 + [32]) + (int_64)$18) + (int_64)*($9 + [16]))
	$1 = *($0 + [40])
	$5 = ((int_64))($1 - *($9 + [8])) * (int_64)$18
	$2 = ((uint_64)$5) / (uint_64)$18
	*($21 + [32]) = $2)
	CALL eosio_assert((((uint_64)$2 <= (uint_64)$1) & ((uint_64)$18 <= (uint_64)$5)), [720])
	*($21 + [84]) = ($21 + [32])
	*($21 + [80]) = ($21 + [48])
	*($21 + [88]) = ($21 + [176])
	*($21 + [92]) = ($21 + [40])
	*($21 + [96]) = ($21 + [56])
	*($21 + [100]) = ($21 + [64])
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [240])
	CALL $43($8, $9, (int_64)0, ($21 + [80]))
	if ( (*($0 + [48]) & [1]) ){ goto $label$59 }
	$3 = (($0 + [48]) + [1])
	goto $label$58 
	
.LABEL $label$59
	$3 = *(($0 + [56]))
	
.LABEL $label$58
	$20 = [-1]
	
.LOOP $label$60:
	$17 = ($3 + $20)
	$11 = ($20 + [1])
	$20 = $11
	if ( *(($17 + [1])) ){ goto $label$60 }
	$6 = (CASTING uint_64)(uint_32 $11)
	$18 = (int_64)0
	$1 = (int_64)59
	$2 = (int_64)0
	
.LOOP $label$61:
	$5 = (int_64)0
	if ( ((uint_64)$18 >= (uint_64)$6) ){ goto $label$62 }
	$20 = *($3)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$20 = ($20 + [165])
	goto $label$63 
	
.LABEL $label$64
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$62
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$66 }
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$65 
	
.LABEL $label$66
	$5 = ((int_64)$5 & (int_64)15)
	
.LABEL $label$65
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$61 }
	*($21 + [24]) = $2
	$13 = *(($0 + [128]))
	$17 = *(($0 + [132]))
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$67 }
	$3 = ($17 + [-24])
	$11 = ([0] - $13)
	
.LOOP $label$68:
	if ( ((int_64)*(*($3)) == (int_64)$2) ){ goto $label$67 }
	$17 = $3
	$20 = ($3 + [-24])
	$3 = $20
	if ( ((int_32)($20 + $11) != (int_32)[-24]) ){ goto $label$68 }
	
.LABEL $label$67
	$12 = ($0 + [104])
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$71 }
	$3 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$12), [816])
	if ( $3 ){ goto $label$69 }
	goto $label$70 
	
.LABEL $label$71
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$70 }
	$3 = CALL $17($12, $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$12), [816])
	goto $label$69 
	
.LABEL $label$70
	$18 = *($0)
	*($21 + [16]) = ($21 + [24])
	CALL $44(($21 + [80]), $12, $18, ($21 + [16]))
	$3 = *($21 + [84])
	
.LABEL $label$69
	*($21 + [80]) = ($21 + [176])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL $45($12, $3, (int_64)0, ($21 + [80]))
	$18 = *($21 + [168])
	$13 = *(($0 + [128]))
	$17 = *(($0 + [132]))
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$72 }
	$3 = ($17 + [-24])
	$11 = ([0] - $13)
	
.LOOP $label$73:
	if ( ((int_64)*(*($3)) == (int_64)$18) ){ goto $label$72 }
	$17 = $3
	$20 = ($3 + [-24])
	$3 = $20
	if ( ((int_32)($20 + $11) != (int_32)[-24]) ){ goto $label$73 }
	
.LABEL $label$72
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$75 }
	$3 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$12), [816])
	*($21 + [20]) = $3
	*($21 + [16]) = $12
	$13 = (($21 + [16]) | [4])
	if ( $3 ){ goto $label$74 }
	goto $label$8 
	
.LABEL $label$75
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $18)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL $17($12, $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$12), [816])
	*($21 + [20]) = $3
	*($21 + [16]) = $12
	$13 = (($21 + [16]) | [4])
	
.LABEL $label$74
	$1 = *($0 + [16])
	$3 = *($13)
	$18 = (int_64)
	if ( (uint_64)($18(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($3 + [40]))) <= $1) ){ goto $label$76 }
	$5 = *($9 + [32])
	if ( (uint_64)($5 <= (int_64)10001) ){ goto $label$76 }
	$18 = (Rounds 0)(CALL floor(((float_64)((float_64)(CASTING float_64)(uint_64 $18) / (float_64)(CASTING float_64)(uint_64 $1)) * (float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *($3 + [24])) / (float_64)(CASTING float_64)(uint_64 *(($9 + [8])))) * (float_64)(CASTING float_64)(uint_64 $5)))))
	*($21 + [8]) = $18
	$16 = ((float_64)(CASTING float_64)(uint_64 *(($9 + [32]))) * (float_64)(float_64)0.1)
	$14 = (CASTING float_64)(uint_64 $18)
	if ( (((float_64)$14 <= (float_64)$16) | (((float_64)$14 != (float_64)$14) | ((float_64)$16 != (float_64)$16))) ){ goto $label$77 }
	*($21 + [8]) = (Rounds 0)($16)
	
.LABEL $label$77
	*($21 + [80]) = ($21 + [8])
	CALL eosio_assert($10, [240])
	CALL $47($8, $9, (int_64)0, ($21 + [80]))
	$3 = *($21 + [20])
	*($21 + [84]) = ($21 + [32])
	*($21 + [80]) = ($21 + [128])
	*($21 + [88]) = ($21 + [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL $48($12, $3, (int_64)0, ($21 + [80]))
	goto $label$7 
	
.LABEL $label$76
	$3 = *($21 + [20])
	*($21 + [84]) = ($21 + [32])
	*($21 + [80]) = ($21 + [128])
	*($21 + [88]) = ($21 + [16])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL $49($12, $3, (int_64)0, ($21 + [80]))
	goto $label$7 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	*($21 + [84]) = $4
	*($21 + [80]) = $17
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [880])
	CALL eosio_assert(((uint_64)*($4 + [24]) > (uint_64)(int_64)9999), [896])
	$20 = ($0 + [64])
	$3 = [0]
	$11 = CALL db_lowerbound_i64(*($0 + [64]), *(($0 + [72])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$78 }
	$3 = CALL $14($20, $11)
	
.LABEL $label$78
	CALL eosio_assert(((uint_64)*($3 + [8]) >= (uint_64)*($4 + [24])), [1216])
	$18 = ((int_64))(*($0 + [40]) - *($3 + [8])) + (int_64)$18
	$1 = *($3 + [16])
	$18 = *($4 + [24])
	$5 = ((int_64)$18 * (int_64)((int_64)$1 + (int_64)*($0 + [32])))
	$2 = ((uint_64)$5 / (uint_64)$18)
	*($21 + [128]) = $2)
	CALL eosio_assert((((uint_64)$1 >= (uint_64)$2) & ((uint_64)$18 <= (uint_64)$5)), [1248])
	*($21 + [180]) = ($21 + [128])
	*($21 + [176]) = ($21 + [80])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL $40($20, $3, (int_64)0, ($21 + [176]))
	$3 = *($21 + [84])
	*($21 + [176]) = ($21 + [128])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL $41($17, $3, (int_64)0, ($21 + [176]))
	goto $label$1 
	
.LABEL $label$9
	*($21 + [20]) = [0]
	*($21 + [16]) = $12
	$13 = (($21 + [16]) | [4])
	
.LABEL $label$8
	if ( (*($4) & [1]) ){ goto $label$80 }
	$3 = ($4 + [1])
	goto $label$79 
	
.LABEL $label$80
	$3 = *($4 + [8])
	
.LABEL $label$79
	$20 = [-1]
	
.LOOP $label$81:
	$17 = ($3 + $20)
	$11 = ($20 + [1])
	$20 = $11
	if ( *(($17 + [1])) ){ goto $label$81 }
	$6 = (CASTING uint_64)(uint_32 $11)
	$18 = (int_64)0
	$1 = (int_64)59
	$2 = (int_64)0
	
.LOOP $label$82:
	$5 = (int_64)0
	if ( ((uint_64)$18 >= (uint_64)$6) ){ goto $label$83 }
	$20 = *($3)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$20 = ($20 + [165])
	goto $label$84 
	
.LABEL $label$85
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$87 }
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$86 
	
.LABEL $label$87
	$5 = ((int_64)$5 & (int_64)15)
	
.LABEL $label$86
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$82 }
	*($21 + [8]) = $2
	$9 = *(($0 + [128]))
	$17 = *(($0 + [132]))
	if ( ((int_32)$17 == (int_32)$9) ){ goto $label$88 }
	$3 = ($17 + [-24])
	$11 = ([0] - $9)
	
.LOOP $label$89:
	if ( ((int_64)*(*($3)) == (int_64)$2) ){ goto $label$88 }
	$17 = $3
	$20 = ($3 + [-24])
	$3 = $20
	if ( ((int_32)($20 + $11) != (int_32)[-24]) ){ goto $label$89 }
	
.LABEL $label$88
	if ( ((int_32)$17 == (int_32)$9) ){ goto $label$91 }
	$17 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [48]) == (int_32)$12), [816])
	goto $label$90 
	
.LABEL $label$91
	$17 = [0]
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$90 }
	$17 = CALL $17($12, $3)
	CALL eosio_assert(((int_32)*($17 + [48]) == (int_32)$12), [816])
	
.LABEL $label$90
	$3 = *($4)
	$20 = ($3 & [1])
	if ( $20 ){ goto $label$96 }
	if ( uint_32($3 >> [1]) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	if ( (*($4 + [4]) == 0) ){ goto $label$94 }
	
.LABEL $label$95
	if ( $20 ){ goto $label$98 }
	$3 = uint_32($3 >> [1])
	goto $label$97 
	
.LABEL $label$98
	$3 = *($4 + [4])
	
.LABEL $label$97
	if ( ((uint_32)$3 > (uint_32)[12]) ){ goto $label$94 }
	if ( ($17 == 0) ){ goto $label$94 }
	$18 = *($21 + [8])
	if ( ((int_64)$18 == (int_64)*($0)) ){ goto $label$94 }
	$1 = *($21 + [168])
	if ( ((int_64)$1 == (int_64)$18) ){ goto $label$94 }
	if ( ((int_64)$1 != (int_64)*($21 + [24])) ){ goto $label$92 }
	goto $label$93 
	
.LABEL $label$94
	$18 = *($21 + [24])
	*($21 + [8]) = $18
	if ( ((int_64)$18 != (int_64)*($21 + [168])) ){ goto $label$92 }
	
.LABEL $label$93
	*($21 + [8]) = (int_64)0
	
.LABEL $label$92
	$18 = *($0)
	*($21 + [84]) = ($21 + [8])
	*($21 + [80]) = ($21 + [168])
	*($21 + [88]) = ($21 + [128])
	*($21 + [92]) = ($21 + [32])
	CALL $46($21, $12, $18, ($21 + [80]))
	*($21 + [16]) = *($21)
	
.LABEL $label$7
	*($21 + [80]) = *($21 + [64])
	$18 = *(*($13) + [8])
	if ( (int_64)($18 == 0) ){ goto $label$102 }
	$11 = *(($0 + [128]))
	$20 = *(($0 + [132]))
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$103 }
	$3 = ($20 + [-24])
	$17 = ([0] - $11)
	
.LOOP $label$104:
	if ( ((int_64)*(*($3)) == (int_64)$18) ){ goto $label$103 }
	$20 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $17) != (int_32)[-24]) ){ goto $label$104 }
	
.LABEL $label$103
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$101 }
	$11 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$12), [816])
	if ( $11 ){ goto $label$100 }
	$9 = [0]
	$11 = [0]
	goto $label$5 
	
.LABEL $label$102
	$3 = *($21 + [20])
	*($21 + [8]) = ($21 + [64])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL $53($12, $3, (int_64)0, ($21 + [8]))
	goto $label$1 
	
.LABEL $label$101
	$9 = [0]
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $18)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$99 }
	$11 = CALL $17($12, $3)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$12), [816])
	
.LABEL $label$100
	*($21 + [8]) = ($21 + [64])
	$9 = [1]
	CALL eosio_assert([1], [240])
	CALL $50($12, $11, (int_64)0, ($21 + [8]))
	*($21 + [80]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($21 + [80])) + (float_64)((float_64)(CASTING float_64)(uint_64 *($21 + [64])) * (float_64)(float_64)-0.8)))
	goto $label$5 
	
.LABEL $label$99
	$11 = [0]
	goto $label$5 
	
.LABEL $label$6
	CALL $64(($21 + [64]))
	
.LABEL $label$5
	$18 = *($11 + [8])
	if ( (int_64)($18 == 0) ){ goto $label$107 }
	$8 = *(($0 + [128]))
	$20 = *(($0 + [132]))
	if ( ((int_32)$20 == (int_32)$8) ){ goto $label$108 }
	$3 = ($20 + [-24])
	$17 = ([0] - $8)
	
.LOOP $label$109:
	if ( ((int_64)*(*($3)) == (int_64)$18) ){ goto $label$108 }
	$20 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $17) != (int_32)[-24]) ){ goto $label$109 }
	
.LABEL $label$108
	if ( ((int_32)$20 == (int_32)$8) ){ goto $label$111 }
	$3 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$12), [816])
	if ( $3 ){ goto $label$110 }
	goto $label$107 
	
.LABEL $label$111
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $18)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$107 }
	$3 = CALL $17($12, $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$12), [816])
	
.LABEL $label$110
	*($21 + [8]) = ($21 + [64])
	CALL eosio_assert([1], [240])
	CALL $51($12, $3, (int_64)0, ($21 + [8]))
	$14 = ((float_64)(CASTING float_64)(uint_64 *($21 + [64])) * (float_64)(float_64)0.2)
	$16 = (CASTING float_64)(uint_64 *($21 + [80]))
	if ( ((((float_64)$16 < (float_64)$14) | (((float_64)$16 != (float_64)$16) | ((float_64)$14 != (float_64)$14))) == 0) ){ goto $label$106 }
	
.LABEL $label$107
	if ( (int_64)(*($21 + [80]) == 0) ){ goto $label$1 }
	goto $label$105 
	
.LABEL $label$106
	$18 = (Rounds 0)((float_64))($16 - $14)
	*($21 + [80]) = $18)
	if ( (int_64)($18 == 0) ){ goto $label$1 }
	
.LABEL $label$105
	if ( ((int_32)$9 ^ (int_32)[1]) ){ goto $label$1 }
	*($21 + [8]) = ($21 + [80])
	CALL eosio_assert($9, [240])
	CALL $52($12, $11, (int_64)0, ($21 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($21 + [192])
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [56]), $0)
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)8759794652103573504) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$47 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [1]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $8($4, ($9 + [8]))
	goto $label$47 
	
.LABEL $label$49
	*($9 + [44]) = [0]
	*($9 + [40]) = [2]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $10($4, ($9 + [16]))
	goto $label$47 
	
.LABEL $label$48
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $12($4, ($9 + [24]))
	
.LABEL $label$47
	CALL $13($4)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [240])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $62([72])) + [56]) = $0
	CALL $28(($8 + [32]), $6)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $63($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $62([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [544])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $63($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $62([32])
	CALL $26($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $63($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $62([64])) + [48]) = $0
	CALL $24(($8 + [32]), $6)
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $63($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [624])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [688])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [544])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [544])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [544])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$1 = ($0 + [64])
	$11 = [0]
	$13 = CALL db_lowerbound_i64(*($0 + [64]), *(($0 + [72])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $14($1, $13)
	
.LABEL $label$1
	$2 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($2, [176])
	$3 = ($0 + [144])
	$13 = CALL db_lowerbound_i64(*($0 + [144]), *(($0 + [152])), (int_64)4406680061088890880, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $15($3, $13)
	goto $label$2 
	
.LABEL $label$3
	CALL $16(($14 + [24]), $3, *($0), ($14 + [16]))
	$12 = *($14 + [28])
	
.LABEL $label$2
	CALL eosio_assert(((uint_64)*($11 + [48]) > (uint_64)(int_64)10000), [208])
	$4 = ($0 + [104])
	$13 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$13 = CALL $17($4, $7)
	
.LABEL $label$4
	*($14 + [20]) = $13
	*($14 + [16]) = $4
	$5 = *($12 + [8])
	if ( (int_64)($5 == 0) ){ goto $label$5 }
	$13 = [0]
	$7 = CALL db_lowerbound_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020371635640205312, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$13 = CALL $17($4, $7)
	
.LABEL $label$6
	*($14 + [20]) = $13
	*($14 + [16]) = $4
	
.LABEL $label$5
	if ( ($13 == 0) ){ goto $label$7 }
	$8 = ($12 + [8])
	$10 = ($11 + [48])
	$5 = (int_64)0
	
.LOOP $label$9:
	if ( ((int_64)*($13) == (int_64)*($8)) ){ goto $label$10 }
	$6 = *($13 + [24])
	if ( (uint_64)($6 <= (int_64)10000) ){ goto $label$10 }
	$9 = *(($11 + [8]))
	*($14 + [24]) = (CASTING float_64)(uint_64 *($10))
	*($14 + [8]) = ((float_64)(CASTING float_64)(uint_64 $6) / (float_64)(CASTING float_64)(uint_64 $9))
	$13 = *($14 + [20])
	*($14 + [4]) = ($14 + [24])
	*($14) = ($14 + [8])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [240])
	CALL $18($4, $13, (int_64)0, $14)
	if ( ((uint_64)$5 > (uint_64)*(($0 + [8]))) ){ goto $label$8 }
	$5 = ((int_64)$5 + (int_64)1)
	
.LABEL $label$10
	CALL eosio_assert([1], [288])
	$13 = [0]
	$7 = CALL db_next_i64(*(*($14 + [20]) + [52]), ($14 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$13 = CALL $17(*($14 + [16]), $7)
	
.LABEL $label$11
	*($14 + [20]) = $13
	if ( $13 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	*($14) = ($14 + [16])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [240])
	CALL $19($3, $12, (int_64)0, $14)
	$13 = *($14 + [20])
	
.LABEL $label$7
	if ( $13 ){ goto $label$12 }
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [240])
	CALL $20($3, $12, (int_64)0, ($14 + [24]))
	CALL eosio_assert($2, [240])
	CALL $21($1, $11, (int_64)0, ($14 + [24]))
	
.LABEL $label$12
	*([0] + [4]) = ($14 + [32])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [168]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [172])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $63($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [168]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $63($4)
	
.LABEL $label$1
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $63($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [128]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $63($4)
	
.LABEL $label$6
	$1 = *(($0 + [88]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [92])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $63($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [88]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $63($4)
	
.LABEL $label$11
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL $63(*(($0 + [56])))
	
.LABEL $label$16
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $62($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $63($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [32]) = (int_64)0
	*($6 + [72]) = *($1 + [24])
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($6 + [64]) = ($6 + [48])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	CALL $23(($6 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $6, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($6 + [72]), ($6 + [88]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [56])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [80]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $35($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $65($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $62($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $65($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $63($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $64($7)
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1024])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $36($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [544])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $34(*($1), ($0 + [32]))
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $67(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $67(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $63(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $63(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$4 = *($1 + [24])
	*($1 + [24]) = (int_64))($4 - *(*($3)))
	*($5 + [72]) = $4
	$4 = *($1)
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [4])))
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3 + [4])))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $22(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $59([1408], $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $60($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9808])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9792])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9600]
	$1 = (((int_32)$2 * (int_32)[12]) + [9600])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $63 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $64 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($5 + [72]) = *($1 + [24])
	*($1 + [32]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($1 + [32])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.8)))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [496])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [496])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [496])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [496])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $57(*($1), ($0 + [32]))
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($5 + [72]) = *($1 + [24])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	*($5 + [72]) = *($1 + [24])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [432])
	*($5 + [64]) = ($5 + [48])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $23(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [24]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($4 + [8]))
	$3 = *(*($4 + [12]))
	*($1 + [32]) = (int_64)0
	*($1 + [24]) = $3
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [64]) = ($7 + [48])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	CALL $23(($7 + [56]), $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $3, $7, [48])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($7 + [72]) = *(($1 + [24]))
	*($1 + [56]) = CALL db_idx64_store($3, (int_64)-3020371635640205312, $5, $6, ($7 + [72]))
	*([0] + [4]) = ($7 + [80])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [496])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [496])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [496])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [496])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [496])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [496])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [496])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}