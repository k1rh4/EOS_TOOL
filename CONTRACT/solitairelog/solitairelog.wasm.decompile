(data (i32.const 8192) "user not found\00")
(data (i32.const 8207) "user not erased\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8309) "attempt to add asset with different symbol\00")
(data (i32.const 8352) "addition underflow\00")
(data (i32.const 8371) "addition overflow\00")
(data (i32.const 8389) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8440) "error reading iterator\00")
(data (i32.const 8463) "read\00")
(data (i32.const 8468) "cannot pass end iterator to modify\00")
(data (i32.const 8503) "object passed to modify is not in multi_index\00")
(data (i32.const 8549) "cannot modify objects in table of another contract\00")
(data (i32.const 8600) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8659) "write\00")
(data (i32.const 8665) "cannot create objects in table of another contract\00")
(data (i32.const 8716) "cannot pass end iterator to erase\00")
(data (i32.const 8750) "cannot increment end iterator\00")
(data (i32.const 8780) "object passed to erase is not in multi_index\00")
(data (i32.const 8825) "cannot erase objects in table of another contract\00")
(data (i32.const 8875) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8928) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 8972) "singleton does not exist\00")
(data (i32.const 8997) "invalid symbol name\00")
(data (i32.const 9017) "game_record_flag_error\00")
(data (i32.const 9040) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$6 (param i64)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$13 (param i32)))
(import "env" "__ashlti3" (func $fimport$14 (param i32 i64 i64 i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$17 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$28 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$29 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$32 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$34 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$35 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$36 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $26))
(export "_Znwj" (func $52))
(export "_ZdlPv" (func $54))
(export "_Znaj" (func $53))
(export "_ZdaPv" (func $55))
(export "_ZnwjSt11align_val_t" (func $56))
(export "_ZnajSt11align_val_t" (func $57))
(export "_ZdlPvSt11align_val_t" (func $58))
(export "_ZdaPvSt11align_val_t" (func $59))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $1 $13 $8 $20 $22 $15 $6)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17460))
(global $global$2 i32 (i32.const 17460))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $43(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8659])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8659])
	$1 = *(($0 + [4]))
	
.LABEL $label$10
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $64())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $67($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $65 (int_32 $0)
{
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8659])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$4 = ($1 + [8])
	CALL memcpy($3, $1, [8])
	$5 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $5
	if ( ((int_32)(*(($0 + [8])) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8659])
	$5 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	*($2 + [8]) = *(($1 + [16]))
	if ( ((int_32)(*(($0 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8659])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $68($1)
	
.LABEL $label$2
	*(CALL $64()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $68(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $71($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [200])) = (int_64)0
	*(($4 + [216])) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	$8 = ($2 + $7)
	*($4 + [176]) = $8
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$8 = *(($4 + [176]))
	$3 = *($4 + [172])
	
.LABEL $label$4
	CALL memcpy(($4 + [184]), $3, [8])
	$3 = ($3 + [8])
	*($4 + [172]) = $3
	$9 = (($4 + [184]) + [8])
	if ( ((uint_32)($8 - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8463])
	$8 = *((($4 + [168]) + [8]))
	$3 = *($4 + [172])
	
.LABEL $label$5
	CALL memcpy($9, $3, [8])
	$3 = ($3 + [8])
	*($4 + [172]) = $3
	*($4 + [16]) = (int_64)0
	if ( ((uint_32)($8 - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8463])
	$3 = *($4 + [172])
	
.LABEL $label$6
	CALL memcpy(($4 + [16]), $3, [8])
	*(($4 + [200])) = *($4 + [16])
	*($4 + [172]) = ($3 + [8])
	$8 = (($4 + [184]) + [24])
	CALL $33(($4 + [168]), $8)
	*(($3 = ($4 + [8]))) = *((($4 + [168]) + [8]))
	*($4) = *($4 + [168])
	$10 = *($3)
	*((($4 + [224]) + [8])) = $10
	*(($3 = (($4 + [240]) + [8]))) = $10
	$11 = *($4)
	*($4 + [240]) = $11
	*($4 + [224]) = $11
	$12 = *($3)
	*(($10 = (($4 + [256]) + [8]))) = $12
	*((($4 + [16]) + [24])) = $12
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [240])
	*($4 + [32]) = $1
	*($4 + [256]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($3) = *(($9 + [8]))
	*($4 + [240]) = *($9)
	$0 = *($4 + [184])
	$9 = CALL $61(($4 + [224]), $8)
	*($10) = *($3)
	*($4 + [256]) = *($4 + [240])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $0), (int_64 ($4 + [256])), (int_32 $9), (int_32 $6))
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$8
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $71($2)
	
.LABEL $label$9
	CALL $34(($4 + [16]))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [216])))
	
.LABEL $label$10
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $7)
	CALL $33(($4 + [176]), ($4 + [192]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [184])
	*($4 + [8]) = *($4 + [176])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($8 = (($4 + [224]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [224]) = $9
	*($4 + [208]) = $9
	$3 = *($8)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = CALL $61(($4 + [240]), ($4 + [192]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $71($2)
	
.LABEL $label$6
	CALL $34(($4 + [24]))
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [200])))
	
.LABEL $label$7
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8780])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8825])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8875])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*(($1 + [124])))
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [120]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8389])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-5915276602496778240, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $16($4, $7)
	if ( ((int_32)*($8 + [120]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8192])
	if ( $8 ){ goto $label$5 }
	CALL eosio_assert([0], [8716])
	CALL eosio_assert([0], [8750])
	
.LABEL $label$5
	$6 = CALL db_next_i64(*($8 + [124]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $16($4, $6)
	
.LABEL $label$6
	CALL $21($4, $8)
	CALL eosio_assert($7, [8207])
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [56]) = $2
	*($6 + [64]) = $1
	*($6 + [48]) = $3
	$7 = ($0 + [112])
	$9 = *(($0 + [140]))
	$8 = *(($0 + [136]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$6:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$5 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)*($11 + [120]) == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$7
	*($6 + [44]) = $11
	*($6 + [40]) = $7
	if ( $11 ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$4
	$10 = CALL db_find_i64(*($7), *(($0 + [120])), (int_64)-5915276602496778240, $1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$8 }
	$11 = CALL $16($7, $10)
	if ( ((int_32)*($11 + [120]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	goto $label$2 
	
.LABEL $label$8
	*($6 + [44]) = [0]
	*($6 + [40]) = $7
	
.LABEL $label$3
	$1 = *($0)
	*($6 + [32]) = ($6 + [64])
	*($6 + [88]) = $1
	if ( ((int_64)*(($0 + [112])) == (int_64)CALL current_receiver()) ){ goto $label$9 }
	CALL eosio_assert([0], [8665])
	
.LABEL $label$9
	*($6 + [8]) = $7
	*($6 + [12]) = ($6 + [32])
	*($6 + [16]) = ($6 + [88])
	*(($11 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($11) = (int_64)0
	*($11 + [80]) = (int_64)0
	*($11 + [88]) = (int_64)0
	*($11 + [96]) = (int_64)0
	*($11 + [104]) = (int_64)0
	*($11 + [120]) = $7
	*(($11 + [40])) = (int_64)0
	*(($11 + [32])) = (int_64)0
	*(($11 + [24])) = (int_64)0
	CALL $24(($6 + [8]), $11)
	*($6 + [80]) = $11
	$1 = *($11)
	*($6 + [8]) = $1
	$9 = *($11 + [124])
	*($6 + [76]) = $9
	$8 = ($0 + [140])
	$10 = *($8)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [144]))) ){ goto $label$11 }
	*($10 + [8]) = $1
	*($10 + [16]) = $9
	*($6 + [80]) = [0]
	*($10) = $11
	*($8) = ($10 + [24])
	$10 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( $10 ){ goto $label$10 }
	goto $label$2 
	
.LABEL $label$11
	CALL $19(($0 + [136]), ($6 + [80]), ($6 + [8]), ($6 + [76]))
	$10 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( ($10 == 0) ){ goto $label$2 }
	
.LABEL $label$10
	CALL _ZdlPv($10)
	
.LABEL $label$2
	*($6 + [44]) = $11
	*($6 + [40]) = $7
	
.LABEL $label$1
	$1 = *($0)
	*($6 + [20]) = $4
	*($6 + [24]) = $5
	*($6 + [12]) = ($6 + [48])
	*($6 + [8]) = ($6 + [56])
	*($6 + [16]) = ($6 + [40])
	if ( $11 ){ goto $label$12 }
	CALL eosio_assert([0], [8468])
	
.LABEL $label$12
	CALL $25($7, $11, $1, ($6 + [8]))
	$global$0 = ($6 + [96])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$8 = ($global$0 - [32])
	$global$0 = $8
	CALL require_auth((int_64)-4241567753542980784)
	CALL require_recipient(*($5))
	CALL require_recipient(*($6))
	$9 = ($0 + [72])
	$10 = *(($0 + [100]))
	if ( ((int_32)$10 == (int_32)*(($0 + [96]))) ){ goto $label$3 }
	$10 = *(($10 + [-24]))
	if ( ((int_32)*($10 + [24]) == (int_32)$9) ){ goto $label$4 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$4
	if ( $10 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$10 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)-4157495357179166720, (int_64)-4157495357179166720)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $10($9, $10)
	if ( ((int_32)*($10 + [24]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$2
	$11 = ($5 + [8])
	$12 = *($10)
	$13 = *(($10 + [16]))
	$14 = *($10 + [8])
	if ( ((int_64)*(($5 + [16])) != (int_64)1397703940) ){ goto $label$5 }
	if ( ((int_64)$13 == (int_64)1397703940) ){ goto $label$6 }
	CALL eosio_assert([0], [8309])
	
.LABEL $label$6
	$14 = ((int_64)*($11) + (int_64)$14)
	if ( ((int_64)$14 <= (int_64)-4611686018427387904) ){ goto $label$7 }
	if ( ((int_64)$14 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [8371])
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [8352])
	
.LABEL $label$5
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ($6 + [8])
	if ( ((int_64)*(($6 + [16])) != (int_64)1397703940) ){ goto $label$8 }
	if ( ((int_64)$13 == (int_64)1397703940) ){ goto $label$9 }
	CALL eosio_assert([0], [8309])
	
.LABEL $label$9
	$14 = ((int_64)*($10) + (int_64)$14)
	if ( ((int_64)$14 <= (int_64)-4611686018427387904) ){ goto $label$10 }
	if ( ((int_64)$14 < (int_64)4611686018427387904) ){ goto $label$8 }
	CALL eosio_assert([0], [8371])
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([0], [8352])
	
.LABEL $label$8
	*(($8 + [24])) = $13
	*($8 + [16]) = $14
	*($8 + [8]) = $12
	CALL $9($9, ($8 + [8]), *($0))
	$9 = ($4 + [48])
	CALL $23($0, *($5), *($5 + [24]), *($6 + [24]), $11, $9)
	CALL $23($0, *($6), *($6 + [24]), *($5 + [24]), $10, $9)
	$global$0 = ($8 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL eosio_assert([0], [8972])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8503])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8549])
	
.LABEL $label$2
	$6 = *(*($3 + [4]))
	$7 = *(*($3))
	*($1 + [48]) = ((int_64)*(*(*($3 + [8]) + [4]) + [48]) + (int_64)1)
	$7 = ( (int_64)2 ? ( (int_64)3 ? (int_64)1 : ((int_64)$7 == (int_64)$6) ) : ((uint_64)$7 > (uint_64)$6) )
	$6 = *($1)
	$8 = *($3 + [12])
	if ( ((int_64)*($8 + [8]) != (int_64)1397703940) ){ goto $label$3 }
	if ( ((int_64)*(($1 + [88])) == (int_64)1397703940) ){ goto $label$4 }
	CALL eosio_assert([0], [8309])
	
.LABEL $label$4
	$9 = ((int_64)*($1 + [80]) + (int_64)*($8))
	*($1 + [80]) = $9
	if ( ((int_64)$9 > (int_64)-4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [8352])
	$9 = *(($1 + [80]))
	
.LABEL $label$5
	if ( ((int_64)$9 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [8371])
	
.LABEL $label$3
	$8 = ((CASTING uint_32)(uint_64 $7) & [3])
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$10 }
	if ( ((int_32)$8 != (int_32)[2]) ){ goto $label$9 }
	$8 = *(*(($3 + [8])) + [4])
	*($1 + [56]) = ((int_64)*($8 + [56]) + (int_64)1)
	$9 = *($8 + [96])
	$11 = *(($8 + [104]))
	$10 = *($3 + [16])
	if ( ((int_64)*($10 + [8]) == (int_64)$11) ){ goto $label$12 }
	CALL eosio_assert([0], [8309])
	
.LABEL $label$12
	$9 = ((int_64)*($10) + (int_64)$9)
	if ( ((int_64)$9 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$9 < (int_64)4611686018427387904) ){ goto $label$7 }
	CALL eosio_assert([0], [8371])
	goto $label$7 
	
.LABEL $label$11
	*($1 + [72]) = ((int_64)*(*(*(($3 + [8])) + [4]) + [72]) + (int_64)1)
	goto $label$6 
	
.LABEL $label$10
	*($1 + [64]) = ((int_64)*(*(*(($3 + [8])) + [4]) + [64]) + (int_64)1)
	goto $label$6 
	
.LABEL $label$9
	CALL eosio_assert([0], [9017])
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [8352])
	
.LABEL $label$7
	*($1 + [96]) = $9
	*(($1 + [104])) = $11
	
.LABEL $label$6
	$8 = ($1 + [48])
	*($1 + [112]) = ((int_64)((int_64)*(*(*(($3 + [8])) + [4]) + [112]) << (int_64)2) | (int_64)$7)
	$10 = ($1 + [112])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$13 }
	CALL eosio_assert([0], [8600])
	
.LABEL $label$13
	$4 = $4
	$3 = ($4 + [-112])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	*($5 + [16]) = $5
	*($5 + [32]) = $8
	*($5 + [56]) = $10
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [16])
	*($5 + [36]) = ($1 + [56])
	*($5 + [40]) = ($1 + [64])
	*($5 + [44]) = ($1 + [72])
	*($5 + [48]) = ($1 + [80])
	*($5 + [52]) = ($1 + [96])
	CALL $18(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [124])), $2, $3, [112])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$global$0 = ($5 + [64])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = *($0)
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8997])
	
.LABEL $label$1
	*($1 + [80]) = (int_64)0
	*(($1 + [88])) = (int_64)1397703940
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$10 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [8997])
	
.LABEL $label$6
	*($1 + [96]) = (int_64)0
	*(($1 + [104])) = (int_64)1397703940
	$8 = $2
	$6 = ($8 + [-112])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = $8
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [16])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [48])
	*($3 + [36]) = ($1 + [56])
	*($3 + [40]) = ($1 + [64])
	*($3 + [44]) = ($1 + [72])
	*($3 + [48]) = ($1 + [80])
	*($3 + [52]) = ($1 + [96])
	*($3 + [56]) = ($1 + [112])
	CALL $18(($3 + [24]), ($3 + [16]))
	$5 = *($1)
	*($1 + [124]) = CALL db_store_i64(*($4 + [8]), (int_64)-5915276602496778240, *(*($0 + [8])), $5, $6, [112])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$11 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($3 + [64])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [200])) = [0]
	*($4 + [184]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	*($4 + [176]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$3 = *($4 + [172])
	
.LABEL $label$4
	CALL memcpy(($4 + [184]), $3, [8])
	*($4 + [172]) = ($3 + [8])
	$8 = (($4 + [184]) + [8])
	CALL $33(($4 + [168]), $8)
	*(($3 = ($4 + [8]))) = *((($4 + [168]) + [8]))
	*($4) = *($4 + [168])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($9 = (($4 + [224]) + [8]))) = $3
	$10 = *($4)
	*($4 + [224]) = $10
	*($4 + [208]) = $10
	$3 = *($9)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [224])
	*($4 + [32]) = $1
	*($4 + [240]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$8 = CALL $61(($4 + [240]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $71($2)
	
.LABEL $label$7
	CALL $34(($4 + [16]))
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [200])))
	
.LABEL $label$8
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4851649836357779457) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-4417085854459461633) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4851649836357779456) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417316219328135168) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3) = *($3 + [104])
	CALL $27($1, $1, $3)
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-5003134533507606016) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4997502822907192128) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4997502814239952896) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [24]) = *($3 + [80])
	CALL $28($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)-4417085854459461632) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417032211232980992) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [3]
	*($3 + [16]) = *($3 + [88])
	CALL $29($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [40]) = *($3 + [64])
	CALL $30($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [48]) = *($3 + [56])
	CALL $31($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [76]) = [0]
	*($3 + [72]) = [6]
	*($3 + [32]) = *($3 + [72])
	CALL $32($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [8]) = *($3 + [96])
	CALL $28($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $65([0])
	$global$0 = ($3 + [112])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [9040])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$8 = *($1)
	$5 = *($1 + [4])
	$7 = int_32(($5 - $8) >> [4])
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	CALL $50($1, ($3 - $7))
	$5 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$6 }
	$5 = ($8 + ($3 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = ($0 + [4])
	$7 = *($3)
	$6 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($6) - $7) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8463])
	$7 = *($3)
	
.LABEL $label$8
	CALL memcpy($8, $7, [8])
	$7 = (*($3) + [8])
	*($3) = $7
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $7) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8463])
	$7 = *($3)
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $7, [8])
	*(($8 + [8])) = *($2 + [8])
	$7 = (*($3) + [8])
	*($3) = $7
	$8 = ($8 + [16])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $33(*($1), *($0 + [12]))
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8463])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $70($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8223])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $68 (int_32 $0)
{
	return CALL $69([9064], $0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [8659])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [8928])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $42(*($0 + [4]), $1, [1])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8463])
	$1 = *(($0 + [4]))
	
.LABEL $label$10
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $33(*($1), *($0 + [4]))
	CALL $49(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [8463])
	$1 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (*($0) + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [48])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [56])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [64])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $33(*($1), ($0 + [72]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $63($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9040])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $45($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8463])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$8 = ($global$0 - [240])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$11 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$11 = *((*($10) + $11))
	
.LABEL $label$1
	$0 = CALL $61(($8 + [224]), $3)
	*($8 + [112]) = *($4)
	$9 = CALL $61((($8 + [112]) + [8]), ($4 + [8]))
	*(($8 + [140])) = [0]
	*($8 + [132 align=4]) = (int_64)0
	$3 = (*(($4 + [24])) - *($4 + [20]))
	if ( ($3 == 0) ){ goto $label$6 }
	$12 = int_32($3 >> [4])
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$5 }
	$3 = CALL _Znwj($3)
	*((($8 + [112]) + [20])) = $3
	*(($13 = (($8 + [112]) + [24]))) = $3
	*(($8 + [140])) = ($3 + ($12 << [4]))
	$14 = *(($4 + [20]))
	$12 = (*(($4 + [24])) - $14)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $14, $12)
	*($13) = (*($13) + $12)
	
.LABEL $label$6
	CALL memcpy((($8 + [112]) + [32]), ($4 + [32]), [80])
	*((($8 + [56]) + [24])) = *(($5 + [24]))
	*((($8 + [56]) + [16])) = *(($5 + [16]))
	*((($8 + [56]) + [8])) = *(($5 + [8]))
	*($8 + [56]) = *($5)
	$4 = CALL $61((($8 + [56]) + [32]), ($5 + [32]))
	*(($8 + [8])) = *(($6 + [8]))
	*(($8 + [16])) = *(($6 + [16]))
	*(($8 + [24])) = *(($6 + [24]))
	*($8 + [104]) = *($5 + [48])
	*($8) = *($6)
	$5 = CALL $61(($8 + [32]), ($6 + [32]))
	*($8 + [48]) = *($6 + [48])
	CALL void $10((int_32 $1), (int_32 $2), (int_32 $0), (int_32 ($8 + [112])), (int_32 ($8 + [56])), (int_32 $8), (int_32 $7), (int_32 $11))
	if ( (*($5) & [1]) ){ goto $label$8 }
	if ( (*($4) & [1]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	CALL _ZdlPv(*(($8 + [40])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($8 + [96])))
	$4 = *($8 + [132])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $63(($8 + [132]))
	
.LABEL $label$4
	$4 = *($8 + [132])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($8 + [136])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	if ( (*($9) & [1]) ){ goto $label$11 }
	if ( (*($0) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($8 + [128])))
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($0 + [8]))
	$global$0 = ($8 + [240])
	return 
	
.LABEL $label$9
	$global$0 = ($8 + [240])
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9056]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9060])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9056]) = [1]
	$2 = ($2 << [16])
	*([0] + [9060]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9060])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9060]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9056]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9056]) = [1]
	$3 = ($3 << [16])
	*([0] + [9060]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9060])
	
.LABEL $label$10
	*([0] + [9060]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $60 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17448])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17256]
	$3 = (((int_32)$1 * (int_32)[12]) + [17256])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth((int_64)-7101989278066649744)
	*(($4 + [24])) = *(($2 + [8]))
	*($4 + [8]) = $1
	*($4 + [16]) = *($2)
	CALL $9(($0 + [72]), ($4 + [8]), *($0))
	$global$0 = ($4 + [32])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [24]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157495357179166720, (int_64)-4157495357179166720)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $10($0, $4)
	if ( ((int_32)*($4 + [24]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$2
	*($3) = $1
	CALL $11($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $12($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth((int_64)-7101989278066649744)
	$3 = ($0 + [32])
	$4 = *(($0 + [60]))
	if ( ((int_32)$4 == (int_32)*(($0 + [56]))) ){ goto $label$3 }
	$0 = *(($4 + [-24]))
	if ( ((int_32)*($0 + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$4
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $3($3, $0)
	if ( ((int_32)*($0 + [8]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$2
	$4 = CALL db_next_i64(*($0 + [12]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $3($3, $4)
	
.LABEL $label$5
	CALL $7($3, $0)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8780])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8825])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [8875])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8503])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8549])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8665])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4982871454518345728
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $38(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$2
	*($3) = $1
	CALL $4($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $5($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8440])
	
.LABEL $label$5
	$2 = CALL $68($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8463])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4982871454518345728
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)4982871454518345728
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $71($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	*($3 + [8]) = $1
	CALL $2(($0 + [32]), ($3 + [8]), *($0))
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8780])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8825])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [8875])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$9 = ($global$0 - [208])
	$global$0 = $9
	*($9 + [16]) = $3
	*($9 + [24]) = $2
	*($9 + [8]) = $4
	*($9) = $5
	CALL require_auth((int_64)-7101989278066649744)
	$10 = ($0 + [112])
	$12 = *(($0 + [140]))
	$11 = *(($0 + [136]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$3 }
	
.LOOP $label$5:
	$13 = ($12 + [-24])
	$14 = *($13)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$4 }
	$12 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($14 + [120]) == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$6
	if ( $14 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$13 = CALL db_find_i64(*($10), *(($0 + [120])), (int_64)-5915276602496778240, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$14 = CALL $16($10, $13)
	if ( ((int_32)*($14 + [120]) == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$2
	$1 = *($0)
	*($9 + [48]) = $6
	*($9 + [52]) = $7
	*($9 + [36]) = ($9 + [16])
	*($9 + [32]) = ($9 + [24])
	*($9 + [40]) = ($9 + [8])
	*($9 + [44]) = $9
	CALL $17($10, $14, $1, ($9 + [32]))
	$global$0 = ($9 + [208])
	return 
	
.LABEL $label$1
	$15 = *($0)
	if ( ((int_64)*(($0 + [112])) == (int_64)CALL current_receiver()) ){ goto $label$7 }
	CALL eosio_assert([0], [8665])
	
.LABEL $label$7
	*(($13 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($13 + [120]) = $10
	*(($13 + [40])) = (int_64)0
	*(($13 + [32])) = (int_64)0
	*(($13 + [24])) = (int_64)0
	*($13 + [48]) = $2
	*($13) = $1
	*($13 + [56]) = $3
	*($13 + [64]) = $4
	*($13 + [72]) = $5
	*($13 + [80]) = *($6)
	*(($13 + [88])) = *(($6 + [8]))
	*($13 + [96]) = *($7)
	*(($13 + [104])) = *(($7 + [8]))
	*($9 + [152]) = (($9 + [32]) + [112])
	*($9 + [148]) = ($9 + [32])
	*($9 + [144]) = ($9 + [32])
	*($9 + [160]) = ($9 + [144])
	*($9 + [172]) = ($13 + [16])
	*($9 + [168]) = $13
	*($9 + [176]) = ($13 + [48])
	*($9 + [180]) = ($13 + [56])
	*($9 + [184]) = ($13 + [64])
	*($9 + [188]) = ($13 + [72])
	*($9 + [192]) = ($13 + [80])
	*($9 + [196]) = ($13 + [96])
	*($9 + [200]) = ($13 + [112])
	CALL $18(($9 + [168]), ($9 + [160]))
	$1 = *($13)
	$14 = CALL db_store_i64(*(($0 + [120])), (int_64)-5915276602496778240, $15, $1, ($9 + [32]), [112])
	*($13 + [124]) = $14
	$12 = ($0 + [128])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$8 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($9 + [168]) = $13
	$1 = *($13)
	*($9 + [32]) = $1
	*($9 + [144]) = $14
	$11 = ($0 + [140])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [144]))) ){ goto $label$11 }
	*($12 + [8]) = $1
	*($12 + [16]) = $14
	*($9 + [168]) = [0]
	*($12) = $13
	*($11) = ($12 + [24])
	$13 = *($9 + [168])
	*($9 + [168]) = [0]
	if ( $13 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $19(($0 + [136]), ($9 + [168]), ($9 + [32]), ($9 + [144]))
	$13 = *($9 + [168])
	*($9 + [168]) = [0]
	if ( ($13 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($13)
	
.LABEL $label$9
	$global$0 = ($9 + [208])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8440])
	
.LABEL $label$5
	$4 = CALL $68($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [120]) = $0
	*(($5 + [40])) = (int_64)0
	*(($5 + [32])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [72])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [112])
	CALL $41(($3 + [40]), ($3 + [32]))
	*($5 + [124]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $19(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $71($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8503])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8549])
	
.LABEL $label$2
	*($1 + [48]) = *(*($3))
	*($1 + [56]) = *(*($3 + [4]))
	*($1 + [64]) = *(*($3 + [8]))
	*($1 + [72]) = *(*($3 + [12]))
	$6 = *($3 + [16])
	*(($1 + [88])) = *(($6 + [8]))
	*($1 + [80]) = *($6)
	$3 = *($3 + [20])
	*($1 + [96]) = *($3)
	*(($1 + [104])) = *(($3 + [8]))
	$7 = *($1)
	$4 = $4
	$3 = ($4 + [-112])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	*($5 + [16]) = $5
	*($5 + [28]) = ($1 + [16])
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [48])
	*($5 + [36]) = ($1 + [56])
	*($5 + [40]) = ($1 + [64])
	*($5 + [44]) = ($1 + [72])
	*($5 + [48]) = ($1 + [80])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [112])
	CALL $18(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [124])), $2, $3, [112])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8440])
	
.LABEL $label$5
	$2 = CALL $68($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8463])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	$4 = ($4 & [-8])
	if ( ((int_32)$4 != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8463])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$9 }
	CALL eosio_assert([0], [8463])
	
.LABEL $label$9
	CALL memcpy(($3 + [24]), $7, [8])
	*(($5 + [16])) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)-4157495357179166720
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$12 }
	*($4 + [8]) = (int_64)-4157495357179166720
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $40(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $71($2)
	
.LABEL $label$10
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8503])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8549])
	
.LABEL $label$2
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-8])
	CALL $39($5, $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4157495357179166720) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-4157495357179166719
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8665])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($4 + [56]) = (($4 + [16]) + [24])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $39(($4 + [48]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157495357179166720, $2, (int_64)-4157495357179166720, ($4 + [16]), [24])
	*($5 + [28]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4157495357179166720) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-4157495357179166719
	
.LABEL $label$2
	*($4 + [48]) = $5
	*($4 + [16]) = (int_64)-4157495357179166720
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-4157495357179166720
	*($3 + [16]) = $6
	*($4 + [48]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $40(($1 + [24]), ($4 + [48]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth((int_64)-7101989278066649744)
	$3 = ($0 + [72])
	$4 = *(($0 + [100]))
	if ( ((int_32)$4 == (int_32)*(($0 + [96]))) ){ goto $label$3 }
	$0 = *(($4 + [-24]))
	if ( ((int_32)*($0 + [24]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$4
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-4157495357179166720, (int_64)-4157495357179166720)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $10($3, $0)
	if ( ((int_32)*($0 + [24]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [8389])
	
.LABEL $label$2
	$4 = CALL db_next_i64(*($0 + [28]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $10($3, $4)
	
.LABEL $label$5
	CALL $14($3, $0)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$4 = *($0)
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [8463])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [32])
	*(($0 = ($0 + [4]))) = (*($0) + [32])
	CALL $33(*($1), ($4 + [64]))
	*($2) = *($1)
	*($2 + [12]) = ($4 + [88])
	*($2 + [8]) = ($4 + [80])
	*($2 + [16]) = ($4 + [100])
	*($2 + [20]) = ($4 + [112])
	*($2 + [24]) = ($4 + [128])
	*($2 + [28]) = ($4 + [144])
	*($2 + [32]) = ($4 + [160])
	*($2 + [36]) = ($4 + [176])
	*($2 + [40]) = ($4 + [184])
	CALL $47(($2 + [8]), $2)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [200])
	*($2 + [8]) = ($4 + [192])
	*($2 + [16]) = ($4 + [216])
	*($2 + [20]) = ($4 + [224])
	*($2 + [24]) = ($4 + [240])
	CALL $48(($2 + [8]), $2)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [256])
	*($2 + [8]) = ($4 + [248])
	*($2 + [16]) = ($4 + [272])
	*($2 + [20]) = ($4 + [280])
	*($2 + [24]) = ($4 + [296])
	CALL $48(($2 + [8]), $2)
	CALL $33(*($1), ($4 + [304]))
	$global$0 = ($2 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [384])
	$global$0 = $2
	*(($3 = (($2 + [352]) + [24]))) = *(($1 + [24]))
	*(($4 = (($2 + [352]) + [16]))) = *(($1 + [16]))
	*(($5 = (($2 + [320]) + [16]))) = *(($1 + [48]))
	*(($6 = (($2 + [320]) + [24]))) = *(($1 + [56]))
	*($2 + [352]) = *($1)
	*($2 + [320]) = *($1 + [32])
	*($2 + [360]) = *(($1 + [8]))
	*($2 + [328]) = *(($1 + [40]))
	$7 = CALL $61(($2 + [304]), ($1 + [64]))
	*($2 + [192]) = *($1 + [80])
	$8 = CALL $61((($2 + [192]) + [8]), ($1 + [88]))
	*(($2 + [220])) = [0]
	*($2 + [212 align=4]) = (int_64)0
	$9 = (*($1 + [104]) - *($1 + [100]))
	if ( ($9 == 0) ){ goto $label$7 }
	$10 = int_32($9 >> [4])
	if ( ((uint_32)$10 >= (uint_32)[268435456]) ){ goto $label$6 }
	$9 = CALL _Znwj($9)
	*(($2 + [212])) = $9
	*(($11 = ($2 + [216]))) = $9
	*(($2 + [220])) = ($9 + ($10 << [4]))
	$12 = *(($1 + [100]))
	$10 = (*(($1 + [104])) - $12)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($9, $12, $10)
	*($11) = (*($11) + $10)
	
.LABEL $label$7
	CALL memcpy((($2 + [192]) + [32]), ($1 + [112]), [80])
	*((($2 + [136]) + [24])) = *(($1 + [216]))
	*((($2 + [136]) + [16])) = *(($1 + [208]))
	*((($2 + [136]) + [8])) = *(($1 + [200]))
	*($2 + [136]) = *($1 + [192])
	$9 = CALL $61((($2 + [136]) + [32]), ($1 + [224]))
	*((($2 + [80]) + [8])) = *(($1 + [256]))
	*((($2 + [80]) + [16])) = *(($1 + [264]))
	*((($2 + [80]) + [24])) = *(($1 + [272]))
	*($2 + [184]) = *($1 + [240])
	*($2 + [80]) = *($1 + [248])
	$11 = CALL $61((($2 + [80]) + [32]), ($1 + [280]))
	*($2 + [128]) = *($1 + [296])
	$1 = CALL $61(($2 + [64]), ($1 + [304]))
	*((($2 + [32]) + [24])) = *($3)
	*((($2 + [32]) + [16])) = *($4)
	*(($2 + [16])) = *($5)
	*(($2 + [24])) = *($6)
	*($2 + [40]) = *($2 + [360])
	*($2 + [32]) = *($2 + [352])
	*($2) = *($2 + [320])
	*($2 + [8]) = *($2 + [328])
	CALL $51($0, ($2 + [32]), $2, $7, ($2 + [192]), ($2 + [136]), ($2 + [80]), $1)
	if ( (*($1) & [1]) ){ goto $label$9 }
	if ( (*($11) & [1]) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [120])))
	if ( ((*($9) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $63(($2 + [212]))
	
.LABEL $label$5
	if ( (*($9) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = *($2 + [212])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [176])))
	$1 = *($2 + [212])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($2 + [216])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	if ( (*($8) & [1]) ){ goto $label$12 }
	if ( (*($7) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [208])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [384])
	return 
	
.LABEL $label$10
	$global$0 = ($2 + [384])
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8463])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8463])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8463])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$5 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	*($2 + [8]) = $4
	CALL $46(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [184]) + [48]))) = (int_64)0
	*(($9 = (($4 + [184]) + [64]))) = (int_64)0
	*((($4 + [184]) + [80])) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	*($4 + [176]) = ($2 + $7)
	*($4 + [336]) = ($4 + [168])
	*($4 + [16]) = ($4 + [184])
	CALL $35(($4 + [16]), ($4 + [336]))
	*(($10 = ($4 + [8]))) = *($4 + [176])
	*($4) = *($4 + [168])
	$11 = *($10)
	*(($3 = (($4 + [304]) + [8]))) = $11
	*(($10 = (($4 + [320]) + [8]))) = $11
	$12 = *($4)
	*($4 + [320]) = $12
	*($4 + [304]) = $12
	$13 = *($10)
	*(($11 = (($4 + [336]) + [8]))) = $13
	*(($4 + [40])) = $13
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [320])
	*($4 + [32]) = $1
	*($4 + [336]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*((($4 + [16]) + [80])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($3) = *($8)
	*(($13 = (($4 + [288]) + [8]))) = *($9)
	*($4 + [304]) = *($4 + [224])
	*($4 + [288]) = *($4 + [240])
	$0 = *($4 + [216])
	$1 = *($4 + [208])
	$12 = *($4 + [200])
	$14 = *($4 + [192])
	$15 = *($4 + [184])
	$8 = CALL $61(($4 + [272]), ($4 + [256]))
	*($11) = *($13)
	*($10) = *($3)
	*($4 + [336]) = *($4 + [288])
	*($4 + [320]) = *($4 + [304])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $15), (int_64 $14), (int_64 $12), (int_64 $1), (int_64 $0), (int_64 ($4 + [320])), (int_32 ($4 + [336])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $71($2)
	
.LABEL $label$6
	CALL $34(($4 + [16]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$7
	$global$0 = ($4 + [352])
	return [1]
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $44($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $62($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $62($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $60($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [200])) = [0]
	*($4 + [184]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	*($4 + [176]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8463])
	$3 = *($4 + [172])
	
.LABEL $label$4
	CALL memcpy(($4 + [184]), $3, [8])
	*($4 + [172]) = ($3 + [8])
	$8 = (($4 + [184]) + [8])
	CALL $33(($4 + [168]), $8)
	*(($3 = ($4 + [8]))) = *((($4 + [168]) + [8]))
	*($4) = *($4 + [168])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($9 = (($4 + [224]) + [8]))) = $3
	$10 = *($4)
	*($4 + [224]) = $10
	*($4 + [208]) = $10
	$3 = *($9)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [224])
	*($4 + [32]) = $1
	*($4 + [240]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$8 = CALL $61(($4 + [240]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $71($2)
	
.LABEL $label$7
	CALL $34(($4 + [16]))
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [200])))
	
.LABEL $label$8
	$global$0 = ($4 + [256])
	return [1]
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [576])
	$global$0 = $3
	*(($4 = $3) + [520]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [192]) + [24])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*((($4 + [192]) + [56])) = (int_64)0
	*((($4 + [192]) + [48])) = (int_64)0
	*((($4 + [192]) + [40])) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = [0]
	CALL memset((($4 + [192]) + [80]), [0], [112])
	*($4 + [280]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [424]) = [0]
	*($4 + [472]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [504]) = [0]
	*($4 + [472]) = (int_64)0
	*($4 + [480]) = [0]
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $5)
	*($4 + [560]) = ($4 + [176])
	*($4 + [24]) = ($4 + [192])
	CALL $36(($4 + [24]), ($4 + [560]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [184])
	*($4 + [8]) = *($4 + [176])
	$3 = *($3)
	*((($4 + [528]) + [8])) = $3
	*(($6 = (($4 + [544]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [544]) = $7
	*($4 + [528]) = $7
	$3 = *($6)
	*((($4 + [560]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [544])
	*($4 + [40]) = $1
	*($4 + [560]) = $1
	*((($4 + [24]) + [40])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*(($4 + [88])) = [0]
	*((($4 + [24]) + [80])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [564]) = ($4 + [520])
	*($4 + [560]) = ($4 + [24])
	CALL $37(($4 + [560]), ($4 + [192]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $71($2)
	
.LABEL $label$4
	CALL $34(($4 + [24]))
	if ( ((*(($4 + [496])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [504])))
	
.LABEL $label$5
	if ( ((*(($4 + [472])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [480])))
	
.LABEL $label$6
	if ( ((*(($4 + [416])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [424])))
	
.LABEL $label$7
	$2 = *(($4 + [292]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($4 + [296])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((*(($4 + [280])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [288])))
	
.LABEL $label$9
	if ( ((*(($4 + [256])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$10
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $71($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $63 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $64 ()
{
	return [9048]
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $63($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $68($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9044])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $68($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $71($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $66(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9044])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $66(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}