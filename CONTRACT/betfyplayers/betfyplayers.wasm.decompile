(data (i32.const 8192) "Record does not exist\00")
(data (i32.const 8214) "unable to find key\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8319) "BETFTY\00")
(data (i32.const 8326) "active\00")
(data (i32.const 8333) "betftymainac\00")
(data (i32.const 8346) "transfer\00")
(data (i32.const 8355) "new bet won\00")
(data (i32.const 8367) "Player already played for this match\00")
(data (i32.const 8404) "betfty\00")
(data (i32.const 8411) "new bet made\00")
(data (i32.const 8424) "string is too long to be a valid symbol_code\00")
(data (i32.const 8469) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8522) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8571) "invalid symbol name\00")
(data (i32.const 8591) "string is too long to be a valid name\00")
(data (i32.const 8629) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8696) "character is not in allowed character set for names\00")
(data (i32.const 8748) "write\00")
(data (i32.const 8754) "true\00")
(data (i32.const 8759) "false\00")
(data (i32.const 8765) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8816) "error reading iterator\00")
(data (i32.const 8839) "read\00")
(data (i32.const 8844) "get\00")
(data (i32.const 8848) "cannot pass end iterator to modify\00")
(data (i32.const 8883) "object passed to modify is not in multi_index\00")
(data (i32.const 8929) "cannot modify objects in table of another contract\00")
(data (i32.const 8980) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9039) "cannot create objects in table of another contract\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "printui" (func $fimport$5 (param i64)))
(import "env" "prints_l" (func $fimport$6 (param i32 i32)))
(import "env" "printsf" (func $fimport$7 (param f32)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$28 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$29 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$32 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$34 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$35 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$36 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $15))
(export "_Znwj" (func $31))
(export "_ZdlPv" (func $33))
(export "_Znaj" (func $32))
(export "_ZdaPv" (func $34))
(export "_ZnwjSt11align_val_t" (func $35))
(export "_ZnajSt11align_val_t" (func $36))
(export "_ZdlPvSt11align_val_t" (func $37))
(export "_ZdaPvSt11align_val_t" (func $38))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $12 $1 $11)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17508))
(global $global$2 i32 (i32.const 17508))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8839])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $53($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8839])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8839])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $24(*($1), *($0 + [8]))
	CALL $24(*($1), *($0 + [12]))
	CALL $24(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8839])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8839])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8839])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8748])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8748])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $27(*($1), *($0 + [8]))
	CALL $27(*($1), *($0 + [12]))
	CALL $27(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8748])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8748])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [8748])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [12])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0)
	$0 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [9])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8839])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8839])
	CALL memcpy(($0 + [8]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8839])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [12]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8839])
	CALL memcpy(($0 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [8])) = *(($1 + [16]))
	*($2) = *($1 + [8])
	$3 = *($1)
	$4 = CALL $40(($2 + [12]), ($1 + [20]))
	$5 = CALL $40(($2 + [24]), ($1 + [32]))
	$6 = CALL $40(($2 + [36]), ($1 + [44]))
	*(($2 + [56])) = *(($1 + [64]))
	*($2 + [48]) = *(($1 + [56]))
	CALL $30($0, $3, $2)
	if ( (*($6) & [1]) ){ goto $label$5 }
	if ( (*($5) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [44])))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($2 + [32])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($2 + [20])))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8748])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8748])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8748])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8748])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8748])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8844])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $6($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8839])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $25($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $43($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $43($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $39($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8748])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8748])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [44])))
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [32])))
	if ( (*($1 + [12]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $50($1)
	
.LABEL $label$2
	*(CALL $45()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $50(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $53($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $45())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $49($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $42($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $46 (int_32 $0)
{
}

int_32 .FUNC $45 ()
{
	return [9096]
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8233])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $6($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8748])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8748])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $23(CALL $22($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [8883])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8929])
	*($1 + [56]) = *(*(($3 + [4])))
	*($1 + [52]) = ((float_32)*(*($3)) + (float_32)*($1 + [52]))
	$5 = *($1)
	CALL eosio_assert([1], [8980])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [12])
	*($3 + [40]) = $7
	$8 = ($1 + [24])
	*($3 + [44]) = $8
	$9 = ($1 + [36])
	*($3 + [48]) = $9
	$10 = ($1 + [48])
	*($3 + [52]) = $10
	$11 = ($1 + [52])
	*($3 + [56]) = $11
	$12 = ($1 + [56])
	*($3 + [60]) = $12
	CALL $28(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $50($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [32]) = $1
	CALL $29(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [64]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $53($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8748])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8748])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8748])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8748])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [8883])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8929])
	*($1 + [56]) = *(*(($3 + [4])))
	*($1 + [52]) = ((float_32)*(*($3)) + (float_32)*($1 + [52]))
	$5 = *($1)
	CALL eosio_assert([1], [8980])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [12])
	*($3 + [40]) = $7
	$8 = ($1 + [24])
	*($3 + [44]) = $8
	$9 = ($1 + [36])
	*($3 + [48]) = $9
	$10 = ($1 + [48])
	*($3 + [52]) = $10
	$11 = ($1 + [52])
	*($3 + [56]) = $11
	$12 = ($1 + [56])
	*($3 + [60]) = $12
	CALL $28(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $50($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [32]) = $1
	CALL $29(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [64]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $53($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8591])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8696])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8629])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8696])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8816])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [52]) = [0]
	*($5 + [56]) = [0]
	*($5 + [60]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [12])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [36])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [52])
	*($3 + [60]) = ($5 + [56])
	CALL $19(($3 + [32]), ($3 + [24]))
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [36]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [24]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [44])))
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [32])))
	if ( (*($1 + [12]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($6 + [60])) == (int_32)$0), [8765])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [60]) == (int_32)$0), [8765])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, float_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [208])
	$global$0 = $5
	*($5 + [171]) = $3
	*($5 + [172]) = $2
	CALL require_auth($1)
	CALL require_auth(*($0))
	*(($5 + [160])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	$6 = *($0 + [8])
	*($5 + [128]) = $6
	*($5 + [136]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)-6030912129794572288, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2(($5 + [128]), $8)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)($5 + [128])), [8765])
	$3 = *($5 + [171])
	
.LABEL $label$1
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [8192])
	CALL $3(($5 + [128]), $4, [8214])
	if ( (($3 & [255]) == 0) ){ goto $label$9 }
	$2 = *($5 + [172])
	$3 = CALL $47([8319])
	$8 = ($3 <= [8])
	$2 = ((float_32)$2 * (float_32)(float_32)100)
	if ( ((float_32)(float_32)|$2| < (float_32)(float_32)9223372036854775808) ){ goto $label$8 }
	$10 = (int_64)-9223372036854775808
	if ( ($8 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	*($5 + [44]) = ($5 + [171])
	*($5 + [40]) = ($5 + [172])
	CALL eosio_assert($9, [8848])
	CALL $4(($5 + [128]), $7, $1, ($5 + [40]))
	goto $label$3 
	
.LABEL $label$8
	$10 = (Rounds 0)($2)
	if ( $8 ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [8424])
	goto $label$5 
	
.LABEL $label$6
	if ( $3 ){ goto $label$5 }
	$11 = (int_64)2
	goto $label$4 
	
.LABEL $label$5
	$6 = (int_64)0
	
.LOOP $label$10:
	$8 = *(($3 + [8318]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8469])
	
.LABEL $label$11
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$11 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)2)
	
.LABEL $label$4
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8522])
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$6 = $4
	$8 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$6 = $4
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $8 ){ goto $label$16 }
	$8 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	
.LABEL $label$12
	CALL eosio_assert($8, [8571])
	$6 = *($0)
	*($5 + [88]) = [8326]
	*($5 + [92]) = CALL $47([8326])
	*($5 + [16]) = *($5 + [88])
	$4 = *(CALL $5(($5 + [40]), ($5 + [16])))
	*($5 + [88]) = [8333]
	*($5 + [92]) = CALL $47([8333])
	*($5 + [8]) = *($5 + [88])
	$13 = *(CALL $5(($5 + [40]), ($5 + [8])))
	*($5 + [88]) = [8346]
	*($5 + [92]) = CALL $47([8346])
	*($5) = *($5 + [88])
	$14 = *(CALL $5(($5 + [40]), $5))
	$15 = *($0)
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	$3 = CALL $47([8355])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [24]) = ($3 << [1])
	$8 = (($5 + [24]) | [1])
	if ( $3 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$12 = (($3 + [16]) & [-16])
	$8 = CALL _Znwj($12)
	*($5 + [24]) = ($12 | [1])
	*($5 + [32]) = $8
	*($5 + [28]) = $3
	
.LABEL $label$18
	CALL memcpy($8, [8355], $3)
	
.LABEL $label$17
	*(($8 + $3)) = [0]
	*((($5 + [40]) + [24])) = $11
	$3 = ($5 + [32])
	*(($5 + [80])) = *($3)
	*($3) = [0]
	*($5 + [48]) = $1
	*($5 + [40]) = $15
	*($5 + [56]) = $10
	*($5 + [88]) = $13
	*($5 + [96]) = $14
	*($5 + [72]) = *($5 + [24])
	*($5 + [24]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = $6
	*($3 + [8]) = $4
	*((($5 + [88]) + [36])) = [0]
	$8 = ($3 + [16])
	*((($5 + [88]) + [24])) = $8
	*(($5 + [108])) = $8
	*($5 + [104]) = $3
	*($5 + [116 align=4]) = (int_64)0
	$3 = *($5 + [72])
	$8 = ( *((($5 + [40]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [116])
	
.LOOP $label$20:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$20 }
	if ( ($3 == 0) ){ goto $label$22 }
	CALL $6($8, $3)
	$8 = *(($5 + [120]))
	$3 = *(($5 + [116]))
	goto $label$21 
	
.LABEL $label$22
	$8 = [0]
	$3 = [0]
	
.LABEL $label$21
	*($5 + [180]) = $3
	*($5 + [176]) = $3
	*($5 + [184]) = $8
	*($5 + [192]) = ($5 + [176])
	*($5 + [200]) = ($5 + [40])
	CALL $7(($5 + [200]), ($5 + [192]))
	if ( ((*(($5 + [72])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [80])))
	
.LABEL $label$23
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$24
	CALL $8(($5 + [40]), ($5 + [88]))
	$3 = *($5 + [40])
	CALL send_inline($3, (*($5 + [44]) - $3))
	$3 = *($5 + [40])
	if ( ($3 == 0) ){ goto $label$25 }
	*($5 + [44]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$25
	*($5 + [44]) = ($5 + [171])
	*($5 + [40]) = ($5 + [172])
	CALL eosio_assert($9, [8848])
	CALL $9(($5 + [128]), $7, $1, ($5 + [40]))
	$3 = *($5 + [116])
	if ( ($3 == 0) ){ goto $label$26 }
	*(($5 + [120])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$3 = *($5 + [104])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($5 + [108])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	CALL $10(($5 + [152]))
	$global$0 = ($5 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $39(($5 + [24]))
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $26(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-3075276115167177360) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)7111861964157457776) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626339551108005888) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3) = *($3 + [40])
	CALL $16($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [28]) = [0]
	*($3 + [24]) = [2]
	*($3 + [16]) = *($3 + [24])
	CALL $17($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [36]) = [0]
	*($3 + [32]) = [3]
	*($3 + [8]) = *($3 + [32])
	CALL $18($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $46([0])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $50($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($6 = ($4 + [48]))) = (int_64)0
	*(($7 = ($4 + [88]))) = (int_64)0
	*(($3 = ($4 + [96]))) = (int_64)0
	*((($4 + [32]) + [24])) = (int_64)0
	*(($8 = ($4 + [64]))) = (int_64)0
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = (int_64)0
	*(($9 = ($4 + [52]))) = [0]
	*(($10 = ($4 + [92]))) = [0]
	*($3) = [0]
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [20]) = $5
	*($4 + [16]) = $5
	*($4 + [24]) = ($5 + $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8839])
	CALL memcpy(($4 + [32]), *($4 + [20]), [8])
	*($4 + [20]) = (*($4 + [20]) + [8])
	*($4 + [176]) = ($4 + [16])
	*($4 + [116]) = $6
	*($4 + [112]) = (($4 + [32]) + [8])
	*($4 + [120]) = $9
	*($4 + [124]) = $8
	$6 = ($4 + [76])
	*($4 + [128]) = $6
	*($4 + [132]) = $7
	*($4 + [136]) = $10
	*($4 + [140]) = $3
	CALL $19(($4 + [112]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [24])
	*($4) = *($4 + [16])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($7 = (($4 + [160]) + [8]))) = $3
	$11 = *($4)
	*($4 + [160]) = $11
	*($4 + [144]) = $11
	$3 = *($7)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [112]) + [24])) = $3
	*($4 + [112]) = $0
	*($4 + [120]) = $1
	$0 = *($4 + [160])
	*($4 + [128]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [104])
	*($4 + [176]) = ($4 + [112])
	CALL $20(($4 + [176]), ($4 + [32]))
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $53($5)
	
.LABEL $label$4
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [84])))
	
.LABEL $label$5
	if ( ((*(($4 + [64])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$6
	if ( ((*(($4 + [52])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [60])))
	
.LABEL $label$7
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	float_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $21(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($8 = (($4 + [112]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [112]) = $9
	*($4 + [96]) = $9
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$8 = *($4 + [84])
	$10 = *($4 + [80])
	$1 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $10), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_64 $0))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $53($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	$6
	return [1]
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [44])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [32])))
	if ( (*($3 + [12]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = [0]
	*((($2 + [72]) + [32])) = [0]
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	$4 = *($0 + [8])
	*($2 + [72]) = $4
	*($2 + [80]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-6030912129794572288, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($2 + [72]), $0) + [60]) == (int_32)($2 + [72])), [8765])
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8192])
	$3 = CALL $3(($2 + [72]), $1, [8214])
	*((($2 + [8]) + [8])) = *(($3 + [8]))
	*($2 + [8]) = *($3)
	$0 = CALL $40((($2 + [8]) + [12]), ($3 + [12]))
	$5 = CALL $40((($2 + [8]) + [24]), ($3 + [24]))
	$6 = CALL $40((($2 + [8]) + [36]), ($3 + [36]))
	*($2 + [64]) = *(($3 + [56]))
	*($2 + [56]) = *($3 + [48])
	CALL printui(*($2 + [8]))
	$3 = *($0)
	$7 = ($3 & [1])
	CALL prints_l(( *(($2 + [28])) ? ($0 + [1]) : $7 ), ( *(($2 + [24])) ? uint_32($3 >> [1]) : $7 ))
	$3 = *($5)
	$7 = ($3 & [1])
	CALL prints_l(( *((($2 + [8]) + [32])) ? ($5 + [1]) : $7 ), ( *(($2 + [36])) ? uint_32($3 >> [1]) : $7 ))
	$3 = *($6)
	$7 = ($3 & [1])
	$8 = ($2 + [52])
	CALL prints_l(( *($8) ? ($6 + [1]) : $7 ), ( *(($2 + [48])) ? uint_32($3 >> [1]) : $7 ))
	CALL printsf(*($2 + [56]))
	CALL printsf(*($2 + [60]))
	CALL prints(( [8754] ? [8759] : *($2 + [64]) ))
	if ( (*($6) & [1]) ){ goto $label$6 }
	if ( (*($5) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($8))
	if ( ((*($5) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [40])))
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($0) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$2
	CALL $10(($2 + [96]))
	$global$0 = ($2 + [112])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	float_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = [0]
	*(($3 + [168])) = [0]
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	$5 = *($0 + [8])
	*($3 + [136]) = $5
	*($3 + [144]) = $5
	CALL require_auth(*($0))
	$6 = CALL db_find_i64($5, $5, (int_64)-6030912129794572288, *($2))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($3 + [136]), $6)
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)($3 + [136])), [8765])
	
.LABEL $label$1
	CALL eosio_assert(($4 == 0), [8367])
	$6 = *($2 + [8])
	$4 = CALL $47([8319])
	$7 = ($4 <= [8])
	$8 = (CASTING float_32)(int_32 ((int_32)$6 * (int_32)[100]))
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$9 = (int_64)-9223372036854775808
	if ( ($7 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = (Rounds 0)($8)
	if ( $7 ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8424])
	goto $label$3 
	
.LABEL $label$4
	if ( $4 ){ goto $label$3 }
	$10 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($4 + [8318]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8469])
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$7 }
	$10 = ((int_64)$5 << (int_64)8)
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8522])
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)2)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $10
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$5 = $10
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$13 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	
.LABEL $label$9
	CALL eosio_assert($6, [8571])
	*($3 + [96]) = [8404]
	*($3 + [100]) = CALL $47([8404])
	*($3 + [24]) = *($3 + [96])
	$5 = *(CALL $5(($3 + [48]), ($3 + [24])))
	*($3 + [96]) = [8333]
	*($3 + [100]) = CALL $47([8333])
	*($3 + [16]) = *($3 + [96])
	$10 = *(CALL $5(($3 + [48]), ($3 + [16])))
	*($3 + [96]) = [8346]
	*($3 + [100]) = CALL $47([8346])
	*($3 + [8]) = *($3 + [96])
	$12 = *(CALL $5(($3 + [48]), ($3 + [8])))
	$13 = *($0)
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $47([8411])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$20 }
	*($3 + [32]) = ($4 << [1])
	$6 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [32]) = ($7 | [1])
	*($3 + [40]) = $6
	*($3 + [36]) = $4
	
.LABEL $label$19
	CALL memcpy($6, [8411], $4)
	
.LABEL $label$18
	*(($6 + $4)) = [0]
	*((($3 + [48]) + [24])) = $11
	$4 = ($3 + [40])
	*(($3 + [88])) = *($4)
	*($4) = [0]
	*($3 + [56]) = $13
	*($3 + [48]) = $1
	*($3 + [64]) = $9
	*($3 + [96]) = $10
	*($3 + [104]) = $12
	*($3 + [80]) = *($3 + [32])
	*($3 + [32]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = $5
	*((($3 + [96]) + [36])) = [0]
	$6 = ($4 + [16])
	*((($3 + [96]) + [24])) = $6
	*(($3 + [116])) = $6
	*($3 + [112]) = $4
	*($3 + [124 align=4]) = (int_64)0
	$4 = *($3 + [80])
	$6 = ( *((($3 + [48]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$5 = (CASTING uint_64)(uint_32 $6)
	$6 = ($3 + [124])
	
.LOOP $label$21:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$21 }
	if ( ($4 == 0) ){ goto $label$23 }
	CALL $6($6, $4)
	$6 = *(($3 + [128]))
	$4 = *(($3 + [124]))
	goto $label$22 
	
.LABEL $label$23
	$6 = [0]
	$4 = [0]
	
.LABEL $label$22
	*($3 + [180]) = $4
	*($3 + [176]) = $4
	*($3 + [184]) = $6
	*($3 + [192]) = ($3 + [176])
	*($3 + [200]) = ($3 + [48])
	CALL $7(($3 + [200]), ($3 + [192]))
	if ( ((*(($3 + [80])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$24
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$25
	CALL $8(($3 + [48]), ($3 + [96]))
	$4 = *($3 + [48])
	CALL send_inline($4, (*($3 + [52]) - $4))
	$4 = *($3 + [48])
	if ( ($4 == 0) ){ goto $label$26 }
	*($3 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$26
	*($3 + [192]) = $2
	*($3 + [176]) = $1
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$9()), [9039])
	*($3 + [52]) = ($3 + [192])
	*($3 + [48]) = ($3 + [136])
	*($3 + [56]) = ($3 + [176])
	*(($4 = CALL _Znwj([72])) + [12 align=4]) = (int_64)0
	*($4 + [20 align=4]) = (int_64)0
	*($4 + [28 align=4]) = (int_64)0
	*($4 + [36 align=4]) = (int_64)0
	*($4 + [44]) = [0]
	*($4 + [52]) = [0]
	*($4 + [56]) = [0]
	*($4 + [60]) = ($3 + [136])
	CALL $13(($3 + [48]), $4)
	*($3 + [32]) = $4
	$5 = *($4)
	*($3 + [48]) = $5
	$7 = *($4 + [64])
	*($3 + [200]) = $7
	$2 = ($3 + [164])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [168]))) ){ goto $label$28 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($3 + [32]) = [0]
	*($6) = $4
	*($2) = ($6 + [24])
	$4 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	goto $label$16 
	
.LABEL $label$28
	CALL $14(($3 + [160]), ($3 + [32]), ($3 + [48]), ($3 + [200]))
	$4 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( $4 ){ goto $label$16 }
	
.LABEL $label$27
	$4 = *($3 + [124])
	if ( ($4 == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$17
	CALL $39(($3 + [32]))
	
.LABEL $label$16
	if ( (*($4 + [36]) & [1]) ){ goto $label$33 }
	if ( (*($4 + [24]) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL _ZdlPv(*(($4 + [44])))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($4 + [32])))
	if ( (*($4 + [12]) & [1]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($4 + [20])))
	
.LABEL $label$29
	CALL _ZdlPv($4)
	$4 = *($3 + [124])
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*(($3 + [128])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$34 }
	*(($3 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$34
	CALL $10(($3 + [160]))
	$global$0 = ($3 + [208])
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [8]) = *($4 + [8])
	$5 = *($0)
	$6 = ($1 + [12])
	CALL $41($6, ($4 + [12]))
	$7 = ($1 + [24])
	CALL $41($7, (*($3) + [24]))
	$3 = *($3)
	*($1 + [48]) = *($3 + [48])
	*($1 + [56]) = *($3 + [56])
	$8 = ($1 + [36])
	CALL $41($8, ($3 + [36]))
	*(($3 = $2) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$9 = ($1 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	*($3 + [48]) = $8
	$10 = ($1 + [48])
	*($3 + [52]) = $10
	$11 = ($1 + [52])
	*($3 + [56]) = $11
	$12 = ($1 + [56])
	*($3 + [60]) = $12
	CALL $28(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $50($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($2 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	*($3 + [48]) = $8
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	CALL $29(($3 + [32]), ($3 + [24]))
	$14 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $14, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$14 >= (uint_64)*($5 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $53($4)
	if ( (uint_64)($14 <= *($5 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $48(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9092])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $48(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	*(($3 + [8])) = *(($2 + [8]))
	*($3) = *($2)
	$4 = CALL $40(($3 + [12]), ($2 + [12]))
	$6 = CALL $40(($3 + [24]), ($2 + [24]))
	$7 = CALL $40(($3 + [36]), ($2 + [36]))
	*(($3 + [56])) = *(($2 + [56]))
	*($3 + [48]) = *($2 + [48])
	CALL void $5((int_32 $1), (int_64 $3), (int_32 $0))
	if ( (*($7) & [1]) ){ goto $label$6 }
	if ( (*($6) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [44])))
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [32])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($4) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*(($3 + [20])))
	$global$0 = ($3 + [64])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $50($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9092])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $50($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	return CALL $51([9112], $0)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9104]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9108])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9104]) = [1]
	$2 = ($2 << [16])
	*([0] + [9108]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9108])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9108]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9104]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9104]) = [1]
	$3 = ($3 << [16])
	*([0] + [9108]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9108])
	
.LABEL $label$10
	*([0] + [9108]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17496])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17304]
	$3 = (((int_32)$1 * (int_32)[12]) + [17304])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}