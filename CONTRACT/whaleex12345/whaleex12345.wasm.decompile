(data (i32.const 8220) "failed to allocate pages\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8304) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8384) "unable to find key\00")
(data (i32.const 8403) ".\00")
(data (i32.const 8406) "EOS\00")
(data (i32.const 8410) "BG\00")
(data (i32.const 8413) "REX\00")
(data (i32.const 8417) "get_asset for eos, stat : %,%,%,%,\00")
(data (i32.const 8452) "get_asset for bg, stat : %,%,%,%,\00")
(data (i32.const 8486) "proxy is not an eos account\00")
(data (i32.const 8514) "contract is not an eos account\00")
(data (i32.const 8545) "invalid symbol name\00")
(data (i32.const 8565) "invalid min_reserve_quantity\00")
(data (i32.const 8594) "invalid max_stake_quantity\00")
(data (i32.const 8621) "invalid min_reserve_ratio\00")
(data (i32.const 8647) "invalid max_stake_ratio\00")
(data (i32.const 8671) "symbol config not found\00")
(data (i32.const 8695) "no currency config\00")
(data (i32.const 8714) "claim : %,\00")
(data (i32.const 8725) "pre transfer check error: overdrawn balance \00")
(data (i32.const 8770) "sell matured : %,\00")
(data (i32.const 8788) "unstake : %,\00")
(data (i32.const 8801) "stake : %,\00")
(data (i32.const 8812) "invalid quantity\00")
(data (i32.const 8829) "memo has more than 256 bytes\00")
(data (i32.const 8858) "from account not existed\00")
(data (i32.const 8883) ":\00")
(data (i32.const 8885) "to\00")
(data (i32.const 8888) "don\'t allow account to directly invoke the transfer action\00")
(data (i32.const 8947) "we don\'t want to receive any notification other than transfer\00")
(data (i32.const 9012) "\00\00\00\00\00\00\00\00\n\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00")
(data (i32.const 9040) "\00\00\00\00\00\00\00\00\0f\00\00\00\10\00\00\00\11\00\00\00\12\00\00\00\13\00\00\00")
(data (i32.const 9068) "string is too long to be a valid symbol_code\00")
(data (i32.const 9113) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9166) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9216) "\00\00\00\00\00\00\00\00\14\00\00\00\10\00\00\00\0c\00\00\00\15\00\00\00\0e\00\00\00")
(data (i32.const 9244) "stake does nothing,\00")
(data (i32.const 9264) "get_asset for basic, stat : %,%,%,%,\00")
(data (i32.const 9301) "attempt to subtract asset with different symbol\00")
(data (i32.const 9349) "subtraction underflow\00")
(data (i32.const 9371) "subtraction overflow\00")
(data (i32.const 9392) "attempt to add asset with different symbol\00")
(data (i32.const 9435) "addition underflow\00")
(data (i32.const 9454) "addition overflow\00")
(data (i32.const 9472) "write\00")
(data (i32.const 9478) "_\00")
(data (i32.const 9480) "\0c%\00\00")
(data (i32.const 9484) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9517) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9576) "%lld%s%s %s\00")
(data (i32.const 9588) "multiplication overflow\00")
(data (i32.const 9612) "multiplication underflow\00")
(data (i32.const 9637) "string is too long to be a valid name\00")
(data (i32.const 9675) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9742) "character is not in allowed character set for names\00")
(data (i32.const 9794) "unstake does nothing,\00")
(data (i32.const 9816) "claim does nothing,\00")
(data (i32.const 9836) "sell_matured does nothing,\00")
(data (i32.const 9863) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9914) "error reading iterator\00")
(data (i32.const 9937) "read\00")
(data (i32.const 9942) "get\00")
(data (i32.const 9946) "cannot increment end iterator\00")
(data (i32.const 9976) "cannot create objects in table of another contract\00")
(data (i32.const 10027) "object passed to modify is not in multi_index\00")
(data (i32.const 10073) "cannot modify objects in table of another contract\00")
(data (i32.const 10124) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10183) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10235) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10289) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10337) "cannot pass end iterator to erase\00")
(data (i32.const 10371) "object passed to erase is not in multi_index\00")
(data (i32.const 10416) "cannot erase objects in table of another contract\00")
(data (i32.const 10466) "attempt to remove object that was not in multi_index\00")
(data (i32.const 0) "\18)\00\00")
(import "env" "abort" (func $fimport$0))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "transaction_size" (func $fimport$23 (result i32)))
(import "env" "read_transaction" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$25 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$26 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$27 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$28 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$29 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$30 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$31 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$32 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$33 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$34 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$35 (param i32 i32 i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multi3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "prints" (func $fimport$40 (param i32)))
(import "env" "send_inline" (func $fimport$41 (param i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$42 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$43 (param i64) (result i32)))
(import "env" "has_auth" (func $fimport$44 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$45 (param i64)))
(import "env" "current_receiver" (func $fimport$46 (result i64)))
(import "env" "db_store_i64" (func $fimport$47 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$48 (result i32)))
(import "env" "read_action_data" (func $fimport$49 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$50 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$51 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$52 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$53 (param i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$54 (param i32 i64 i32 i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$55 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$56 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx256_store" (func $fimport$57 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$58 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$59 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$60 (param i32 i64 i32)))
(import "env" "db_idx256_find_primary" (func $fimport$61 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_update" (func $fimport$62 (param i32 i64 i32 i32)))
(import "env" "db_idx256_next" (func $fimport$63 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$64 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$65 (param i32)))
(import "env" "db_idx256_remove" (func $fimport$66 (param i32)))
(export "apply" (func $90))
(table $0 22 22 anyfunc)
(elem (i32.const 1) $19 $21 $86 $75 $65 $78 $81 $69 $85 $41 $49 $109 $55 $110 $57 $111 $62 $63 $64 $46 $112)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10519))
(global $global$2 i32 (i32.const 10519))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $24(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $24(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($0 + [16]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [32])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	*($2 + [8]) = $0
	CALL $140(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $94 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $101(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [112]) + [8]))) = $10
	*(($9 = (($4 + [128]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [128]) = $11
	*($4 + [112]) = $11
	$10 = *($9)
	*((($4 + [144]) + [8])) = $10
	*((($4 + [32]) + [24])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	*($9) = *($3)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [128])
	*($4) = $11
	*($4 + [144]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $3($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $95 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [136]))) = (int_64)0
	*(($8 = ($4 + [160]))) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = [0]
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [256]) = ($4 + [88])
	*($4 + [56]) = ($4 + [104])
	CALL $99(($4 + [56]), ($4 + [256]))
	*(($9 = (($4 + [40]) + [8]))) = *($4 + [96])
	*($4 + [40]) = *($4 + [88])
	$9 = *($9)
	*(($10 = (($4 + [224]) + [8]))) = $9
	*(($11 = (($4 + [240]) + [8]))) = $9
	$12 = *($4 + [40])
	*($4 + [240]) = $12
	*($4 + [224]) = $12
	$9 = *($11)
	*((($4 + [256]) + [8])) = $9
	*(($4 + [80])) = $9
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$0 = *($4 + [240])
	*($4 + [72]) = $0
	*($4 + [256]) = $0
	*(($9 = (($4 + [192]) + [8]))) = *($3)
	*(($3 = (($4 + [176]) + [8]))) = *($8)
	*($4 + [192]) = *($4 + [128])
	*($4 + [176]) = *($4 + [152])
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	$12 = *($4 + [104])
	$8 = *($4 + [144])
	$11 = *($4 + [168])
	*($10) = *($3)
	*((($4 + [208]) + [8])) = *($9)
	*($4 + [224]) = *($4 + [176])
	*($4 + [208]) = *($4 + [192])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$13 = *((($4 + [208]) + [8]))
	*((($4 + [256]) + [8])) = $13
	$14 = *((($4 + [224]) + [8]))
	*((($4 + [240]) + [8])) = $14
	*((($4 + [24]) + [8])) = $13
	*((($4 + [8]) + [8])) = $14
	$13 = *($4 + [208])
	*($4 + [256]) = $13
	$14 = *($4 + [224])
	*($4 + [240]) = $14
	*($4 + [24]) = $13
	*($4 + [8]) = $14
	CALL void $3((int_32 $12), (int_64 $1), (int_64 $0), (int_64 ($4 + [24])), (int_32 ($8 & [65535])), (int_32 ($4 + [8])), (int_32 ($11 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $3($2)
	
.LABEL $label$5
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $96 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [120]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [160]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $102(($4 + [32]), ($4 + [160]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [128]) + [8]))) = $10
	*(($9 = (($4 + [144]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [144]) = $11
	*($4 + [128]) = $11
	$10 = *($9)
	*((($4 + [160]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [144])
	*($4 + [48]) = $0
	*($4 + [160]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [112])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$11 = *($4 + [88])
	$12 = *($4 + [80])
	*($9) = *($3)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$13 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $13
	*(($4 + [8])) = $13
	$13 = *($4 + [144])
	*($4) = $13
	*($4 + [160]) = $13
	CALL void $3((int_32 $12), (int_64 $11), (int_64 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $3($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $138(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	CALL eosio_assert([0], [8888])
	
.LABEL $label$3
	*($3 + [108]) = [0]
	*($3 + [104]) = [3]
	*($3) = *($3 + [104])
	CALL $91($0, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-4417029265479246657) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-5920655047362171392) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-5003947123577716736) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4849838988990900224) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [4]
	*($3 + [24]) = *($3 + [80])
	CALL $92($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	CALL eosio_assert([0], [8947])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4417029265479246656) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4416997509008901152) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [8]) = *($3 + [96])
	CALL $93($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [76]) = [0]
	*($3 + [72]) = [6]
	*($3 + [32]) = *($3 + [72])
	CALL $94($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [68]) = [0]
	*($3 + [64]) = [7]
	*($3 + [40]) = *($3 + [64])
	CALL $92($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [92]) = [0]
	*($3 + [88]) = [8]
	*($3 + [16]) = *($3 + [88])
	CALL $95($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [60]) = [0]
	*($3 + [56]) = [9]
	*($3 + [48]) = *($3 + [56])
	CALL $96($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $34([0])
	$global$0 = ($3 + [112])
}

int_32 .FUNC $91 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $97(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $98(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC $92 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $100(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($8 = (($4 + [112]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [112]) = $9
	*($4 + [96]) = $9
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $3($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $93 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	$8 = ($2 + $7)
	CALL memcpy(($4 + [32]), $2, [8])
	$9 = ($2 + [8])
	$3 = (($4 + [32]) + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	CALL memcpy($3, $9, [8])
	*(($4 + [24])) = $8
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	$8 = ($4 + int_32($5 >> [1]))
	$0 = *($3)
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($8) + $6))
	
.LABEL $label$7
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $3($2)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $139($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $27($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $27($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $23($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0 + [12])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$3 = $2
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0)
	$4 = *($0 + [4])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$4 }
	$3 = ($2 - $4)
	$6 = int_32($3 >> [2])
	$7 = (((int_32)(int_32(($4 - $5) >> [2]) + [1]) / (int_32)[-2]) << [2])
	$2 = ($4 + $7)
	$5 = $2
	if ( ($3 == 0) ){ goto $label$5 }
	CALL memmove($2, $4, $3)
	$5 = (*(($0 + [4])) + $7)
	
.LABEL $label$5
	*(($0 + [4])) = $5
	$3 = ($2 + ($6 << [2]))
	*(($0 + [8])) = $3
	goto $label$2 
	
.LABEL $label$4
	$3 = ($3 - $5)
	$3 = ( int_32($3 >> [1]) ? [1] : $3 )
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $8(($3 << [2]))
	$2 = *(($0 + [8]))
	$4 = *(($0 + [4]))
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	$7 = ($5 + ($3 << [2]))
	$8 = uint_32($3 >> [2])
	$6 = ($5 + ($8 << [2]))
	$3 = $6
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$8 = (($8 + uint_32((($2 + [-4]) - $4) >> [2])) + [1])
	$3 = $6
	
.LOOP $label$9:
	*($3) = *($4)
	$3 = ($3 + [4])
	$4 = ($4 + [4])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	$3 = ($5 + ($8 << [2]))
	
.LABEL $label$8
	*(($0 + [4])) = $6
	$4 = *($0)
	*($0) = $5
	*(($2 = ($0 + [8]))) = $3
	*(($0 + [12])) = $7
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $10($4)
	$3 = *($2)
	
.LABEL $label$2
	*($3) = *($1)
	*(($4 = ($0 + [8]))) = (*($4) + [4])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0 + [12])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$3 = $2
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0)
	$4 = *($0 + [4])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$4 }
	$3 = ($2 - $4)
	$6 = int_32($3 >> [2])
	$7 = (((int_32)(int_32(($4 - $5) >> [2]) + [1]) / (int_32)[-2]) << [2])
	$2 = ($4 + $7)
	$5 = $2
	if ( ($3 == 0) ){ goto $label$5 }
	CALL memmove($2, $4, $3)
	$5 = (*(($0 + [4])) + $7)
	
.LABEL $label$5
	*(($0 + [4])) = $5
	$3 = ($2 + ($6 << [2]))
	*(($0 + [8])) = $3
	goto $label$2 
	
.LABEL $label$4
	$3 = ($3 - $5)
	$3 = ( int_32($3 >> [1]) ? [1] : $3 )
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $8(($3 << [2]))
	$2 = *(($0 + [8]))
	$4 = *(($0 + [4]))
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	$7 = ($5 + ($3 << [2]))
	$8 = uint_32($3 >> [2])
	$6 = ($5 + ($8 << [2]))
	$3 = $6
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$8 = (($8 + uint_32((($2 + [-4]) - $4) >> [2])) + [1])
	$3 = $6
	
.LOOP $label$9:
	*($3) = *($4)
	$3 = ($3 + [4])
	$4 = ($4 + [4])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	$3 = ($5 + ($8 << [2]))
	
.LABEL $label$8
	*(($0 + [4])) = $6
	$4 = *($0)
	*($0) = $5
	*(($2 = ($0 + [8]))) = $3
	*(($0 + [12])) = $7
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $10($4)
	$3 = *($2)
	
.LABEL $label$2
	*($3) = *($1)
	*(($4 = ($0 + [8]))) = (*($4) + [4])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$4 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [76]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	CALL $133(($3 + [32]), ($3 + [24]))
	*($5 + [80]) = $1
	*($5 + [84 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[1]) ){ goto $label$10 }
	CALL eosio_assert([0], [9937])
	$1 = *(($0 + [4]))
	
.LABEL $label$10
	CALL memcpy($4, $1, [2])
	*(($0 = ($0 + [4]))) = (*($0) + [2])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10289])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4060968898812444672)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10235])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10235])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $132(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = *($0 + [20])
	$3 = *($0 + [16])
	$5 = ($3 + $4)
	$2 = *($0 + [4])
	$6 = ($2 + (uint_32($5 >> [6]) & [67108860]))
	$7 = *($0 + [8])
	$8 = ((int_32)$7 == (int_32)$2)
	if ( $8 ){ goto $label$3 }
	$9 = *($1 + [4])
	$5 = (*($6) + (($5 & [255]) << [4]))
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$9 = *($1 + [4])
	if ( ((int_32)[0] == (int_32)$9) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = int_32(($9 - *($10)) >> [4])
	$10 = *($1)
	$12 = ((int_32(($5 - *($6)) >> [4]) + (($6 - $10) << [6])) - $11)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$1 }
	$1 = ($2 + (uint_32($3 >> [6]) & [67108860]))
	if ( $8 ){ goto $label$9 }
	$6 = (*($1) + (($3 & [255]) << [4]))
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = [0]
	if ( ((int_32)$9 == (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = (($11 + (($10 - $1) << [6])) - int_32(($6 - *($1)) >> [4]))
	if ( ($9 == 0) ){ goto $label$7 }
	$6 = (int_32(($6 - *($1)) >> [4]) + $9)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	$1 = ($1 + (uint_32($6 >> [6]) & [67108860]))
	$6 = (*($1) + (($6 & [255]) << [4]))
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$6 = ([255] - $6)
	$1 = ($1 + (((int_32)$6 / (int_32)[-256]) << [2]))
	$6 = (*($1) + (([255] - ((int_32)$6 % (int_32)[256])) << [4]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$10:
	$6 = ($6 + [16])
	if ( ((int_32)($6 - *($1)) != (int_32)[4096]) ){ goto $label$11 }
	$6 = *($1 + [4])
	$1 = ($1 + [4])
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$4
	$6 = ($4 - $12)
	*(($5 = ($0 + [20]))) = $6
	$1 = ($7 - $2)
	if ( ((( (($1 << [6]) + [-1]) ? [0] : $1 ) - ($6 + $3)) <= [512]) ){ goto $label$1 }
	$6 = ($0 + [8])
	$2 = ($0 + [4])
	$0 = ($0 + [16])
	
.LOOP $label$12:
	CALL $10(*(($7 + [-4])))
	$7 = (*($6) + [-4])
	*($6) = $7
	$1 = ($7 - *($2))
	if ( ((uint_32)(( (($1 << [6]) + [-1]) ? [0] : $1 ) - (*($5) + *($0))) > (uint_32)[511]) ){ goto $label$12 }
	
.LABEL $label$1
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [84])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-4060968898812444672, $3, *($5))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [88]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	$0 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-4060968898812444671, $3, [2], *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx256_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9472])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [32])
	$global$0 = $2
	$7 = *($0 + [16])
	$8 = uint_32($7 >> [8])
	$9 = ( $1 ? $8 : ($1 <= $8) )
	$6 = ((int_32)($1 & [255]) != (int_32)[0])
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	$1 = (((int_32)$3 == (int_32)$4) + $1)
	$5 = uint_32($1 >> [8])
	$1 = ($5 + $6)
	$10 = ($1 - $9)
	if ( ($10 == 0) ){ goto $label$8 }
	$7 = int_32(($3 - $4) >> [2])
	$11 = *($0 + [12])
	$12 = ($11 - *($0))
	if ( ((uint_32)$10 <= (uint_32)(int_32($12 >> [2]) - $7)) ){ goto $label$7 }
	*(($2 + [24])) = ($0 + [12])
	$4 = [0]
	*($2 + [20]) = [0]
	$10 = int_32($12 >> [1])
	$3 = ($7 + $10)
	$3 = ( $3 ? $10 : ($10 <= $3) )
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$4 = CALL $8(($3 << [2]))
	
.LABEL $label$9
	$13 = ($9 << [8])
	*($2 + [8]) = $4
	*((($2 + [8]) + [12])) = ($4 + ($3 << [2]))
	$4 = ($4 + (($7 - $9) << [2]))
	*($2 + [16]) = $4
	*($2 + [12]) = $4
	$1 = ((int_32)$1 ^ (int_32)[-1])
	$4 = ((int_32)$8 ^ (int_32)[-1])
	$4 = ((((int_32)( $4 ? $1 : ((uint_32)$4 > (uint_32)$1) ) ^ (int_32)[-1]) - $5) - $6)
	
.LOOP $label$10:
	*($2 + [4]) = CALL $8([4096])
	CALL $122(($2 + [8]), ($2 + [4]))
	$4 = ($4 + [1])
	if ( $4 ){ goto $label$10 }
	if ( ($9 == 0) ){ goto $label$6 }
	$7 = ($0 + [4])
	$10 = *($7)
	$8 = ($2 + [16])
	$3 = *($8)
	$5 = ($2 + [20])
	
.LOOP $label$11:
	$1 = *($5)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$12 }
	$6 = *($2 + [8])
	$4 = *($2 + [12])
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$13 }
	$1 = ($1 - $4)
	$11 = int_32($1 >> [2])
	$12 = (((int_32)(int_32(($4 - $6) >> [2]) + [1]) / (int_32)[-2]) << [2])
	$3 = ($4 + $12)
	$6 = $3
	if ( ($1 == 0) ){ goto $label$14 }
	CALL memmove($3, $4, $1)
	$6 = (*($2 + [12]) + $12)
	
.LABEL $label$14
	$3 = ($3 + ($11 << [2]))
	*($8) = $3
	*($2 + [12]) = $6
	goto $label$12 
	
.LABEL $label$13
	$1 = ($1 - $6)
	$1 = ( int_32($1 >> [1]) ? [1] : $1 )
	if ( ($1 == 0) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $8(($1 << [2]))
	$3 = *($8)
	$4 = *($2 + [12])
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	
.LABEL $label$15
	$12 = ($6 + ($1 << [2]))
	$14 = uint_32($1 >> [2])
	$11 = ($6 + ($14 << [2]))
	$1 = $11
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$17 }
	$14 = ($14 + [1])
	$15 = (($3 + [-4]) - $4)
	$1 = $11
	
.LOOP $label$18:
	*($1) = *($4)
	$1 = ($1 + [4])
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$18 }
	$1 = ($6 + (($14 + uint_32($15 >> [2])) << [2]))
	
.LABEL $label$17
	*($8) = $1
	*($5) = $12
	*($2 + [12]) = $11
	$4 = *($2 + [8])
	*($2 + [8]) = $6
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $10($4)
	$3 = *($8)
	goto $label$12 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$12
	*($3) = *($10)
	$3 = (*($8) + [4])
	*($8) = $3
	$10 = (*($7) + [4])
	*($7) = $10
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$8
	*(($0 + [16])) = ($7 - ($9 << [8]))
	if ( ($9 == 0) ){ goto $label$2 }
	$5 = ($0 + [12])
	$10 = ($0 + [8])
	
.LOOP $label$20:
	$7 = *($4)
	$4 = ($4 + [4])
	*(($8 = ($0 + [4]))) = $4
	$1 = *($5)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$21 }
	$6 = *($0)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$22 }
	$1 = ($1 - $4)
	$11 = int_32($1 >> [2])
	$12 = (((int_32)(int_32(($4 - $6) >> [2]) + [1]) / (int_32)[-2]) << [2])
	$3 = ($4 + $12)
	$6 = $3
	if ( ($1 == 0) ){ goto $label$23 }
	CALL memmove($3, $4, $1)
	$6 = (*($8) + $12)
	
.LABEL $label$23
	*($8) = $6
	$3 = ($3 + ($11 << [2]))
	*($10) = $3
	goto $label$21 
	
.LABEL $label$22
	$1 = ($1 - $6)
	$1 = ( int_32($1 >> [1]) ? [1] : $1 )
	if ( ($1 == 0) ){ goto $label$25 }
	if ( ((uint_32)$1 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $8(($1 << [2]))
	$3 = *($10)
	$4 = *($8)
	goto $label$24 
	
.LABEL $label$25
	$6 = [0]
	
.LABEL $label$24
	$12 = ($6 + ($1 << [2]))
	$14 = uint_32($1 >> [2])
	$11 = ($6 + ($14 << [2]))
	$1 = $11
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$26 }
	$14 = ($14 + [1])
	$15 = (($3 + [-4]) - $4)
	$1 = $11
	
.LOOP $label$27:
	*($1) = *($4)
	$1 = ($1 + [4])
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$27 }
	$1 = ($6 + (($14 + uint_32($15 >> [2])) << [2]))
	
.LABEL $label$26
	*($8) = $11
	$4 = *($0)
	*($0) = $6
	*($10) = $1
	*($5) = $12
	if ( ($4 == 0) ){ goto $label$28 }
	CALL $10($4)
	$3 = *($10)
	goto $label$21 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$21
	*($3) = $7
	$3 = (*($10) + [4])
	*($10) = $3
	$9 = ($9 + [-1])
	if ( ($9 == 0) ){ goto $label$2 }
	$4 = *($8)
	goto $label$20 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$29 }
	$4 = ($0 + [8])
	$3 = ($0 + [12])
	
.LOOP $label$30:
	*($2 + [8]) = CALL $8([4096])
	CALL $123($0, ($2 + [8]))
	if ( ((int_32)$10 == (int_32)[1]) ){ goto $label$4 }
	$10 = ($10 + [-1])
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$30 }
	
.LABEL $label$29
	$8 = ((int_32)( $8 ? $1 : ($8 <= $1) ) ^ (int_32)[-1])
	$9 = ($0 + [8])
	$4 = ($0 + [16])
	$1 = $10
	
.LOOP $label$31:
	*($2 + [8]) = CALL $8([4096])
	CALL $124($0, ($2 + [8]))
	$3 = (( [255] ? [256] : ((int_32)(*($9) - *(($0 + [4]))) == (int_32)[4]) ) + *($4))
	*($4) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$31 }
	$9 = (($10 + [-1]) - $8)
	goto $label$3 
	
.LABEL $label$6
	$10 = *(($0 + [4]))
	
.LABEL $label$5
	$4 = *(($0 + [8]))
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$32 }
	$1 = ($0 + [4])
	
.LOOP $label$33:
	$4 = ($4 + [-4])
	CALL $125(($2 + [8]), $4)
	$10 = *($1)
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$33 }
	$4 = *(($0 + [8]))
	
.LABEL $label$32
	$1 = *($0)
	*($0) = *($2 + [8])
	*(($0 + [4])) = *($2 + [12 align=4])
	*((($2 + [8]) + [8])) = $4
	$3 = ($0 + [12])
	$9 = *($3)
	$8 = (($2 + [8]) + [12])
	*($3) = *($8)
	*($8) = $9
	*(($3 = ($0 + [16]))) = (*($3) - $13)
	*($2 + [8]) = $1
	*($2 + [12]) = $10
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$34 }
	*(($2 + [16])) = ($4 + (((int_32)(($4 + [-4]) - $10) ^ (int_32)[-1]) & [-4]))
	
.LABEL $label$34
	if ( ($1 == 0) ){ goto $label$2 }
	CALL $10($1)
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$4
	$3 = *(($0 + [16]))
	
.LABEL $label$3
	*(($0 + [16])) = ($3 - ($9 << [8]))
	if ( ($9 == 0) ){ goto $label$2 }
	$10 = ($0 + [8])
	$3 = *($10)
	$5 = ($0 + [12])
	
.LOOP $label$35:
	$8 = ($0 + [4])
	$4 = *($8)
	$7 = *($4)
	$4 = ($4 + [4])
	*($8) = $4
	$1 = *($5)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$36 }
	$6 = *($0)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$37 }
	$1 = ($1 - $4)
	$11 = int_32($1 >> [2])
	$12 = (((int_32)(int_32(($4 - $6) >> [2]) + [1]) / (int_32)[-2]) << [2])
	$3 = ($4 + $12)
	$6 = $3
	if ( ($1 == 0) ){ goto $label$38 }
	CALL memmove($3, $4, $1)
	$6 = (*($8) + $12)
	
.LABEL $label$38
	*($8) = $6
	$3 = ($3 + ($11 << [2]))
	*($10) = $3
	goto $label$36 
	
.LABEL $label$37
	$1 = ($1 - $6)
	$1 = ( int_32($1 >> [1]) ? [1] : $1 )
	if ( ($1 == 0) ){ goto $label$40 }
	if ( ((uint_32)$1 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $8(($1 << [2]))
	$3 = *($10)
	$4 = *($8)
	goto $label$39 
	
.LABEL $label$40
	$6 = [0]
	
.LABEL $label$39
	$12 = ($6 + ($1 << [2]))
	$14 = uint_32($1 >> [2])
	$11 = ($6 + ($14 << [2]))
	$1 = $11
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$41 }
	$14 = ($14 + [1])
	$15 = (($3 + [-4]) - $4)
	$1 = $11
	
.LOOP $label$42:
	*($1) = *($4)
	$1 = ($1 + [4])
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$42 }
	$1 = ($6 + (($14 + uint_32($15 >> [2])) << [2]))
	
.LABEL $label$41
	*($8) = $11
	$4 = *($0)
	*($0) = $6
	*($10) = $1
	*($5) = $12
	if ( ($4 == 0) ){ goto $label$43 }
	CALL $10($4)
	$3 = *($10)
	goto $label$36 
	
.LABEL $label$43
	$3 = $1
	
.LABEL $label$36
	*($3) = $7
	$3 = (*($10) + [4])
	*($10) = $3
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$35 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($1)
	*($4 + [8]) = $5
	$6 = *($2)
	*($4 + [16]) = $6
	$3 = CALL db_find_i64($5, $6, (int_64)3607749779137757184, *($3))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $39(($4 + [8]), $3)
	if ( ((int_32)*($3 + [16]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$5
	*($0) = *($3)
	*(($0 + [8])) = *(($3 + [8]))
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$3 }
	$1 = ($4 + [36])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $10($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [8384])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $2
	
.LABEL $label$1
	*($1) = $2
	CALL $10($0)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9472])
	$4 = *($7)
	
.LABEL $label$5
	CALL memcpy($4, $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $50(($3 + [24]), $4, $2)
	$4 = CALL $1([8413])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9068])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8412]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$7 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)4
	
.LABEL $label$1
	$5 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $8
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$5 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$13 }
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	
.LABEL $label$11
	$5 = *($3 + [24])
	$8 = *($3 + [32])
	if ( ((int_64)$7 == (int_64)$8) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [8545])
	$5 = *($3 + [24])
	$8 = *($3 + [32])
	if ( ((int_64)$7 == (int_64)$8) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [9392])
	
.LABEL $label$7
	$7 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 <= (int_64)-4611686018427387905) ){ goto $label$15 }
	if ( ((int_64)$5 < (int_64)4611686018427387903) ){ goto $label$14 }
	CALL eosio_assert([0], [9454])
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [9435])
	
.LABEL $label$14
	$5 = *($1 + [8])
	*(($3 + [16])) = $8
	*($3 + [8]) = $7
	*($3) = $5
	*($3 + [24]) = (int_64)6138663577826885632
	*($3 + [32]) = (int_64)-4421659985209982976
	*(($4 = CALL $8([16]))) = $5
	*($4 + [8]) = (int_64)-4157658851551739904
	*(($3 + [60])) = [0]
	$6 = ($4 + [16])
	*((($3 + [24]) + [24])) = $6
	*(($3 + [44])) = $6
	*($3 + [40]) = $4
	*($3 + [52 align=4]) = (int_64)0
	CALL $51(($3 + [52]), [24])
	$9 = ($3 + [56])
	$4 = *($9)
	$6 = *($3 + [52])
	*($3 + [68]) = $6
	*($3 + [64]) = $6
	*($3 + [72]) = $4
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $52(($3 + [88]), ($3 + [80]))
	CALL $53(($3 + [24]))
	$4 = *($3 + [52])
	if ( ($4 == 0) ){ goto $label$16 }
	*($9) = $4
	CALL $10($4)
	
.LABEL $label$16
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($3 + [44])) = $4
	CALL $10($4)
	
.LABEL $label$17
	$5 = *(($1 + [8]))
	*(($3 + [16])) = *(($2 + [8]))
	*($3) = $5
	*($3 + [24]) = (int_64)6138663577826885632
	*($3 + [32]) = (int_64)-2039333636196532224
	*($3 + [8]) = *($2)
	*(($4 = CALL $8([16]))) = $5
	*($4 + [8]) = (int_64)-4157658851551739904
	*(($3 + [60])) = [0]
	$6 = ($4 + [16])
	*((($3 + [24]) + [24])) = $6
	*(($3 + [44])) = $6
	*($3 + [40]) = $4
	*($3 + [52 align=4]) = (int_64)0
	CALL $51(($3 + [52]), [24])
	$9 = ($3 + [56])
	$4 = *($9)
	$6 = *($3 + [52])
	*($3 + [68]) = $6
	*($3 + [64]) = $6
	*($3 + [72]) = $4
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $52(($3 + [88]), ($3 + [80]))
	CALL $53(($3 + [24]))
	$4 = *($3 + [52])
	if ( ($4 == 0) ){ goto $label$18 }
	*($9) = $4
	CALL $10($4)
	
.LABEL $label$18
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($3 + [44])) = $4
	CALL $10($4)
	
.LABEL $label$19
	$global$0 = ($3 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$2 = $10
	$global$0 = $2
	*(($11 = ($10 + $5))) = [0]
	$12 = *($1)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$12 < (int_64)0) ) * (int_64)((int_64)$12 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($11 + [-1])
	
.LOOP $label$5:
	$13 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$13 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $13
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = ($2 - (($5 + [47]) & [496]))
	$global$0 = $11
	$14 = ( [8403] ? [8405] : *($10) )
	$9 = ((int_64)$12 / (int_64)$9)
	$15 = ($5 + [32])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL $8($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*(($3 + [16])) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	*($3 + [12]) = $10
	*($3 + [8]) = $14
	*($3) = $9
	CALL $22($11, $15, [9576], $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $1($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL $8($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $23($0)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$4 = $2
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0 + [12])
	$5 = *($0 + [8])
	if ( ((uint_32)$5 >= (uint_32)$4) ){ goto $label$8 }
	$6 = (((int_32)(int_32(($4 - $5) >> [2]) + [1]) / (int_32)[2]) << [2])
	$3 = ($5 + $6)
	$5 = ($5 - $2)
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = ($3 - $5)
	CALL memmove($4, $2, $5)
	$3 = (*(($0 + [8])) + $6)
	goto $label$6 
	
.LABEL $label$8
	$3 = ($4 - $3)
	$3 = ( int_32($3 >> [1]) ? [1] : $3 )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $8(($3 << [2]))
	$5 = *(($0 + [8]))
	$2 = *(($0 + [4]))
	goto $label$4 
	
.LABEL $label$7
	$4 = $3
	
.LABEL $label$6
	*(($0 + [8])) = $3
	*(($0 + [4])) = $4
	goto $label$2 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	$7 = ($6 + ($3 << [2]))
	$8 = uint_32(($3 + [3]) >> [2])
	$4 = ($6 + ($8 << [2]))
	$3 = $4
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	$8 = ((uint_32((($5 + [-4]) - $2) >> [2]) + $8) + [1])
	$3 = $4
	
.LOOP $label$10:
	*($3) = *($2)
	$3 = ($3 + [4])
	$2 = ($2 + [4])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$10 }
	$3 = ($6 + ($8 << [2]))
	
.LABEL $label$9
	*(($5 = ($0 + [4]))) = $4
	$2 = *($0)
	*($0) = $6
	*(($0 + [8])) = $3
	*(($0 + [12])) = $7
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $10($2)
	$4 = *($5)
	
.LABEL $label$2
	*(($4 + [-4])) = *($1)
	*(($2 = ($0 + [4]))) = (*($2) + [-4])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$5 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [20]) = $5
	*($3 + [16]) = $5
	*($3 + [24]) = ($5 + $4)
	*(($2 = CALL $8([96])) + [8]) = (int_64)0
	*($2) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56 align=4]) = (int_64)0
	*($2 + [64 align=4]) = (int_64)0
	*($2 + [72 align=4]) = (int_64)0
	*($2 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($2 + [8])
	*($3 + [40]) = $2
	*($3 + [48]) = ($2 + [16])
	*($3 + [52]) = ($2 + [32])
	*($3 + [56]) = ($2 + [48])
	*($3 + [60]) = ($2 + [56])
	CALL $116(($3 + [40]), ($3 + [32]))
	*($2 + [84]) = $1
	*($3 + [32]) = $2
	$7 = *($2 + [8])
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [32]) = [0]
	*($4) = $2
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $117(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($5)
	
.LABEL $label$7
	$8 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	$5 = *(($8 + [60]))
	$4 = *(($8 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$0 = ($5 + (uint_32($1 >> [6]) & [67108860]))
	$1 = (*($0) + (($1 & [255]) << [4]))
	$1 = *(($8 + [72]))
	$9 = ($8 + [76])
	$0 = (*($9) + $1)
	$6 = (*(($5 + (uint_32($0 >> [6]) & [67108860]))) + (($0 & [255]) << [4]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$13:
	$1 = ($1 + [16])
	if ( ((int_32)($1 - *($0)) != (int_32)[4096]) ){ goto $label$14 }
	$1 = *($0 + [4])
	$0 = ($0 + [4])
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = ($8 + [76])
	
.LABEL $label$11
	*($9) = [0]
	$0 = int_32(($4 - $5) >> [2])
	if ( ($0 <= [3]) ){ goto $label$15 }
	$1 = ($8 + [60])
	$6 = ($8 + [64])
	
.LOOP $label$16:
	CALL $10(*($5))
	$5 = (*($1) + [4])
	*($1) = $5
	$4 = *($6)
	$0 = int_32(($4 - $5) >> [2])
	if ( ((uint_32)$0 > (uint_32)[2]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$0 == (int_32)[1]) ){ goto $label$19 }
	if ( ((int_32)$0 != (int_32)[2]) ){ goto $label$17 }
	$1 = [256]
	goto $label$18 
	
.LABEL $label$19
	$1 = [128]
	
.LABEL $label$18
	*(($8 + [72])) = $1
	
.LABEL $label$17
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	CALL $10(*($5))
	$5 = ($5 + [4])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$21 }
	$4 = *(($8 + [60]))
	$1 = ($8 + [64])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$20 }
	*($1) = ($5 + (((int_32)(($5 + [-4]) - $4) ^ (int_32)[-1]) & [-4]))
	
.LABEL $label$20
	$5 = *($8 + [56])
	if ( ($5 == 0) ){ goto $label$22 }
	CALL $10($5)
	
.LABEL $label$22
	CALL $10($8)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $2
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [208])
	$global$0 = $5
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL $48(($5 + [176]), $1)
	$6 = *($5 + [176])
	$1 = ($6 & [1])
	CALL prints_l(( *($5 + [184]) ? (($5 + [176]) | [1]) : $1 ), ( *($5 + [180]) ? uint_32($6 >> [1]) : $1 ))
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*(($5 + [184])))
	
.LABEL $label$4
	*(($6 = (($5 + [32]) + [8]))) = *(($2 + [8]))
	*(($1 = (($5 + [16]) + [8]))) = *(($3 + [8]))
	*(($7 = ($5 + [8]))) = *(($4 + [8]))
	*($5 + [32]) = *($2)
	*($5 + [16]) = *($3)
	*($5) = *($4)
	*((($5 + [80]) + [8])) = *($7)
	*((($5 + [64]) + [8])) = *($1)
	*((($5 + [48]) + [8])) = *($6)
	*($5 + [80]) = *($5)
	*($5 + [64]) = *($5 + [16])
	*($5 + [48]) = *($5 + [32])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$6 
	
.LABEL $label$5
	CALL $48(($5 + [176]), ($5 + [48]))
	$6 = *($5 + [176])
	$2 = ($6 & [1])
	CALL prints_l(( *($5 + [184]) ? (($5 + [176]) | [1]) : $2 ), ( *($5 + [180]) ? uint_32($6 >> [1]) : $2 ))
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*(($5 + [184])))
	
.LABEL $label$7
	*(($6 = (($5 + [112]) + [8]))) = *((($5 + [64]) + [8]))
	*(($2 = (($5 + [96]) + [8]))) = *((($5 + [80]) + [8]))
	*($5 + [112]) = *($5 + [64])
	*($5 + [96]) = *($5 + [80])
	*((($5 + [144]) + [8])) = *($2)
	*((($5 + [128]) + [8])) = *($6)
	*($5 + [144]) = *($5 + [96])
	*($5 + [128]) = *($5 + [112])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$9:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$9 
	
.LABEL $label$8
	CALL $48(($5 + [176]), ($5 + [128]))
	$6 = *($5 + [176])
	$2 = ($6 & [1])
	CALL prints_l(( *($5 + [184]) ? (($5 + [176]) | [1]) : $2 ), ( *($5 + [180]) ? uint_32($6 >> [1]) : $2 ))
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($5 + [184])))
	
.LABEL $label$10
	*(($6 = (($5 + [160]) + [8]))) = *((($5 + [144]) + [8]))
	*($5 + [160]) = *($5 + [144])
	*((($5 + [176]) + [8])) = *($6)
	*($5 + [176]) = *($5 + [160])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$12:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$11 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$12 
	
.LABEL $label$11
	CALL $48(($5 + [192]), ($5 + [176]))
	$6 = *($5 + [192])
	$2 = ($6 & [1])
	CALL prints_l(( *($5 + [200]) ? (($5 + [192]) | [1]) : $2 ), ( *($5 + [196]) ? uint_32($6 >> [1]) : $2 ))
	if ( ((*($5 + [192]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($5 + [200])))
	
.LABEL $label$13
	CALL prints(($0 + [1]))
	
.LABEL $label$1
	$global$0 = ($5 + [208])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$6 = ($global$0 - [304])
	$global$0 = $6
	*($6 + [288]) = (uint_64)*($1 + [24]) >> (uint_64)(int_64)8)
	CALL $38(($6 + [200]), ($1 + [16]), ($1 + [8]), ($6 + [288]))
	$7 = *($6 + [200])
	*($2) = $7
	$9 = ($2 + [8])
	*(($8 = (($6 + [288]) + [8]))) = *($9)
	$11 = ($3 + [8])
	*(($10 = (($6 + [272]) + [8]))) = *($11)
	$13 = ($4 + [8])
	*(($12 = (($6 + [256]) + [8]))) = *($13)
	$15 = ($5 + [8])
	*(($14 = (($6 + [240]) + [8]))) = *($15)
	$16 = *($5)
	$17 = *($4)
	$18 = *($3)
	*((($6 + [120]) + [8])) = *($8)
	*($6 + [288]) = $7
	*($6 + [272]) = $18
	*($6 + [256]) = $17
	*($6 + [240]) = $16
	*($6 + [120]) = *($6 + [288])
	*((($6 + [104]) + [8])) = *($10)
	*($6 + [104]) = *($6 + [272])
	*((($6 + [88]) + [8])) = *($12)
	*($6 + [88]) = *($6 + [256])
	*((($6 + [72]) + [8])) = *($14)
	*($6 + [72]) = *($6 + [240])
	CALL $42([9264], ($6 + [120]), ($6 + [104]), ($6 + [88]), ($6 + [72]))
	*(($6 + [232])) = [0]
	*($6 + [208]) = (int_64)6138663577826885632
	*($6 + [200]) = (int_64)6138663577826885632
	*($6 + [216]) = (int_64)-1
	*($6 + [224]) = (int_64)0
	$1 = CALL db_find_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-4991550501091803136, *($1 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $43(($6 + [200]), $1)
	if ( ((int_32)*($12 + [80]) == (int_32)($6 + [200])) ){ goto $label$2 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$2
	$17 = *($12 + [48])
	$1 = CALL $1([8413])
	if ( ($1 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9068])
	goto $label$5 
	
.LABEL $label$6
	if ( ($1 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($1 + [8412]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$8
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	$18 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$18 = (int_64)4
	
.LABEL $label$3
	*($6 + [296]) = $18
	*($6 + [288]) = $17
	if ( (uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$9 }
	CALL eosio_assert([0], [9166])
	
.LABEL $label$9
	$7 = (uint_64)$18 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$16 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $16
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $16
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$14 }
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [8545])
	
.LABEL $label$10
	$7 = *(($12 + [40]))
	*(($6 + [280])) = $7
	*($6 + [272]) = *($12 + [32])
	if ( ((int_64)$18 == (int_64)$7) ){ goto $label$15 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$15
	$7 = (int_64)
	*($6 + [272]) = $7(*($6 + [272]) - $17))
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$17 }
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$16 }
	CALL eosio_assert([0], [9371])
	goto $label$16 
	
.LABEL $label$17
	CALL eosio_assert([0], [9349])
	
.LABEL $label$16
	CALL $44(($6 + [256]), $6, ($6 + [288]))
	CALL $44(($6 + [240]), $6, ($6 + [272]))
	*($5) = *($6 + [256])
	*($3) = *($6 + [240])
	
.LABEL $label$1
	$16 = *($9)
	*((($6 + [184]) + [8])) = $16
	*(($1 = (($6 + [168]) + [8]))) = *($11)
	*(($8 = (($6 + [152]) + [8]))) = *($13)
	*(($10 = (($6 + [136]) + [8]))) = *($15)
	$7 = *($2)
	$17 = *($5)
	$18 = *($4)
	$19 = *($3)
	*((($6 + [56]) + [8])) = $16
	*($6 + [168]) = $19
	*($6 + [152]) = $18
	*($6 + [136]) = $17
	*($6 + [184]) = $7
	*($6 + [56]) = $7
	*((($6 + [40]) + [8])) = *($1)
	*($6 + [40]) = *($6 + [168])
	*((($6 + [24]) + [8])) = *($8)
	*($6 + [24]) = *($6 + [152])
	*((($6 + [8]) + [8])) = *($10)
	*($6 + [8]) = *($6 + [136])
	CALL $42([8417], ($6 + [56]), ($6 + [40]), ($6 + [24]), ($6 + [8]))
	$10 = *($6 + [224])
	if ( ($10 == 0) ){ goto $label$18 }
	$5 = ($6 + [228])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$10) ){ goto $label$20 }
	$1 = ($1 + [-24])
	
.LOOP $label$21:
	$8 = CALL $45($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$21 }
	$1 = *(($6 + [224]))
	goto $label$19 
	
.LABEL $label$20
	$1 = $10
	
.LABEL $label$19
	*($5) = $10
	CALL $10($1)
	
.LABEL $label$18
	$global$0 = ($6 + [304])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = *($0 + [16])
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	$2 = CALL $1([8406])
	if ( ($2 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9068])
	goto $label$5 
	
.LABEL $label$6
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$1 = (int_64)0
	
.LOOP $label$7:
	$3 = *(($2 + [8405]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$8
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	if ( ((int_64)*($0 + [24]) != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)*($0 + [24]) == (int_64)4) ){ goto $label$1 }
	
.LABEL $label$3
	$1 = *(($0 + [16]))
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)4255553862556651200) ){ goto $label$15 }
	$2 = CALL $1([8410])
	if ( ($2 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9068])
	goto $label$13 
	
.LABEL $label$15
	$2 = CALL $8([4])
	goto $label$10 
	
.LABEL $label$14
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($2 + [8409]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$17
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$12
	$1 = (int_64)4
	
.LABEL $label$11
	$4 = *($0 + [24])
	$2 = CALL $8([4])
	$3 = [9048]
	if ( ((int_64)$4 == (int_64)$1) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = [9224]
	
.LABEL $label$9
	*($2) = $3
	return $2
	
.LABEL $label$1
	*(($2 = CALL $8([4]))) = [9020]
	return $2
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([128])) + [8]) = (int_64)0
	*($5) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [88])
	*($3 + [60]) = ($5 + [104])
	CALL $127(($3 + [32]), ($3 + [24]))
	*($5 + [116]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)0
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $128(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [136]) = (uint_64)*($1 + [24]) >> (uint_64)(int_64)8)
	CALL $38(($6 + [144]), ($1 + [16]), ($1 + [8]), ($6 + [136]))
	$7 = *($6 + [144])
	*($2) = $7
	*(($1 = (($6 + [120]) + [8]))) = *(($2 + [8]))
	*(($2 = (($6 + [104]) + [8]))) = *(($3 + [8]))
	*(($8 = (($6 + [88]) + [8]))) = *(($4 + [8]))
	*(($9 = (($6 + [72]) + [8]))) = *(($5 + [8]))
	*($6 + [120]) = $7
	*($6 + [104]) = *($3)
	*($6 + [88]) = *($4)
	*($6 + [72]) = *($5)
	*((($6 + [56]) + [8])) = *($1)
	*($6 + [56]) = *($6 + [120])
	*((($6 + [40]) + [8])) = *($2)
	*($6 + [40]) = *($6 + [104])
	*((($6 + [24]) + [8])) = *($8)
	*($6 + [24]) = *($6 + [88])
	*((($6 + [8]) + [8])) = *($9)
	*($6 + [8]) = *($6 + [72])
	CALL $42([9264], ($6 + [56]), ($6 + [40]), ($6 + [24]), ($6 + [8]))
	$global$0 = ($6 + [160])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *(($1 + [60]))
	$2 = *(($1 + [64]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$6 = ($3 + (uint_32($5 >> [6]) & [67108860]))
	$5 = (*($6) + (($5 & [255]) << [4]))
	$5 = *(($1 + [72]))
	$4 = ($1 + [76])
	$6 = (*($4) + $5)
	$7 = (*(($3 + (uint_32($6 >> [6]) & [67108860]))) + (($6 & [255]) << [4]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($5 + [16])
	if ( ((int_32)($5 - *($6)) != (int_32)[4096]) ){ goto $label$5 }
	$5 = *($6 + [4])
	$6 = ($6 + [4])
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = ($1 + [76])
	
.LABEL $label$2
	*($4) = [0]
	$6 = int_32(($2 - $3) >> [2])
	if ( ($6 <= [3]) ){ goto $label$6 }
	$5 = ($1 + [60])
	$7 = ($1 + [64])
	
.LOOP $label$7:
	CALL $10(*($3))
	$3 = (*($5) + [4])
	*($5) = $3
	$2 = *($7)
	$6 = int_32(($2 - $3) >> [2])
	if ( ((uint_32)$6 > (uint_32)[2]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$10 }
	if ( ((int_32)$6 != (int_32)[2]) ){ goto $label$8 }
	$5 = [256]
	goto $label$9 
	
.LABEL $label$10
	$5 = [128]
	
.LABEL $label$9
	*(($1 + [72])) = $5
	
.LABEL $label$8
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	CALL $10(*($3))
	$3 = ($3 + [4])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$12 }
	$2 = *(($1 + [60]))
	$5 = ($1 + [64])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$11 }
	*($5) = ($3 + (((int_32)(($3 + [-4]) - $2) ^ (int_32)[-1]) & [-4]))
	
.LABEL $label$11
	$3 = *($1 + [56])
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $10($3)
	
.LABEL $label$13
	CALL $10($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [72])) = [0]
	*($3 + [48]) = (int_64)6138663577826885632
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$4 = CALL $47(($3 + [40]), CALL $fimport$37((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-4991296453239373824, (int_64)0))
	$5 = *($4 + [56])
	$5 = *($2)
	CALL __multi3(($3 + [24]), $5, (int_64)$5 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	$5 = *($4 + [72])
	CALL __udivti3(($3 + [8]), *($3 + [24]), *((($3 + [24]) + [8])), $5, (int_64)$5 >> (int_64)63))
	$4 = CALL $1([8406])
	$6 = *($3 + [8])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9068])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$2 = *(($4 + [8405]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = $5
	*($0) = $6
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$7 }
	CALL eosio_assert([0], [9166])
	
.LABEL $label$7
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$5 = $6
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$5 = $6
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$0 = ($4 + [1])
	$4 = $0
	if ( $2 ){ goto $label$14 }
	$4 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$11 }
	
.LABEL $label$12
	$0 = *($3 + [64])
	if ( $0 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([0], [8545])
	$0 = *($3 + [64])
	if ( ($0 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = ($3 + [68])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	CALL $10($2)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $0
	
.LABEL $label$15
	*($7) = $0
	CALL $10($4)
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [80])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$4 = $2
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0 + [12])
	$5 = *($0 + [8])
	if ( ((uint_32)$5 >= (uint_32)$4) ){ goto $label$8 }
	$6 = (((int_32)(int_32(($4 - $5) >> [2]) + [1]) / (int_32)[2]) << [2])
	$3 = ($5 + $6)
	$5 = ($5 - $2)
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = ($3 - $5)
	CALL memmove($4, $2, $5)
	$3 = (*(($0 + [8])) + $6)
	goto $label$6 
	
.LABEL $label$8
	$3 = ($4 - $3)
	$3 = ( int_32($3 >> [1]) ? [1] : $3 )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $8(($3 << [2]))
	$5 = *(($0 + [8]))
	$2 = *(($0 + [4]))
	goto $label$4 
	
.LABEL $label$7
	$4 = $3
	
.LABEL $label$6
	*(($0 + [8])) = $3
	*(($0 + [4])) = $4
	goto $label$2 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	$7 = ($6 + ($3 << [2]))
	$8 = uint_32(($3 + [3]) >> [2])
	$4 = ($6 + ($8 << [2]))
	$3 = $4
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	$8 = ((uint_32((($5 + [-4]) - $2) >> [2]) + $8) + [1])
	$3 = $4
	
.LOOP $label$10:
	*($3) = *($2)
	$3 = ($3 + [4])
	$2 = ($2 + [4])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$10 }
	$3 = ($6 + ($8 << [2]))
	
.LABEL $label$9
	*(($5 = ($0 + [4]))) = $4
	$2 = *($0)
	*($0) = $6
	*(($0 + [8])) = $3
	*(($0 + [12])) = $7
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $10($2)
	$4 = *($5)
	
.LABEL $label$2
	*(($4 + [-4])) = *($1)
	*(($2 = ($0 + [4]))) = (*($2) + [-4])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $0 ()
{
	CALL $4()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $75 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [192])
	$global$0 = $4
	*($4 + [144]) = $2
	*($4 + [152]) = $1
	*($4 + [136]) = $3
	*(($4 + [128])) = [0]
	*($4 + [112]) = (int_64)-1
	*($4 + [120]) = (int_64)0
	$3 = *($0)
	*($4 + [96]) = $3
	*($4 + [104]) = $3
	$5 = CALL db_find_i64($3, $3, (int_64)-3020372878530969600, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $66(($4 + [96]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [96])) ){ goto $label$3 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$3
	if ( CALL has_auth(*($5 + [8])) ){ goto $label$1 }
	$1 = *($4 + [152])
	
.LABEL $label$2
	CALL require_auth($1)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	$3 = *($0)
	*($4 + [56]) = $3
	*($4 + [64]) = $3
	*($4 + [48]) = ($4 + [56])
	CALL $70($4, ($4 + [152]), ($4 + [144]), ($4 + [136]))
	CALL $71(($4 + [40]), ($4 + [48]), $4)
	$0 = *($4 + [44])
	if ( $0 ){ goto $label$4 }
	CALL eosio_assert([0], [8671])
	$0 = *($4 + [44])
	
.LABEL $label$4
	CALL $70(($4 + [160]), ($0 + [8]), ($0 + [16]), ($0 + [24]))
	if ( ((int_64)((int_64)((int_64)*($4) ^ (int_64)*($4 + [160])) | (int_64)((int_64)*($4 + [8]) ^ (int_64)*($4 + [168]))) != (int_64)0) ){ goto $label$6 }
	if ( (int_64)(((int_64)((int_64)*($4 + [16]) ^ (int_64)*($4 + [176])) | (int_64)((int_64)*(($4 + [24])) ^ (int_64)*((($4 + [160]) + [24])))) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [8671])
	
.LABEL $label$5
	$3 = *($4 + [40])
	*($4 + [160]) = $3
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $0) ){ goto $label$7 }
	CALL eosio_assert([0], [10337])
	$0 = *($4 + [164])
	
.LABEL $label$7
	CALL $76(($4 + [160]))
	CALL $77(*($4 + [48]), $0)
	$6 = *($4 + [80])
	if ( ($6 == 0) ){ goto $label$8 }
	$7 = ($4 + [84])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($4 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $6
	
.LABEL $label$9
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$8
	$6 = *($4 + [120])
	if ( ($6 == 0) ){ goto $label$13 }
	$7 = ($4 + [124])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $10($5)
	
.LABEL $label$17
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($4 + [120]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $6
	
.LABEL $label$14
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$13
	$global$0 = ($4 + [192])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8304]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	$4 = ($4 & [-8])
	if ( ((int_32)$4 != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$9 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$9
	CALL memcpy(($3 + [24]), $7, [8])
	*(($5 + [16])) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$9 = *($5)
	*($3 + [24]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$12 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $129(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $3($2)
	
.LABEL $label$10
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $10($1)
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3102536759825661952, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [40]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9863])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $61($7, CALL $fimport$36(*($7), *($7 + [8]), (int_64)-3102536759825661952, $6))
	if ( ((int_32)*($4 + [40]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [72])) = [0]
	*($3 + [48]) = (int_64)6138663577826885632
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$4 = CALL db_lowerbound_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-4991296453239373824, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $47(($3 + [40]), $4)
	$5 = *($4 + [72])
	if ( ((int_64)$5 <= (int_64)0) ){ goto $label$10 }
	$6 = *($4 + [56])
	$7 = ((int_64)*($2) + (int_64)$6)
	CALL __multi3(($3 + [24]), $7, (int_64)$7 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	CALL __udivti3(($3 + [8]), *($3 + [24]), *((($3 + [24]) + [8])), $6, (int_64)$6 >> (int_64)63))
	$6 = (int_64))(*($3 + [8]) - $5)
	$2 = CALL $1([8413])
	if ( ($2 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9068])
	goto $label$8 
	
.LABEL $label$10
	$6 = ((int_64)*($2) * (int_64)10000)
	$2 = CALL $1([8413])
	if ( ($2 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9068])
	goto $label$11 
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$11
	$5 = (int_64)0
	
.LOOP $label$13:
	$4 = *(($2 + [8412]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$14
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$13 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$9
	if ( ($2 == 0) ){ goto $label$6 }
	
.LABEL $label$8
	$5 = (int_64)0
	
.LOOP $label$15:
	$4 = *(($2 + [8412]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$16
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$15 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$7
	$5 = (int_64)4
	goto $label$4 
	
.LABEL $label$6
	$5 = (int_64)4
	
.LABEL $label$5
	*($0 + [8]) = $5
	*($0) = $6
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$17 }
	CALL eosio_assert([0], [9166])
	
.LABEL $label$17
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$5 = $6
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$20
	$5 = $6
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $4 ){ goto $label$21 }
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$18
	CALL eosio_assert([0], [8545])
	goto $label$3 
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = $6
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$22 }
	CALL eosio_assert([0], [9166])
	
.LABEL $label$22
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$5 = $6
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$25
	$5 = $6
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $4 ){ goto $label$26 }
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$23
	CALL eosio_assert([0], [8545])
	$0 = *($3 + [64])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = *($3 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [68])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL $10($4)
	
.LABEL $label$30
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($3 + [64]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $0
	
.LABEL $label$27
	*($8) = $0
	CALL $10($2)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $35($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	$0 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $0
	*($2 + [8]) = *(($5 + [16]))
	if ( ((int_32)(*(($4 + [8])) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9472])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $51($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $54(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $114(CALL $113($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9472])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $34 (int_32 $0)
{
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9472])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $126(*($1), ($4 + [16]))
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$6 = ($global$0 - [320])
	$global$0 = $6
	*($6 + [192]) = (uint_64)*($1 + [24]) >> (uint_64)(int_64)8)
	$7 = ($1 + [8])
	CALL $38(($6 + [232]), ($1 + [16]), $7, ($6 + [192]))
	$8 = *($6 + [232])
	*($2) = $8
	*(($9 = (($6 + [192]) + [8]))) = *(($2 + [8]))
	*(($10 = (($6 + [304]) + [8]))) = *(($3 + [8]))
	*(($11 = (($6 + [288]) + [8]))) = *(($4 + [8]))
	*(($12 = (($6 + [272]) + [8]))) = *(($5 + [8]))
	$13 = *($5)
	$14 = *($4)
	$15 = *($3)
	*((($6 + [112]) + [8])) = *($9)
	*($6 + [192]) = $8
	*($6 + [304]) = $15
	*($6 + [288]) = $14
	*($6 + [272]) = $13
	*($6 + [112]) = *($6 + [192])
	*((($6 + [96]) + [8])) = *($10)
	*($6 + [96]) = *($6 + [304])
	*((($6 + [80]) + [8])) = *($11)
	*($6 + [80]) = *($6 + [288])
	*((($6 + [64]) + [8])) = *($12)
	*($6 + [64]) = *($6 + [272])
	CALL $42([9264], ($6 + [112]), ($6 + [96]), ($6 + [80]), ($6 + [64]))
	*((($6 + [232]) + [32])) = [0]
	*($6 + [240]) = (int_64)5455799419163236352
	*($6 + [232]) = (int_64)5455799419163236352
	*($6 + [248]) = (int_64)-1
	*($6 + [256]) = (int_64)0
	$1 = CALL db_find_i64((int_64)5455799419163236352, (int_64)5455799419163236352, (int_64)-4157661383434960896, *($1 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $58(($6 + [232]), $1)
	if ( ((int_32)*($1 + [24]) == (int_32)($6 + [232])) ){ goto $label$2 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$2
	*($3) = *($1 + [8])
	
.LABEL $label$1
	*((($6 + [192]) + [32])) = [0]
	*($6 + [200]) = (int_64)5455799419163236352
	*($6 + [192]) = (int_64)5455799419163236352
	*($6 + [208]) = (int_64)-1
	*($6 + [216]) = (int_64)0
	*($6 + [228]) = [0]
	*($6 + [288]) = ($6 + [192])
	CALL $59(($6 + [304]), ($6 + [288]), $7)
	$1 = *($6 + [308])
	if ( ($1 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($1 + [8]) != (int_64)*($7)) ){ goto $label$3 }
	*($4) = ((int_64)*($4) + (int_64)*($1 + [16]))
	CALL $60(($6 + [304]))
	$1 = *($6 + [308])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$3
	$8 = (int_64)
	*($2) = $8(*($2) - ((int_64)*($4) + (int_64)*($3))))
	*(($1 = (($6 + [176]) + [8]))) = *(($2 + [8]))
	*(($7 = (($6 + [160]) + [8]))) = *(($3 + [8]))
	*(($2 = (($6 + [144]) + [8]))) = *(($4 + [8]))
	*(($9 = (($6 + [128]) + [8]))) = *(($5 + [8]))
	$13 = *($5)
	$14 = *($4)
	$15 = *($3)
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [176]) = $8
	*($6 + [160]) = $15
	*($6 + [144]) = $14
	*($6 + [128]) = $13
	*($6 + [48]) = *($6 + [176])
	*((($6 + [32]) + [8])) = *($7)
	*($6 + [32]) = *($6 + [160])
	*((($6 + [16]) + [8])) = *($2)
	*($6 + [16]) = *($6 + [144])
	*(($6 + [8])) = *($9)
	*($6) = *($6 + [128])
	CALL $42([8452], ($6 + [48]), ($6 + [32]), ($6 + [16]), $6)
	$7 = *($6 + [216])
	if ( ($7 == 0) ){ goto $label$5 }
	$3 = ($6 + [220])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $10($4)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$8 }
	$1 = *(($6 + [216]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $7
	
.LABEL $label$6
	*($3) = $7
	CALL $10($1)
	
.LABEL $label$5
	$7 = *($6 + [256])
	if ( ($7 == 0) ){ goto $label$10 }
	$3 = ($6 + [260])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $10($4)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($6 + [256]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $7
	
.LABEL $label$11
	*($3) = $7
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($6 + [320])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $118(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $45($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$10 }
	CALL $10($4)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9472])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([9244])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9472])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9472])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL prints([9816])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([9836])
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9942])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $51($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [9942])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	CALL $119($1, (CASTING uint_32)(uint_64 $4))
	$3 = *($1 + [4])
	if ( ((int_32)*($1 + [8]) == (int_32)$3) ){ goto $label$3 }
	$6 = ($3 + (uint_32($8 >> [6]) & [67108860]))
	$3 = (*($6) + (($8 & [255]) << [4]))
	$8 = *($1 + [16])
	$7 = (*($1 + [20]) + $8)
	$1 = (*(($3 + (uint_32($7 >> [6]) & [67108860]))) + (($7 & [255]) << [4]))
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$3 }
	$8 = ($0 + [4])
	$7 = *($8)
	$5 = ($0 + [8])
	
.LOOP $label$4:
	*($2 + [8]) = [0]
	if ( ((uint_32)(*($5) - $7) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$7 = *($8)
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $7, [4])
	$7 = (*($8) + [4])
	*($8) = $7
	if ( ((uint_32)(*($5) - $7) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	$7 = *($8)
	
.LABEL $label$6
	CALL memcpy($2, $7, [8])
	*($3) = *($2 + [8])
	*($3 + [8]) = *($2)
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [16])
	if ( ((int_32)($3 - *($6)) != (int_32)[4096]) ){ goto $label$7 }
	$3 = *($6 + [4])
	$6 = ($6 + [4])
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [20])
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$4 = [0]
	$9 = ($3 + *($0 + [16]))
	$7 = *($0 + [4])
	$6 = *($0 + [8])
	$8 = ($6 - $7)
	$8 = (( (($8 << [6]) + [-1]) ? [0] : $8 ) - $9)
	$5 = ($1 - $3)
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$3 }
	CALL $120($0, ($5 - $8))
	$9 = (*(($0 + [16])) + *(($0 + [20])))
	$6 = *(($0 + [8]))
	$7 = *(($0 + [4]))
	
.LABEL $label$3
	$8 = ($7 + (uint_32($9 >> [6]) & [67108860]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	$4 = (*($8) + (($9 & [255]) << [4]))
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$1 }
	$1 = ($3 - $1)
	$0 = ($0 + [20])
	
.LOOP $label$5:
	*($4 + [8]) = (int_64)0
	*($4) = [0]
	$4 = ($4 + [16])
	if ( ((int_32)($4 - *($8)) != (int_32)[4096]) ){ goto $label$6 }
	$4 = *($8 + [4])
	$8 = ($8 + [4])
	
.LABEL $label$6
	*($0) = (*($0) + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$1 }
	$3 = *($0 + [16])
	$8 = *($0 + [4])
	$4 = ($8 + (uint_32($3 >> [6]) & [67108860]))
	if ( ((int_32)*($0 + [8]) == (int_32)$8) ){ goto $label$9 }
	$8 = (*($4) + (($3 & [255]) << [4]))
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$8 = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_32(($8 - *($4)) >> [4]) + $1)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$10 }
	$4 = ($4 + (uint_32($8 >> [6]) & [67108860]))
	$8 = (*($4) + (($8 & [255]) << [4]))
	goto $label$7 
	
.LABEL $label$10
	$8 = ([255] - $8)
	$4 = ($4 + (((int_32)$8 / (int_32)[-256]) << [2]))
	$8 = (*($4) + (([255] - ((int_32)$8 % (int_32)[256])) << [4]))
	
.LABEL $label$7
	*($2 + [12]) = $8
	*($2 + [8]) = $4
	*($2) = *($2 + [8])
	CALL $121($0, $2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $26($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $1($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $26($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($1 + [8])
	*((($3 + [8]) + [24])) = [0]
	*($3 + [16]) = (int_64)-2067973376416334880
	*($3 + [8]) = $4
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [48]) = (int_64)-2507754169720236688
	*(($5 = CALL $8([16]))) = $4
	*($5 + [8]) = (int_64)-4157658851551739904
	*(($3 + [76])) = [0]
	$6 = ($5 + [16])
	*((($3 + [40]) + [24])) = $6
	*(($3 + [60])) = $6
	*($3 + [56]) = $5
	*($3 + [68 align=4]) = (int_64)0
	CALL $51(($3 + [68]), [17])
	$7 = ($3 + [72])
	$5 = *($7)
	$6 = *($3 + [68])
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = $5
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = ($3 + [8])
	CALL $56(($3 + [104]), ($3 + [96]))
	CALL $53(($3 + [40]))
	$5 = *($3 + [68])
	if ( ($5 == 0) ){ goto $label$1 }
	*($7) = $5
	CALL $10($5)
	
.LABEL $label$1
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$2 }
	*(($3 + [60])) = $5
	CALL $10($5)
	
.LABEL $label$2
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	*(($3 + [28])) = $5
	CALL $10($5)
	
.LABEL $label$3
	$4 = *(($1 + [8]))
	*((($3 + [8]) + [16])) = *(($2 + [8]))
	*($3 + [8]) = $4
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [48]) = (int_64)5380477996647841792
	*($3 + [16]) = *($2)
	*(($5 = CALL $8([16]))) = $4
	*($5 + [8]) = (int_64)-4157658851551739904
	*(($3 + [76])) = [0]
	$6 = ($5 + [16])
	*((($3 + [40]) + [24])) = $6
	*(($3 + [60])) = $6
	*($3 + [56]) = $5
	*($3 + [68 align=4]) = (int_64)0
	CALL $51(($3 + [68]), [24])
	$7 = ($3 + [72])
	$5 = *($7)
	$6 = *($3 + [68])
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = $5
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = ($3 + [8])
	CALL $52(($3 + [104]), ($3 + [96]))
	CALL $53(($3 + [40]))
	$5 = *($3 + [68])
	if ( ($5 == 0) ){ goto $label$4 }
	*($7) = $5
	CALL $10($5)
	
.LABEL $label$4
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [60])) = $5
	CALL $10($5)
	
.LABEL $label$5
	$4 = *(($1 + [8]))
	*((($3 + [8]) + [16])) = *(($2 + [8]))
	*($3 + [8]) = $4
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [48]) = (int_64)4520898742026502144
	*($3 + [16]) = *($2)
	*(($2 = CALL $8([16]))) = $4
	*($2 + [8]) = (int_64)-4157658851551739904
	*(($3 + [76])) = [0]
	$1 = ($2 + [16])
	*((($3 + [40]) + [24])) = $1
	*(($3 + [60])) = $1
	*($3 + [56]) = $2
	*($3 + [68 align=4]) = (int_64)0
	CALL $51(($3 + [68]), [24])
	$5 = ($3 + [72])
	$2 = *($5)
	$1 = *($3 + [68])
	*($3 + [84]) = $1
	*($3 + [80]) = $1
	*($3 + [88]) = $2
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = ($3 + [8])
	CALL $52(($3 + [104]), ($3 + [96]))
	CALL $53(($3 + [40]))
	$2 = *($3 + [68])
	if ( ($2 == 0) ){ goto $label$6 }
	*($5) = $2
	CALL $10($2)
	
.LABEL $label$6
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($3 + [60])) = $2
	CALL $10($2)
	
.LABEL $label$7
	$global$0 = ($3 + [112])
}

void .FUNC $107 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [32]), $5, [8])
	*($3) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	$7 = *($3)
	*(($3 + [24])) = $4
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [24])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $81($3, *($3 + [40]), *($3 + [32]), $7)
	$global$0 = ($3 + [48])
}

void .FUNC $106 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	CALL memcpy(($3 + [80]), $5, [8])
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy(($3 + [64]), $5, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $5, [8])
	*(($6 = (($3 + [64]) + [8]))) = *($3 + [32])
	*((($3 + [32]) + [24])) = $4
	$7 = *($6)
	*((($3 + [16]) + [8])) = $7
	*(($3 + [8])) = $7
	*($3 + [48]) = $2
	*(($3 + [52])) = ($2 + [32])
	*($3 + [40]) = $1
	*($3 + [32]) = $0
	$0 = *($3 + [64])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $78(($3 + [32]), *($3 + [88]), *($3 + [80]), $3)
	$global$0 = ($3 + [96])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $23 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $18([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([9794])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [12]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9472])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$7 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[1]) ){ goto $label$10 }
	CALL eosio_assert([0], [9472])
	$1 = *(($0 + [4]))
	
.LABEL $label$10
	CALL memcpy($1, $4, [2])
	*(($0 = ($0 + [4]))) = (*($0) + [2])
	$global$0 = ($2 + [16])
}

void .FUNC $69 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_64 $10
	$8 = ($global$0 - [224])
	$global$0 = $8
	*($8 + [144]) = $2
	*($8 + [152]) = $1
	*($8 + [136]) = $3
	*($8 + [134]) = $5
	*($8 + [132]) = $7
	*(($8 + [120])) = [0]
	*($8 + [104]) = (int_64)-1
	*($8 + [112]) = (int_64)0
	$3 = *($0)
	*($8 + [88]) = $3
	*($8 + [96]) = $3
	$2 = $1
	$7 = CALL db_find_i64($3, $3, (int_64)-3020372878530969600, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $66(($8 + [88]), $7)
	if ( ((int_32)*($7 + [16]) == (int_32)($8 + [88])) ){ goto $label$4 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$4
	$2 = *($8 + [152])
	if ( (CALL has_auth(*($7 + [8])) == 0) ){ goto $label$5 }
	$2 = *(($7 + [8]))
	if ( (CALL is_account(*($8 + [144])) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$1 = *($8 + [152])
	
.LABEL $label$3
	CALL require_auth($1)
	if ( CALL is_account(*($8 + [144])) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8514])
	
.LABEL $label$1
	$1 = (uint_64)*($8 + [136]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$10 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [8545])
	
.LABEL $label$6
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$10 = *($4 + [8])
	$1 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $3
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$1 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$16 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_64)$10 == (int_64)*($8 + [136])) ){ goto $label$11 }
	
.LABEL $label$12
	CALL eosio_assert([0], [8565])
	
.LABEL $label$11
	if ( ((uint_64)((int_64)*($6) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$21 }
	$10 = *($6 + [8])
	$1 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $3
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	$1 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$25 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$22 }
	
.LABEL $label$23
	if ( ((int_64)$10 != (int_64)*($8 + [136])) ){ goto $label$21 }
	$7 = [10001]
	if ( ((uint_32)*($8 + [134]) >= (uint_32)[10001]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL eosio_assert([0], [8594])
	$7 = [10001]
	if ( (*($8 + [134]) <= [10001]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], [8621])
	if ( ((uint_32)*($8 + [132]) >= (uint_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( (*($8 + [132]) <= $7) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert([0], [8647])
	
.LABEL $label$17
	*(($8 + [80])) = [0]
	*($8 + [64]) = (int_64)-1
	*($8 + [72]) = (int_64)0
	*($8 + [84]) = [0]
	$1 = *($0)
	*($8 + [48]) = $1
	*($8 + [56]) = $1
	*($8 + [40]) = ($8 + [48])
	CALL $70($8, ($8 + [152]), ($8 + [144]), ($8 + [136]))
	CALL $71(($8 + [216]), ($8 + [40]), $8)
	$7 = *($8 + [220])
	if ( ($7 == 0) ){ goto $label$28 }
	CALL $70(($8 + [176]), ($7 + [8]), ($7 + [16]), ($7 + [24]))
	if ( ((int_64)(((int_64)((int_64)*($8) ^ (int_64)*($8 + [176])) | (int_64)((int_64)*($8 + [8]) ^ (int_64)*($8 + [184]))) == 0) == 0) ){ goto $label$28 }
	if ( ((int_64)(((int_64)((int_64)*($8 + [16]) ^ (int_64)*($8 + [192])) | (int_64)((int_64)*(($8 + [24])) ^ (int_64)*((($8 + [176]) + [24])))) == 0) == 0) ){ goto $label$28 }
	$7 = *($8 + [220])
	if ( ($7 == 0) ){ goto $label$28 }
	*($8 + [176]) = $4
	*($8 + [184]) = $6
	*($8 + [180]) = ($8 + [134])
	*($8 + [188]) = ($8 + [132])
	CALL $72(*($8 + [40]), $7, ($8 + [176]))
	$9 = *($8 + [72])
	if ( $9 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	*($8 + [192]) = $4
	*($8 + [200]) = $6
	*($8 + [180]) = ($8 + [152])
	*($8 + [176]) = ($8 + [48])
	*($8 + [184]) = ($8 + [144])
	*($8 + [188]) = ($8 + [136])
	*($8 + [196]) = ($8 + [134])
	*($8 + [204]) = ($8 + [132])
	*($8 + [216]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($8 + [48])) ){ goto $label$29 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$29
	*($8 + [4]) = ($8 + [176])
	*($8) = ($8 + [48])
	*($8 + [8]) = ($8 + [216])
	*(($7 = CALL $8([96])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [56]) = (int_64)0
	*($7 + [64]) = (int_64)0
	*($7 + [76]) = ($8 + [48])
	CALL $73($8, $7)
	*($8 + [168]) = $7
	$1 = *($7)
	*($8) = $1
	$9 = *($7 + [80])
	*($8 + [164]) = $9
	$4 = ($8 + [76])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($8 + [80]))) ){ goto $label$32 }
	*($5 + [8]) = $1
	*($5 + [16]) = $9
	*($8 + [168]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	$7 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( $7 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $74(($8 + [72]), ($8 + [168]), $8, ($8 + [164]))
	$7 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL $10($7)
	
.LABEL $label$30
	$9 = *($8 + [72])
	if ( ($9 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$4 = ($8 + [76])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$34 }
	
.LOOP $label$35:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$36 }
	CALL $10($5)
	
.LABEL $label$36
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$35 }
	$7 = *(($8 + [72]))
	goto $label$33 
	
.LABEL $label$34
	$7 = $9
	
.LABEL $label$33
	*($4) = $9
	CALL $10($7)
	
.LABEL $label$26
	$9 = *($8 + [112])
	if ( ($9 == 0) ){ goto $label$37 }
	$4 = ($8 + [116])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	CALL $10($5)
	
.LABEL $label$41
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($8 + [112]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $9
	
.LABEL $label$38
	*($4) = $9
	CALL $10($7)
	
.LABEL $label$37
	$global$0 = ($8 + [224])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $108 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [96]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	CALL memcpy(($3 + [96]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	$7 = *($3 + [40])
	*($3 + [88]) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$8
	CALL memcpy(($3 + [88]), $5, [8])
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	$5 = ($2 + [32])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$9 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$9
	$4 = ($2 + $4)
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [40])
	if ( ((int_32)$6 != (int_32)[40]) ){ goto $label$10 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$10
	CALL memcpy(($3 + [40]), $5, [8])
	*(($6 = (($3 + [72]) + [8]))) = *($3 + [40])
	*(($3 + [64])) = $4
	$8 = *($6)
	*((($3 + [24]) + [8])) = $8
	*((($3 + [8]) + [8])) = $8
	*($3 + [56]) = $2
	*(($3 + [60])) = ($2 + [48])
	*($3 + [48]) = $1
	*($3 + [40]) = $0
	$0 = *($3 + [72])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $85(($3 + [40]), *($3 + [104]), *($3 + [96]), $7, *($3 + [88]), ($3 + [8]))
	$global$0 = ($3 + [112])
}

void .FUNC $65 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [40]) = $2
	if ( CALL is_account($2) ){ goto $label$1 }
	CALL eosio_assert([0], [8486])
	
.LABEL $label$1
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$2 = *($0)
	*($3) = $2
	*($3 + [8]) = $2
	$0 = CALL db_find_i64($2, $2, (int_64)-3020372878530969600, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL $66($3, $0)
	if ( ((int_32)*($0 + [16]) == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$5
	if ( CALL has_auth((int_64)-2067973376675373776) ){ goto $label$6 }
	if ( CALL has_auth($1) ){ goto $label$6 }
	CALL require_auth(*($0 + [8]))
	
.LABEL $label$6
	*($3 + [64]) = ($3 + [40])
	CALL $67($3, $0, ($3 + [64]))
	$4 = *($3 + [24])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( CALL has_auth((int_64)-2067973376675373776) ){ goto $label$7 }
	CALL require_auth($1)
	
.LABEL $label$7
	if ( ((int_64)CALL current_receiver() == (int_64)*($3)) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$8
	*(($0 = CALL $8([32])) + [16]) = $3
	*($0) = $1
	*($0 + [8]) = *($3 + [40])
	CALL memcpy(($3 + [64]), $0, [8])
	CALL memcpy((($3 + [64]) | [8]), ($0 + [8]), [8])
	$2 = *($0)
	$4 = CALL db_store_i64(*(($3 + [8])), (int_64)-3020372878530969600, $1, $2, ($3 + [64]), [16])
	*($0 + [20]) = $4
	$5 = ($3 + [16])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($3 + [56]) = $0
	$2 = *($0)
	*($3 + [64]) = $2
	*($3 + [52]) = $4
	$6 = ($3 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [32]))) ){ goto $label$12 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($3 + [56]) = [0]
	*($5) = $0
	*($6) = ($5 + [24])
	$0 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $68(($3 + [24]), ($3 + [56]), ($3 + [64]), ($3 + [52]))
	$0 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $10($0)
	
.LABEL $label$10
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($3 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	CALL $10($5)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($3 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $4
	
.LABEL $label$13
	*($6) = $4
	CALL $10($0)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = *($2)
	if ( ((int_64)$5 == (int_64)4255553862556651200) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)6138663591592764928) ){ goto $label$1 }
	$5 = *($1 + [8])
	*($4 + [8]) = (int_64)5455799419163236352
	*($4) = $5
	*($4 + [16]) = (int_64)4921564679018381312
	*(($2 = CALL $8([16]))) = $5
	*($2 + [8]) = (int_64)-4157658851551739904
	*(($4 + [44])) = [0]
	$1 = ($2 + [16])
	*(($4 + [32])) = $1
	*(($4 + [28])) = $1
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)0
	CALL $51(($4 + [36]), [8])
	$2 = *($4 + [36])
	if ( ((int_32)(*(($4 + [40])) - $2) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9472])
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	CALL $53(($4 + [8]))
	$2 = *($4 + [36])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($4 + [40])) = $2
	CALL $10($2)
	
.LABEL $label$4
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	*(($4 + [28])) = $2
	CALL $10($2)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$5 = *($1 + [8])
	*($4 + [8]) = (int_64)5455799419163236352
	*($4) = $5
	*($4 + [16]) = (int_64)4921564805719916544
	*(($2 = CALL $8([16]))) = $5
	*($2 + [8]) = (int_64)-4157658851551739904
	*(($4 + [44])) = [0]
	$1 = ($2 + [16])
	*(($4 + [32])) = $1
	*(($4 + [28])) = $1
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)0
	CALL $51(($4 + [36]), [8])
	$2 = *($4 + [36])
	if ( ((int_32)(*(($4 + [40])) - $2) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9472])
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	CALL $53(($4 + [8]))
	$2 = *($4 + [36])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [40])) = $2
	CALL $10($2)
	
.LABEL $label$6
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	*(($4 + [28])) = $2
	CALL $10($2)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = $global$0
	$4 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10027])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10073])
	
.LABEL $label$2
	*($1 + [8]) = *(*($2))
	$5 = *($1)
	$3 = $3
	$2 = ($3 + [-16])
	$global$0 = $2
	CALL memcpy($2, $1, [8])
	CALL memcpy(($3 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), (int_64)0, $2, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $4
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $68(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $3($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $10($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $130(($3 + [32]), ($3 + [24]))
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $131(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = [-1]
	$4 = *($2 + [48])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [9946])
	$3 = [-1]
	$2 = *(($0 + [4]))
	$4 = *($2 + [48])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3102536759825661952, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 <= (int_32)$3) ){ goto $label$7 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$8:
	$4 = ($2 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$6) ){ goto $label$6 }
	$2 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	if ( ((int_32)*($3 + [40]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [9863])
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $61($7, CALL $fimport$36(*($7), *($7 + [8]), (int_64)-3102536759825661952, $6))
	if ( ((int_32)*($3 + [40]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$4
	*(($0 + [4])) = $3
	*(($3 + [48])) = $5
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($1 + [8])
	*(($3 + [16])) = *(($2 + [8]))
	*($3) = $4
	*($3 + [24]) = (int_64)5455799419163236352
	*($3 + [32]) = (int_64)-4157661383434960896
	*($3 + [8]) = *($2)
	*(($2 = CALL $8([16]))) = $4
	*($2 + [8]) = (int_64)-4157658851551739904
	*(($3 + [60])) = [0]
	$1 = ($2 + [16])
	*((($3 + [24]) + [24])) = $1
	*(($3 + [44])) = $1
	*($3 + [40]) = $2
	*($3 + [52 align=4]) = (int_64)0
	CALL $51(($3 + [52]), [24])
	$5 = ($3 + [56])
	$2 = *($5)
	$1 = *($3 + [52])
	*($3 + [68]) = $1
	*($3 + [64]) = $1
	*($3 + [72]) = $2
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $52(($3 + [88]), ($3 + [80]))
	CALL $53(($3 + [24]))
	$2 = *($3 + [52])
	if ( ($2 == 0) ){ goto $label$1 }
	*($5) = $2
	CALL $10($2)
	
.LABEL $label$1
	$2 = *($3 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [44])) = $2
	CALL $10($2)
	
.LABEL $label$2
	$global$0 = ($3 + [96])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($1 + [8])
	*(($3 + [16])) = *(($2 + [8]))
	*($3) = $4
	*($3 + [24]) = (int_64)5455799419163236352
	*($3 + [32]) = (int_64)-3102536759825661952
	*($3 + [8]) = *($2)
	*(($2 = CALL $8([16]))) = $4
	*($2 + [8]) = (int_64)-4157658851551739904
	*(($3 + [60])) = [0]
	$1 = ($2 + [16])
	*((($3 + [24]) + [24])) = $1
	*(($3 + [44])) = $1
	*($3 + [40]) = $2
	*($3 + [52 align=4]) = (int_64)0
	CALL $51(($3 + [52]), [24])
	$5 = ($3 + [56])
	$2 = *($5)
	$1 = *($3 + [52])
	*($3 + [68]) = $1
	*($3 + [64]) = $1
	*($3 + [72]) = $2
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $52(($3 + [88]), ($3 + [80]))
	CALL $53(($3 + [24]))
	$2 = *($3 + [52])
	if ( ($2 == 0) ){ goto $label$1 }
	*($5) = $2
	CALL $10($2)
	
.LABEL $label$1
	$2 = *($3 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [44])) = $2
	CALL $10($2)
	
.LABEL $label$2
	$global$0 = ($3 + [96])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($1 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [24])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$1 = *($1)
	*($2 + [8]) = (int_64)0
	$4 = *($1 + [4])
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $4, [8])
	*($5 + [16]) = *($2 + [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $65($3, *($3 + [40]), *($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($4 + [16]) = *($2 + [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$5 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$5 = ($4 + [32])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$0 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $0, [8])
	$5 = (*($0) + [8])
	*(($0 = ($1 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($1 + [8])) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	$5 = *($0)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $5, [8])
	*(($4 + [40])) = *($2 + [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [32]), $5, [8])
	*($3) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	$7 = *($3)
	*(($3 + [24])) = $4
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [24])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $75($3, *($3 + [40]), *($3 + [32]), $7)
	$global$0 = ($3 + [48])
}

void .FUNC $104 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [152]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$5
	CALL memcpy(($3 + [152]), $2, [8])
	*($3 + [144]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$6
	CALL memcpy(($3 + [144]), $5, [8])
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	CALL memcpy(($3 + [64]), $5, [8])
	$7 = *($3 + [64])
	*($3 + [136]) = (int_64)0
	*($3 + [128]) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$8
	CALL memcpy(($3 + [128]), $5, [8])
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [32])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$9 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$9
	CALL memcpy(($3 + [64]), $5, [8])
	*((($3 + [128]) + [8])) = *($3 + [64])
	$6 = ($2 + [40])
	$5 = ($4 & [-2])
	if ( ((int_32)$5 != (int_32)[40]) ){ goto $label$10 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$10
	CALL memcpy(($3 + [126]), $6, [2])
	*($3 + [112]) = (int_64)0
	*($3 + [104]) = (int_64)0
	$6 = ($2 + [42])
	if ( ((uint_32)($4 + [-42]) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$11
	CALL memcpy(($3 + [104]), $6, [8])
	*($3 + [64]) = (int_64)0
	$6 = ($2 + [50])
	if ( ((uint_32)($4 + [-50]) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$12
	$4 = ($2 + $4)
	CALL memcpy(($3 + [64]), $6, [8])
	*((($3 + [104]) + [8])) = *($3 + [64])
	$6 = ($2 + [58])
	if ( ((int_32)$5 != (int_32)[58]) ){ goto $label$13 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$13
	CALL memcpy(($3 + [102]), $6, [2])
	*(($3 + [88])) = $4
	$8 = *((($3 + [128]) + [8]))
	*((($3 + [48]) + [8])) = $8
	*(($4 = (($3 + [32]) + [8]))) = *((($3 + [104]) + [8]))
	*($3 + [80]) = $2
	*(($3 + [84])) = ($2 + [60])
	*($3 + [72]) = $1
	*($3 + [64]) = $0
	$0 = *($3 + [128])
	*($3 + [48]) = $0
	*($3 + [32]) = *($3 + [104])
	$1 = *($3 + [152])
	$9 = *($3 + [144])
	$2 = *($3 + [126])
	$6 = *($3 + [102])
	*((($3 + [16]) + [8])) = $8
	*($3 + [16]) = $0
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $69(($3 + [64]), $1, $9, $7, ($3 + [16]), $2, $3, $6)
	$global$0 = ($3 + [160])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9472])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9472])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9472])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $137(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10027])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10073])
	
.LABEL $label$2
	$5 = ($1 + [8])
	$6 = *($5)
	$8 = ($1 + [24])
	$7 = ($1 + [16])
	CALL $70(($4 + [96]), $5, $7, $8)
	*((($4 + [16]) + [24])) = *($4 + [104])
	*(($4 + [48])) = *((($4 + [96]) + [16]))
	*((($4 + [16]) + [40])) = *((($4 + [96]) + [24]))
	*($4 + [16]) = $6
	*($4 + [32]) = *($4 + [96])
	$6 = *($1)
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [40]))) ){ goto $label$3 }
	CALL eosio_assert([0], [9392])
	
.LABEL $label$3
	$9 = ((int_64)*($1 + [32]) + (int_64)*($2))
	*($1 + [32]) = $9
	if ( ((int_64)$9 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$9 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9435])
	if ( ((int_64)*(($1 + [32])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9454])
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [10124])
	
.LABEL $label$4
	$2 = $3
	$3 = ($2 + [-80])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($2 + [-12])
	*($4 + [64]) = $4
	*($4 + [100]) = $5
	*($4 + [104]) = $7
	*($4 + [108]) = $8
	*($4 + [96]) = $1
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [56])
	*($4 + [124]) = ($1 + [72])
	CALL $135(($4 + [96]), ($4 + [64]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $3, [68])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($4 + [96]) = *(($1 + [8]))
	if ( (CALL $17(($4 + [16]), ($4 + [96]), [8]) == 0) ){ goto $label$10 }
	$3 = *($1 + [84])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$11 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4060968898812444672, ($4 + [64]), $6)
	*(($1 + [84])) = $3
	
.LABEL $label$11
	CALL db_idx64_update($3, (int_64)0, ($4 + [96]))
	
.LABEL $label$10
	CALL $70(($4 + [96]), $5, $7, $8)
	if ( (CALL $17(($4 + [32]), ($4 + [96]), [32]) == 0) ){ goto $label$12 }
	$5 = ($1 + [88])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$13 }
	*(($4 + [88])) = (int_64)0
	*(($4 + [80])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	$1 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-4060968898812444671, ($4 + [64]), [2], $6)
	*($5) = $1
	
.LABEL $label$13
	CALL db_idx256_update($1, (int_64)0, ($4 + [96]), [2])
	
.LABEL $label$12
	$global$0 = ($4 + [128])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9637])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9742])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9675])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9742])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$2 = $6
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$2 = $6
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $9 ){ goto $label$9 }
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_64)$7 > (int_64)0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8812])
	
.LABEL $label$4
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	if ( (*($4 + [4]) <= [257]) ){ goto $label$10 }
	CALL eosio_assert([0], [8829])
	
.LABEL $label$10
	if ( CALL is_account($1) ){ goto $label$11 }
	CALL eosio_assert([0], [8858])
	
.LABEL $label$11
	*($5 + [200]) = [0]
	*($5 + [192]) = (int_64)0
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$8 = CALL $1([8883])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [32]) = ($8 << [1])
	$9 = (($5 + [32]) | [1])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$10 = (($8 + [16]) & [-16])
	$9 = CALL $8($10)
	*($5 + [32]) = ($10 | [1])
	*($5 + [40]) = $9
	*($5 + [36]) = $8
	
.LABEL $label$13
	CALL memcpy($9, [8883], $8)
	
.LABEL $label$12
	*(($9 + $8)) = [0]
	CALL $36($4, ($5 + [32]), ($5 + [192]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*($5 + [40]))
	
.LABEL $label$15
	$10 = *($5 + [192])
	if ( (((int_32)(*($5 + [196]) - $10) / (int_32)[12]) <= [2]) ){ goto $label$16 }
	$8 = *($10)
	$9 = CALL $1([8885])
	if ( ((int_32)$9 != (int_32)( *($10 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$17 }
	if ( CALL $32($10, [0], [-1], [8885], $9) ){ goto $label$17 }
	$8 = *($5 + [192])
	$9 = *($8 + [12])
	if ( ($9 & [1]) ){ goto $label$19 }
	$9 = uint_32($9 >> [1])
	$8 = (($8 + [12]) + [1])
	goto $label$18 
	
.LABEL $label$19
	$9 = *(($8 + [16]))
	$8 = *(($8 + [20]))
	
.LABEL $label$18
	*($5 + [180]) = $9
	*($5 + [176]) = $8
	*($5 + [8]) = *($5 + [176])
	$10 = CALL $87(($5 + [184]), ($5 + [8]))
	$9 = [0]
	*(($5 + [168])) = [0]
	*($5 + [152]) = (int_64)-1
	*($5 + [160]) = (int_64)0
	*($5 + [172]) = [0]
	$2 = *($0)
	*($5 + [136]) = $2
	*($5 + [144]) = $2
	*($5 + [128]) = ($5 + [136])
	*($5 + [16]) = *($0 + [8])
	CALL $70(($5 + [80]), $10, ($5 + [16]), ($3 + [8]))
	CALL $71(($5 + [208]), ($5 + [128]), ($5 + [80]))
	$8 = *($5 + [212])
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $70(($5 + [32]), ($8 + [8]), ($8 + [16]), ($8 + [24]))
	if ( ((int_64)(((int_64)((int_64)*($5 + [80]) ^ (int_64)*($5 + [32])) | (int_64)((int_64)*($5 + [88]) ^ (int_64)*($5 + [40]))) == 0) == 0) ){ goto $label$20 }
	if ( ((int_64)((int_64)((int_64)*($5 + [96]) ^ (int_64)*($5 + [48])) | (int_64)((int_64)*((($5 + [80]) + [24])) ^ (int_64)*((($5 + [32]) + [24])))) != (int_64)0) ){ goto $label$20 }
	$9 = *($5 + [212])
	
.LABEL $label$20
	if ( ($9 == 0) ){ goto $label$21 }
	*($5 + [32]) = $3
	CALL $88(*($5 + [128]), $9, ($5 + [32]))
	$2 = *(($0 + [8]))
	$1 = *($0)
	*((($5 + [16]) + [8])) = [0]
	*($5 + [16]) = (int_64)0
	$8 = CALL $1([8405])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [16]) = ($8 << [1])
	$9 = (($5 + [16]) | [1])
	if ( $8 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$4 = (($8 + [16]) & [-16])
	$9 = CALL $8($4)
	*($5 + [16]) = ($4 | [1])
	*($5 + [24]) = $9
	*($5 + [20]) = $8
	
.LABEL $label$23
	CALL memcpy($9, [8405], $8)
	
.LABEL $label$22
	*(($9 + $8)) = [0]
	*((($5 + [32]) + [24])) = *(($3 + [8]))
	$8 = (($5 + [16]) + [8])
	*(($5 + [72])) = *($8)
	*($8) = [0]
	*($5 + [80]) = $2
	*($5 + [88]) = (int_64)-3617168760277827584
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($10)
	*($5 + [48]) = *($3)
	*($5 + [64]) = *($5 + [16])
	*($5 + [16]) = (int_64)0
	*(($8 = CALL $8([16]))) = $1
	*($8 + [8]) = (int_64)3617214756542218240
	*((($5 + [80]) + [36])) = [0]
	$9 = ($8 + [16])
	*((($5 + [80]) + [24])) = $9
	*(($5 + [100])) = $9
	*($5 + [96]) = $8
	*($5 + [108 align=4]) = (int_64)0
	$8 = *($5 + [64])
	$9 = ( *((($5 + [32]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($9 + [32])
	$2 = (CASTING uint_64)(uint_32 $9)
	$9 = ($5 + [108])
	
.LOOP $label$25:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$25 }
	if ( ($8 == 0) ){ goto $label$27 }
	CALL $51($9, $8)
	$9 = *(($5 + [112]))
	$8 = *(($5 + [108]))
	goto $label$26 
	
.LABEL $label$27
	$9 = [0]
	$8 = [0]
	
.LABEL $label$26
	*($5 + [212]) = $8
	*($5 + [208]) = $8
	*($5 + [216]) = $9
	*($5 + [224]) = ($5 + [208])
	*($5 + [232]) = ($5 + [32])
	CALL $89(($5 + [232]), ($5 + [224]))
	CALL $53(($5 + [80]))
	$8 = *($5 + [108])
	if ( ($8 == 0) ){ goto $label$28 }
	*(($5 + [112])) = $8
	CALL $10($8)
	
.LABEL $label$28
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$29 }
	*(($5 + [100])) = $8
	CALL $10($8)
	
.LABEL $label$29
	if ( ((*(($5 + [64])) & [1]) == 0) ){ goto $label$30 }
	CALL $10(*(($5 + [72])))
	
.LABEL $label$30
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*(($5 + [24])))
	
.LABEL $label$21
	$10 = *($5 + [160])
	if ( ($10 == 0) ){ goto $label$17 }
	$4 = ($5 + [164])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$32 }
	
.LOOP $label$33:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$34 }
	CALL $10($9)
	
.LABEL $label$34
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$33 }
	$8 = *(($5 + [160]))
	goto $label$31 
	
.LABEL $label$32
	$8 = $10
	
.LABEL $label$31
	*($4) = $10
	CALL $10($8)
	
.LABEL $label$17
	$10 = *($5 + [192])
	
.LABEL $label$16
	if ( ($10 == 0) ){ goto $label$3 }
	$9 = *($5 + [196])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$38 }
	CALL $10(*(($9 + [-4])))
	
.LABEL $label$38
	$9 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$37 }
	$8 = *($5 + [192])
	goto $label$35 
	
.LABEL $label$36
	$8 = $10
	
.LABEL $label$35
	*($5 + [196]) = $10
	CALL $10($8)
	
.LABEL $label$3
	$global$0 = ($5 + [240])
	return (unreachable)
	
.LABEL $label$2
	CALL $23(($5 + [32]))
	
.LABEL $label$1
	CALL $23(($5 + [16]))
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [224])
	$global$0 = $6
	*($6 + [160]) = $2
	*($6 + [168]) = $1
	*($6 + [152]) = $3
	*($6 + [144]) = $4
	*(($6 + [136])) = [0]
	*($6 + [120]) = (int_64)-1
	*($6 + [128]) = (int_64)0
	$4 = *($0)
	*($6 + [104]) = $4
	*($6 + [112]) = $4
	$7 = CALL db_find_i64($4, $4, (int_64)-3020372878530969600, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $66(($6 + [104]), $7)
	if ( ((int_32)*($7 + [16]) == (int_32)($6 + [104])) ){ goto $label$3 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$3
	if ( CALL has_auth(*($7 + [8])) ){ goto $label$1 }
	$1 = *($6 + [168])
	
.LABEL $label$2
	CALL require_auth($1)
	
.LABEL $label$1
	*(($6 + [96])) = [0]
	*($6 + [80]) = (int_64)-1
	*($6 + [88]) = (int_64)0
	*($6 + [100]) = [0]
	$1 = *($0)
	*($6 + [64]) = $1
	*($6 + [72]) = $1
	*($6 + [56]) = ($6 + [64])
	CALL $70(($6 + [16]), ($6 + [168]), ($6 + [160]), ($6 + [152]))
	CALL $71(($6 + [216]), ($6 + [56]), ($6 + [16]))
	$0 = *($6 + [220])
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $70(($6 + [176]), ($0 + [8]), ($0 + [16]), ($0 + [24]))
	if ( ((int_64)(((int_64)((int_64)*($6 + [16]) ^ (int_64)*($6 + [176])) | (int_64)((int_64)*($6 + [24]) ^ (int_64)*($6 + [184]))) == 0) == 0) ){ goto $label$5 }
	if ( ((int_64)(((int_64)((int_64)*($6 + [32]) ^ (int_64)*($6 + [192])) | (int_64)((int_64)*((($6 + [16]) + [24])) ^ (int_64)*((($6 + [176]) + [24])))) == 0) == 0) ){ goto $label$5 }
	$8 = *($6 + [220])
	if ( $8 ){ goto $label$4 }
	
.LABEL $label$5
	$8 = [0]
	CALL eosio_assert([0], [8695])
	
.LABEL $label$4
	*(($0 = ($6 + [8]))) = *(($5 + [8]))
	*($6) = *($5)
	*((($6 + [176]) + [8])) = *($0)
	*($6 + [176]) = *($6)
	$0 = [8714]
	$7 = *([8714])
	if ( ($7 == 0) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$7 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$6 }
	goto $label$8 
	
.LABEL $label$7
	CALL $48(($6 + [16]), ($6 + [176]))
	$7 = *($6 + [16])
	$9 = ($7 & [1])
	CALL prints_l(( *($6 + [24]) ? (($6 + [16]) | [1]) : $9 ), ( *($6 + [20]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($6 + [24])))
	
.LABEL $label$9
	CALL prints(($0 + [1]))
	
.LABEL $label$6
	$0 = CALL $40($8)
	CALL void $0((int_32 $8), (int_32 ($6 + [144])), (int_32 $5), (int_32 *(*($0) + [16])))
	$5 = *($6 + [88])
	if ( ($5 == 0) ){ goto $label$10 }
	$8 = ($6 + [92])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $10($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($6 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $5
	
.LABEL $label$11
	*($8) = $5
	CALL $10($0)
	
.LABEL $label$10
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$15 }
	$8 = ($6 + [132])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	CALL $10($7)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($6 + [128]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $5
	
.LABEL $label$16
	*($8) = $5
	CALL $10($0)
	
.LABEL $label$15
	$global$0 = ($6 + [224])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($4 = ($3 + [8]))) = *(($2 + [8]))
	*($3) = *($2)
	*((($3 + [16]) + [8])) = *($4)
	*($3 + [16]) = *($3)
	$4 = [8801]
	$5 = *([8801])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL $48(($3 + [32]), ($3 + [16]))
	$5 = *($3 + [32])
	$6 = ($5 & [1])
	CALL prints_l(( *($3 + [40]) ? (($3 + [32]) | [1]) : $6 ), ( *($3 + [36]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*(($3 + [40])))
	
.LABEL $label$4
	CALL prints(($4 + [1]))
	
.LABEL $label$1
	$4 = CALL $40($1)
	CALL void $4((int_32 $1), (int_32 $2), (int_32 *(*($4) + [12])))
	$global$0 = ($3 + [48])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($4 = ($3 + [8]))) = *(($2 + [8]))
	*($3) = *($2)
	*((($3 + [16]) + [8])) = *($4)
	*($3 + [16]) = *($3)
	$4 = [8788]
	$5 = *([8788])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL $48(($3 + [32]), ($3 + [16]))
	$5 = *($3 + [32])
	$6 = ($5 & [1])
	CALL prints_l(( *($3 + [40]) ? (($3 + [32]) | [1]) : $6 ), ( *($3 + [36]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*(($3 + [40])))
	
.LABEL $label$4
	CALL prints(($4 + [1]))
	
.LABEL $label$1
	$4 = CALL $40($1)
	CALL void $4((int_32 $1), (int_32 $2), (int_32 *(*($4) + [8])))
	$global$0 = ($3 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2 + [144]) = (int_64)0
	*($2 + [128]) = (int_64)0
	*($2 + [112]) = (int_64)0
	*($2 + [96]) = (int_64)0
	$3 = *($1 + [24])
	*($2 + [104]) = $3
	*($2 + [120]) = $3
	*($2 + [136]) = $3
	*($2 + [152]) = $3
	$4 = CALL $40($1)
	CALL void $4((int_32 $1), (int_32 ($2 + [144])), (int_32 ($2 + [128])), (int_32 ($2 + [112])), (int_32 ($2 + [96])), (int_32 *(*($4))))
	$5 = *($2 + [144])
	$3 = *($2 + [152])
	if ( ((int_64)*($2 + [136]) == (int_64)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9392])
	
.LABEL $label$1
	$5 = ((int_64)*($2 + [128]) + (int_64)$5)
	if ( ((int_64)$5 <= (int_64)-4611686018427387904) ){ goto $label$3 }
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9435])
	
.LABEL $label$2
	if ( ((int_64)*(($2 + [120])) == (int_64)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [9392])
	
.LABEL $label$4
	$5 = ((int_64)*($2 + [112]) + (int_64)$5)
	if ( ((int_64)$5 <= (int_64)-4611686018427387904) ){ goto $label$6 }
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [9435])
	
.LABEL $label$5
	if ( ((int_64)*(($2 + [104])) == (int_64)$3) ){ goto $label$7 }
	CALL eosio_assert([0], [9392])
	
.LABEL $label$7
	$6 = ((int_64)*($2 + [96]) + (int_64)$5)
	if ( ((int_64)$6 <= (int_64)-4611686018427387904) ){ goto $label$9 }
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$8 }
	CALL eosio_assert([0], [9454])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [9435])
	
.LABEL $label$8
	CALL __multi3(($2 + [16]), *($1 + [48]), (int_64)0, $6, (int_64)$6 >> (int_64)63))
	$5 = *(($2 + [24]))
	$7 = *($2 + [16])
	if ( (( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ) == 0) ){ goto $label$11 }
	if ( ( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ) ){ goto $label$10 }
	CALL eosio_assert([0], [9612])
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [9588])
	
.LABEL $label$10
	$5 = ((int_64)$7 / (int_64)10000)
	*($2 + [80]) = $5
	$4 = ($1 + [32])
	$7 = *(($1 + [40]))
	*($2 + [88]) = $3
	if ( ((int_64)$3 == (int_64)$7) ){ goto $label$12 }
	CALL eosio_assert([0], [9517])
	
.LABEL $label$12
	$4 = ( ($2 + [80]) ? $4 : ((int_64)$5 > (int_64)*($4)) )
	*(($8 = (($2 + [80]) + [8]))) = *(($4 + [8]))
	*($2 + [80]) = *($4)
	$9 = *($2 + [80])
	$5 = *($8)
	if ( ((int_64)*((($2 + [144]) + [8])) == (int_64)$5) ){ goto $label$13 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$13
	$7 = (int_64)
	if ( ((int_64)$7($9 - *($2 + [144]))) <= (int_64)-4611686018427387904) ){ goto $label$15 }
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$14 }
	CALL eosio_assert([0], [9371])
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [9349])
	
.LABEL $label$14
	if ( ((int_64)*(($2 + [120])) == (int_64)$5) ){ goto $label$16 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$16
	$7 = (int_64)
	if ( ((int_64)$7($7 - *($2 + [112]))) <= (int_64)-4611686018427387904) ){ goto $label$18 }
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$17 }
	CALL eosio_assert([0], [9371])
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert([0], [9349])
	
.LABEL $label$17
	*($2 + [64]) = $7
	*($2 + [72]) = $5
	if ( ((int_64)*(($2 + [104])) == (int_64)$5) ){ goto $label$19 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$19
	$7 = (int_64)
	*($2 + [64]) = $7($7 - *($2 + [96])))
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$21 }
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$20 }
	CALL eosio_assert([0], [9371])
	goto $label$20 
	
.LABEL $label$21
	CALL eosio_assert([0], [9349])
	
.LABEL $label$20
	$4 = (($2 + [64]) + [8])
	if ( ((int_64)*($4) == (int_64)*((($2 + [128]) + [8]))) ){ goto $label$22 }
	CALL eosio_assert([0], [9517])
	
.LABEL $label$22
	$8 = ( ($2 + [64]) ? ($2 + [128]) : ((int_64)*($2 + [64]) < (int_64)*($2 + [128])) )
	*($4) = *(($8 + [8]))
	$7 = *($8)
	*($2 + [64]) = $7
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$23 }
	CALL $83($2, $1, ($2 + [64]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$23
	CALL __multi3($2, *($1 + [72]), (int_64)0, $6, (int_64)$6 >> (int_64)63))
	$6 = *(($2 + [8]))
	$7 = *($2)
	if ( (( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ) == 0) ){ goto $label$25 }
	if ( ( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ) ){ goto $label$24 }
	CALL eosio_assert([0], [9612])
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert([0], [9588])
	
.LABEL $label$24
	*($2 + [56]) = $3
	$7 = ((int_64)$7 / (int_64)10000)
	*($2 + [48]) = $7
	$6 = *($1 + [56])
	if ( ((int_64)$6 < (int_64)0) ){ goto $label$27 }
	$4 = ($1 + [56])
	if ( ((int_64)$3 == (int_64)*(($1 + [64]))) ){ goto $label$28 }
	CALL eosio_assert([0], [9517])
	$6 = *($4)
	
.LABEL $label$28
	$4 = ( ($2 + [48]) ? $4 : ((int_64)$7 < (int_64)$6) )
	goto $label$26 
	
.LABEL $label$27
	$4 = ($2 + [48])
	
.LABEL $label$26
	*((($2 + [48]) + [8])) = *(($4 + [8]))
	*($2 + [48]) = *($4)
	$3 = *($2 + [96])
	if ( ((int_64)$5 == (int_64)*((($2 + [96]) + [8]))) ){ goto $label$29 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$29
	$3 = (int_64)
	if ( ((int_64)$3($3 - $9)) <= (int_64)-4611686018427387904) ){ goto $label$34 }
	if ( ((int_64)$3 >= (int_64)4611686018427387904) ){ goto $label$32 }
	if ( ((int_64)$3 >= (int_64)1) ){ goto $label$31 }
	goto $label$33 
	
.LABEL $label$34
	CALL eosio_assert([0], [9349])
	
.LABEL $label$33
	$3 = *($2 + [144])
	$6 = *((($2 + [144]) + [8]))
	if ( ((int_64)*((($2 + [96]) + [8])) == (int_64)$6) ){ goto $label$35 }
	CALL eosio_assert([0], [9392])
	
.LABEL $label$35
	$3 = ((int_64)*($2 + [96]) + (int_64)$3)
	if ( ((int_64)$3 <= (int_64)-4611686018427387904) ){ goto $label$39 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$38 }
	CALL eosio_assert([0], [9454])
	*($2 + [32]) = $3
	*($2 + [40]) = $6
	if ( ((int_64)$5 != (int_64)$6) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	CALL eosio_assert([0], [9435])
	
.LABEL $label$38
	*($2 + [32]) = $3
	*($2 + [40]) = $6
	if ( ((int_64)$5 == (int_64)$6) ){ goto $label$36 }
	
.LABEL $label$37
	CALL eosio_assert([0], [9301])
	
.LABEL $label$36
	$3 = (int_64)
	*($2 + [32]) = $3($3 - $9))
	if ( ((int_64)$3 <= (int_64)-4611686018427387904) ){ goto $label$40 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$30 }
	CALL eosio_assert([0], [9371])
	goto $label$30 
	
.LABEL $label$40
	CALL eosio_assert([0], [9349])
	goto $label$30 
	
.LABEL $label$32
	CALL eosio_assert([0], [9371])
	
.LABEL $label$31
	*((($2 + [32]) + [8])) = *((($2 + [144]) + [8]))
	*($2 + [32]) = *($2 + [144])
	
.LABEL $label$30
	$4 = (($2 + [32]) + [8])
	if ( ((int_64)*($4) == (int_64)*((($2 + [144]) + [8]))) ){ goto $label$41 }
	CALL eosio_assert([0], [9517])
	
.LABEL $label$41
	$8 = ( ($2 + [32]) ? ($2 + [144]) : ((int_64)*($2 + [32]) < (int_64)*($2 + [144])) )
	*($4) = *(($8 + [8]))
	*($2 + [32]) = *($8)
	$5 = *($2 + [48])
	$3 = *((($2 + [48]) + [8]))
	if ( ((int_64)*((($2 + [128]) + [8])) == (int_64)$3) ){ goto $label$42 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$42
	$6 = (int_64)
	if ( ((int_64)$6($5 - *($2 + [128]))) <= (int_64)-4611686018427387904) ){ goto $label$44 }
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$43 }
	CALL eosio_assert([0], [9371])
	goto $label$43 
	
.LABEL $label$44
	CALL eosio_assert([0], [9349])
	
.LABEL $label$43
	if ( ((int_64)*(($2 + [120])) == (int_64)$3) ){ goto $label$45 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$45
	$6 = (int_64)
	if ( ((int_64)$6($6 - *($2 + [112]))) <= (int_64)-4611686018427387904) ){ goto $label$47 }
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$46 }
	CALL eosio_assert([0], [9371])
	goto $label$46 
	
.LABEL $label$47
	CALL eosio_assert([0], [9349])
	
.LABEL $label$46
	if ( ((int_64)*(($2 + [40])) != (int_64)$3) ){ goto $label$52 }
	$7 = *($2 + [32])
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	CALL eosio_assert([0], [9517])
	$7 = *($2 + [32])
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$50 }
	
.LABEL $label$51
	if ( ((int_64)*(($2 + [136])) == (int_64)$3) ){ goto $label$53 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$53
	$5 = (int_64)
	if ( ((int_64)$5($5 - *($2 + [128]))) <= (int_64)-4611686018427387904) ){ goto $label$55 }
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$54 }
	CALL eosio_assert([0], [9371])
	goto $label$54 
	
.LABEL $label$55
	CALL eosio_assert([0], [9349])
	
.LABEL $label$54
	if ( ((int_64)*(($2 + [120])) == (int_64)$3) ){ goto $label$56 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$56
	$5 = (int_64)
	if ( ((int_64)$5($5 - *($2 + [112]))) <= (int_64)-4611686018427387904) ){ goto $label$58 }
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$57 }
	CALL eosio_assert([0], [9371])
	goto $label$57 
	
.LABEL $label$58
	CALL eosio_assert([0], [9349])
	
.LABEL $label$57
	*(($2 + [40])) = $3
	*($2 + [32]) = $5
	if ( ((int_64)$5 >= (int_64)1) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$48 }
	
.LABEL $label$49
	CALL $84($2, $1, ($2 + [32]))
	
.LABEL $label$48
	$global$0 = ($2 + [160])
}

void .FUNC $81 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [192])
	$global$0 = $4
	*($4 + [128]) = $2
	*($4 + [136]) = $1
	*($4 + [120]) = $3
	*(($4 + [112])) = [0]
	*($4 + [96]) = (int_64)-1
	*($4 + [104]) = (int_64)0
	$3 = *($0)
	*($4 + [80]) = $3
	*($4 + [88]) = $3
	$5 = CALL db_find_i64($3, $3, (int_64)-3020372878530969600, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $66(($4 + [80]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [80])) ){ goto $label$3 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$3
	if ( CALL has_auth(*($5 + [8])) ){ goto $label$1 }
	$1 = *($4 + [136])
	
.LABEL $label$2
	CALL require_auth($1)
	
.LABEL $label$1
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	$1 = *($0)
	*($4 + [40]) = $1
	*($4 + [48]) = $1
	*($4 + [32]) = ($4 + [40])
	CALL $70($4, ($4 + [136]), ($4 + [128]), ($4 + [120]))
	CALL $71(($4 + [184]), ($4 + [32]), $4)
	$5 = *($4 + [188])
	if ( ($5 == 0) ){ goto $label$10 }
	CALL $70(($4 + [144]), ($5 + [8]), ($5 + [16]), ($5 + [24]))
	if ( ((int_64)(((int_64)((int_64)*($4) ^ (int_64)*($4 + [144])) | (int_64)((int_64)*($4 + [8]) ^ (int_64)*($4 + [152]))) == 0) == 0) ){ goto $label$10 }
	if ( ((int_64)(((int_64)((int_64)*($4 + [16]) ^ (int_64)*($4 + [160])) | (int_64)((int_64)*(($4 + [24])) ^ (int_64)*((($4 + [144]) + [24])))) == 0) == 0) ){ goto $label$10 }
	$5 = *($4 + [188])
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((int_64)*($4 + [120]) != (int_64)*($5 + [24])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = [0]
	CALL eosio_assert([0], [8695])
	if ( ((int_64)*($4 + [120]) == (int_64)*([0] + [24])) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert([0], [8545])
	CALL $82($0, $5)
	$6 = *($4 + [64])
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $82($0, $5)
	$6 = *($4 + [64])
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($4 + [104])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = ($4 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	CALL $10($5)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($4 + [64]))
	*($7) = $6
	CALL $10($0)
	$6 = *($4 + [104])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$11
	*($7) = $6
	CALL $10($6)
	$6 = *($4 + [104])
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ($4 + [108])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $10($5)
	
.LABEL $label$17
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($4 + [104]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $6
	
.LABEL $label$14
	*($7) = $6
	CALL $10($0)
	$global$0 = ($4 + [192])
	return 
	
.LABEL $label$4
	$global$0 = ($4 + [192])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($4 = ($3 + [8]))) = *(($2 + [8]))
	*($3) = *($2)
	*((($3 + [16]) + [8])) = *($4)
	*($3 + [16]) = *($3)
	$4 = [8770]
	$5 = *([8770])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL $48(($3 + [32]), ($3 + [16]))
	$5 = *($3 + [32])
	$6 = ($5 & [1])
	CALL prints_l(( *($3 + [40]) ? (($3 + [32]) | [1]) : $6 ), ( *($3 + [36]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*(($3 + [40])))
	
.LABEL $label$4
	CALL prints(($4 + [1]))
	
.LABEL $label$1
	$4 = CALL $40($1)
	CALL void $4((int_32 $1), (int_32 $2), (int_32 *(*($4) + [4])))
	$global$0 = ($3 + [48])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (*($0) + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$5 = *($0)
	$3 = ($5 + [48])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	$0 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [56])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [64])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $1) > (uint_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$1 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $1, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$global$0 = ($2 + [16])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10027])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10073])
	
.LABEL $label$2
	$5 = ($1 + [8])
	$6 = *($5)
	$8 = ($1 + [24])
	$7 = ($1 + [16])
	CALL $70(($4 + [96]), $5, $7, $8)
	*((($4 + [16]) + [24])) = *($4 + [104])
	*((($4 + [16]) + [32])) = *((($4 + [96]) + [16]))
	*((($4 + [16]) + [40])) = *((($4 + [96]) + [24]))
	*($4 + [16]) = $6
	*($4 + [32]) = *($4 + [96])
	$9 = *($2)
	*($1 + [32]) = *($9)
	*(($1 + [40])) = *(($9 + [8]))
	*($1 + [48]) = *(*($2 + [4]))
	$9 = *($2 + [8])
	*(($1 + [64])) = *(($9 + [8]))
	*($1 + [56]) = *($9)
	$6 = *($1)
	*($1 + [72]) = *(*($2 + [12]))
	$3 = $3
	$2 = ($3 + [-80])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($3 + [-12])
	*($4 + [64]) = $4
	*($4 + [100]) = $5
	*($4 + [96]) = $1
	*($4 + [104]) = $7
	*($4 + [108]) = $8
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [56])
	*($4 + [124]) = ($1 + [72])
	CALL $135(($4 + [96]), ($4 + [64]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $2, [68])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($4 + [96]) = *($5)
	if ( (CALL $17(($4 + [16]), ($4 + [96]), [8]) == 0) ){ goto $label$4 }
	$2 = *($1 + [84])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4060968898812444672, ($4 + [64]), $6)
	*(($1 + [84])) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, (int_64)0, ($4 + [96]))
	
.LABEL $label$4
	CALL $70(($4 + [96]), $5, $7, $8)
	if ( (CALL $17(($4 + [32]), ($4 + [96]), [32]) == 0) ){ goto $label$6 }
	$2 = ($1 + [88])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	*(($4 + [88])) = (int_64)0
	*(($4 + [80])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	$1 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-4060968898812444671, ($4 + [64]), [2], $6)
	*($2) = $1
	
.LABEL $label$7
	CALL db_idx256_update($1, (int_64)0, ($4 + [96]), [2])
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4060968898812444672, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $132($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $134(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10183])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	$6 = *($5 + [16])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	*($1 + [48]) = *(*($5 + [20]))
	$6 = *($5 + [24])
	*(($1 + [64])) = *(($6 + [8]))
	*($1 + [56]) = *($6)
	*($1 + [72]) = *(*($5 + [28]))
	$6 = $2
	$5 = ($6 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-12])
	*($3 + [24]) = ($3 + [8])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	$8 = ($1 + [24])
	*($3 + [44]) = $8
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [48])
	*($3 + [56]) = ($1 + [56])
	*($3 + [60]) = ($1 + [72])
	CALL $135(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($4 + [8]), (int_64)-4060968898812444672, *(*($0 + [8])), $7, $5, [68])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [32]) = *($6)
	*($1 + [84]) = CALL db_idx64_store($7, (int_64)-4060968898812444672, $9, $10, ($3 + [32]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	CALL $70(($3 + [32]), $6, $2, $8)
	*(($1 + [88])) = CALL db_idx256_store($9, (int_64)-4060968898812444671, $7, $10, ($3 + [32]), [2])
	$global$0 = ($3 + [64])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *($1)
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$4 }
	$6 = [0]
	$7 = *([0] + [9480])
	
.LOOP $label$6:
	*((($4 + [96]) + ($1 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$6 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$3 }
	*($4 + [32]) = ($6 << [1])
	$7 = (($4 + [32]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [32]) = [0]
	$1 = (($4 + [32]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$8 = (($6 + [16]) & [-16])
	$7 = CALL $8($8)
	*($4 + [32]) = ($8 | [1])
	*($4 + [40]) = $7
	*($4 + [36]) = $6
	
.LABEL $label$2
	$8 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($7 + $1)) = *((($4 + [96]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$7 }
	$1 = ($7 + $6)
	
.LABEL $label$1
	$6 = [0]
	*($1) = [0]
	$1 = CALL $28(($4 + [32]), [9478])
	$7 = ($1 + [8])
	*((($4 + [48]) + [8])) = *($7)
	*($4 + [48]) = *($1)
	*($1) = (int_64)0
	*($7) = [0]
	$5 = *($2)
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$11 }
	$7 = *([0] + [9480])
	
.LOOP $label$13:
	*((($4 + [96]) + ($1 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$6 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$12 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($4 + [16]) = ($6 << [1])
	$7 = (($4 + [16]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*((($4 + [16]) + [8])) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [16]) = [0]
	$1 = (($4 + [16]) | [1])
	$7 = $1
	goto $label$8 
	
.LABEL $label$10
	$8 = (($6 + [16]) & [-16])
	$7 = CALL $8($8)
	*($4 + [16]) = ($8 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $6
	
.LABEL $label$9
	$8 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$14:
	*(($7 + $1)) = *((($4 + [96]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$14 }
	$7 = ($7 + $6)
	$1 = (($4 + [16]) | [1])
	
.LABEL $label$8
	$6 = [0]
	*($7) = [0]
	$7 = *($4 + [16])
	$8 = ($7 & [1])
	$1 = CALL $29(($4 + [48]), ( *($4 + [24]) ? $1 : $8 ), ( *($4 + [20]) ? uint_32($7 >> [1]) : $8 ))
	$7 = ($1 + [8])
	*((($4 + [64]) + [8])) = *($7)
	*($4 + [64]) = *($1)
	*($1) = (int_64)0
	*($7) = [0]
	$1 = CALL $28(($4 + [64]), [9478])
	$7 = ($1 + [8])
	*((($4 + [80]) + [8])) = *($7)
	*($4 + [80]) = *($1)
	*($1) = (int_64)0
	*($7) = [0]
	$5 = (uint_64)*($3) >> (uint_64)(int_64)8
	if ( (int_64)($5) == 0) ){ goto $label$18 }
	
.LOOP $label$20:
	*((($4 + [96]) + ($1 = $6))) = $5
	$6 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$19 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$20 }
	
.LABEL $label$19
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$17 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$16 
	
.LABEL $label$18
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$1 = ($4 | [1])
	$6 = $1
	goto $label$15 
	
.LABEL $label$17
	$8 = (($6 + [16]) & [-16])
	$7 = CALL $8($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$16
	$8 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$21:
	*(($7 + $1)) = *((($4 + [96]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$21 }
	$6 = ($7 + $6)
	$1 = ($4 | [1])
	
.LABEL $label$15
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	$1 = CALL $29(($4 + [80]), ( *($4 + [8]) ? $1 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	$6 = ($1 + [8])
	*((($4 + [96]) + [8])) = *($6)
	*($4 + [96]) = *($1)
	*($1) = (int_64)0
	*($6) = [0]
	if ( (*($4) & [1]) ){ goto $label$32 }
	if ( (*($4 + [80]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $10(*(($4 + [8])))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL $10(*($4 + [88]))
	$1 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$1 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( (*($4 + [16]) & $1) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL $10(*($4 + [72]))
	if ( ((*($4 + [16]) & $1) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL $10(*(($4 + [24])))
	$1 = [1]
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$1 = [1]
	if ( (*($4 + [48]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( ((*($4 + [32]) & $1) == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	CALL $10(*($4 + [56]))
	if ( ((*($4 + [32]) & $1) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL $10(*($4 + [40]))
	
.LABEL $label$22
	$1 = *($4 + [96])
	$6 = ($1 & [1])
	CALL $33($0, ( *($4 + [104]) ? (($4 + [96]) | [1]) : $6 ), ( *($4 + [100]) ? uint_32($1 >> [1]) : $6 ))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$33 }
	CALL $10(*(($4 + [104])))
	
.LABEL $label$33
	$global$0 = ($4 + [112])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)-4060968898812444671, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*(($4 + [76])) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9863])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $132($7, CALL $fimport$36(*($7), *($7 + [8]), (int_64)-4060968898812444672, $6))
	if ( ((int_32)*($4 + [76]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$2
	*(($4 + [88])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [9946])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = *(($2 + [88]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$2 }
	*(($1 + [24])) = (int_64)0
	*(($1 + [16])) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$3 = *(*($0))
	$3 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)-4060968898812444671, $1, [2], *($2))
	*((*(($0 + [4])) + [88])) = $3
	
.LABEL $label$2
	*($1) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx256_next($3, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = *($1)
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	if ( ((int_32)*(($4 + [76])) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [9863])
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	$2 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-4060968898812444672, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $132($7, $2)
	if ( ((int_32)*($4 + [76]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$4
	*(($4 + [88])) = $5
	
.LABEL $label$3
	*(($0 + [4])) = $4
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10371])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10416])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10466])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $10($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $10($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [80]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $136(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9914])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $115(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $3($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $10($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [16])
	$global$0 = $3
	$5 = *($1)
	$4 = *($1 + [4])
	if ( (( $4 ? uint_32($5 >> [1]) : ($5 & [1]) ) == 0) ){ goto $label$2 }
	$6 = ($2 + [8])
	$7 = ($2 + [4])
	$8 = ($1 + [1])
	$9 = ($0 + [1])
	$10 = [0]
	
.LOOP $label$3:
	$12 = ($11 & [1])
	$11 = *($0)
	$13 = ( *(($0 + [4])) ? uint_32($11 >> [1]) : $12 )
	if ( ($13 <= $10) ){ goto $label$1 }
	$11 = $10
	$14 = ($5 & [1])
	$5 = ( $4 ? uint_32(($5 & [254]) >> [1]) : $14 )
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($15 + $10)
	$15 = ( *(($0 + [8])) ? $9 : $12 )
	$16 = ($15 + $13)
	$11 = ($16 - $4)
	if ( ((int_32)$11 < (int_32)$5) ){ goto $label$1 }
	$13 = ( *(($1 + [8])) ? $8 : $14 )
	$12 = *($13)
	
.LOOP $label$5:
	$11 = (($11 - $5) + [1])
	if ( ($11 == 0) ){ goto $label$1 }
	$11 = CALL $16($4, $12, $11)
	if ( ($11 == 0) ){ goto $label$1 }
	if ( (CALL $17($11, $13, $5) == 0) ){ goto $label$6 }
	$4 = ($11 + [1])
	$11 = ($16 - $4)
	if ( ((int_32)$11 >= (int_32)$5) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_32)$11 == (int_32)$16) ){ goto $label$1 }
	$11 = ($11 - $15)
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $25($3, $0, $10, ($11 - $10), $0)
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*($6)) ){ goto $label$8 }
	*($5) = *($3)
	$5 = ($3 + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($7) = (*($7) + [12])
	*($3) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $37($2, $4)
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*(($3 + [8])))
	
.LABEL $label$7
	$5 = *($1)
	$4 = *(($1 + [4]))
	$10 = (( $4 ? uint_32($5 >> [1]) : ($5 & [1]) ) + $11)
	goto $label$3 
	
.LABEL $label$2
	$6 = ($2 + [8])
	$7 = ($2 + [4])
	$10 = [0]
	
.LABEL $label$1
	$5 = CALL $25($3, $0, $10, [-1], $0)
	$11 = *($7)
	if ( ((uint_32)$11 >= (uint_32)*($6)) ){ goto $label$9 }
	*($11) = *($3)
	*(($11 + [8])) = *(($3 + [8]))
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($7) = (*($7) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	CALL $37($2, $5)
	if ( ((*($3) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $8(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $10($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [192])
	$global$0 = $4
	*($4 + [128]) = $2
	*($4 + [136]) = $1
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$2 = *($0)
	*($4 + [88]) = $2
	*($4 + [96]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)-3020372878530969600, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $66(($4 + [88]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [88])) ){ goto $label$3 }
	CALL eosio_assert([0], [9863])
	
.LABEL $label$3
	if ( CALL has_auth(*($5 + [8])) ){ goto $label$1 }
	$1 = *($4 + [136])
	
.LABEL $label$2
	CALL require_auth($1)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	$1 = *($0)
	*($4 + [48]) = $1
	*($4 + [56]) = $1
	*($4 + [40]) = ($4 + [48])
	CALL $70($4, ($4 + [136]), ($4 + [128]), ($3 + [8]))
	CALL $71(($4 + [184]), ($4 + [40]), $4)
	$5 = *($4 + [188])
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $70(($4 + [144]), ($5 + [8]), ($5 + [16]), ($5 + [24]))
	if ( ((int_64)(((int_64)((int_64)*($4) ^ (int_64)*($4 + [144])) | (int_64)((int_64)*($4 + [8]) ^ (int_64)*($4 + [152]))) == 0) == 0) ){ goto $label$5 }
	if ( ((int_64)(((int_64)((int_64)*($4 + [16]) ^ (int_64)*($4 + [160])) | (int_64)((int_64)*(($4 + [24])) ^ (int_64)*((($4 + [144]) + [24])))) == 0) == 0) ){ goto $label$5 }
	$5 = *($4 + [188])
	if ( $5 ){ goto $label$4 }
	
.LABEL $label$5
	$5 = [0]
	CALL eosio_assert([0], [8695])
	
.LABEL $label$4
	CALL $79($0, $5, $3)
	$5 = *($4 + [72])
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [76])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $10($3)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL $10($0)
	
.LABEL $label$6
	$5 = *($4 + [112])
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [116])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $10($3)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($4 + [112]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL $10($0)
	
.LABEL $label$11
	$global$0 = ($4 + [192])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [80]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [32]) = (int_64)0
	$4 = *($1 + [24])
	*($3 + [40]) = $4
	*($3 + [56]) = $4
	*($3 + [72]) = $4
	*($3 + [88]) = $4
	$5 = CALL $40($1)
	CALL void $5((int_32 $1), (int_32 ($3 + [80])), (int_32 ($3 + [64])), (int_32 ($3 + [48])), (int_32 ($3 + [32])), (int_32 *(*($5))))
	$4 = *($3 + [80])
	$6 = *($3 + [88])
	if ( ((int_64)*($3 + [40]) == (int_64)$6) ){ goto $label$1 }
	CALL eosio_assert([0], [9392])
	
.LABEL $label$1
	$4 = ((int_64)*($3 + [32]) + (int_64)$4)
	if ( ((int_64)$4 <= (int_64)-4611686018427387904) ){ goto $label$5 }
	if ( ((int_64)$4 < (int_64)4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9454])
	if ( ((int_64)$6 != (int_64)*($2 + [8])) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([0], [9435])
	
.LABEL $label$4
	if ( ((int_64)$6 == (int_64)*($2 + [8])) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9517])
	
.LABEL $label$2
	$6 = *($2)
	CALL $48(($3 + [16]), $2)
	$5 = CALL $31(($3 + [16]), [0], [8725])
	$7 = ($5 + [8])
	*(($3 + [8])) = *($7)
	*($3) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	if ( ((int_64)$4 < (int_64)$6) ){ goto $label$10 }
	$5 = [1]
	if ( (*($3) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([0], ( *($3 + [8]) ? ($3 | [1]) : (*($3) & [1]) ))
	$5 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $10(*($3 + [8]))
	if ( (*($3 + [16]) & $5) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [16]) & $5) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*($3 + [24]))
	
.LABEL $label$6
	$4 = *($2)
	if ( ((int_64)*((($3 + [80]) + [8])) == (int_64)*(($2 + [8]))) ){ goto $label$11 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$11
	$4 = (int_64)
	if ( ((int_64)$4($4 - *($3 + [80]))) <= (int_64)-4611686018427387904) ){ goto $label$14 }
	if ( ((int_64)$4 >= (int_64)4611686018427387904) ){ goto $label$13 }
	if ( ((int_64)$4 >= (int_64)1) ){ goto $label$12 }
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$14
	CALL eosio_assert([0], [9349])
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$13
	CALL eosio_assert([0], [9371])
	
.LABEL $label$12
	$4 = *(($2 + [8]))
	*(($3 + [8])) = $4
	*($3) = *($2)
	if ( ((int_64)$4 == (int_64)*((($3 + [80]) + [8]))) ){ goto $label$15 }
	CALL eosio_assert([0], [9301])
	
.LABEL $label$15
	$4 = (int_64)
	*($3) = $4(*($3) - *($3 + [80])))
	if ( ((int_64)$4 <= (int_64)-4611686018427387904) ){ goto $label$17 }
	if ( ((int_64)$4 < (int_64)4611686018427387904) ){ goto $label$16 }
	CALL eosio_assert([0], [9371])
	goto $label$16 
	
.LABEL $label$17
	CALL eosio_assert([0], [9349])
	
.LABEL $label$16
	CALL $80($3, $1, $3)
	$global$0 = ($3 + [96])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $17(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8245])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $26($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $30($0, $1, $2, CALL $1($2))
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [9937])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [9937])
	$1 = *(($0 + [4]))
	
.LABEL $label$14
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}