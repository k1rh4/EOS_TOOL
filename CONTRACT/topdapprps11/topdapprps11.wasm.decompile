(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "Invalid token transfer...\00")
(data (i32.const 8325) "must buy a positive amount\00")
(data (i32.const 8352) "EOS\00")
(data (i32.const 8356) "only EOS token is allowed\00")
(data (i32.const 8382) "must in level\00")
(data (i32.const 8396) "active\00")
(data (i32.const 8403) "reward from rps with \00")
(data (i32.const 8425) " \00")
(data (i32.const 8427) "string is too long to be a valid name\00")
(data (i32.const 8465) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8532) "character is not in allowed character set for names\00")
(data (i32.const 8584) "string is too long to be a valid symbol_code\00")
(data (i32.const 8629) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8682) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8733) "error reading iterator\00")
(data (i32.const 8756) "read\00")
(data (i32.const 8761) "cannot pass end iterator to modify\00")
(data (i32.const 8796) "object passed to modify is not in multi_index\00")
(data (i32.const 8842) "cannot modify objects in table of another contract\00")
(data (i32.const 8893) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8952) "write\00")
(data (i32.const 8958) "cannot create objects in table of another contract\00")
(data (i32.const 9009) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9058) "invalid symbol name\00")
(data (i32.const 9080) "|#\00\00")
(data (i32.const 9084) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9117) "RPS\00")
(data (i32.const 9121) "toptokenrps1\00")
(data (i32.const 9134) "issue\00")
(data (i32.const 9140) "suprise\00")
(data (i32.const 9148) "get\00")
(data (i32.const 9152) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9204) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9258) "cannot decrement iterator at beginning of table\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$12 (result i64)))
(import "env" "sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$19 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$20 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $49))
(export "_Znwj" (func $47))
(export "_Znaj" (func $48))
(export "_ZdaPv" (func $50))
(export "_ZnwjSt11align_val_t" (func $51))
(export "_ZnajSt11align_val_t" (func $52))
(export "_ZdlPvSt11align_val_t" (func $53))
(export "_ZdaPvSt11align_val_t" (func $54))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $2 $5 $7)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17724))
(global $global$2 i32 (i32.const 17724))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8733])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $68($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [68]) = $0
	CALL $43(($3 + [32]), $5)
	*($5 + [76]) = [-1]
	*($5 + [72]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $71($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $62 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [72]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9258])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3903055172372267008)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9204])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9204])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $18(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $63())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $67($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8733])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $68($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($5 + [16]) = (int_64)0
	CALL $40(($3 + [32]), $5)
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $71($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $68($1)
	
.LABEL $label$2
	*(CALL $63()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $68(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $71($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [8842])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [8893])
	CALL eosio_assert([1], [8952])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8952])
	CALL memcpy(($4 | [8]), $6, [8])
	CALL eosio_assert([1], [8952])
	CALL memcpy(($4 + [16]), $5, [4])
	CALL db_update_i64(*($1 + [28]), $2, $4, [20])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982863551778521088) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982863551778521089
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [8682])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235032801370701824, (int_64)7235032801370701824)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [8682])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [8761])
	CALL $32($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $33($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [48])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [32])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [40])), (int_64)-3903055172372267008, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $18($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $19(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [48])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9152])
	*($1) = *($7)
	*($1 + [8]) = *(*(*($5 + [4]) + [4]) + [8])
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = CALL current_time()
	$6 = *(*($5 + [4]) + [4])
	*($1 + [32]) = *($6 + [16])
	*($1 + [56]) = *($6 + [24])
	*($1 + [40]) = *(*($5 + [12]))
	*($1 + [60]) = *(*($5 + [20]))
	*($1 + [48]) = *(*($5 + [16]))
	*($1 + [64]) = *(*($5 + [24]))
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-12])
	CALL $23(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($4 + [8]), (int_64)-3903055172372267008, *(*($0 + [8])), $8, $5, [68])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [76]) = CALL db_idx64_store($8, (int_64)-3903055172372267008, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8733])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $68($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8756])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8756])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($5 & [-4]) != (int_32)[16]), [8756])
	CALL memcpy(($4 + [16]), ($2 + [16]), [4])
	*($4 + [28]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)4982863551778521088
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982863551778521088
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $71($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [24])) = (int_64)0
	*(($2 + [8])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2) = (int_64)0
	$3 = ($0 + [112])
	$4 = *(($0 + [140]))
	if ( ((int_32)$4 == (int_32)*(($0 + [136]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [8682])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)7235032801370701824, (int_64)7235032801370701824)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $27($3, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [8682])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*(($5 = (($2 + [32]) + [24]))) = *(($4 + [24]))
	*(($6 = (($2 + [32]) + [16]))) = *(($4 + [16]))
	*((($2 + [32]) + [8])) = *(($4 + [8]))
	*($2 + [32]) = *($4)
	*($6) = *($1)
	*($5) = ((int_64)*($5) + (int_64)1)
	CALL $28($3, ($2 + [32]), *($0))
	$global$0 = ($2 + [64])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [8682])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982863551778521088, (int_64)4982863551778521088)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22($0, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [8682])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [8761])
	CALL $29($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $30($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8733])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $68($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $34(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)7235032801370701824
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235032801370701824
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $71($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = ((int_64)*($2) * (int_64)10)
	$2 = CALL $65([9117])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8584])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($2 + [9116]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8629])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9009])
	$7 = ((int_64)$5 & (int_64)72057594037927935)
	$8 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $5
	$6 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9058])
	$7 = *($0)
	*($3 + [40]) = [8396]
	*($3 + [44]) = CALL $65([8396])
	*($3 + [16]) = *($3 + [40])
	$5 = *(CALL $4(($3 + [80]), ($3 + [16])))
	*($3 + [40]) = [9121]
	*($3 + [44]) = CALL $65([9121])
	*($3 + [8]) = *($3 + [40])
	$10 = *(CALL $4(($3 + [80]), ($3 + [8])))
	*($3 + [40]) = [9134]
	*($3 + [44]) = CALL $65([9134])
	*($3) = *($3 + [40])
	$11 = *(CALL $4(($3 + [80]), $3))
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$2 = CALL $65([9140])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [24]) = ($2 << [1])
	$6 = (($3 + [24]) | [1])
	if ( $2 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $6
	*($3 + [28]) = $2
	
.LABEL $label$15
	CALL memcpy($6, [9140], $2)
	
.LABEL $label$14
	*(($6 + $2)) = [0]
	*((($3 + [40]) + [16])) = $8
	$2 = ($3 + [32])
	*(($3 + [72])) = *($2)
	*($2) = [0]
	*($3 + [48]) = $4
	*($3 + [80]) = $10
	*($3 + [88]) = $11
	*($3 + [40]) = *($1)
	*($3 + [64]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	*(($2 = CALL _Znwj([16]))) = $7
	*($2 + [8]) = $5
	*(($3 + [116])) = [0]
	$6 = ($2 + [16])
	*((($3 + [80]) + [24])) = $6
	*(($3 + [100])) = $6
	*($3 + [96]) = $2
	*($3 + [108 align=4]) = (int_64)0
	$2 = *($3 + [64])
	$6 = ( *((($3 + [40]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($6 + [24])
	$7 = (CASTING uint_64)(uint_32 $6)
	$9 = (($3 + [40]) + [24])
	$6 = (($3 + [80]) + [28])
	
.LOOP $label$17:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$17 }
	if ( ($2 == 0) ){ goto $label$19 }
	CALL $15($6, $2)
	$6 = *(($3 + [112]))
	$2 = *(($3 + [108]))
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	$2 = [0]
	
.LABEL $label$18
	*($3 + [120]) = $2
	*($3 + [128]) = $6
	$6 = ($6 - $2)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [8952])
	CALL memcpy($2, ($3 + [40]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [8952])
	CALL memcpy(($2 + [8]), (($3 + [40]) + [8]), [8])
	*($3 + [136]) = *((($3 + [40]) + [16]))
	CALL eosio_assert(((int_32)($6 + [-16]) > (int_32)[7]), [8952])
	CALL memcpy(($2 + [16]), ($3 + [136]), [8])
	*($3 + [124]) = ($2 + [24])
	CALL $31(($3 + [120]), $9)
	CALL $17(($3 + [120]), ($3 + [80]))
	$2 = *($3 + [120])
	CALL send_inline($2, (*($3 + [124]) - $2))
	$2 = *($3 + [120])
	if ( ($2 == 0) ){ goto $label$20 }
	*($3 + [124]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$2 = *($3 + [108])
	if ( ($2 == 0) ){ goto $label$21 }
	*(($3 + [112])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($3 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	if ( (*(($3 + [64])) & [1]) ){ goto $label$24 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$23 }
	goto $label$12 
	
.LABEL $label$24
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [32])))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$13
	CALL $55(($3 + [24]))
	
.LABEL $label$12
	$global$0 = ($3 + [144])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $71($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $70($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $68 (int_32 $0)
{
	return CALL $69([9328], $0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8756])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8756])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8756])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9148])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $15($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8756])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $42($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $58($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $58($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $55($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8756])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8756])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $68($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9308])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $68($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9258])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4743856112179085312)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9204])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9204])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $39(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [16]))
	*(($6 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [8952])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8952])
	CALL memcpy(($2 | [8]), $6, [8])
	CALL eosio_assert([1], [8952])
	CALL memcpy(($2 + [16]), $5, [4])
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)4982863551778521088, *(*($0 + [8])), (int_64)4982863551778521088, $2, [20])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)4982863551778521088) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)4982863551778521089
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $66(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9308])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $66(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9320]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9324])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9320]) = [1]
	$2 = ($2 << [16])
	*([0] + [9324]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9324])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9324]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9320]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9320]) = [1]
	$3 = ($3 << [16])
	*([0] + [9324]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9324])
	
.LABEL $label$10
	*([0] + [9324]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $57($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17712])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17520]
	$3 = (((int_32)$1 * (int_32)[12]) + [17520])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8756])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [224]) + [24]))) = (int_64)0
	*((($4 + [224]) + [40])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	*($4 + [304]) = ($4 + [208])
	*($4 + [16]) = ($4 + [224])
	CALL $9(($4 + [16]), ($4 + [304]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$9 = *($3)
	*((($4 + [272]) + [8])) = $9
	*(($3 = (($4 + [288]) + [8]))) = $9
	$10 = *($4)
	*($4 + [288]) = $10
	*($4 + [272]) = $10
	$11 = *($3)
	*(($9 = (($4 + [304]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [288])
	*($4 + [32]) = $1
	*($4 + [304]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*($3) = *($8)
	*($4 + [288]) = *($4 + [240])
	$0 = *($4 + [232])
	$1 = *($4 + [224])
	$8 = CALL $56(($4 + [272]), ($4 + [256]))
	*($9) = *($3)
	*($4 + [328]) = $1
	*($4 + [320]) = $0
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [328])), (int_32 ($4 + [320])), (int_32 ($4 + [304])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $71($2)
	
.LABEL $label$6
	CALL $8(($4 + [16]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$7
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8427])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8532])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8465])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8532])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	float_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$5 = ($global$0 - [240])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8299])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8325])
	$7 = *($0)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$6 }
	if ( ((int_64)*($2) != (int_64)$7) ){ goto $label$6 }
	$8 = CALL $65([8352])
	if ( ($8 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8584])
	goto $label$9 
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = (int_64)0
	
.LOOP $label$11:
	$6 = *(($8 + [8351]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8629])
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$8
	$7 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)), [8356])
	$8 = [1]
	$7 = *($3)
	if ( ((int_64)$7 <= (int_64)9999) ){ goto $label$16 }
	if ( ((int_64)$7 > (int_64)49999) ){ goto $label$15 }
	if ( ((int_64)$7 == (int_64)10000) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)20000) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((int_64)$7 == (int_64)1000) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)2000) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)5000) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_64)$7 == (int_64)50000) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)100000) ){ goto $label$13 }
	
.LABEL $label$14
	$8 = [0]
	
.LABEL $label$13
	CALL eosio_assert($8, [8382])
	$6 = ($0 + [72])
	*($5 + [128]) = $6
	*($5 + [56]) = *($3)
	CALL $10(($5 + [144]), ($5 + [128]), ($5 + [56]))
	$8 = *($5 + [148])
	if ( ($8 == 0) ){ goto $label$25 }
	if ( ((int_64)*($5 + [56]) != (int_64)*($8 + [8])) ){ goto $label$25 }
	$7 = *($5 + [144])
	*($5 + [120]) = $7
	$2 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	if ( ($2) == 0) ){ goto $label$24 }
	if ( ((int_64)*($2 + [16]) == (int_64)0) ){ goto $label$23 }
	$8 = CALL $11($0, ($2 + [16]), $1, ($2 + [24]))
	*($5 + [116]) = $8
	$6 = *($2 + [24])
	if ( ((int_32)$6 == (int_32)[2]) ){ goto $label$22 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$21 }
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$25
	*($5 + [124]) = [0]
	*($5 + [120]) = ($5 + [128])
	
.LABEL $label$24
	*($5 + [144]) = *($0)
	*($5 + [56]) = [0]
	*($5 + [232]) = CALL $11($0, $1, ($5 + [144]), ($5 + [56]))
	$7 = *($0)
	*($5 + [148]) = $3
	*($5 + [144]) = $0
	*($5 + [152]) = $1
	*($5 + [156]) = ($5 + [232])
	*($5 + [216]) = $7
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$5()), [8958])
	*($5 + [56]) = $6
	*($5 + [60]) = ($5 + [144])
	*($5 + [64]) = ($5 + [216])
	*(($8 = CALL _Znwj([56])) + [40]) = $6
	*($8 + [16]) = (int_64)0
	CALL $12(($5 + [56]), $8)
	*($5 + [40]) = $8
	$7 = *($8)
	*($5 + [56]) = $7
	$10 = *($8 + [44])
	*($5 + [24]) = $10
	$2 = ($0 + [100])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$27 }
	*($6 + [8]) = $7
	*($6 + [16]) = $10
	*($5 + [40]) = [0]
	*($6) = $8
	*($2) = ($6 + [24])
	$8 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( $8 ){ goto $label$26 }
	goto $label$17 
	
.LABEL $label$27
	CALL $13(($0 + [96]), ($5 + [40]), ($5 + [56]), ($5 + [24]))
	$8 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	
.LABEL $label$26
	CALL _ZdlPv($8)
	goto $label$17 
	
.LABEL $label$23
	*($5 + [144]) = *($0)
	*($5 + [56]) = [0]
	$10 = CALL $11($0, ($2 + [16]), ($5 + [144]), ($5 + [56]))
	$9 = *($0)
	$8 = *($5 + [124])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8761])
	$6 = *($5 + [128])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8796])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$5()), [8842])
	*($8 + [16]) = *($1)
	*($8 + [24]) = $10
	*($8 + [32]) = ((int_64)*($8 + [32]) + (int_64)*($3))
	$10 = ($8 + [8])
	*($5 + [24]) = *($10)
	$7 = *($8)
	CALL eosio_assert([1], [8893])
	*($5 + [64]) = (($5 + [144]) + [36])
	*($5 + [60]) = ($5 + [144])
	*($5 + [56]) = ($5 + [144])
	CALL $14(($5 + [56]), $8)
	CALL db_update_i64(*($8 + [44]), $9, ($5 + [144]), [36])
	if ( (uint_64)($7 <= *($6 + [16])) ){ goto $label$28 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($5 + [216]) = *($10)
	if ( (CALL $64(($5 + [24]), ($5 + [216]), [8]) == 0) ){ goto $label$17 }
	$10 = ($8 + [48])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$29 }
	$8 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4743856112179085312, ($5 + [40]), $7)
	*($10) = $8
	
.LABEL $label$29
	CALL db_idx64_update($8, $9, ($5 + [216]))
	goto $label$17 
	
.LABEL $label$22
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$8 != (int_32)[2]) ){ goto $label$19 }
	
.LABEL $label$20
	*($5 + [112]) = [1]
	$8 = ($2 + [16])
	goto $label$18 
	
.LABEL $label$19
	*($5 + [112]) = [2]
	$8 = $1
	
.LABEL $label$18
	$11 = *($8)
	*($5 + [104]) = $11
	$7 = ((int_64)*($3) + (int_64)*($2 + [32]))
	*($5 + [96]) = $7
	$12 = ((float_64)(CASTING float_64)(uint_64 $7) * (float_64)(float_64)0.02)
	if ( (((float_64)$12 < (float_64)(float_64)18446744073709551615) & ((float_64)$12 >= (float_64)(float_64)0)) ){ goto $label$31 }
	$9 = (int_64)0
	goto $label$30 
	
.LABEL $label$31
	$9 = (Rounds 0)($12)
	
.LABEL $label$30
	$13 = *(($3 + [8]))
	$14 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$14($7 - $9)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9009])
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$7 = $9
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$36 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$6 = [0]
	
.LABEL $label$32
	CALL eosio_assert($6, [9058])
	$9 = *($0)
	*($5 + [56]) = [8396]
	*($5 + [60]) = CALL $65([8396])
	*($5 + [16]) = *($5 + [56])
	$15 = *(CALL $4(($5 + [144]), ($5 + [16])))
	*($5 + [56]) = [8192]
	*($5 + [60]) = CALL $65([8192])
	*($5 + [8]) = *($5 + [56])
	$16 = *(CALL $4(($5 + [144]), ($5 + [8])))
	*($5 + [56]) = [8204]
	*($5 + [60]) = CALL $65([8204])
	*($5) = *($5 + [56])
	$17 = *(CALL $4(($5 + [144]), $5))
	$18 = *($0)
	$7 = *($2 + [16])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$40 }
	$6 = [0]
	$10 = *([0] + [9080])
	
.LOOP $label$42:
	*((($5 + [144]) + ($8 = $6))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$6 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$41 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$42 }
	
.LABEL $label$41
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$39 }
	*($5 + [24]) = ($6 << [1])
	$10 = (($5 + [24]) | [1])
	goto $label$38 
	
.LABEL $label$40
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [24]) = [0]
	$8 = (($5 + [24]) | [1])
	goto $label$37 
	
.LABEL $label$39
	$2 = (($6 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($5 + [24]) = ($2 | [1])
	*($5 + [32]) = $10
	*($5 + [28]) = $6
	
.LABEL $label$38
	$2 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$43:
	*(($10 + $8)) = *((($5 + [144]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$43 }
	$8 = ($10 + $6)
	$11 = *($5 + [104])
	
.LABEL $label$37
	*($8) = [0]
	$8 = CALL $61(($5 + [24]), [0], [8403])
	$6 = ($8 + [8])
	*((($5 + [40]) + [8])) = *($6)
	*($5 + [40]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	$8 = CALL $59(($5 + [40]), [8425])
	$7 = *($8)
	*($8) = [0]
	$6 = *($8 + [8])
	*($8 + [4 align=4]) = (int_64)0
	*(($10 = (($5 + [56]) + [24]))) = [0]
	*((($5 + [144]) + [24])) = $13
	*(($5 + [184])) = $6
	*($5 + [72]) = (int_64)0
	*($5 + [144]) = $18
	*($5 + [152]) = $11
	*($5 + [160]) = $14
	*($5 + [176]) = $7
	*($5 + [56]) = $16
	*($5 + [64]) = $17
	*(($8 = CALL _Znwj([16]))) = $9
	*($8 + [8]) = $15
	*((($5 + [56]) + [36])) = [0]
	$6 = ($8 + [16])
	*($10) = $6
	*(($5 + [76])) = $6
	*($5 + [72]) = $8
	*($5 + [84 align=4]) = (int_64)0
	$8 = *($5 + [176])
	$6 = ( *((($5 + [144]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($5 + [84])
	
.LOOP $label$44:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$44 }
	if ( ($8 == 0) ){ goto $label$46 }
	CALL $15($6, $8)
	$6 = *(($5 + [88]))
	$8 = *(($5 + [84]))
	goto $label$45 
	
.LABEL $label$46
	$6 = [0]
	$8 = [0]
	
.LABEL $label$45
	*($5 + [220]) = $8
	*($5 + [216]) = $8
	*($5 + [224]) = $6
	*($5 + [136]) = ($5 + [216])
	*($5 + [232]) = ($5 + [144])
	CALL $16(($5 + [232]), ($5 + [136]))
	CALL $17(($5 + [216]), ($5 + [56]))
	$8 = *($5 + [216])
	CALL send_inline($8, (*($5 + [220]) - $8))
	$8 = *($5 + [216])
	if ( ($8 == 0) ){ goto $label$47 }
	*($5 + [220]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$47
	$8 = *($5 + [84])
	if ( ($8 == 0) ){ goto $label$48 }
	*(($5 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$48
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$49 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$49
	if ( (*($5 + [176]) & [1]) ){ goto $label$54 }
	if ( (*($5 + [40]) & [1]) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	CALL _ZdlPv(*(($5 + [184])))
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL _ZdlPv(*($5 + [48]))
	if ( (*($5 + [24]) & [1]) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv(*($5 + [32]))
	
.LABEL $label$50
	$19 = ($0 + [32])
	$8 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-3903055172372267008, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$55 }
	$8 = CALL $18($19, $6)
	
.LABEL $label$55
	$6 = ($0 + [48])
	$7 = *($6)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$56 }
	$7 = (int_64)0
	$10 = CALL db_lowerbound_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-3903055172372267008, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$57 }
	CALL $18($19, $10)
	*($5 + [148]) = [0]
	*($5 + [144]) = $19
	$7 = *(*(CALL $19(($5 + [144])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$57
	*(($0 + [48])) = $7
	
.LABEL $label$56
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9152])
	if ( ($8 == 0) ){ goto $label$61 }
	if ( ((uint_64)*($6) <= (uint_64)(int_64)200) ){ goto $label$61 }
	*(($5 + [160])) = (int_64)0
	*(($5 + [152])) = (int_64)0
	*($5 + [144]) = (int_64)0
	$20 = ($0 + [152])
	$6 = *(($0 + [180]))
	if ( ((int_32)$6 == (int_32)*(($0 + [176]))) ){ goto $label$60 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$20), [8682])
	if ( $6 ){ goto $label$59 }
	$6 = ($5 + [144])
	goto $label$59 
	
.LABEL $label$61
	$7 = *($0)
	*($5 + [144]) = $0
	*($5 + [156]) = $1
	*($5 + [148]) = ($5 + [120])
	*($5 + [152]) = ($5 + [96])
	*($5 + [160]) = ($5 + [104])
	*($5 + [164]) = ($5 + [116])
	*($5 + [168]) = ($5 + [112])
	*($5 + [216]) = $7
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$5()), [8958])
	*($5 + [56]) = $19
	*($5 + [60]) = ($5 + [144])
	*($5 + [64]) = ($5 + [216])
	*(($8 = CALL _Znwj([80])) + [40]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [68]) = $19
	CALL $20(($5 + [56]), $8)
	*($5 + [40]) = $8
	$7 = *($8)
	*($5 + [56]) = $7
	$10 = *($8 + [72])
	*($5 + [24]) = $10
	$2 = ($0 + [60])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$63 }
	*($6 + [8]) = $7
	*($6 + [16]) = $10
	*($5 + [40]) = [0]
	*($6) = $8
	*($2) = ($6 + [24])
	$8 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( $8 ){ goto $label$62 }
	goto $label$58 
	
.LABEL $label$63
	CALL $21(($0 + [56]), ($5 + [40]), ($5 + [56]), ($5 + [24]))
	$8 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($8 == 0) ){ goto $label$58 }
	
.LABEL $label$62
	CALL _ZdlPv($8)
	goto $label$58 
	
.LABEL $label$60
	$6 = CALL db_find_i64(*($20), *(($0 + [160])), (int_64)4982863551778521088, (int_64)4982863551778521088)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$64 }
	$6 = CALL $22($20, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$20), [8682])
	goto $label$59 
	
.LABEL $label$64
	$6 = ($5 + [144])
	
.LABEL $label$59
	*((($5 + [56]) + [16])) = *(($6 + [16]))
	*(($10 = (($5 + [56]) + [8]))) = *(($6 + [8]))
	*($5 + [56]) = *($6)
	$8 = (uint_64)($9 <= $7)
	$9 = *($8)
	$7 = *($10)
	$13 = ( $7 ? $9 : $8 )
	$6 = ((uint_64)$13 > (uint_64)(int_64)200)
	if ( $6 ){ goto $label$66 }
	if ( $8 ){ goto $label$65 }
	
.LABEL $label$66
	$7 = ( $9 ? $13 : $6 )
	*($10) = $7
	
.LABEL $label$65
	$10 = *(($0 + [60]))
	$2 = *(($0 + [56]))
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$68 }
	
.LOOP $label$70:
	$8 = ($10 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$7) ){ goto $label$69 }
	$10 = $8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$69
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$68 }
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$19), [8682])
	goto $label$67 
	
.LABEL $label$68
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-3903055172372267008, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$67 }
	$6 = CALL $18($19, $8)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$19), [8682])
	
.LABEL $label$67
	$9 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8761])
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$19), [8796])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$5()), [8842])
	$8 = ($6 + [8])
	*($5 + [232]) = *($8)
	*($8) = *(*($5 + [124]) + [8])
	*($6 + [16]) = *($5 + [96])
	$7 = *($6)
	*($6 + [24]) = CALL current_time()
	$10 = *($5 + [124])
	*($6 + [32]) = *($10 + [16])
	*($6 + [60]) = *($5 + [116])
	*($6 + [64]) = *($5 + [112])
	*($6 + [56]) = *($10 + [24])
	*($6 + [40]) = *($1)
	*($6 + [48]) = *($5 + [104])
	CALL eosio_assert(((int_64)$7 == (int_64)*($6)), [8893])
	*($5 + [224]) = (($5 + [144]) + [68])
	*($5 + [220]) = ($5 + [144])
	*($5 + [216]) = ($5 + [144])
	CALL $23(($5 + [216]), $6)
	CALL db_update_i64(*($6 + [72]), $9, ($5 + [144]), [68])
	$10 = ($0 + [48])
	if ( (uint_64)($7 <= *($10)) ){ goto $label$71 }
	*($10) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$71
	*($5 + [40]) = *($8)
	if ( (CALL $64(($5 + [232]), ($5 + [40]), [8]) == 0) ){ goto $label$72 }
	$8 = *($6 + [76])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$73 }
	$8 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-3903055172372267008, ($5 + [24]), $7)
	*(($6 + [76])) = $8
	
.LABEL $label$73
	CALL db_idx64_update($8, $9, ($5 + [40]))
	
.LABEL $label$72
	*(($8 = ($5 + [64]))) = ((int_64)*($8) + (int_64)1)
	CALL $24($20, ($5 + [56]), *($0))
	
.LABEL $label$58
	$9 = *($0)
	$8 = *($5 + [124])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8761])
	$6 = *($5 + [128])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8796])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$5()), [8842])
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = [0]
	*($8 + [32]) = (int_64)0
	$10 = ($8 + [8])
	*($5 + [24]) = *($10)
	$7 = *($8)
	CALL eosio_assert([1], [8893])
	*($5 + [64]) = (($5 + [144]) + [36])
	*($5 + [60]) = ($5 + [144])
	*($5 + [56]) = ($5 + [144])
	CALL $14(($5 + [56]), $8)
	CALL db_update_i64(*($8 + [44]), $9, ($5 + [144]), [36])
	if ( (uint_64)($7 <= *($6 + [16])) ){ goto $label$74 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$74
	*($5 + [216]) = *($10)
	if ( (CALL $64(($5 + [24]), ($5 + [216]), [8]) == 0) ){ goto $label$75 }
	$10 = ($8 + [48])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$76 }
	$8 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4743856112179085312, ($5 + [40]), $7)
	*($10) = $8
	
.LABEL $label$76
	CALL db_idx64_update($8, $9, ($5 + [216]))
	
.LABEL $label$75
	CALL $25($0, $1)
	
.LABEL $label$17
	CALL $26($0, $1, $3)
	
.LABEL $label$6
	$global$0 = ($5 + [240])
}

void .FUNC $2 (int_32 $0)
{
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $68($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $71($2)
	
.LABEL $label$5
	CALL $8($4)
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)5372695399406501888) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [1]
	*($3) = *($3 + [56])
	CALL $3($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [64]) = [8192]
	*($3 + [68]) = CALL $65([8192])
	*($3 + [32]) = *($3 + [64])
	CALL $4(($3 + [72]), ($3 + [32]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [64]) = [8204]
	*($3 + [68]) = CALL $65([8204])
	*($3 + [24]) = *($3 + [64])
	CALL $4(($3 + [72]), ($3 + [24]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [2]
	*($3 + [16]) = *($3 + [40])
	CALL $6($0, (int_64)6138663591592764928, ($3 + [16]))
	
.LABEL $label$2
	CALL eosio_exit([0])
	
.LABEL $label$1
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [8]) = *($3 + [48])
	CALL $3($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $62($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8952])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $15($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8952])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8952])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $38(CALL $37($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4743856112179085312, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8682])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $39($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)4743856112179085312, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8682])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($4 + [64])) = (int_64)0
	*(($4 + [48])) = (int_64)0
	*(($4 + [56])) = (int_64)0
	*($4 + [40]) = (int_64)0
	$5 = ($0 + [112])
	$6 = *(($0 + [140]))
	if ( ((int_32)$6 == (int_32)*(($0 + [136]))) ){ goto $label$2 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [8682])
	if ( $6 ){ goto $label$1 }
	$6 = ($4 + [40])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($5), *(($0 + [120])), (int_64)7235032801370701824, (int_64)7235032801370701824)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $27($5, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [8682])
	goto $label$1 
	
.LABEL $label$3
	$6 = ($4 + [40])
	
.LABEL $label$1
	*(($7 = (($4 + [80]) + [24]))) = *(($6 + [24]))
	*(($8 = (($4 + [80]) + [16]))) = *(($6 + [16]))
	*((($4 + [80]) + [8])) = *(($6 + [8]))
	*($4 + [80]) = *($6)
	*($4 + [40]) = *($1)
	*($4 + [48]) = *($2)
	*($4 + [56]) = *($8)
	*($4 + [64]) = CALL current_time()
	$9 = *($7)
	*($4 + [72]) = $9
	CALL sha256(($4 + [40]), [80], $4)
	$10 = *($4)
	$6 = ((CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)*($4 + [8]) + (int_64)$10) + (int_64)*($4 + [16])) + (int_64)*($4 + [24])) % (uint_64)(int_64)3)) + [1])
	if ( ((int_32)$6 != (int_32)*($3)) ){ goto $label$4 }
	$6 = (( [1] ? [-1] : (*($4 + [1]) <= ((CASTING uint_32)(uint_64 $10) & [255])) ) + $6)
	$6 = ( [1] ? $6 : ((int_32)$6 > (int_32)[3]) )
	$6 = ( [3] ? $6 : ((int_32)$6 < (int_32)[1]) )
	
.LABEL $label$4
	*($8) = *($1)
	*($7) = ((int_64)$9 + (int_64)1)
	CALL $28($5, ($4 + [80]), *($0))
	$global$0 = ($4 + [112])
	return $6
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [88])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [72])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [80])), (int_64)4743856112179085312, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $46(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [88])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9152])
	*($1) = *($7)
	$8 = *(*($5 + [4]))
	*($1 + [8]) = $8
	*($1 + [32]) = ((int_64)$8 + (int_64)*($1 + [32]))
	*($1 + [24]) = *(*($5 + [12]))
	*($1 + [16]) = *(*($5 + [8]))
	$2 = $2
	$5 = ($2 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-12])
	CALL $14(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)4743856112179085312, *(*($0 + [8])), $8, $5, [36])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [48]) = CALL db_idx64_store($8, (int_64)4743856112179085312, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [8952])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8952])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8952])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8952])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8952])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8756])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8756])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [8842])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [24]))) = *(($3 + [24]))
	*(($6 = ($1 + [16]))) = *(($3 + [16]))
	*(($7 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [8893])
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = $7
	*($4 + [64]) = $1
	*($4 + [72]) = $6
	*($4 + [76]) = $5
	CALL $36(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235032801370701824) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235032801370701825
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [8958])
	*(($5 = CALL _Znwj([48])) + [32]) = $1
	*($5 + [16]) = (int_64)0
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*(($7 = ($5 + [24]))) = *(($3 + [24]))
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = $6
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [16])
	*($4 + [76]) = $7
	CALL $36(($4 + [64]), ($4 + [56]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235032801370701824, $2, (int_64)7235032801370701824, $4, [28])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235032801370701824) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235032801370701825
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4) = (int_64)7235032801370701824
	*($4 + [40]) = $6
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235032801370701824
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [8958])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $45(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)4982863551778521088
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)4982863551778521088
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $44(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8952])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8952])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $65($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $57($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $60($0, $1, $2, CALL $65($2))
}

int_32 .FUNC $63 ()
{
	return [9312]
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8952])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8952])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $71($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}