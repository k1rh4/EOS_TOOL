(data (i32.const 8192) "multiplication overflow\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8260) "multiplication underflow\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8371) "0123456789abcdef\00")
(data (i32.const 8388) "length must be even\00")
(data (i32.const 8408) "not a hex digit\00")
(data (i32.const 8424) "seed hash length mismatch\00")
(data (i32.const 8450) "seed hash mismatch\00")
(data (i32.const 8469) "card suit error\00")
(data (i32.const 8485) "card value error\00")
(data (i32.const 8502) "\e2\99\a0\00%d\00")
(data (i32.const 8509) "\e2\99\a5\00")
(data (i32.const 8513) "\e2\99\a3\00")
(data (i32.const 8517) "\e2\99\a6\00")
(data (i32.const 8521) "A\00%lld\00")
(data (i32.const 8528) "J\00%llu\00")
(data (i32.const 8535) "Q\00")
(data (i32.const 8537) "K\00")
(data (i32.const 8539) "The number of cards must be 5\00")
(data (i32.const 8569) "unknown rank\00")
(data (i32.const 8582) "out of decks\00")
(data (i32.const 8595) " \00")
(data (i32.const 8597) "HighCard\00")
(data (i32.const 8606) "JacksOrBetter\00")
(data (i32.const 8620) "TwoPairs\00")
(data (i32.const 8629) "ThreeOfAKind\00")
(data (i32.const 8642) "Straight\00")
(data (i32.const 8651) "Flush\00")
(data (i32.const 8657) "FullHouse\00")
(data (i32.const 8667) "FourOfAKind\00")
(data (i32.const 8679) "StraightFlush\00")
(data (i32.const 8693) "RoyalFlush\00")
(data (i32.const 8704) "Unknown\00")
(data (i32.const 17160) "less than min bet quantity\00")
(data (i32.const 17187) "larger than max bet quantity\00")
(data (i32.const 17216) "there is a pending bet\00")
(data (i32.const 17239) "subbalance\00")
(data (i32.const 17250) "no bet to replace\00")
(data (i32.const 17268) "card already replaced\00")
(data (i32.const 17290) "no bet to reveal\00")
(data (i32.const 17307) "replace cards before reveal\00")
(data (i32.const 17335) "-\00")
(data (i32.const 17337) "rank out of range\00")
(data (i32.const 17355) "reveal\00")
(data (i32.const 17362) " wins \00")
(data (i32.const 17369) "addbalance\00")
(data (i32.const 17380) "bank diff: \00")
(data (i32.const 17392) "issue: \00")
(data (i32.const 17400) "issue to referrer: \00")
(data (i32.const 17420) "seed hash expired\00")
(data (i32.const 17438) "hash duplicate\00")
(data (i32.const 17453) "invalid number of hands\00")
(data (i32.const 17477) "invalid referrer\00")
(data (i32.const 17494) "EndlessPoker-JacksOrBetter: \00")
(data (i32.const 17523) "transfer dividend: \00")
(data (i32.const 17543) "bet id:\00")
(data (i32.const 17551) "endless.game\00")
(data (i32.const 17564) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17613) "invalid symbol name\00")
(data (i32.const 17640) "\00\00\00\00\00\00\00\00\808\01\00\00\00\00\00\01\00\00\00\00\00\00\00PF\00\00\00\00\00\00\02\00\00\00\00\00\00\00\e0.\00\00\00\00\00\00\03\00\00\00\00\00\00\00X\1b\00\00\00\00\00\00\04\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\05\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\08\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\19\00\00\00\00\00\00\00\c8\00\00\00\00\00\00\002\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00\fa\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00")
(data (i32.const 17800) "unable to find key\00")
(data (i32.const 17819) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17870) "error reading iterator\00")
(data (i32.const 17893) "read\00")
(data (i32.const 17898) "attempt to add asset with different symbol\00")
(data (i32.const 17941) "addition underflow\00")
(data (i32.const 17960) "addition overflow\00")
(data (i32.const 17980) "@F\00\00")
(data (i32.const 17984) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18017) "string is too long to be a valid name\00")
(data (i32.const 18055) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18122) "character is not in allowed character set for names\00")
(data (i32.const 18174) "write\00")
(data (i32.const 18180) "divide by zero\00")
(data (i32.const 18195) "signed division overflow\00")
(data (i32.const 18220) "-%lld.%s %s\00")
(data (i32.const 18232) "%lld.%s %s\00")
(data (i32.const 18243) "attempt to subtract asset with different symbol\00")
(data (i32.const 18291) "subtraction underflow\00")
(data (i32.const 18313) "subtraction overflow\00")
(data (i32.const 18334) "get\00")
(data (i32.const 18338) "cannot pass end iterator to modify\00")
(data (i32.const 18373) "object passed to modify is not in multi_index\00")
(data (i32.const 18419) "cannot modify objects in table of another contract\00")
(data (i32.const 18470) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18529) "cannot create objects in table of another contract\00")
(data (i32.const 18580) "remainings size must >= count\00")
(data (i32.const 18610) "cannot pass end iterator to erase\00")
(data (i32.const 18644) "cannot increment end iterator\00")
(data (i32.const 18674) "object passed to erase is not in multi_index\00")
(data (i32.const 18719) "cannot erase objects in table of another contract\00")
(data (i32.const 18769) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18832) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$2))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$5 (param i64) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "__multi3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$19 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$44 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$45 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$46 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$47 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$48 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$49 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$50 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$51 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$52 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$53 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$54 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $66))
(export "_Znwj" (func $107))
(export "_ZdlPv" (func $109))
(export "_Znaj" (func $108))
(export "_ZdaPv" (func $110))
(export "_ZnwjSt11align_val_t" (func $111))
(export "_ZnajSt11align_val_t" (func $112))
(export "_ZdlPvSt11align_val_t" (func $113))
(export "_ZdaPvSt11align_val_t" (func $114))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $8 $54 $25 $52 $30 $131 $133)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18912))
(global $global$2 i32 (i32.const 18912))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18174])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), *($0 + [20]))
	CALL $51(*($1), *($0 + [24]))
	CALL $99(*($1), *($0 + [28]))
	$1 = *($1)
	*($2 + [7]) = *(*($0 + [32]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [18174])
	CALL memcpy(*($1 + [4]), ($2 + [7]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18334])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $50($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17893])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($1 + [68])))
	
.LABEL $label$5
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [41])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$0 = *($0)
	$0 = *($0 + [28])
	$3 = *($0 + [4])
	$4 = ($3 - $0)
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = (( $1 ? ($4 + $1) : ((int_32)$0 == (int_32)$3) ) + [1])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18174])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17870])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $139($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [88]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [60])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [84])
	CALL $93(($3 + [40]), ($3 + [32]))
	*($5 + [96]) = [-1]
	*($5 + [92]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $142($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [68])))
	
.LABEL $label$11
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17893])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17893])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), *($0 + [20]))
	CALL $76(*($1), *($0 + [24]))
	CALL $75(*($1), *($0 + [28]))
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17893])
	CALL memcpy(($2 + [7]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $139($1)
	
.LABEL $label$2
	*(CALL $128()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $139(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $142($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $115 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $136($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [6] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18832]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $130([7], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $128())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $138($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $121($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $96(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $126 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $120(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8530], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $120(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $120(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [18529])
	*(($5 = CALL _Znwj([64]))) = (int_64)1
	$6 = *([0] + [8712])
	*($5 + [8]) = $6
	$8 = *([0] + [8720])
	*(($7 = ($5 + [16]))) = $8
	*($5 + [24]) = $6
	*(($9 = ($5 + [32]))) = $8
	$6 = CALL current_time()
	*($5 + [48]) = $1
	*($5 + [40]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($7) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($9) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*($4 + [64]) = ($4 + [44])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($5 + [8])
	*($4 + [80]) = $5
	*($4 + [88]) = ($5 + [24])
	*($4 + [92]) = ($5 + [40])
	CALL $91(($4 + [80]), ($4 + [72]))
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)7235159538876284928, $2, (int_64)7235159538876284928, $4, [44])
	*($5 + [52]) = $7
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159538876284928) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159538876284929
	
.LABEL $label$1
	*($4 + [80]) = $5
	*($4) = (int_64)7235159538876284928
	*($4 + [56]) = $7
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159538876284928
	*($3 + [16]) = $7
	*($4 + [80]) = [0]
	*($3) = $5
	*($9) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $90(($1 + [24]), ($4 + [80]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18373])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18419])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [40]))) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($6 = ($1 + [24]))) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($7 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18470])
	*($4 + [64]) = ($4 + [44])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = $7
	*($4 + [80]) = $1
	*($4 + [88]) = $6
	*($4 + [92]) = $5
	CALL $91(($4 + [80]), ($4 + [72]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [44])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159538876284928) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159538876284929
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $125 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $120(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8523], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $120(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $120(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17870])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $139($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([20])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[3]), [17893])
	CALL memcpy($5, $2, [4])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[4]), [17893])
	CALL memcpy(($5 + [4]), ($2 + [4]), [4])
	*($5 + [16]) = [-1]
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $142($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $50($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18174])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18174])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $80(CALL $79($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $50($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [18174])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [18174])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [18174])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $51(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18017])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18122])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18055])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18122])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18674])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18719])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)*(*(($6 + [-24])))) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)$7 != (int_32)*(*($9))) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18769])
	$8 = *($5)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$7 = ($6 + [-24])
	$4 = *($7)
	*($7) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [12])))
	$6 = *($1 + [16])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7615816218057900032, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18644])
	$2 = *($0 + [4])
	$3 = *($2 + [16])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)7615816218057900032, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [16]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)$5 == (int_64)*($8)) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$6), [17819])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $43($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)7615816218057900032, $5))
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$6), [17819])
	
.LABEL $label$2
	*($8 + [16]) = $4
	*(($0 + [4])) = $8
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7615816218057900032, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)$6 == (int_64)*($4)) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$7), [17819])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $43($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)7615816218057900032, $6))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$7), [17819])
	
.LABEL $label$2
	*($4 + [16]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $120(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8506], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $120(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $120(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $128 ()
{
	return [8748]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	$1 = (*($1) & [15])
	$0 = (*($0) & [15])
	if ( ((int_32)$0 != (int_32)[1]) ){ goto $label$1 }
	return ((int_32)$1 != (int_32)[1])
	
.LABEL $label$1
	return (((uint_32)($0 & [255]) > (uint_32)($1 & [255])) & ((int_32)$1 != (int_32)[1]))
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = ($0 + [4])
	$3 = ($0 + [8])
	$4 = [16]
	
.LOOP $label$1:
	$5 = CALL $6(($1 + [8]), (($4 | [1]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$3 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$2 
	
.LABEL $label$3
	CALL $10($0, $5)
	
.LABEL $label$2
	$5 = CALL $6($5, (($4 | [2]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$5 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$4 
	
.LABEL $label$5
	CALL $10($0, $5)
	
.LABEL $label$4
	$5 = CALL $6($5, (($4 | [3]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$7 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$6 
	
.LABEL $label$7
	CALL $10($0, $5)
	
.LABEL $label$6
	$5 = CALL $6($5, (($4 | [4]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$9 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$8 
	
.LABEL $label$9
	CALL $10($0, $5)
	
.LABEL $label$8
	$5 = CALL $6($5, (($4 | [5]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$11 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$10 
	
.LABEL $label$11
	CALL $10($0, $5)
	
.LABEL $label$10
	$5 = CALL $6($5, (($4 | [6]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$13 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$12 
	
.LABEL $label$13
	CALL $10($0, $5)
	
.LABEL $label$12
	$5 = CALL $6($5, (($4 | [7]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$15 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $10($0, $5)
	
.LABEL $label$14
	$5 = CALL $6($5, (($4 | [8]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$17 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$16 
	
.LABEL $label$17
	CALL $10($0, $5)
	
.LABEL $label$16
	$5 = CALL $6($5, (($4 | [9]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$19 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$18 
	
.LABEL $label$19
	CALL $10($0, $5)
	
.LABEL $label$18
	$5 = CALL $6($5, (($4 | [10]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$21 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$20 
	
.LABEL $label$21
	CALL $10($0, $5)
	
.LABEL $label$20
	$5 = CALL $6($5, (($4 | [11]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$23 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$22 
	
.LABEL $label$23
	CALL $10($0, $5)
	
.LABEL $label$22
	$5 = CALL $6($5, (($4 | [12]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$25 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	goto $label$24 
	
.LABEL $label$25
	CALL $10($0, $5)
	
.LABEL $label$24
	$5 = CALL $6($5, (($4 | [13]) & [255]))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$27 }
	*($6) = *($1 + [8])
	*($2) = (*($2) + [1])
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)[80]) ){ goto $label$1 }
	goto $label$26 
	
.LABEL $label$27
	CALL $10($0, $5)
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)[80]) ){ goto $label$1 }
	
.LABEL $label$26
	$global$0 = ($1 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0) = $1
	if ( ((($1 & [240]) + [-16]) <= [64]) ){ goto $label$2 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = CALL $136([8469])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($2) = ($1 << [1])
	$3 = ($2 | [1])
	$4 = $3
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($3)
	*($2) = ($3 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $1
	$3 = ($2 | [1])
	
.LABEL $label$4
	CALL memcpy($4, [8469], $1)
	
.LABEL $label$3
	*(($4 + $1)) = [0]
	CALL eosio_assert([0], ( *($2 + [8]) ? $3 : (*($2) & [1]) ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$6
	$1 = *($0)
	
.LABEL $label$2
	if ( ((($1 & [15]) + [-1]) <= [13]) ){ goto $label$7 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = CALL $136([8485])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($2) = ($1 << [1])
	$3 = ($2 | [1])
	$4 = $3
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($3)
	*($2) = ($3 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $1
	$3 = ($2 | [1])
	
.LABEL $label$9
	CALL memcpy($4, [8485], $1)
	
.LABEL $label$8
	*(($4 + $1)) = [0]
	CALL eosio_assert([0], ( *($2 + [8]) ? $3 : (*($2) & [1]) ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$1
	CALL $115($2)
	return (unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = uint_32(((*($1) & [240]) + [-16]) >> [4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$1 }
	goto $label$5 
	
.LABEL $label$5
	CALL $122($0, [8502])
	goto $label$1 
	
.LABEL $label$4
	CALL $122($0, [8509])
	goto $label$1 
	
.LABEL $label$3
	CALL $122($0, [8513])
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0, [8517])
	
.LABEL $label$1
	$3 = (*($1) & [15])
	$1 = ($3 + [-1])
	if ( ((uint_32)$1 > (uint_32)[12]) ){ goto $label$6 }
	goto $label$10 
	
.LABEL $label$10
	CALL $122($0, [8521])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$9
	CALL $122($0, [8528])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$8
	CALL $122($0, [8535])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$7
	CALL $122($0, [8537])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$6
	CALL $124($2, $3)
	$1 = *($2)
	$3 = ($1 & [1])
	CALL $123($0, ( *($2 + [8]) ? ($2 | [1]) : $3 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $3 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$11
	$global$0 = ($2 + [16])
	$3
	$1
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 & [1])
	CALL $143(($2 + [48]), ( *($0 + [8]) ? ($0 + [1]) : $4 ), ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 ))
	$5 = *($2 + [48])
	*($2 + [27]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = *($2 + [56])
	*($2 + [19]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$6 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$6 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $5)
	*($2 + [31]) = $0
	*($2 + [30]) = uint_32($0 >> [8])
	*($2 + [29]) = uint_32($0 >> [16])
	*($2 + [28]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $6)
	*($2 + [23]) = $0
	*($2 + [22]) = uint_32($0 >> [8])
	*($2 + [21]) = uint_32($0 >> [16])
	*($2 + [20]) = uint_32($0 >> [24])
	$5 = *((($2 + [48]) + [24]))
	*($2 + [39]) = $5
	$6 = *($2 + [64])
	*($2 + [43]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($2 + [42]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($2 + [41]) = (uint_64)$6 >> (uint_64)(int_64)48)
	*($2 + [40]) = (uint_64)$6 >> (uint_64)(int_64)56)
	*($2 + [35]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($2 + [34]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($2 + [33]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($2 + [32]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $5)
	*($2 + [38]) = uint_32($0 >> [8])
	*($2 + [37]) = uint_32($0 >> [16])
	*($2 + [36]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $6)
	*($2 + [47]) = $0
	*($2 + [46]) = uint_32($0 >> [8])
	*($2 + [45]) = uint_32($0 >> [16])
	*($2 + [44]) = uint_32($0 >> [24])
	CALL $1($2, $1)
	CALL eosio_assert(((int_32)(*($2 + [4]) - *($2)) == (int_32)[32]), [8424])
	CALL eosio_assert((CALL $135(($2 + [16]), *($2), [32]) == 0), [8450])
	$0 = *($2)
	if ( ($0 == 0) ){ goto $label$1 }
	*($2 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	CALL $143($2, $0, [32])
	$4 = *($2 + [8])
	*($0) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($0 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($0 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($0 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	$5 = (CASTING uint_32)(uint_64 $4)
	*($0 + [7]) = $5
	$4 = *($2)
	*($0 + [8]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($0 + [9]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($0 + [10]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($0 + [11]) = (uint_64)$4 >> (uint_64)(int_64)32)
	$6 = (CASTING uint_32)(uint_64 $4)
	*($0 + [15]) = $6
	*($0 + [4]) = uint_32($5 >> [24])
	*($0 + [5]) = uint_32($5 >> [16])
	*($0 + [6]) = uint_32($5 >> [8])
	*($0 + [12]) = uint_32($6 >> [24])
	*($0 + [13]) = uint_32($6 >> [16])
	*($0 + [14]) = uint_32($6 >> [8])
	$4 = *($2 + [16])
	$7 = *(($2 + [24]))
	*($0 + [17]) = (uint_64)$7 >> (uint_64)(int_64)48)
	*($0 + [16]) = (uint_64)$7 >> (uint_64)(int_64)56)
	*($0 + [18]) = (uint_64)$7 >> (uint_64)(int_64)40)
	*($0 + [19]) = (uint_64)$7 >> (uint_64)(int_64)32)
	$5 = (CASTING uint_32)(uint_64 $7)
	*($0 + [20]) = uint_32($5 >> [24])
	*($0 + [21]) = uint_32($5 >> [16])
	*($0 + [22]) = uint_32($5 >> [8])
	*($0 + [23]) = $5
	*($0 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($0 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($0 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($0 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	$5 = (CASTING uint_32)(uint_64 $4)
	*($0 + [28]) = uint_32($5 >> [24])
	*($0 + [29]) = uint_32($5 >> [16])
	*($0 + [30]) = uint_32($5 >> [8])
	*($0 + [31]) = $4
	$global$0 = ($2 + [32])
	return (CASTING uint_32)(uint_64 ((uint_64)$3 % (uint_64)(CASTING uint_64)(uint_32 $1)))
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $116(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC memory ()
{
	CALL $106()
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL eosio_assert((((int_32)$4 ^ (int_32)[-1]) & [1]), [8388])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = uint_32($4 >> [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = CALL _Znwj($3)
	$6 = ($5 + $3)
	$3 = *($0)
	$7 = ($0 + [4])
	$8 = (*($7) - $3)
	$9 = ($5 - $8)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($9, $3, $8)
	$3 = *($0)
	
.LABEL $label$2
	*($0) = $9
	*($7) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$3 }
	$10 = ($1 + [1])
	$11 = [0]
	$12 = ($1 + [8])
	
.LOOP $label$4:
	$6 = *((( *($12) ? $10 : (*($1) & [1]) ) + $11))
	$5 = [16]
	$3 = [8371]
	
.LOOP $label$5:
	$9 = ((int_32)*($9) < (int_32)$6)
	$8 = ((int_32)$5 / (int_32)[2])
	$9 = ($3 + $8)
	$3 = ( ($9 + [1]) ? $3 : $9 )
	$5 = ( (($5 + [-1]) - $8) ? $8 : $9 )
	if ( $5 ){ goto $label$5 }
	CALL eosio_assert(((int_32)$3 != (int_32)[8387]), [8408])
	$7 = *((( *($12) ? $10 : (*($1) & [1]) ) + ($11 | [1])))
	$8 = [16]
	$5 = [8371]
	
.LOOP $label$6:
	$6 = ((int_32)*($6) < (int_32)$7)
	$9 = ((int_32)$8 / (int_32)[2])
	$6 = ($5 + $9)
	$5 = ( ($6 + [1]) ? $5 : $6 )
	$8 = ( (($8 + [-1]) - $9) ? $9 : $6 )
	if ( $8 ){ goto $label$6 }
	CALL eosio_assert(((int_32)$5 != (int_32)[8387]), [8408])
	$5 = (($5 - [8371]) | (($3 - [8371]) << [4]))
	*($2 + [15]) = $5
	$3 = ($0 + [4])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($8) = $5
	*($3) = (*($3) + [1])
	$11 = ($11 + [2])
	if ( ($11 <= $4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL $2($0, ($2 + [15]))
	$11 = ($11 + [2])
	if ( ($11 <= $4) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $14($0, *($1))
	CALL $14($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	if ( ((int_32)(*($0 + [4]) - *($0)) == (int_32)[5]) ){ goto $label$5 }
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = CALL $136([8539])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*($1 + [16]) = ($2 << [1])
	$3 = (($1 + [16]) | [1])
	$4 = $3
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($3)
	*($1 + [16]) = ($3 | [1])
	*($1 + [24]) = $4
	*($1 + [20]) = $2
	$3 = (($1 + [16]) | [1])
	
.LABEL $label$7
	CALL memcpy($4, [8539], $2)
	
.LABEL $label$6
	*(($4 + $2)) = [0]
	CALL eosio_assert([0], ( *($1 + [24]) ? $3 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$5
	$2 = CALL $17($0)
	if ( (CALL $18($0) == 0) ){ goto $label$11 }
	if ( ($2 == 0) ){ goto $label$10 }
	$global$0 = ($1 + [32])
	return ( [9] ? [8] : ((int_32)$2 == (int_32)[1]) )
	
.LABEL $label$11
	if ( ($2 == 0) ){ goto $label$9 }
	$global$0 = ($1 + [32])
	return [4]
	
.LABEL $label$10
	$global$0 = ($1 + [32])
	return [5]
	
.LABEL $label$9
	CALL $19(($1 + [16]), $0)
	$5 = (($1 + [16]) | [4])
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$12 }
	$4 = (($1 + [16]) | [4])
	$3 = *($2 + [16])
	if ( ((int_32)$3 < (int_32)[2]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$12
	$2 = $5
	$4 = $5
	$6 = [4]
	goto $label$1 
	
.LABEL $label$4
	CALL $115(($1 + [16]))
	
.LABEL $label$3
	$6 = [77]
	goto $label$1 
	
.LABEL $label$2
	$6 = [2]
	
.LABEL $label$1
	
.LOOP $label$13:
	goto $label$162 
	
.LABEL $label$166
	$4 = $2
	$2 = $3
	$3 = *($2 + [16])
	if ( ((int_32)$3 < (int_32)[2]) ){ goto $label$79 }
	$6 = [77]
	goto $label$13 
	
.LABEL $label$165
	$3 = *($2)
	if ( $3 ){ goto $label$75 }
	goto $label$76 
	
.LABEL $label$164
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$74 }
	$6 = [3]
	goto $label$13 
	
.LABEL $label$163
	$4 = ($2 + [4])
	$3 = *($2 + [4])
	if ( ($3 == 0) ){ goto $label$77 }
	$6 = [0]
	goto $label$13 
	
.LABEL $label$162
	$2 = $4
	goto $label$78 
	
.LABEL $label$161
	$3 = *($4)
	if ( $3 ){ goto $label$73 }
	$6 = [74]
	goto $label$13 
	
.LABEL $label$160
	*(($3 = CALL _Znwj([32])) + [16 align=4]) = (int_64)1
	*($3 + [24 align=4]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = $2
	*($4) = $3
	$2 = $3
	$7 = *(*($1 + [16]))
	if ( ($7 == 0) ){ goto $label$14 }
	$6 = [75]
	goto $label$13 
	
.LABEL $label$159
	*($1 + [16]) = $7
	$2 = *($4)
	$6 = [76]
	goto $label$13 
	
.LABEL $label$158
	CALL $13(*($1 + [20]), $2)
	*($1 + [24]) = (*($1 + [24]) + [1])
	goto $label$72 
	
.LABEL $label$157
	$4 = $2
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$71 }
	$6 = [5]
	goto $label$13 
	
.LABEL $label$156
	$2 = [0]
	if ( ((int_32)((int_32)(*(($3 + [24])) - *(($3 + [20]))) / (int_32)[12]) == (int_32)(*(($0 + [4])) - *($0))) ){ goto $label$70 }
	$6 = [6]
	goto $label$13 
	
.LABEL $label$155
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$69 }
	$6 = [7]
	goto $label$13 
	
.LABEL $label$154
	$4 = (($1 + [16]) | [4])
	$0 = $2
	$3 = *($0 + [16])
	if ( ((int_32)$3 < (int_32)[3]) ){ goto $label$67 }
	goto $label$68 
	
.LABEL $label$153
	$4 = $0
	$0 = $3
	$3 = *($0 + [16])
	if ( ((int_32)$3 < (int_32)[3]) ){ goto $label$81 }
	$6 = [12]
	goto $label$13 
	
.LABEL $label$152
	$3 = *($0)
	if ( $3 ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$151
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$66 }
	$6 = [9]
	goto $label$13 
	
.LABEL $label$150
	$4 = ($0 + [4])
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$65 }
	$6 = [10]
	goto $label$13 
	
.LABEL $label$149
	$0 = $4
	goto $label$80 
	
.LABEL $label$148
	$0 = $5
	$4 = $5
	$6 = [72]
	goto $label$13 
	
.LABEL $label$147
	$3 = *($4)
	if ( $3 ){ goto $label$62 }
	$6 = [69]
	goto $label$13 
	
.LABEL $label$146
	*(($3 = CALL _Znwj([32])) + [16 align=4]) = (int_64)2
	*($3 + [24 align=4]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = $0
	*($4) = $3
	$2 = $3
	$0 = *(*($1 + [16]))
	if ( ($0 == 0) ){ goto $label$15 }
	$6 = [70]
	goto $label$13 
	
.LABEL $label$145
	*($1 + [16]) = $0
	$2 = *($4)
	$6 = [71]
	goto $label$13 
	
.LABEL $label$144
	CALL $13(*($1 + [20]), $2)
	*($1 + [24]) = (*($1 + [24]) + [1])
	$2 = *($1 + [20])
	goto $label$61 
	
.LABEL $label$143
	$4 = $0
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$60 }
	$6 = [14]
	goto $label$13 
	
.LABEL $label$142
	$7 = *(($3 + [20]))
	$3 = *(($3 + [24]))
	if ( ($2 == 0) ){ goto $label$59 }
	$6 = [15]
	goto $label$13 
	
.LABEL $label$141
	$0 = (($1 + [16]) | [4])
	$4 = *($2 + [16])
	if ( ((int_32)$4 < (int_32)[4]) ){ goto $label$57 }
	goto $label$58 
	
.LABEL $label$140
	$0 = $2
	$2 = $4
	$4 = *($2 + [16])
	if ( ((int_32)$4 < (int_32)[4]) ){ goto $label$83 }
	$6 = [20]
	goto $label$13 
	
.LABEL $label$139
	$4 = *($2)
	if ( $4 ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$138
	if ( ((int_32)$4 == (int_32)[3]) ){ goto $label$56 }
	$6 = [17]
	goto $label$13 
	
.LABEL $label$137
	$0 = ($2 + [4])
	$4 = *($2 + [4])
	if ( ($4 == 0) ){ goto $label$55 }
	$6 = [18]
	goto $label$13 
	
.LABEL $label$136
	$2 = $0
	goto $label$82 
	
.LABEL $label$135
	$2 = $5
	$0 = $5
	$6 = [67]
	goto $label$13 
	
.LABEL $label$134
	$4 = *($0)
	if ( $4 ){ goto $label$52 }
	$6 = [64]
	goto $label$13 
	
.LABEL $label$133
	*(($4 = CALL _Znwj([32])) + [16 align=4]) = (int_64)3
	*($4 + [24 align=4]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [8]) = $2
	*($0) = $4
	$2 = $4
	$8 = *(*($1 + [16]))
	if ( ($8 == 0) ){ goto $label$16 }
	$6 = [65]
	goto $label$13 
	
.LABEL $label$132
	*($1 + [16]) = $8
	$2 = *($0)
	$6 = [66]
	goto $label$13 
	
.LABEL $label$131
	CALL $13(*($1 + [20]), $2)
	*($1 + [24]) = (*($1 + [24]) + [1])
	goto $label$51 
	
.LABEL $label$130
	$0 = $2
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$50 }
	$6 = [22]
	goto $label$13 
	
.LABEL $label$129
	$0 = ($3 - $7)
	if ( ((int_32)(*(($4 + [24])) - *(($4 + [20]))) != (int_32)[12]) ){ goto $label$49 }
	$6 = [63]
	goto $label$13 
	
.LABEL $label$128
	$2 = ( [6] ? [3] : ((int_32)$0 == (int_32)[12]) )
	goto $label$29 
	
.LABEL $label$127
	if ( ((int_32)$0 != (int_32)[12]) ){ goto $label$48 }
	$6 = [49]
	goto $label$13 
	
.LABEL $label$126
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$27 }
	$6 = [50]
	goto $label$13 
	
.LABEL $label$125
	$5 = (($1 + [16]) | [4])
	$0 = *($2 + [16])
	if ( ((int_32)$0 < (int_32)[3]) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$124
	$5 = $2
	$2 = $0
	$0 = *($2 + [16])
	if ( ((int_32)$0 < (int_32)[3]) ){ goto $label$87 }
	$6 = [55]
	goto $label$13 
	
.LABEL $label$123
	$0 = *($2)
	if ( $0 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$122
	if ( ((int_32)$0 == (int_32)[2]) ){ goto $label$24 }
	$6 = [52]
	goto $label$13 
	
.LABEL $label$121
	$5 = ($2 + [4])
	$0 = *($2 + [4])
	if ( ($0 == 0) ){ goto $label$23 }
	$6 = [53]
	goto $label$13 
	
.LABEL $label$120
	$2 = $5
	goto $label$86 
	
.LABEL $label$119
	$2 = [2]
	if ( ((int_32)$0 == (int_32)[24]) ){ goto $label$47 }
	$6 = [25]
	goto $label$13 
	
.LABEL $label$118
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$46 }
	$6 = [26]
	goto $label$13 
	
.LABEL $label$117
	$5 = (($1 + [16]) | [4])
	$0 = *($2 + [16])
	if ( ((int_32)$0 < (int_32)[5]) ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$116
	$5 = $2
	$2 = $0
	$0 = *($2 + [16])
	if ( ((int_32)$0 < (int_32)[5]) ){ goto $label$85 }
	$6 = [31]
	goto $label$13 
	
.LABEL $label$115
	$0 = *($2)
	if ( $0 ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$114
	if ( ((int_32)$0 == (int_32)[4]) ){ goto $label$43 }
	$6 = [28]
	goto $label$13 
	
.LABEL $label$113
	$5 = ($2 + [4])
	$0 = *($2 + [4])
	if ( ($0 == 0) ){ goto $label$42 }
	$6 = [29]
	goto $label$13 
	
.LABEL $label$112
	$2 = $5
	goto $label$84 
	
.LABEL $label$111
	$2 = $5
	$0 = *($5)
	if ( $0 ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$110
	$5 = $2
	$6 = [57]
	goto $label$13 
	
.LABEL $label$109
	$0 = *($5)
	if ( $0 ){ goto $label$20 }
	$6 = [59]
	goto $label$13 
	
.LABEL $label$108
	*(($0 = CALL _Znwj([32])) + [16 align=4]) = (int_64)2
	*($0 + [24 align=4]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [8]) = $2
	*($5) = $0
	$2 = $0
	$4 = *(*($1 + [16]))
	if ( ($4 == 0) ){ goto $label$17 }
	$6 = [60]
	goto $label$13 
	
.LABEL $label$107
	*($1 + [16]) = $4
	$2 = *($5)
	$6 = [61]
	goto $label$13 
	
.LABEL $label$106
	CALL $13(*($1 + [20]), $2)
	*($1 + [24]) = (*($1 + [24]) + [1])
	$6 = [58]
	goto $label$13 
	
.LABEL $label$105
	$2 = (*(*(*(($0 + [20])))) & [15])
	$2 = (((int_32)$2 == (int_32)[1]) | ((uint_32)$2 > (uint_32)[10]))
	$6 = [42]
	goto $label$13 
	
.LABEL $label$104
	CALL $20(($1 + [16]), *($1 + [20]))
	$global$0 = ($1 + [32])
	return $2
	
.LABEL $label$103
	$2 = $5
	$0 = *($5)
	if ( $0 ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$102
	$5 = $2
	$6 = [33]
	goto $label$13 
	
.LABEL $label$101
	$0 = *($5)
	if ( $0 ){ goto $label$39 }
	$6 = [45]
	goto $label$13 
	
.LABEL $label$100
	*(($0 = CALL _Znwj([32])) + [16 align=4]) = (int_64)4
	*($0 + [24 align=4]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [8]) = $2
	*($5) = $0
	$2 = $0
	$4 = *(*($1 + [16]))
	if ( ($4 == 0) ){ goto $label$28 }
	$6 = [46]
	goto $label$13 
	
.LABEL $label$99
	*($1 + [16]) = $4
	$2 = *($5)
	$6 = [47]
	goto $label$13 
	
.LABEL $label$98
	CALL $13(*($1 + [20]), $2)
	*($1 + [24]) = (*($1 + [24]) + [1])
	$6 = [34]
	goto $label$13 
	
.LABEL $label$97
	$2 = [7]
	if ( ((int_32)(*(($0 + [24])) - *(($0 + [20]))) == (int_32)[12]) ){ goto $label$36 }
	$6 = [35]
	goto $label$13 
	
.LABEL $label$96
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = CALL $136([8569])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$35 }
	$6 = [36]
	goto $label$13 
	
.LABEL $label$95
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$34 }
	$6 = [43]
	goto $label$13 
	
.LABEL $label$94
	*($1) = ($2 << [1])
	$4 = ($1 | [1])
	$0 = $4
	if ( $2 ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$93
	$4 = (($2 + [16]) & [-16])
	$0 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $0
	*($1 + [4]) = $2
	$4 = ($1 | [1])
	$6 = [38]
	goto $label$13 
	
.LABEL $label$92
	CALL memcpy($0, [8569], $2)
	$6 = [39]
	goto $label$13 
	
.LABEL $label$91
	*(($0 + $2)) = [0]
	CALL eosio_assert([0], ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$31 }
	$6 = [40]
	goto $label$13 
	
.LABEL $label$90
	CALL _ZdlPv(*(($1 + [8])))
	$6 = [41]
	goto $label$13 
	
.LABEL $label$89
	$2 = [-1]
	goto $label$30 
	
.LABEL $label$88
	CALL $115($1)
	
.LABEL $label$87
	$6 = [51]
	goto $label$13 
	
.LABEL $label$86
	$6 = [54]
	goto $label$13 
	
.LABEL $label$85
	$6 = [27]
	goto $label$13 
	
.LABEL $label$84
	$6 = [30]
	goto $label$13 
	
.LABEL $label$83
	$6 = [16]
	goto $label$13 
	
.LABEL $label$82
	$6 = [19]
	goto $label$13 
	
.LABEL $label$81
	$6 = [8]
	goto $label$13 
	
.LABEL $label$80
	$6 = [11]
	goto $label$13 
	
.LABEL $label$79
	$6 = [2]
	goto $label$13 
	
.LABEL $label$78
	$6 = [1]
	goto $label$13 
	
.LABEL $label$77
	$6 = [4]
	goto $label$13 
	
.LABEL $label$76
	$6 = [78]
	goto $label$13 
	
.LABEL $label$75
	$6 = [1]
	goto $label$13 
	
.LABEL $label$74
	$6 = [4]
	goto $label$13 
	
.LABEL $label$73
	$6 = [5]
	goto $label$13 
	
.LABEL $label$72
	$6 = [5]
	goto $label$13 
	
.LABEL $label$71
	$6 = [74]
	goto $label$13 
	
.LABEL $label$70
	$6 = [42]
	goto $label$13 
	
.LABEL $label$69
	$6 = [73]
	goto $label$13 
	
.LABEL $label$68
	$6 = [12]
	goto $label$13 
	
.LABEL $label$67
	$6 = [8]
	goto $label$13 
	
.LABEL $label$66
	$6 = [72]
	goto $label$13 
	
.LABEL $label$65
	$6 = [72]
	goto $label$13 
	
.LABEL $label$64
	$6 = [13]
	goto $label$13 
	
.LABEL $label$63
	$6 = [11]
	goto $label$13 
	
.LABEL $label$62
	$6 = [14]
	goto $label$13 
	
.LABEL $label$61
	$6 = [14]
	goto $label$13 
	
.LABEL $label$60
	$6 = [69]
	goto $label$13 
	
.LABEL $label$59
	$6 = [68]
	goto $label$13 
	
.LABEL $label$58
	$6 = [20]
	goto $label$13 
	
.LABEL $label$57
	$6 = [16]
	goto $label$13 
	
.LABEL $label$56
	$6 = [67]
	goto $label$13 
	
.LABEL $label$55
	$6 = [67]
	goto $label$13 
	
.LABEL $label$54
	$6 = [21]
	goto $label$13 
	
.LABEL $label$53
	$6 = [19]
	goto $label$13 
	
.LABEL $label$52
	$6 = [22]
	goto $label$13 
	
.LABEL $label$51
	$6 = [22]
	goto $label$13 
	
.LABEL $label$50
	$6 = [64]
	goto $label$13 
	
.LABEL $label$49
	$6 = [23]
	goto $label$13 
	
.LABEL $label$48
	$6 = [24]
	goto $label$13 
	
.LABEL $label$47
	$6 = [42]
	goto $label$13 
	
.LABEL $label$46
	$6 = [48]
	goto $label$13 
	
.LABEL $label$45
	$6 = [31]
	goto $label$13 
	
.LABEL $label$44
	$6 = [27]
	goto $label$13 
	
.LABEL $label$43
	$6 = [33]
	goto $label$13 
	
.LABEL $label$42
	$6 = [33]
	goto $label$13 
	
.LABEL $label$41
	$6 = [32]
	goto $label$13 
	
.LABEL $label$40
	$6 = [30]
	goto $label$13 
	
.LABEL $label$39
	$6 = [34]
	goto $label$13 
	
.LABEL $label$38
	$6 = [45]
	goto $label$13 
	
.LABEL $label$37
	$6 = [34]
	goto $label$13 
	
.LABEL $label$36
	$6 = [42]
	goto $label$13 
	
.LABEL $label$35
	$6 = [44]
	goto $label$13 
	
.LABEL $label$34
	$6 = [37]
	goto $label$13 
	
.LABEL $label$33
	$6 = [39]
	goto $label$13 
	
.LABEL $label$32
	$6 = [38]
	goto $label$13 
	
.LABEL $label$31
	$6 = [41]
	goto $label$13 
	
.LABEL $label$30
	$6 = [42]
	goto $label$13 
	
.LABEL $label$29
	$6 = [42]
	goto $label$13 
	
.LABEL $label$28
	$6 = [47]
	goto $label$13 
	
.LABEL $label$27
	$6 = [62]
	goto $label$13 
	
.LABEL $label$26
	$6 = [55]
	goto $label$13 
	
.LABEL $label$25
	$6 = [51]
	goto $label$13 
	
.LABEL $label$24
	$6 = [57]
	goto $label$13 
	
.LABEL $label$23
	$6 = [57]
	goto $label$13 
	
.LABEL $label$22
	$6 = [56]
	goto $label$13 
	
.LABEL $label$21
	$6 = [54]
	goto $label$13 
	
.LABEL $label$20
	$6 = [58]
	goto $label$13 
	
.LABEL $label$19
	$6 = [59]
	goto $label$13 
	
.LABEL $label$18
	$6 = [58]
	goto $label$13 
	
.LABEL $label$17
	$6 = [61]
	goto $label$13 
	
.LABEL $label$16
	$6 = [66]
	goto $label$13 
	
.LABEL $label$15
	$6 = [71]
	goto $label$13 
	
.LABEL $label$14
	$6 = [76]
	goto $label$13 
	(unreachable)
	$6
	return (unreachable)
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$3 = *($0 + [4])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	$4 = [0]
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$2 = ($3 - $2)
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL _Znwj($2)
	*(($1 + [24])) = ($6 + $2)
	*($1 + [16]) = $6
	*($1 + [20]) = $6
	$2 = *($0)
	$0 = (*(($0 + [4])) - $2)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($6, $2, $0)
	$5 = ($6 + $0)
	*($1 + [20]) = $5
	goto $label$8 
	
.LABEL $label$10
	$global$0 = ($1 + [32])
	return [0]
	
.LABEL $label$9
	$5 = $6
	
.LABEL $label$8
	*($1) = [1]
	CALL $21($6, $5, $1)
	$0 = *($1 + [16])
	$3 = *($0)
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$6 = [0]
	$0 = ($0 + [1])
	$2 = *($1 + [20])
	$5 = ($2 - $0)
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$6 = CALL _Znwj($5)
	*(($1 + [8])) = ($6 + $5)
	*($1) = $6
	*($1 + [4]) = $6
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$14:
	*($6) = *($0)
	$6 = (*($1 + [4]) + [1])
	*($1 + [4]) = $6
	$0 = ($0 + [1])
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$14 }
	$4 = *($1)
	
.LABEL $label$13
	$5 = ($3 & [15])
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$12
	$4 = $6
	$5 = ($3 & [15])
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$5 }
	
.LABEL $label$11
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$4 }
	$0 = ($5 + [-1])
	$2 = $4
	
.LOOP $label$16:
	if ( ((int_32)$0 != (int_32)(*($2) & [15])) ){ goto $label$15 }
	$0 = ($0 + [-1])
	$2 = ($2 + [1])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$16 }
	goto $label$4 
	
.LABEL $label$15
	$5 = [0]
	goto $label$4 
	
.LABEL $label$7
	CALL $127(($1 + [16]))
	
.LABEL $label$6
	CALL $127($1)
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$18 }
	$2 = ($6 - $4)
	$0 = [13]
	$6 = $4
	
.LOOP $label$19:
	if ( ((int_32)$0 != (int_32)(*($6) & [15])) ){ goto $label$17 }
	$5 = [1]
	$6 = ($6 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)($2 + $0) != (int_32)[13]) ){ goto $label$19 }
	goto $label$4 
	
.LABEL $label$18
	$5 = [1]
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$17
	$0 = [5]
	$6 = $4
	
.LOOP $label$20:
	if ( ((int_32)$0 != (int_32)(*($6) & [15])) ){ goto $label$3 }
	$6 = ($6 + [1])
	$5 = [5]
	$0 = ($0 + [-1])
	if ( ((int_32)($2 + $0) != (int_32)[5]) ){ goto $label$20 }
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$0 = *($1 + [16])
	if ( ($0 == 0) ){ goto $label$21 }
	*($1 + [20]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$21
	$global$0 = ($1 + [32])
	(unreachable)
	(unreachable)
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $127($0)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [20 align=4]) = (int_64)0
	$3 = (($2 + [16]) | [4])
	*($2 + [16]) = $3
	$5 = *($0 + [4])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = ($2 | [1])
	$7 = (($2 + [16]) + [8])
	
.LOOP $label$4:
	$8 = *($4)
	*(($9 = CALL _Znwj([16])) + [13]) = $8
	$0 = *($2 + [20])
	if ( $0 ){ goto $label$6 }
	$0 = $3
	$10 = $3
	goto $label$5 
	
.LABEL $label$6
	
.LOOP $label$9:
	if ( ((uint_32)($8 & [255]) >= (uint_32)*($0 + [13])) ){ goto $label$11 }
	$10 = *($0)
	if ( $10 ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$11
	$10 = *($0 + [4])
	if ( ($10 == 0) ){ goto $label$8 }
	
.LABEL $label$10
	$0 = $10
	goto $label$9 
	
.LABEL $label$8
	$10 = ($0 + [4])
	goto $label$5 
	
.LABEL $label$7
	$10 = $0
	
.LABEL $label$5
	*($9 + [8]) = $0
	*($9) = (int_64)0
	*($10) = $9
	$0 = *(*($2 + [16]))
	if ( ($0 == 0) ){ goto $label$12 }
	*($2 + [16]) = $0
	$9 = *($10)
	
.LABEL $label$12
	CALL $13(*($2 + [20]), $9)
	*($7) = (*($7) + [1])
	$0 = *($2 + [20])
	if ( ($0 == 0) ){ goto $label$13 }
	$11 = $3
	
.LOOP $label$14:
	$10 = *($0 + [13])
	$9 = ($8 & [255])
	if ( ((uint_32)$9 >= (uint_32)$10) ){ goto $label$15 }
	$11 = $0
	$0 = *($0)
	if ( $0 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$16 }
	$0 = *(($0 + [4]))
	if ( $0 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$19 }
	$10 = $0
	
.LOOP $label$20:
	$12 = (*($8 + [13]) <= $9)
	$10 = ( $10 ? $8 : $12 )
	$8 = *(($8 + ($12 << [2])))
	if ( $8 ){ goto $label$20 }
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$10 = $0
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	
.LOOP $label$21:
	$8 = ($9 <= *($0 + [13]))
	$11 = ( $0 ? $11 : $8 )
	$0 = *(($0 + ( [0] ? [4] : $8 )))
	if ( $0 ){ goto $label$21 }
	
.LABEL $label$17
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$13 }
	$0 = [0]
	
.LOOP $label$22:
	$9 = $0
	$8 = $10
	$0 = *($8 + [4])
	if ( ($0 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	$10 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$10 = *($8 + [8])
	if ( ((int_32)*($10) == (int_32)$8) ){ goto $label$23 }
	$8 = ($8 + [8])
	
.LOOP $label$26:
	$0 = *($8)
	$8 = ($0 + [8])
	$10 = *($0 + [8])
	if ( ((int_32)$0 != (int_32)*($10)) ){ goto $label$26 }
	
.LABEL $label$23
	$0 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$22 }
	if ( ($9 <= $1) ){ goto $label$13 }
	*(($10 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	$0 = CALL $136([8582])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$29 }
	*($2) = ($0 << [1])
	$8 = $6
	if ( $0 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($0 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($10) = $8
	*($2) = ($9 | [1])
	*($2 + [4]) = $0
	
.LABEL $label$28
	CALL memcpy($8, [8582], $0)
	
.LABEL $label$27
	*(($8 + $0)) = [0]
	CALL eosio_assert([0], ( *($10) ? $6 : (*($2) & [1]) ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$13
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	$0 = *($2 + [20])
	goto $label$1 
	
.LABEL $label$3
	CALL $115($2)
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL $14(($2 + [16]), $0)
	$global$0 = ($2 + [32])
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18334])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $95($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [17893])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	$3 = *($0 + [4])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	$4 = *($2)
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$5 = [1]
	$0 = ($2 + [1])
	$6 = ($3 - $0)
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL _Znwj($6)
	*(($1 + [8])) = ($2 + $6)
	*($1) = $2
	*($1 + [4]) = $2
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$9:
	*($2) = *($0)
	$6 = *($1 + [4])
	$2 = ($6 + [1])
	*($1 + [4]) = $2
	$0 = ($0 + [1])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$0 = ($3 + [-1])
	$2 = ($4 & [255])
	
.LOOP $label$10:
	if ( ((uint_32)((int_32)*(($0 + [1])) ^ (int_32)$2) >= (uint_32)[16]) ){ goto $label$4 }
	$5 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$8
	$global$0 = ($1 + [16])
	return [0]
	
.LABEL $label$7
	$5 = [1]
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	$5 = [1]
	
.LABEL $label$5
	$2 = $3
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	$2 = $3
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $127($1)
	
.LABEL $label$2
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	(unreachable)
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [4 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	$5 = *($1 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	$6 = ($2 + [8])
	$1 = [0]
	$7 = (*($4) & [15])
	if ( [0] ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$7 = $3
	$8 = [14]
	goto $label$1 
	
.LABEL $label$3
	$8 = [12]
	goto $label$1 
	
.LABEL $label$2
	$8 = [5]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$92 
	
.LABEL $label$96
	$7 = (*($4) & [15])
	$1 = *($2 + [4])
	if ( ($1 == 0) ){ goto $label$44 }
	$8 = [5]
	goto $label$5 
	
.LABEL $label$95
	$9 = $3
	$10 = *($1 + [16])
	if ( ((int_32)$10 <= (int_32)$7) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$94
	$9 = $1
	$1 = $10
	$10 = *($1 + [16])
	if ( ((int_32)$10 <= (int_32)$7) ){ goto $label$42 }
	$8 = [6]
	goto $label$5 
	
.LABEL $label$93
	$10 = *($1)
	if ( $10 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$92
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$39 }
	$8 = [44]
	goto $label$5 
	
.LABEL $label$91
	$9 = ($1 + [4])
	$10 = *($1 + [4])
	if ( ($10 == 0) ){ goto $label$41 }
	$8 = [45]
	goto $label$5 
	
.LABEL $label$90
	$1 = $9
	goto $label$40 
	
.LABEL $label$89
	$1 = $3
	$9 = $3
	$8 = [1]
	goto $label$5 
	
.LABEL $label$88
	$10 = *($9)
	if ( $10 ){ goto $label$36 }
	$8 = [9]
	goto $label$5 
	
.LABEL $label$87
	*(($10 = CALL _Znwj([32])) + [20 align=4]) = (int_64)0
	*($10 + [28]) = [0]
	*($10) = (int_64)0
	*($10 + [8]) = $1
	*($9) = $10
	*($10 + [16]) = $7
	$1 = $10
	$7 = *(*($2))
	if ( ($7 == 0) ){ goto $label$28 }
	$8 = [10]
	goto $label$5 
	
.LABEL $label$86
	*($2) = $7
	$1 = *($9)
	$8 = [11]
	goto $label$5 
	
.LABEL $label$85
	CALL $13(*($2 + [4]), $1)
	*($6) = (*($6) + [1])
	goto $label$35 
	
.LABEL $label$84
	$9 = $1
	$10 = *($9)
	if ( ($10 == 0) ){ goto $label$43 }
	$8 = [2]
	goto $label$5 
	
.LABEL $label$83
	$1 = ($10 + [24])
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)*(($10 + [28]))) ){ goto $label$34 }
	$8 = [3]
	goto $label$5 
	
.LABEL $label$82
	*($9) = *($4)
	*($1) = (*($1) + [1])
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$81
	CALL $15(($10 + [20]), $4)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$33 }
	$8 = [13]
	goto $label$5 
	
.LABEL $label$80
	$7 = *($2)
	goto $label$27 
	
.LABEL $label$79
	*($0 + [4 align=4]) = (int_64)0
	$6 = ($0 + [4])
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$26 }
	$8 = [15]
	goto $label$5 
	
.LABEL $label$78
	$11 = ($0 + [4])
	$5 = ($0 + [8])
	$1 = [0]
	$4 = (*($7 + [24]) - *($7 + [20]))
	if ( [0] ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$77
	$7 = $10
	$4 = (*($7 + [24]) - *($7 + [20]))
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$50 }
	$8 = [16]
	goto $label$5 
	
.LABEL $label$76
	$9 = $6
	$10 = *($1 + [16])
	if ( ((int_32)$4 >= (int_32)$10) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$75
	$9 = $1
	$1 = $10
	$10 = *($1 + [16])
	if ( ((int_32)$4 >= (int_32)$10) ){ goto $label$48 }
	$8 = [41]
	goto $label$5 
	
.LABEL $label$74
	$10 = *($1)
	if ( $10 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$73
	if ( ((int_32)$10 >= (int_32)$4) ){ goto $label$45 }
	$8 = [38]
	goto $label$5 
	
.LABEL $label$72
	$9 = ($1 + [4])
	$10 = *($1 + [4])
	if ( ($10 == 0) ){ goto $label$47 }
	$8 = [39]
	goto $label$5 
	
.LABEL $label$71
	$1 = $9
	goto $label$46 
	
.LABEL $label$70
	$1 = $6
	$9 = $6
	$8 = [18]
	goto $label$5 
	
.LABEL $label$69
	$10 = *($9)
	if ( $10 ){ goto $label$21 }
	$8 = [35]
	goto $label$5 
	
.LABEL $label$68
	*(($10 = CALL _Znwj([32])) + [20 align=4]) = (int_64)0
	*($10 + [28]) = [0]
	*($10) = (int_64)0
	*($10 + [8]) = $1
	*($9) = $10
	*($10 + [16]) = $4
	$1 = $10
	$4 = *(*($0))
	if ( ($4 == 0) ){ goto $label$8 }
	$8 = [36]
	goto $label$5 
	
.LABEL $label$67
	*($0) = $4
	$1 = *($9)
	$8 = [37]
	goto $label$5 
	
.LABEL $label$66
	CALL $13(*($11), $1)
	*($5) = (*($5) + [1])
	goto $label$20 
	
.LABEL $label$65
	$9 = $1
	$10 = *($9)
	if ( ($10 == 0) ){ goto $label$49 }
	$8 = [19]
	goto $label$5 
	
.LABEL $label$64
	$9 = ($7 + [20])
	$4 = ($10 + [24])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)*(($10 + [28]))) ){ goto $label$19 }
	$8 = [20]
	goto $label$5 
	
.LABEL $label$63
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$12 = ($7 + [24])
	$10 = (*($12) - *($9))
	if ( ($10 == 0) ){ goto $label$18 }
	$8 = [21]
	goto $label$5 
	
.LABEL $label$62
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$17 }
	$8 = [22]
	goto $label$5 
	
.LABEL $label$61
	$13 = CALL _Znwj($10)
	*($1) = $13
	*(($1 + [8])) = ($13 + $10)
	*(($1 = ($1 + [4]))) = $13
	$9 = *($9)
	$10 = (*($12) - $9)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$16 }
	$8 = [32]
	goto $label$5 
	
.LABEL $label$60
	CALL memcpy($13, $9, $10)
	*($1) = (*($1) + $10)
	$8 = [23]
	goto $label$5 
	
.LABEL $label$59
	*($4) = (*($4) + [12])
	$1 = *($7 + [4])
	if ( $1 ){ goto $label$13 }
	$8 = [29]
	goto $label$5 
	
.LABEL $label$58
	$10 = *($7 + [8])
	if ( ((int_32)*($10) == (int_32)$7) ){ goto $label$12 }
	$8 = [30]
	goto $label$5 
	
.LABEL $label$57
	$9 = ($7 + [8])
	$8 = [31]
	goto $label$5 
	
.LABEL $label$56
	$1 = *($9)
	$9 = ($1 + [8])
	$10 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($10)) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$55
	CALL $22(($10 + [20]), $9)
	$1 = *($7 + [4])
	if ( ($1 == 0) ){ goto $label$14 }
	$8 = [24]
	goto $label$5 
	
.LABEL $label$54
	$10 = $1
	$1 = *($10)
	if ( $1 ){ goto $label$15 }
	$8 = [25]
	goto $label$5 
	
.LABEL $label$53
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$9 }
	$8 = [28]
	goto $label$5 
	
.LABEL $label$52
	CALL $23($2, *($2 + [4]))
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$51
	CALL $127($1)
	
.LABEL $label$50
	$8 = [27]
	goto $label$5 
	
.LABEL $label$49
	$8 = [35]
	goto $label$5 
	
.LABEL $label$48
	$8 = [17]
	goto $label$5 
	
.LABEL $label$47
	$8 = [18]
	goto $label$5 
	
.LABEL $label$46
	$8 = [40]
	goto $label$5 
	
.LABEL $label$45
	$8 = [18]
	goto $label$5 
	
.LABEL $label$44
	$8 = [12]
	goto $label$5 
	
.LABEL $label$43
	$8 = [9]
	goto $label$5 
	
.LABEL $label$42
	$8 = [0]
	goto $label$5 
	
.LABEL $label$41
	$8 = [1]
	goto $label$5 
	
.LABEL $label$40
	$8 = [7]
	goto $label$5 
	
.LABEL $label$39
	$8 = [1]
	goto $label$5 
	
.LABEL $label$38
	$8 = [6]
	goto $label$5 
	
.LABEL $label$37
	$8 = [0]
	goto $label$5 
	
.LABEL $label$36
	$8 = [2]
	goto $label$5 
	
.LABEL $label$35
	$8 = [2]
	goto $label$5 
	
.LABEL $label$34
	$8 = [43]
	goto $label$5 
	
.LABEL $label$33
	$8 = [4]
	goto $label$5 
	
.LABEL $label$32
	$8 = [13]
	goto $label$5 
	
.LABEL $label$31
	$8 = [4]
	goto $label$5 
	
.LABEL $label$30
	$8 = [8]
	goto $label$5 
	
.LABEL $label$29
	$8 = [7]
	goto $label$5 
	
.LABEL $label$28
	$8 = [11]
	goto $label$5 
	
.LABEL $label$27
	$8 = [14]
	goto $label$5 
	
.LABEL $label$26
	$8 = [28]
	goto $label$5 
	
.LABEL $label$25
	$8 = [27]
	goto $label$5 
	
.LABEL $label$24
	$8 = [16]
	goto $label$5 
	
.LABEL $label$23
	$8 = [41]
	goto $label$5 
	
.LABEL $label$22
	$8 = [17]
	goto $label$5 
	
.LABEL $label$21
	$8 = [19]
	goto $label$5 
	
.LABEL $label$20
	$8 = [19]
	goto $label$5 
	
.LABEL $label$19
	$8 = [34]
	goto $label$5 
	
.LABEL $label$18
	$8 = [23]
	goto $label$5 
	
.LABEL $label$17
	$8 = [33]
	goto $label$5 
	
.LABEL $label$16
	$8 = [23]
	goto $label$5 
	
.LABEL $label$15
	$8 = [24]
	goto $label$5 
	
.LABEL $label$14
	$8 = [29]
	goto $label$5 
	
.LABEL $label$13
	$8 = [24]
	goto $label$5 
	
.LABEL $label$12
	$8 = [25]
	goto $label$5 
	
.LABEL $label$11
	$8 = [25]
	goto $label$5 
	
.LABEL $label$10
	$8 = [31]
	goto $label$5 
	
.LABEL $label$9
	$8 = [26]
	goto $label$5 
	
.LABEL $label$8
	$8 = [37]
	goto $label$5 
	
.LABEL $label$7
	$8 = [42]
	goto $label$5 
	
.LABEL $label$6
	$8 = [40]
	goto $label$5 
	$8
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [18220] ? [18232] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $134($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $115($0)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($4 = ($3 + [56]))) = (int_64)0
	$5 = *([0] + [8712])
	*(($3 + [24])) = $5
	$6 = *([0] + [8720])
	*(($3 + [32])) = $6
	*(($3 + [40])) = $5
	*(($3 + [48])) = $6
	*($3 + [16]) = (int_64)1
	*($4) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = ($1 + [72])
	$7 = *(($1 + [100]))
	if ( ((int_32)$7 == (int_32)*(($1 + [96]))) ){ goto $label$2 }
	$1 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$4), [17819])
	if ( $1 ){ goto $label$1 }
	$1 = ($3 + [16])
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($4), *(($1 + [80])), (int_64)7235159538876284928, (int_64)7235159538876284928)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $34($4, $1)
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$4), [17819])
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 + [16])
	
.LABEL $label$1
	$6 = *(($1 + [16]))
	$5 = *($1 + [8])
	*($0) = *([0] + [8712])
	*(($0 + [8])) = *([0] + [8720])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)-2500) > (uint_64)(int_64)7499) ){ goto $label$6 }
	CALL eosio_assert(((int_64)$5 < (int_64)1152921504606846976), [8192])
	CALL eosio_assert(((int_64)$5 > (int_64)-1152921504606846976), [8260])
	CALL eosio_assert([1], [18180])
	CALL eosio_assert([1], [18195])
	$5 = ((int_64)$5 << (int_64)2)
	goto $label$5 
	
.LABEL $label$6
	if ( ((uint_64)((int_64)$8 + (int_64)-10000) > (uint_64)(int_64)39999) ){ goto $label$7 }
	CALL eosio_assert(((int_64)$5 < (int_64)288230376151711744), [8192])
	CALL eosio_assert(((int_64)$5 > (int_64)-288230376151711744), [8260])
	CALL eosio_assert([1], [18180])
	CALL eosio_assert([1], [18195])
	$5 = ((int_64)$5 << (int_64)4)
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_64)((int_64)$8 + (int_64)-50000) > (uint_64)(int_64)150000) ){ goto $label$4 }
	CALL __multi3($3, $5, (int_64)$5 >> (int_64)63), (int_64)80, (int_64)0)
	$8 = *(($3 + [8]))
	$5 = *($3)
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [8192])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [8260])
	CALL eosio_assert([1], [18180])
	CALL eosio_assert([1], [18195])
	
.LABEL $label$5
	*($0 + [8]) = $6
	*($0) = ((int_64)$5 / (int_64)100)
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18174])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18174])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth((int_64)6112252634446868640)
	$5 = *($2 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = ($3 + [24])
	
.LOOP $label$2:
	CALL $7(($3 + [16]), CALL $6(($3 + [8]), *($4)))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$3
	$4 = ($4 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$1
	*($3 + [8]) = ($0 + [112])
	CALL $36(($3 + [16]), ($3 + [8]), $1)
	$4 = [0]
	$5 = *($3 + [20])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ( $5 ? [0] : ((int_64)*($1) == (int_64)*($5 + [8])) )
	
.LABEL $label$4
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [17250])
	CALL eosio_assert(((int_32)*($4 + [84]) ^ (int_32)[1]), [17268])
	$7 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert($5, [18338])
	CALL $53(*($3 + [8]), $4, $7, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18373])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18419])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	$7 = *($1)
	$8 = $7
	$3 = *($3)
	$9 = ($1 + [72])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	CALL $100($9, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	*($1 + [84]) = [1]
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [18470])
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	*($5 + [44]) = $6
	*($5 + [40]) = $1
	$10 = ($1 + [16])
	*($5 + [48]) = $10
	$11 = ($1 + [32])
	*($5 + [52]) = $11
	$12 = ($1 + [40])
	*($5 + [56]) = $12
	$13 = ($1 + [48])
	*($5 + [60]) = $13
	$14 = ($1 + [60])
	*($5 + [64]) = $14
	*($5 + [68]) = $9
	$15 = ($1 + [84])
	*($5 + [72]) = $15
	CALL $97(($5 + [40]), ($5 + [8]))
	$3 = *($5 + [32])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $139($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [48]) = $10
	*($5 + [52]) = $11
	*($5 + [56]) = $12
	*($5 + [60]) = $13
	*($5 + [64]) = $14
	*($5 + [68]) = $9
	*($5 + [72]) = $15
	*($5 + [40]) = $1
	CALL $98(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $142($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $135(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$4 = ($1 + [96])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229460592240361472, ($5 + [32]), $7)
	*($4) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [80])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_64 $38
	float_64 $39
	$3 = ($global$0 - [736])
	$global$0 = $3
	CALL require_auth((int_64)6112252634446868640)
	*($3 + [712]) = ($0 + [112])
	CALL $36(($3 + [440]), ($3 + [712]), $1)
	$4 = ($3 + [712])
	$5 = *($3 + [444])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = [0]
	if ( ((int_64)*($1) != (int_64)*($5 + [8])) ){ goto $label$1 }
	$4 = *($3 + [440])
	$6 = $5
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17290])
	CALL eosio_assert(*($6 + [84]), [17307])
	CALL $4($2, ($6 + [60]))
	$7 = ($6 + [48])
	$8 = CALL $116(($3 + [696]), $7)
	CALL $122($8, [17335])
	$5 = *($2)
	$9 = ($5 & [1])
	CALL $123($8, ( *($2 + [8]) ? ($2 + [1]) : $9 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $9 ))
	$5 = *($3 + [696])
	$9 = ($5 & [1])
	CALL $143(($3 + [656]), ( *($8 + [8]) ? ($8 + [1]) : $9 ), ( *($8 + [4]) ? uint_32($5 >> [1]) : $9 ))
	$10 = *($3 + [656])
	*($3 + [635]) = (uint_64)$10 >> (uint_64)(int_64)32)
	*($3 + [634]) = (uint_64)$10 >> (uint_64)(int_64)40)
	*($3 + [633]) = (uint_64)$10 >> (uint_64)(int_64)48)
	*($3 + [632]) = (uint_64)$10 >> (uint_64)(int_64)56)
	$11 = *($3 + [664])
	*($3 + [627]) = (uint_64)$11 >> (uint_64)(int_64)32)
	*($3 + [626]) = (uint_64)$11 >> (uint_64)(int_64)40)
	*($3 + [625]) = (uint_64)$11 >> (uint_64)(int_64)48)
	*($3 + [624]) = (uint_64)$11 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $10)
	*($3 + [639]) = $5
	*($3 + [638]) = uint_32($5 >> [8])
	*($3 + [637]) = uint_32($5 >> [16])
	*($3 + [636]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $11)
	*($3 + [631]) = $5
	*($3 + [630]) = uint_32($5 >> [8])
	*($3 + [629]) = uint_32($5 >> [16])
	*($3 + [628]) = uint_32($5 >> [24])
	$10 = *((($3 + [656]) + [24]))
	*($3 + [647]) = $10
	$11 = *($3 + [672])
	*($3 + [651]) = (uint_64)$11 >> (uint_64)(int_64)32)
	*($3 + [650]) = (uint_64)$11 >> (uint_64)(int_64)40)
	*($3 + [649]) = (uint_64)$11 >> (uint_64)(int_64)48)
	*($3 + [648]) = (uint_64)$11 >> (uint_64)(int_64)56)
	*($3 + [643]) = (uint_64)$10 >> (uint_64)(int_64)32)
	*($3 + [642]) = (uint_64)$10 >> (uint_64)(int_64)40)
	*($3 + [641]) = (uint_64)$10 >> (uint_64)(int_64)48)
	*($3 + [640]) = (uint_64)$10 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $10)
	*($3 + [646]) = uint_32($5 >> [8])
	*($3 + [645]) = uint_32($5 >> [16])
	*($3 + [644]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $11)
	*($3 + [655]) = $5
	*($3 + [654]) = uint_32($5 >> [8])
	*($3 + [653]) = uint_32($5 >> [16])
	*($3 + [652]) = uint_32($5 >> [24])
	CALL $9(($3 + [608]))
	CALL eosio_assert(((uint_32)(*($3 + [612]) - *($3 + [608])) > (uint_32)[4]), [18580])
	*($3 + [592]) = (int_64)0
	*($3 + [600]) = [0]
	$5 = (*($3 + [612]) - *($3 + [608]))
	$9 = CALL $5(($3 + [624]), $5)
	$12 = ($9 + *($3 + [608]))
	$13 = *($3 + [596])
	if ( ((int_32)$13 == (int_32)*($3 + [600])) ){ goto $label$4 }
	*($13) = *($12)
	*($3 + [596]) = (*($3 + [596]) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL $15(($3 + [592]), $12)
	
.LABEL $label$3
	$9 = ($5 + [-1])
	*((($12 = *($3 + [608])) + $9)) = *(($12 + $9))
	$9 = CALL $5(($3 + [624]), $9)
	$12 = ($9 + *($3 + [608]))
	$13 = *($3 + [596])
	if ( ((int_32)$13 == (int_32)*(($3 + [600]))) ){ goto $label$6 }
	*($13) = *($12)
	*($3 + [596]) = (*($3 + [596]) + [1])
	goto $label$5 
	
.LABEL $label$6
	CALL $15(($3 + [592]), $12)
	
.LABEL $label$5
	$9 = ($5 + [-2])
	*((($12 = *($3 + [608])) + $9)) = *(($12 + $9))
	$9 = CALL $5(($3 + [624]), $9)
	$12 = ($9 + *($3 + [608]))
	$13 = *($3 + [596])
	if ( ((int_32)$13 == (int_32)*(($3 + [600]))) ){ goto $label$8 }
	*($13) = *($12)
	*($3 + [596]) = (*($3 + [596]) + [1])
	goto $label$7 
	
.LABEL $label$8
	CALL $15(($3 + [592]), $12)
	
.LABEL $label$7
	$9 = ($5 + [-3])
	*((($12 = *($3 + [608])) + $9)) = *(($12 + $9))
	$9 = CALL $5(($3 + [624]), $9)
	$12 = ($9 + *($3 + [608]))
	$13 = *($3 + [596])
	if ( ((int_32)$13 == (int_32)*(($3 + [600]))) ){ goto $label$10 }
	*($13) = *($12)
	*($3 + [596]) = (*($3 + [596]) + [1])
	goto $label$9 
	
.LABEL $label$10
	CALL $15(($3 + [592]), $12)
	
.LABEL $label$9
	$9 = ($5 + [-4])
	*((($12 = *($3 + [608])) + $9)) = *(($12 + $9))
	$9 = CALL $5(($3 + [624]), $9)
	$12 = ($9 + *($3 + [608]))
	$13 = *($3 + [596])
	if ( ((int_32)$13 == (int_32)*(($3 + [600]))) ){ goto $label$12 }
	*($13) = *($12)
	*($3 + [596]) = (*($3 + [596]) + [1])
	goto $label$11 
	
.LABEL $label$12
	CALL $15(($3 + [592]), $12)
	
.LABEL $label$11
	*((($12 = *($3 + [608])) + $9)) = *((($12 + $5) + [-5]))
	*($3 + [612]) = (*($3 + [612]) + [-5])
	*($3 + [584]) = [0]
	*($3 + [576]) = (int_64)0
	$14 = *($3 + [596])
	$5 = *($3 + [592])
	if ( ((int_32)$5 == (int_32)$14) ){ goto $label$15 }
	$15 = (($3 + [440]) | [1])
	$13 = ($3 + [448])
	
.LOOP $label$16:
	CALL $7(($3 + [440]), $5)
	$9 = *($3 + [440])
	$12 = ($9 & [1])
	CALL $123(($3 + [576]), ( *($13) ? $15 : $12 ), ( *($3 + [444]) ? uint_32($9 >> [1]) : $12 ))
	if ( ((*($3 + [440]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$17
	CALL $122(($3 + [576]), [8595])
	$5 = ($5 + [1])
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$16 }
	$5 = *($3 + [596])
	$9 = *($3 + [592])
	*($3 + [280]) = [0]
	*($3 + [272]) = (int_64)0
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	*($3 + [280]) = [0]
	*($3 + [272]) = (int_64)0
	$9 = $5
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = (($3 + [440]) | [1])
	$14 = ($3 + [448])
	
.LOOP $label$18:
	CALL $7(($3 + [440]), $9)
	$12 = *($3 + [440])
	$13 = ($12 & [1])
	CALL $123(($3 + [272]), ( *($14) ? $15 : $13 ), ( *($3 + [444]) ? uint_32($12 >> [1]) : $13 ))
	if ( ((*($3 + [440]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($14))
	
.LABEL $label$19
	CALL $122(($3 + [272]), [8595])
	$9 = ($9 + [1])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$18 }
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [280])))
	
.LABEL $label$13
	*($3 + [464]) = *($6 + [32])
	$10 = *($6)
	*($3 + [456]) = *($6 + [40])
	*(($3 + [480])) = *(($6 + [24]))
	*($3 + [440]) = $10
	*($3 + [448]) = *($1)
	*($3 + [472]) = *($6 + [16])
	CALL $116(($3 + [488]), $7)
	CALL $116(($3 + [500]), $2)
	CALL $116(($3 + [512]), ($3 + [576]))
	*(($3 + [532])) = (int_64)0
	*(($3 + [540])) = (int_64)0
	*(($3 + [556])) = (int_64)0
	*(($3 + [564])) = (int_64)0
	*($3 + [524 align=4]) = (int_64)0
	*($3 + [548 align=4]) = (int_64)0
	*($3 + [572]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($3 + [428 align=4]) = (int_64)0
	$15 = (($3 + [424]) | [4])
	*($3 + [424]) = $15
	$16 = *(($6 + [76]))
	$2 = *($6 + [72])
	if ( ((int_32)$2 == (int_32)$16) ){ goto $label$21 }
	$13 = [0]
	$7 = ($3 + [432])
	if ( ((int_32)$15 == (int_32)$15) ){ goto $label$22 }
	$17 = [5]
	goto $label$20 
	
.LABEL $label$22
	$17 = [233]
	goto $label$20 
	
.LABEL $label$21
	$17 = [14]
	
.LABEL $label$20
	
.LOOP $label$23:
	goto $label$405 
	
.LABEL $label$417
	$9 = $13
	$12 = $15
	if ( ($13 == 0) ){ goto $label$166 }
	$17 = [6]
	goto $label$23 
	
.LABEL $label$416
	$5 = $9
	$9 = *($5 + [4])
	if ( $9 ){ goto $label$167 }
	goto $label$168 
	
.LABEL $label$415
	$5 = *($12 + [8])
	$9 = ((int_32)*($5) == (int_32)$12)
	$12 = $5
	if ( $9 ){ goto $label$165 }
	$17 = [7]
	goto $label$23 
	
.LABEL $label$414
	$12 = *($2)
	if ( (*($5 + [13]) <= $12) ){ goto $label$181 }
	$17 = [8]
	goto $label$23 
	
.LABEL $label$413
	if ( ($13 == 0) ){ goto $label$164 }
	$17 = [9]
	goto $label$23 
	
.LABEL $label$412
	$14 = $15
	$17 = [10]
	goto $label$23 
	
.LABEL $label$411
	$9 = $13
	$5 = *($9 + [13])
	if ( ((uint_32)$12 >= (uint_32)$5) ){ goto $label$162 }
	$17 = [227]
	goto $label$23 
	
.LABEL $label$410
	$14 = $9
	$13 = *($9)
	if ( $13 ){ goto $label$173 }
	goto $label$174 
	
.LABEL $label$409
	if ( ((uint_32)$5 >= (uint_32)$12) ){ goto $label$161 }
	$17 = [225]
	goto $label$23 
	
.LABEL $label$408
	$14 = ($9 + [4])
	$13 = *($9 + [4])
	if ( $13 ){ goto $label$163 }
	$17 = [226]
	goto $label$23 
	
.LABEL $label$407
	$5 = $9
	$9 = $14
	goto $label$176 
	
.LABEL $label$406
	$9 = $15
	$5 = $15
	goto $label$180 
	
.LABEL $label$405
	$5 = $9
	goto $label$175 
	
.LABEL $label$404
	$5 = $9
	$9 = $14
	if ( *($9) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$403
	$5 = $15
	$17 = [229]
	goto $label$23 
	
.LABEL $label$402
	if ( ($13 == 0) ){ goto $label$24 }
	$17 = [230]
	goto $label$23 
	
.LABEL $label$401
	$9 = ($5 + [4])
	if ( (*($9) == 0) ){ goto $label$171 }
	$17 = [13]
	goto $label$23 
	
.LABEL $label$400
	$2 = ($2 + [1])
	if ( ((int_32)$2 == (int_32)$16) ){ goto $label$177 }
	$17 = [4]
	goto $label$23 
	
.LABEL $label$399
	$13 = *($3 + [428])
	if ( ((int_32)*($3 + [424]) != (int_32)$15) ){ goto $label$182 }
	goto $label$183 
	
.LABEL $label$398
	$5 = $15
	$9 = $15
	if ( *($9) ){ goto $label$172 }
	$17 = [1]
	goto $label$23 
	
.LABEL $label$397
	*(($12 = CALL _Znwj([16])) + [13]) = *($2)
	*($12) = (int_64)0
	*($12 + [8]) = $5
	*($9) = $12
	$5 = *(*($3 + [424]))
	if ( ($5 == 0) ){ goto $label$170 }
	$17 = [2]
	goto $label$23 
	
.LABEL $label$396
	*($3 + [424]) = $5
	$12 = *($9)
	$17 = [3]
	goto $label$23 
	
.LABEL $label$395
	CALL $13(*($3 + [428]), $12)
	*($7) = (*($7) + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$169 }
	$17 = [14]
	goto $label$23 
	
.LABEL $label$394
	$2 = [0]
	*($3 + [416]) = [0]
	*($3 + [408]) = (int_64)0
	$7 = *($3 + [592])
	$16 = *($3 + [596])
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$160 }
	$17 = [15]
	goto $label$23 
	
.LABEL $label$393
	$18 = ($3 + [416])
	$17 = [16]
	goto $label$23 
	
.LABEL $label$392
	$5 = *($3 + [428])
	if ( ($5 == 0) ){ goto $label$158 }
	$17 = [17]
	goto $label$23 
	
.LABEL $label$391
	$13 = *(($7 + $2))
	$9 = $15
	$17 = [18]
	goto $label$23 
	
.LABEL $label$390
	$14 = ($13 & [255])
	$12 = (*($5 + [13]) <= $14)
	$9 = ( $9 ? $5 : $12 )
	$5 = *(($5 + ($12 << [2])))
	if ( $5 ){ goto $label$157 }
	$17 = [19]
	goto $label$23 
	
.LABEL $label$389
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$156 }
	$17 = [20]
	goto $label$23 
	
.LABEL $label$388
	if ( ($14 <= *($9 + [13])) ){ goto $label$155 }
	$17 = [21]
	goto $label$23 
	
.LABEL $label$387
	*($3 + [272]) = $2
	$5 = *($3 + [412])
	if ( ((uint_32)$5 >= (uint_32)*($18)) ){ goto $label$154 }
	$17 = [224]
	goto $label$23 
	
.LABEL $label$386
	*($5) = $2
	*($3 + [412]) = (*($3 + [412]) + [1])
	goto $label$153 
	
.LABEL $label$385
	CALL $55(($3 + [408]), ($3 + [272]))
	$17 = [23]
	goto $label$23 
	
.LABEL $label$384
	$7 = *($3 + [592])
	$16 = *($3 + [596])
	$17 = [24]
	goto $label$23 
	
.LABEL $label$383
	$2 = ($2 + [1])
	if ( ($2 <= ($16 - $7)) ){ goto $label$159 }
	$17 = [25]
	goto $label$23 
	
.LABEL $label$382
	$9 = ($6 + [16])
	*(($12 = (($3 + [272]) + [8]))) = (int_64)0
	*(($13 = (($3 + [272]) + [32]))) = (int_64)0
	*(($14 = (($3 + [272]) + [24]))) = (int_64)0
	*(($15 = ($3 + [288]))) = (int_64)0
	*($12) = [0]
	*($3 + [272]) = (int_64)0
	$5 = CALL _Znwj([160])
	$2 = ($5 + [160])
	*($12) = $2
	*($5) = *([0] + [17640])
	*(($5 + [8])) = *([0] + [17648])
	*($5 + [16]) = *([0] + [17656])
	*(($5 + [24])) = *([0] + [17664])
	*($5 + [32]) = *([0] + [17672])
	*(($5 + [40])) = *([0] + [17680])
	*($5 + [48]) = *([0] + [17688])
	*(($5 + [56])) = *([0] + [17696])
	*($3 + [272]) = $5
	*(($5 + [72])) = *([0] + [17712])
	*($5 + [64]) = *([0] + [17704])
	*($5 + [80]) = *([0] + [17720])
	*(($5 + [88])) = *([0] + [17728])
	*($5 + [96]) = *([0] + [17736])
	*(($5 + [104])) = *([0] + [17744])
	*($5 + [112]) = *([0] + [17752])
	*(($5 + [120])) = *([0] + [17760])
	*(($5 + [136])) = *([0] + [17776])
	*($5 + [128]) = *([0] + [17768])
	*($15) = (int_64)1000
	*($14) = (int_64)200000
	*($13) = [9]
	*(($5 + [152])) = *([0] + [17792])
	*($5 + [144]) = *([0] + [17784])
	*($3 + [276]) = $2
	CALL $32(($3 + [368]), ($0 + [32]), ($3 + [272]))
	$5 = *($3 + [272])
	if ( ($5 == 0) ){ goto $label$152 }
	$17 = [26]
	goto $label$23 
	
.LABEL $label$381
	*($3 + [276]) = $5
	CALL _ZdlPv($5)
	$17 = [27]
	goto $label$23 
	
.LABEL $label$380
	$19 = *([0] + [8720])
	$20 = *([0] + [8712])
	*((($3 + [352]) + [8])) = *([0] + [8720])
	*($3 + [352]) = *([0] + [8712])
	*((($3 + [336]) + [8])) = *([0] + [8736])
	*($3 + [336]) = *([0] + [8728])
	$5 = ($6 + [32])
	$10 = *($5)
	*((($3 + [320]) + [8])) = *(($9 + [8]))
	*($3 + [320]) = *($9)
	CALL eosio_assert(((int_64)$10 != (int_64)0), [18180])
	$11 = *($3 + [320])
	CALL eosio_assert([1], [18195])
	$21 = ((int_64)$11 / (int_64)$10)
	*($3 + [320]) = $21
	if ( (*($5) == 0) ){ goto $label$151 }
	$17 = [28]
	goto $label$23 
	
.LABEL $label$379
	$22 = ($3 + [560])
	$23 = ($3 + [548])
	$24 = ($3 + [536])
	$25 = ($3 + [524])
	$14 = (($3 + [272]) | [1])
	$26 = (($3 + [120]) + [8])
	$27 = ($6 + [72])
	$28 = ($6 + [76])
	$29 = ($3 + [532])
	$18 = ($3 + [528])
	$30 = (($3 + [368]) + [32])
	$31 = ($3 + [544])
	$32 = ($3 + [540])
	$33 = ($3 + [568])
	$34 = ($3 + [564])
	$16 = ($3 + [552])
	$35 = ($3 + [556])
	$36 = ($3 + [548])
	$37 = [0]
	$17 = [29]
	goto $label$23 
	
.LABEL $label$378
	*($26) = [0]
	*($3 + [120]) = (int_64)0
	$5 = [0]
	$12 = [0]
	$9 = (*($3 + [612]) - *($3 + [608]))
	if ( ($9 == 0) ){ goto $label$149 }
	$17 = [30]
	goto $label$23 
	
.LABEL $label$377
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$148 }
	$17 = [31]
	goto $label$23 
	
.LABEL $label$376
	$5 = CALL _Znwj($9)
	*($26) = ($5 + $9)
	*($3 + [120]) = $5
	*($3 + [124]) = $5
	$12 = *($3 + [608])
	$9 = (*($3 + [612]) - $12)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$147 }
	$17 = [222]
	goto $label$23 
	
.LABEL $label$375
	CALL memcpy($5, $12, $9)
	$12 = (*($3 + [124]) + $9)
	*($3 + [124]) = $12
	$5 = *($3 + [120])
	goto $label$146 
	
.LABEL $label$374
	$12 = $5
	$17 = [33]
	goto $label$23 
	
.LABEL $label$373
	$7 = (*($28) - *($27))
	CALL eosio_assert(((uint_32)($12 - $5) >= (uint_32)$7), [18580])
	*(($2 = (($3 + [192]) + [8]))) = [0]
	*($3 + [192]) = (int_64)0
	if ( ($7 == 0) ){ goto $label$145 }
	$17 = [34]
	goto $label$23 
	
.LABEL $label$372
	$5 = ((*($3 + [124]) + [-1]) - *($3 + [120]))
	$9 = $7
	$17 = [35]
	goto $label$23 
	
.LABEL $label$371
	$12 = CALL $5(($3 + [624]), ($5 + [1]))
	$13 = ($12 + *($3 + [120]))
	$15 = *($3 + [196])
	if ( ((int_32)$15 == (int_32)*($2)) ){ goto $label$143 }
	$17 = [36]
	goto $label$23 
	
.LABEL $label$370
	*($15) = *($13)
	*($3 + [196]) = (*($3 + [196]) + [1])
	goto $label$142 
	
.LABEL $label$369
	CALL $15(($3 + [192]), $13)
	$17 = [37]
	goto $label$23 
	
.LABEL $label$368
	*((($13 = *($3 + [120])) + $12)) = *(($13 + $5))
	$5 = ($5 + [-1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$144 }
	$17 = [38]
	goto $label$23 
	
.LABEL $label$367
	*($3 + [124]) = (*($3 + [124]) - $7)
	$17 = [39]
	goto $label$23 
	
.LABEL $label$366
	$9 = *($3 + [408])
	if ( ((int_32)*($3 + [412]) == (int_32)$9) ){ goto $label$141 }
	$17 = [40]
	goto $label$23 
	
.LABEL $label$365
	$5 = [0]
	$17 = [41]
	goto $label$23 
	
.LABEL $label$364
	*((*($3 + [592]) + *(($9 + $5)))) = *((*($3 + [192]) + $5))
	$9 = *($3 + [408])
	$5 = ($5 + [1])
	if ( ($5 <= (*($3 + [412]) - $9)) ){ goto $label$140 }
	$17 = [42]
	goto $label$23 
	
.LABEL $label$363
	CALL $11(($3 + [120]), *($3 + [592]), *($3 + [596]))
	*(($2 = (($3 + [176]) + [8]))) = [0]
	*($3 + [176]) = (int_64)0
	$15 = *($3 + [124])
	$5 = *($3 + [120])
	if ( ((int_32)$5 == (int_32)$15) ){ goto $label$138 }
	$17 = [43]
	goto $label$23 
	
.LABEL $label$362
	CALL $7(($3 + [272]), $5)
	$12 = *($3 + [272])
	$13 = ($12 & [1])
	$9 = (($3 + [272]) + [8])
	CALL $123(($3 + [176]), ( *($9) ? $14 : $13 ), ( *($3 + [276]) ? uint_32($12 >> [1]) : $13 ))
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$137 }
	$17 = [44]
	goto $label$23 
	
.LABEL $label$361
	CALL _ZdlPv(*($9))
	$17 = [45]
	goto $label$23 
	
.LABEL $label$360
	CALL $122(($3 + [176]), [8595])
	$5 = ($5 + [1])
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$139 }
	$17 = [46]
	goto $label$23 
	
.LABEL $label$359
	$15 = *($3 + [124])
	$5 = *($3 + [120])
	*(($7 = (($3 + [224]) + [8]))) = [0]
	*($3 + [224]) = (int_64)0
	if ( ((int_32)$5 == (int_32)$15) ){ goto $label$135 }
	$17 = [47]
	goto $label$23 
	
.LABEL $label$358
	CALL $7(($3 + [272]), $5)
	$12 = *($3 + [272])
	$13 = ($12 & [1])
	CALL $123(($3 + [224]), ( *($9) ? $14 : $13 ), ( *($3 + [276]) ? uint_32($12 >> [1]) : $13 ))
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$134 }
	$17 = [48]
	goto $label$23 
	
.LABEL $label$357
	CALL _ZdlPv(*($9))
	$17 = [49]
	goto $label$23 
	
.LABEL $label$356
	CALL $122(($3 + [224]), [8595])
	$5 = ($5 + [1])
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$136 }
	$17 = [50]
	goto $label$23 
	
.LABEL $label$355
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$133 }
	$17 = [51]
	goto $label$23 
	
.LABEL $label$354
	CALL _ZdlPv(*($7))
	$17 = [52]
	goto $label$23 
	
.LABEL $label$353
	$5 = *($18)
	if ( ((int_32)$5 == (int_32)*($29)) ){ goto $label$132 }
	$17 = [53]
	goto $label$23 
	
.LABEL $label$352
	CALL $116($5, ($3 + [176]))
	*($18) = (*($18) + [12])
	goto $label$130 
	
.LABEL $label$351
	*((($3 + [224]) + [8])) = [0]
	*($3 + [224]) = (int_64)0
	$5 = *($18)
	if ( ((int_32)$5 != (int_32)*($29)) ){ goto $label$131 }
	$17 = [219]
	goto $label$23 
	
.LABEL $label$350
	CALL $3($25, ($3 + [176]))
	$17 = [54]
	goto $label$23 
	
.LABEL $label$349
	*((($3 + [40]) + [8])) = [0]
	*($3 + [40]) = (int_64)0
	CALL $11(($3 + [40]), *($3 + [120]), *($3 + [124]))
	CALL $12(($3 + [40]), [1])
	$13 = CALL $16(($3 + [40]))
	CALL $16(($3 + [40]))
	CALL $24(($3 + [272]), CALL $16(($3 + [40])))
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$129 }
	$17 = [55]
	goto $label$23 
	
.LABEL $label$348
	CALL _ZdlPv(*((($3 + [272]) + [8])))
	$17 = [56]
	goto $label$23 
	
.LABEL $label$347
	$15 = *($30)
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$128 }
	$17 = [218]
	goto $label$23 
	
.LABEL $label$346
	$5 = ($13 <= int_32((*($3 + [372]) - *($3 + [368])) >> [4]))
	goto $label$127 
	
.LABEL $label$345
	$5 = [0]
	$17 = [58]
	goto $label$23 
	
.LABEL $label$344
	CALL eosio_assert($5, [17337])
	$5 = ($13 << [4])
	$10 = *((*($3 + [368]) + $5))
	*($3 + [272]) = *($3 + [320])
	$11 = *($3 + [272])
	CALL __multi3(($3 + [24]), $11, (int_64)$11 >> (int_64)63), $10, (int_64)$10 >> (int_64)63))
	*(($9 = (($3 + [272]) + [8]))) = *((($3 + [320]) + [8]))
	$10 = *((($3 + [24]) + [8]))
	$11 = *($3 + [24])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ), [8192])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ), [8260])
	*($3 + [272]) = $11
	CALL eosio_assert(((int_64)*($9) == (int_64)$19), [17898])
	$20 = ((int_64)*($3 + [272]) + (int_64)$20)
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [17941])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [17960])
	$12 = *($32)
	if ( ((int_32)$12 == (int_32)*($31)) ){ goto $label$126 }
	$17 = [59]
	goto $label$23 
	
.LABEL $label$343
	*($12) = *($3 + [272])
	*(($12 + [8])) = *($9)
	*($32) = (*($32) + [16])
	goto $label$125 
	
.LABEL $label$342
	CALL $56($24, ($3 + [272]))
	$17 = [60]
	goto $label$23 
	
.LABEL $label$341
	$12 = (*($3 + [368]) + $5)
	$9 = *($34)
	if ( ((int_32)$9 == (int_32)*($33)) ){ goto $label$124 }
	$17 = [61]
	goto $label$23 
	
.LABEL $label$340
	*($34) = ($9 + [8])
	*($9) = *($12)
	goto $label$123 
	
.LABEL $label$339
	CALL $57($22, $12)
	$17 = [62]
	goto $label$23 
	
.LABEL $label$338
	CALL $58(($3 + [224]), ($3 + [272]))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$122 }
	$17 = [63]
	goto $label$23 
	
.LABEL $label$337
	CALL _ZdlPv(*((($3 + [224]) + [8])))
	$17 = [64]
	goto $label$23 
	
.LABEL $label$336
	$38 = ((int_64)*((*($3 + [368]) + $5) + [8]) * (int_64)$21)
	CALL eosio_assert((uint_64)(((int_64)$38 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17564])
	$10 = (int_64)21573
	$5 = [0]
	$17 = [65]
	goto $label$23 
	
.LABEL $label$335
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$116 }
	$17 = [210]
	goto $label$23 
	
.LABEL $label$334
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$17 = [211]
	goto $label$23 
	
.LABEL $label$333
	$10 = $11
	$9 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$332
	$10 = $11
	$17 = [213]
	goto $label$23 
	
.LABEL $label$331
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$117 }
	$17 = [214]
	goto $label$23 
	
.LABEL $label$330
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $9 ){ goto $label$25 }
	$17 = [215]
	goto $label$23 
	
.LABEL $label$329
	$9 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$328
	$9 = [0]
	$17 = [67]
	goto $label$23 
	
.LABEL $label$327
	CALL eosio_assert($9, [17613])
	CALL eosio_assert([1], [18180])
	CALL eosio_assert([1], [18195])
	CALL eosio_assert(((int_64)*((($3 + [336]) + [8])) == (int_64)5522692), [17898])
	$10 = ((int_64)*($3 + [336]) + (int_64)((int_64)$38 / (int_64)10000))
	*($3 + [336]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [17941])
	CALL eosio_assert(((int_64)*($3 + [336]) < (int_64)4611686018427387904), [17960])
	if ( ((int_32)$13 >= (int_32)$15) ){ goto $label$115 }
	$17 = [209]
	goto $label$23 
	
.LABEL $label$326
	$5 = *($16)
	if ( ((int_32)$5 != (int_32)*($35)) ){ goto $label$112 }
	$17 = [202]
	goto $label$23 
	
.LABEL $label$325
	CALL $56($23, [8712])
	$5 = *($3 + [40])
	if ( $5 ){ goto $label$107 }
	goto $label$108 
	
.LABEL $label$324
	$5 = *($16)
	if ( ((int_32)*($36) == (int_32)$5) ){ goto $label$114 }
	$17 = [69]
	goto $label$23 
	
.LABEL $label$323
	if ( ((int_32)$5 == (int_32)*($35)) ){ goto $label$113 }
	$17 = [70]
	goto $label$23 
	
.LABEL $label$322
	*(($5 + [8])) = *([0] + [8720])
	*($5) = *([0] + [8712])
	*($16) = (*($16) + [16])
	$5 = *($3 + [40])
	if ( $5 ){ goto $label$109 }
	goto $label$110 
	
.LABEL $label$321
	CALL $59(($3 + [224]), $0, ($3 + [320]))
	$12 = (($3 + [224]) + [8])
	*(($9 = (($3 + [352]) + [8]))) = *($12)
	*($3 + [352]) = *($3 + [224])
	$5 = *($16)
	if ( ((int_32)$5 == (int_32)*($35)) ){ goto $label$29 }
	$17 = [204]
	goto $label$23 
	
.LABEL $label$320
	*($5) = *($3 + [352])
	*(($5 + [8])) = *($9)
	*($16) = (*($16) + [16])
	goto $label$28 
	
.LABEL $label$319
	CALL $56($23, ($3 + [352]))
	$17 = [205]
	goto $label$23 
	
.LABEL $label$318
	CALL $58(($3 + [224]), ($3 + [352]))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$27 }
	$17 = [206]
	goto $label$23 
	
.LABEL $label$317
	CALL _ZdlPv(*($12))
	$17 = [207]
	goto $label$23 
	
.LABEL $label$316
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$111 }
	$17 = [71]
	goto $label$23 
	
.LABEL $label$315
	*($3 + [44]) = $5
	CALL _ZdlPv($5)
	$17 = [72]
	goto $label$23 
	
.LABEL $label$314
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$106 }
	$17 = [73]
	goto $label$23 
	
.LABEL $label$313
	CALL _ZdlPv(*($2))
	$17 = [74]
	goto $label$23 
	
.LABEL $label$312
	$5 = *($3 + [192])
	if ( ($5 == 0) ){ goto $label$105 }
	$17 = [75]
	goto $label$23 
	
.LABEL $label$311
	*($3 + [196]) = $5
	CALL _ZdlPv($5)
	$17 = [76]
	goto $label$23 
	
.LABEL $label$310
	$5 = *($3 + [120])
	if ( ($5 == 0) ){ goto $label$104 }
	$17 = [77]
	goto $label$23 
	
.LABEL $label$309
	*($3 + [124]) = $5
	CALL _ZdlPv($5)
	$17 = [78]
	goto $label$23 
	
.LABEL $label$308
	$37 = ($37 + [1])
	if ( ($37 <= *(($6 + [32]))) ){ goto $label$150 }
	$17 = [79]
	goto $label$23 
	
.LABEL $label$307
	*(($5 = ($3 + [264]))) = (int_64)0
	$10 = *([0] + [8712])
	*(($3 + [232])) = $10
	$11 = *([0] + [8720])
	*(($3 + [240])) = $11
	*(($3 + [248])) = $10
	*(($3 + [256])) = $11
	*($3 + [224]) = (int_64)1
	*($5) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = ($0 + [72])
	$5 = *(($0 + [100]))
	if ( ((int_32)$5 == (int_32)*(($0 + [96]))) ){ goto $label$103 }
	$17 = [80]
	goto $label$23 
	
.LABEL $label$306
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$9), [17819])
	if ( $5 ){ goto $label$100 }
	$17 = [198]
	goto $label$23 
	
.LABEL $label$305
	$5 = ($3 + [224])
	goto $label$102 
	
.LABEL $label$304
	$5 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)7235159538876284928, (int_64)7235159538876284928)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$30 }
	$17 = [200]
	goto $label$23 
	
.LABEL $label$303
	$5 = CALL $34($9, $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$9), [17819])
	goto $label$101 
	
.LABEL $label$302
	$5 = ($3 + [224])
	$17 = [81]
	goto $label$23 
	
.LABEL $label$301
	*((($3 + [272]) + [40])) = *(($5 + [40]))
	*((($3 + [272]) + [32])) = *(($5 + [32]))
	*((($3 + [272]) + [24])) = *(($5 + [24]))
	*(($13 = (($3 + [272]) + [16]))) = *(($5 + [16]))
	*(($12 = (($3 + [272]) + [8]))) = *(($5 + [8]))
	*($3 + [272]) = *($5)
	CALL $58(($3 + [224]), $12)
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$99 }
	$17 = [82]
	goto $label$23 
	
.LABEL $label$300
	CALL _ZdlPv(*($3 + [232]))
	$17 = [83]
	goto $label$23 
	
.LABEL $label$299
	CALL eosio_assert(((int_64)*($3 + [360]) == (int_64)*($13)), [18243])
	$10 = (int_64)
	*($3 + [280]) = $10(*($3 + [280]) - *($3 + [352])))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [18291])
	CALL eosio_assert(((int_64)*($3 + [280]) < (int_64)4611686018427387904), [18313])
	CALL $58(($3 + [224]), $12)
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$98 }
	$17 = [84]
	goto $label$23 
	
.LABEL $label$298
	CALL _ZdlPv(*($3 + [232]))
	$17 = [85]
	goto $label$23 
	
.LABEL $label$297
	CALL $35($9, ($3 + [272]), *($0))
	$10 = *($0)
	*($3 + [208]) = [17355]
	*($3 + [212]) = CALL $136([17355])
	*($3 + [16]) = *($3 + [208])
	$5 = CALL $40(($3 + [216]), ($3 + [16]))
	*(($9 = ($3 + [248]))) = [0]
	*($3 + [224]) = (int_64)6112252634578839744
	*($3 + [240]) = (int_64)0
	*($3 + [232]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $10
	*($5 + [8]) = (int_64)3617214756542218240
	$12 = ($5 + [16])
	*($9) = $12
	*(($3 + [244])) = $12
	*($3 + [240]) = $5
	CALL $60(($3 + [252]), ($3 + [440]))
	CALL $42(($3 + [120]), ($3 + [224]))
	$5 = *($3 + [120])
	CALL send_inline($5, (*($3 + [124]) - $5))
	$5 = *($3 + [120])
	if ( ($5 == 0) ){ goto $label$97 }
	$17 = [86]
	goto $label$23 
	
.LABEL $label$296
	*($3 + [124]) = $5
	CALL _ZdlPv($5)
	$17 = [87]
	goto $label$23 
	
.LABEL $label$295
	$5 = *($3 + [252])
	if ( ($5 == 0) ){ goto $label$96 }
	$17 = [88]
	goto $label$23 
	
.LABEL $label$294
	*(($3 + [256])) = $5
	CALL _ZdlPv($5)
	$17 = [89]
	goto $label$23 
	
.LABEL $label$293
	$5 = *($3 + [240])
	if ( ($5 == 0) ){ goto $label$95 }
	$17 = [90]
	goto $label$23 
	
.LABEL $label$292
	*(($3 + [244])) = $5
	CALL _ZdlPv($5)
	$17 = [91]
	goto $label$23 
	
.LABEL $label$291
	if ( ((int_64)$20 <= (int_64)0) ){ goto $label$94 }
	$17 = [172]
	goto $label$23 
	
.LABEL $label$290
	*($3 + [200]) = $19
	CALL eosio_assert(((int_64)*((($3 + [352]) + [8])) == (int_64)$19), [17898])
	$10 = ((int_64)*($3 + [352]) + (int_64)$20)
	*($3 + [192]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [17941])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [17960])
	$10 = *($1)
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$44 }
	$17 = [173]
	goto $label$23 
	
.LABEL $label$289
	$9 = [0]
	$12 = *([0] + [17980])
	$17 = [174]
	goto $label$23 
	
.LABEL $label$288
	*((($3 + [224]) + ($5 = $9))) = *(($12 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$10 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$9 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$42 }
	$17 = [175]
	goto $label$23 
	
.LABEL $label$287
	$10 = ((int_64)$10 << (int_64)5)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$43 }
	$17 = [176]
	goto $label$23 
	
.LABEL $label$286
	*(($3 + [728])) = [0]
	*($3 + [720]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$41 }
	$17 = [196]
	goto $label$23 
	
.LABEL $label$285
	*($3 + [720]) = ($9 << [1])
	$12 = (($3 + [720]) | [1])
	goto $label$40 
	
.LABEL $label$284
	*((($3 + [720]) + [8])) = [0]
	*($3 + [720]) = (int_64)0
	*($3 + [720]) = [0]
	$5 = (($3 + [720]) | [1])
	goto $label$38 
	
.LABEL $label$283
	$13 = (($9 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($3 + [720]) = ($13 | [1])
	*($3 + [728]) = $12
	*($3 + [724]) = $9
	$17 = [178]
	goto $label$23 
	
.LABEL $label$282
	$13 = ($5 + [1])
	$5 = [0]
	$17 = [179]
	goto $label$23 
	
.LABEL $label$281
	*(($12 + $5)) = *((($3 + [224]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$39 }
	$17 = [180]
	goto $label$23 
	
.LABEL $label$280
	$5 = ($12 + $9)
	$17 = [181]
	goto $label$23 
	
.LABEL $label$279
	*($5) = [0]
	CALL $122(($3 + [720]), [17362])
	CALL $58(($3 + [224]), ($3 + [192]))
	$5 = *($3 + [224])
	$9 = ($5 & [1])
	CALL $123(($3 + [720]), ( *($3 + [232]) ? (($3 + [224]) | [1]) : $9 ), ( *($3 + [228]) ? uint_32($5 >> [1]) : $9 ))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$37 }
	$17 = [182]
	goto $label$23 
	
.LABEL $label$278
	CALL _ZdlPv(*(($3 + [232])))
	$17 = [183]
	goto $label$23 
	
.LABEL $label$277
	CALL $39(($3 + [224]), $3, *($6), ($3 + [720]))
	if ( (*($3 + [720]) & [1]) ){ goto $label$36 }
	$17 = [195]
	goto $label$23 
	
.LABEL $label$276
	*($3 + [720]) = [0]
	goto $label$35 
	
.LABEL $label$275
	*(*($3 + [728])) = [0]
	*($3 + [724]) = [0]
	$17 = [185]
	goto $label$23 
	
.LABEL $label$274
	CALL $119(($3 + [720]), [0])
	*((($3 + [720]) + [8])) = *((($3 + [224]) + [8]))
	*($3 + [720]) = *($3 + [224])
	*($3 + [184]) = (int_64)3617214756542218240
	*($3 + [176]) = (int_64)6112252634508449952
	*($3 + [160]) = [17369]
	*($3 + [164]) = CALL $136([17369])
	*($3 + [8]) = *($3 + [160])
	$5 = CALL $40(($3 + [168]), ($3 + [8]))
	*(($3 + [136])) = *((($3 + [192]) + [8]))
	*($3 + [120]) = *($1)
	*($3 + [128]) = *($3 + [192])
	CALL $116(($3 + [144]), ($3 + [720]))
	$5 = CALL $41(($3 + [224]), ($3 + [176]), (int_64)6112252634508449952, *($5), ($3 + [120]))
	CALL $42(($3 + [40]), $5)
	$9 = *($3 + [40])
	CALL send_inline($9, (*($3 + [44]) - $9))
	$9 = *($3 + [40])
	if ( ($9 == 0) ){ goto $label$34 }
	$17 = [186]
	goto $label$23 
	
.LABEL $label$273
	*($3 + [44]) = $9
	CALL _ZdlPv($9)
	$17 = [187]
	goto $label$23 
	
.LABEL $label$272
	$9 = *($5 + [28])
	if ( ($9 == 0) ){ goto $label$33 }
	$17 = [188]
	goto $label$23 
	
.LABEL $label$271
	*(($5 + [32])) = $9
	CALL _ZdlPv($9)
	$17 = [189]
	goto $label$23 
	
.LABEL $label$270
	$9 = *($5 + [16])
	if ( ($9 == 0) ){ goto $label$32 }
	$17 = [190]
	goto $label$23 
	
.LABEL $label$269
	*(($5 + [20])) = $9
	CALL _ZdlPv($9)
	$17 = [191]
	goto $label$23 
	
.LABEL $label$268
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$31 }
	$17 = [192]
	goto $label$23 
	
.LABEL $label$267
	CALL _ZdlPv(*(($3 + [152])))
	$17 = [193]
	goto $label$23 
	
.LABEL $label$266
	if ( ((*($3 + [720]) & [1]) == 0) ){ goto $label$93 }
	$17 = [194]
	goto $label$23 
	
.LABEL $label$265
	CALL _ZdlPv(*($3 + [728]))
	$17 = [92]
	goto $label$23 
	
.LABEL $label$264
	$10 = *(($6 + [24]))
	$39 = ((float_64)(CASTING float_64)(int_64 *($6 + [16])) * (float_64)(float_64)0.985)
	CALL eosio_assert(((float_64)$39 <= (float_64)(float_64)4611686018427387904), [8192])
	CALL eosio_assert(((float_64)$39 >= (float_64)(float_64)-4611686018427387904), [8260])
	if ( ((float_64)(float_64)|$39| < (float_64)(float_64)9223372036854775808) ){ goto $label$92 }
	$17 = [171]
	goto $label$23 
	
.LABEL $label$263
	$11 = (int_64)-9223372036854775808
	goto $label$91 
	
.LABEL $label$262
	$11 = (Rounds 0)($39)
	$17 = [94]
	goto $label$23 
	
.LABEL $label$261
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17564])
	*($3 + [200]) = $10
	CALL eosio_assert(((int_64)$19 == (int_64)$10), [18243])
	$10 = (int_64)
	*($3 + [192]) = $10($11 - $20))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [18291])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [18313])
	*(($3 + [112])) = [0]
	*($3 + [104]) = (int_64)0
	$5 = CALL $136([17380])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$90 }
	$17 = [95]
	goto $label$23 
	
.LABEL $label$260
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$89 }
	$17 = [169]
	goto $label$23 
	
.LABEL $label$259
	*($3 + [104]) = ($5 << [1])
	$9 = (($3 + [104]) | [1])
	if ( $5 ){ goto $label$87 }
	goto $label$88 
	
.LABEL $label$258
	$12 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($3 + [104]) = ($12 | [1])
	*($3 + [112]) = $9
	*($3 + [108]) = $5
	$17 = [97]
	goto $label$23 
	
.LABEL $label$257
	CALL memcpy($9, [17380], $5)
	$17 = [98]
	goto $label$23 
	
.LABEL $label$256
	*(($9 + $5)) = [0]
	CALL $58(($3 + [224]), ($3 + [192]))
	$5 = *($3 + [224])
	$9 = ($5 & [1])
	CALL $123(($3 + [104]), ( *($3 + [232]) ? (($3 + [224]) | [1]) : $9 ), ( *($3 + [228]) ? uint_32($5 >> [1]) : $9 ))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$86 }
	$17 = [99]
	goto $label$23 
	
.LABEL $label$255
	CALL _ZdlPv(*(($3 + [232])))
	$17 = [100]
	goto $label$23 
	
.LABEL $label$254
	CALL $39(($3 + [224]), $3, *($6), ($3 + [104]))
	if ( (*($3 + [104]) & [1]) ){ goto $label$85 }
	$17 = [168]
	goto $label$23 
	
.LABEL $label$253
	*($3 + [104]) = [0]
	goto $label$84 
	
.LABEL $label$252
	*(*($3 + [112])) = [0]
	*($3 + [108]) = [0]
	$17 = [102]
	goto $label$23 
	
.LABEL $label$251
	CALL $119(($3 + [104]), [0])
	*((($3 + [104]) + [8])) = *((($3 + [224]) + [8]))
	*($3 + [104]) = *($3 + [224])
	*($3 + [184]) = (int_64)3617214756542218240
	*($3 + [176]) = (int_64)6112252634508449952
	*($3 + [88]) = [17369]
	*($3 + [92]) = CALL $136([17369])
	*($3) = *($3 + [88])
	$5 = CALL $40(($3 + [96]), $3)
	*(($3 + [136])) = *((($3 + [192]) + [8]))
	*($3 + [120]) = (int_64)6112252634338746400
	*($3 + [128]) = *($3 + [192])
	CALL $116(($3 + [144]), ($3 + [104]))
	$5 = CALL $41(($3 + [224]), ($3 + [176]), (int_64)6112252634508449952, *($5), ($3 + [120]))
	CALL $42(($3 + [40]), $5)
	$9 = *($3 + [40])
	CALL send_inline($9, (*($3 + [44]) - $9))
	$9 = *($3 + [40])
	if ( ($9 == 0) ){ goto $label$83 }
	$17 = [103]
	goto $label$23 
	
.LABEL $label$250
	*($3 + [44]) = $9
	CALL _ZdlPv($9)
	$17 = [104]
	goto $label$23 
	
.LABEL $label$249
	$9 = *($5 + [28])
	if ( ($9 == 0) ){ goto $label$82 }
	$17 = [105]
	goto $label$23 
	
.LABEL $label$248
	*(($5 + [32])) = $9
	CALL _ZdlPv($9)
	$17 = [106]
	goto $label$23 
	
.LABEL $label$247
	$9 = *($5 + [16])
	if ( ($9 == 0) ){ goto $label$81 }
	$17 = [107]
	goto $label$23 
	
.LABEL $label$246
	*(($5 + [20])) = $9
	CALL _ZdlPv($9)
	$17 = [108]
	goto $label$23 
	
.LABEL $label$245
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$80 }
	$17 = [109]
	goto $label$23 
	
.LABEL $label$244
	CALL _ZdlPv(*(($3 + [152])))
	$17 = [110]
	goto $label$23 
	
.LABEL $label$243
	if ( ((int_64)*($3 + [336]) < (int_64)1) ){ goto $label$79 }
	$17 = [126]
	goto $label$23 
	
.LABEL $label$242
	*(($3 + [80])) = [0]
	*($3 + [72]) = (int_64)0
	$5 = CALL $136([17392])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$68 }
	$17 = [127]
	goto $label$23 
	
.LABEL $label$241
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$67 }
	$17 = [166]
	goto $label$23 
	
.LABEL $label$240
	*($3 + [72]) = ($5 << [1])
	$9 = (($3 + [72]) | [1])
	if ( $5 ){ goto $label$65 }
	goto $label$66 
	
.LABEL $label$239
	$12 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($3 + [72]) = ($12 | [1])
	*($3 + [80]) = $9
	*($3 + [76]) = $5
	$17 = [129]
	goto $label$23 
	
.LABEL $label$238
	CALL memcpy($9, [17392], $5)
	$17 = [130]
	goto $label$23 
	
.LABEL $label$237
	*(($9 + $5)) = [0]
	CALL $58(($3 + [224]), ($3 + [336]))
	$5 = *($3 + [224])
	$9 = ($5 & [1])
	CALL $123(($3 + [72]), ( *($3 + [232]) ? (($3 + [224]) | [1]) : $9 ), ( *($3 + [228]) ? uint_32($5 >> [1]) : $9 ))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$64 }
	$17 = [131]
	goto $label$23 
	
.LABEL $label$236
	CALL _ZdlPv(*(($3 + [232])))
	$17 = [132]
	goto $label$23 
	
.LABEL $label$235
	CALL $39(($3 + [224]), $3, *($6), ($3 + [72]))
	if ( (*($3 + [72]) & [1]) ){ goto $label$63 }
	$17 = [165]
	goto $label$23 
	
.LABEL $label$234
	*($3 + [72]) = [0]
	goto $label$62 
	
.LABEL $label$233
	*(*($3 + [80])) = [0]
	*($3 + [76]) = [0]
	$17 = [134]
	goto $label$23 
	
.LABEL $label$232
	CALL $119(($3 + [72]), [0])
	*((($3 + [72]) + [8])) = *((($3 + [224]) + [8]))
	*($3 + [72]) = *($3 + [224])
	$10 = *($1)
	*($3 + [184]) = (int_64)3617214756542218240
	*($3 + [176]) = (int_64)6112252634648024368
	*(($3 + [136])) = *((($3 + [336]) + [8]))
	*($3 + [120]) = $10
	*($3 + [128]) = *($3 + [336])
	CALL $116(($3 + [144]), ($3 + [72]))
	$5 = CALL $41(($3 + [224]), ($3 + [176]), (int_64)6112252634648024368, (int_64)8516770215600755200, ($3 + [120]))
	CALL $42(($3 + [40]), $5)
	$9 = *($3 + [40])
	CALL send_inline($9, (*($3 + [44]) - $9))
	$9 = *($3 + [40])
	if ( ($9 == 0) ){ goto $label$61 }
	$17 = [135]
	goto $label$23 
	
.LABEL $label$231
	*($3 + [44]) = $9
	CALL _ZdlPv($9)
	$17 = [136]
	goto $label$23 
	
.LABEL $label$230
	$9 = *($5 + [28])
	if ( ($9 == 0) ){ goto $label$60 }
	$17 = [137]
	goto $label$23 
	
.LABEL $label$229
	*(($5 + [32])) = $9
	CALL _ZdlPv($9)
	$17 = [138]
	goto $label$23 
	
.LABEL $label$228
	$9 = *($5 + [16])
	if ( ($9 == 0) ){ goto $label$59 }
	$17 = [139]
	goto $label$23 
	
.LABEL $label$227
	*(($5 + [20])) = $9
	CALL _ZdlPv($9)
	$17 = [140]
	goto $label$23 
	
.LABEL $label$226
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$58 }
	$17 = [141]
	goto $label$23 
	
.LABEL $label$225
	CALL _ZdlPv(*(($3 + [152])))
	$17 = [142]
	goto $label$23 
	
.LABEL $label$224
	*((($3 + [176]) + [8])) = *((($3 + [336]) + [8]))
	*($3 + [176]) = *($3 + [336])
	CALL eosio_assert([1], [18180])
	$10 = *($3 + [176])
	CALL eosio_assert([1], [18195])
	*($3 + [176]) = ((int_64)$10 / (int_64)10)
	*((($3 + [56]) + [8])) = [0]
	*($3 + [56]) = (int_64)0
	$5 = CALL $136([17400])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$57 }
	$17 = [143]
	goto $label$23 
	
.LABEL $label$223
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$56 }
	$17 = [163]
	goto $label$23 
	
.LABEL $label$222
	*($3 + [56]) = ($5 << [1])
	$9 = (($3 + [56]) | [1])
	if ( $5 ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$221
	$12 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($3 + [56]) = ($12 | [1])
	*($3 + [64]) = $9
	*($3 + [60]) = $5
	$17 = [145]
	goto $label$23 
	
.LABEL $label$220
	CALL memcpy($9, [17400], $5)
	$17 = [146]
	goto $label$23 
	
.LABEL $label$219
	*(($9 + $5)) = [0]
	CALL $58(($3 + [224]), ($3 + [176]))
	$5 = *($3 + [224])
	$9 = ($5 & [1])
	CALL $123(($3 + [56]), ( *($3 + [232]) ? (($3 + [224]) | [1]) : $9 ), ( *($3 + [228]) ? uint_32($5 >> [1]) : $9 ))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$53 }
	$17 = [147]
	goto $label$23 
	
.LABEL $label$218
	CALL _ZdlPv(*(($3 + [232])))
	$17 = [148]
	goto $label$23 
	
.LABEL $label$217
	CALL $39(($3 + [224]), $3, *($6), ($3 + [56]))
	if ( (*($3 + [56]) & [1]) ){ goto $label$52 }
	$17 = [162]
	goto $label$23 
	
.LABEL $label$216
	*($3 + [56]) = [0]
	goto $label$51 
	
.LABEL $label$215
	*(*($3 + [64])) = [0]
	*($3 + [60]) = [0]
	$17 = [150]
	goto $label$23 
	
.LABEL $label$214
	CALL $119(($3 + [56]), [0])
	*((($3 + [56]) + [8])) = *((($3 + [224]) + [8]))
	*($3 + [56]) = *($3 + [224])
	$10 = *(($6 + [40]))
	*($3 + [48]) = (int_64)3617214756542218240
	*($3 + [40]) = (int_64)6112252634648024368
	*(($3 + [136])) = *((($3 + [176]) + [8]))
	*($3 + [120]) = $10
	*($3 + [128]) = *($3 + [176])
	CALL $116(($3 + [144]), ($3 + [56]))
	$5 = CALL $41(($3 + [224]), ($3 + [40]), (int_64)6112252634648024368, (int_64)8516770215600755200, ($3 + [120]))
	CALL $42(($3 + [720]), $5)
	$9 = *($3 + [720])
	CALL send_inline($9, (*($3 + [724]) - $9))
	$9 = *($3 + [720])
	if ( ($9 == 0) ){ goto $label$50 }
	$17 = [151]
	goto $label$23 
	
.LABEL $label$213
	*($3 + [724]) = $9
	CALL _ZdlPv($9)
	$17 = [152]
	goto $label$23 
	
.LABEL $label$212
	$9 = *($5 + [28])
	if ( ($9 == 0) ){ goto $label$49 }
	$17 = [153]
	goto $label$23 
	
.LABEL $label$211
	*(($5 + [32])) = $9
	CALL _ZdlPv($9)
	$17 = [154]
	goto $label$23 
	
.LABEL $label$210
	$9 = *($5 + [16])
	if ( ($9 == 0) ){ goto $label$48 }
	$17 = [155]
	goto $label$23 
	
.LABEL $label$209
	*(($5 + [20])) = $9
	CALL _ZdlPv($9)
	$17 = [156]
	goto $label$23 
	
.LABEL $label$208
	if ( (*($3 + [144]) & [1]) ){ goto $label$47 }
	$17 = [161]
	goto $label$23 
	
.LABEL $label$207
	if ( (*($3 + [56]) & [1]) ){ goto $label$46 }
	$17 = [160]
	goto $label$23 
	
.LABEL $label$206
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$78 }
	$17 = [159]
	goto $label$23 
	
.LABEL $label$205
	CALL _ZdlPv(*($3 + [80]))
	$17 = [111]
	goto $label$23 
	
.LABEL $label$204
	*($3 + [224]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $4))
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18610])
	CALL $61(($3 + [224]))
	CALL $62(*($3 + [712]), $6)
	CALL $63($0)
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$75 }
	$17 = [112]
	goto $label$23 
	
.LABEL $label$203
	CALL _ZdlPv(*($3 + [112]))
	$17 = [113]
	goto $label$23 
	
.LABEL $label$202
	$5 = *($3 + [368])
	if ( ($5 == 0) ){ goto $label$74 }
	$17 = [114]
	goto $label$23 
	
.LABEL $label$201
	*($3 + [372]) = $5
	CALL _ZdlPv($5)
	$17 = [115]
	goto $label$23 
	
.LABEL $label$200
	$5 = *($3 + [408])
	if ( ($5 == 0) ){ goto $label$73 }
	$17 = [116]
	goto $label$23 
	
.LABEL $label$199
	*($3 + [412]) = $5
	CALL _ZdlPv($5)
	$17 = [117]
	goto $label$23 
	
.LABEL $label$198
	CALL $14(($3 + [424]), *($3 + [428]))
	CALL $64(($3 + [440]))
	if ( ((*($3 + [576]) & [1]) == 0) ){ goto $label$72 }
	$17 = [118]
	goto $label$23 
	
.LABEL $label$197
	CALL _ZdlPv(*(($3 + [584])))
	$17 = [119]
	goto $label$23 
	
.LABEL $label$196
	$5 = *($3 + [592])
	if ( ($5 == 0) ){ goto $label$71 }
	$17 = [120]
	goto $label$23 
	
.LABEL $label$195
	*($3 + [596]) = $5
	CALL _ZdlPv($5)
	$17 = [121]
	goto $label$23 
	
.LABEL $label$194
	$5 = *($3 + [608])
	if ( ($5 == 0) ){ goto $label$70 }
	$17 = [122]
	goto $label$23 
	
.LABEL $label$193
	*($3 + [612]) = $5
	CALL _ZdlPv($5)
	$17 = [123]
	goto $label$23 
	
.LABEL $label$192
	if ( ((*($3 + [696]) & [1]) == 0) ){ goto $label$69 }
	$17 = [124]
	goto $label$23 
	
.LABEL $label$191
	CALL _ZdlPv(*(($8 + [8])))
	$17 = [125]
	goto $label$23 
	
.LABEL $label$190
	$global$0 = ($3 + [736])
	return (unreachable)
	
.LABEL $label$189
	CALL _ZdlPv(*(($3 + [152])))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$45 }
	$17 = [158]
	goto $label$23 
	
.LABEL $label$188
	CALL _ZdlPv(*($3 + [64]))
	if ( (*($3 + [72]) & [1]) ){ goto $label$76 }
	goto $label$77 
	
.LABEL $label$187
	CALL $127(($3 + [120]))
	
.LABEL $label$186
	CALL $115(($3 + [104]))
	
.LABEL $label$185
	CALL $115(($3 + [72]))
	
.LABEL $label$184
	CALL $115(($3 + [56]))
	
.LABEL $label$183
	$17 = [233]
	goto $label$23 
	
.LABEL $label$182
	$17 = [5]
	goto $label$23 
	
.LABEL $label$181
	$17 = [229]
	goto $label$23 
	
.LABEL $label$180
	$17 = [1]
	goto $label$23 
	
.LABEL $label$179
	$17 = [1]
	goto $label$23 
	
.LABEL $label$178
	$17 = [13]
	goto $label$23 
	
.LABEL $label$177
	$17 = [14]
	goto $label$23 
	
.LABEL $label$176
	$17 = [1]
	goto $label$23 
	
.LABEL $label$175
	$17 = [1]
	goto $label$23 
	
.LABEL $label$174
	$17 = [0]
	goto $label$23 
	
.LABEL $label$173
	$17 = [10]
	goto $label$23 
	
.LABEL $label$172
	$17 = [13]
	goto $label$23 
	
.LABEL $label$171
	$17 = [1]
	goto $label$23 
	
.LABEL $label$170
	$17 = [3]
	goto $label$23 
	
.LABEL $label$169
	$17 = [4]
	goto $label$23 
	
.LABEL $label$168
	$17 = [7]
	goto $label$23 
	
.LABEL $label$167
	$17 = [6]
	goto $label$23 
	
.LABEL $label$166
	$17 = [232]
	goto $label$23 
	
.LABEL $label$165
	$17 = [232]
	goto $label$23 
	
.LABEL $label$164
	$17 = [228]
	goto $label$23 
	
.LABEL $label$163
	$17 = [10]
	goto $label$23 
	
.LABEL $label$162
	$17 = [11]
	goto $label$23 
	
.LABEL $label$161
	$17 = [12]
	goto $label$23 
	
.LABEL $label$160
	$17 = [25]
	goto $label$23 
	
.LABEL $label$159
	$17 = [16]
	goto $label$23 
	
.LABEL $label$158
	$17 = [24]
	goto $label$23 
	
.LABEL $label$157
	$17 = [18]
	goto $label$23 
	
.LABEL $label$156
	$17 = [24]
	goto $label$23 
	
.LABEL $label$155
	$17 = [24]
	goto $label$23 
	
.LABEL $label$154
	$17 = [22]
	goto $label$23 
	
.LABEL $label$153
	$17 = [23]
	goto $label$23 
	
.LABEL $label$152
	$17 = [27]
	goto $label$23 
	
.LABEL $label$151
	$17 = [79]
	goto $label$23 
	
.LABEL $label$150
	$17 = [29]
	goto $label$23 
	
.LABEL $label$149
	$17 = [33]
	goto $label$23 
	
.LABEL $label$148
	$17 = [223]
	goto $label$23 
	
.LABEL $label$147
	$17 = [32]
	goto $label$23 
	
.LABEL $label$146
	$17 = [33]
	goto $label$23 
	
.LABEL $label$145
	$17 = [39]
	goto $label$23 
	
.LABEL $label$144
	$17 = [35]
	goto $label$23 
	
.LABEL $label$143
	$17 = [221]
	goto $label$23 
	
.LABEL $label$142
	$17 = [37]
	goto $label$23 
	
.LABEL $label$141
	$17 = [42]
	goto $label$23 
	
.LABEL $label$140
	$17 = [41]
	goto $label$23 
	
.LABEL $label$139
	$17 = [43]
	goto $label$23 
	
.LABEL $label$138
	$17 = [220]
	goto $label$23 
	
.LABEL $label$137
	$17 = [45]
	goto $label$23 
	
.LABEL $label$136
	$17 = [47]
	goto $label$23 
	
.LABEL $label$135
	$17 = [52]
	goto $label$23 
	
.LABEL $label$134
	$17 = [49]
	goto $label$23 
	
.LABEL $label$133
	$17 = [52]
	goto $label$23 
	
.LABEL $label$132
	$17 = [219]
	goto $label$23 
	
.LABEL $label$131
	$17 = [53]
	goto $label$23 
	
.LABEL $label$130
	$17 = [54]
	goto $label$23 
	
.LABEL $label$129
	$17 = [56]
	goto $label$23 
	
.LABEL $label$128
	$17 = [57]
	goto $label$23 
	
.LABEL $label$127
	$17 = [58]
	goto $label$23 
	
.LABEL $label$126
	$17 = [217]
	goto $label$23 
	
.LABEL $label$125
	$17 = [60]
	goto $label$23 
	
.LABEL $label$124
	$17 = [216]
	goto $label$23 
	
.LABEL $label$123
	$17 = [62]
	goto $label$23 
	
.LABEL $label$122
	$17 = [64]
	goto $label$23 
	
.LABEL $label$121
	$17 = [65]
	goto $label$23 
	
.LABEL $label$120
	$17 = [67]
	goto $label$23 
	
.LABEL $label$119
	$17 = [65]
	goto $label$23 
	
.LABEL $label$118
	$17 = [67]
	goto $label$23 
	
.LABEL $label$117
	$17 = [66]
	goto $label$23 
	
.LABEL $label$116
	$17 = [66]
	goto $label$23 
	
.LABEL $label$115
	$17 = [68]
	goto $label$23 
	
.LABEL $label$114
	$17 = [203]
	goto $label$23 
	
.LABEL $label$113
	$17 = [202]
	goto $label$23 
	
.LABEL $label$112
	$17 = [70]
	goto $label$23 
	
.LABEL $label$111
	$17 = [72]
	goto $label$23 
	
.LABEL $label$110
	$17 = [72]
	goto $label$23 
	
.LABEL $label$109
	$17 = [71]
	goto $label$23 
	
.LABEL $label$108
	$17 = [72]
	goto $label$23 
	
.LABEL $label$107
	$17 = [71]
	goto $label$23 
	
.LABEL $label$106
	$17 = [74]
	goto $label$23 
	
.LABEL $label$105
	$17 = [76]
	goto $label$23 
	
.LABEL $label$104
	$17 = [78]
	goto $label$23 
	
.LABEL $label$103
	$17 = [199]
	goto $label$23 
	
.LABEL $label$102
	$17 = [81]
	goto $label$23 
	
.LABEL $label$101
	$17 = [81]
	goto $label$23 
	
.LABEL $label$100
	$17 = [81]
	goto $label$23 
	
.LABEL $label$99
	$17 = [83]
	goto $label$23 
	
.LABEL $label$98
	$17 = [85]
	goto $label$23 
	
.LABEL $label$97
	$17 = [87]
	goto $label$23 
	
.LABEL $label$96
	$17 = [89]
	goto $label$23 
	
.LABEL $label$95
	$17 = [91]
	goto $label$23 
	
.LABEL $label$94
	$17 = [92]
	goto $label$23 
	
.LABEL $label$93
	$17 = [92]
	goto $label$23 
	
.LABEL $label$92
	$17 = [93]
	goto $label$23 
	
.LABEL $label$91
	$17 = [94]
	goto $label$23 
	
.LABEL $label$90
	$17 = [170]
	goto $label$23 
	
.LABEL $label$89
	$17 = [96]
	goto $label$23 
	
.LABEL $label$88
	$17 = [98]
	goto $label$23 
	
.LABEL $label$87
	$17 = [97]
	goto $label$23 
	
.LABEL $label$86
	$17 = [100]
	goto $label$23 
	
.LABEL $label$85
	$17 = [101]
	goto $label$23 
	
.LABEL $label$84
	$17 = [102]
	goto $label$23 
	
.LABEL $label$83
	$17 = [104]
	goto $label$23 
	
.LABEL $label$82
	$17 = [106]
	goto $label$23 
	
.LABEL $label$81
	$17 = [108]
	goto $label$23 
	
.LABEL $label$80
	$17 = [110]
	goto $label$23 
	
.LABEL $label$79
	$17 = [111]
	goto $label$23 
	
.LABEL $label$78
	$17 = [111]
	goto $label$23 
	
.LABEL $label$77
	$17 = [111]
	goto $label$23 
	
.LABEL $label$76
	$17 = [159]
	goto $label$23 
	
.LABEL $label$75
	$17 = [113]
	goto $label$23 
	
.LABEL $label$74
	$17 = [115]
	goto $label$23 
	
.LABEL $label$73
	$17 = [117]
	goto $label$23 
	
.LABEL $label$72
	$17 = [119]
	goto $label$23 
	
.LABEL $label$71
	$17 = [121]
	goto $label$23 
	
.LABEL $label$70
	$17 = [123]
	goto $label$23 
	
.LABEL $label$69
	$17 = [125]
	goto $label$23 
	
.LABEL $label$68
	$17 = [167]
	goto $label$23 
	
.LABEL $label$67
	$17 = [128]
	goto $label$23 
	
.LABEL $label$66
	$17 = [130]
	goto $label$23 
	
.LABEL $label$65
	$17 = [129]
	goto $label$23 
	
.LABEL $label$64
	$17 = [132]
	goto $label$23 
	
.LABEL $label$63
	$17 = [133]
	goto $label$23 
	
.LABEL $label$62
	$17 = [134]
	goto $label$23 
	
.LABEL $label$61
	$17 = [136]
	goto $label$23 
	
.LABEL $label$60
	$17 = [138]
	goto $label$23 
	
.LABEL $label$59
	$17 = [140]
	goto $label$23 
	
.LABEL $label$58
	$17 = [142]
	goto $label$23 
	
.LABEL $label$57
	$17 = [164]
	goto $label$23 
	
.LABEL $label$56
	$17 = [144]
	goto $label$23 
	
.LABEL $label$55
	$17 = [146]
	goto $label$23 
	
.LABEL $label$54
	$17 = [145]
	goto $label$23 
	
.LABEL $label$53
	$17 = [148]
	goto $label$23 
	
.LABEL $label$52
	$17 = [149]
	goto $label$23 
	
.LABEL $label$51
	$17 = [150]
	goto $label$23 
	
.LABEL $label$50
	$17 = [152]
	goto $label$23 
	
.LABEL $label$49
	$17 = [154]
	goto $label$23 
	
.LABEL $label$48
	$17 = [156]
	goto $label$23 
	
.LABEL $label$47
	$17 = [157]
	goto $label$23 
	
.LABEL $label$46
	$17 = [158]
	goto $label$23 
	
.LABEL $label$45
	$17 = [160]
	goto $label$23 
	
.LABEL $label$44
	$17 = [197]
	goto $label$23 
	
.LABEL $label$43
	$17 = [174]
	goto $label$23 
	
.LABEL $label$42
	$17 = [176]
	goto $label$23 
	
.LABEL $label$41
	$17 = [177]
	goto $label$23 
	
.LABEL $label$40
	$17 = [178]
	goto $label$23 
	
.LABEL $label$39
	$17 = [179]
	goto $label$23 
	
.LABEL $label$38
	$17 = [181]
	goto $label$23 
	
.LABEL $label$37
	$17 = [183]
	goto $label$23 
	
.LABEL $label$36
	$17 = [184]
	goto $label$23 
	
.LABEL $label$35
	$17 = [185]
	goto $label$23 
	
.LABEL $label$34
	$17 = [187]
	goto $label$23 
	
.LABEL $label$33
	$17 = [189]
	goto $label$23 
	
.LABEL $label$32
	$17 = [191]
	goto $label$23 
	
.LABEL $label$31
	$17 = [193]
	goto $label$23 
	
.LABEL $label$30
	$17 = [201]
	goto $label$23 
	
.LABEL $label$29
	$17 = [208]
	goto $label$23 
	
.LABEL $label$28
	$17 = [205]
	goto $label$23 
	
.LABEL $label$27
	$17 = [207]
	goto $label$23 
	
.LABEL $label$26
	$17 = [212]
	goto $label$23 
	
.LABEL $label$25
	$17 = [213]
	goto $label$23 
	
.LABEL $label$24
	$17 = [231]
	goto $label$23 
	$17
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17870])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $139($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64]))) = (int_64)1
	$6 = *([0] + [8712])
	*($5 + [8]) = $6
	$7 = *([0] + [8720])
	*(($5 + [16])) = $7
	*($5 + [24]) = $6
	*(($5 + [32])) = $7
	$6 = CALL current_time()
	*($5 + [48]) = $0
	*($5 + [40]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	CALL $89(($3 + [32]), ($3 + [24]))
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)7235159538876284928
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($9 + [8]) = (int_64)7235159538876284928
	*($9 + [16]) = $1
	*($3 + [24]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $142($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $118($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [17819])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159538876284928, (int_64)7235159538876284928)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $34($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [17819])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18338])
	CALL $48($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $49($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $142($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $137(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8744])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $137(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $139 (int_32 $0)
{
	return CALL $140([8764], $0)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [18529])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([160])
	*(($5 = CALL _Znwj([56]))) = $3
	$6 = ($3 + [160])
	*($5 + [8]) = $6
	*($3) = *([0] + [17640])
	*(($3 + [8])) = *([0] + [17648])
	*($3 + [16]) = *([0] + [17656])
	*(($3 + [24])) = *([0] + [17664])
	*($3 + [32]) = *([0] + [17672])
	*(($3 + [40])) = *([0] + [17680])
	*($3 + [48]) = *([0] + [17688])
	*(($3 + [56])) = *([0] + [17696])
	*(($3 + [72])) = *([0] + [17712])
	*($3 + [64]) = *([0] + [17704])
	*($3 + [80]) = *([0] + [17720])
	*(($3 + [88])) = *([0] + [17728])
	*($3 + [96]) = *([0] + [17736])
	*(($3 + [104])) = *([0] + [17744])
	*($3 + [112]) = *([0] + [17752])
	*(($3 + [120])) = *([0] + [17760])
	*(($3 + [136])) = *([0] + [17776])
	*($3 + [128]) = *([0] + [17768])
	*($5 + [4]) = $6
	*($5 + [16]) = (int_64)1000
	*($5 + [24]) = (int_64)200000
	*($5 + [32]) = [9]
	*($5 + [40]) = $1
	*(($3 + [152])) = *([0] + [17792])
	*($3 + [144]) = *([0] + [17784])
	CALL $84(($4 + [16]), $5)
	*($4 + [32]) = $5
	*($4 + [16]) = (int_64)4982871455592087552
	$6 = *($5 + [44])
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($3 + [8]) = (int_64)4982871455592087552
	*($3 + [16]) = $6
	*($4 + [32]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $85(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$4 }
	*($3 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18373])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18419])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $87($1, *($3), *($3 + [4]))
	
.LABEL $label$1
	*($1 + [16]) = *($3 + [16])
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	CALL eosio_assert([1], [18470])
	$6 = ($1 + [16])
	$8 = *($1)
	$7 = *($1 + [4])
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [4]))
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$3 = (($9 & [-16]) + $3)
	
.LABEL $label$3
	$7 = ($3 + [20])
	if ( ($7 <= [513]) ){ goto $label$5 }
	$3 = CALL $139($7)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $88($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($5 + [4]), $6, [8])
	$4 = (*($5 + [4]) + [8])
	*($5 + [4]) = $4
	CALL eosio_assert(((int_32)(*($5 + [8]) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($5 + [4]), ($1 + [24]), [8])
	$4 = (*($5 + [4]) + [8])
	*($5 + [4]) = $4
	CALL eosio_assert(((int_32)(*($5 + [8]) - $4) > (int_32)[3]), [18174])
	CALL memcpy(*($5 + [4]), ($1 + [32]), [4])
	*($5 + [4]) = (*($5 + [4]) + [4])
	CALL db_update_i64(*(($1 + [44])), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)4982871455592087552) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $142($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871455592087552) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)4982871455592087553
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $139($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8744])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $139($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $106 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = [0]
	*([0] + [8720]) = (int_64)1397703940
	*([0] + [8712]) = (int_64)0
	CALL eosio_assert([1], [17564])
	$1 = (uint_64)*([0] + [8720]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [17613])
	*([0] + [8736]) = (int_64)5522692
	*([0] + [8728]) = (int_64)0
	CALL eosio_assert([1], [17564])
	$1 = (uint_64)*([0] + [8736]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $2
	$5 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $2
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$11 }
	$5 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($5, [17613])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [17613])
	return 
	
.LABEL $label$6
	CALL eosio_assert([0], [17613])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$18 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$25 }
	$0 = ($7 + $0)
	$0 = uint_32($0 >> [2])
	$8 = ($4 + $0)
	$9 = CALL $81($4, $8, $7, $0, $2)
	if ( (CALL int_32 $6((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$21 }
	$3 = *($0)
	*($0) = *($6)
	*($6) = $3
	if ( (CALL int_32 $0((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$24 }
	$3 = *($7)
	*($7) = *($0)
	*($0) = $3
	if ( (CALL int_32 $7((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$20 }
	$0 = *($8)
	*($8) = *($7)
	*($7) = $0
	if ( (CALL int_32 $8((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$19 }
	$0 = *($4)
	*($4) = *($8)
	*($8) = $0
	$9 = ($9 + [4])
	if ( CALL int_32 $4((int_32 $7), (int_32 *($2))) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$25
	$0 = CALL int_32 $7((int_32 $4), (int_32 *($2)))
	$8 = CALL int_32 $6((int_32 $7), (int_32 *($2)))
	if ( ($0 == 0) ){ goto $label$26 }
	$0 = *($4)
	if ( ($8 == 0) ){ goto $label$23 }
	*($4) = *($6)
	*($6) = $0
	$9 = [1]
	if ( CALL int_32 $4((int_32 $7), (int_32 *($2))) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$26
	$9 = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	$0 = *($7)
	*($7) = *($6)
	*($6) = $0
	$9 = [1]
	if ( (CALL int_32 $7((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$21 }
	$0 = *($4)
	*($4) = *($7)
	*($7) = $0
	goto $label$22 
	
.LABEL $label$24
	$9 = ($9 + [1])
	if ( (CALL int_32 $4((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$23
	*($4) = *($7)
	*($7) = $0
	$9 = [1]
	if ( (CALL int_32 $6((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$21 }
	$0 = *($7)
	*($7) = *($6)
	*($6) = $0
	
.LABEL $label$22
	$9 = [2]
	
.LABEL $label$21
	if ( (CALL int_32 $4((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$20
	$9 = ($9 + [2])
	if ( CALL int_32 $4((int_32 $7), (int_32 *($2))) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$9 = ($9 + [3])
	if ( CALL int_32 $4((int_32 $7), (int_32 *($2))) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $82($4, $1, $2)
	return $0
	
.LABEL $label$17
	$8 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $8) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	$0 = $5
	
.LOOP $label$27:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$13 }
	$8 = CALL int_32 $0((int_32 $7), (int_32 *($2)))
	$0 = ($0 + [-1])
	if ( ($8 == 0) ){ goto $label$27 }
	$3 = *($4)
	$8 = ($0 + [1])
	*($4) = *($8)
	*($8) = $3
	$9 = ($9 + [1])
	$3 = ($4 + [1])
	if ( ($3 <= $8) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$14
	
.LOOP $label$28:
	$0 = ($3 + [-1])
	
.LOOP $label$29:
	$0 = ($0 + [1])
	if ( CALL int_32 $0((int_32 $7), (int_32 *($2))) ){ goto $label$29 }
	$3 = ($0 + [1])
	
.LOOP $label$30:
	$8 = ($8 + [-1])
	if ( (CALL int_32 $8((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$30 }
	if ( ((uint_32)$0 > (uint_32)$8) ){ goto $label$31 }
	$10 = *($0)
	*($0) = *($8)
	*($8) = $10
	$7 = ( $8 ? $7 : ((int_32)$7 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$28 
	
.LABEL $label$31
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = ($4 + [1])
	if ( CALL int_32 $4((int_32 $6), (int_32 *($2))) ){ goto $label$32 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$7 = ($4 + [2])
	
.LOOP $label$34:
	$0 = ($7 + [-1])
	if ( CALL int_32 $4((int_32 $0), (int_32 *($2))) ){ goto $label$33 }
	$7 = ($7 + [1])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$34 }
	goto $label$3 
	
.LABEL $label$33
	$8 = *($0)
	*($0) = *($6)
	*($6) = $8
	
.LABEL $label$32
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$35:
	$0 = ($7 + [-1])
	
.LOOP $label$36:
	$0 = ($0 + [1])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$36 }
	$7 = ($0 + [1])
	
.LOOP $label$37:
	$6 = ($6 + [-1])
	if ( CALL int_32 $4((int_32 $6), (int_32 *($2))) ){ goto $label$37 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$38 }
	$8 = *($0)
	*($0) = *($6)
	*($6) = $8
	goto $label$35 
	
.LABEL $label$38
	$7 = ([4] & [7])
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$12
	if ( (CALL int_32 $7((int_32 $3), (int_32 *($2))) == 0) ){ goto $label$11 }
	$0 = *($3)
	*($3) = *($7)
	*($7) = $0
	if ( ($9 + [1]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( $9 ){ goto $label$9 }
	
.LABEL $label$10
	$7 = CALL $83($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $83($0, $1, $2) ){ goto $label$6 }
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $21($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$8
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	goto $label$7 
	
.LABEL $label$6
	$1 = ( $1 ? $3 : $7 )
	$0 = $4
	$7 = (( [1] ? [2] : $7 ) & [7])
	if ( ((uint_32)$7 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	goto $label$3 
	
.LABEL $label$44
	$0 = ($1 + [-1])
	if ( (CALL int_32 $0((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$3 }
	$2 = *($4)
	*($4) = *($0)
	*($0) = $2
	return 
	
.LABEL $label$43
	$0 = ($4 + [1])
	$8 = CALL int_32 $0((int_32 $4), (int_32 *($2)))
	$7 = ($1 + [-1])
	$6 = CALL int_32 $7((int_32 $0), (int_32 *($2)))
	if ( ($8 == 0) ){ goto $label$40 }
	$8 = *($4)
	if ( ($6 == 0) ){ goto $label$39 }
	*($4) = *($7)
	*($7) = $8
	return 
	
.LABEL $label$42
	CALL $81($4, ($4 + [1]), ($4 + [2]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$41
	$0 = ($4 + [3])
	$7 = ($4 + [2])
	$6 = ($4 + [1])
	CALL $81($4, $6, $7, $0, $2)
	$8 = ($1 + [-1])
	if ( (CALL int_32 $8((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$3 }
	$3 = *($0)
	*($0) = *($8)
	*($8) = $3
	if ( (CALL int_32 $0((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$3 }
	$8 = *($7)
	*($7) = *($0)
	*($0) = $8
	if ( (CALL int_32 $7((int_32 $6), (int_32 *($2))) == 0) ){ goto $label$3 }
	$0 = ($4 + [1])
	$7 = *($0)
	$8 = ($4 + [2])
	*($0) = *($8)
	*($8) = $7
	if ( (CALL int_32 $6((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$3 }
	$2 = *($4)
	*($4) = *($0)
	*($0) = $2
	goto $label$3 
	
.LABEL $label$40
	if ( ($6 == 0) ){ goto $label$3 }
	$8 = ($4 + [1])
	$6 = *($8)
	*($8) = *($7)
	*($7) = $6
	if ( (CALL int_32 $0((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$3 }
	$2 = *($4)
	*($4) = *($8)
	*($8) = $2
	return 
	
.LABEL $label$39
	$6 = ($4 + [1])
	*($4) = *($6)
	*($6) = $8
	if ( (CALL int_32 $7((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$3 }
	$2 = *($0)
	*($0) = *($7)
	*($7) = $2
	return 
	
.LABEL $label$4
	if ( (([1] << $7) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $21(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $20($0, *($1))
	CALL $20($0, *($1 + [4]))
	$2 = *(($1 + [20]))
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = ($1 + [24])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($4 + [-12])
	$5 = *($0)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$4 = $0
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($1 + [20]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($3) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $23($0, *($1))
	CALL $23($0, *($1 + [4]))
	$0 = *(($1 + [20]))
	if ( ($0 == 0) ){ goto $label$2 }
	*(($1 + [24])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($2 = ($4 + ((int_32)$3 * (int_32)[12]))) + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($3)
	*($2) = $6
	*(($7 = ($2 + [4]))) = $6
	*(($2 + [8])) = ($6 + $3)
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $3, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$6
	$6 = ($4 + ((int_32)$5 * (int_32)[12]))
	$7 = ($2 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	*(($3 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$1 = ($4 + [-12])
	*($3) = *($1)
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($1) = (int_64)0
	$2 = $3
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$9 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	$2 = $3
	goto $label$7 
	
.LABEL $label$8
	$4 = $5
	
.LABEL $label$7
	*($0) = $2
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($5 + [-12])
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$12 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $127($2)
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	CALL require_auth((int_64)6112252634446868640)
	CALL $26(($0 + [32]), $1, *($0))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$38 }
	goto $label$45 
	
.LABEL $label$45
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8597])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$44
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8642])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$34 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$43
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8693])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$31 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$42
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8620])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$28 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$41
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8606])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$19 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$40
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8629])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$25 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$39
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8667])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$16 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$38
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8704])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$37
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8651])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$36
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8657])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$35
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $136([8679])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$34
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$33
	CALL memcpy($2, [8642], $1)
	
.LABEL $label$32
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$31
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$30
	CALL memcpy($2, [8693], $1)
	
.LABEL $label$29
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$28
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$27
	CALL memcpy($2, [8620], $1)
	
.LABEL $label$26
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$25
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$24
	CALL memcpy($2, [8629], $1)
	
.LABEL $label$23
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$22
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$21
	CALL memcpy($2, [8597], $1)
	
.LABEL $label$20
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$19
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$18
	CALL memcpy($2, [8606], $1)
	
.LABEL $label$17
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$16
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$15
	CALL memcpy($2, [8667], $1)
	
.LABEL $label$14
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$13
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$12
	CALL memcpy($2, [8704], $1)
	
.LABEL $label$11
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($2, [8651], $1)
	
.LABEL $label$8
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [8657], $1)
	
.LABEL $label$5
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($2, [8679], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $115($0)
	$1
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17870])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $139($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $6)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $6)
	$5 = CALL _Znwj([160])
	*(($4 = CALL _Znwj([56]))) = $5
	$7 = ($5 + [160])
	*($4 + [8]) = $7
	*($5) = *([0] + [17640])
	*(($5 + [8])) = *([0] + [17648])
	*($5 + [16]) = *([0] + [17656])
	*(($5 + [24])) = *([0] + [17664])
	*($5 + [32]) = *([0] + [17672])
	*(($5 + [40])) = *([0] + [17680])
	*($5 + [48]) = *([0] + [17688])
	*(($5 + [56])) = *([0] + [17696])
	*(($5 + [72])) = *([0] + [17712])
	*($5 + [64]) = *([0] + [17704])
	*($5 + [80]) = *([0] + [17720])
	*(($5 + [88])) = *([0] + [17728])
	*($5 + [96]) = *([0] + [17736])
	*(($5 + [104])) = *([0] + [17744])
	*($5 + [112]) = *([0] + [17752])
	*(($5 + [120])) = *([0] + [17760])
	*(($5 + [136])) = *([0] + [17776])
	*($5 + [128]) = *([0] + [17768])
	*($4 + [4]) = $7
	*($4 + [16]) = (int_64)1000
	*($4 + [24]) = (int_64)200000
	*($4 + [32]) = [9]
	*($4 + [40]) = $0
	*(($5 + [152])) = *([0] + [17792])
	*($5 + [144]) = *([0] + [17784])
	CALL $71(($3 + [32]), $4)
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [17893])
	CALL memcpy(($4 + [16]), *($3 + [36]), [8])
	$5 = (*($3 + [36]) + [8])
	*($3 + [36]) = $5
	CALL eosio_assert(((uint_32)(*($3 + [40]) - $5) > (uint_32)[7]), [17893])
	CALL memcpy(($4 + [24]), *($3 + [36]), [8])
	$5 = (*($3 + [36]) + [8])
	*($3 + [36]) = $5
	CALL eosio_assert(((uint_32)(*($3 + [40]) - $5) > (uint_32)[3]), [17893])
	CALL memcpy(($4 + [32]), *($3 + [36]), [4])
	*($4 + [44]) = $1
	*($3 + [24]) = $4
	*($3 + [36]) = (*($3 + [36]) + [4])
	*($3 + [16]) = (int_64)4982871455592087552
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($5 + [8]) = (int_64)4982871455592087552
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $4
	*($7) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $142($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$10 }
	*($5 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$0), [17819])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871455592087552, (int_64)4982871455592087552)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27($0, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$0), [17819])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18338])
	CALL $28($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $29($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $142($0)
	
.LABEL $label$1
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [224]) = ($2 + $8)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$8 > (uint_32)[7]), [17893])
	CALL memcpy(($4 + [232]), $2, [8])
	*($4 + [220]) = ($2 + [8])
	CALL $75(($4 + [216]), (($4 + [232]) + [8]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($9 = (($4 + [272]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [272]) = $10
	*($4 + [256]) = $10
	$3 = *($9)
	*((($4 + [288]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [272])
	*($4 + [40]) = $1
	*($4 + [288]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*(($4 + [184])) = $0
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*($4 + [272]) = (int_64)0
	*($4 + [280]) = [0]
	$0 = *($4 + [232])
	$3 = (*(($4 + [244])) - *($4 + [240]))
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*((($4 + [272]) + [8])) = ($7 + $3)
	*($4 + [272]) = $7
	*($4 + [276]) = $7
	$9 = *((($4 + [232]) + [8]))
	$3 = (*(($4 + [244])) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $9, $3)
	$7 = (*($4 + [276]) + $3)
	*($4 + [276]) = $7
	
.LABEL $label$6
	*($4 + [256]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [296]) = [0]
	*($4 + [288]) = (int_64)0
	$7 = ($7 - *($4 + [272]))
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL _Znwj($7)
	*(($4 + [296])) = ($5 + $7)
	*($4 + [288]) = $5
	*($4 + [292]) = $5
	$9 = *($4 + [272])
	$7 = (*($4 + [276]) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($5, $9, $7)
	*($4 + [292]) = ($5 + $7)
	
.LABEL $label$8
	CALL void $3((int_32 ($4 + [256])), (int_32 ($4 + [288])), (int_32 $6))
	$7 = *($4 + [288])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [292]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [272])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [276]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $142($2)
	
.LABEL $label$11
	CALL $72(($4 + [24]))
	$2 = *(($4 + [240]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [244])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [304])
	return [1]
	
.LABEL $label$5
	CALL $127(($4 + [272]))
	
.LABEL $label$4
	CALL $127(($4 + [288]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $68 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$7 = CALL $139($8)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$2
	CALL read_action_data($7, $8)
	
.LABEL $label$1
	*(($9 = (($4 + [224]) + [32]))) = (int_64)0
	*(($10 = (($4 + [224]) + [24]))) = (int_64)0
	*(($3 = (($4 + [224]) + [16]))) = (int_64)0
	*(($11 = (($4 + [224]) + [8]))) = (int_64)0
	*($4 + [224]) = (int_64)0
	$2 = CALL _Znwj([160])
	$12 = ($2 + [160])
	*($11) = $12
	*($2) = *([0] + [17640])
	*(($2 + [8])) = *([0] + [17648])
	*($2 + [16]) = *([0] + [17656])
	*(($2 + [24])) = *([0] + [17664])
	*($2 + [32]) = *([0] + [17672])
	*(($2 + [40])) = *([0] + [17680])
	*($2 + [48]) = *([0] + [17688])
	*(($2 + [56])) = *([0] + [17696])
	*($4 + [224]) = $2
	*(($2 + [72])) = *([0] + [17712])
	*($2 + [64]) = *([0] + [17704])
	*($2 + [80]) = *([0] + [17720])
	*(($2 + [88])) = *([0] + [17728])
	*($2 + [96]) = *([0] + [17736])
	*(($2 + [104])) = *([0] + [17744])
	*($2 + [112]) = *([0] + [17752])
	*(($2 + [120])) = *([0] + [17760])
	*(($2 + [136])) = *([0] + [17776])
	*($2 + [128]) = *([0] + [17768])
	*($3) = (int_64)1000
	*($10) = (int_64)200000
	*($9) = [9]
	*(($2 + [152])) = *([0] + [17792])
	*($2 + [144]) = *([0] + [17784])
	*($4 + [228]) = $12
	*($4 + [212]) = $7
	*($4 + [208]) = $7
	*($4 + [216]) = ($7 + $8)
	CALL $71(($4 + [208]), ($4 + [224]))
	CALL eosio_assert(((uint_32)(*($4 + [216]) - *($4 + [212])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [212]), [8])
	$2 = (*($4 + [212]) + [8])
	*($4 + [212]) = $2
	CALL eosio_assert(((uint_32)(*($4 + [216]) - $2) > (uint_32)[7]), [17893])
	CALL memcpy($10, *($4 + [212]), [8])
	$2 = (*($4 + [212]) + [8])
	*($4 + [212]) = $2
	CALL eosio_assert(((uint_32)(*($4 + [216]) - $2) > (uint_32)[3]), [17893])
	CALL memcpy($9, *($4 + [212]), [4])
	*($4 + [212]) = (*($4 + [212]) + [4])
	*(($2 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$2 = *($2)
	*((($4 + [264]) + [8])) = $2
	*(($9 = (($4 + [280]) + [8]))) = $2
	$13 = *($4)
	*($4 + [280]) = $13
	*($4 + [264]) = $13
	$2 = *($9)
	*((($4 + [296]) + [8])) = $2
	*((($4 + [16]) + [24])) = $2
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [280])
	*($4 + [32]) = $1
	*($4 + [296]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*((($4 + [16]) + [88])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*((($4 + [16]) + [104])) = [0]
	*((($4 + [16]) + [120])) = $0
	*(($4 + [144])) = (int_64)-1
	*((($4 + [16]) + [136])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*((($4 + [16]) + [160])) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*($4 + [304]) = [0]
	*($4 + [296]) = (int_64)0
	$2 = (*($4 + [228]) - *($4 + [224]))
	if ( ($2 == 0) ){ goto $label$5 }
	$9 = int_32($2 >> [4])
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$4 }
	$2 = CALL _Znwj($2)
	*(($4 + [304])) = ($2 + ($9 << [4]))
	*($4 + [296]) = $2
	*($4 + [300]) = $2
	$10 = *($4 + [224])
	$9 = (*($4 + [228]) - $10)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $10, $9)
	*($4 + [300]) = (*($4 + [300]) + $9)
	
.LABEL $label$5
	*((($4 + [296]) + [32])) = *(($3 + [16]))
	*((($4 + [296]) + [24])) = *(($3 + [8]))
	*($4 + [312]) = *($3)
	$2 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($2) + $6))
	
.LABEL $label$6
	CALL void $2((int_32 ($4 + [296])), (int_32 $6))
	$2 = *($4 + [296])
	if ( ($2 == 0) ){ goto $label$7 }
	*($4 + [300]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$8 }
	CALL $142($7)
	
.LABEL $label$8
	CALL $72(($4 + [16]))
	$2 = *($4 + [224])
	if ( ($2 == 0) ){ goto $label$9 }
	*($4 + [228]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [336])
	return [1]
	
.LABEL $label$4
	CALL $127(($4 + [296]))
	return (unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [120])
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *($0 + [108])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [112])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($0 + [96])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($0 + [100])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$2 = *($0 + [84])
	if ( ($2 == 0) ){ goto $label$4 }
	$3 = ($0 + [88])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$8
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($0 + [84]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $2
	
.LABEL $label$5
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$4
	if ( (*($0 + [72]) & [1]) ){ goto $label$13 }
	if ( (*($0 + [60]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [80])))
	if ( ((*($0 + [60]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($0 + [68])))
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($0 + [48]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	return $0
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [56])))
	return $0
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [224]) = ($2 + $7)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17893])
	CALL memcpy(($4 + [232]), $2, [8])
	*($4 + [220]) = ($2 + [8])
	$3 = (($4 + [232]) + [8])
	CALL $76(($4 + [216]), $3)
	*(($8 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$8 = *($8)
	*((($4 + [256]) + [8])) = $8
	*(($9 = (($4 + [272]) + [8]))) = $8
	$10 = *($4 + [8])
	*($4 + [272]) = $10
	*($4 + [256]) = $10
	$8 = *($9)
	*((($4 + [288]) + [8])) = $8
	*(($4 + [48])) = $8
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [272])
	*($4 + [40]) = $1
	*($4 + [288]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*(($4 + [184])) = $0
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	$0 = *($4 + [232])
	$3 = CALL $116(($4 + [288]), $3)
	*($4 + [272]) = $0
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [272])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $142($2)
	
.LABEL $label$6
	CALL $72(($4 + [24]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$7
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4417253565123264513) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4995878327971097728) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [2]
	*($3 + [24]) = *($3 + [32])
	CALL $67($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)4229443000054317056) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4417253565123264512) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3) = *($3 + [56])
	CALL $68($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [4]
	*($3 + [16]) = *($3 + [40])
	CALL $69($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [5]
	*($3 + [8]) = *($3 + [48])
	CALL $70($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $129([0])
	$global$0 = ($3 + [64])
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18644])
	$3 = *($0 + [4])
	$4 = *($3 + [96])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229460592240361472, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [96]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)$7), [17819])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)4229460592240361472, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $92($7, $4)
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)$7), [17819])
	
.LABEL $label$3
	*($2 + [96]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [16]) = [0]
	*($2) = ($2 + [16])
	$4 = ($1 + [8])
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	$5 = ($1 + [16])
	*($2 + [32]) = $5
	$6 = ($1 + [24])
	*($2 + [36]) = $6
	$7 = ($1 + [32])
	*($2 + [40]) = $7
	$8 = ($1 + [48])
	*($2 + [44]) = $8
	$9 = ($1 + [60])
	*($2 + [48]) = $9
	$10 = ($1 + [72])
	*($2 + [52]) = $10
	$11 = ($1 + [84])
	*($2 + [56]) = $11
	$12 = ($1 + [96])
	*($2 + [60]) = $12
	$13 = ($1 + [108])
	*($2 + [64]) = $13
	$14 = ($1 + [120])
	*($2 + [68]) = $14
	$15 = ($1 + [132])
	*($2 + [72]) = $15
	CALL $101(($2 + [24]), $2)
	$16 = *($2 + [16])
	if ( ($16 == 0) ){ goto $label$2 }
	CALL $50($0, $16)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	*($2 + [32]) = $5
	*($2 + [36]) = $6
	*($2 + [40]) = $7
	*($2 + [44]) = $8
	*($2 + [48]) = $9
	*($2 + [52]) = $10
	*($2 + [56]) = $11
	*($2 + [60]) = $12
	*($2 + [64]) = $13
	*($2 + [68]) = $14
	*($2 + [72]) = $15
	CALL $102(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

void .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [192])
	$global$0 = $1
	*(($2 = ($1 + [104]))) = (int_64)0
	$3 = *([0] + [8712])
	*(($1 + [72])) = $3
	$4 = *([0] + [8720])
	*(($1 + [80])) = $4
	*(($1 + [88])) = $3
	*(($1 + [96])) = $4
	*($1 + [64]) = (int_64)1
	*($2) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = ($0 + [72])
	$2 = *(($0 + [100]))
	if ( ((int_32)$2 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$5), [17819])
	if ( $2 ){ goto $label$1 }
	$2 = ($1 + [64])
	goto $label$1 
	
.LABEL $label$2
	$2 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)7235159538876284928, (int_64)7235159538876284928)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $34($5, $2)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$5), [17819])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($1 + [64])
	
.LABEL $label$1
	*(($6 = (($1 + [112]) + [40]))) = *(($2 + [40]))
	*((($1 + [112]) + [32])) = *(($2 + [32]))
	*(($7 = (($1 + [112]) + [24]))) = *(($2 + [24]))
	*((($1 + [112]) + [16])) = *(($2 + [16]))
	*((($1 + [112]) + [8])) = *(($2 + [8]))
	*($1 + [112]) = *($2)
	$3 = CALL current_time()
	if ( ((uint_32)(*($6) + [3600]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))) ){ goto $label$5 }
	if ( ((int_64)*($1 + [136]) < (int_64)1) ){ goto $label$5 }
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	$2 = CALL $136([17494])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*($1 + [48]) = ($2 << [1])
	$6 = (($1 + [48]) | [1])
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($1 + [48]) = ($8 | [1])
	*($1 + [56]) = $6
	*($1 + [52]) = $2
	
.LABEL $label$7
	CALL memcpy($6, [17494], $2)
	
.LABEL $label$6
	*(($6 + $2)) = [0]
	CALL $122(($1 + [48]), [17523])
	CALL $58(($1 + [64]), $7)
	$2 = *($1 + [64])
	$6 = ($2 & [1])
	CALL $123(($1 + [48]), ( *($1 + [72]) ? (($1 + [64]) | [1]) : $6 ), ( *($1 + [68]) ? uint_32($2 >> [1]) : $6 ))
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$9
	*((($1 + [64]) + [24])) = *(($7 + [8]))
	*($1 + [72]) = (int_64)6112252634376622896
	*($1 + [64]) = (int_64)6112252634508449952
	*($1 + [80]) = *($7)
	$6 = CALL $116((($1 + [64]) + [32]), ($1 + [48]))
	*($1 + [16]) = (int_64)-3617168760277827584
	*($1 + [8]) = (int_64)6138663591592764928
	*(($2 = CALL _Znwj([16]))) = (int_64)6112252634508449952
	*($2 + [8]) = (int_64)3617214756542218240
	*((($1 + [8]) + [36])) = [0]
	$8 = ($2 + [16])
	*((($1 + [8]) + [24])) = $8
	*(($1 + [28])) = $8
	*($1 + [24]) = $2
	*($1 + [36 align=4]) = (int_64)0
	$2 = *($6)
	$6 = ( *((($1 + [64]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($6 + [32])
	$3 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [36])
	
.LOOP $label$10:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$10 }
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $50($6, $2)
	$6 = *(($1 + [40]))
	$2 = *(($1 + [36]))
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	$2 = [0]
	
.LABEL $label$11
	*($1 + [180]) = $2
	*($1 + [176]) = $2
	*($1 + [184]) = $6
	*($1 + [160]) = ($1 + [176])
	*($1 + [168]) = ($1 + [64])
	CALL $65(($1 + [168]), ($1 + [160]))
	CALL $42(($1 + [176]), ($1 + [8]))
	$2 = *($1 + [176])
	CALL send_inline($2, (*($1 + [180]) - $2))
	$2 = *($1 + [176])
	if ( ($2 == 0) ){ goto $label$13 }
	*($1 + [180]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = *($1 + [36])
	if ( ($2 == 0) ){ goto $label$14 }
	*(($1 + [40])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$2 = *($1 + [24])
	if ( ($2 == 0) ){ goto $label$15 }
	*(($1 + [28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$16
	*(($7 + [8])) = *([0] + [8720])
	*($7) = *([0] + [8712])
	*(($1 + [152])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $35($5, ($1 + [112]), *($0))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($1 + [56]))
	
.LABEL $label$5
	$global$0 = ($1 + [192])
	return (unreachable)
	
.LABEL $label$4
	CALL $115(($1 + [48]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18674])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18719])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18769])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	$9 = *($4 + [72])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [76])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	if ( ((*($4 + [60]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [68])))
	
.LABEL $label$11
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	$9 = *($6 + [72])
	if ( ($9 == 0) ){ goto $label$15 }
	*(($6 + [76])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	if ( ((*($6 + [60]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($6 + [68])))
	
.LABEL $label$16
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$13 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229460592240361472, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [41])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($3)
	$3 = *($0 + [32])
	$6 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $3) / (int_32)[12]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *($3)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$10:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	*($2) = $1
	$4 = *($3)
	$4 = ( *(($3 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$11 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$11
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	$3 = *($3)
	$3 = *($0 + [36])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$12:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$13 }
	$1 = (($6 & [-16]) + $1)
	
.LABEL $label$13
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [40])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$14:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$15 }
	$1 = (($6 & [-16]) + $1)
	
.LABEL $label$15
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [44])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$16:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$17 }
	$1 = (($6 & [-8]) + $1)
	
.LABEL $label$17
	*($2) = ($1 + [4])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $127($0)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18174])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18174])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), *($0 + [20]))
	CALL $51(*($1), *($0 + [24]))
	CALL $51(*($1), *($0 + [28]))
	$6 = *($0 + [32])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[12]))
	$8 = *($1)
	$3 = *($8 + [4])
	$4 = ($8 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$9 = ((int_64)$7) != (int_64)0
	*($2 + [7]) = (($9) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*(($8 + [8])) - $3) > (int_32)[0]), [18174])
	CALL memcpy(*($4), ($2 + [7]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$1 }
	$3 = *(($6 + [4]))
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $51($8, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $103(*($1), *($0 + [36]))
	CALL $103(*($1), *($0 + [40]))
	CALL $104(*($1), *($0 + [44]))
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18174])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [72])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [68])))
	
.LABEL $label$7
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17893])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17893])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17893])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [4])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = [268435455]
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [4])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [4]) << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $127($0)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$4 }
	$3 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$3 = int_32($2 >> [3])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [16])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $127($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [4]))
	$5 = ($2 + ($5 << [4]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [4]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$11 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $87($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	*($1 + [16]) = *($5 + [16])
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	$6 = ($1 + [16])
	$8 = *($1)
	$7 = *($1 + [4])
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [4]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$5 = (($9 & [-16]) + $5)
	
.LABEL $label$3
	$7 = ($5 + [20])
	if ( ($7 <= [513]) ){ goto $label$5 }
	$5 = CALL $139($7)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $7)
	CALL $88($3, $1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18174])
	CALL memcpy(*($3 + [4]), $6, [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18174])
	CALL memcpy(*($3 + [4]), ($1 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[3]), [18174])
	CALL memcpy(*($3 + [4]), ($1 + [32]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)4982871455592087552, *(*($0 + [8])), (int_64)4982871455592087552, $5, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)4982871455592087552) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $142($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)4982871455592087552) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)4982871455592087553
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$12 }
	$5 = [1]
	goto $label$3 
	
.LABEL $label$14
	$4 = ($1 + [-1])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$3 }
	$6 = *($0)
	*($0) = *($4)
	*($4) = $6
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$13
	$5 = [1]
	$4 = ($0 + [1])
	$7 = CALL int_32 $4((int_32 $0), (int_32 *($2)))
	$6 = ($1 + [-1])
	$8 = CALL int_32 $6((int_32 $4), (int_32 *($2)))
	if ( ($7 == 0) ){ goto $label$9 }
	$7 = *($0)
	if ( ($8 == 0) ){ goto $label$7 }
	*($0) = *($6)
	*($6) = $7
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$12
	$6 = ($0 + [1])
	$7 = CALL int_32 $6((int_32 $0), (int_32 *($2)))
	$4 = ($0 + [2])
	$8 = CALL int_32 $4((int_32 $6), (int_32 *($2)))
	if ( ($7 == 0) ){ goto $label$8 }
	$7 = *($0)
	if ( ($8 == 0) ){ goto $label$6 }
	$6 = ($0 + [2])
	*($0) = *($6)
	*($6) = $7
	$7 = [3]
	$6 = ($0 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$11
	CALL $81($0, ($0 + [1]), ($0 + [2]), ($1 + [-1]), $2)
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$10
	$5 = [1]
	$4 = ($0 + [3])
	$6 = ($0 + [2])
	$8 = ($0 + [1])
	CALL $81($0, $8, $6, $4, $2)
	$7 = ($1 + [-1])
	if ( (CALL int_32 $7((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$3 }
	$9 = *($4)
	*($4) = *($7)
	*($7) = $9
	if ( (CALL int_32 $4((int_32 $6), (int_32 *($2))) == 0) ){ goto $label$3 }
	$7 = *($6)
	*($6) = *($4)
	*($4) = $7
	if ( (CALL int_32 $6((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$3 }
	$5 = [1]
	$4 = ($0 + [1])
	$6 = *($4)
	$7 = ($0 + [2])
	*($4) = *($7)
	*($7) = $6
	if ( (CALL int_32 $8((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$3 }
	$4 = *($0)
	$6 = ($0 + [1])
	*($0) = *($6)
	*($6) = $4
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$3 }
	$5 = [1]
	$7 = ($0 + [1])
	$8 = *($7)
	*($7) = *($6)
	*($6) = $8
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$3 }
	$4 = *($0)
	$6 = ($0 + [1])
	*($0) = *($6)
	*($6) = $4
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$5 }
	$7 = ($0 + [1])
	$8 = *($7)
	$9 = ($0 + [2])
	*($7) = *($9)
	*($9) = $8
	if ( (CALL int_32 $6((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$5 }
	$6 = *($0)
	*($0) = *($7)
	*($7) = $6
	$7 = [3]
	$6 = ($0 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$7
	$5 = [1]
	$8 = ($0 + [1])
	*($0) = *($8)
	*($8) = $7
	if ( (CALL int_32 $6((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$3 }
	$0 = *($4)
	*($4) = *($6)
	*($6) = $0
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$6
	$8 = ($0 + [1])
	*($0) = *($8)
	*($8) = $7
	if ( (CALL int_32 $4((int_32 $6), (int_32 *($2))) == 0) ){ goto $label$5 }
	$7 = *($6)
	*($6) = *($4)
	*($4) = $7
	
.LABEL $label$5
	$7 = [3]
	$6 = ($0 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$1 }
	
.LABEL $label$4
	$9 = [0]
	$10 = [0]
	
.LOOP $label$15:
	$8 = $6
	if ( (CALL int_32 $8((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$16 }
	*($3 + [8]) = *($8)
	$4 = $9
	
.LOOP $label$19:
	*((($6 = ($0 + $4)) + $7)) = *(($6 + [2]))
	if ( ((int_32)$4 == (int_32)[-2]) ){ goto $label$18 }
	$4 = ($4 + [-1])
	if ( CALL int_32 ($3 + [8])((int_32 ($6 + [1])), (int_32 *($2))) ){ goto $label$19 }
	$4 = (($0 + $4) + $7)
	goto $label$17 
	
.LABEL $label$18
	$4 = $0
	
.LABEL $label$17
	*($4) = *($3 + [8])
	$10 = ($10 + [1])
	if ( ((int_32)$10 == (int_32)[8]) ){ goto $label$2 }
	
.LABEL $label$16
	$5 = [1]
	$9 = ($9 + [1])
	$4 = $8
	$6 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return $5
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return ((int_32)($8 + [1]) == (int_32)$1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	$4
	return [1]
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($0 + [1])
	$5 = CALL int_32 $4((int_32 $0), (int_32 *($2)))
	$6 = ($0 + [2])
	$7 = CALL int_32 $6((int_32 $4), (int_32 *($2)))
	if ( ($5 == 0) ){ goto $label$5 }
	$5 = *($0)
	if ( ($7 == 0) ){ goto $label$4 }
	$4 = ($0 + [2])
	*($0) = *($4)
	*($4) = $5
	$5 = [3]
	$4 = ($0 + [3])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	$5 = ($0 + [1])
	$7 = *($5)
	$8 = ($0 + [2])
	*($5) = *($8)
	*($8) = $7
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$3 }
	$4 = *($0)
	*($0) = *($5)
	*($5) = $4
	$5 = [3]
	$4 = ($0 + [3])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = ($0 + [1])
	*($0) = *($7)
	*($7) = $5
	if ( (CALL int_32 $6((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$3 }
	$5 = *($4)
	*($4) = *($6)
	*($6) = $5
	
.LABEL $label$3
	$5 = [3]
	$4 = ($0 + [3])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = [0]
	
.LOOP $label$6:
	$7 = $4
	if ( (CALL int_32 $7((int_32 $6), (int_32 *($2))) == 0) ){ goto $label$7 }
	*($3 + [8]) = *($7)
	$6 = $8
	
.LOOP $label$10:
	*((($4 = ($0 + $6)) + $5)) = *(($4 + [2]))
	if ( ((int_32)$6 == (int_32)[-2]) ){ goto $label$9 }
	$6 = ($6 + [-1])
	if ( CALL int_32 ($3 + [8])((int_32 ($4 + [1])), (int_32 *($2))) ){ goto $label$10 }
	$6 = (($0 + $6) + $5)
	goto $label$8 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($6) = *($3 + [8])
	
.LABEL $label$7
	$8 = ($8 + [1])
	$6 = $7
	$4 = ($7 + [1])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = CALL int_32 $1((int_32 $0), (int_32 *($4)))
	$6 = CALL int_32 $2((int_32 $1), (int_32 *($4)))
	if ( ($5 == 0) ){ goto $label$8 }
	$5 = *($0)
	if ( ($6 == 0) ){ goto $label$7 }
	*($0) = *($2)
	*($2) = $5
	$5 = [1]
	if ( CALL int_32 $3((int_32 $2), (int_32 *($4))) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	$5 = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	$5 = *($1)
	*($1) = *($2)
	*($2) = $5
	$5 = [1]
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$5 }
	$5 = *($0)
	*($0) = *($1)
	*($1) = $5
	goto $label$6 
	
.LABEL $label$7
	*($0) = *($1)
	*($1) = $5
	$5 = [1]
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$5 }
	$5 = *($1)
	*($1) = *($2)
	*($2) = $5
	
.LABEL $label$6
	$5 = [2]
	
.LABEL $label$5
	if ( (CALL int_32 $3((int_32 $2), (int_32 *($4))) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($2)
	*($2) = *($3)
	*($3) = $6
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$2 }
	$3 = *($1)
	*($1) = *($2)
	*($2) = $3
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$1 }
	$2 = *($0)
	*($0) = *($1)
	*($1) = $2
	$5 = ($5 + [3])
	
.LABEL $label$3
	return $5
	
.LABEL $label$2
	return ($5 + [1])
	
.LABEL $label$1
	return ($5 + [2])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18174])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8756]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8760])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8756]) = [1]
	$2 = ($2 << [16])
	*([0] + [8760]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8760])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8760]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8756]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8756]) = [1]
	$3 = ($3 << [16])
	*([0] + [8760]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8760])
	
.LABEL $label$10
	*([0] + [8760]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $141($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8285])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [8216])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17148])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16956]
	$3 = (((int_32)$1 * (int_32)[12]) + [16956])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL $105(($0 + [136]))
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = *(($0 + [56]))
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($0 + [60])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$16 }
	*($4 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17893])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17893])
	CALL memcpy(($0 + [24]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17893])
	CALL memcpy(($0 + [28]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17893])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), ($0 + [40]))
	CALL $76(*($1), ($0 + [52]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [296]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [248])) = (int_64)0
	*((($4 + [232]) + [48])) = (int_64)0
	*((($4 + [232]) + [56])) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [256]) = [0]
	*($4 + [260]) = [0]
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [336]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $73(($4 + [24]), ($4 + [336]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [304]) + [8])) = $3
	*(($6 = (($4 + [320]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [320]) = $7
	*($4 + [304]) = $7
	$3 = *($6)
	*((($4 + [336]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [320])
	*($4 + [40]) = $1
	*($4 + [336]) = $1
	*(($4 + [64])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*(($4 + [184])) = $0
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*($4 + [340]) = ($4 + [296])
	*($4 + [336]) = ($4 + [24])
	CALL $74(($4 + [336]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $142($2)
	
.LABEL $label$4
	CALL $72(($4 + [24]))
	if ( ((*($4 + [284]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [292])))
	
.LABEL $label$5
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [280])))
	
.LABEL $label$6
	$global$0 = ($4 + [352])
	return [1]
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18334])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $86($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [17893])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [17893])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $94($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $115($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17870])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $139($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17893])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17893])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [17893])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $78(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $142($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1 + [24])
	$5 = *($1 + [28])
	$6 = *($1 + [32])
	$7 = *($1)
	$8 = CALL $116(($2 + [16]), ($1 + [40]))
	$1 = CALL $116($2, ($1 + [52]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [72]) = $7
	*($2 + [64]) = $6
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$3 = (*($0) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	CALL void $3((int_32 ($2 + [72])), (int_32 ($2 + [48])), (int_32 ($4 & [255])), (int_32 $5), (int_32 ($2 + [64])), (int_32 $8), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($8) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($8 + [8]))
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [80])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $136([17494])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [17494], $5)
	
.LABEL $label$2
	*(($6 + $5)) = [0]
	CALL $122($0, [17543])
	CALL $126($4, $2)
	$5 = *($4)
	$6 = ($5 & [1])
	CALL $123($0, ( *($4 + [8]) ? ($4 | [1]) : $6 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $122($0, [8595])
	$5 = *($3)
	$6 = ($5 & [1])
	CALL $123($0, ( *($3 + [8]) ? ($3 + [1]) : $6 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $122($0, [8595])
	CALL $122($0, [17551])
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$5
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $115($0)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229460592240361472, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [17819])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $92($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229460592240361472, $6))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [17819])
	
.LABEL $label$2
	*($4 + [96]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	$5 = *($3 + [8])
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	$5 = *(*($3 + [12]))
	*($1 + [40]) = *(*($3 + [16]))
	*($1 + [32]) = $5
	$6 = ($1 + [60])
	CALL $117($6, *($3 + [20]))
	$7 = ($1 + [48])
	CALL $117($7, *($3 + [24]))
	*(($3 = $2) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [32])
	*($3 + [36]) = $10
	$11 = ($1 + [40])
	*($3 + [40]) = $11
	*($3 + [44]) = $7
	*($3 + [48]) = $6
	$12 = ($1 + [72])
	*($3 + [52]) = $12
	$13 = ($1 + [84])
	*($3 + [56]) = $13
	CALL $97(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $139($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $7
	*($3 + [48]) = $6
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	CALL $98(($3 + [24]), ($3 + [16]))
	$14 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($4 + [8]), (int_64)4229460592240361472, *(*($0 + [8])), $14, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL $142($2)
	
.LABEL $label$3
	if ( (uint_64)($14 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$14 = *(($4 + [8]))
	$15 = *(*(($0 + [8])))
	$16 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [96]) = CALL db_idx64_store($14, (int_64)4229460592240361472, $15, $16, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18174])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18174])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$1), [17819])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4982871455592087552, (int_64)4982871455592087552)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $27($1, $3)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$1), [17819])
	
.LABEL $label$2
	$2 = $3
	
.LABEL $label$1
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$5 }
	$4 = int_32($1 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$1 = CALL _Znwj($1)
	*(($3 = ($0 + [4]))) = $1
	*(($0 + [8])) = ($1 + ($4 << [4]))
	*($0) = $1
	$5 = *($2)
	$4 = (*(($2 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $5, $4)
	*($3) = (*($3) + $4)
	
.LABEL $label$5
	*($0 + [16]) = *($2 + [16])
	*(($0 + [32])) = *(($2 + [32]))
	*(($0 + [24])) = *(($2 + [24]))
	return (unreachable)
	
.LABEL $label$4
	CALL $127($0)
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [17819])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749778751881216, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $77($0, $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$0), [17819])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	float_64 $17
	$8 = ($global$0 - [272])
	$global$0 = $8
	*($8 + [255]) = $3
	CALL require_auth((int_64)6112252634446868640)
	CALL $31($0, $7, $4)
	CALL eosio_assert(((int_32)($3 | [4]) == (int_32)[5]), [17453])
	$3 = [0]
	if ( (CALL is_account(*($5)) == 0) ){ goto $label$1 }
	$3 = ((int_64)*($5) != (int_64)*($1))
	
.LABEL $label$1
	CALL eosio_assert($3, [17477])
	*(($4 = (($8 + [160]) + [32]))) = (int_64)0
	*(($9 = (($8 + [160]) + [24]))) = (int_64)0
	*(($10 = ($8 + [176]))) = (int_64)0
	*(($11 = (($8 + [160]) + [8]))) = (int_64)0
	*($8 + [160]) = (int_64)0
	$3 = CALL _Znwj([160])
	$12 = ($3 + [160])
	*($11) = $12
	*($3) = *([0] + [17640])
	*(($3 + [8])) = *([0] + [17648])
	*($3 + [16]) = *([0] + [17656])
	*(($3 + [24])) = *([0] + [17664])
	*($3 + [32]) = *([0] + [17672])
	*(($3 + [40])) = *([0] + [17680])
	*($3 + [48]) = *([0] + [17688])
	*(($3 + [56])) = *([0] + [17696])
	*($8 + [160]) = $3
	*(($3 + [72])) = *([0] + [17712])
	*($3 + [64]) = *([0] + [17704])
	*($3 + [80]) = *([0] + [17720])
	*(($3 + [88])) = *([0] + [17728])
	*($3 + [96]) = *([0] + [17736])
	*(($3 + [104])) = *([0] + [17744])
	*($3 + [112]) = *([0] + [17752])
	*(($3 + [120])) = *([0] + [17760])
	*(($3 + [136])) = *([0] + [17776])
	*($3 + [128]) = *([0] + [17768])
	*($10) = (int_64)1000
	*($9) = (int_64)200000
	*($4) = [9]
	*(($3 + [152])) = *([0] + [17792])
	*($3 + [144]) = *([0] + [17784])
	*($8 + [164]) = $12
	CALL $32(($8 + [208]), ($0 + [32]), ($8 + [160]))
	$3 = *($8 + [160])
	if ( ($3 == 0) ){ goto $label$2 }
	*($8 + [164]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$13 = ((int_64)*($2) / (int_64)*($8 + [255]))
	CALL eosio_assert(((int_64)$13 >= (int_64)*($8 + [224])), [17160])
	*($4) = [0]
	*($8 + [168]) = (int_64)6112252634508449952
	*($8 + [160]) = (int_64)6112252634508449952
	*($8 + [176]) = (int_64)-1
	*($8 + [184]) = (int_64)0
	$14 = *(CALL $33(($8 + [160]), *($1), [17800]) + [8])
	$9 = *($8 + [184])
	if ( ($9 == 0) ){ goto $label$3 }
	$10 = ($8 + [188])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($8 + [184]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $9
	
.LABEL $label$4
	*($10) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$3
	*(($8 + [192])) = [0]
	*($8 + [168]) = (int_64)6112252634508449952
	*($8 + [160]) = (int_64)6112252634508449952
	*($8 + [176]) = (int_64)-1
	*($8 + [184]) = (int_64)0
	$15 = *(CALL $33(($8 + [160]), (int_64)6112252634338746400, [17800]) + [8])
	$9 = *($8 + [184])
	if ( ($9 == 0) ){ goto $label$8 }
	$10 = ($8 + [188])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($8 + [184]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $9
	
.LABEL $label$9
	*($10) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$16 = *($8 + [232])
	$14 = ( $14 ? $16 : ((int_64)$14 < (int_64)$16) )
	$15 = ((int_64)$15 / (int_64)500)
	$14 = ( $15 ? $14 : ((int_64)$15 < (int_64)$14) )
	CALL $125(($8 + [160]), $14)
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($8 + [168]))
	
.LABEL $label$13
	CALL eosio_assert(((int_64)$13 <= (int_64)$14), [17187])
	*(($3 = ($8 + [152]))) = (int_64)0
	$14 = *([0] + [8712])
	*(($8 + [120])) = $14
	$13 = *([0] + [8720])
	*(($8 + [128])) = $13
	*(($8 + [136])) = $14
	*(($8 + [144])) = $13
	*($8 + [112]) = (int_64)1
	*($3) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$15 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$10), [17819])
	if ( $3 ){ goto $label$14 }
	$3 = ($8 + [112])
	goto $label$14 
	
.LABEL $label$15
	$3 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)7235159538876284928, (int_64)7235159538876284928)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$16 }
	$3 = CALL $34($10, $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$10), [17819])
	goto $label$14 
	
.LABEL $label$16
	$3 = ($8 + [112])
	
.LABEL $label$14
	*((($8 + [160]) + [40])) = *(($3 + [40]))
	*(($11 = (($8 + [160]) + [32]))) = *(($3 + [32]))
	*(($4 = (($8 + [160]) + [24]))) = *(($3 + [24]))
	*(($12 = (($8 + [160]) + [16]))) = *(($3 + [16]))
	*(($9 = (($8 + [160]) + [8]))) = *(($3 + [8]))
	*($8 + [160]) = *($3)
	$14 = *($8 + [160])
	*($8 + [104]) = $14
	*($8 + [160]) = ((int_64)$14 + (int_64)1)
	$13 = *($2 + [8])
	$17 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.01)
	CALL eosio_assert(((float_64)$17 <= (float_64)(float_64)4611686018427387904), [8192])
	CALL eosio_assert(((float_64)$17 >= (float_64)(float_64)-4611686018427387904), [8260])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$14 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$18
	$14 = (Rounds 0)($17)
	
.LABEL $label$17
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17564])
	CALL eosio_assert(((int_64)$13 == (int_64)*($12)), [17898])
	$14 = ((int_64)*($9) + (int_64)$14)
	*($9) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [17941])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [17960])
	$13 = *($2 + [8])
	$17 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.005)
	CALL eosio_assert(((float_64)$17 <= (float_64)(float_64)4611686018427387904), [8192])
	CALL eosio_assert(((float_64)$17 >= (float_64)(float_64)-4611686018427387904), [8260])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$20 }
	$14 = (int_64)-9223372036854775808
	goto $label$19 
	
.LABEL $label$20
	$14 = (Rounds 0)($17)
	
.LABEL $label$19
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17564])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11)), [17898])
	$14 = ((int_64)*($4) + (int_64)$14)
	*($4) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [17941])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [17960])
	CALL $35($10, ($8 + [160]), *($0))
	$4 = ($0 + [112])
	*($8 + [96]) = $4
	CALL $36(($8 + [112]), ($8 + [96]), $1)
	$3 = [0]
	$9 = *($8 + [116])
	if ( ($9 == 0) ){ goto $label$21 }
	$3 = ( $9 ? [0] : ((int_64)*($1) == (int_64)*($9 + [8])) )
	
.LABEL $label$21
	CALL eosio_assert(($3 == 0), [17216])
	$14 = *($0)
	*($8 + [116]) = $1
	*($8 + [120]) = $2
	*($8 + [128]) = $5
	*($8 + [132]) = $7
	*($8 + [136]) = $6
	*($8 + [112]) = ($8 + [104])
	*($8 + [124]) = ($8 + [255])
	*($8 + [64]) = $14
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$7()), [18529])
	*($8 + [8]) = $4
	*($8 + [12]) = ($8 + [112])
	*($8 + [16]) = ($8 + [64])
	*(($3 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80]) = [0]
	*($3 + [88]) = $4
	CALL $37(($8 + [8]), $3)
	*($8 + [256]) = $3
	$14 = *($3)
	*($8 + [8]) = $14
	$9 = *($3 + [92])
	*($8 + [80]) = $9
	$5 = ($0 + [140])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [144]))) ){ goto $label$24 }
	*($4 + [8]) = $14
	*($4 + [16]) = $9
	*($8 + [256]) = [0]
	*($4) = $3
	*($5) = ($4 + [24])
	$3 = *($8 + [256])
	*($8 + [256]) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	CALL $38(($0 + [136]), ($8 + [256]), ($8 + [8]), ($8 + [80]))
	$3 = *($8 + [256])
	*($8 + [256]) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$4 = *($3 + [72])
	if ( ($4 == 0) ){ goto $label$25 }
	*(($3 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($3 + [68])))
	
.LABEL $label$26
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$27
	CALL _ZdlPv($3)
	
.LABEL $label$22
	$13 = *($8 + [104])
	$14 = *($1)
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$31 }
	$4 = [0]
	$9 = *([0] + [17980])
	
.LOOP $label$33:
	*((($8 + [112]) + ($3 = $4))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$4 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$32 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$33 }
	
.LABEL $label$32
	*(($8 + [16])) = [0]
	*($8 + [8]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$30 }
	*($8 + [8]) = ($4 << [1])
	$9 = (($8 + [8]) | [1])
	goto $label$29 
	
.LABEL $label$31
	*(($8 + [16])) = [0]
	*($8 + [8]) = (int_64)0
	*($8 + [8]) = [0]
	$3 = (($8 + [8]) | [1])
	goto $label$28 
	
.LABEL $label$30
	$0 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($0)
	*($8 + [8]) = ($0 | [1])
	*($8 + [16]) = $9
	*($8 + [12]) = $4
	
.LABEL $label$29
	$0 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$34:
	*(($9 + $3)) = *((($8 + [112]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$34 }
	$3 = ($9 + $4)
	
.LABEL $label$28
	*($3) = [0]
	CALL $39(($8 + [80]), $8, $13, ($8 + [8]))
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($8 + [16]))
	
.LABEL $label$35
	*($8 + [72]) = (int_64)3617214756542218240
	*($8 + [64]) = (int_64)6112252634508449952
	*($8 + [48]) = [17239]
	*($8 + [52]) = CALL $136([17239])
	*($8) = *($8 + [48])
	$3 = CALL $40(($8 + [56]), $8)
	*(($8 + [24])) = *(($2 + [8]))
	*($8 + [8]) = *($1)
	*($8 + [16]) = *($2)
	CALL $116(($8 + [32]), ($8 + [80]))
	$3 = CALL $41(($8 + [112]), ($8 + [64]), (int_64)6112252634508449952, *($3), ($8 + [8]))
	CALL $42(($8 + [256]), $3)
	$4 = *($8 + [256])
	CALL send_inline($4, (*($8 + [260]) - $4))
	$4 = *($8 + [256])
	if ( ($4 == 0) ){ goto $label$36 }
	*($8 + [260]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$37 }
	*(($3 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$38 }
	*(($3 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	if ( (*($8 + [32]) & [1]) ){ goto $label$43 }
	if ( (*($8 + [80]) & [1]) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	CALL _ZdlPv(*(($8 + [40])))
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$41 }
	
.LABEL $label$42
	CALL _ZdlPv(*($8 + [88]))
	$3 = *($8 + [208])
	if ( $3 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$3 = *($8 + [208])
	if ( ($3 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	*($8 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$39
	$global$0 = ($8 + [272])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000)) <= (uint_32)$2), [17420])
	$4 = *($1)
	$5 = ($4 & [1])
	$6 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$5 = ( *($1 + [4]) ? uint_32($4 >> [1]) : $5 )
	if ( ($5 <= [4]) ){ goto $label$4 }
	$7 = ($5 + [-4])
	$1 = $6
	$4 = $5
	
.LOOP $label$5:
	CALL memcpy(($3 + [24]), $1, [4])
	$8 = ((int_32)*($3 + [24]) * (int_32)[1540483477])
	$4 = ((int_32)((int_32)((int_32)uint_32($8 >> [24]) ^ (int_32)$8) * (int_32)[1540483477]) ^ (int_32)((int_32)$4 * (int_32)[1540483477]))
	$1 = ($1 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$5 }
	$1 = ($7 & [-4])
	$6 = (($6 + $1) + [4])
	$5 = ($7 - $1)
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$1 }
	$4 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$4)
	
.LABEL $label$6
	$4 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$4)
	
.LABEL $label$2
	$4 = ((int_32)((int_32)$4 ^ (int_32)*($6)) * (int_32)[1540483477])
	
.LABEL $label$1
	$1 = ((int_32)((int_32)uint_32($4 >> [13]) ^ (int_32)$4) * (int_32)[1540483477])
	$5 = ((int_32)uint_32($1 >> [15]) ^ (int_32)$1)
	$7 = ($0 + [152])
	$4 = *(($0 + [180]))
	$6 = *(($0 + [176]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$1 = ($4 + [-24])
	$8 = *($1)
	if ( ((int_32)*($8) == (int_32)$5) ){ goto $label$9 }
	$4 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$7), [17819])
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$1 = CALL db_find_i64(*($7), *(($0 + [160])), (int_64)7615816218057900032, (CASTING uint_64)(uint_32 $5))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $43($7, $1)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$7), [17819])
	
.LABEL $label$7
	CALL eosio_assert(($8 == 0), [17438])
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$7()), [18529])
	*(($1 = CALL _Znwj([20])) + [8]) = $7
	*($1 + [4]) = $2
	*($1) = $5
	CALL eosio_assert([1], [18174])
	CALL memcpy(($3 + [16]), $1, [4])
	CALL eosio_assert([1], [18174])
	$4 = ($1 + [4])
	CALL memcpy((($3 + [16]) | [4]), $4, [4])
	$10 = *($1)
	$5 = ($0 + [160])
	*($1 + [12]) = CALL db_store_i64(*($5), (int_64)7615816218057900032, $9, $10, ($3 + [16]), [8])
	$8 = ($0 + [168])
	if ( ((uint_64)*($8) > (uint_64)$10) ){ goto $label$11 }
	*($8) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$11
	$10 = *($5)
	$11 = *($1)
	*($3 + [24]) = *($4)
	*($1 + [16]) = CALL db_idx64_store($10, (int_64)7615816218057900032, $9, $11, ($3 + [24]))
	*($3 + [16]) = $1
	$9 = *($1)
	*($3 + [24]) = $9
	$5 = *(($1 + [12]))
	*($3) = $5
	$8 = ($0 + [180])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [184]))) ){ goto $label$14 }
	*($4 + [8]) = $9
	*($4 + [16]) = $5
	*($3 + [16]) = [0]
	*($4) = $1
	*($8) = ($4 + [24])
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( $1 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $44(($0 + [176]), ($3 + [16]), ($3 + [24]), $3)
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($1)
	
.LABEL $label$12
	*($3 + [8]) = $7
	*($3 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $45(($3 + [16]), ($3 + [8]), ($3 + [24]))
	*($3 + [24]) = (int_64)0
	CALL $45($3, ($3 + [8]), ($3 + [24]))
	if ( ((int_32)*($3 + [4]) == (int_32)*($3 + [20])) ){ goto $label$15 }
	$9 = *($3)
	$1 = [1]
	
.LOOP $label$16:
	*($3 + [24]) = $9
	$4 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$4) != (int_32)[0]), [18610])
	CALL $46(($3 + [24]))
	CALL $47(*($3 + [8]), $4)
	$9 = *($3 + [24])
	*($3) = $9
	if ( ((uint_32)$1 > (uint_32)[4]) ){ goto $label$15 }
	$1 = ($1 + [1])
	if ( ((int_32)*($3 + [20]) != (int_32)(CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)32))) ){ goto $label$16 }
	
.LABEL $label$15
	$global$0 = ($3 + [32])
}

void .FUNC $129 (int_32 $0)
{
}

void .FUNC $127 (int_32 $0)
{
	CALL abort()
	(unreachable)
}