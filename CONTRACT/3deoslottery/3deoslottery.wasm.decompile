(data (i32.const 8192) "e\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\88\f3?\00\00\00\00\00\0c\00\00\00\00\00\00?333?\9a\99\19>\e0\af\ca\99FLU\1a\04EOS\00\00\00\002\00\e8\03d\00\ne\aa!\00\00")
(data (i32.const 8260) "onerror: \00")
(data (i32.const 8270) " :\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8359) "[]\00")
(data (i32.const 8362) "Game Not Initialized.\00")
(data (i32.const 8384) "b done.\00")
(data (i32.const 8392) "eosio.token\00")
(data (i32.const 8404) "Draw in progress...\00")
(data (i32.const 8424) "Invalid Transaction 2.\00")
(data (i32.const 8448) "EOS Earned from EOS mainnet 3D.\00")
(data (i32.const 8480) "Draw not started...\00")
(data (i32.const 8500) "u done.\00")
(data (i32.const 8508) "wrong status...\00")
(data (i32.const 8524) "p done.\00")
(data (i32.const 8532) "ACDF\00")
(data (i32.const 8537) "transfer\00")
(data (i32.const 8546) "eosio\00")
(data (i32.const 8552) "onerror\00")
(data (i32.const 8560) "ABCDEFGHIJKLMNOPQRS\00")
(data (i32.const 8592) "0123456789abcdef\00")
(data (i32.const 8609) "get\00")
(data (i32.const 8613) "read\00")
(data (i32.const 8618) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8651) "cannot create objects in table of another contract\00")
(data (i32.const 8702) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8754) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8808) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8856) "error reading iterator\00")
(data (i32.const 8879) "write\00")
(data (i32.const 8885) "cannot pass end iterator to modify\00")
(data (i32.const 8920) "object passed to modify is not in multi_index\00")
(data (i32.const 8966) "cannot modify objects in table of another contract\00")
(data (i32.const 9017) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9076) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9127) "cannot pass end iterator to erase\00")
(data (i32.const 9161) "cannot increment end iterator\00")
(data (i32.const 9191) "object passed to erase is not in multi_index\00")
(data (i32.const 9236) "cannot erase objects in table of another contract\00")
(data (i32.const 9286) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9339) "string is too long to be a valid name\00")
(data (i32.const 9377) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9444) "character is not in allowed character set for names\00")
(data (i32.const 9496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9545) "invalid symbol name\00")
(data (i32.const 9565) "0\00")
(data (i32.const 9567) "3\00")
(data (i32.const 9569) "2\00")
(data (i32.const 9571) "1\00")
(data (i32.const 9573) "Draw Exists.\00")
(data (i32.const 9586) "u\00")
(data (i32.const 9588) "p\00")
(data (i32.const 9600) "\00\00\00\00\00Pi\c6\00\00\00\00\00%]\ae\00\00\00\00T\0d\919\00\00\00\00\80|M\c6\a0\be\bb\f5*\ac\b3b\a0\be\bb5RZ\b3b\00\00\00\00\00\c0\cdM")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$1 (result i64)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "printui" (func $fimport$3 (param i64)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "send_inline" (func $fimport$5 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$7 (param i32) (result i32)))
(import "env" "tapos_block_num" (func $fimport$8 (result i32)))
(import "env" "send_deferred" (func $fimport$9 (param i32 i64 i32 i32 i32)))
(import "env" "memset" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "current_receiver" (func $fimport$16 (result i64)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$18 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$29 (param i32)))
(import "env" "db_idx128_find_primary" (func $fimport$30 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$31 (param i32 i64 i32)))
(import "env" "db_idx64_update" (func $fimport$32 (param i32 i64 i32)))
(import "env" "db_idx_double_find_primary" (func $fimport$33 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_double_update" (func $fimport$34 (param i32 i64 i32)))
(import "env" "db_idx_double_store" (func $fimport$35 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$36 (param i32)))
(import "env" "db_idx_double_remove" (func $fimport$37 (param i32)))
(import "env" "memmove" (func $fimport$38 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$39 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$46 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$47 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$48 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$49 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$50 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$51 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$52 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$53 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$54 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$55 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$56 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$57 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$58 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $89))
(export "_Znwj" (func $147))
(export "_ZdlPv" (func $149))
(export "_Znaj" (func $148))
(export "_ZdaPv" (func $150))
(export "_ZnwjSt11align_val_t" (func $151))
(export "_ZnajSt11align_val_t" (func $152))
(export "_ZdlPvSt11align_val_t" (func $153))
(export "_ZdaPvSt11align_val_t" (func $154))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $35 $22 $66 $15 $80 $49 $77 $29 $72 $8 $16 $82 $78 $9 $54)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18072))
(global $global$2 i32 (i32.const 18072))


int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $175($1)
	
.LABEL $label$2
	*(CALL $169()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $175(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $178($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $177($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8273])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $177 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9668]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9672])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9668]) = [1]
	$2 = ($2 << [16])
	*([0] + [9672]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9672])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9672]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9668]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9668]) = [1]
	$3 = ($3 << [16])
	*([0] + [9672]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9672])
	
.LABEL $label$10
	*([0] + [9672]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $170 (int_32 $0)
{
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $172 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [28]) = [0]
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $104(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $105(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18060])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17868]
	$3 = (((int_32)$1 * (int_32)[12]) + [17868])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8609])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $99($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [8613])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $100($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [79]) = $1
	*(($3 + [64])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [68]) = [0]
	$4 = *($0)
	*($3 + [32]) = $4
	*($3 + [40]) = $4
	*($3 + [24]) = $2
	*($3 + [20]) = ($3 + [79])
	*($3 + [16]) = ($3 + [32])
	CALL $7(($3 + [8]), ($3 + [32]), $4, ($3 + [16]))
	$1 = *($3 + [56])
	if ( ($1 == 0) ){ goto $label$1 }
	$5 = (($3 + [32]) + [28])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($0 + [28])))
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [56]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($5) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8808])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4035225266123964416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8754])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8754])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $79(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8609])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $101($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [8613])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $100(CALL $102($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [128])) = [0]
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	*($2 + [132]) = [0]
	$3 = *([0] + [8232])
	*($2 + [96]) = $3
	*($2 + [104]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-2305843009213693952, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $50(($2 + [96]), $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [96])), [9076])
	$5 = ((float_64)((float_64)*($4 + [32]) + (float_64)*($4 + [40])) * (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$3 = (int_64)0
	if ( ((int_64)((int_64)0 == 0) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (Rounds 0)($5)
	if ( (int_64)($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = *([0] + [8232])
	$7 = *([0] + [8240])
	*((($2 + [8]) + [24])) = $7
	*($2 + [16]) = $1
	*($2 + [8]) = $6
	*($2 + [24]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9496])
	$3 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ($2 + [24])
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$3 = $7
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$3 = $7
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$9 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$5
	CALL eosio_assert($9, [9545])
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$10 = ($2 + [40])
	$4 = CALL $172([8448])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*(($2 + [40])) = ($4 << [1])
	$9 = ($10 + [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$11 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*(($2 + [48])) = $9
	*(($2 + [44])) = $4
	*($2 + [40]) = ($11 | [1])
	
.LABEL $label$11
	CALL memcpy($9, [8448], $4)
	
.LABEL $label$10
	*(($9 + $4)) = [0]
	*($2 + [64]) = (int_64)-3617168760277827584
	*($2 + [56]) = (int_64)6138663591592764928
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = (int_64)3617214756542218240
	*((($2 + [56]) + [36])) = [0]
	$9 = ($4 + [16])
	*(($2 + [80])) = $9
	*(($2 + [76])) = $9
	*($2 + [72]) = $4
	*($2 + [84 align=4]) = (int_64)0
	$4 = *((($2 + [8]) + [32]))
	$9 = ( *((($2 + [8]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($9 + [32])
	$3 = (CASTING uint_64)(uint_32 $9)
	$9 = ($2 + [84])
	
.LOOP $label$13:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$13 }
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $10($9, $4)
	$9 = *(($2 + [88]))
	$4 = *(($2 + [84]))
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	$4 = [0]
	
.LABEL $label$14
	*($2 + [136]) = $4
	*($2 + [144]) = $9
	$9 = ($9 - $4)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [8879])
	CALL memcpy($4, ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[7]), [8879])
	CALL memcpy(($4 + [8]), (($2 + [8]) + [8]), [8])
	CALL eosio_assert(((int_32)($9 + [-16]) > (int_32)[7]), [8879])
	CALL memcpy(($4 + [16]), $8, [8])
	*($2 + [152]) = *((($2 + [8]) + [24]))
	CALL eosio_assert(((int_32)($9 + [-24]) > (int_32)[7]), [8879])
	CALL memcpy(($4 + [24]), ($2 + [152]), [8])
	*($2 + [140]) = ($4 + [32])
	CALL $51(($2 + [136]), $10)
	if ( ((*((($2 + [8]) + [32])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$16
	CALL $11(($2 + [8]), ($2 + [56]))
	$4 = *($2 + [8])
	CALL send_inline($4, (*($2 + [12]) - $4))
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$17 }
	*($2 + [12]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	*($2 + [8]) = *([0] + [8232])
	CALL $52(($2 + [8]), $1)
	$4 = *($2 + [84])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($2 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$4 = *($2 + [72])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($2 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$10 = *($2 + [120])
	if ( ($10 == 0) ){ goto $label$19 }
	$8 = ($2 + [124])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL _ZdlPv($9)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($2 + [120]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $10
	
.LABEL $label$20
	*($8) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $155($10)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $129(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $130(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [72]) = $2
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*($5 + [40]) = *($1 + [8])
	*($5 + [32]) = *($1 + [16])
	*($5 + [48]) = *($1 + [48])
	$6 = *($1)
	*($5 + [24]) = $6
	$8 = *($3 + [24])
	$9 = ($8 & [1])
	$3 = *($3)
	$7 = ($1 + [24])
	CALL $164($7, ( *(($3 + [32])) ? ($3 + [25]) : $9 ), ( *(($3 + [28])) ? uint_32($8 >> [1]) : $9 ))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9017])
	$3 = *($1 + [24])
	$8 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [25])
	$10 = (CASTING uint_64)(uint_32 $8)
	$9 = ($1 + [48])
	$11 = ($1 + [16])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [36])
	$8 = ( *(($1 + [40])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$3 = ($8 + $3)
	$10 = (CASTING uint_64)(uint_32 $8)
	$12 = ($1 + [36])
	$8 = ($0 + [36])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $175($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [80]) = ($5 + [8])
	*($5 + [96]) = $11
	*($5 + [100]) = $7
	*($5 + [104]) = $12
	*($5 + [108]) = $9
	*($5 + [88]) = $1
	*($5 + [92]) = ($1 + [8])
	CALL $117(($5 + [88]), ($5 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $178($4)
	$6 = *($5 + [24])
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [92]) = $1
	*($5 + [88]) = $0
	*($5 + [100]) = $1
	*($5 + [96]) = ($5 + [32])
	*($5 + [104]) = ($5 + [24])
	*($5 + [108]) = ($5 + [72])
	*($5 + [80]) = ($5 + [88])
	CALL $128(($5 + [80]), $8, ($8 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-4035225266123964416, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [52])) == (int_32)$7), [9076])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $79($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-4035225266123964416, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9076])
	
.LABEL $label$2
	*($4 + [60]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [176])
	$global$0 = $6
	*($6 + [128]) = $3
	$7 = *([0] + [8232])
	*($6 + [120]) = $7
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = (int_64)3617214756542218240
	*((($6 + [120]) + [36])) = [0]
	$9 = ($8 + [16])
	*(($6 + [144])) = $9
	*(($6 + [140])) = $9
	*($6 + [136]) = $8
	*($6 + [148 align=4]) = (int_64)0
	CALL $10((($6 + [120]) + [28]), [10])
	$8 = *($6 + [148])
	$9 = (*(($6 + [152])) - $8)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [8879])
	CALL memcpy($8, $5, [8])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[1]), [8879])
	CALL memcpy(($8 + [8]), ($5 + [8]), [2])
	$7 = CALL current_time()
	*((($6 + [56]) + [28])) = (int_64)0
	*(($6 + [100])) = (int_64)0
	*(($6 + [108])) = (int_64)0
	*($6 + [68]) = [0]
	*($6 + [72]) = [0]
	*($6 + [76 align=4]) = (int_64)0
	*($6 + [92 align=4]) = (int_64)0
	*($6 + [56]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$8 = CALL tapos_block_num()
	$2 = ((int_64)((int_64)$2 << (int_64)32) | (int_64)$3)
	*($6 + [40]) = ((int_64)((int_64)$2 & (int_64)-4294967296) | (int_64)(uint_64)$2 >> (uint_64)(int_64)32))
	*($6 + [32]) = ((int_64)((int_64)$2 << (int_64)32) | (int_64)(CASTING int_64)(int_32 $8))
	CALL $19((($6 + [56]) + [36]), ($6 + [120]))
	*($6 + [76]) = $4
	$2 = *([0] + [8232])
	CALL $20(($6 + [160]), ($6 + [56]))
	$8 = *($6 + [160])
	CALL send_deferred(($6 + [32]), $2, $8, (*($6 + [164]) - $8), [0])
	$8 = *($6 + [160])
	if ( ($8 == 0) ){ goto $label$1 }
	*($6 + [164]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	if ( ((int_64)$3 == (int_64)7112127545683459744) ){ goto $label$11 }
	if ( ((int_64)$3 != (int_64)7112217537059471008) ){ goto $label$4 }
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	*($6 + [160]) = *([0] + [8232])
	$8 = CALL $172([9586])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($6 + [16]) = ($8 << [1])
	$5 = (($6 + [16]) | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	*($6 + [160]) = *([0] + [8232])
	$8 = CALL $172([9588])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$7 }
	*($6) = ($8 << [1])
	$5 = ($6 | [1])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	$4 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($6 + [16]) = ($4 | [1])
	*($6 + [24]) = $5
	*($6 + [20]) = $8
	
.LABEL $label$9
	CALL memcpy($5, [9586], $8)
	
.LABEL $label$8
	*(($5 + $8)) = [0]
	CALL $5(($6 + [160]), [100], ($6 + [16]))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($6 + [24]))
	goto $label$4 
	
.LABEL $label$7
	$4 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $8
	
.LABEL $label$6
	CALL memcpy($5, [9588], $8)
	
.LABEL $label$5
	*(($5 + $8)) = [0]
	CALL $5(($6 + [160]), [100], $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$4
	$3 = *($6 + [40])
	$2 = *($6 + [32])
	CALL $6(($6 + [56]))
	$8 = *($6 + [148])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($6 + [152])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$8 = *($6 + [136])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($6 + [140])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	*($0) = $2
	*($0 + [8]) = $3
	$global$0 = ($6 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $155(($6 + [16]))
	
.LABEL $label$2
	CALL $155($6)
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)3458764513820540928, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $46(($3 + [16]), $5)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($3 + [16])), [9076])
	$4 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert([1], [8885])
	CALL $47(($3 + [16]), $5, $4, ($3 + [8]))
	$5 = *($3 + [40])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = ($3 + [56])
	CALL $48($3, ($3 + [16]), $4, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$8
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	$6 = *($1)
	$8 = *($3)
	$9 = ($8 & [1])
	$3 = *($3)
	$7 = ($1 + [8])
	CALL $164($7, ( *($3 + [8]) ? ($3 + [1]) : $9 ), ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 ))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9017])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$10 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $175($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8879])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $51($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8613])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $108(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $130(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9017])
	*($4 + [72]) = ($4 + [55])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [32])
	*($4 + [108]) = ($1 + [34])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [64])
	CALL $111(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [55])
	if ( ((uint_64)*($0 + [16]) > (uint_64)$5) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [52]) = $1
	CALL $124(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $125(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$4
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $167 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $165($0, $1, $2, CALL $172($2))
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $159($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $159($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $162($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $172($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $159($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $159($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $169 ()
{
	return [9660]
}

void .FUNC $168 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $175 (int_32 $0)
{
	return CALL $176([9676], $0)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*(($5 = $4) + [24]) = *(($1 + [8]))
	$6 = ($1 + [16])
	*($5 + [16]) = *($6)
	$7 = ($1 + [48])
	*($5 + [32]) = *($7)
	$8 = *($1)
	$9 = ($1 + [36])
	CALL $158($9, *($3))
	*($7) = [1]
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9017])
	$3 = *($1 + [24])
	$10 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [25])
	$11 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [24])
	$12 = (($5 + [16]) + [16])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	$13 = *(($1 + [36]))
	$13 = ( *(($1 + [40])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$3 = ($13 + $3)
	$11 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $175($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [48]) = $5
	*($5 + [72]) = $6
	*($5 + [76]) = $10
	*($5 + [80]) = $9
	*($5 + [84]) = $7
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	CALL $117(($5 + [64]), ($5 + [48]))
	CALL db_update_i64(*($1 + [56]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $178($4)
	
.LABEL $label$5
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [72]) = *(($1 + [8]))
	*($5 + [64]) = *(($1 + [16]))
	if ( (CALL $171(($5 + [16]), ($5 + [64]), [16]) == 0) ){ goto $label$7 }
	$3 = *($1 + [60])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4035225266123964416, ($5 + [48]), $8)
	*(($1 + [60])) = $3
	
.LABEL $label$8
	CALL db_idx128_update($3, $2, ($5 + [64]))
	
.LABEL $label$7
	*($5 + [64]) = *($7)
	if ( (CALL $171($12, ($5 + [64]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4035225266123964415, ($5 + [48]), $8)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$9
	$global$0 = ($5 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)4611686018427387904, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $14(($2 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($2 + [24])), [9076])
	$3 = *($0)
	*($2 + [8]) = $1
	CALL eosio_assert([1], [8885])
	CALL $63(($2 + [24]), $4, $3, ($2 + [8]))
	$4 = *($2 + [48])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0)
	*($2 + [16]) = $1
	CALL $64(($2 + [8]), ($2 + [24]), $3, ($2 + [16]))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($2 + [52])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($2 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($1)
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $141(($3 + [32]), ($3 + [24]))
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $133(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8879])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8879])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-2305843009213693952, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $50(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [8])), [9076])
	$3 = *($0)
	CALL eosio_assert([1], [8885])
	CALL $53(($2 + [8]), $4, $3, $2)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($4 + [80]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [9017])
	*($4 + [72]) = ($4 + [56])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [88]) = ($4 + [64])
	$6 = ($1 + [8])
	*($4 + [100]) = $6
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	CALL $131(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = *($6)
	if ( (CALL $171(($4 + [80]), ($4 + [96]), [8]) == 0) ){ goto $label$2 }
	$6 = ($1 + [64])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-2305843009213693952, ($4 + [88]), $5)
	*($6) = $1
	
.LABEL $label$3
	CALL db_idx_double_update($1, $2, ($4 + [96]))
	
.LABEL $label$2
	$global$0 = ($4 + [128])
}

void .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	float_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	float_64 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	$1 = ($global$0 - [512])
	$global$0 = $1
	CALL $12(($1 + [504]), $2)
	*(($1 + [496])) = [0]
	*($1 + [480]) = (int_64)-1
	*($1 + [488]) = (int_64)0
	$3 = *([0] + [8232])
	*($1 + [464]) = $3
	*($1 + [472]) = $3
	$4 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)5188146770730811392, *(*($1 + [508]) + [16]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $55(($1 + [464]), $2)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($1 + [464])), [9076])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8480])
	$5 = *($4 + [56])
	$6 = *($4 + [40])
	$3 = *([0] + [8232])
	*($1 + [456]) = $3
	if ( (*($4 + [24]) & [1]) ){ goto $label$3 }
	$7 = (($4 + [24]) + [1])
	goto $label$2 
	
.LABEL $label$3
	$7 = *(($4 + [32]))
	
.LABEL $label$2
	*((($1 + [416]) + [32])) = [0]
	*($1 + [424]) = $3
	*($1 + [416]) = $3
	*($1 + [432]) = (int_64)-1
	*($1 + [440]) = (int_64)0
	*($1 + [452]) = [0]
	*($1 + [408]) = ($1 + [416])
	*($1 + [336]) = (int_64)0
	CALL $23(($1 + [400]), ($1 + [408]), ($1 + [336]))
	$2 = *($1 + [404])
	if ( ($2 == 0) ){ goto $label$11 }
	$8 = (($1 + [384]) | [1])
	$9 = ($1 + [369])
	$10 = (($1 + [336]) + [40])
	$11 = (($1 + [336]) + [24])
	$12 = (($1 + [336]) + [16])
	$13 = (($1 + [336]) + [32])
	$14 = ($13 + [8])
	$15 = ($1 + [372])
	$16 = [0]
	
.LOOP $label$13:
	if ( *($2 + [48]) ){ goto $label$12 }
	if ( ((uint_32)($16 & [65535]) > (uint_32)(*([0] + [8248]) & [65535])) ){ goto $label$12 }
	if ( ((int_64)*($2 + [16]) != (int_64)*(*($1 + [508]) + [16])) ){ goto $label$17 }
	*($10) = (int_64)0
	*($13) = (int_64)0
	*($11) = (int_64)0
	*($12) = (int_64)0
	*($14) = [0]
	*($13) = (int_64)0
	*($1 + [344]) = (int_64)0
	*($1 + [336]) = (int_64)0
	$2 = CALL $172([8560])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$16 }
	*($13) = ($2 << [1])
	$17 = $9
	if ( $2 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	CALL $25(($1 + [400]))
	$16 = ($16 + [1])
	$2 = *($1 + [404])
	if ( $2 ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$16
	$18 = (($2 + [16]) & [-16])
	$17 = CALL _Znwj($18)
	*($13) = ($18 | [1])
	*($10) = $17
	*($15) = $2
	
.LABEL $label$15
	CALL memcpy($17, [8560], $2)
	
.LABEL $label$14
	*(($17 + $2)) = [0]
	CALL $56(($1 + [384]), ($1 + [336]), $7, CALL $156(($1 + [320]), (*($1 + [404]) + [24])))
	if ( ((*($1 + [320]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*((($1 + [320]) + [8])))
	
.LABEL $label$18
	if ( ((*($13) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$19
	$19 = (($1 + [384]) + [8])
	$2 = ($2 & [1])
	$2 = *($1 + [384])
	$18 = ( *($1 + [388]) ? uint_32($2 >> [1]) : $2 )
	if ( ($18 == 0) ){ goto $label$21 }
	$20 = ( *($19) ? $8 : $2 )
	$2 = [0]
	$21 = (float_64)0
	
.LOOP $label$22:
	$17 = *(($20 + $2))
	if ( ((int_32)$17 == (int_32)[51]) ){ goto $label$23 }
	if ( ((int_32)$17 == (int_32)[50]) ){ goto $label$24 }
	if ( ((int_32)$17 != (int_32)[49]) ){ goto $label$25 }
	$21 = ((float_64)$6 + (float_64)$21)
	
.LABEL $label$25
	$2 = ($2 + [1])
	if ( ($2 <= $18) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$24
	$21 = ((float_64)$5 + (float_64)$21)
	$2 = ($2 + [1])
	if ( ($2 <= $18) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$21 = ((float_64)$21 + (float_64)(float_64)1)
	$2 = ($2 + [1])
	if ( ($2 <= $18) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$21 = (float_64)0
	
.LABEL $label$20
	$3 = *(*($1 + [404]) + [8])
	*(($2 = (($1 + [264]) + [8]))) = $21
	$17 = *(*($1 + [508]) + [34])
	*(($20 = (($1 + [264]) + [32]))) = $21
	$21 = (PROMOTE float_64)(float_32 ((float_32)*([0] + [8228]) * (float_32)(CASTING float_32)(uint_32 ((int_32)$18 * (int_32)$17))))
	*(($22 = (($1 + [264]) + [16]))) = $21
	*(($17 = (($1 + [264]) + [40]))) = $21
	*((($1 + [264]) + [24])) = (int_64)0
	*((($1 + [264]) + [48])) = (int_64)0
	*((($1 + [104]) + [24])) = (int_64)0
	*((($1 + [104]) + [48])) = (int_64)0
	*((($1 + [104]) + [8])) = *($2)
	*((($1 + [104]) + [32])) = *($20)
	*((($1 + [104]) + [16])) = *($22)
	*((($1 + [104]) + [40])) = *($17)
	*($1 + [264]) = $3
	*($1 + [104]) = $3
	CALL $57(($1 + [456]), ($1 + [104]))
	$2 = *($1 + [404])
	CALL $25(($1 + [400]))
	$3 = *([0] + [8232])
	*($1 + [336]) = ($1 + [384])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8885])
	CALL $58(*($1 + [408]), $2, $3, ($1 + [336]))
	if ( ((*($1 + [384]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($19))
	
.LABEL $label$26
	$16 = ($16 + [1])
	$2 = *($1 + [404])
	if ( $2 ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( (*($2 + [48]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = *($1 + [508])
	$3 = ((uint_64)*($2 + [8]) / (uint_64)(int_64)10)
	if ( (*($4 + [48]) == 0) ){ goto $label$27 }
	if ( *($4 + [64]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$27
	$21 = ((float_64)$6 + (float_64)(CASTING float_64)(uint_64 $3))
	if ( (((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) ){ goto $label$28 }
	$3 = (int_64)0
	if ( *($4 + [64]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$28
	$3 = (Rounds 0)($21)
	if ( (*($4 + [64]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$3 = *([0] + [8232])
	*($1 + [336]) = $3
	CALL $17(($1 + [88]), ($1 + [336]), $3, (int_64)7112217537059471008, [1], [8359])
	$18 = *($1 + [440])
	if ( $18 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	CALL $155($13)
	
.LABEL $label$8
	$21 = ((float_64)$5 + (float_64)(CASTING float_64)(uint_64 $3))
	if ( (((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) ){ goto $label$29 }
	$3 = (int_64)0
	goto $label$7 
	
.LABEL $label$29
	$3 = (Rounds 0)($21)
	
.LABEL $label$7
	$23 = *([0] + [8200])
	$24 = *([0] + [8216])
	$25 = *($2 + [16])
	$17 = *([0] + [8192])
	$26 = CALL current_time()
	$2 = *($1 + [508])
	$18 = *($2 + [34])
	$2 = *($2 + [32])
	*(($1 + [232])) = (int_64)0
	*(($1 + [248])) = *(($1 + [343]))
	*($1 + [224]) = (int_64)0
	*($1 + [176]) = $17
	*($1 + [184]) = ( $23 ? $3 : (uint_64)($3 <= $23) )
	*($1 + [192]) = ((int_64)$25 + (int_64)$24)
	*($1 + [208]) = $2
	*($1 + [210]) = $18
	*($1 + [216]) = (int_64)0
	*($1 + [240]) = [0]
	*($1 + [384]) = *([0] + [8232])
	*($1 + [178 align=2]) = *($1 + [258 align=2])
	*($1 + [182]) = *(($1 + [262]))
	*($1 + [241 align=1]) = *($1 + [336 align=1])
	*($1 + [200]) = ((int_64)((int_64)((uint_64)$26 / (uint_64)(int_64)1000000) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)65535)) & (int_64)4294967295)
	$2 = CALL memcpy($1, ($1 + [176]), [80])
	CALL $59(($2 + [384]), $2)
	*($2 + [384]) = *([0] + [8232])
	CALL $60(($2 + [384]), *(*($2 + [508]) + [16]), [1])
	*(($2 + [168])) = [0]
	*($2 + [160]) = (int_64)0
	*($2 + [384]) = *([0] + [8232])
	$20 = *([0] + [8255])
	$17 = CALL $172([8500])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$32 }
	*($2 + [160]) = ($17 << [1])
	$18 = (($2 + [160]) | [1])
	if ( $17 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$16 = (($17 + [16]) & [-16])
	$18 = CALL _Znwj($16)
	*($2 + [160]) = ($16 | [1])
	*($2 + [168]) = $18
	*($2 + [164]) = $17
	
.LABEL $label$31
	CALL memcpy($18, [8500], $17)
	
.LABEL $label$30
	*(($18 + $17)) = [0]
	CALL $5(($2 + [384]), ($20 & [255]), ($2 + [160]))
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($2 + [168]))
	
.LABEL $label$33
	$18 = *($2 + [440])
	if ( ($18 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$20 = ($1 + [444])
	$17 = *($20)
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$35 }
	
.LOOP $label$36:
	$17 = ($17 + [-24])
	$2 = *($17)
	*($17) = [0]
	if ( ($2 == 0) ){ goto $label$37 }
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($2 + [44])))
	
.LABEL $label$38
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$39
	CALL _ZdlPv($2)
	
.LABEL $label$37
	if ( ((int_32)$18 != (int_32)$17) ){ goto $label$36 }
	$2 = *(($1 + [440]))
	goto $label$34 
	
.LABEL $label$35
	$2 = $18
	
.LABEL $label$34
	*($20) = $18
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$18 = *($1 + [488])
	if ( ($18 == 0) ){ goto $label$40 }
	$20 = ($1 + [492])
	$2 = *($20)
	if ( ((int_32)$2 == (int_32)$18) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$17 = *($2)
	*($2) = [0]
	if ( ($17 == 0) ){ goto $label$44 }
	if ( ((*($17 + [24]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($17 + [32])))
	
.LABEL $label$45
	CALL _ZdlPv($17)
	
.LABEL $label$44
	if ( ((int_32)$18 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($1 + [488]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $18
	
.LABEL $label$41
	*($20) = $18
	CALL _ZdlPv($2)
	
.LABEL $label$40
	$global$0 = ($1 + [512])
	return (unreachable)
	
.LABEL $label$4
	CALL $155(($2 + [160]))
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [82])
	*($3 + [76]) = ($5 + [84])
	CALL $140(($3 + [32]), ($3 + [24]))
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $138(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($3 + [4])
	
.LABEL $label$1
	$5 = (uint_32($4 >> [2]) & [65535])
	$6 = CALL $175($5)
	CALL memset($6, [0], $5)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$4 = CALL $172([8447])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($0) = ($4 << [1])
	$7 = ($0 + [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $4
	
.LABEL $label$7
	CALL memcpy($7, [8447], $4)
	
.LABEL $label$6
	$8 = [0]
	*(($7 + $4)) = [0]
	$7 = ($3 + [1])
	$9 = ($3 + [8])
	$10 = ($3 + [4])
	$4 = *($3)
	$11 = ($4 & [1])
	if ( ($11 == 0) ){ goto $label$4 }
	$12 = [33]
	goto $label$3 
	
.LABEL $label$5
	CALL $155($0)
	
.LABEL $label$4
	$12 = [39]
	
.LABEL $label$3
	
.LOOP $label$9:
	goto $label$61 
	
.LABEL $label$85
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$43 }
	$12 = [35]
	goto $label$9 
	
.LABEL $label$84
	$13 = *($2)
	$4 = $7
	if ( ($11 == 0) ){ goto $label$11 }
	$12 = [36]
	goto $label$9 
	
.LABEL $label$83
	$4 = *($9)
	$12 = [37]
	goto $label$9 
	
.LABEL $label$82
	if ( ((int_32)($13 & [255]) != (int_32)*(($4 + $8))) ){ goto $label$10 }
	$12 = [40]
	goto $label$9 
	
.LABEL $label$81
	*(($4 = ($6 + uint_32($8 >> [2])))) = (*($4) + [1])
	$12 = [38]
	goto $label$9 
	
.LABEL $label$80
	$8 = ($8 + [1])
	$4 = *($3)
	$11 = ($4 & [1])
	if ( $11 ){ goto $label$44 }
	$12 = [39]
	goto $label$9 
	
.LABEL $label$79
	if ( ($8 <= uint_32($4 >> [1])) ){ goto $label$12 }
	$12 = [34]
	goto $label$9 
	
.LABEL $label$78
	$8 = [0]
	$14 = ($3 + [8])
	$9 = ($3 + [4])
	$13 = ($4 & [1])
	if ( ($13 == 0) ){ goto $label$16 }
	$12 = [25]
	goto $label$9 
	
.LABEL $label$77
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$41 }
	$12 = [27]
	goto $label$9 
	
.LABEL $label$76
	$10 = *(($2 + [1]))
	$11 = $7
	if ( ($13 == 0) ){ goto $label$14 }
	$12 = [28]
	goto $label$9 
	
.LABEL $label$75
	$11 = *($14)
	$12 = [29]
	goto $label$9 
	
.LABEL $label$74
	if ( ((int_32)($10 & [255]) != (int_32)*(($11 + $8))) ){ goto $label$13 }
	$12 = [32]
	goto $label$9 
	
.LABEL $label$73
	*(($4 = ($6 + uint_32($8 >> [2])))) = (*($4) + [1])
	$4 = *($3)
	$12 = [30]
	goto $label$9 
	
.LABEL $label$72
	$8 = ($8 + [1])
	$13 = ($4 & [1])
	if ( $13 ){ goto $label$42 }
	$12 = [31]
	goto $label$9 
	
.LABEL $label$71
	if ( ($8 <= uint_32(($4 & [254]) >> [1])) ){ goto $label$15 }
	$12 = [26]
	goto $label$9 
	
.LABEL $label$70
	$8 = [0]
	$9 = ($2 + [2])
	$15 = ($3 + [8])
	$14 = ($3 + [4])
	$13 = ($4 & [1])
	if ( ($13 == 0) ){ goto $label$20 }
	$12 = [17]
	goto $label$9 
	
.LABEL $label$69
	if ( ((uint_32)$8 >= (uint_32)*($14)) ){ goto $label$39 }
	$12 = [19]
	goto $label$9 
	
.LABEL $label$68
	$10 = *($9)
	$11 = $7
	if ( ($13 == 0) ){ goto $label$18 }
	$12 = [20]
	goto $label$9 
	
.LABEL $label$67
	$11 = *($15)
	$12 = [21]
	goto $label$9 
	
.LABEL $label$66
	if ( ((int_32)($10 & [255]) != (int_32)*(($11 + $8))) ){ goto $label$17 }
	$12 = [24]
	goto $label$9 
	
.LABEL $label$65
	*(($4 = ($6 + uint_32($8 >> [2])))) = (*($4) + [1])
	$4 = *($3)
	$12 = [22]
	goto $label$9 
	
.LABEL $label$64
	$8 = ($8 + [1])
	$13 = ($4 & [1])
	if ( $13 ){ goto $label$40 }
	$12 = [23]
	goto $label$9 
	
.LABEL $label$63
	if ( ($8 <= uint_32(($4 & [254]) >> [1])) ){ goto $label$19 }
	$12 = [18]
	goto $label$9 
	
.LABEL $label$62
	$8 = [0]
	$10 = ($2 + [3])
	$14 = ($3 + [8])
	$9 = ($3 + [4])
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$36 }
	$12 = [0]
	goto $label$9 
	
.LABEL $label$61
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$37 }
	$12 = [11]
	goto $label$9 
	
.LABEL $label$60
	$13 = *($10)
	$11 = $7
	if ( ($2 == 0) ){ goto $label$22 }
	$12 = [12]
	goto $label$9 
	
.LABEL $label$59
	$11 = *($14)
	$12 = [13]
	goto $label$9 
	
.LABEL $label$58
	if ( ((int_32)($13 & [255]) != (int_32)*(($11 + $8))) ){ goto $label$21 }
	$12 = [16]
	goto $label$9 
	
.LABEL $label$57
	*(($4 = ($6 + uint_32($8 >> [2])))) = (*($4) + [1])
	$4 = *($3)
	$12 = [14]
	goto $label$9 
	
.LABEL $label$56
	$8 = ($8 + [1])
	$2 = ($4 & [1])
	if ( $2 ){ goto $label$38 }
	$12 = [15]
	goto $label$9 
	
.LABEL $label$55
	if ( ($8 <= uint_32(($4 & [254]) >> [1])) ){ goto $label$35 }
	$12 = [1]
	goto $label$9 
	
.LABEL $label$54
	if ( ($5 == 0) ){ goto $label$34 }
	$12 = [2]
	goto $label$9 
	
.LABEL $label$53
	$4 = $6
	$12 = [3]
	goto $label$9 
	
.LABEL $label$52
	$8 = *($4)
	if ( ((uint_32)$8 > (uint_32)[4]) ){ goto $label$26 }
	$12 = [4]
	goto $label$9 
	
.LABEL $label$51
	goto $label$86 
	
.LABEL $label$86
	$12 = [9]
	goto $label$9 
	
.LABEL $label$50
	CALL $164($0, [9565], [1])
	$12 = [10]
	goto $label$9 
	
.LABEL $label$49
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$48
	CALL $164($0, [9571], [1])
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$47
	CALL $164($0, [9567], [1])
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$46
	CALL $164($0, [9569], [1])
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$29 }
	$12 = [6]
	goto $label$9 
	
.LABEL $label$45
	CALL $178($6)
	return 
	
.LABEL $label$44
	$12 = [33]
	goto $label$9 
	
.LABEL $label$43
	$12 = [34]
	goto $label$9 
	
.LABEL $label$42
	$12 = [25]
	goto $label$9 
	
.LABEL $label$41
	$12 = [26]
	goto $label$9 
	
.LABEL $label$40
	$12 = [17]
	goto $label$9 
	
.LABEL $label$39
	$12 = [18]
	goto $label$9 
	
.LABEL $label$38
	$12 = [0]
	goto $label$9 
	
.LABEL $label$37
	$12 = [1]
	goto $label$9 
	
.LABEL $label$36
	$12 = [15]
	goto $label$9 
	
.LABEL $label$35
	$12 = [11]
	goto $label$9 
	
.LABEL $label$34
	$12 = [6]
	goto $label$9 
	
.LABEL $label$33
	$12 = [6]
	goto $label$9 
	
.LABEL $label$32
	$12 = [3]
	goto $label$9 
	
.LABEL $label$31
	$12 = [6]
	goto $label$9 
	
.LABEL $label$30
	$12 = [3]
	goto $label$9 
	
.LABEL $label$29
	$12 = [3]
	goto $label$9 
	
.LABEL $label$28
	$12 = [6]
	goto $label$9 
	
.LABEL $label$27
	$12 = [3]
	goto $label$9 
	
.LABEL $label$26
	$12 = [10]
	goto $label$9 
	
.LABEL $label$25
	$12 = [8]
	goto $label$9 
	
.LABEL $label$24
	$12 = [7]
	goto $label$9 
	
.LABEL $label$23
	$12 = [5]
	goto $label$9 
	
.LABEL $label$22
	$12 = [13]
	goto $label$9 
	
.LABEL $label$21
	$12 = [14]
	goto $label$9 
	
.LABEL $label$20
	$12 = [23]
	goto $label$9 
	
.LABEL $label$19
	$12 = [19]
	goto $label$9 
	
.LABEL $label$18
	$12 = [21]
	goto $label$9 
	
.LABEL $label$17
	$12 = [22]
	goto $label$9 
	
.LABEL $label$16
	$12 = [31]
	goto $label$9 
	
.LABEL $label$15
	$12 = [27]
	goto $label$9 
	
.LABEL $label$14
	$12 = [29]
	goto $label$9 
	
.LABEL $label$13
	$12 = [30]
	goto $label$9 
	
.LABEL $label$12
	$12 = [35]
	goto $label$9 
	
.LABEL $label$11
	$12 = [37]
	goto $label$9 
	
.LABEL $label$10
	$12 = [38]
	goto $label$9 
	(unreachable)
	$12
	$8
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [208])
	$global$0 = $2
	*((($2 + [56]) + [32])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	*($2 + [92]) = [0]
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-2305843009213693952, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $50(($2 + [56]), $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [56])), [9076])
	$3 = *($0)
	*($2 + [96]) = $1
	CALL eosio_assert([1], [8885])
	CALL $61(($2 + [56]), $4, $3, ($2 + [96]))
	$4 = *($2 + [80])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*(($4 = ($2 + [48]))) = *(($1 + [48]))
	*(($5 = ($2 + [40]))) = *(($1 + [40]))
	*(($6 = ($2 + [32]))) = *(($1 + [32]))
	*(($7 = ($2 + [24]))) = *(($1 + [24]))
	*(($8 = ($2 + [16]))) = *(($1 + [16]))
	*(($9 = ($2 + [8]))) = *(($1 + [8]))
	*($2) = *($1)
	*((($2 + [96]) + [48])) = *($4)
	*((($2 + [96]) + [40])) = *($5)
	*((($2 + [96]) + [32])) = *($6)
	*((($2 + [96]) + [24])) = *($7)
	*((($2 + [96]) + [16])) = *($8)
	*((($2 + [96]) + [8])) = *($9)
	*($2 + [96]) = *($2)
	*((($2 + [168]) + [32])) = [0]
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	*($2 + [204]) = [0]
	$3 = *($0)
	*($2 + [168]) = $3
	*($2 + [176]) = $3
	*($2 + [160]) = ($2 + [96])
	CALL $62(($2 + [152]), ($2 + [168]), $3, ($2 + [160]))
	$4 = *($2 + [192])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($2 + [196])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($2 + [192]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($2 + [84])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$11 }
	$1 = *(($2 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$1 = $4
	
.LABEL $label$9
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [208])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $169())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $174($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $178($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $173(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9656])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $173(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $155 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $159($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $69 (int_32 $0, int_64 $1, float_64 $2, float_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [48]) = $3
	*($4 + [56]) = $2
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)5188146770730811392, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $55(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($4 + [8])), [9076])
	$5 = *($0)
	*($4 + [4]) = ($4 + [48])
	*($4) = ($4 + [56])
	CALL eosio_assert([1], [8885])
	CALL $71(($4 + [8]), $6, $5, $4)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $7
	
.LABEL $label$2
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)5188146770730811392, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $55(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [8])), [9076])
	$3 = *($0)
	*($2) = $1
	CALL eosio_assert([1], [8885])
	CALL $70(($2 + [8]), $4, $3, $2)
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($0 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	$1 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$1 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*($1 + [84]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [9017])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [57])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	$9 = ($1 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $175($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [76]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [80])
	*($5 + [72]) = ($1 + [82])
	CALL $136(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [80])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([96])
	CALL $134($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $135(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$2 }
	$6 = ($4 + [4])
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 + [4])
	$5 = *($4 + [4])
	
.LABEL $label$1
	$7 = [0]
	$8 = (uint_32($5 >> [2]) & [65535])
	$9 = CALL $175($8)
	CALL memset($9, [0], $8)
	$10 = ($4 + [1])
	$11 = ($4 + [8])
	$5 = *($4)
	$12 = ($5 & [1])
	if ( $12 ){ goto $label$4 }
	$13 = [44]
	goto $label$3 
	
.LABEL $label$4
	$13 = [38]
	
.LABEL $label$3
	
.LOOP $label$5:
	goto $label$61 
	
.LABEL $label$91
	$7 = ($7 + [1])
	$5 = *($4)
	$12 = ($5 & [1])
	if ( $12 ){ goto $label$45 }
	$13 = [44]
	goto $label$5 
	
.LABEL $label$90
	if ( ((uint_32)$7 >= (uint_32)uint_32($5 >> [1])) ){ goto $label$9 }
	$13 = [40]
	goto $label$5 
	
.LABEL $label$89
	$14 = *($3)
	$5 = $10
	if ( ($12 == 0) ){ goto $label$8 }
	$13 = [41]
	goto $label$5 
	
.LABEL $label$88
	$5 = *($11)
	$13 = [42]
	goto $label$5 
	
.LABEL $label$87
	if ( ((int_32)($14 & [255]) != (int_32)*(($5 + $7))) ){ goto $label$7 }
	$13 = [45]
	goto $label$5 
	
.LABEL $label$86
	*(($5 = ($9 + uint_32($7 >> [2])))) = (*($5) + [1])
	goto $label$6 
	
.LABEL $label$85
	if ( ($7 <= *($6)) ){ goto $label$44 }
	$13 = [39]
	goto $label$5 
	
.LABEL $label$84
	$7 = [0]
	$15 = ($4 + [8])
	$14 = ($5 & [1])
	if ( ($14 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	$7 = ($7 + [1])
	$14 = ($5 & [1])
	if ( $14 ){ goto $label$43 }
	$13 = [36]
	goto $label$5 
	
.LABEL $label$82
	if ( ((uint_32)$7 >= (uint_32)uint_32(($5 & [254]) >> [1])) ){ goto $label$13 }
	$13 = [32]
	goto $label$5 
	
.LABEL $label$81
	$11 = *(($3 + [1]))
	$12 = $10
	if ( ($14 == 0) ){ goto $label$12 }
	$13 = [33]
	goto $label$5 
	
.LABEL $label$80
	$12 = *($15)
	$13 = [34]
	goto $label$5 
	
.LABEL $label$79
	if ( ((int_32)($11 & [255]) != (int_32)*(($12 + $7))) ){ goto $label$11 }
	$13 = [37]
	goto $label$5 
	
.LABEL $label$78
	*(($5 = ($9 + uint_32($7 >> [2])))) = (*($5) + [1])
	$5 = *($4)
	goto $label$10 
	
.LABEL $label$77
	if ( ($7 <= *($6)) ){ goto $label$42 }
	$13 = [31]
	goto $label$5 
	
.LABEL $label$76
	$7 = [0]
	$15 = ($3 + [2])
	$16 = ($4 + [8])
	$14 = ($5 & [1])
	if ( ($14 == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$75
	$7 = ($7 + [1])
	$14 = ($5 & [1])
	if ( $14 ){ goto $label$41 }
	$13 = [28]
	goto $label$5 
	
.LABEL $label$74
	if ( ((uint_32)$7 >= (uint_32)uint_32(($5 & [254]) >> [1])) ){ goto $label$19 }
	$13 = [24]
	goto $label$5 
	
.LABEL $label$73
	$11 = *($15)
	$12 = $10
	if ( ($14 == 0) ){ goto $label$18 }
	$13 = [25]
	goto $label$5 
	
.LABEL $label$72
	$12 = *($16)
	$13 = [26]
	goto $label$5 
	
.LABEL $label$71
	if ( ((int_32)($11 & [255]) != (int_32)*(($12 + $7))) ){ goto $label$17 }
	$13 = [29]
	goto $label$5 
	
.LABEL $label$70
	*(($5 = ($9 + uint_32($7 >> [2])))) = (*($5) + [1])
	$5 = *($4)
	goto $label$16 
	
.LABEL $label$69
	if ( ($7 <= *($6)) ){ goto $label$40 }
	$13 = [23]
	goto $label$5 
	
.LABEL $label$68
	$7 = [0]
	$11 = ($3 + [3])
	$15 = ($4 + [8])
	$3 = ($5 & [1])
	if ( ($3 == 0) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$67
	$7 = ($7 + [1])
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$39 }
	$13 = [20]
	goto $label$5 
	
.LABEL $label$66
	if ( ((uint_32)$7 >= (uint_32)uint_32(($5 & [254]) >> [1])) ){ goto $label$35 }
	$13 = [16]
	goto $label$5 
	
.LABEL $label$65
	$14 = *($11)
	$12 = $10
	if ( ($3 == 0) ){ goto $label$24 }
	$13 = [17]
	goto $label$5 
	
.LABEL $label$64
	$12 = *($15)
	$13 = [18]
	goto $label$5 
	
.LABEL $label$63
	if ( ((int_32)($14 & [255]) != (int_32)*(($12 + $7))) ){ goto $label$23 }
	$13 = [21]
	goto $label$5 
	
.LABEL $label$62
	*(($5 = ($9 + uint_32($7 >> [2])))) = (*($5) + [1])
	$5 = *($4)
	goto $label$22 
	
.LABEL $label$61
	if ( ($7 <= *($6)) ){ goto $label$38 }
	$13 = [1]
	goto $label$5 
	
.LABEL $label$60
	if ( ($8 == 0) ){ goto $label$34 }
	$13 = [2]
	goto $label$5 
	
.LABEL $label$59
	$12 = ($2 + [2])
	$4 = ($2 + [4])
	$7 = $9
	$13 = [3]
	goto $label$5 
	
.LABEL $label$58
	$5 = $4
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)[2]) ){ goto $label$30 }
	$13 = [4]
	goto $label$5 
	
.LABEL $label$57
	if ( ((int_32)$10 == (int_32)[4]) ){ goto $label$29 }
	$13 = [5]
	goto $label$5 
	
.LABEL $label$56
	$5 = $12
	if ( ((int_32)$10 == (int_32)[3]) ){ goto $label$28 }
	$13 = [6]
	goto $label$5 
	
.LABEL $label$55
	$7 = ($7 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$54
	$5 = $2
	$13 = [14]
	goto $label$5 
	
.LABEL $label$53
	*($5) = (*($5) + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$31 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$52
	CALL $178($9)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$5 = CALL $172([8447])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$27 }
	$13 = [8]
	goto $label$5 
	
.LABEL $label$51
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$50
	*($0) = ($5 << [1])
	$7 = ($0 + [1])
	if ( $5 ){ goto $label$25 }
	$13 = [12]
	goto $label$5 
	
.LABEL $label$49
	*(($7 + $5)) = [0]
	return 
	
.LABEL $label$48
	$10 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($0) = ($10 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $5
	$13 = [10]
	goto $label$5 
	
.LABEL $label$47
	CALL memcpy($7, [8447], $5)
	*(($7 + $5)) = [0]
	return (unreachable)
	
.LABEL $label$46
	CALL $155($0)
	
.LABEL $label$45
	$13 = [38]
	goto $label$5 
	
.LABEL $label$44
	$13 = [40]
	goto $label$5 
	
.LABEL $label$43
	$13 = [30]
	goto $label$5 
	
.LABEL $label$42
	$13 = [32]
	goto $label$5 
	
.LABEL $label$41
	$13 = [22]
	goto $label$5 
	
.LABEL $label$40
	$13 = [24]
	goto $label$5 
	
.LABEL $label$39
	$13 = [0]
	goto $label$5 
	
.LABEL $label$38
	$13 = [16]
	goto $label$5 
	
.LABEL $label$37
	$13 = [20]
	goto $label$5 
	
.LABEL $label$36
	$13 = [0]
	goto $label$5 
	
.LABEL $label$35
	$13 = [1]
	goto $label$5 
	
.LABEL $label$34
	$13 = [7]
	goto $label$5 
	
.LABEL $label$33
	$13 = [7]
	goto $label$5 
	
.LABEL $label$32
	$13 = [3]
	goto $label$5 
	
.LABEL $label$31
	$13 = [3]
	goto $label$5 
	
.LABEL $label$30
	$13 = [14]
	goto $label$5 
	
.LABEL $label$29
	$13 = [15]
	goto $label$5 
	
.LABEL $label$28
	$13 = [14]
	goto $label$5 
	
.LABEL $label$27
	$13 = [13]
	goto $label$5 
	
.LABEL $label$26
	$13 = [9]
	goto $label$5 
	
.LABEL $label$25
	$13 = [10]
	goto $label$5 
	
.LABEL $label$24
	$13 = [18]
	goto $label$5 
	
.LABEL $label$23
	$13 = [19]
	goto $label$5 
	
.LABEL $label$22
	$13 = [19]
	goto $label$5 
	
.LABEL $label$21
	$13 = [28]
	goto $label$5 
	
.LABEL $label$20
	$13 = [22]
	goto $label$5 
	
.LABEL $label$19
	$13 = [23]
	goto $label$5 
	
.LABEL $label$18
	$13 = [26]
	goto $label$5 
	
.LABEL $label$17
	$13 = [27]
	goto $label$5 
	
.LABEL $label$16
	$13 = [27]
	goto $label$5 
	
.LABEL $label$15
	$13 = [36]
	goto $label$5 
	
.LABEL $label$14
	$13 = [30]
	goto $label$5 
	
.LABEL $label$13
	$13 = [31]
	goto $label$5 
	
.LABEL $label$12
	$13 = [34]
	goto $label$5 
	
.LABEL $label$11
	$13 = [35]
	goto $label$5 
	
.LABEL $label$10
	$13 = [35]
	goto $label$5 
	
.LABEL $label$9
	$13 = [39]
	goto $label$5 
	
.LABEL $label$8
	$13 = [42]
	goto $label$5 
	
.LABEL $label$7
	$13 = [43]
	goto $label$5 
	
.LABEL $label$6
	$13 = [43]
	goto $label$5 
	$13
}

void .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	float_64 $13
	$1 = ($global$0 - [384])
	$global$0 = $1
	CALL $12(($1 + [376]), $1)
	$2 = [0]
	*((($1 + [336]) + [32])) = [0]
	*($1 + [352]) = (int_64)-1
	*($1 + [360]) = (int_64)0
	$3 = *([0] + [8232])
	*($1 + [336]) = $3
	*($1 + [344]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)5188146770730811392, *(*($1 + [380]) + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $55(($1 + [336]), $5)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($1 + [336])), [9076])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8480])
	*((($1 + [296]) + [32])) = [0]
	*($1 + [312]) = (int_64)-1
	*($1 + [320]) = (int_64)0
	$3 = *([0] + [8232])
	*($1 + [296]) = $3
	*($1 + [304]) = $3
	$5 = CALL db_find_i64($3, $3, (int_64)3458764513820540928, *(*($1 + [380]) + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $46(($1 + [296]), $5)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)($1 + [296])), [9076])
	
.LABEL $label$2
	$6 = ($2 + [8])
	$5 = *($4 + [82])
	$7 = *($2 + [8])
	if ( ($7 & [1]) ){ goto $label$4 }
	$7 = uint_32($7 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = *(($2 + [12]))
	
.LABEL $label$3
	CALL eosio_assert(((uint_32)$7 > (uint_32)$5), [8508])
	*($1 + [290]) = *($4 + [48])
	*($1 + [292]) = *($4 + [64])
	*($1 + [294]) = *($4 + [80])
	$5 = *($6)
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($2 + [12]))
	
.LABEL $label$5
	$5 = ($5 - $7)
	$8 = *([0] + [8250])
	$9 = ( $8 ? $5 : ((uint_32)($5 & [65535]) > (uint_32)$8) )
	$7 = *(($4 + [82]))
	$8 = CALL $157(($1 + [272]), $6, $7, ($9 & [65535]), $6)
	if ( (*($4 + [24]) & [1]) ){ goto $label$8 }
	$10 = (($4 + [24]) + [1])
	goto $label$7 
	
.LABEL $label$8
	$10 = *(($4 + [32]))
	
.LABEL $label$7
	*(($5 = ($1 + [184]))) = (int_64)0
	*(($7 = ($1 + [176]))) = (int_64)0
	*(($1 + [168])) = (int_64)0
	*(($1 + [160])) = (int_64)0
	*($5) = [0]
	*($1 + [152]) = (int_64)0
	*($1 + [144]) = (int_64)0
	$5 = CALL $172([8560])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$21 }
	*(($1 + [176])) = ($5 << [1])
	$7 = ($7 + [1])
	if ( $5 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$11 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*(($1 + [184])) = $7
	*(($1 + [180])) = $5
	*($1 + [176]) = ($11 | [1])
	
.LABEL $label$20
	CALL memcpy($7, [8560], $5)
	
.LABEL $label$19
	*(($7 + $5)) = [0]
	$5 = CALL $156(($1 + [240]), $8)
	CALL $67(($1 + [256]), ($1 + [144]), ($1 + [290]), $10, $5)
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($1 + [264]))
	
.LABEL $label$22
	if ( ((*($5) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$23
	$5 = ($1 + [176])
	if ( ((*($5) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($1 + [184])))
	
.LABEL $label$24
	$7 = *(($4 + [82]))
	$3 = *(*($1 + [380]) + [16])
	*($5) = [0]
	*($1 + [152]) = (int_64)0
	*($1 + [160]) = (int_64)0
	*($1 + [144]) = $3
	*($1 + [168]) = (int_64)0
	$10 = ($1 + [168])
	$4 = CALL $172([8447])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$17 }
	$5 = ($7 + $9)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$27 }
	*(($1 + [168])) = ($4 << [1])
	$7 = ($10 + [1])
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$9 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*(($1 + [176])) = $7
	*(($1 + [172])) = $4
	*($1 + [168]) = ($9 | [1])
	
.LABEL $label$26
	CALL memcpy($7, [8447], $4)
	
.LABEL $label$25
	*(($7 + $4)) = [0]
	*($1 + [184]) = (int_64)0
	*($1 + [192]) = *($1 + [290])
	*($1 + [200]) = (int_64)0
	*($1 + [208]) = *(($1 + [292]))
	*($1 + [216]) = (int_64)4607182418800017408
	*($1 + [224]) = *(($1 + [294]))
	*($1 + [226]) = $5
	*($1 + [228]) = [0]
	*((($1 + [48]) + [8])) = *((($1 + [144]) + [8]))
	*((($1 + [48]) + [16])) = *((($1 + [144]) + [16]))
	*($1 + [136]) = *([0] + [8232])
	*($1 + [48]) = *($1 + [144])
	$4 = CALL $156(($1 + [72]), $10)
	*((($1 + [48]) + [77])) = *((($1 + [144]) + [77]))
	*(($1 + [120])) = *($1 + [216])
	*(($1 + [112])) = *($1 + [208])
	*(($1 + [104])) = *($1 + [200])
	*(($1 + [96])) = *($1 + [192])
	*($1 + [88]) = *($1 + [184])
	CALL $68(($1 + [136]), ($1 + [48]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($1 + [80])))
	
.LABEL $label$28
	$4 = ($5 & [65535])
	$5 = *($6)
	if ( ($5 & [1]) ){ goto $label$30 }
	if ( ((uint_32)uint_32($5 >> [1]) > (uint_32)$4) ){ goto $label$29 }
	goto $label$16 
	
.LABEL $label$30
	if ( ((uint_32)*(($2 + [12])) <= (uint_32)$4) ){ goto $label$16 }
	
.LABEL $label$29
	$3 = *([0] + [8232])
	*($1 + [136]) = $3
	CALL $17($1, ($1 + [136]), $3, (int_64)7112127545683459744, [1], [8359])
	goto $label$15 
	
.LABEL $label$18
	CALL $155($7)
	
.LABEL $label$17
	CALL $155($10)
	
.LABEL $label$16
	$12 = ((float_64)$12 * (float_64)(PROMOTE float_64)(float_32 *([0] + [8224])))
	$4 = *($1 + [380])
	$12 = (PROMOTE float_64)(float_32 (float_32))(((float_32)*([0] + [8220]) * (float_32)(CASTING float_32)(uint_64 *($4 + [8]))) - (CASTING float_32)(uint_32 *(($1 + [294]))))
	$13 = (float_64))($12) - $12)
	$12 = max ( (float_64)$12 , (float_64)(float_64)0 )
	$5 = *($1 + [290])
	if ( ($5 == 0) ){ goto $label$31 }
	$12 = ((float_64)$12 / (float_64)(CASTING float_64)(uint_32 $5))
	
.LABEL $label$31
	$13 = max ( (float_64)$13 , (float_64)(float_64)0 )
	$5 = *(($1 + [292]))
	if ( ($5 == 0) ){ goto $label$32 }
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 $5))
	
.LABEL $label$32
	*($1 + [136]) = *([0] + [8232])
	CALL $69(($1 + [136]), *($4 + [16]), $12, $13)
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	*($1 + [136]) = *([0] + [8232])
	$2 = *([0] + [8255])
	$4 = CALL $172([8524])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$35 }
	*($1 + [32]) = ($4 << [1])
	$5 = (($1 + [32]) | [1])
	if ( $4 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($1 + [32]) = ($6 | [1])
	*($1 + [40]) = $5
	*($1 + [36]) = $4
	
.LABEL $label$34
	CALL memcpy($5, [8524], $4)
	
.LABEL $label$33
	*(($5 + $4)) = [0]
	CALL $5(($1 + [136]), ($2 & [255]), ($1 + [32]))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$36
	$3 = *([0] + [8232])
	*($1 + [136]) = $3
	CALL $17(($1 + [16]), ($1 + [136]), $3, (int_64)7112217537059471008, [1], [8359])
	
.LABEL $label$15
	if ( (*(($1 + [168])) & [1]) ){ goto $label$38 }
	if ( (*($1 + [272]) & [1]) ){ goto $label$37 }
	goto $label$13 
	
.LABEL $label$38
	CALL _ZdlPv(*(($1 + [176])))
	if ( ((*($1 + [272]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$37
	CALL _ZdlPv(*($8 + [8]))
	$2 = *($1 + [320])
	if ( ($2 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	CALL $155(($1 + [32]))
	
.LABEL $label$13
	$2 = *($1 + [320])
	if ( $2 ){ goto $label$11 }
	
.LABEL $label$12
	$2 = *($1 + [360])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$6 = ($1 + [324])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$39 }
	
.LOOP $label$40:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$42
	CALL _ZdlPv($5)
	
.LABEL $label$41
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$40 }
	$4 = *(($1 + [320]))
	*($6) = $2
	CALL _ZdlPv($4)
	$2 = *($1 + [360])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$39
	*($6) = $2
	CALL _ZdlPv($2)
	$2 = *($1 + [360])
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = ($1 + [364])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$44 }
	
.LOOP $label$45:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$46 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$47
	CALL _ZdlPv($5)
	
.LABEL $label$46
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$45 }
	$4 = *(($1 + [360]))
	goto $label$43 
	
.LABEL $label$44
	$4 = $2
	
.LABEL $label$43
	*($6) = $2
	CALL _ZdlPv($4)
	$global$0 = ($1 + [384])
	return 
	
.LABEL $label$9
	$global$0 = ($1 + [384])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	float_64 $6
	int_64 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	$3 = *($3)
	$5 = *($3 + [32])
	*($1 + [32]) = ((float_64)$5 + (float_64)*($1 + [32]))
	$6 = *($1 + [8])
	*($1 + [8]) = ((float_64)$5 + (float_64)$6)
	$5 = *($3 + [40])
	*($1 + [40]) = ((float_64)$5 + (float_64)*($1 + [40]))
	*($1 + [16]) = ((float_64)$5 + (float_64)*($1 + [16]))
	*($4 + [80]) = $6
	$7 = *($1)
	CALL eosio_assert([1], [9017])
	*($4 + [72]) = ($4 + [56])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [88]) = ($4 + [64])
	$3 = ($1 + [8])
	*($4 + [100]) = $3
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	CALL $131(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = *($3)
	if ( (CALL $171(($4 + [80]), ($4 + [96]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-2305843009213693952, ($4 + [88]), $7)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx_double_update($1, $2, ($4 + [96]))
	
.LABEL $label$2
	$global$0 = ($4 + [128])
}

void .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [63]) = $2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	$2 = CALL db_find_i64($4, $4, (int_64)5188146770730811392, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $55(($3 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)($3 + [16])), [9076])
	$4 = *($0)
	*($3 + [8]) = ($3 + [63])
	CALL eosio_assert([1], [8885])
	CALL $65(($3 + [16]), $2, $4, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	$3 = *($3)
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	*($1 + [32]) = *($3 + [32])
	*($1 + [64]) = *($3 + [64])
	$5 = *($1)
	CALL eosio_assert([1], [9017])
	*($4 + [72]) = ($4 + [55])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [32])
	*($4 + [108]) = ($1 + [34])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [64])
	CALL $111(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [55])
	if ( ((uint_64)*($0 + [16]) > (uint_64)$5) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [56]) = $1
	*($3) = (int_64)0
	CALL $132(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $133(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $1 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [144])
	$global$0 = $2
	*(($3 = ($2 + [88]))) = (int_64)0
	*(($4 = ($2 + [80]))) = (int_64)0
	*(($2 + [72])) = (int_64)0
	*(($2 + [64])) = (int_64)0
	*($3) = [0]
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = (int_64)0
	$3 = CALL $172([8560])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*(($2 + [80])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*(($2 + [88])) = $4
	*(($2 + [84])) = $3
	*($2 + [80]) = ($5 | [1])
	
.LABEL $label$3
	CALL memcpy($4, [8560], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	*($2 + [136]) = [0]
	*($2 + [128]) = (int_64)0
	CALL $160(($2 + [128]), [40])
	$6 = *(($1 + [8]))
	$7 = *($1)
	
.LOOP $label$5:
	CALL $163(($2 + [128]), *((((CASTING uint_32)(uint_64 $7) & [15]) + [8592])))
	$6 = (uint_64)$6 >> (uint_64)(int_64)4
	$7 = ((int_64)(uint_64)$7 >> (uint_64)(int_64)4) | (int_64)((int_64)$6 << (int_64)60)
	if ( ((int_64)((int_64)$7) | (int_64)$6)) != (int_64)0) ){ goto $label$5 }
	$3 = ($3 & [1])
	$3 = *($2 + [128])
	$4 = ( *($2 + [132]) ? uint_32($3 >> [1]) : $3 )
	if ( ($4 == 0) ){ goto $label$6 }
	$3 = ( *((($2 + [128]) + [8])) ? (($2 + [128]) | [1]) : $3 )
	$4 = (($3 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = *($3)
	*($3) = *($4)
	*($4) = $5
	$4 = ($4 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$7 }
	
.LABEL $label$6
	$3 = CALL $166(($2 + [128]), [0], [8260])
	$4 = ($3 + [8])
	*((($2 + [112]) + [8])) = *($4)
	*($2 + [112]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [136])))
	
.LABEL $label$8
	if ( ((*(($2 + [80])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [88])))
	
.LABEL $label$9
	$4 = *(($1 + [20]))
	$3 = *($1 + [16])
	$6 = CALL current_time()
	*(($2 + [76])) = (int_64)0
	*(($2 + [92])) = (int_64)0
	*(($2 + [100])) = (int_64)0
	*($2 + [60]) = [0]
	*($2 + [64]) = [0]
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [84 align=4]) = (int_64)0
	*($2 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [132]) = $3
	*($2 + [128]) = $3
	*($2 + [136]) = $4
	CALL $2(($2 + [128]), ($2 + [48]))
	CALL $4(CALL $3(CALL $3(($2 + [128]), ($2 + [72])), ($2 + [84])), ($2 + [96]))
	$9 = (($2 + [48]) + [40])
	$8 = *($2 + [84])
	if ( ((int_32)$8 == (int_32)*($9)) ){ goto $label$10 }
	$10 = (($2 + [32]) | [1])
	$11 = (($2 + [16]) | [1])
	$12 = (($2 + [16]) + [8])
	
.LOOP $label$11:
	$6 = *($8 + [8])
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$15 }
	$4 = [0]
	$5 = *([0] + [8256])
	
.LOOP $label$17:
	*((($2 + [128]) + ($3 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$4 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$16 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$17 }
	
.LABEL $label$16
	*($12) = [0]
	*($2 + [16]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [16]) = ($4 << [1])
	$5 = $11
	goto $label$13 
	
.LABEL $label$15
	*($12) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [16]) = [0]
	$3 = $11
	goto $label$12 
	
.LABEL $label$14
	$1 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($12) = $5
	*($2 + [16]) = ($1 | [1])
	*($2 + [20]) = $4
	
.LABEL $label$13
	$1 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$18:
	*(($5 + $3)) = *((($2 + [128]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$18 }
	$3 = ($5 + $4)
	
.LABEL $label$12
	*($3) = [0]
	$3 = CALL $166(($2 + [16]), [0], [8270])
	$5 = ($3 + [8])
	*(($4 = (($2 + [32]) + [8]))) = *($5)
	*($2 + [32]) = *($3)
	*($3) = (int_64)0
	*($5) = [0]
	$3 = *($2 + [32])
	$5 = ($3 & [1])
	CALL $164(($2 + [112]), ( *($4) ? $10 : $5 ), ( *($2 + [36]) ? uint_32($3 >> [1]) : $5 ))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$19
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$20
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)*($9)) ){ goto $label$11 }
	
.LABEL $label$10
	*($2 + [128]) = *([0] + [8232])
	$3 = CALL $156($2, ($2 + [112]))
	CALL $5(($2 + [128]), *([0] + [8254]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$21
	CALL $6(($2 + [48]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [120]))
	
.LABEL $label$22
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $155($4)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL memory()
	*($3 + [344]) = [8537]
	*($3 + [348]) = CALL $172([8537])
	*($3 + [152]) = *($3 + [344])
	CALL $36(($3 + [272]), ($3 + [152]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [328]) = [8392]
	*($3 + [332]) = CALL $172([8392])
	*($3 + [144]) = *($3 + [328])
	CALL $36(($3 + [336]), ($3 + [144]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [1]
	*($3 + [136]) = *($3 + [320])
	CALL $90($0, (int_64)6138663591592764928, ($3 + [136]))
	
.LABEL $label$1
	*($3 + [312]) = [8546]
	*($3 + [316]) = CALL $172([8546])
	*($3 + [128]) = *($3 + [312])
	CALL $36(($3 + [272]), ($3 + [128]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$2 }
	*($3 + [304]) = [8552]
	*($3 + [308]) = CALL $172([8552])
	*($3 + [120]) = *($3 + [304])
	CALL $36(($3 + [336]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$2 }
	CALL $91(($3 + [272]))
	CALL $1($2, ($3 + [272]))
	$4 = *($3 + [288])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($3 + [292])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 > (int_64)4923678490122780671) ){ goto $label$16 }
	if ( ((int_64)$2 <= (int_64)3671185347225583615) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)4520488125973135359) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)3671185347225583616) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)4148111386213351424) ){ goto $label$3 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [104]) = *($3 + [168])
	CALL $92($1, $1, ($3 + [104]))
	goto $label$3 
	
.LABEL $label$16
	if ( ((int_64)$2 <= (int_64)5606348217378668543) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)7112217537059471007) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5606348217378668544) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)7112127545683459744) ){ goto $label$3 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [96]) = *($3 + [176])
	CALL $92($1, $1, ($3 + [96]))
	goto $label$3 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-5882504856345772032) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4149697620714979328) ){ goto $label$3 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [4]
	*($3 + [40]) = *($3 + [232])
	CALL $92($1, $1, ($3 + [40]))
	goto $label$3 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4923678927278486016) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)4923678979004214784) ){ goto $label$3 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [5]
	*($3 + [72]) = *($3 + [200])
	CALL $92($1, $1, ($3 + [72]))
	goto $label$3 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$3 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [6]
	*($3 + [8]) = *($3 + [264])
	CALL $93($1, $1, ($3 + [8]))
	goto $label$3 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)7112217537059471008) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$3 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [7]
	*($3 + [16]) = *($3 + [256])
	CALL $94($1, $1, ($3 + [16]))
	goto $label$3 
	
.LABEL $label$11
	*($3 + [220]) = [0]
	*($3 + [216]) = [8]
	*($3 + [56]) = *($3 + [216])
	CALL $95($1, $1, ($3 + [56]))
	goto $label$3 
	
.LABEL $label$10
	*($3 + [244]) = [0]
	*($3 + [240]) = [9]
	*($3 + [32]) = *($3 + [240])
	CALL $92($1, $1, ($3 + [32]))
	goto $label$3 
	
.LABEL $label$9
	*($3 + [196]) = [0]
	*($3 + [192]) = [10]
	*($3 + [80]) = *($3 + [192])
	CALL $92($1, $1, ($3 + [80]))
	goto $label$3 
	
.LABEL $label$8
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [48]) = *($3 + [224])
	CALL $92($1, $1, ($3 + [48]))
	goto $label$3 
	
.LABEL $label$7
	*($3 + [252]) = [0]
	*($3 + [248]) = [12]
	*($3 + [24]) = *($3 + [248])
	CALL $96($1, $1, ($3 + [24]))
	goto $label$3 
	
.LABEL $label$6
	*($3 + [212]) = [0]
	*($3 + [208]) = [13]
	*($3 + [64]) = *($3 + [208])
	CALL $92($1, $1, ($3 + [64]))
	goto $label$3 
	
.LABEL $label$5
	*($3 + [164]) = [0]
	*($3 + [160]) = [14]
	*($3 + [112]) = *($3 + [160])
	CALL $96($1, $1, ($3 + [112]))
	goto $label$3 
	
.LABEL $label$4
	*($3 + [188]) = [0]
	*($3 + [184]) = [15]
	*($3 + [88]) = *($3 + [184])
	CALL $92($1, $1, ($3 + [88]))
	
.LABEL $label$3
	CALL $170([0])
	$global$0 = ($3 + [352])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9286])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9286])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8646911284551352320, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$6 = *(($1 + [44]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8646911284551352319, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [16])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8613])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8613])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [8613])
	CALL memcpy(($5 + [16]), ($2 + [16]), [1])
	*($3 + [36]) = ($2 + [17])
	CALL $108(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($5 + [40 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $105(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [28]) = $0
	*($5 + [8]) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $123(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = [-1]
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $120(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9286])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = (*($1) & [65535])
	if ( ((int_32)$6 == (int_32)*(*(($5 + [-24])))) ){ goto $label$3 }
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$3 = ($5 + [-48])
	$5 = ($5 + [-24])
	if ( ((int_32)$6 != (int_32)*(*($3))) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9286])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$6 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $6
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$6 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*([0] + [8232]))
	$1 = ($1 + [-1])
	if ( ((uint_32)$1 > (uint_32)[6]) ){ goto $label$9 }
	goto $label$18 
	
.LABEL $label$18
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *([0] + [8232])
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)4611686018427387904, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$19 }
	$4 = CALL $14($2, $1)
	
.LOOP $label$20:
	CALL eosio_assert([1], [9127])
	CALL eosio_assert([1], [9161])
	$1 = [0]
	$5 = CALL db_next_i64(*($4 + [84]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$21 }
	$1 = CALL $14($2, $5)
	
.LABEL $label$21
	CALL $83($2, $4)
	$4 = $1
	if ( $1 ){ goto $label$20 }
	
.LABEL $label$19
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($2 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$22:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$22 }
	$1 = *(($2 + [24]))
	goto $label$10 
	
.LABEL $label$17
	CALL $78($2)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$16
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *([0] + [8232])
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)5188146770730811392, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$24 }
	$4 = CALL $55($2, $1)
	
.LOOP $label$25:
	CALL eosio_assert([1], [9127])
	CALL eosio_assert([1], [9161])
	$1 = [0]
	$5 = CALL db_next_i64(*($4 + [92]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	$1 = CALL $55($2, $5)
	
.LABEL $label$26
	CALL $84($2, $4)
	$4 = $1
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($2 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$27:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$29
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$27 }
	$1 = *(($2 + [24]))
	goto $label$7 
	
.LABEL $label$15
	CALL $80($2)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$14
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [36]) = [0]
	$3 = *([0] + [8232])
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)-5188146770730811392, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$30 }
	$4 = CALL $85($2, $1)
	
.LOOP $label$31:
	CALL eosio_assert([1], [9127])
	CALL eosio_assert([1], [9161])
	$1 = [0]
	$5 = CALL db_next_i64(*($4 + [32]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$32 }
	$1 = CALL $85($2, $5)
	
.LABEL $label$32
	CALL $34($2, $4)
	$4 = $1
	if ( $1 ){ goto $label$31 }
	
.LABEL $label$30
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($2 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$33:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$34 }
	CALL _ZdlPv($4)
	
.LABEL $label$34
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$33 }
	$1 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$13
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [36]) = [0]
	$3 = *([0] + [8232])
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)-8646911284551352320, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$35 }
	$4 = CALL $86($2, $1)
	
.LOOP $label$36:
	CALL eosio_assert([1], [9127])
	CALL eosio_assert([1], [9161])
	$1 = [0]
	$5 = CALL db_next_i64(*($4 + [36]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$37 }
	$1 = CALL $86($2, $5)
	
.LABEL $label$37
	CALL $87($2, $4)
	$4 = $1
	if ( $1 ){ goto $label$36 }
	
.LABEL $label$35
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($2 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$38:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$39 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$40
	CALL _ZdlPv($4)
	
.LABEL $label$39
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$38 }
	$1 = *(($2 + [24]))
	goto $label$3 
	
.LABEL $label$12
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *([0] + [8232])
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)3458764513820540928, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$41 }
	$4 = CALL $46($2, $1)
	
.LOOP $label$42:
	CALL eosio_assert([1], [9127])
	CALL eosio_assert([1], [9161])
	$1 = [0]
	$5 = CALL db_next_i64(*($4 + [24]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$43 }
	$1 = CALL $46($2, $5)
	
.LABEL $label$43
	CALL $88($2, $4)
	$4 = $1
	if ( $1 ){ goto $label$42 }
	
.LABEL $label$41
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($2 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$44:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$46
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$44 }
	$1 = *(($2 + [24]))
	goto $label$1 
	
.LABEL $label$11
	$1 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$8
	$1 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($1)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($1)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$4
	$1 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($1)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$1 = $5
	
.LABEL $label$1
	*($6) = $5
	CALL _ZdlPv($1)
	$global$0 = ($2 + [48])
	$1
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9286])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [60]))
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-2305843009213693952, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx_double_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*([0] + [8232]))
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	*($1 + [52]) = [0]
	$2 = *([0] + [8232])
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-2305843009213693952, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $50(($1 + [16]), $3)
	if ( (*([0] + [8248]) == 0) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$3:
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9127])
	CALL eosio_assert($5, [9161])
	$5 = [0]
	$6 = CALL db_next_i64(*($3 + [60]), ($1 + [56]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $50(($1 + [16]), $6)
	
.LABEL $label$4
	CALL $81(($1 + [16]), $3)
	if ( ($5 == 0) ){ goto $label$5 }
	$3 = $5
	$4 = ($4 + [1])
	if ( (($4 & [65535]) <= (*([0] + [8248]) & [65535])) ){ goto $label$3 }
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = *([0] + [8232])
	*($1 + [56]) = $2
	CALL $17($1, ($1 + [56]), $2, (int_64)4923678979004214784, [1], [8359])
	
.LABEL $label$1
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = ($1 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($1 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $4
	
.LABEL $label$7
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$global$0 = ($1 + [64])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $178($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8879])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8879])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8879])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $110(CALL $109($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8879])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8879])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8879])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8879])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8879])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8879])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $175($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9656])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $175($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8879])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8879])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $110($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $108(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8613])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $168(($0 + [16]))
	
.LABEL $label$1
	CALL $168(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [208])
	$global$0 = $1
	CALL $12(($1 + [200]), $1)
	*($1 + [96]) = *([0] + [8232])
	CALL $73(($1 + [96]), *([0] + [8192]))
	*(($1 + [192])) = [0]
	*($1 + [184]) = (int_64)0
	$2 = CALL $172([8532])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*($1 + [184]) = ($2 << [1])
	$3 = (($1 + [184]) | [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [184]) = ($4 | [1])
	*($1 + [192]) = $3
	*($1 + [188]) = $2
	
.LABEL $label$6
	CALL memcpy($3, [8532], $2)
	
.LABEL $label$5
	*(($3 + $2)) = [0]
	$2 = *($1 + [204])
	*($1 + [96]) = *($2 + [16])
	*($1 + [104]) = *($2 + [24])
	*($1 + [112]) = *($2 + [8])
	$2 = CALL $156((($1 + [96]) + [24]), ($1 + [184]))
	*($1 + [144]) = [0]
	*($1 + [136]) = (int_64)0
	*($1 + [152]) = (int_64)0
	*($1 + [160]) = [0]
	*($1 + [168]) = (int_64)4607182418800017408
	*($1 + [176]) = [0]
	*($1 + [180]) = [0]
	*(($1 + [8])) = *($1 + [104])
	*(($1 + [16])) = *($1 + [112])
	*($1 + [88]) = *([0] + [8232])
	*($1) = *($1 + [96])
	$3 = CALL $156(($1 + [24]), $2)
	*(($1 + [77])) = *((($1 + [96]) + [77]))
	*(($1 + [72])) = *($1 + [168])
	*(($1 + [64])) = *($1 + [160])
	*(($1 + [56])) = *($1 + [152])
	*(($1 + [48])) = *($1 + [144])
	*($1 + [40]) = *($1 + [136])
	CALL $74(($1 + [88]), $1)
	if ( (*($3) & [1]) ){ goto $label$9 }
	CALL $66($1)
	if ( (*($2) & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [32])))
	CALL $66($1)
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($1 + [128])))
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $155(($1 + [184]))
	
.LABEL $label$3
	if ( (*($1 + [184]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($1 + [208])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($1 + [192]))
	$global$0 = ($1 + [208])
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)4611686018427387904, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($2 + [8])), [9076])
	$3 = *($0)
	CALL eosio_assert([1], [8885])
	CALL $75(($2 + [8]), $4, $3, $2)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	$3 = *($3)
	*($1 + [48]) = *($3 + [48])
	*($1 + [64]) = *($3 + [64])
	*($1 + [80]) = *($3 + [80])
	$6 = *($1)
	CALL eosio_assert([1], [9017])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [57])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	$9 = ($1 + [82])
	$10 = ($1 + [80])
	$11 = ($1 + [64])
	$12 = ($1 + [48])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $175($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [52]) = $12
	*($5 + [60]) = $11
	*($5 + [68]) = $10
	*($5 + [72]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [48]) = ($1 + [40])
	*($5 + [56]) = ($1 + [56])
	*($5 + [64]) = ($1 + [72])
	*($5 + [76]) = ($1 + [84])
	CALL $136(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [80])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*($1 + [40]) = *(*($3))
	*($1 + [56]) = *(*($3 + [4]))
	$6 = *($1)
	CALL eosio_assert([1], [9017])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [57])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	$9 = ($1 + [56])
	$10 = ($1 + [40])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $175($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [48]) = $10
	*($5 + [56]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [52]) = ($1 + [48])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [80])
	*($5 + [72]) = ($1 + [82])
	*($5 + [76]) = ($1 + [84])
	CALL $136(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [80])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([104])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [88]) = $1
	CALL $137(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $138(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $77 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth(*([0] + [8232]))
	$5 = *([0] + [8208])
	$6 = *([0] + [8200])
	$7 = *([0] + [8192])
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$1 }
	$1 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)(CASTING uint_64)(uint_32 $2)) & (int_64)4294967295)
	
.LABEL $label$1
	*(($4 + [124])) = *(($4 + [180]))
	*(($4 + [132])) = *(($4 + [188]))
	*(($4 + [140])) = *(($4 + [196]))
	*(($4 + [148])) = *(($4 + [204]))
	*(($4 + [156])) = *(($4 + [212]))
	*($4 + [80]) = $7
	*($4 + [88]) = $6
	*($4 + [96]) = $5
	*($4 + [104]) = $1
	*($4 + [112]) = $2
	*($4 + [114]) = $3
	*($4 + [160]) = *([0] + [8232])
	*($4 + [82 align=2]) = *($4 + [218 align=2])
	*($4 + [116 align=4]) = *($4 + [172 align=4])
	*($4 + [86]) = *(($4 + [222]))
	$4 = CALL memcpy($4, ($4 + [80]), [80])
	CALL $59(($4 + [160]), $4)
	$global$0 = ($4 + [224])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = [0]
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$4 = *($0)
	*($2 + [24]) = $4
	*($2 + [32]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)5188146770730811392, *($1))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $55(($2 + [24]), $5) + [88]) == (int_32)($2 + [24])), [9076])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [9573])
	$4 = *($0)
	*($2 + [16]) = $1
	CALL $76(($2 + [8]), ($2 + [24]), $4, ($2 + [16]))
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($2 + [52])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($0 + [32])))
	
.LABEL $label$8
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($2 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	*($1 + [64]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [9017])
	*($4 + [72]) = ($4 + [55])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [32])
	*($4 + [108]) = ($1 + [34])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [64])
	CALL $111(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [55])
	if ( ((uint_64)*($0 + [16]) > (uint_64)$5) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*([0] + [8232]))
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	*($1 + [52]) = [0]
	$2 = *([0] + [8232])
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4035225266123964416, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $79(($1 + [16]), $3)
	if ( (*([0] + [8248]) == 0) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$3:
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9127])
	CALL eosio_assert($5, [9161])
	$5 = [0]
	$6 = CALL db_next_i64(*($3 + [56]), ($1 + [56]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $79(($1 + [16]), $6)
	
.LABEL $label$4
	CALL $26(($1 + [16]), $3)
	if ( ($5 == 0) ){ goto $label$5 }
	$3 = $5
	$4 = ($4 + [1])
	if ( (($4 & [65535]) <= (*([0] + [8248]) & [65535])) ){ goto $label$3 }
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = *([0] + [8232])
	*($1 + [56]) = $2
	CALL $17($1, ($1 + [56]), $2, (int_64)4923678927278486016, [1], [8359])
	
.LABEL $label$1
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = ($1 + [44])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$11
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$9 }
	$3 = *(($1 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $4
	
.LABEL $label$7
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$global$0 = ($1 + [64])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [36])
	*($3 + [60]) = ($5 + [48])
	CALL $115(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($5 + [60 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $125(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$10
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $156(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $156(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $168($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $94 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8613])
	CALL memcpy(($4 + [32]), $2, [8])
	$3 = ($7 & [-2])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8613])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [2])
	CALL eosio_assert(((int_32)$3 != (int_32)[10]), [8613])
	CALL memcpy((($4 + [32]) + [10]), ($2 + [10]), [2])
	*(($4 + [20])) = ($2 + [12])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [42])
	$9 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($9 & [65535])), (int_32 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $95 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8613])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-2]) != (int_32)[8]), [8613])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [2])
	*(($4 + [20])) = ($2 + [10])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $96 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[1]), [8613])
	CALL memcpy(($4 + [40]), $2, [2])
	*(($4 + [28])) = ($2 + [2])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8613])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $108(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $90 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $97(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $98(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $175($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($2 + [8]) = ($1 + $3)
	*($2) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[15]), [8613])
	CALL memcpy($0, $1, [16])
	*($2 + [4]) = ($1 + [16])
	CALL $100($2, ($0 + [16]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $92 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $178($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $93 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8613])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $178($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [8613])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8613])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	*($1 + [32]) = *($3 + [32])
	*($1 + [40]) = *($3 + [40])
	*($1 + [48]) = *($3 + [48])
	$3 = *($0)
	*($2 + [64]) = ($2 + [56])
	*($2 + [60]) = $2
	*($2 + [56]) = $2
	*($2 + [72]) = ($2 + [56])
	$4 = ($1 + [8])
	*($2 + [84]) = $4
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + [16])
	*($2 + [92]) = ($1 + [24])
	*($2 + [96]) = ($1 + [32])
	*($2 + [100]) = ($1 + [40])
	*($2 + [104]) = ($1 + [48])
	CALL $131(($2 + [80]), ($2 + [72]))
	$5 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($3 + [8]), (int_64)-2305843009213693952, *(*($0 + [8])), $5, $2, [56])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [80]) = *($4)
	*($1 + [64]) = CALL db_idx_double_store($5, (int_64)-2305843009213693952, $6, $7, ($2 + [80]))
	$global$0 = ($2 + [112])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($0 + [80]) = $1
	*($0 + [64]) = [0]
	$1 = *(*($2 + [4]))
	*($0) = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [16])
	*($0 + [24]) = *($1 + [24])
	*($0 + [32]) = *($1 + [32])
	$1 = *($2)
	*($3 + [72]) = ($3 + [55])
	*($3 + [68]) = $3
	*($3 + [64]) = $3
	*($3 + [80]) = ($3 + [64])
	*($3 + [92]) = ($0 + [8])
	*($3 + [88]) = $0
	*($3 + [96]) = ($0 + [16])
	*($3 + [100]) = ($0 + [24])
	*($3 + [104]) = ($0 + [32])
	*($3 + [108]) = ($0 + [34])
	*($3 + [112]) = ($0 + [40])
	*($3 + [116]) = ($0 + [48])
	*($3 + [120]) = ($0 + [64])
	CALL $111(($3 + [88]), ($3 + [80]))
	$4 = *($0)
	*($0 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)4611686018427387904, *(*($2 + [8])), $4, $3, [55])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [128])
	return $0
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $51(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [8879])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	$7 = ($1 + [24])
	CALL $158($7, ($5 + [24]))
	*($1 + [82]) = [0]
	*($1 + [84]) = [0]
	$5 = *($4)
	*($1 + [40]) = *($5 + [40])
	*($1 + [48]) = *($5 + [48])
	*($1 + [56]) = *($5 + [56])
	*($1 + [64]) = *($5 + [64])
	*($1 + [72]) = *($5 + [72])
	*($1 + [80]) = *($5 + [80])
	$5 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [57])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [84])
	$9 = ($1 + [82])
	$10 = ($1 + [80])
	$11 = ($1 + [72])
	$12 = ($1 + [64])
	$13 = ($1 + [56])
	$14 = ($1 + [48])
	$15 = ($1 + [40])
	$16 = ($1 + [16])
	$17 = ($1 + [8])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $17
	*($3 + [32]) = $1
	*($3 + [40]) = $16
	*($3 + [44]) = $7
	*($3 + [48]) = $15
	*($3 + [52]) = $14
	*($3 + [56]) = $13
	*($3 + [60]) = $12
	*($3 + [64]) = $11
	*($3 + [68]) = $10
	*($3 + [72]) = $9
	*($3 + [76]) = $4
	CALL $136(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($6 + [8]), (int_64)5188146770730811392, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($2)
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [80])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $158($6, *($4 + [4]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8879])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $51($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)3458764513820540928, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $178($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	$6 = *($4 + [4])
	*($3 + [24]) = *($6 + [8])
	*($3 + [16]) = *($6 + [16])
	if ( (CALL $171(*($4 + [8]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx128_find_primary(*($5), *($5 + [8]), (int_64)-4035225266123964416, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [60]) = $6
	
.LABEL $label$2
	CALL db_idx128_update($6, *(*($4 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [16]) = *(*($4 + [4]) + [48])
	if ( (CALL $171((*($4 + [8]) + [16]), ($3 + [16]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [64]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-4035225266123964415, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [64])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [16]))
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $8 (int_32 $0)
{
	CALL require_auth(*([0] + [8232]))
	CALL printui(((int_64)((uint_64)CALL $fimport$1() / (uint_64)(int_64)1000000) & (int_64)4294967295))
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*([0] + [8232]))
	$3 = (int_64)0
	$1 = ($1 + [-1010])
	if ( ((uint_32)($1 & [65535]) > (uint_32)[6]) ){ goto $label$1 }
	$3 = *(((int_32(($1 << [16]) >> [16]) << [3]) + [9600]))
	
.LABEL $label$1
	*($2 + [16]) = $3
	$3 = *([0] + [8232])
	*($2 + [8]) = $3
	*(($1 = CALL _Znwj([16]))) = $3
	*($1 + [8]) = (int_64)3617214756542218240
	*(($2 + [44])) = [0]
	$4 = ($1 + [16])
	*(($2 + [32])) = $4
	*(($2 + [28])) = $4
	*($2 + [24]) = $1
	*($2 + [36 align=4]) = (int_64)0
	CALL $10(($2 + [36]), [4])
	$4 = *(($2 + [40]))
	$1 = *($2 + [36])
	*($2 + [48]) = [3]
	$4 = ($4 - $1)
	CALL eosio_assert(((int_32)$4 > (int_32)[0]), [8879])
	CALL memcpy($1, ($2 + [48]), [1])
	CALL eosio_assert(((int_32)($4 + [-1]) > (int_32)[2]), [8879])
	CALL memcpy(($1 + [1]), [8359], [3])
	CALL $11(($2 + [48]), ($2 + [8]))
	$1 = *($2 + [48])
	CALL send_inline($1, (*($2 + [52]) - $1))
	$1 = *($2 + [48])
	if ( ($1 == 0) ){ goto $label$2 }
	*($2 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($2 + [36])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($2 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($2 + [24])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($2 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [64])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [8613])
	CALL memcpy($3, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($0 + [4]), $3, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [32]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8808])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5188146770730811392)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8754])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8754])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $85(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8613])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8613])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8613])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [8609])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [8613])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [8609])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-4035225266123964416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $79($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $127(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8702])
	*($1) = *(($3 + [16]))
	$3 = *($0 + [4])
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	CALL $158(($1 + [24]), ($3 + [24]))
	CALL $161(($1 + [36]), [8447])
	*($1 + [48]) = [0]
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $126(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [25])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [36])
	$8 = ( *(($1 + [40])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$5 = ($8 + $5)
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [36])
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL $175($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $6
	*($3 + [48]) = $8
	*($3 + [52]) = ($1 + [48])
	CALL $117(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-4035225266123964416, *(*($0 + [8])), $7, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = ($4 + [8])
	$7 = *($5)
	$2 = *(($0 + [8]))
	$9 = *($2)
	$10 = *($1)
	*($3 + [40]) = *($1 + [8])
	*($3 + [32]) = *(($1 + [16]))
	*($1 + [60]) = CALL db_idx128_store($7, (int_64)-4035225266123964416, $9, $10, ($3 + [32]))
	$7 = *($2)
	$9 = *($5)
	$10 = *($1)
	*($3 + [32]) = *(($1 + [48]))
	*(($1 + [64])) = CALL db_idx64_store($9, (int_64)-4035225266123964415, $7, $10, ($3 + [32]))
	$global$0 = ($3 + [64])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [34])
	*($3 + [64]) = ($5 + [40])
	*($3 + [68]) = ($5 + [48])
	*($3 + [72]) = ($5 + [64])
	CALL $139(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $135(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $12(($1 + [8]), $1)
	CALL cancel_deferred((*($1 + [12]) + [48]))
	$global$0 = ($1 + [16])
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL $12(($1 + [24]), $1)
	$2 = CALL current_time()
	$3 = *(*($1 + [28]) + [24])
	$4 = *([0] + [8232])
	*($1 + [16]) = $4
	CALL $17($1, ($1 + [16]), $4, (int_64)5606348217378668544, ((CASTING uint_32)(uint_64 (int_64))($3 - ((uint_64)$2 / (uint_64)(int_64)1000000))) & [65535]), [8359])
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($1 + [16]) = *([0] + [8232])
	CALL $18(($1 + [16]), *([0] + [8192]), $3, $2)
	$global$0 = ($1 + [32])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [176])
	$global$0 = $6
	*($6 + [128]) = $3
	$7 = *([0] + [8232])
	*($6 + [120]) = $7
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = (int_64)3617214756542218240
	*((($6 + [120]) + [36])) = [0]
	$9 = ($8 + [16])
	*(($6 + [144])) = $9
	*(($6 + [140])) = $9
	*($6 + [136]) = $8
	*($6 + [148 align=4]) = (int_64)0
	CALL $10((($6 + [120]) + [28]), [4])
	$9 = *(($6 + [152]))
	$8 = *($6 + [148])
	*($6 + [56]) = [3]
	$9 = ($9 - $8)
	CALL eosio_assert(((int_32)$9 > (int_32)[0]), [8879])
	CALL memcpy($8, ($6 + [56]), [1])
	CALL eosio_assert(((int_32)($9 + [-1]) > (int_32)[2]), [8879])
	CALL memcpy(($8 + [1]), $5, [3])
	$7 = CALL current_time()
	*((($6 + [56]) + [28])) = (int_64)0
	*(($6 + [100])) = (int_64)0
	*(($6 + [108])) = (int_64)0
	*($6 + [68]) = [0]
	*($6 + [72]) = [0]
	*($6 + [76 align=4]) = (int_64)0
	*($6 + [92 align=4]) = (int_64)0
	*($6 + [56]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$8 = CALL tapos_block_num()
	$2 = ((int_64)((int_64)$2 << (int_64)32) | (int_64)$3)
	*($6 + [40]) = ((int_64)((int_64)$2 & (int_64)-4294967296) | (int_64)(uint_64)$2 >> (uint_64)(int_64)32))
	*($6 + [32]) = ((int_64)((int_64)$2 << (int_64)32) | (int_64)(CASTING int_64)(int_32 $8))
	CALL $19((($6 + [56]) + [36]), ($6 + [120]))
	*($6 + [76]) = $4
	$2 = *([0] + [8232])
	CALL $20(($6 + [160]), ($6 + [56]))
	$8 = *($6 + [160])
	CALL send_deferred(($6 + [32]), $2, $8, (*($6 + [164]) - $8), [0])
	$8 = *($6 + [160])
	if ( ($8 == 0) ){ goto $label$1 }
	*($6 + [164]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	if ( ((int_64)$3 == (int_64)7112127545683459744) ){ goto $label$11 }
	if ( ((int_64)$3 != (int_64)7112217537059471008) ){ goto $label$4 }
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	*($6 + [160]) = *([0] + [8232])
	$8 = CALL $172([9586])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($6 + [16]) = ($8 << [1])
	$4 = (($6 + [16]) | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	*($6 + [160]) = *([0] + [8232])
	$8 = CALL $172([9588])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$7 }
	*($6) = ($8 << [1])
	$4 = ($6 | [1])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	$5 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($6 + [16]) = ($5 | [1])
	*($6 + [24]) = $4
	*($6 + [20]) = $8
	
.LABEL $label$9
	CALL memcpy($4, [9586], $8)
	
.LABEL $label$8
	*(($4 + $8)) = [0]
	CALL $5(($6 + [160]), [100], ($6 + [16]))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($6 + [24]))
	goto $label$4 
	
.LABEL $label$7
	$5 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($6) = ($5 | [1])
	*($6 + [8]) = $4
	*($6 + [4]) = $8
	
.LABEL $label$6
	CALL memcpy($4, [9588], $8)
	
.LABEL $label$5
	*(($4 + $8)) = [0]
	CALL $5(($6 + [160]), [100], $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$4
	$3 = *($6 + [40])
	$2 = *($6 + [32])
	CALL $6(($6 + [56]))
	$8 = *($6 + [148])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($6 + [152])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$8 = *($6 + [136])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($6 + [140])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	*($0) = $2
	*($0 + [8]) = $3
	$global$0 = ($6 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $155(($6 + [16]))
	
.LABEL $label$2
	CALL $155($6)
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $168($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8879])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8879])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $110(CALL $109($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*([0] + [8232]))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *([0] + [8232])
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	CALL $13($0, ($2 + [8]), *([0] + [8192]))
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [8362])
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$1), [9076])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4611686018427387904, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $14($1, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$1), [9076])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $3
	*($4 + [48]) = $2
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$2 = *($0)
	*($4 + [8]) = $2
	*($4 + [16]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)4611686018427387904, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $14(($4 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($4 + [8])), [9076])
	$2 = *($0)
	*($4) = ($4 + [48])
	CALL eosio_assert([1], [8885])
	CALL $21(($4 + [8]), $5, $2, $4)
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $142($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)4035225266123964416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $114($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $118(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8702])
	*($1) = *(($3 + [16]))
	$3 = *($0 + [4])
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	CALL $158(($1 + [24]), ($3 + [24]))
	CALL $158(($1 + [36]), (*($0 + [4]) + [36]))
	*($1 + [48]) = *(*($0 + [4]) + [48])
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $51(*($1), *($0 + [12]))
	CALL $51(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [8879])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8856])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [36])
	*($3 + [60]) = ($5 + [48])
	CALL $115(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($5 + [60 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $113(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$10
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $108(*($1), *($0 + [12]))
	CALL $108(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8613])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $116(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [25])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [36])
	$8 = ( *(($1 + [40])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$5 = ($8 + $5)
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [36])
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL $175($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $6
	*($3 + [48]) = $8
	*($3 + [52]) = ($1 + [48])
	CALL $117(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)4035225266123964416, *(*($0 + [8])), $7, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = ($4 + [8])
	$7 = *($5)
	$2 = *(($0 + [8]))
	$9 = *($2)
	$10 = *($1)
	*($3 + [40]) = *($1 + [8])
	*($3 + [32]) = *(($1 + [16]))
	*($1 + [60]) = CALL db_idx128_store($7, (int_64)4035225266123964416, $9, $10, ($3 + [32]))
	$7 = *($2)
	$9 = *($5)
	$10 = *($1)
	*($3 + [32]) = *(($1 + [48]))
	*(($1 + [64])) = CALL db_idx64_store($9, (int_64)4035225266123964417, $7, $10, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8879])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8879])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8879])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8879])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [8879])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [8879])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8808])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4035225266123964416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8754])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8754])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $114(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5188146770730811392, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $85($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $121(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8702])
	*($1) = *(($6 + [16]))
	$6 = *($5 + [4])
	*($1 + [8]) = *($6 + [8])
	*($1 + [24]) = *($6 + [24])
	*($1 + [16]) = *(*($5 + [8]))
	$2 = $2
	$6 = ($2 + [-32])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($2 + [-6])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	*($3 + [44]) = ($1 + [24])
	CALL $122(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($4 + [8]), (int_64)-5188146770730811392, *(*($0 + [8])), $7, $6, [26])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$7 = *(($4 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [32]) = *($2)
	*($1 + [36]) = CALL db_idx64_store($7, (int_64)-5188146770730811392, $9, $10, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*([0] + [8232]))
	*(($3 + [62])) = *(($3 + [78]))
	*(($3 + [8])) = $1
	*(($3 + [16])) = (int_64)0
	*($3 + [56]) = $2
	*($3 + [58 align=2]) = *($3 + [74 align=2])
	*(($3 + [24])) = *($3 + [56])
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	*($3 + [48]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [64]) = *([0] + [8232])
	CALL $30(($3 + [64]), $3)
	$global$0 = ($3 + [80])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [52]) = $1
	CALL $112(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $113(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$4
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8966])
	$3 = *($3)
	$5 = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	*($1 + [48]) = $5
	$3 = *($1)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$3 == (int_32)*($1)), [9017])
	*($4 + [72]) = ($4 + [55])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [32])
	*($4 + [108]) = ($1 + [34])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [64])
	CALL $111(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [55])
	$2 = (CASTING uint_64)(uint_32 $3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$2) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $143($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $10($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $144($2, $1)
	CALL $146(CALL $145(CALL $145($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4035225266123964415, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [52])) == (int_32)$7), [9076])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $79($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-4035225266123964416, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9076])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$1 = ($global$0 - [272])
	$global$0 = $1
	CALL require_auth(*([0] + [8232]))
	*((($1 + [232]) + [32])) = [0]
	*($1 + [248]) = (int_64)-1
	*($1 + [256]) = (int_64)0
	*($1 + [268]) = [0]
	$2 = *([0] + [8232])
	*($1 + [232]) = $2
	*($1 + [240]) = $2
	*($1 + [224]) = ($1 + [232])
	*($1 + [160]) = (int_64)1
	CALL $23(($1 + [216]), ($1 + [224]), ($1 + [160]))
	*(($3 = (($1 + [160]) + [32]))) = (int_64)0
	*(($4 = ($1 + [200]))) = (int_64)0
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = (int_64)0
	$2 = *([0] + [8232])
	*($1 + [152]) = $2
	$5 = *($1 + [220])
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = (($1 + [40]) + [36])
	$7 = (($1 + [40]) + [24])
	$8 = (($1 + [160]) + [36])
	$9 = (($1 + [160]) + [24])
	$10 = (($1 + [96]) + [36])
	$11 = (($1 + [96]) + [24])
	$12 = (($1 + [96]) + [48])
	$13 = (($1 + [96]) + [32])
	$14 = (($1 + [96]) + [44])
	$15 = ($1 + [188])
	$16 = [0]
	
.LOOP $label$8:
	if ( ((int_32)*($5 + [48]) != (int_32)[1]) ){ goto $label$6 }
	if ( ((uint_32)($16 & [65535]) > (uint_32)(*([0] + [8252]) & [65535])) ){ goto $label$6 }
	*(($17 = (($1 + [96]) + [8]))) = *($5 + [8])
	*(($18 = (($1 + [96]) + [16]))) = *($5 + [16])
	*($1 + [96]) = (int_64)0
	CALL $156($11, ($5 + [24]))
	CALL $156($10, (*($1 + [220]) + [36]))
	*(($5 = (($1 + [160]) + [8]))) = *($17)
	*(($17 = (($1 + [160]) + [16]))) = *($18)
	*($12) = *(*($1 + [220]) + [48])
	*($1 + [160]) = *($1 + [96])
	if ( (*($9) & [1]) ){ goto $label$10 }
	*($9) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*($3)) = [0]
	*($15) = [0]
	
.LABEL $label$9
	CALL $160($9, [0])
	*(($9 + [8])) = *(($11 + [8]))
	*($9) = *($11)
	*($11) = (int_64)0
	*($13) = [0]
	if ( (*($8) & [1]) ){ goto $label$12 }
	*($8) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*((($1 + [160]) + [44]))) = [0]
	*($4) = [0]
	
.LABEL $label$11
	CALL $160($8, [0])
	*(($8 + [8])) = *(($10 + [8]))
	*($8) = *($10)
	*($10) = (int_64)0
	*($14) = [0]
	*(($18 = (($1 + [160]) + [48]))) = *($12)
	if ( ((*($11) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$13
	*((($1 + [40]) + [16])) = *($17)
	*((($1 + [40]) + [8])) = *($5)
	*($1 + [40]) = *($1 + [160])
	CALL $156($7, $9)
	CALL $156($6, $8)
	*((($1 + [40]) + [48])) = *($18)
	CALL $24(($1 + [152]), ($1 + [40]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*((($1 + [40]) + [44])))
	
.LABEL $label$14
	if ( ((*($7) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*((($1 + [40]) + [32])))
	
.LABEL $label$15
	$2 = *($1 + [216])
	*($1 + [96]) = $2
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [9127])
	CALL $25(($1 + [96]))
	CALL $26(*($1 + [224]), $5)
	$2 = *($1 + [96])
	*($1 + [216]) = $2
	$16 = ($16 + [1])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( $5) ){ goto $label$8 }
	$2 = *([0] + [8232])
	
.LABEL $label$7
	*(($1 + [32])) = [0]
	*($1 + [96]) = $2
	*($1 + [24]) = (int_64)0
	$5 = *([0] + [8255])
	$8 = CALL $172([8384])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$18 }
	*($1 + [24]) = ($8 << [1])
	$9 = (($1 + [24]) | [1])
	if ( $8 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$11 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($1 + [24]) = ($11 | [1])
	*($1 + [32]) = $9
	*($1 + [28]) = $8
	
.LABEL $label$17
	CALL memcpy($9, [8384], $8)
	
.LABEL $label$16
	*(($9 + $8)) = [0]
	CALL $5(($1 + [96]), ($5 & [255]), ($1 + [24]))
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($1 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$2 = *([0] + [8232])
	*($1 + [96]) = $2
	CALL $17(($1 + [8]), ($1 + [96]), $2, (int_64)4148111386213351424, [1], [8359])
	
.LABEL $label$5
	if ( (*(($1 + [196])) & [1]) ){ goto $label$20 }
	if ( (*($1 + [184]) & [1]) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$20
	CALL _ZdlPv(*(($1 + [204])))
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($1 + [192])))
	$5 = *($1 + [256])
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $155(($1 + [24]))
	
.LABEL $label$3
	$5 = *($1 + [256])
	if ( $5 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($1 + [272])
	return 
	
.LABEL $label$1
	$11 = ($1 + [260])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$24 }
	if ( ((*($8 + [36]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($8 + [44])))
	
.LABEL $label$25
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($8 + [32])))
	
.LABEL $label$26
	CALL _ZdlPv($8)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$23 }
	$8 = *(($1 + [256]))
	goto $label$21 
	
.LABEL $label$22
	$8 = $5
	
.LABEL $label$21
	*($11) = $5
	CALL _ZdlPv($8)
	$global$0 = ($1 + [272])
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9161])
	$3 = *($0 + [4])
	$4 = *(($3 + [64]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-4035225266123964415, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [64])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($2 + [52])) == (int_32)$7), [9076])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-4035225266123964416, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $79($7, $4)
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9076])
	
.LABEL $label$3
	*(($2 + [64])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	*($2 + [68]) = [0]
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	*($2 + [24]) = ($2 + [32])
	*($2 + [8]) = *($1 + [8])
	*($2) = *($1 + [16])
	CALL $27(($2 + [72]), ($2 + [24]), $2)
	$4 = *($2 + [76])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_64)((int_64)((int_64)*($2) ^ (int_64)*($4 + [16])) | (int_64)((int_64)*($2 + [8]) ^ (int_64)*($4 + [8]))) == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *($0)
	*($2 + [4]) = $1
	*($2) = ($2 + [32])
	CALL $28(($2 + [72]), ($2 + [32]), $3, $2)
	
.LABEL $label$1
	$4 = *($2 + [56])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($2 + [60])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$8
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$1 = *(($2 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($2 + [80])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)4035225266123964416, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [52])) == (int_32)$7), [9076])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $114($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)4035225266123964416, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9076])
	
.LABEL $label$2
	*($4 + [60]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9286])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$10
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [36]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [44])))
	
.LABEL $label$14
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$6 = *($1 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4035225266123964416, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx128_remove($6)
	
.LABEL $label$16
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4035225266123964415, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8609])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $10($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8613])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $168($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8609])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $103($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8613])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8613])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $168($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $106(*($0 + [4]), $1)
	$5 = *($1 + [20])
	$6 = ( *(($1 + [24])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [17])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [20])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8879])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [8879])
	CALL memcpy(($2 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)($5 + [-16]) > (int_32)[0]), [8879])
	CALL memcpy(($2 + [16]), ($1 + [16]), [1])
	*($3 + [12]) = ($2 + [17])
	CALL $51(($3 + [8]), $6)
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-8646911284551352320, *(*($0 + [8])), $7, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $178($2)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$7 = *($5)
	$2 = *(($0 + [8]))
	$8 = *($2)
	$9 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*($1 + [40]) = CALL db_idx64_store($7, (int_64)-8646911284551352320, $8, $9, ($3 + [24]))
	$7 = *($2)
	$8 = *($5)
	$9 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*(($1 + [44])) = CALL db_idx64_store($8, (int_64)-8646911284551352319, $7, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8808])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-8646911284551352320)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8754])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8754])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $86(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-8646911284551352320, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $86($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $107(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8702])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = *(*($0 + [4]))
	CALL $158(($1 + [20]), *($0 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8879])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8879])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8879])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $100($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $160($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $160($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $155($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	*($2 + [68]) = [0]
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	*($2 + [24]) = ($2 + [32])
	*($2 + [8]) = *($1 + [8])
	*($2) = *($1 + [16])
	CALL $42(($2 + [72]), ($2 + [24]), $2)
	$4 = *($2 + [76])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_64)(((int_64)((int_64)*($2) ^ (int_64)*($4 + [16])) | (int_64)((int_64)*($2 + [8]) ^ (int_64)*($4 + [8]))) == 0) == 0) ){ goto $label$3 }
	$3 = *($0)
	*($2) = $1
	CALL eosio_assert([1], [8885])
	CALL $43(*($2 + [24]), $4, $3, $2)
	$4 = *($2 + [56])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0)
	*($2 + [4]) = $1
	*($2) = ($2 + [32])
	CALL $44(($2 + [72]), ($2 + [32]), $3, $2)
	$4 = *($2 + [56])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($2 + [60])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$8
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$1 = *(($2 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($1)
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0)
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	$4 = CALL db_find_i64($2, $2, (int_64)4611686018427387904, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14(($3 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($3 + [16])), [9076])
	$2 = *($0)
	*($3 + [8]) = ($3 + [56])
	CALL eosio_assert([1], [8885])
	CALL $45(($3 + [16]), $4, $2, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9339])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9444])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9377])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9444])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$3 }
	$3 = ($1 + [1])
	$4 = [0]
	if ( (uint_32($2 >> [1]) <= [2]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = *($1 + [8])
	$4 = [0]
	if ( (*($1 + [4]) <= [2]) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)[84]) ){ goto $label$1 }
	if ( ((int_32)*($3 + [1]) != (int_32)[58]) ){ goto $label$1 }
	CALL $167($1, [0], [2])
	$5 = *($1)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$4 = [0]
	if ( (uint_32($5 >> [1]) & [3]) ){ goto $label$1 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	if ( (*($1 + [4]) & [3]) ){ goto $label$1 }
	
.LABEL $label$4
	if ( $6 ){ goto $label$7 }
	$7 = uint_32($5 >> [1])
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$6 }
	$8 = ($3 + $2)
	$4 = [0]
	$2 = ($2 + [1])
	if ( ((uint_32)((*($8) + [-65]) & [255]) <= (uint_32)[18]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$7
	$7 = *(($1 + [4]))
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$6 }
	$8 = ($3 + $2)
	$4 = [0]
	$2 = ($2 + [1])
	if ( ((uint_32)((*($8) + [-65]) & [255]) <= (uint_32)[18]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$6
	if ( $6 ){ goto $label$13 }
	$5 = uint_32($5 >> [3])
	if ( ($5 == 0) ){ goto $label$11 }
	$7 = [0]
	
.LOOP $label$14:
	$8 = ($3 + [1])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)*($8)) ){ goto $label$12 }
	$4 = ($3 + [2])
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$12 }
	$2 = ($3 + [3])
	if ( ((int_32)$1 == (int_32)*($2)) ){ goto $label$12 }
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$12 }
	if ( ((int_32)$1 == (int_32)*($2)) ){ goto $label$12 }
	if ( ((int_32)*($4) == (int_32)*($2)) ){ goto $label$12 }
	$3 = ($3 + [4])
	$4 = [1]
	$7 = ($7 + [1])
	if ( ($7 <= $5) ){ goto $label$14 }
	goto $label$1 
	
.LABEL $label$13
	$5 = uint_32(*(($1 + [4])) >> [2])
	if ( ($5 == 0) ){ goto $label$10 }
	$7 = [0]
	
.LOOP $label$15:
	$8 = ($3 + [1])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)*($8)) ){ goto $label$12 }
	$4 = ($3 + [2])
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$12 }
	$2 = ($3 + [3])
	if ( ((int_32)$1 == (int_32)*($2)) ){ goto $label$12 }
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$12 }
	if ( ((int_32)$1 == (int_32)*($2)) ){ goto $label$12 }
	if ( ((int_32)*($4) == (int_32)*($2)) ){ goto $label$12 }
	$3 = ($3 + [4])
	$4 = [1]
	$7 = ($7 + [1])
	if ( ($7 <= $5) ){ goto $label$15 }
	goto $label$1 
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	return [1]
	
.LABEL $label$10
	return [1]
	
.LABEL $label$1
	return $4
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [28])) == (int_32)$0), [9191])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9236])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9286])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [32]))
	$6 = *($1 + [36])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5188146770730811392, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [256])
	$global$0 = $5
	$6 = *([0] + [8232])
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)*($0) != (int_64)$6) ){ goto $label$1 }
	*($5 + [248]) = [8392]
	*($5 + [252]) = CALL $172([8392])
	*($5 + [24]) = *($5 + [248])
	$7 = CALL $36(($5 + [128]), ($5 + [24]))
	if ( ((int_64)*($0 + [8]) != (int_64)*($7)) ){ goto $label$1 }
	if ( ((int_64)*([0] + [8232]) != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)*([0] + [8240])) ){ goto $label$1 }
	*(($0 = ($5 + [168]))) = (int_64)0
	*(($7 = ($5 + [160]))) = (int_64)0
	*(($5 + [152])) = (int_64)0
	*(($5 + [144])) = (int_64)0
	*($0) = [0]
	*($5 + [136]) = (int_64)0
	*($5 + [128]) = (int_64)0
	$0 = CALL $172([8560])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$8 }
	*(($5 + [160])) = ($0 << [1])
	$7 = ($7 + [1])
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($0 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [168])) = $7
	*(($5 + [164])) = $0
	*($5 + [160]) = ($8 | [1])
	
.LABEL $label$7
	CALL memcpy($7, [8560], $0)
	
.LABEL $label$6
	*(($7 + $0)) = [0]
	$0 = CALL $156(($5 + [232]), $4)
	$7 = CALL $37(($5 + [128]), $0)
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($0 + [8]))
	
.LABEL $label$9
	if ( ((*(($5 + [160])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [168])))
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$1 }
	$0 = *($4)
	if ( ($0 & [1]) ){ goto $label$12 }
	$7 = uint_32($0 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$7 = *($4 + [4])
	
.LABEL $label$11
	*(($5 + [224])) = [0]
	*($5 + [208]) = (int_64)-1
	*($5 + [216]) = (int_64)0
	$6 = *([0] + [8232])
	*($5 + [192]) = $6
	*($5 + [200]) = $6
	$0 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)4611686018427387904, *([0] + [8192]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$0 = CALL $14(($5 + [192]), $8)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)($5 + [192])), [9076])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8362])
	CALL eosio_assert((*($0 + [64]) == 0), [8404])
	CALL eosio_assert(((int_64)*($3) >= (int_64)(CASTING int_64)(int_32 ((int_32)(((int_32)$7 * (int_32)[2500]) + [-5000]) * (int_32)*($0 + [34])))), [8424])
	CALL $167($4, [0], [2])
	*($5 + [136]) = $1
	*($5 + [128]) = (int_64)0
	*($5 + [144]) = *($0 + [16])
	$8 = CALL $156(($5 + [152]), $4)
	*(($5 + [172])) = [0]
	*($5 + [164 align=4]) = (int_64)0
	$9 = ($5 + [164])
	$7 = CALL $172([8447])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$16 }
	*(($5 + [164])) = ($7 << [1])
	$10 = ($9 + [1])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$11 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*(($5 + [172])) = $10
	*(($5 + [168])) = $7
	*($5 + [164]) = ($11 | [1])
	
.LABEL $label$15
	CALL memcpy($10, [8447], $7)
	
.LABEL $label$14
	*(($10 + $7)) = [0]
	*($5 + [176]) = [0]
	*((($5 + [72]) + [8])) = *((($5 + [128]) + [8]))
	*((($5 + [72]) + [16])) = *((($5 + [128]) + [16]))
	*($5 + [32]) = *([0] + [8232])
	*($5 + [72]) = *($5 + [128])
	$7 = CALL $156(($5 + [96]), $8)
	$10 = CALL $156(($5 + [108]), $9)
	*($5 + [120]) = *($5 + [176])
	CALL $38(($5 + [32]), ($5 + [72]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [116])))
	
.LABEL $label$17
	if ( ((*($7) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$18
	$6 = *($3)
	*($5 + [32]) = *([0] + [8232])
	$6 = ((int_64)$6 / (int_64)10000)
	CALL $39(($5 + [32]), *([0] + [8192]), ((int_64)$6 & (int_64)65535))
	*($5 + [32]) = *([0] + [8232])
	$0 = CALL $156(($5 + [56]), $4)
	CALL $40(($5 + [32]), *(($0 + [16])), $0)
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((*($0) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($0 + [8]))
	
.LABEL $label$19
	$6 = *([0] + [8232])
	*($5 + [48]) = $6
	*($5 + [40]) = $4
	*($5 + [32]) = $1
	CALL $41(($5 + [8]), ($5 + [48]), $6, (int_64)3671185347225583616, [1], ($5 + [32]))
	if ( (*(($5 + [164])) & [1]) ){ goto $label$21 }
	if ( (*($8) & [1]) ){ goto $label$20 }
	goto $label$3 
	
.LABEL $label$21
	CALL _ZdlPv(*(($5 + [172])))
	if ( ((*($8) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [160])))
	$3 = *($5 + [216])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	CALL $155($7)
	
.LABEL $label$4
	CALL $155($9)
	
.LABEL $label$3
	$3 = *($5 + [216])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($5 + [220])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$23 }
	
.LOOP $label$24:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$24 }
	$0 = *(($5 + [216]))
	goto $label$22 
	
.LABEL $label$23
	$0 = $3
	
.LABEL $label$22
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [256])
	(unreachable)
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5188146770730811392, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [28])) == (int_32)$7), [9076])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $85($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-5188146770730811392, $6))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [9076])
	
.LABEL $label$2
	*($4 + [36]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9161])
	$3 = *($0 + [4])
	$4 = *($3 + [36])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-5188146770730811392, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [36]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($2 + [28])) == (int_32)$7), [9076])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $85($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-5188146770730811392, $6))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [9076])
	
.LABEL $label$3
	*($2 + [36]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	*($2 + [76]) = [0]
	$3 = *($0)
	*($2 + [40]) = $3
	*($2 + [48]) = $3
	*($2 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($0)
	*($2 + [20]) = $1
	*($2 + [16]) = ($2 + [40])
	*($2 + [24]) = ($2 + [32])
	CALL $31(($2 + [8]), ($2 + [40]), $3, ($2 + [16]))
	*($2) = ($2 + [40])
	$3 = *($2 + [32])
	*($2 + [16]) = (int_64)0
	CALL $32(($2 + [8]), $2, ($2 + [16]))
	$0 = *($2 + [12])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ((int_64)$3 + (int_64)-180)
	
.LOOP $label$2:
	if ( ((uint_64)*($0 + [16]) > (uint_64)$4) ){ goto $label$1 }
	$3 = *($2 + [8])
	*($2 + [16]) = $3
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [9127])
	CALL $33(($2 + [16]))
	CALL $34(*($2), $0)
	$3 = *($2 + [16])
	*($2 + [8]) = $3
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $0) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = *($2 + [64])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [68])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [80])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8651])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [28]) = $1
	*($3 + [8]) = (int_64)0
	CALL $119(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $120(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}