(data (i32.const 4) "\10j\00\00")
(data (i32.const 16) "read flag error: too large\00")
(data (i32.const 48) "read flag error: char < 0\00")
(data (i32.const 80) "read flag error: char > 9\00")
(data (i32.const 128) "-\00")
(data (i32.const 144) "vagastoken11\00")
(data (i32.const 160) "transfer\00")
(data (i32.const 176) "eosio.token\00")
(data (i32.const 192) "not fount user\00")
(data (i32.const 208) "jackpot should >= 0.01 EVT\00")
(data (i32.const 240) "withdraw error\00")
(data (i32.const 256) "invalid symbol name\00")
(data (i32.const 288) "\e6\8f\90\e7\8e\b0\00")
(data (i32.const 304) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 368) "0\00")
(data (i32.const 384) "active\00")
(data (i32.const 400) "write\00")
(data (i32.const 416) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 480) "error: build_transfer\00")
(data (i32.const 512) "cannot create objects in table of another contract\00")
(data (i32.const 576) "error reading iterator\00")
(data (i32.const 608) "read\00")
(data (i32.const 624) "cannot pass end iterator to modify\00")
(data (i32.const 672) "object passed to modify is not in multi_index\00")
(data (i32.const 720) "cannot modify objects in table of another contract\00")
(data (i32.const 784) "updater cannot change primary key when modifying an object\00")
(data (i32.const 848) "cannot pass end iterator to erase\00")
(data (i32.const 896) "cannot increment end iterator\00")
(data (i32.const 928) "object passed to erase is not in multi_index\00")
(data (i32.const 976) "cannot erase objects in table of another contract\00")
(data (i32.const 1040) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1104) "owner\00")
(data (i32.const 1120) "round create_round error\00")
(data (i32.const 1152) "round start_round error\00")
(data (i32.const 1184) "reveal\00")
(data (i32.const 1200) "pool overdraw\00")
(data (i32.const 1216) "unable to find key\00")
(data (i32.const 1248) "round get_award_amount error\00")
(data (i32.const 1280) "\e5\a5\96\e6\b1\a0\00")
(data (i32.const 1296) "error: unlock\00")
(data (i32.const 1312) "error: modify_locked\00")
(data (i32.const 1344) "round finish error\00")
(data (i32.const 1376) "round award error\00")
(data (i32.const 1408) "error: lock\00")
(data (i32.const 1424) "award\00")
(data (i32.const 1440) "nextround\00")
(data (i32.const 1456) "lockgame\00")
(data (i32.const 1472) "check pay out error\00")
(data (i32.const 1504) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1568) "error: game is locked\00")
(data (i32.const 1600) "get\00")
(data (i32.const 1616) "error-0-message:memo params error\00")
(data (i32.const 1664) "error-1-message:system error state_finish\00")
(data (i32.const 1712) "error-1-message:system error cost_1\00")
(data (i32.const 1760) "error-1-message:system error cost_2\00")
(data (i32.const 1808) "error-1-message:system error cost_3\00")
(data (i32.const 1856) "error-1-message:system error cost_4\00")
(data (i32.const 1904) "error-1-message:system error cost_\00")
(data (i32.const 1952) "error-2-message:amount error\00")
(data (i32.const 1984) "error-3-message:system error update_1\00")
(data (i32.const 2032) "error-3-message:system error update_2\00")
(data (i32.const 2080) "error-3-message:system error update_3\00")
(data (i32.const 2128) "error-3-message:system error update_4\00")
(data (i32.const 2176) "error-3-message:system error update_\00")
(data (i32.const 2224) "error\00")
(data (i32.const 2240) "vagaswallet1\00")
(data (i32.const 2256) "key\e5\88\86\e7\ba\a2\00")
(data (i32.const 10672) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "cancel_deferred" (func $fimport$2 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$13 (param i32)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$19 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z23read_uint64_from_stringNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $5))
(export "_Z16uint64_to_stringy" (func $6))
(export "_Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE" (func $8))
(export "apply" (func $10))
(export "malloc" (func $130))
(export "free" (func $133))
(export "memchr" (func $144))
(export "memcmp" (func $145))
(export "strlen" (func $146))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $147 $11 $13 $22 $17 $21 $16 $14 $20 $19)



int_64 .FUNC $98 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4918969584758816768, (int_64)4918969584758816768)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $100($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $2
	CALL $104($4, $0, $1, ($4 + [8]))
	$1 = *(*($4 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4918969584758816768, (int_64)4918969584758816768)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $100($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [624])
	CALL $101($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $102($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $134([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [608])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [608])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $96(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [928])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [976])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1040])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [80])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$6 = ($1 + [60])
	$5 = ($1 + [64])
	$4 = *($1)
	if ( ((int_32)*($1 + [64]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)*($6) <= (uint_32)*(*($3))) ){ goto $label$2 }
	
.LABEL $label$3
	*(*($3 + [4])) = [0]
	$3 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [64])) = [2]
	$3 = ($1 + [32])
	if ( (CALL is_account(*($1 + [32])) == 0) ){ goto $label$1 }
	*($1 + [48]) = ((int_64)((int_64)*($1 + [40]) << (int_64)3) / (int_64)10)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [784])
	$7 = $8
	$8 = ($7 + [-80])
	*([0] + [4]) = $8
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($7 + [-6])
	*($9 + [24]) = ($9 + [8])
	*($9 + [36]) = ($1 + [8])
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + [16])
	*($9 + [44]) = ($1 + [24])
	*($9 + [48]) = $3
	*($9 + [52]) = ($1 + [40])
	*($9 + [56]) = ($1 + [48])
	*($9 + [60]) = ($1 + [56])
	*($9 + [64]) = $6
	*($9 + [68]) = $5
	*($9 + [72]) = ($1 + [65])
	*($9 + [76]) = ($1 + [72])
	CALL $65(($9 + [32]), ($9 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $8, [74])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $90 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = [0]
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	CALL current_time()
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$2 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$7), [416])
	if ( $6 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $63($7, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$7), [416])
	
.LABEL $label$4
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [15]) = [1]
	*($10 + [4]) = ($10 + [24])
	*($10) = ($10 + [16])
	*($10 + [8]) = ($10 + [15])
	CALL eosio_assert([1], [624])
	CALL $93($7, $6, (int_64)0, $10)
	*($2) = *($10 + [24])
	*($3) = *($10 + [16])
	$9 = ((int_32)*($10 + [15]) != (int_32)[0])
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [32])
	return $9
}

int_64 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [16]) = (int_64)0
	$6 = ($0 + [8])
	*($8 + [16]) = ((int_64)CALL $52($6, *($0), ($8 + [16])) + (int_64)1)
	CALL $53($6, ($8 + [16]), *($0))
	$5 = *($8 + [16])
	$7 = CALL current_time()
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*($8 + [28]) = [0]
	*($8 + [32]) = [0]
	*($8 + [36]) = [0]
	*($8 + [40]) = [0]
	*($8 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($8 + [52]) = [0]
	*(($8 + [56])) = [0]
	*(($8 + [60])) = [0]
	*($8 + [64]) = [0]
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	CALL $56(($8 + [52]), $1, $2, $3, $4)
	$7 = *($0)
	*($8 + [8]) = (int_64)0
	*($8) = $5
	CALL $57(($8 + [80]), ($8 + [16]))
	$0 = *($8 + [80])
	CALL send_deferred($8, $7, $0, (*($8 + [84]) - $0), [0])
	$0 = *($8 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($8 + [84]) = $0
	CALL $135($0)
	
.LABEL $label$1
	CALL $58(($8 + [16]))
	*([0] + [4]) = ($8 + [96])
	return $5
}

int_64 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = (int_64)0
	$7 = ($0 + [8])
	*($9 + [16]) = ((int_64)CALL $52($7, *($0), ($9 + [16])) + (int_64)1)
	CALL $53($7, ($9 + [16]), *($0))
	$6 = *($9 + [16])
	$8 = CALL current_time()
	*(($9 + [44])) = [0]
	*(($9 + [48])) = [0]
	*($9 + [28]) = [0]
	*($9 + [32]) = [0]
	*($9 + [36]) = [0]
	*($9 + [40]) = [0]
	*($9 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [52]) = [0]
	*(($9 + [56])) = [0]
	*(($9 + [60])) = [0]
	*($9 + [64]) = [0]
	*(($9 + [68])) = [0]
	*(($9 + [72])) = [0]
	CALL $56(($9 + [52]), $2, $3, $4, $5)
	*($9 + [36]) = $1
	$8 = *($0)
	*($9 + [8]) = (int_64)0
	*($9) = $6
	CALL $57(($9 + [80]), ($9 + [16]))
	$0 = *($9 + [80])
	CALL send_deferred($9, $8, $0, (*($9 + [84]) - $0), [0])
	$0 = *($9 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($9 + [84]) = $0
	CALL $135($0)
	
.LABEL $label$1
	CALL $58(($9 + [16]))
	*([0] + [4]) = ($9 + [96])
	return $6
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$7 = (*([0] + [4]) - [80])
	$11 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$6 = ($1 + [65])
	$5 = ($1 + [64])
	$4 = *($1)
	if ( ((int_32)*($1 + [64]) != (int_32)[2]) ){ goto $label$2 }
	if ( (*($1 + [65]) & [255]) ){ goto $label$2 }
	*(($1 + [65])) = [1]
	*(*($3)) = *($1 + [32])
	*(*($3 + [4])) = *($1 + [48])
	$8 = ($1 + [48])
	$9 = ($1 + [32])
	$10 = *($1)
	goto $label$1 
	
.LABEL $label$2
	*(*($3 + [8])) = [0]
	$8 = ($1 + [48])
	$9 = ($1 + [32])
	$10 = $4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [784])
	$3 = $7
	$7 = ($3 + [-80])
	*([0] + [4]) = $7
	*($11 + [12]) = $7
	*($11 + [8]) = $7
	*($11 + [16]) = ($3 + [-6])
	*($11 + [24]) = ($11 + [8])
	*($11 + [48]) = $9
	*($11 + [56]) = $8
	*($11 + [32]) = $1
	*($11 + [36]) = ($1 + [8])
	*($11 + [40]) = ($1 + [16])
	*($11 + [44]) = ($1 + [24])
	*($11 + [52]) = ($1 + [40])
	*($11 + [60]) = ($1 + [56])
	*($11 + [64]) = ($1 + [60])
	*($11 + [68]) = $5
	*($11 + [72]) = $6
	*($11 + [76]) = ($1 + [72])
	CALL $65(($11 + [32]), ($11 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $7, [74])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [80])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $139($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	$14 = $15
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$5 = ($1 + [64])
	$4 = *($1)
	if ( ((int_32)*($1 + [64]) != (int_32)[1]) ){ goto $label$2 }
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	*($1 + [16]) = *(*($3 + [4]))
	*(*($3 + [8])) = *($1 + [24])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [12])))
	*($1 + [32]) = *(*($3 + [16]))
	$6 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [3600])
	*($1 + [60]) = $6
	*(*($3 + [20])) = *($1 + [72])
	*($1 + [72]) = *(*($3 + [24]))
	$13 = [0]
	$7 = *($7)
	*(($7 = *($3 + [28]))) = ( ($6 - $7) ? [0] : ((uint_32)$6 > (uint_32)$7) )
	$6 = ($1 + [72])
	$7 = ($1 + [60])
	$8 = ($1 + [32])
	$9 = ($1 + [24])
	$10 = ($1 + [16])
	$11 = ($1 + [8])
	$12 = *($1)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [72])
	$7 = ($1 + [60])
	$8 = ($1 + [32])
	$9 = ($1 + [24])
	$10 = ($1 + [16])
	$11 = ($1 + [8])
	$13 = [-4]
	$12 = $4
	
.LABEL $label$1
	*(*($3 + [32])) = $13
	CALL eosio_assert(((int_64)$4 == (int_64)$12), [784])
	$15 = $15
	$3 = ($15 + [-80])
	*([0] + [4]) = $3
	*($14 + [12]) = $3
	*($14 + [8]) = $3
	*($14 + [16]) = ($15 + [-6])
	*($14 + [24]) = ($14 + [8])
	*($14 + [36]) = $11
	*($14 + [40]) = $10
	*($14 + [44]) = $9
	*($14 + [48]) = $8
	*($14 + [32]) = $1
	*($14 + [52]) = ($1 + [40])
	*($14 + [56]) = ($1 + [48])
	*($14 + [60]) = ($1 + [56])
	*($14 + [64]) = $7
	*($14 + [68]) = $5
	*($14 + [72]) = ($1 + [65])
	*($14 + [76]) = $6
	CALL $65(($14 + [32]), ($14 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $3, [74])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($14 + [80])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $142(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $142(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $135(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $135(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $122 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [272])
	*([0] + [4]) = $17
	*($17 + [264]) = $2
	*($17 + [256]) = $3
	*($17 + [248]) = $4
	*($17 + [240]) = $5
	*($17 + [232]) = $6
	$14 = *(($0 + [32]))
	$16 = *(($0 + [36]))
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$1 }
	$15 = ($16 + [-24])
	$9 = ([0] - $14)
	
.LOOP $label$2:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$1 }
	$16 = $15
	$10 = ($15 + [-24])
	$15 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($0 + [8])
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$6 }
	$15 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [80]) == (int_32)$10), [416])
	if ( $15 ){ goto $label$5 }
	$9 = [-1]
	goto $label$3 
	
.LABEL $label$6
	$15 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$4 }
	$15 = CALL $63($10, $15)
	CALL eosio_assert(((int_32)*($15 + [80]) == (int_32)$10), [416])
	
.LABEL $label$5
	$9 = [-2]
	if ( ((int_32)*($15 + [64]) != (int_32)[1]) ){ goto $label$3 }
	if ( (int_64)($2 == 0) ){ goto $label$7 }
	*($17 + [228]) = [0]
	$2 = (int_64)0
	*($17 + [216]) = (int_64)0
	*($17 + [208]) = (int_64)0
	*($17 + [204]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($17 + [52]) = ($17 + [248])
	*($17 + [48]) = ($17 + [256])
	*($17 + [56]) = ($17 + [216])
	*($17 + [60]) = ($17 + [264])
	*($17 + [64]) = ($17 + [240])
	*($17 + [68]) = ($17 + [208])
	*($17 + [72]) = ($17 + [232])
	*($17 + [76]) = ($17 + [204])
	*($17 + [80]) = ($17 + [228])
	CALL eosio_assert([1], [624])
	CALL $123($10, $15, (int_64)0, ($17 + [48]))
	*($7) = *($17 + [208])
	*($8) = *($17 + [204])
	*((($17 + [160]) + [32])) = [0]
	$5 = *($0)
	*($17 + [160]) = $5
	*($17 + [168]) = $1
	*($17 + [176]) = (int_64)-1
	*($17 + [184]) = (int_64)0
	$4 = *($17 + [256])
	$3 = ((int_64)((int_64)$4 << (int_64)2) / (int_64)5)
	if ( (int_64)(*($17 + [216]) == 0) ){ goto $label$9 }
	$6 = (int_64)0
	$15 = CALL db_lowerbound_i64($5, $1, (int_64)-2855089728816939008, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$10 }
	$7 = ($0 + [48])
	$4 = ((int_64)$3 * (int_64)10000)
	$14 = CALL $94(($17 + [160]), $15)
	$11 = ($0 + [72])
	$12 = ($0 + [76])
	$13 = ($0 + [56])
	$6 = (int_64)0
	
.LOOP $label$11:
	$1 = *($14 + [8])
	if ( (int_64)($1 == 0) ){ goto $label$12 }
	$5 = ((int_64)*($17 + [216]) * (int_64)10000)
	*($17 + [48]) = ((int_64)$4 / (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)((int_64)$5 % (int_64)$1) != (int_64)0)) + (int_64)((int_64)$5 / (int_64)$1)))
	$1 = *($14)
	*($17 + [152]) = $1
	$8 = *($11)
	$16 = *($12)
	if ( ((int_32)$16 == (int_32)$8) ){ goto $label$13 }
	$15 = ($16 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$14:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$13 }
	$16 = $15
	$10 = ($15 + [-24])
	$15 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$16 == (int_32)$8) ){ goto $label$17 }
	$15 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [16]) == (int_32)$7), [416])
	if ( $15 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$15 = CALL db_find_i64(*($7), *($13), (int_64)-2849224558420951040, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$16 }
	$15 = CALL $46($7, $15)
	CALL eosio_assert(((int_32)*($15 + [16]) == (int_32)$7), [416])
	goto $label$15 
	
.LABEL $label$16
	$1 = *($0)
	*($17 + [136]) = ($17 + [152])
	CALL $124(($17 + [144]), $7, $1, ($17 + [136]))
	$15 = *($17 + [148])
	
.LABEL $label$15
	*($17 + [144]) = ($17 + [48])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [624])
	CALL $125($7, $15, (int_64)0, ($17 + [144]))
	$6 = ((int_64)*($17 + [48]) + (int_64)$6)
	
.LABEL $label$12
	CALL eosio_assert([1], [896])
	$15 = CALL db_next_i64(*($14 + [28]), ($17 + [48]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$10 }
	$14 = CALL $94(($17 + [160]), $15)
	goto $label$11 
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$3 >= (int_64)$6), [2224])
	$5 = *($0)
	$4 = *($17 + [256])
	goto $label$8 
	
.LABEL $label$9
	$6 = (int_64)0
	
.LABEL $label$8
	*(($17 + [64])) = $5
	*(($17 + [72])) = (int_64)-1
	*((($17 + [48]) + [32])) = (int_64)0
	*(($17 + [88])) = [0]
	*($17 + [56]) = $5
	*($17 + [48]) = $5
	*($17 + [96]) = $5
	*(($17 + [104])) = $5
	*(($17 + [112])) = (int_64)-1
	*(($17 + [120])) = [0]
	*(($17 + [124])) = [0]
	*(($17 + [128])) = [0]
	$4 = (int_64))($4 - $6)
	$1 = (int_64)59
	$15 = [2240]
	$5 = (int_64)0
	
.LOOP $label$18:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$19 }
	$10 = *($15)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$10 = ($10 + [165])
	goto $label$20 
	
.LABEL $label$21
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$19
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$18 }
	*($17 + [40]) = (int_64)1414939908
	*($17 + [32]) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$2 = (uint_64)*($17 + [40]) >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$10 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$10 = [0]
	
.LABEL $label$22
	CALL eosio_assert($10, [256])
	*(($17 + [24])) = [0]
	*($17 + [16]) = (int_64)0
	$15 = CALL strlen([2256])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$30 }
	*($17 + [16]) = ($15 << [1])
	$10 = (($17 + [16]) | [1])
	if ( $15 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$16 = (($15 + [16]) & [-16])
	$10 = CALL $134($16)
	*($17 + [16]) = ($16 | [1])
	*($17 + [24]) = $10
	*($17 + [20]) = $15
	
.LABEL $label$29
	CALL memcpy($10, [2256], $15)
	
.LABEL $label$28
	*(($10 + $15)) = [0]
	*(($17 + [8])) = *((($17 + [32]) + [8]))
	*($17) = *($17 + [32])
	CALL $24(($17 + [48]), $5, $17, ($17 + [16]))
	if ( ((*($17 + [16]) & [1]) == 0) ){ goto $label$31 }
	CALL $135(*($17 + [24]))
	
.LABEL $label$31
	$2 = *($17 + [240])
	$14 = *(($17 + [184]))
	$16 = *(($17 + [188]))
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$32 }
	$15 = ($16 + [-24])
	$9 = ([0] - $14)
	
.LOOP $label$33:
	if ( ((int_64)*(*($15)) == (int_64)$2) ){ goto $label$32 }
	$16 = $15
	$10 = ($15 + [-24])
	$15 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$33 }
	
.LABEL $label$32
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$36 }
	$15 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($17 + [160])), [416])
	if ( $15 ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	$15 = CALL db_find_i64(*($17 + [160]), *(($17 + [168])), (int_64)-2855089728816939008, $2)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$35 }
	$15 = CALL $94(($17 + [160]), $15)
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($17 + [160])), [416])
	goto $label$34 
	
.LABEL $label$35
	$2 = *($0)
	*($17 + [144]) = ($17 + [240])
	CALL $126(($17 + [152]), ($17 + [160]), $2, ($17 + [144]))
	$15 = *($17 + [156])
	
.LABEL $label$34
	*($17 + [156]) = ($17 + [256])
	*($17 + [152]) = ($17 + [264])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [624])
	CALL $127(($17 + [160]), $15, (int_64)0, ($17 + [152]))
	$9 = *($17 + [228])
	$16 = *(($17 + [120]))
	if ( ($16 == 0) ){ goto $label$37 }
	$14 = ($17 + [124])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$39 }
	
.LOOP $label$40:
	$15 = ($15 + [-24])
	$10 = *($15)
	*($15) = [0]
	if ( ($10 == 0) ){ goto $label$41 }
	CALL $135($10)
	
.LABEL $label$41
	if ( ((int_32)$16 != (int_32)$15) ){ goto $label$40 }
	$15 = *(($17 + [120]))
	goto $label$38 
	
.LABEL $label$39
	$15 = $16
	
.LABEL $label$38
	*($14) = $16
	CALL $135($15)
	
.LABEL $label$37
	$16 = *(($17 + [80]))
	if ( ($16 == 0) ){ goto $label$42 }
	$14 = ($17 + [84])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$44 }
	
.LOOP $label$45:
	$15 = ($15 + [-24])
	$10 = *($15)
	*($15) = [0]
	if ( ($10 == 0) ){ goto $label$46 }
	CALL $135($10)
	
.LABEL $label$46
	if ( ((int_32)$16 != (int_32)$15) ){ goto $label$45 }
	$15 = *(($17 + [80]))
	goto $label$43 
	
.LABEL $label$44
	$15 = $16
	
.LABEL $label$43
	*($14) = $16
	CALL $135($15)
	
.LABEL $label$42
	$16 = *($17 + [184])
	if ( ($16 == 0) ){ goto $label$3 }
	$14 = ($17 + [188])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$48 }
	
.LOOP $label$49:
	$15 = ($15 + [-24])
	$10 = *($15)
	*($15) = [0]
	if ( ($10 == 0) ){ goto $label$50 }
	CALL $135($10)
	
.LABEL $label$50
	if ( ((int_32)$16 != (int_32)$15) ){ goto $label$49 }
	$15 = *(($17 + [184]))
	goto $label$47 
	
.LABEL $label$48
	$15 = $16
	
.LABEL $label$47
	*($14) = $16
	CALL $135($15)
	goto $label$3 
	
.LABEL $label$27
	CALL $136(($17 + [16]))
	
.LABEL $label$7
	$9 = [-3]
	goto $label$3 
	
.LABEL $label$4
	$9 = [-1]
	
.LABEL $label$3
	*([0] + [4]) = ($17 + [272])
	(unreachable)
	return $9
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $131([2268], $0)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $132($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10672])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10758]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10760])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10758]) = [1]
	$7 = ($7 << [16])
	*([0] + [10760]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10760])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10760]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10758]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10758]) = [1]
	$3 = ($3 << [16])
	*([0] + [10760]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10760])
	
.LABEL $label$8
	*([0] + [10760]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10652])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10460]
	$1 = (((int_32)$2 * (int_32)[12]) + [10460])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10764])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$5 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$7), [416])
	if ( $8 ){ goto $label$6 }
	return [-1]
	
.LABEL $label$7
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $63($7, $8)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$7), [416])
	
.LABEL $label$6
	$7 = [-2]
	if ( ((int_32)*($8 + [64]) != (int_32)[1]) ){ goto $label$8 }
	if ( (int_64)($2 == 0) ){ goto $label$4 }
	$1 = *($8 + [16])
	$10 = (int_64)0
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((int_64)$1 < (int_64)0) ){ goto $label$3 }
	$11 = ((int_64)$11 + (int_64)$1)
	$1 = ((int_64)((uint_64)$1 / (uint_64)(int_64)20) + (int_64)$1)
	$10 = ((int_64)$10 + (int_64)1)
	if ( (uint_64)($10 <= $2) ){ goto $label$9 }
	*($3) = $11
	*($4) = $1
	$7 = [0]
	
.LABEL $label$8
	return $7
	
.LABEL $label$5
	return [-1]
	
.LABEL $label$4
	return [-3]
	
.LABEL $label$3
	return [-4]
}

void .FUNC $136 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $134(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $135($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $120 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($4, $9)
	*($12 + [88]) = [0]
	*($12 + [80]) = (int_64)0
	CALL _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE($3, ($12 + [80]))
	$11 = [-16]
	$3 = *($12 + [80])
	if ( (((int_32)(*($12 + [84]) - $3) / (int_32)[12]) <= [2]) ){ goto $label$7 }
	CALL $142(($12 + [64]), $3)
	$11 = [-18]
	if ( CALL $140(($12 + [64]), [368]) ){ goto $label$8 }
	CALL $142(($12 + [48]), (*($12 + [80]) + [12]))
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$10 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$9 }
	*(($6 = (($12 + [32]) + [8]))) = *(($2 + [8]))
	*($12 + [32]) = *($2)
	CALL $142(($12 + [16]), ($12 + [48]))
	*(($12 + [8])) = *($6)
	*($12) = *($12 + [32])
	$11 = CALL $111($0, $9, $1, $12, ($12 + [16]))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $135(*($12 + [24]))
	
.LABEL $label$13
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL $135(*($12 + [56]))
	
.LABEL $label$8
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL $135(*($12 + [72]))
	
.LABEL $label$14
	$3 = *($12 + [80])
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$15 }
	$6 = *($12 + [84])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$17 }
	$5 = ([0] - $3)
	$6 = ($6 + [-12])
	
.LOOP $label$18:
	if ( ((*($6) & [1]) == 0) ){ goto $label$19 }
	CALL $135(*(($6 + [8])))
	
.LABEL $label$19
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $5) != (int_32)[-12]) ){ goto $label$18 }
	$6 = *($12 + [80])
	goto $label$16 
	
.LABEL $label$17
	$6 = $3
	
.LABEL $label$16
	*($12 + [84]) = $3
	CALL $135($6)
	
.LABEL $label$15
	*([0] + [4]) = ($12 + [96])
	return $11
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $134([40])) + [24]) = $1
	CALL $128(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $96(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [928])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [976])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1040])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [400])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-2852345010218888704, $2, (int_64)-2852345010218888704, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-2852345010218888704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-2852345010218888703
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-2852345010218888704
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-2852345010218888704
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $44(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $135($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	*($1) = *(*($3))
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [400])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2852345010218888704) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-2852345010218888703
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $134([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-2852345010218888704
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-2852345010218888704
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [608])
	CALL memcpy($0, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = *([0] + [4])
	$9 = $10
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$5 = ($1 + [8])
	$8 = [-2]
	$4 = *($1)
	$7 = $4
	$6 = *($1 + [8])
	if ( ((int_64)$6 < (int_64)100) ){ goto $label$1 }
	*(*($3)) = $6
	*($5) = (int_64)0
	$7 = *($1)
	$8 = [0]
	
.LABEL $label$1
	*(*($3 + [4])) = $8
	CALL eosio_assert(((int_64)$4 == (int_64)$7), [784])
	$8 = $10
	$3 = ($8 + [-16])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [400])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($8 + [-8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = $9
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $134([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [608])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-2852345010218888704, $2, (int_64)-2852345010218888704, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-2852345010218888704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-2852345010218888703
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-2852345010218888704
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-2852345010218888704
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $44(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $135($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([32])
	CALL $129($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $49(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($1) = *(*(*($0 + [4])))
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	$2 = *($0)
	CALL eosio_assert([1], [400])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-2855089728816939008, *(*($0 + [8])), $3, $4, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	*(($14 + [24])) = [0]
	*($14 + [16]) = (int_64)0
	$5 = CALL strlen([128])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($14 + [16]) = ($5 << [1])
	$10 = (($14 + [16]) | [1])
	$8 = $10
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$13 = (($5 + [16]) & [-16])
	$8 = CALL $134($13)
	*($14 + [16]) = ($13 | [1])
	*($14 + [24]) = $8
	*($14 + [20]) = $5
	$10 = (($14 + [16]) | [1])
	
.LABEL $label$3
	CALL memcpy($8, [128], $5)
	
.LABEL $label$2
	*(($8 + $5)) = [0]
	$2 = ($0 + [1])
	$13 = *($14 + [20])
	$5 = *($14 + [16])
	$9 = ($0 + [4])
	$11 = [0]
	$12 = [0]
	
.LOOP $label$6:
	$7 = ($8 & [1])
	$8 = *($0)
	$6 = ( *($9) ? uint_32($8 >> [1]) : $7 )
	if ( ($6 <= $11) ){ goto $label$5 }
	$8 = $11
	$4 = ($5 & [1])
	$5 = ( $13 ? uint_32(($5 & [254]) >> [1]) : $4 )
	if ( ($5 == 0) ){ goto $label$7 }
	$13 = ($3 + $11)
	$3 = ( *(($0 + [8])) ? $2 : $7 )
	$6 = ($3 + $6)
	$8 = ($6 - $13)
	if ( ((int_32)$8 < (int_32)$5) ){ goto $label$5 }
	$4 = ( *((($14 + [16]) + [8])) ? $10 : $4 )
	$7 = *($4)
	
.LOOP $label$8:
	$8 = (($8 - $5) + [1])
	if ( ($8 == 0) ){ goto $label$5 }
	$8 = CALL memchr($13, $7, $8)
	if ( ($8 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($8, $4, $5) == 0) ){ goto $label$9 }
	$13 = ($8 + [1])
	$8 = ($6 - $13)
	if ( ((int_32)$8 >= (int_32)$5) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	$8 = ($8 - $3)
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$5 }
	CALL $143($14, $0, $11, ($8 - $11), $0)
	$5 = ($1 + [4])
	$13 = *($5)
	if ( ((uint_32)$13 >= (uint_32)*(($1 + [8]))) ){ goto $label$11 }
	*($13) = *($14)
	$13 = ($14 + [8])
	*(($13 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$10 
	
.LABEL $label$11
	CALL $9($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$10 }
	CALL $135(*(($14 + [8])))
	
.LABEL $label$10
	$12 = [1]
	$5 = *($14 + [16])
	$13 = *($14 + [20])
	$11 = (( $13 ? uint_32($5 >> [1]) : ($5 & [1]) ) + $8)
	goto $label$6 
	
.LABEL $label$5
	if ( (($12 & [1]) == 0) ){ goto $label$12 }
	CALL $143($14, $0, $11, [-1], $0)
	$5 = ($1 + [4])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [8]))) ){ goto $label$13 }
	*($8) = *($14)
	$8 = ($14 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$12 
	
.LABEL $label$13
	CALL $9($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$12 }
	CALL $135(*($14 + [8]))
	
.LABEL $label$12
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $135(*(($14 + [24])))
	
.LABEL $label$14
	*([0] + [4]) = ($14 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $136(($14 + [16]))
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $135(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $135($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z16uint64_to_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL strlen([112])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	$4 = $5
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $134($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	$5 = ($0 + [1])
	
.LABEL $label$3
	CALL memcpy($4, [112], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	$4 = ($0 + [4])
	
.LOOP $label$5:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $7($6, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($5) = [0]
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$6
	CALL $137($0, [0])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$5 }
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $136($0)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $134($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $138($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $136($0)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z23read_uint64_from_stringNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	if ( (*($0) & [1]) ){ goto $label$3 }
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$0 = *($0 + [8])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = CALL strlen($0)
	CALL eosio_assert(((int_32)$2 < (int_32)[20]), [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	$3 = (int_64)0
	
.LOOP $label$5:
	$1 = *($0)
	CALL eosio_assert(((int_64)$1 > (int_64)47), [48])
	CALL eosio_assert(((int_64)$1 < (int_64)58), [80])
	$0 = ($0 + [1])
	$3 = ((int_64)((int_64)$1 + (int_64)((int_64)$3 * (int_64)10)) + (int_64)-48)
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return $3
	
.LABEL $label$4
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = (int_64)-1
	*(($2 = ($5 + [40]))) = (int_64)0
	$3 = *($0)
	*(($5 + [24])) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*(($5 + [48])) = [0]
	*($5 + [56]) = (int_64)0
	$0 = ($5 + [16])
	CALL $98($0, $3, ($5 + [56]))
	*($5 + [56]) = (int_64)1
	CALL $99($0, ($5 + [56]), *($5 + [8]))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $135($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $16 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1104]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $7)
	*(($9 + [32])) = (int_64)-1
	*(($4 = ($9 + [40]))) = (int_64)0
	$6 = *($0)
	*(($9 + [24])) = $6
	*($9 + [8]) = $6
	*($9 + [16]) = $6
	*(($9 + [48])) = [0]
	*($9 + [56]) = (int_64)0
	$2 = ($9 + [16])
	CALL $98($2, $6, ($9 + [56]))
	*($9 + [56]) = (int_64)0
	CALL $99($2, ($9 + [56]), *($9 + [8]))
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($9 + [44])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $135($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $135($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [224])
	*([0] + [4]) = $11
	*($11 + [200]) = $1
	$2 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $9)
	*((($11 + [72]) + [24])) = (int_64)-1
	$8 = (int_64)0
	*((($11 + [72]) + [32])) = (int_64)0
	$10 = *($0)
	*((($11 + [72]) + [16])) = $10
	*($11 + [72]) = $10
	*($11 + [80]) = $10
	*((($11 + [72]) + [40])) = [0]
	*($11 + [120]) = $10
	*(($11 + [128])) = $10
	*(($11 + [136])) = (int_64)-1
	*(($11 + [144])) = [0]
	*(($11 + [148])) = [0]
	*(($11 + [152])) = [0]
	*($11 + [160]) = $10
	*(($11 + [168])) = $10
	*(($11 + [176])) = (int_64)-1
	*(($11 + [184])) = [0]
	*(($11 + [188])) = [0]
	*(($11 + [192])) = [0]
	CALL eosio_assert(CALL $88(($11 + [72]), $1), [1344])
	CALL $89(($11 + [72]), *($11 + [200]))
	*($11 + [64]) = (int_64)0
	*($11 + [56]) = (int_64)0
	CALL eosio_assert(CALL $90(($11 + [72]), *($11 + [200]), ($11 + [64]), ($11 + [56])), [1376])
	if ( (int_64)(*($11 + [64]) == 0) ){ goto $label$7 }
	if ( (CALL is_account(*($11 + [56])) == 0) ){ goto $label$7 }
	$10 = (int_64)0
	$7 = *($11 + [64])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [1408])
	*(($11 + [16])) = (int_64)0
	*($11 + [8]) = (int_64)0
	$6 = ($11 + [160])
	CALL $73(($11 + [208]), $6, *($11 + [72]), ($11 + [8]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)((int_64)$7 + (int_64)*($11 + [208])) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1312])
	*($11 + [208]) = ((int_64)$7 + (int_64)*($11 + [208]))
	CALL $81($6, ($11 + [208]), *($11 + [72]))
	*(($11 + [32])) = (int_64)-1
	*(($11 + [40])) = (int_64)0
	$2 = *($0)
	*(($11 + [24])) = $2
	*($11 + [8]) = $2
	*($11 + [16]) = $2
	*(($11 + [48])) = [0]
	$9 = (int_64)59
	$6 = [384]
	$1 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$7 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	*($11 + [216]) = $1
	*($11 + [208]) = $2
	$10 = (int_64)0
	$9 = (int_64)59
	$6 = [1424]
	$1 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$19 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$7 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$14 }
	*($11) = $1
	CALL $91(($11 + [8]), ($11 + [208]), $0, $11, ($11 + [200]))
	$4 = *(($11 + [40]))
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = ($11 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$21 }
	
.LOOP $label$22:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	CALL $135($3)
	
.LABEL $label$23
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$22 }
	$6 = *(($11 + [40]))
	goto $label$20 
	
.LABEL $label$21
	$6 = $4
	
.LABEL $label$20
	*($5) = $4
	CALL $135($6)
	
.LABEL $label$7
	$1 = *($0)
	*((($11 + [8]) + [16])) = $1
	*((($11 + [8]) + [24])) = (int_64)-1
	*((($11 + [8]) + [32])) = (int_64)0
	*($11 + [8]) = $1
	*($11 + [16]) = $1
	*((($11 + [8]) + [40])) = [0]
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$29 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$24 }
	*($11 + [216]) = $9
	*($11 + [208]) = $1
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1440]
	$9 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$35 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$31
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$30 }
	*($11) = $9
	CALL $92(($11 + [8]), [5], ($11 + [208]), $0, $11, ($11 + [200]))
	$0 = *(($11 + [40]))
	if ( ($0 == 0) ){ goto $label$36 }
	$4 = ($11 + [44])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$40 }
	CALL $135($3)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$39 }
	$6 = *(($11 + [40]))
	goto $label$37 
	
.LABEL $label$38
	$6 = $0
	
.LABEL $label$37
	*($4) = $0
	CALL $135($6)
	
.LABEL $label$36
	CALL $25(($11 + [72]))
	*([0] + [4]) = ($11 + [224])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	*($9 + [152]) = $0
	$5 = (int_64)0
	$8 = (int_64)59
	$4 = [144]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$7 }
	$5 = (int_64)0
	$7 = (int_64)59
	$4 = [160]
	$6 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$7 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [1]
	*($9 + [8 align=4]) = *($9 + [144])
	CALL $12(($9 + [152]), ($9 + [8]))
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)0
	$7 = (int_64)59
	$4 = [176]
	$6 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$6 = ((int_64)$8 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$20 }
	$5 = (int_64)0
	$7 = (int_64)59
	$4 = [160]
	$6 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$26 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$8 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$20 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [2]
	*($9 + [16 align=4]) = *($9 + [136])
	CALL $12(($9 + [152]), ($9 + [16]))
	goto $label$6 
	
.LABEL $label$20
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [160])
	return (unreachable)
	
.LABEL $label$5
	if ( ((int_64)$2 <= (int_64)-3106564269734199297) ){ goto $label$33 }
	if ( ((int_64)$2 > (int_64)3966954939887910911) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-3106564269734199296) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$27 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [3]
	*($9 + [72 align=4]) = *($9 + [80])
	CALL $18(($9 + [152]), ($9 + [72]))
	goto $label$27 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)-8281831529777201152) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-7297067439286124544) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$27 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [4]
	*($9 + [40 align=4]) = *($9 + [112])
	CALL $18(($9 + [152]), ($9 + [40]))
	goto $label$27 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)3966954939887910912) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)4222381386624925696) ){ goto $label$27 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [5]
	*($9 + [64 align=4]) = *($9 + [88])
	CALL $15(($9 + [152]), ($9 + [64]))
	goto $label$27 
	
.LABEL $label$31
	*($9 + [124]) = [0]
	*($9 + [120]) = [6]
	*($9 + [32 align=4]) = *($9 + [120])
	CALL $15(($9 + [152]), ($9 + [32]))
	goto $label$27 
	
.LABEL $label$30
	*($9 + [132]) = [0]
	*($9 + [128]) = [7]
	*($9 + [24 align=4]) = *($9 + [128])
	CALL $15(($9 + [152]), ($9 + [24]))
	goto $label$27 
	
.LABEL $label$29
	*($9 + [100]) = [0]
	*($9 + [96]) = [8]
	*($9 + [56 align=4]) = *($9 + [96])
	CALL $18(($9 + [152]), ($9 + [56]))
	goto $label$27 
	
.LABEL $label$28
	*($9 + [108]) = [0]
	*($9 + [104]) = [9]
	*($9 + [48 align=4]) = *($9 + [104])
	CALL $18(($9 + [152]), ($9 + [48]))
	
.LABEL $label$27
	CALL eosio_exit([0])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = *($3 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)1414939908) ){ goto $label$1 }
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$5 }
	*(($7 = (($8 + [80]) + [8]))) = *(($3 + [8]))
	*($8 + [80]) = *($3)
	CALL $142(($8 + [64]), $4)
	*(($8 + [8])) = *($7)
	*($8) = *($8 + [80])
	CALL $118($0, $1, $2, $8, ($8 + [64]))
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $135(*($8 + [72]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	*(($7 = (($8 + [48]) + [8]))) = *(($3 + [8]))
	*($8 + [48]) = *($3)
	CALL $142(($8 + [32]), $4)
	*((($8 + [16]) + [8])) = *($7)
	*($8 + [16]) = *($8 + [48])
	CALL $119($0, $1, $2, ($8 + [16]), ($8 + [32]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $135(*($8 + [40]))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [256])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $114(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $115(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $135(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = *($3 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$1 }
	$7 = *($0)
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	CALL $142(($9 + [48]), $4)
	CALL require_auth($1)
	*(($9 + [88])) = (int_64)-1
	*(($9 + [96])) = (int_64)0
	$7 = *($0)
	*(($9 + [80])) = $7
	*($9 + [64]) = $7
	*($9 + [72]) = $7
	*(($9 + [104])) = [0]
	*($9 + [112]) = $7
	*(($9 + [120])) = $7
	*(($9 + [128])) = (int_64)-1
	*(($9 + [136])) = [0]
	*(($9 + [140])) = [0]
	*(($9 + [144])) = [0]
	*($9 + [152]) = $7
	*(($9 + [160])) = $7
	*(($9 + [168])) = (int_64)-1
	*(($9 + [176])) = [0]
	*(($9 + [180])) = [0]
	*(($9 + [184])) = [0]
	CALL $105(($9 + [64]), $5)
	CALL $25(($9 + [64]))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $135(*($9 + [56]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$1 }
	*(($8 = (($9 + [32]) + [8]))) = *(($3 + [8]))
	*($9 + [32]) = *($3)
	CALL $142(($9 + [16]), $4)
	*(($9 + [8])) = *($8)
	*($9) = *($9 + [32])
	CALL $106($0, $1, $2, $9, ($9 + [16]))
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $135(*($9 + [24]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [192])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $134([32])
	$6 = CALL $76($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $77(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [608])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [320])
	*([0] + [4]) = $10
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [384]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $8)
	*($10 + [280]) = (int_64)0
	*($10 + [272]) = (int_64)0
	*(($10 + [168])) = (int_64)-1
	*(($10 + [176])) = (int_64)0
	$7 = *($0)
	*(($10 + [160])) = $7
	*($10 + [144]) = $7
	*($10 + [152]) = $7
	*(($10 + [184])) = [0]
	*($10 + [192]) = $7
	*(($10 + [200])) = $7
	*(($10 + [208])) = (int_64)-1
	*(($10 + [216])) = [0]
	*(($10 + [220])) = [0]
	*(($10 + [224])) = [0]
	*($10 + [232]) = $7
	*(($10 + [240])) = $7
	*(($10 + [248])) = (int_64)-1
	*(($10 + [256])) = [0]
	*(($10 + [260])) = [0]
	*(($10 + [264])) = [0]
	CALL eosio_assert(CALL $86(($10 + [144]), $1, ($10 + [280]), ($10 + [272])), [1248])
	if ( (int_64)(*($10 + [280]) == 0) ){ goto $label$8 }
	if ( (CALL is_account(*($10 + [272])) == 0) ){ goto $label$8 }
	$7 = *($0)
	*(($10 + [72])) = $7
	*((($10 + [56]) + [24])) = (int_64)-1
	*(($10 + [88])) = (int_64)0
	*($10 + [56]) = $7
	*($10 + [64]) = $7
	*(($10 + [96])) = [0]
	*($10 + [104]) = $7
	*(($10 + [112])) = $7
	*(($10 + [120])) = (int_64)-1
	*(($10 + [128])) = [0]
	*(($10 + [132])) = [0]
	*(($10 + [136])) = [0]
	$9 = *($10 + [272])
	$7 = *($10 + [280])
	*($10 + [40]) = $7
	*($10 + [48]) = (int_64)1397703940
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$3 = [0]
	
.LABEL $label$9
	CALL eosio_assert($3, [256])
	*(($10 + [32])) = [0]
	*($10 + [24]) = (int_64)0
	$5 = CALL strlen([1280])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$16 }
	*($10 + [24]) = ($5 << [1])
	$3 = (($10 + [24]) | [1])
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$0 = (($5 + [16]) & [-16])
	$3 = CALL $134($0)
	*($10 + [24]) = ($0 | [1])
	*($10 + [32]) = $3
	*($10 + [28]) = $5
	
.LABEL $label$15
	CALL memcpy($3, [1280], $5)
	
.LABEL $label$14
	*(($3 + $5)) = [0]
	*((($10 + [8]) + [8])) = *((($10 + [40]) + [8]))
	*($10 + [8]) = *($10 + [40])
	CALL $87(($10 + [56]), $9, ($10 + [8]), ($10 + [24]))
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$17 }
	CALL $135(*($10 + [32]))
	
.LABEL $label$17
	$7 = *($10 + [280])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [1296])
	*((($10 + [304]) + [8])) = (int_64)0
	*($10 + [304]) = (int_64)0
	$5 = ($10 + [232])
	CALL $73(($10 + [288]), $5, *($10 + [144]), ($10 + [304]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)(int_64))(*($10 + [288]) - $7) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1312])
	*($10 + [288]) = (int_64))(*($10 + [288]) - $7)
	CALL $81($5, ($10 + [288]), *($10 + [144]))
	$0 = *(($10 + [128]))
	if ( ($0 == 0) ){ goto $label$18 }
	$4 = ($10 + [132])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	CALL $135($3)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($10 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $0
	
.LABEL $label$19
	*($4) = $0
	CALL $135($5)
	
.LABEL $label$18
	$0 = *(($10 + [88]))
	if ( ($0 == 0) ){ goto $label$8 }
	$4 = ($10 + [92])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$26 }
	CALL $135($3)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($10 + [88]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $0
	
.LABEL $label$23
	*($4) = $0
	CALL $135($5)
	
.LABEL $label$8
	CALL $25(($10 + [144]))
	*([0] + [4]) = ($10 + [320])
	return (unreachable)
	
.LABEL $label$7
	CALL $136(($10 + [24]))
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $135($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $135($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $135($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $135($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $135($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $135($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $135($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $135($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_64 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*((($9 + [32]) + [8])) = (int_64)0
	*($9 + [32]) = (int_64)0
	$1 = ($0 + [88])
	CALL $73(($9 + [16]), $1, *($0), ($9 + [32]))
	$2 = *($9 + [24])
	*($9 + [32]) = $2
	$3 = ($0 + [8])
	if ( (int_64)($2 == 0) ){ goto $label$6 }
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$7 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$7 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [416])
	if ( $7 ){ goto $label$4 }
	$2 = (int_64)0
	goto $label$1 
	
.LABEL $label$6
	$2 = (int_64)1
	goto $label$3 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $63($3, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [416])
	
.LABEL $label$4
	$2 = (int_64)0
	if ( ((int_32)*($7 + [64]) != (int_32)[2]) ){ goto $label$1 }
	$2 = ((int_64)*(($9 + [24])) + (int_64)1)
	
.LABEL $label$3
	*(($7 = (($9 + [16]) + [8]))) = $2
	CALL $81($1, ($9 + [16]), *($0))
	*($9 + [32]) = *($7)
	$2 = *($0)
	*($9) = ($9 + [32])
	CALL $82(($9 + [8]), $3, $2, $9)
	$2 = *($9 + [32])
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [48])
	return $2
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [176]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	$7 = *($1)
	*(($10 + [56])) = [0]
	*($10 + [32]) = $7
	*($10 + [24]) = $8
	*($10 + [40]) = (int_64)-1
	*($10 + [48]) = (int_64)0
	$5 = CALL $74(($10 + [24]), (int_64)5459781, [1216])
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$3 = *($10 + [48])
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = ($10 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $135($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($10 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $3
	
.LABEL $label$8
	*($4) = $3
	CALL $135($5)
	
.LABEL $label$7
	*((($10 + [24]) + [8])) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL $73(($10 + [8]), ($1 + [88]), *($1), ($10 + [24]))
	$7 = (int_64)
	*($0) = $7(*($0) - *($10 + [8])))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1200])
	*([0] + [4]) = ($10 + [64])
}

int_64 .FUNC $52 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3617211063646814208, (int_64)3617211063646814208)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $68($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $2
	CALL $72($4, $0, $1, ($4 + [8]))
	$1 = *(*($4 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3617211063646814208, (int_64)3617211063646814208)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $68($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [624])
	CALL $69($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $70($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = $2
	*($10 + [32]) = $3
	$9 = [0]
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$2 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$7), [416])
	if ( $6 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $63($7, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$7), [416])
	
.LABEL $label$4
	$9 = [0]
	if ( *($6 + [64]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*($10 + [28]) = $8
	*($10 + [24]) = ($8 + [3600])
	*($10 + [23]) = [0]
	*($10 + [4]) = ($10 + [28])
	*($10) = ($10 + [40])
	*($10 + [8]) = ($10 + [24])
	*($10 + [12]) = ($10 + [32])
	*($10 + [16]) = ($10 + [23])
	CALL eosio_assert([1], [624])
	CALL $64($7, $6, (int_64)0, $10)
	$9 = ((int_32)*($10 + [23]) != (int_32)[0])
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
	return $9
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2852345010218888704, (int_64)-2852345010218888704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $41($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [624])
	CALL $42($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $43($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $134(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $134([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $27(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [400])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $135($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $135($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $135($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $59($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $27($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $60($4, $1)
	CALL $62(CALL $61(CALL $61($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $117($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $137($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $134($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $137($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $135($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $136($7)
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1600])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $27($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [608])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $116(*($1), ($0 + [32]))
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [576])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $134([56])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = ($4 + [24])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [256])
	*($4 + [44]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($4 + [8])
	*($8 + [40]) = $4
	*($8 + [48]) = ($4 + [16])
	*($8 + [52]) = $3
	*($8 + [56]) = ($4 + [40])
	CALL $40(($8 + [40]), ($8 + [32]))
	*($4 + [48]) = $1
	*($8 + [32]) = $4
	$7 = *($4)
	*($8 + [40]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [32]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $38($2, ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $135($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $4
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [928])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [976])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1040])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [80])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$5 = ($1 + [64])
	$4 = *($1)
	if ( ((int_32)*($1 + [64]) != (int_32)[1]) ){ goto $label$2 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	$3 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	*(*($3 + [4])) = [-4]
	$3 = ($1 + [40])
	
.LABEL $label$1
	CALL eosio_assert([1], [784])
	$6 = $7
	$7 = ($6 + [-80])
	*([0] + [4]) = $7
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($6 + [-6])
	*($8 + [24]) = ($8 + [8])
	*($8 + [52]) = $3
	*($8 + [32]) = $1
	*($8 + [36]) = ($1 + [8])
	*($8 + [40]) = ($1 + [16])
	*($8 + [44]) = ($1 + [24])
	*($8 + [48]) = ($1 + [32])
	*($8 + [56]) = ($1 + [48])
	*($8 + [60]) = ($1 + [56])
	*($8 + [64]) = ($1 + [60])
	*($8 + [68]) = $5
	*($8 + [72]) = ($1 + [65])
	*($8 + [76]) = ($1 + [72])
	CALL $65(($8 + [32]), ($8 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $7, [74])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$8 = ($5 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $134(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	*(($9 = ($8 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $134([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($9 + [32])) = [0]
	*(($9 + [36])) = [0]
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$6 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($7 = ($9 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($7 = ($9 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$9 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($9 + [16])) = $2
	CALL $135($2)
	
.LABEL $label$10
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($9 + [4])) = $2
	CALL $135($2)
	
.LABEL $label$11
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $135($7)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	CALL $142(($11 + [8]), $4)
	if ( (*($11 + [8]) & [1]) ){ goto $label$4 }
	$4 = (($11 + [8]) | [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($11 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = CALL strlen($4)
	CALL eosio_assert(((int_32)$8 < (int_32)[20]), [16])
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$2 }
	$9 = (int_64)0
	
.LOOP $label$5:
	$7 = *($4)
	CALL eosio_assert(((int_64)$7 > (int_64)47), [48])
	CALL eosio_assert(((int_64)$7 < (int_64)58), [80])
	$4 = ($4 + [1])
	$9 = ((int_64)((int_64)$7 + (int_64)((int_64)$9 * (int_64)10)) + (int_64)-48)
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $135(*($11 + [16]))
	
.LABEL $label$6
	$7 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$7 }
	$4 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$8:
	if ( ((int_64)*(*($4)) == (int_64)$9) ){ goto $label$7 }
	$10 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$12 }
	$4 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$6), [416])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-2849807356034285568, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $35($6, $4)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$6), [416])
	
.LABEL $label$11
	$8 = [-1]
	if ( ((int_64)$9 != (int_64)*($4)) ){ goto $label$9 }
	$8 = [-2]
	if ( ((int_64)*($4 + [8]) != (int_64)$2) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($4 + [32]))), [1504])
	$8 = [-3]
	if ( ((int_64)*($3) != (int_64)*($4 + [24])) ){ goto $label$9 }
	$8 = [-4]
	$0 = *($4 + [40])
	$10 = (CASTING uint_32)(uint_64 $7)
	if ( ($10 <= $0) ){ goto $label$9 }
	$8 = [-5]
	if ( ((uint_32)($10 - $0) > (uint_32)[2]) ){ goto $label$9 }
	$8 = [-6]
	if ( ((int_64)*($4 + [16]) != (int_64)$1) ){ goto $label$9 }
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [896])
	$8 = [0]
	$10 = CALL db_next_i64(*($4 + [48]), ($11 + [24]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	CALL $35($6, $10)
	
.LABEL $label$13
	CALL $112($6, $4)
	goto $label$9 
	
.LABEL $label$10
	$8 = [-33]
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [32])
	return $8
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $134($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $135($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $118 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [320])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$10 = *($3)
	CALL eosio_assert(((int_64)$10 > (int_64)0), [112])
	*($12 + [280]) = [0]
	*($12 + [272]) = (int_64)0
	CALL _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE($4, ($12 + [272]))
	*((($12 + [224]) + [24])) = (int_64)-1
	*(($8 = (($12 + [224]) + [32]))) = (int_64)0
	$9 = *($0)
	*((($12 + [224]) + [16])) = $9
	*($12 + [224]) = $9
	*($12 + [232]) = $9
	*((($12 + [224]) + [40])) = [0]
	*((($12 + [96]) + [16])) = $9
	*((($12 + [96]) + [24])) = (int_64)-1
	*((($12 + [96]) + [32])) = (int_64)0
	*((($12 + [96]) + [40])) = [0]
	*($12 + [104]) = $9
	*($12 + [96]) = $9
	*($12 + [144]) = $9
	*(($12 + [152])) = $9
	*(($12 + [160])) = (int_64)-1
	*(($12 + [168])) = [0]
	*(($12 + [172])) = [0]
	*(($12 + [176])) = [0]
	*($12 + [184]) = $9
	*(($12 + [192])) = $9
	*(($12 + [200])) = (int_64)-1
	*(($12 + [208])) = [0]
	*(($12 + [212])) = [0]
	*(($12 + [216])) = [0]
	$4 = *($12 + [272])
	if ( (((int_32)(*($12 + [276]) - $4) / (int_32)[12]) <= [2]) ){ goto $label$1 }
	CALL $142(($12 + [80]), $4)
	if ( CALL $140(($12 + [80]), [368]) ){ goto $label$2 }
	CALL $142(($12 + [64]), (*($12 + [272]) + [12]))
	CALL eosio_assert(((int_32)(*($12 + [276]) - *($12 + [272])) == (int_32)[24]), [1616])
	CALL $142(($12 + [48]), ($12 + [64]))
	if ( (*($12 + [48]) & [1]) ){ goto $label$6 }
	$4 = (($12 + [48]) | [1])
	goto $label$5 
	
.LABEL $label$6
	$4 = *($12 + [56])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = CALL strlen($4)
	CALL eosio_assert(((int_32)$3 < (int_32)[20]), [16])
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$4 }
	$11 = (int_64)0
	
.LOOP $label$7:
	$9 = *($4)
	CALL eosio_assert(((int_64)$9 > (int_64)47), [48])
	CALL eosio_assert(((int_64)$9 < (int_64)58), [80])
	$4 = ($4 + [1])
	$11 = ((int_64)((int_64)$9 + (int_64)((int_64)$11 * (int_64)10)) + (int_64)-48)
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$11 = (int_64)0
	
.LABEL $label$3
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL $135(*($12 + [56]))
	
.LABEL $label$8
	CALL $107($0)
	*(($12 + [312])) = (int_64)0
	*($12 + [304]) = (int_64)0
	CALL $73(($12 + [288]), ($12 + [184]), *($12 + [96]), ($12 + [304]))
	$9 = *($12 + [296])
	*($12 + [288]) = $9
	CALL eosio_assert(((int_32)CALL $88(($12 + [96]), $9) ^ (int_32)[1]), [1664])
	*($12 + [40]) = (int_64)0
	*($12 + [32]) = (int_64)0
	$4 = (CALL $121(($12 + [96]), $9, $11, ($12 + [40]), ($12 + [32])) + [4])
	if ( ((uint_32)$4 > (uint_32)[4]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$14
	CALL eosio_assert([0], [1856])
	goto $label$9 
	
.LABEL $label$13
	CALL eosio_assert([0], [1904])
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [1808])
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [1760])
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [1712])
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*($12 + [40]) == (int_64)$10), [1952])
	*($12 + [304]) = (int_64)0
	$4 = ($12 + [232])
	*($12 + [304]) = ((int_64)CALL $52($4, *($12 + [224]), ($12 + [304])) + (int_64)1)
	CALL $53($4, ($12 + [304]), *($12 + [224]))
	$5 = *($12 + [304])
	*($12 + [24]) = (int_64)0
	*($12 + [20]) = [0]
	$4 = (CALL $122(($12 + [96]), *($12 + [288]), $11, *($12 + [40]), *($12 + [32]), $1, $5, ($12 + [24]), ($12 + [20])) + [4])
	if ( ((uint_32)$4 > (uint_32)[4]) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$20
	CALL eosio_assert([0], [2128])
	goto $label$15 
	
.LABEL $label$19
	CALL eosio_assert([0], [2176])
	goto $label$15 
	
.LABEL $label$18
	CALL eosio_assert([0], [2080])
	goto $label$15 
	
.LABEL $label$17
	CALL eosio_assert([0], [2032])
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [1984])
	
.LABEL $label$15
	$6 = (*($12 + [20]) + [1])
	*($12 + [20]) = $6
	$7 = *($0)
	$9 = (int_64)0
	$1 = (int_64)59
	$4 = [384]
	$10 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$26 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$21 }
	*($12 + [312]) = $10
	*($12 + [304]) = $7
	$9 = (int_64)0
	$1 = (int_64)59
	$4 = [1184]
	$10 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$27 }
	*($12 + [8]) = $10
	CALL $55(($12 + [224]), $5, $6, ($12 + [304]), $0, ($12 + [8]), ($12 + [288]))
	$9 = *($12 + [24])
	*($12 + [312]) = (int_64)0
	*($12 + [304]) = $9
	CALL cancel_deferred(($12 + [304]))
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $135(*($12 + [72]))
	
.LABEL $label$2
	if ( ((*($12 + [80]) & [1]) == 0) ){ goto $label$1 }
	CALL $135(*($12 + [88]))
	
.LABEL $label$1
	CALL $25(($12 + [96]))
	$0 = *($8)
	if ( ($0 == 0) ){ goto $label$33 }
	$8 = ($12 + [260])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$35 }
	
.LOOP $label$36:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$37 }
	CALL $135($3)
	
.LABEL $label$37
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$36 }
	$4 = *(($12 + [256]))
	goto $label$34 
	
.LABEL $label$35
	$4 = $0
	
.LABEL $label$34
	*($8) = $0
	CALL $135($4)
	
.LABEL $label$33
	$0 = *($12 + [272])
	if ( ($0 == 0) ){ goto $label$38 }
	$4 = *($12 + [276])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$40 }
	$3 = ([0] - $0)
	$4 = ($4 + [-12])
	
.LOOP $label$41:
	if ( ((*($4) & [1]) == 0) ){ goto $label$42 }
	CALL $135(*(($4 + [8])))
	
.LABEL $label$42
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$41 }
	$4 = *($12 + [272])
	goto $label$39 
	
.LABEL $label$40
	$4 = $0
	
.LABEL $label$39
	*($12 + [276]) = $0
	CALL $135($4)
	
.LABEL $label$38
	*([0] + [4]) = ($12 + [320])
	$4
	$4
}

void .FUNC $119 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $9)
	*(($11 + [80])) = (int_64)-1
	*(($11 + [88])) = (int_64)0
	$8 = *($0)
	*(($11 + [72])) = $8
	*($11 + [56]) = $8
	*($11 + [64]) = $8
	*(($11 + [96])) = [0]
	*($11 + [104]) = $8
	*(($11 + [112])) = $8
	*(($11 + [120])) = (int_64)-1
	*(($6 = ($11 + [128]))) = [0]
	*(($11 + [132])) = [0]
	*(($11 + [136])) = [0]
	*(($5 = (($11 + [40]) + [8]))) = *(($3 + [8]))
	*($11 + [40]) = *($3)
	CALL $142(($11 + [24]), $4)
	*((($11 + [8]) + [8])) = *($5)
	*($11 + [8]) = *($11 + [40])
	$5 = CALL $120(($11 + [56]), $2, ($11 + [8]), ($11 + [24]))
	if ( ((*($11 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $135(*($11 + [32]))
	
.LABEL $label$7
	CALL eosio_assert(($5 == 0), [1472])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$8 }
	$0 = ($11 + [132])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $135($5)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($11 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*($0) = $3
	CALL $135($6)
	
.LABEL $label$8
	$3 = *(($11 + [88]))
	if ( ($3 == 0) ){ goto $label$13 }
	$0 = ($11 + [92])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $135($5)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$16 }
	$6 = *(($11 + [88]))
	goto $label$14 
	
.LABEL $label$15
	$6 = $3
	
.LABEL $label$14
	*($0) = $3
	CALL $135($6)
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [144])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $27($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [400])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [400])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $31(CALL $30($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [400])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $32(*($1), ($0 + [32]))
}

int_64 .FUNC $55 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	$7 = CALL current_time()
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*($8 + [28]) = [0]
	*($8 + [32]) = [0]
	*($8 + [36]) = [0]
	*($8 + [40]) = [0]
	*($8 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($8 + [52]) = [0]
	*(($8 + [56])) = [0]
	*(($8 + [60])) = [0]
	*($8 + [64]) = [0]
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	CALL $56(($8 + [52]), $3, $4, $5, $6)
	*($8 + [36]) = $2
	$7 = *($0)
	*($8 + [8]) = (int_64)0
	*($8) = $1
	CALL $57(($8 + [80]), ($8 + [16]))
	$0 = *($8 + [80])
	CALL send_deferred($8, $7, $0, (*($8 + [84]) - $0), [0])
	$0 = *($8 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($8 + [84]) = $0
	CALL $135($0)
	
.LABEL $label$1
	CALL $58(($8 + [16]))
	*([0] + [4]) = ($8 + [96])
	return $1
}

void .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$3 = *($0)
	*(($5 + [24])) = $3
	*(($5 + [32])) = (int_64)-1
	*(($0 = ($5 + [40]))) = (int_64)0
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*(($5 + [48])) = [0]
	*($5 + [56]) = (int_64)0
	CALL eosio_assert((int_64)(CALL $98(($5 + [16]), $3, ($5 + [56])) == 0), [1568])
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $135($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $106 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [224])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $9)
	CALL $107($0)
	*(($11 + [160])) = (int_64)-1
	*(($11 + [168])) = (int_64)0
	$8 = *($0)
	*(($11 + [152])) = $8
	*($11 + [136]) = $8
	*($11 + [144]) = $8
	*(($11 + [176])) = [0]
	*($11 + [184]) = $8
	*(($11 + [192])) = $8
	*(($11 + [200])) = (int_64)-1
	*(($11 + [208])) = [0]
	*(($11 + [212])) = [0]
	*(($11 + [216])) = [0]
	*(($6 = (($11 + [120]) + [8]))) = *(($3 + [8]))
	*($11 + [120]) = *($3)
	CALL $142(($11 + [104]), $4)
	*((($11 + [8]) + [8])) = *($6)
	*($11 + [8]) = *($11 + [120])
	$3 = CALL $108(($11 + [136]), $2, ($11 + [8]), ($11 + [104]))
	if ( ((*($11 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $135(*($11 + [112]))
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = *($0)
	*(($11 + [72])) = $1
	*(($11 + [80])) = (int_64)-1
	$8 = (int_64)0
	*(($11 + [88])) = (int_64)0
	*($11 + [56]) = $1
	*($11 + [64]) = $1
	*(($11 + [96])) = [0]
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$14 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	*($11 + [48]) = $9
	*($11 + [40]) = $1
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$9 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$20 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$5 = ($5 + [165])
	goto $label$18 
	
.LABEL $label$20
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$15 }
	*($11 + [32]) = $9
	CALL $109(($11 + [56]), ($11 + [40]), $0, ($11 + [32]), ($11 + [24]))
	$0 = *(($11 + [88]))
	if ( ($0 == 0) ){ goto $label$8 }
	$4 = ($11 + [92])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL $135($5)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($11 + [88]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $0
	
.LABEL $label$21
	*($4) = $0
	CALL $135($6)
	
.LABEL $label$8
	CALL eosio_assert(($3 == 0), [1472])
	$0 = *(($11 + [208]))
	if ( ($0 == 0) ){ goto $label$25 }
	$3 = ($11 + [212])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$27 }
	
.LOOP $label$28:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$29 }
	CALL $135($5)
	
.LABEL $label$29
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$28 }
	$6 = *(($11 + [208]))
	goto $label$26 
	
.LABEL $label$27
	$6 = $0
	
.LABEL $label$26
	*($3) = $0
	CALL $135($6)
	
.LABEL $label$25
	$0 = *(($11 + [168]))
	if ( ($0 == 0) ){ goto $label$30 }
	$3 = ($11 + [172])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	CALL $135($5)
	
.LABEL $label$34
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$33 }
	$6 = *(($11 + [168]))
	goto $label$31 
	
.LABEL $label$32
	$6 = $0
	
.LABEL $label$31
	*($3) = $0
	CALL $135($6)
	
.LABEL $label$30
	*([0] + [4]) = ($11 + [224])
}

void .FUNC $21 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [208])
	*([0] + [4]) = $10
	$1 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1104]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $8)
	*((($10 + [80]) + [24])) = (int_64)-1
	$7 = (int_64)0
	*((($10 + [80]) + [32])) = (int_64)0
	$9 = *($0)
	*((($10 + [80]) + [16])) = $9
	*($10 + [80]) = $9
	*($10 + [88]) = $9
	*((($10 + [80]) + [40])) = [0]
	*($10 + [128]) = $9
	*(($10 + [136])) = $9
	*(($10 + [144])) = (int_64)-1
	*(($10 + [152])) = [0]
	*(($10 + [156])) = [0]
	*(($10 + [160])) = [0]
	*($10 + [168]) = $9
	*(($10 + [176])) = $9
	*(($10 + [184])) = (int_64)-1
	*(($10 + [192])) = [0]
	*(($10 + [196])) = [0]
	*(($10 + [200])) = [0]
	$6 = CALL $50(($10 + [80]))
	*($10 + [72]) = $6
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1120])
	CALL $51(($10 + [24]), ($10 + [80]))
	$8 = *($10 + [24])
	*((($10 + [24]) + [24])) = (int_64)-1
	*((($10 + [24]) + [32])) = (int_64)0
	$9 = *($0)
	*((($10 + [24]) + [16])) = $9
	*($10 + [24]) = $9
	*($10 + [32]) = $9
	*((($10 + [24]) + [40])) = [0]
	*($10 + [8]) = (int_64)0
	$5 = ($10 + [32])
	*($10 + [8]) = ((int_64)CALL $52($5, $9, ($10 + [8])) + (int_64)1)
	CALL $53($5, ($10 + [8]), *($10 + [24]))
	$1 = *($10 + [8])
	CALL eosio_assert(CALL $54(($10 + [80]), $6, $8, $1), [1152])
	$3 = *($0)
	$6 = (int_64)59
	$5 = [384]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$12 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($10 + [16]) = $8
	*($10 + [8]) = $3
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1184]
	$8 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$18 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	*($10) = $8
	CALL $55(($10 + [24]), $1, [3601], ($10 + [8]), $0, $10, ($10 + [72]))
	$0 = *(($10 + [56]))
	if ( ($0 == 0) ){ goto $label$19 }
	$4 = ($10 + [60])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	CALL $135($2)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($10 + [56]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $0
	
.LABEL $label$20
	*($4) = $0
	CALL $135($5)
	
.LABEL $label$19
	CALL $25(($10 + [80]))
	*([0] + [4]) = ($10 + [208])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [208])
	*([0] + [4]) = $11
	$2 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $9)
	*((($11 + [80]) + [24])) = (int_64)-1
	$8 = (int_64)0
	*((($11 + [80]) + [32])) = (int_64)0
	$10 = *($0)
	*((($11 + [80]) + [16])) = $10
	*($11 + [80]) = $10
	*($11 + [88]) = $10
	*((($11 + [80]) + [40])) = [0]
	*($11 + [128]) = $10
	*(($11 + [136])) = $10
	*(($11 + [144])) = (int_64)-1
	*(($11 + [152])) = [0]
	*(($11 + [156])) = [0]
	*(($11 + [160])) = [0]
	*($11 + [168]) = $10
	*(($11 + [176])) = $10
	*(($11 + [184])) = (int_64)-1
	*(($11 + [192])) = [0]
	*(($11 + [196])) = [0]
	*(($11 + [200])) = [0]
	$7 = CALL $50(($11 + [80]))
	*($11 + [72]) = $7
	CALL eosio_assert(((int_64)$7 != (int_64)0), [1120])
	CALL $51(($11 + [24]), ($11 + [80]))
	$9 = *($11 + [24])
	*((($11 + [24]) + [24])) = (int_64)-1
	*((($11 + [24]) + [32])) = (int_64)0
	$10 = *($0)
	*((($11 + [24]) + [16])) = $10
	*($11 + [24]) = $10
	*($11 + [32]) = $10
	*((($11 + [24]) + [40])) = [0]
	*($11 + [8]) = (int_64)0
	$6 = ($11 + [32])
	*($11 + [8]) = ((int_64)CALL $52($6, $10, ($11 + [8])) + (int_64)1)
	CALL $53($6, ($11 + [8]), *($11 + [24]))
	$2 = *($11 + [8])
	CALL eosio_assert(CALL $54(($11 + [80]), $7, $9, $2), [1152])
	$4 = *($0)
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$12 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($11 + [16]) = $9
	*($11 + [8]) = $4
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1184]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$18 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$3 = ($3 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$13 }
	*($11) = $9
	CALL $55(($11 + [24]), $2, [3601], ($11 + [8]), $0, $11, ($11 + [72]))
	$0 = *(($11 + [56]))
	if ( ($0 == 0) ){ goto $label$19 }
	$5 = ($11 + [60])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	CALL $135($3)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$22 }
	$6 = *(($11 + [56]))
	goto $label$20 
	
.LABEL $label$21
	$6 = $0
	
.LABEL $label$20
	*($5) = $0
	CALL $135($6)
	
.LABEL $label$19
	CALL $25(($11 + [80]))
	*([0] + [4]) = ($11 + [208])
}

int_32 .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [416])
	if ( $6 ){ goto $label$5 }
	$6 = [-1]
	goto $label$3 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-2849224558420951040, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $46($5, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [416])
	
.LABEL $label$5
	*($8 + [16]) = (int_64)0
	*($8 + [12]) = [0]
	*($8 + [28]) = ($8 + [12])
	*($8 + [24]) = ($8 + [16])
	CALL eosio_assert([1], [624])
	CALL $47($5, $6, (int_64)0, ($8 + [24]))
	if ( ((int_64)*($6 + [8]) != (int_64)0) ){ goto $label$7 }
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [896])
	$7 = CALL db_next_i64(*($6 + [20]), ($8 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	CALL $46($5, $7)
	
.LABEL $label$8
	CALL $48($5, $6)
	
.LABEL $label$7
	*($2) = *($8 + [16])
	$6 = *($8 + [12])
	goto $label$3 
	
.LABEL $label$4
	$6 = [-1]
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [272])
	*([0] + [4]) = $6
	CALL require_auth($1)
	*(($6 + [168])) = (int_64)-1
	*(($6 + [176])) = (int_64)0
	$5 = *($0)
	*(($6 + [160])) = $5
	*($6 + [144]) = $5
	*($6 + [152]) = $5
	*(($6 + [184])) = [0]
	*($6 + [192]) = $5
	*(($6 + [200])) = $5
	*(($6 + [208])) = (int_64)-1
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*(($6 + [224])) = [0]
	*($6 + [232]) = $5
	*(($6 + [240])) = $5
	*(($6 + [248])) = (int_64)-1
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*(($6 + [264])) = [0]
	*($6 + [136]) = (int_64)0
	$3 = CALL $23(($6 + [144]), $1, ($6 + [136]))
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$2 }
	CALL eosio_assert([0], [192])
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [208])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [240])
	
.LABEL $label$1
	$5 = *($0)
	*(($6 + [64])) = $5
	*((($6 + [48]) + [24])) = (int_64)-1
	*(($6 + [80])) = (int_64)0
	*($6 + [48]) = $5
	*($6 + [56]) = $5
	*(($6 + [88])) = [0]
	*($6 + [96]) = $5
	*(($6 + [104])) = $5
	*(($6 + [112])) = (int_64)-1
	*(($6 + [120])) = [0]
	*(($6 + [124])) = [0]
	*(($6 + [128])) = [0]
	$5 = *($6 + [136])
	*($6 + [32]) = $5
	*($6 + [40]) = (int_64)1414939908
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [304])
	$5 = (int_64)5527109
	$0 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	CALL eosio_assert($3, [256])
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	$0 = CALL strlen([288])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$12 }
	*($6 + [16]) = ($0 << [1])
	$3 = (($6 + [16]) | [1])
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = (($0 + [16]) & [-16])
	$3 = CALL $134($2)
	*($6 + [16]) = ($2 | [1])
	*($6 + [24]) = $3
	*($6 + [20]) = $0
	
.LABEL $label$11
	CALL memcpy($3, [288], $0)
	
.LABEL $label$10
	*(($3 + $0)) = [0]
	*(($6 + [8])) = *((($6 + [32]) + [8]))
	*($6) = *($6 + [32])
	CALL $24(($6 + [48]), $1, $6, ($6 + [16]))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $135(*($6 + [24]))
	
.LABEL $label$13
	$2 = *(($6 + [120]))
	if ( ($2 == 0) ){ goto $label$14 }
	$4 = ($6 + [124])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $135($3)
	
.LABEL $label$18
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($6 + [120]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $2
	
.LABEL $label$15
	*($4) = $2
	CALL $135($0)
	
.LABEL $label$14
	$2 = *(($6 + [80]))
	if ( ($2 == 0) ){ goto $label$19 }
	$4 = ($6 + [84])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	CALL $135($3)
	
.LABEL $label$23
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$22 }
	$0 = *(($6 + [80]))
	goto $label$20 
	
.LABEL $label$21
	$0 = $2
	
.LABEL $label$20
	*($4) = $2
	CALL $135($0)
	
.LABEL $label$19
	CALL $25(($6 + [144]))
	*([0] + [4]) = ($6 + [272])
	return (unreachable)
	
.LABEL $label$9
	CALL $136(($6 + [16]))
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $135($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $135($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $135($4)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $135($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $135($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [208])
	*([0] + [4]) = $14
	*(($14 + [168])) = [0]
	*($14 + [160]) = (int_64)0
	$7 = CALL strlen([128])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($14 + [160]) = ($7 << [1])
	$5 = (($14 + [160]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $134($4)
	*($14 + [160]) = ($4 | [1])
	*($14 + [168]) = $5
	*($14 + [164]) = $7
	
.LABEL $label$4
	CALL memcpy($5, [128], $7)
	
.LABEL $label$3
	*(($5 + $7)) = [0]
	*(($14 + [152])) = [0]
	*($14 + [144]) = (int_64)0
	$7 = CALL strlen([368])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($14 + [144]) = ($7 << [1])
	$5 = (($14 + [144]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $134($4)
	*($14 + [144]) = ($4 | [1])
	*($14 + [152]) = $5
	*($14 + [148]) = $7
	
.LABEL $label$7
	CALL memcpy($5, [368], $7)
	
.LABEL $label$6
	*(($5 + $7)) = [0]
	$7 = *($14 + [160])
	$5 = ($7 & [1])
	$4 = (($14 + [160]) | [1])
	CALL $138(($14 + [144]), ( *($14 + [168]) ? $4 : $5 ), ( *($14 + [164]) ? uint_32($7 >> [1]) : $5 ))
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [144]
	$8 = (int_64)0
	
.LOOP $label$9:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$10 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$9 }
	$10 = *(($2 + [8]))
	*((($14 + [112]) + [8])) = $10
	$11 = *($2)
	*((($14 + [8]) + [8])) = $10
	*($14 + [112]) = $11
	*($14 + [12]) = *($14 + [116])
	*($14 + [8]) = *($14 + [112])
	CALL $26(($14 + [128]), $0, $8, $1, ($14 + [8]))
	$7 = *($14 + [128])
	$5 = ($7 & [1])
	CALL $138(($14 + [144]), ( *($14 + [136]) ? (($14 + [128]) | [1]) : $5 ), ( *($14 + [132]) ? uint_32($7 >> [1]) : $5 ))
	$7 = *($14 + [160])
	$5 = ($7 & [1])
	CALL $138(($14 + [144]), ( *((($14 + [160]) + [8])) ? $4 : $5 ), ( *($14 + [164]) ? uint_32($7 >> [1]) : $5 ))
	$7 = *($3)
	$5 = ($7 & [1])
	CALL $138(($14 + [144]), ( *($3 + [8]) ? ($3 + [1]) : $5 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $5 ))
	$6 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [384]
	$8 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$18 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$11 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$13 }
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [144]
	$12 = (int_64)0
	
.LOOP $label$19:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$20 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [165])
	goto $label$21 
	
.LABEL $label$22
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$20
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$19 }
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [160]
	$13 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$28 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$5 = ($5 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$24
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$23 }
	*((($14 + [24]) + [28])) = *(($2 + [12]))
	*((($14 + [24]) + [24])) = *(($2 + [8]))
	*((($14 + [24]) + [20])) = *(($2 + [4]))
	*($14 + [32]) = $1
	*($14 + [24]) = $6
	*($14 + [40]) = *($2)
	CALL $142((($14 + [24]) + [32]), ($14 + [144]))
	*($14 + [80]) = $13
	*($14 + [72]) = $12
	*(($7 = CALL $134([16]))) = $6
	*($7 + [8]) = $8
	*((($14 + [72]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($14 + [72]) + [24])) = $5
	*((($14 + [72]) + [20])) = $5
	*($14 + [88]) = $7
	*($14 + [100]) = [0]
	*((($14 + [72]) + [36])) = [0]
	$7 = *($14 + [56])
	$5 = ( *((($14 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$10 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [72]) + [28])
	
.LOOP $label$29:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$29 }
	if ( ($7 == 0) ){ goto $label$31 }
	CALL $27($5, $7)
	$5 = *(($14 + [104]))
	$7 = *(($14 + [100]))
	goto $label$30 
	
.LABEL $label$31
	$5 = [0]
	$7 = [0]
	
.LABEL $label$30
	*($14 + [196]) = $7
	*($14 + [192]) = $7
	*($14 + [200]) = $5
	*($14 + [176]) = ($14 + [192])
	*($14 + [184]) = ($14 + [24])
	CALL $28(($14 + [184]), ($14 + [176]))
	CALL $29(($14 + [192]), ($14 + [72]))
	$7 = *($14 + [192])
	CALL send_inline($7, (*($14 + [196]) - $7))
	$7 = *($14 + [192])
	if ( ($7 == 0) ){ goto $label$32 }
	*($14 + [196]) = $7
	CALL $135($7)
	
.LABEL $label$32
	$7 = *($14 + [100])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($14 + [104])) = $7
	CALL $135($7)
	
.LABEL $label$33
	$7 = *($14 + [88])
	if ( ($7 == 0) ){ goto $label$34 }
	*(($14 + [92])) = $7
	CALL $135($7)
	
.LABEL $label$34
	if ( ((*($14 + [56]) & [1]) == 0) ){ goto $label$35 }
	CALL $135(*(($14 + [64])))
	
.LABEL $label$35
	if ( ((*($14 + [128]) & [1]) == 0) ){ goto $label$36 }
	CALL $135(*(($14 + [136])))
	
.LABEL $label$36
	if ( ((*($14 + [144]) & [1]) == 0) ){ goto $label$37 }
	CALL $135(*($14 + [152]))
	
.LABEL $label$37
	if ( ((*($14 + [160]) & [1]) == 0) ){ goto $label$38 }
	CALL $135(*(($14 + [168])))
	
.LABEL $label$38
	*([0] + [4]) = ($14 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $136(($14 + [160]))
	
.LABEL $label$1
	CALL $136(($14 + [144]))
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $134($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $141($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $135($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = $2
	*($10 + [32]) = $3
	*($10) = (int_64)0
	$8 = ($1 + [8])
	*($10) = ((int_64)CALL $33($8, *($1), $10) + (int_64)1)
	CALL $34($8, $10, *($1))
	$3 = *($10)
	*($10 + [24]) = $3
	$5 = *(($1 + [72]))
	$9 = *(($1 + [76]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$3) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($1 + [48])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$8), [416])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*(($1 + [48])), *(($1 + [56])), (int_64)-2849807356034285568, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $35($8, $7) + [44]) == (int_32)$8), [416])
	
.LABEL $label$4
	CALL eosio_assert([0], [480])
	
.LABEL $label$3
	$3 = *($1)
	*($10 + [4]) = $4
	*($10) = ($10 + [24])
	*($10 + [8]) = ($10 + [32])
	*($10 + [12]) = ($10 + [40])
	CALL $36(($10 + [16]), $8, $3, $10)
	CALL _Z16uint64_to_stringy($0, *($10 + [24]))
	*([0] + [4]) = ($10 + [48])
}

int_64 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [16]) = (int_64)0
	$6 = ($0 + [8])
	*($8 + [16]) = ((int_64)CALL $52($6, *($0), ($8 + [16])) + (int_64)1)
	CALL $53($6, ($8 + [16]), *($0))
	$5 = *($8 + [16])
	$7 = CALL current_time()
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*($8 + [28]) = [0]
	*($8 + [32]) = [0]
	*($8 + [36]) = [0]
	*($8 + [40]) = [0]
	*($8 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($8 + [52]) = [0]
	*(($8 + [56])) = [0]
	*(($8 + [60])) = [0]
	*($8 + [64]) = [0]
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	CALL $110(($8 + [52]), $1, $2, $3, $4)
	$7 = *($0)
	*($8 + [8]) = (int_64)0
	*($8) = $5
	CALL $57(($8 + [80]), ($8 + [16]))
	$0 = *($8 + [80])
	CALL send_deferred($8, $7, $0, (*($8 + [84]) - $0), [0])
	$0 = *($8 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($8 + [84]) = $0
	CALL $135($0)
	
.LABEL $label$1
	CALL $58(($8 + [16]))
	*([0] + [4]) = ($8 + [96])
	return $5
}

void .FUNC $135 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	*($1) = *(*($3))
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [400])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3617211063646814208) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3617211063646814209
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $134([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)3617211063646814208
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)3617211063646814208
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $71(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

int_32 .FUNC $108 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [384]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($4, $9)
	*($12 + [88]) = [0]
	*($12 + [80]) = (int_64)0
	CALL _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE($3, ($12 + [80]))
	$11 = [-16]
	$3 = *($12 + [80])
	if ( (((int_32)(*($12 + [84]) - $3) / (int_32)[12]) <= [2]) ){ goto $label$7 }
	CALL $142(($12 + [64]), $3)
	$11 = [-18]
	if ( CALL $140(($12 + [64]), [368]) ){ goto $label$8 }
	CALL $142(($12 + [48]), (*($12 + [80]) + [12]))
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [176]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$14 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$9 }
	*(($6 = (($12 + [32]) + [8]))) = *(($2 + [8]))
	*($12 + [32]) = *($2)
	CALL $142(($12 + [16]), ($12 + [48]))
	*(($12 + [8])) = *($6)
	*($12) = *($12 + [32])
	$11 = CALL $111($0, $9, $1, $12, ($12 + [16]))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $135(*($12 + [24]))
	
.LABEL $label$15
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL $135(*($12 + [56]))
	
.LABEL $label$8
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL $135(*($12 + [72]))
	
.LABEL $label$16
	$3 = *($12 + [80])
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$17 }
	$6 = *($12 + [84])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$19 }
	$5 = ([0] - $3)
	$6 = ($6 + [-12])
	
.LOOP $label$20:
	if ( ((*($6) & [1]) == 0) ){ goto $label$21 }
	CALL $135(*(($6 + [8])))
	
.LABEL $label$21
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $5) != (int_32)[-12]) ){ goto $label$20 }
	$6 = *($12 + [80])
	goto $label$18 
	
.LABEL $label$19
	$6 = $3
	
.LABEL $label$18
	*($12 + [84]) = $3
	CALL $135($6)
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [96])
	return $11
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [400])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [400])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [400])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [400])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$7 = (*([0] + [4]) - [80])
	$12 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$5 = ($1 + [64])
	$4 = *($1)
	if ( (*($1 + [64]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$8 = ($1 + [65])
	$9 = ($1 + [60])
	$10 = ($1 + [56])
	$11 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [40]) = *(*($3))
	*($1 + [56]) = *(*($3 + [4]))
	*($1 + [60]) = *(*($3 + [8]))
	*($5) = [1]
	*($1 + [65]) = [0]
	*($1 + [72]) = (int_64)0
	*($1 + [72]) = *(*($3 + [12]))
	*(*($3 + [16])) = [1]
	$3 = ($1 + [72])
	$8 = ($1 + [65])
	$9 = ($1 + [60])
	$10 = ($1 + [56])
	$11 = ($1 + [40])
	
.LABEL $label$1
	CALL eosio_assert([1], [784])
	$6 = $7
	$7 = ($6 + [-80])
	*([0] + [4]) = $7
	*($12 + [12]) = $7
	*($12 + [8]) = $7
	*($12 + [16]) = ($6 + [-6])
	*($12 + [24]) = ($12 + [8])
	*($12 + [52]) = $11
	*($12 + [32]) = $1
	*($12 + [36]) = ($1 + [8])
	*($12 + [40]) = ($1 + [16])
	*($12 + [44]) = ($1 + [24])
	*($12 + [48]) = ($1 + [32])
	*($12 + [56]) = ($1 + [48])
	*($12 + [60]) = $10
	*($12 + [64]) = $9
	*($12 + [68]) = $5
	*($12 + [72]) = $8
	*($12 + [76]) = $3
	CALL $65(($12 + [32]), ($12 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $7, [74])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [608])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [608])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [608])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [608])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [400])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [400])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [400])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $31(CALL $30($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [400])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [400])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [400])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [400])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [400])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [400])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $134([96])) + [80]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [48])
	*($8 + [60]) = ($6 + [56])
	*($8 + [64]) = ($6 + [60])
	*($8 + [68]) = ($6 + [64])
	*($8 + [72]) = ($6 + [65])
	*($8 + [76]) = ($6 + [72])
	CALL $66(($8 + [32]), ($8 + [24]))
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [84])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $67(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [400])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [400])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $31($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	*($1) = *(*($3))
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [400])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4918969584758816768) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4918969584758816769
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $134([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)4918969584758816768
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)4918969584758816768
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $103(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)4918969584758816768, $2, (int_64)4918969584758816768, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4918969584758816768) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4918969584758816769
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)4918969584758816768
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4918969584758816768
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $103(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $135($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $105 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [8]) = $1
	*((($7 + [32]) + [8])) = (int_64)0
	*($7 + [32]) = (int_64)0
	CALL $73(($7 + [16]), ($0 + [88]), *($0), ($7 + [32]))
	$1 = *($7 + [24])
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$5), [416])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $63($5, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$5), [416])
	
.LABEL $label$5
	$6 = [-2]
	if ( ((int_32)*($4 + [64]) != (int_32)[1]) ){ goto $label$3 }
	*($7 + [16]) = [0]
	*($7 + [36]) = ($7 + [16])
	*($7 + [32]) = ($7 + [8])
	CALL eosio_assert([1], [624])
	CALL $113($5, $4, (int_64)0, ($7 + [32]))
	$6 = *($7 + [16])
	goto $label$3 
	
.LABEL $label$4
	$6 = [-1]
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $6
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)4918969584758816768, $2, (int_64)4918969584758816768, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4918969584758816768) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4918969584758816769
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)4918969584758816768
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4918969584758816768
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $103(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $135($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $89 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	$3 = *($0)
	*($6) = $3
	*($6 + [8]) = $1
	*($6 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $1, (int_64)-2855089728816939008, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $94($6, $0)
	$4 = ($6 + [8])
	
.LOOP $label$2:
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [896])
	$2 = CALL db_next_i64(*($0 + [28]), ($6 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	CALL $94($6, $2)
	
.LABEL $label$3
	CALL $95($6, $0)
	$0 = CALL db_lowerbound_i64(*($6), *($4), (int_64)-2855089728816939008, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $94($6, $0)
	goto $label$2 
	
.LABEL $label$1
	$4 = *($6 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $135($2)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL $135($0)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	if ( (int_64)($1 == 0) ){ goto $label$4 }
	*($7 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$5 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$3 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [416])
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $63($4, $6)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [416])
	
.LABEL $label$2
	*($7 + [11]) = [1]
	*($7 + [4]) = ($7 + [11])
	*($7) = ($7 + [12])
	CALL eosio_assert([1], [624])
	CALL $97($4, $5, (int_64)0, $7)
	$5 = ((int_32)*($7 + [11]) != (int_32)[0])
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [16])
	return $5
}

void .FUNC $87 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [208])
	*([0] + [4]) = $14
	*(($14 + [168])) = [0]
	*($14 + [160]) = (int_64)0
	$7 = CALL strlen([128])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($14 + [160]) = ($7 << [1])
	$5 = (($14 + [160]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $134($4)
	*($14 + [160]) = ($4 | [1])
	*($14 + [168]) = $5
	*($14 + [164]) = $7
	
.LABEL $label$4
	CALL memcpy($5, [128], $7)
	
.LABEL $label$3
	*(($5 + $7)) = [0]
	*(($14 + [152])) = [0]
	*($14 + [144]) = (int_64)0
	$7 = CALL strlen([368])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($14 + [144]) = ($7 << [1])
	$5 = (($14 + [144]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $134($4)
	*($14 + [144]) = ($4 | [1])
	*($14 + [152]) = $5
	*($14 + [148]) = $7
	
.LABEL $label$7
	CALL memcpy($5, [368], $7)
	
.LABEL $label$6
	*(($5 + $7)) = [0]
	$7 = *($14 + [160])
	$5 = ($7 & [1])
	$4 = (($14 + [160]) | [1])
	CALL $138(($14 + [144]), ( *($14 + [168]) ? $4 : $5 ), ( *($14 + [164]) ? uint_32($7 >> [1]) : $5 ))
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [176]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$14 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$9 }
	$9 = *(($2 + [8]))
	*((($14 + [112]) + [8])) = $9
	$11 = *($2)
	*((($14 + [8]) + [8])) = $9
	*($14 + [112]) = $11
	*($14 + [12]) = *($14 + [116])
	*($14 + [8]) = *($14 + [112])
	CALL $26(($14 + [128]), $0, $10, $1, ($14 + [8]))
	$7 = *($14 + [128])
	$5 = ($7 & [1])
	CALL $138(($14 + [144]), ( *($14 + [136]) ? (($14 + [128]) | [1]) : $5 ), ( *($14 + [132]) ? uint_32($7 >> [1]) : $5 ))
	$7 = *($14 + [160])
	$5 = ($7 & [1])
	CALL $138(($14 + [144]), ( *((($14 + [160]) + [8])) ? $4 : $5 ), ( *($14 + [164]) ? uint_32($7 >> [1]) : $5 ))
	$7 = *($3)
	$5 = ($7 & [1])
	CALL $138(($14 + [144]), ( *($3 + [8]) ? ($3 + [1]) : $5 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $5 ))
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [384]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$20 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$5 = ($5 + [165])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [176]
	$12 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$26 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$5 = ($5 + [165])
	goto $label$24 
	
.LABEL $label$26
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$21 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [160]
	$13 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$32 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [165])
	goto $label$30 
	
.LABEL $label$32
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	*((($14 + [24]) + [28])) = *(($2 + [12]))
	*((($14 + [24]) + [24])) = *(($2 + [8]))
	*((($14 + [24]) + [20])) = *(($2 + [4]))
	*($14 + [32]) = $1
	*($14 + [24]) = $6
	*($14 + [40]) = *($2)
	CALL $142((($14 + [24]) + [32]), ($14 + [144]))
	*($14 + [80]) = $13
	*($14 + [72]) = $12
	*(($7 = CALL $134([16]))) = $6
	*($7 + [8]) = $10
	*((($14 + [72]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($14 + [72]) + [24])) = $5
	*((($14 + [72]) + [20])) = $5
	*($14 + [88]) = $7
	*($14 + [100]) = [0]
	*((($14 + [72]) + [36])) = [0]
	$7 = *($14 + [56])
	$5 = ( *((($14 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [72]) + [28])
	
.LOOP $label$33:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$33 }
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $27($5, $7)
	$5 = *(($14 + [104]))
	$7 = *(($14 + [100]))
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	$7 = [0]
	
.LABEL $label$34
	*($14 + [196]) = $7
	*($14 + [192]) = $7
	*($14 + [200]) = $5
	*($14 + [176]) = ($14 + [192])
	*($14 + [184]) = ($14 + [24])
	CALL $28(($14 + [184]), ($14 + [176]))
	CALL $29(($14 + [192]), ($14 + [72]))
	$7 = *($14 + [192])
	CALL send_inline($7, (*($14 + [196]) - $7))
	$7 = *($14 + [192])
	if ( ($7 == 0) ){ goto $label$36 }
	*($14 + [196]) = $7
	CALL $135($7)
	
.LABEL $label$36
	$7 = *($14 + [100])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($14 + [104])) = $7
	CALL $135($7)
	
.LABEL $label$37
	$7 = *($14 + [88])
	if ( ($7 == 0) ){ goto $label$38 }
	*(($14 + [92])) = $7
	CALL $135($7)
	
.LABEL $label$38
	if ( ((*($14 + [56]) & [1]) == 0) ){ goto $label$39 }
	CALL $135(*(($14 + [64])))
	
.LABEL $label$39
	if ( ((*($14 + [128]) & [1]) == 0) ){ goto $label$40 }
	CALL $135(*(($14 + [136])))
	
.LABEL $label$40
	if ( ((*($14 + [144]) & [1]) == 0) ){ goto $label$41 }
	CALL $135(*($14 + [152]))
	
.LABEL $label$41
	if ( ((*($14 + [160]) & [1]) == 0) ){ goto $label$42 }
	CALL $135(*(($14 + [168])))
	
.LABEL $label$42
	*([0] + [4]) = ($14 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $136(($14 + [160]))
	
.LABEL $label$1
	CALL $136(($14 + [144]))
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = [0]
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$2 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$6), [416])
	if ( $7 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$10 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2850975045437620224, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $63($6, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$6), [416])
	
.LABEL $label$4
	$10 = [0]
	$1 = (int_64)0
	if ( ((int_32)*($7 + [64]) != (int_32)[2]) ){ goto $label$7 }
	$9 = (int_64)0
	if ( ((int_32)*($7 + [65]) != (int_32)[1]) ){ goto $label$6 }
	$1 = *($7 + [48])
	$9 = *($7 + [32])
	$10 = [1]
	goto $label$6 
	
.LABEL $label$7
	$9 = (int_64)0
	
.LABEL $label$6
	*($2) = $1
	*($3) = $9
	
.LABEL $label$1
	return $10
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([32])) + [16]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [12])) = *(($3 + [12]))
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy((($7 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2852442921813917088, $2, (int_64)-2852442921813917088, ($7 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-2852442921813917088) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-2852442921813917087
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-2852442921813917088
	$5 = *($4 + [20])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-2852442921813917088
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $80(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $135($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [400])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($5 | [8]), $4, [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2852442921813917088) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-2852442921813917087
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	*($0 + [80]) = $1
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = (int_64)20000
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$1 = *($2)
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = [0]
	*($0 + [60]) = [0]
	*($0 + [64]) = [0]
	*($0 + [65]) = [0]
	*($0 + [72]) = (int_64)0
	*($4 + [96]) = ($4 + [74])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($0 + [8])
	*($4 + [112]) = $0
	*($4 + [120]) = ($0 + [16])
	*($4 + [124]) = ($0 + [24])
	*($4 + [128]) = ($0 + [32])
	*($4 + [132]) = ($0 + [40])
	*($4 + [136]) = ($0 + [48])
	*($4 + [140]) = ($0 + [56])
	*($4 + [144]) = ($0 + [60])
	*($4 + [148]) = ($0 + [64])
	*($4 + [152]) = ($0 + [65])
	*($4 + [156]) = ($0 + [72])
	CALL $65(($4 + [112]), ($4 + [104]))
	$3 = *($0)
	*($0 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)-2850975045437620224, *(*($2 + [8])), $3, $4, [74])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([96])
	CALL $83($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [84])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [416])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2852442921813917088, (int_64)-2852442921813917088)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $78($0, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [416])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [624])
	CALL $84($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $85($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $147 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $141 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = *($0)
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	if ( $3 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$4 = ((uint_32)$5 > (uint_32)$2)
	$3 = ( $2 ? $5 : $4 )
	if ( ($3 == 0) ){ goto $label$7 }
	$0 = CALL memcmp($0, $1, $3)
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ( [-1] ? $4 : ($5 <= $2) )
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $134($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $134($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)3617211063646814208, $2, (int_64)3617211063646814208, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3617211063646814208) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3617211063646814209
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)3617211063646814208
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3617211063646814208
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $71(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $135($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [416])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-2852442921813917088, (int_64)-2852442921813917088)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $78($1, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [416])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $79($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)3617211063646814208, $2, (int_64)3617211063646814208, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3617211063646814208) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3617211063646814209
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)3617211063646814208
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3617211063646814208
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $71(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $135($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [304])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $141($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [416])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $75($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [416])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [400])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [400])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([56])
	CALL $37($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $38(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [304])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [44]) = $1
	$4 = *($2 + [4])
	*($0) = *(*($4))
	$5 = *($2)
	$1 = *($4 + [4])
	*($0 + [24]) = *($1)
	*(($0 + [32])) = *(($1 + [8]))
	*($0 + [8]) = *(*($4 + [8]))
	*($0 + [16]) = *(*($4 + [12]))
	*($0 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	*($6 + [64]) = ($6 + [48])
	*($6 + [76]) = ($0 + [8])
	*($6 + [72]) = $0
	*($6 + [80]) = ($0 + [16])
	*($6 + [84]) = ($0 + [24])
	*($6 + [88]) = ($0 + [40])
	CALL $39(($6 + [72]), ($6 + [64]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)-2849807356034285568, *(*($2 + [8])), $3, $6, [44])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [96])
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $134([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($5, $6, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [608])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	*($5 + [20]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-2852442921813917088
	$6 = *($5 + [20])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-2852442921813917088
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [512])
	*(($4 = CALL $134([32])) + [16]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [12])) = *(($3 + [12]))
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	CALL eosio_assert([1], [400])
	CALL memcpy(($7 + [16]), $4, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy((($7 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2852442921813917088, $2, (int_64)-2852442921813917088, ($7 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-2852442921813917088) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-2852442921813917087
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-2852442921813917088
	$5 = *($4 + [20])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-2852442921813917088
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $80(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $135($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [400])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [400])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_64 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2852345010218888704, (int_64)-2852345010218888704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $41($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [416])
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $2
	CALL $45($4, $0, $1, ($4 + [8]))
	$1 = *(*($4 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $1
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [400])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [400])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [400])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [400])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [400])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [400])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2849224558420951040, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [720])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [4])))
	$4 = *($1)
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [400])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [400])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}