(data (i32.const 16896) "addtoken verify\00")
(data (i32.const 16912) "#1001# code doesn\'t exist!\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17025) "#1002# invalid token!\00")
(data (i32.const 17047) "deposit\00")
(data (i32.const 17055) "not allowed deposit amount!\00")
(data (i32.const 17083) "#1006# token not enabled yet!\00")
(data (i32.const 17113) "#1004# the project not start!\00")
(data (i32.const 17143) "#1007# reach the max deposit!\00")
(data (i32.const 17173) "#1008# reach the maximum interest payment limit!\00")
(data (i32.const 17222) "#1003# reach the max deposit per account!\00")
(data (i32.const 17264) "#1005# no deposit record!\00")
(data (i32.const 17290) "#1011# has claimrewrds!\00")
(data (i32.const 17314) "#1009# it is not time to claimrewards!\00")
(data (i32.const 17353) "rewards for \00")
(data (i32.const 17366) "#1010# not claimreward!\00")
(data (i32.const 17390) "refund for \00")
(data (i32.const 17402) "add failed, (code, symbol.code) already exists!\00")
(data (i32.const 17450) "editing failed, (code, symbol) doesn\'t exist!\00")
(data (i32.const 17496) "code doesn\'t exist\00")
(data (i32.const 17515) "deletion failed, (code, symbol) doesn\'t exist!\00")
(data (i32.const 17562) "symbol not issued by code!\00")
(data (i32.const 17589) "symbol precision mismatch!\00")
(data (i32.const 17616) "supply must be positive quantity!\00")
(data (i32.const 17650) "max_deposit must be positive quantity!\00")
(data (i32.const 17689) "annualized_rate must be positive quantity!\00")
(data (i32.const 17732) "annualized_rate must be <= 36.00%!\00")
(data (i32.const 17767) "lock_position_interval_days must be positive !\00")
(data (i32.const 17814) "refund_interval_seconds must be positive !\00")
(data (i32.const 17857) "max_deposit_per_account must be positive quantity!\00")
(data (i32.const 17908) "allow_deposit1 must be positive quantity!\00")
(data (i32.const 17950) "allow_deposit2 must be positive quantity!\00")
(data (i32.const 17992) "allow_deposit3 must be positive quantity!\00")
(data (i32.const 18034) "allow_deposit4 must be positive quantity!\00")
(data (i32.const 18076) "code doesn\'t exist!\00")
(data (i32.const 18096) "payer doesn\'t exist!\00")
(data (i32.const 18117) "payer must set eoscuncunbao@eosio.code premission!\00")
(data (i32.const 18168) "max_deposit symbol mismatch code\00")
(data (i32.const 18201) "max_deposit_per_account symbol mismatch code\00")
(data (i32.const 18246) "allow_deposit1 symbol mismatch code\00")
(data (i32.const 18282) "allow_deposit2 symbol mismatch code\00")
(data (i32.const 18318) "allow_deposit3 symbol mismatch code\00")
(data (i32.const 18354) "allow_deposit4 symbol mismatch code\00")
(data (i32.const 18390) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 18454) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18503) "invalid symbol name\00")
(data (i32.const 18523) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18582) "attempt to add asset with different symbol\00")
(data (i32.const 18625) "addition underflow\00")
(data (i32.const 18644) "addition overflow\00")
(data (i32.const 18662) "attempt to subtract asset with different symbol\00")
(data (i32.const 18710) "subtraction underflow\00")
(data (i32.const 18732) "subtraction overflow\00")
(data (i32.const 18756) "HI\00\00")
(data (i32.const 18760) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18793) "write\00")
(data (i32.const 18799) "error reading iterator\00")
(data (i32.const 18822) "read\00")
(data (i32.const 18827) "cannot increment end iterator\00")
(data (i32.const 18857) "cannot pass end iterator to modify\00")
(data (i32.const 18892) "object passed to modify is not in multi_index\00")
(data (i32.const 18938) "cannot modify objects in table of another contract\00")
(data (i32.const 18989) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19048) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 19099) "cannot create objects in table of another contract\00")
(data (i32.const 19150) "next primary key in table is at autoincrement limit\00")
(data (i32.const 19202) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 19256) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19304) "cannot pass end iterator to erase\00")
(data (i32.const 19338) "object passed to erase is not in multi_index\00")
(data (i32.const 19383) "cannot erase objects in table of another contract\00")
(data (i32.const 19433) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19486) "get\00")
(import "env" "check_transaction_authorization" (func $fimport$0 (param i32 i32 i32 i32 i32 i32) (result i32)))
(import "env" "check_permission_authorization" (func $fimport$1 (param i64 i64 i32 i32 i32 i32 i64) (result i32)))
(import "env" "is_account" (func $fimport$2 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_idx128_find_primary" (func $fimport$10 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "require_auth" (func $fimport$12 (param i64)))
(import "env" "db_find_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multi3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__divti3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "cancel_deferred" (func $fimport$17 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$18 (param i32 i64 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$19 (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$22 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$23 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$26 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "db_idx128_next" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$29 (param i32)))
(import "env" "abort" (func $fimport$30))
(import "env" "memset" (func $fimport$31 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$33 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $40))
(export "_ZdlPv" (func $67))
(export "_Znwj" (func $65))
(export "_Znaj" (func $66))
(export "_ZdaPv" (func $68))
(export "_ZnwjSt11align_val_t" (func $69))
(export "_ZnajSt11align_val_t" (func $70))
(export "_ZdlPvSt11align_val_t" (func $71))
(export "_ZdaPvSt11align_val_t" (func $72))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $16 $31 $8 $36 $38 $26 $7)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19490))
(global $global$2 i32 (i32.const 19490))


int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $92([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $91($1)
	
.LABEL $label$2
	*(CALL $82()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $91(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $95($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $91 (int_32 $0)
{
	return CALL $92([8500], $0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $93($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16939])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$2($1), [17496])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	$4 = *($0)
	*($3) = $4
	*($3 + [8]) = $4
	*($3 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($4, $4, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $9($3, $0)
	if ( ((int_64)*($0 + [16]) != (int_64)$1) ){ goto $label$3 }
	$5 = [2]
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	$5 = [15]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$29 
	
.LABEL $label$31
	$0 = CALL $9($3, $0)
	if ( ((int_64)*($0 + [16]) != (int_64)$1) ){ goto $label$13 }
	$5 = [2]
	goto $label$4 
	
.LABEL $label$30
	if ( ((int_64)*(($0 + [32])) == (int_64)$2) ){ goto $label$14 }
	$5 = [0]
	goto $label$4 
	
.LABEL $label$29
	CALL eosio_assert([1], [18827])
	$0 = CALL db_next_i64(*($0 + [140]), ($3 + [40]))
	if ( ((int_32)$0 >= (int_32)[0]) ){ goto $label$15 }
	$5 = [15]
	goto $label$4 
	
.LABEL $label$28
	CALL eosio_assert([0], [17515])
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$9 }
	$5 = [6]
	goto $label$4 
	
.LABEL $label$27
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$8 }
	$5 = [7]
	goto $label$4 
	
.LABEL $label$26
	$5 = [8]
	goto $label$4 
	
.LABEL $label$25
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = [9]
	goto $label$4 
	
.LABEL $label$24
	CALL _ZdlPv($8)
	$5 = [10]
	goto $label$4 
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$5 = [11]
	goto $label$4 
	
.LABEL $label$22
	$0 = *(($3 + [24]))
	goto $label$5 
	
.LABEL $label$21
	$0 = $6
	$5 = [12]
	goto $label$4 
	
.LABEL $label$20
	*($7) = $6
	CALL _ZdlPv($0)
	$5 = [13]
	goto $label$4 
	
.LABEL $label$19
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$18
	CALL eosio_assert([1], [19304])
	CALL eosio_assert([1], [18827])
	$8 = CALL db_next_i64(*($0 + [140]), ($3 + [40]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$5 = [4]
	goto $label$4 
	
.LABEL $label$17
	CALL $9($3, $8)
	$5 = [5]
	goto $label$4 
	
.LABEL $label$16
	CALL $39($3, $0)
	$6 = *($3 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$15
	$5 = [1]
	goto $label$4 
	
.LABEL $label$14
	$5 = [3]
	goto $label$4 
	
.LABEL $label$13
	$5 = [0]
	goto $label$4 
	
.LABEL $label$12
	$5 = [5]
	goto $label$4 
	
.LABEL $label$11
	$5 = [13]
	goto $label$4 
	
.LABEL $label$10
	$5 = [6]
	goto $label$4 
	
.LABEL $label$9
	$5 = [13]
	goto $label$4 
	
.LABEL $label$8
	$5 = [14]
	goto $label$4 
	
.LABEL $label$7
	$5 = [8]
	goto $label$4 
	
.LABEL $label$6
	$5 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = [12]
	goto $label$4 
	$5
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $62(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [448])
	$global$0 = $2
	*(($3 = (($2 + [208]) + [8]))) = *(($1 + [16]))
	*(($4 = (($2 + [192]) + [8]))) = *(($1 + [48]))
	*(($5 = (($2 + [176]) + [8]))) = *(($1 + [80]))
	*($2 + [208]) = *($1 + [8])
	*($2 + [192]) = *($1 + [40])
	*($2 + [176]) = *($1 + [72])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = *($1 + [32])
	$9 = *($1 + [56])
	$10 = *($1 + [64])
	$11 = *($1 + [68])
	*(($12 = (($2 + [160]) + [8]))) = *(($1 + [96]))
	*(($13 = (($2 + [144]) + [8]))) = *(($1 + [112]))
	*(($14 = (($2 + [128]) + [8]))) = *(($1 + [128]))
	*(($15 = (($2 + [112]) + [8]))) = *(($1 + [144]))
	*($2 + [160]) = *($1 + [88])
	*($2 + [144]) = *($1 + [104])
	*($2 + [128]) = *($1 + [120])
	*($2 + [112]) = *($1 + [136])
	*((($2 + [320]) + [8])) = *($15)
	*((($2 + [304]) + [8])) = *($14)
	*((($2 + [288]) + [8])) = *($13)
	*((($2 + [272]) + [8])) = *($12)
	*((($2 + [256]) + [8])) = *($5)
	*($2 + [320]) = *($2 + [112])
	*($2 + [304]) = *($2 + [128])
	*($2 + [288]) = *($2 + [144])
	*($2 + [272]) = *($2 + [160])
	*($2 + [256]) = *($2 + [176])
	*((($2 + [240]) + [8])) = *($4)
	*((($2 + [224]) + [8])) = *($3)
	*($2 + [240]) = *($2 + [192])
	*($2 + [224]) = *($2 + [208])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($2 + [432]) + [8]))) = *((($2 + [224]) + [8]))
	*(($4 = (($2 + [416]) + [8]))) = *((($2 + [240]) + [8]))
	*(($5 = (($2 + [400]) + [8]))) = *((($2 + [256]) + [8]))
	*(($12 = (($2 + [384]) + [8]))) = *((($2 + [272]) + [8]))
	*(($13 = (($2 + [368]) + [8]))) = *((($2 + [288]) + [8]))
	*($2 + [432]) = *($2 + [224])
	*($2 + [416]) = *($2 + [240])
	*($2 + [400]) = *($2 + [256])
	*($2 + [384]) = *($2 + [272])
	*($2 + [368]) = *($2 + [288])
	*(($14 = (($2 + [352]) + [8]))) = *((($2 + [304]) + [8]))
	*(($15 = (($2 + [336]) + [8]))) = *((($2 + [320]) + [8]))
	*((($2 + [96]) + [8])) = *($3)
	*((($2 + [80]) + [8])) = *($4)
	*((($2 + [64]) + [8])) = *($5)
	*($2 + [352]) = *($2 + [304])
	*($2 + [336]) = *($2 + [320])
	*($2 + [96]) = *($2 + [432])
	*($2 + [80]) = *($2 + [416])
	*($2 + [64]) = *($2 + [400])
	*((($2 + [48]) + [8])) = *($12)
	*($2 + [48]) = *($2 + [384])
	*((($2 + [32]) + [8])) = *($13)
	*($2 + [32]) = *($2 + [368])
	*((($2 + [16]) + [8])) = *($14)
	*($2 + [16]) = *($2 + [352])
	*(($2 + [8])) = *($15)
	*($2) = *($2 + [336])
	CALL void $0((int_32 $6), (int_64 ($2 + [96])), (int_32 $7), (int_32 $8), (int_64 ($2 + [80])), (int_32 $9), (int_64 $10), (int_32 $11), (int_32 ($2 + [64])), (int_32 ($2 + [48])), (int_32 ($2 + [32])), (int_32 ($2 + [16])), (int_32 $2), (int_32 $1))
	$global$0 = ($2 + [448])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $91($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $49(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $50(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $95($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [216]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $91($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*(($4 + [160])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [192])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [240]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $47(($4 + [16]), ($4 + [240]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [224]) + [8]))) = *($3)
	*($4 + [224]) = *($4)
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [224])
	*($4 + [32]) = $0
	*($4 + [240]) = $0
	*($4 + [244]) = ($4 + [216])
	*($4 + [240]) = ($4 + [16])
	CALL $48(($4 + [240]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $95($2)
	
.LABEL $label$4
	$global$0 = ($4 + [256])
	return [1]
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $91($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $46(($4 + [16]), ($4 + [112]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $95($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)4921565079997371263) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)5935072309878980608) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5378050756354156032) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4921565079997371264) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3) = *($3 + [88])
	CALL $41($1, $1, $3)
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [18390])
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)-7951197872704569344) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626411730319441920) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [16]) = *($3 + [72])
	CALL $42($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [40]) = *($3 + [48])
	CALL $43($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [24]) = *($3 + [64])
	CALL $42($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [32]) = *($3 + [56])
	CALL $44($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [84]) = [0]
	*($3 + [80]) = [6]
	*($3 + [8]) = *($3 + [80])
	CALL $45($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $83([0])
	$global$0 = ($3 + [96])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18822])
	CALL memcpy(($0 + [24]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $60($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [16]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $91($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18822])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $95($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $91($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18822])
	CALL memcpy($4, ($2 + [8]), [8])
	$8 = *($4)
	*($4 + [40]) = $8
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $95($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [320])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	CALL eosio_assert(CALL $fimport$2(*($0 + [8])), [16912])
	$7 = [0]
	*((($5 + [104]) + [32])) = [0]
	*($5 + [120]) = (int_64)-1
	$2 = *($0)
	*($5 + [104]) = $2
	*($5 + [112]) = $2
	*($5 + [128]) = (int_64)0
	$8 = CALL db_lowerbound_i64($2, $2, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$7 = CALL $9(($5 + [104]), $8)
	if ( ((int_64)*($7 + [16]) != (int_64)*($8)) ){ goto $label$5 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$5
	$9 = [0]
	goto $label$1 
	
.LABEL $label$4
	$9 = [14]
	goto $label$1 
	
.LABEL $label$3
	$9 = [14]
	goto $label$1 
	
.LABEL $label$2
	$9 = [76]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$140 
	
.LABEL $label$142
	if ( ((int_64)*(($7 + [32])) != (int_64)*(($3 + [8]))) ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$141
	$7 = CALL $9(($5 + [104]), $7)
	if ( ((int_64)*($7 + [16]) == (int_64)*($8)) ){ goto $label$62 }
	$9 = [0]
	goto $label$6 
	
.LABEL $label$140
	CALL eosio_assert([1], [18827])
	$7 = CALL db_next_i64(*($7 + [140]), ($5 + [144]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$65 }
	$9 = [75]
	goto $label$6 
	
.LABEL $label$139
	$7 = [0]
	$9 = [76]
	goto $label$6 
	
.LABEL $label$138
	$10 = [0]
	goto $label$61 
	
.LABEL $label$137
	$10 = [1]
	$9 = [4]
	goto $label$6 
	
.LABEL $label$136
	CALL eosio_assert($10, [17025])
	*($5 + [96]) = CALL current_time()
	if ( ((int_64)*($7 + [56]) != (int_64)$1) ){ goto $label$60 }
	$9 = [67]
	goto $label$6 
	
.LABEL $label$135
	if ( (*($7 + [8]) == 0) ){ goto $label$59 }
	$9 = [5]
	goto $label$6 
	
.LABEL $label$134
	if ( CALL $80($4, [17047]) ){ goto $label$56 }
	$9 = [16]
	goto $label$6 
	
.LABEL $label$133
	$8 = [1]
	$2 = *($3)
	if ( ((int_64)$2 == (int_64)*($7 + [96])) ){ goto $label$46 }
	$9 = [17]
	goto $label$6 
	
.LABEL $label$132
	$8 = [1]
	if ( ((int_64)$2 == (int_64)*($7 + [104])) ){ goto $label$45 }
	$9 = [18]
	goto $label$6 
	
.LABEL $label$131
	$8 = [1]
	if ( ((int_64)$2 == (int_64)*($7 + [112])) ){ goto $label$44 }
	$9 = [19]
	goto $label$6 
	
.LABEL $label$130
	$8 = [1]
	if ( ((int_64)$2 == (int_64)*($7 + [120])) ){ goto $label$43 }
	$9 = [20]
	goto $label$6 
	
.LABEL $label$129
	$8 = ((int_64)$2 == (int_64)*($7 + [128]))
	$9 = [21]
	goto $label$6 
	
.LABEL $label$128
	CALL eosio_assert($8, [17055])
	CALL eosio_assert(*($7 + [8]), [17083])
	CALL eosio_assert(((int_64)*($5 + [96]) > (int_64)*($7 + [72])), [17113])
	CALL eosio_assert(((uint_64)((int_64)*($3) + (int_64)*($7 + [88])) <= (uint_64)*($7 + [64])), [17143])
	$11 = *($3 + [8])
	$12 = *($7 + [40])
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18454])
	$2 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = [0]
	$9 = [22]
	goto $label$6 
	
.LABEL $label$127
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$9 = [61]
	goto $label$6 
	
.LABEL $label$126
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$9 = [62]
	goto $label$6 
	
.LABEL $label$125
	$2 = $6
	$4 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$124
	$2 = $6
	$9 = [64]
	goto $label$6 
	
.LABEL $label$123
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$9 = [65]
	goto $label$6 
	
.LABEL $label$122
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $4 ){ goto $label$11 }
	$9 = [66]
	goto $label$6 
	
.LABEL $label$121
	$4 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$120
	$4 = [0]
	$9 = [24]
	goto $label$6 
	
.LABEL $label$119
	CALL eosio_assert($4, [18503])
	CALL eosio_assert(((int_64)$11 == (int_64)*(($7 + [32]))), [18523])
	CALL eosio_assert(((int_64)$12 < (int_64)*($7 + [24])), [17173])
	$8 = [0]
	*((($5 + [56]) + [32])) = [0]
	*($5 + [64]) = $1
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	*($5 + [92]) = [0]
	*($5 + [56]) = *($0)
	*($5 + [48]) = ($5 + [56])
	*($5 + [152]) = *(($0 + [8]))
	*($5 + [144]) = *(($3 + [8]))
	CALL $10($5, ($5 + [48]), ($5 + [144]))
	$4 = *($5 + [4])
	if ( ($4 == 0) ){ goto $label$36 }
	$9 = [25]
	goto $label$6 
	
.LABEL $label$118
	$8 = ( $4 ? [0] : (int_64)(((int_64)((int_64)*($5 + [144]) ^ (int_64)*(($4 + [24]))) | (int_64)((int_64)*($5 + [152]) ^ (int_64)*($4 + [8]))) == 0) )
	$9 = [26]
	goto $label$6 
	
.LABEL $label$117
	CALL eosio_assert(((uint_64)((int_64)*($3) + (int_64)*($8 + [16])) <= (uint_64)*(($7 + [96]))), [17222])
	$6 = *($0)
	if ( ($8 == 0) ){ goto $label$35 }
	$9 = [27]
	goto $label$6 
	
.LABEL $label$116
	CALL eosio_assert([1], [18857])
	$13 = *($5 + [48])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$13), [18892])
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$7()), [18938])
	$14 = ($8 + [24])
	$11 = *($14)
	$15 = ($8 + [8])
	*($5 + [296]) = *($15)
	*($5 + [288]) = $11
	$2 = *($8)
	CALL eosio_assert(((int_64)$11 == (int_64)*(($3 + [8]))), [18582])
	$11 = ((int_64)*($4) + (int_64)*($3))
	*(($4 = ($8 + [16]))) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [18625])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [18644])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [18989])
	CALL eosio_assert([1], [18793])
	CALL memcpy(($5 + [144]), $8, [8])
	CALL eosio_assert([1], [18793])
	CALL memcpy((($5 + [144]) | [8]), $15, [8])
	CALL eosio_assert([1], [18793])
	CALL memcpy((($5 + [144]) + [16]), $4, [8])
	*($5) = *($14)
	CALL eosio_assert([1], [18793])
	CALL memcpy((($5 + [144]) + [24]), $5, [8])
	CALL db_update_i64(*($8 + [36]), $6, ($5 + [144]), [32])
	if ( (uint_64)($2 <= *($13 + [16])) ){ goto $label$34 }
	$9 = [28]
	goto $label$6 
	
.LABEL $label$115
	*(($13 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$9 = [29]
	goto $label$6 
	
.LABEL $label$114
	*($5 + [8]) = *($15)
	*($5) = *($14)
	if ( (CALL $85(($5 + [288]), $5, [16]) == 0) ){ goto $label$33 }
	$9 = [30]
	goto $label$6 
	
.LABEL $label$113
	$4 = ($8 + [40])
	$8 = *($4)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$32 }
	$9 = [56]
	goto $label$6 
	
.LABEL $label$112
	$8 = CALL db_idx128_find_primary(*($13), *($13 + [8]), (int_64)4152997947673411584, ($5 + [304]), $2)
	*($4) = $8
	$9 = [31]
	goto $label$6 
	
.LABEL $label$111
	CALL db_idx128_update($8, $6, $5)
	goto $label$31 
	
.LABEL $label$110
	$14 = ($8 & [1])
	$8 = *([0] + [8192])
	$8 = ( *([0] + [8196]) ? uint_32($8 >> [1]) : $14 )
	$15 = *([0] + [8200])
	$13 = *($4)
	if ( ($13 & [1]) ){ goto $label$10 }
	$9 = [74]
	goto $label$6 
	
.LABEL $label$109
	$16 = ($4 + [1])
	$13 = uint_32($13 >> [1])
	$17 = ( $8 ? $13 : ($8 <= $13) )
	if ( $17 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$108
	*($5 + [4]) = $0
	*($5 + [8]) = $3
	*($5) = ($5 + [56])
	*($5 + [304]) = $6
	CALL eosio_assert(((int_64)*($5 + [56]) == (int_64)CALL $fimport$7()), [19099])
	*($5 + [148]) = $5
	*($5 + [144]) = ($5 + [56])
	*($5 + [152]) = ($5 + [304])
	*(($8 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = ($5 + [56])
	CALL $11(($5 + [144]), $8)
	*($5 + [288]) = $8
	$2 = *($8)
	*($5 + [144]) = $2
	$13 = *($8 + [36])
	*($5 + [280]) = $13
	$14 = ($5 + [84])
	$4 = *($14)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [88]))) ){ goto $label$13 }
	$9 = [60]
	goto $label$6 
	
.LABEL $label$107
	*($4 + [8]) = $2
	*($4 + [16]) = $13
	*($5 + [288]) = [0]
	*($4) = $8
	*($14) = ($4 + [24])
	$8 = *($5 + [288])
	*($5 + [288]) = [0]
	if ( ($8 == 0) ){ goto $label$30 }
	$9 = [59]
	goto $label$6 
	
.LABEL $label$106
	CALL _ZdlPv($8)
	$9 = [32]
	goto $label$6 
	
.LABEL $label$105
	*(($13 = ($5 + [32]))) = [0]
	*($5 + [8]) = $1
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$2 = *($0)
	*($5) = $2
	*($5 + [152]) = $0
	*($5 + [156]) = $3
	*($5 + [148]) = ($5 + [96])
	*($5 + [144]) = $5
	*($5 + [288]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$7()), [19099])
	*($5 + [308]) = ($5 + [144])
	*($5 + [304]) = $5
	*($5 + [312]) = ($5 + [288])
	*(($8 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = $5
	CALL $12(($5 + [304]), $8)
	*($5 + [280]) = $8
	$2 = *($8)
	*($5 + [304]) = $2
	$14 = *($8 + [44])
	*($5 + [276]) = $14
	$15 = ($5 + [28])
	$4 = *($15)
	if ( ((uint_32)$4 >= (uint_32)*($13)) ){ goto $label$27 }
	$9 = [55]
	goto $label$6 
	
.LABEL $label$104
	*($4 + [8]) = $2
	*($4 + [16]) = $14
	*($5 + [280]) = [0]
	*($4) = $8
	*($15) = ($4 + [24])
	$8 = *($5 + [280])
	*($5 + [280]) = [0]
	if ( $8 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$103
	CALL $13(($5 + [24]), ($5 + [280]), ($5 + [304]), ($5 + [276]))
	$8 = *($5 + [280])
	*($5 + [280]) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	$9 = [34]
	goto $label$6 
	
.LABEL $label$102
	CALL _ZdlPv($8)
	$9 = [35]
	goto $label$6 
	
.LABEL $label$101
	$1 = *($0)
	CALL eosio_assert($10, [18857])
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)($5 + [104])), [18892])
	CALL eosio_assert(((int_64)*($5 + [104]) == (int_64)CALL $fimport$7()), [18938])
	*(($8 = ($7 + [88]))) = ((int_64)*($8) + (int_64)*($3))
	$2 = *($7)
	CALL eosio_assert([1], [18989])
	*($5 + [312]) = (($5 + [144]) + [125])
	*($5 + [308]) = ($5 + [144])
	*($5 + [304]) = ($5 + [144])
	CALL $14(($5 + [304]), $7)
	CALL db_update_i64(*($7 + [140]), $1, ($5 + [144]), [125])
	$7 = ($5 + [120])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$23 }
	$9 = [36]
	goto $label$6 
	
.LABEL $label$100
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$9 = [37]
	goto $label$6 
	
.LABEL $label$99
	$4 = *($5 + [24])
	if ( ($4 == 0) ){ goto $label$22 }
	$9 = [38]
	goto $label$6 
	
.LABEL $label$98
	$3 = ($5 + [28])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$21 }
	$9 = [39]
	goto $label$6 
	
.LABEL $label$97
	$9 = [40]
	goto $label$6 
	
.LABEL $label$96
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	$9 = [41]
	goto $label$6 
	
.LABEL $label$95
	CALL _ZdlPv($8)
	$9 = [42]
	goto $label$6 
	
.LABEL $label$94
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$20 }
	$9 = [43]
	goto $label$6 
	
.LABEL $label$93
	$7 = *(($5 + [24]))
	goto $label$18 
	
.LABEL $label$92
	$16 = *($4 + [8])
	$13 = *($4 + [4])
	$17 = ( $8 ? $13 : ($8 <= $13) )
	if ( ($17 == 0) ){ goto $label$9 }
	$9 = [70]
	goto $label$6 
	
.LABEL $label$91
	if ( CALL $85($16, ( $15 ? [8193] : $14 ), $17) ){ goto $label$58 }
	$9 = [71]
	goto $label$6 
	
.LABEL $label$90
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$57 }
	$9 = [72]
	goto $label$6 
	
.LABEL $label$89
	$1 = *($0)
	CALL eosio_assert($10, [18857])
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)($5 + [104])), [18892])
	CALL eosio_assert(((int_64)*($5 + [104]) == (int_64)CALL $fimport$7()), [18938])
	*(($7 + [8])) = [1]
	*($7 + [40]) = ((int_64)*($7 + [40]) + (int_64)*($3))
	$2 = *($7)
	CALL eosio_assert([1], [18989])
	*($5 + [64]) = (($5 + [144]) + [125])
	*($5 + [60]) = ($5 + [144])
	*($5 + [56]) = ($5 + [144])
	CALL $14(($5 + [56]), $7)
	CALL db_update_i64(*($7 + [140]), $1, ($5 + [144]), [125])
	$7 = ($5 + [120])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$55 }
	$9 = [73]
	goto $label$6 
	
.LABEL $label$88
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$4 = *($5 + [128])
	if ( $4 ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$87
	$7 = $4
	$9 = [44]
	goto $label$6 
	
.LABEL $label$86
	*($3) = $4
	CALL _ZdlPv($7)
	$9 = [45]
	goto $label$6 
	
.LABEL $label$85
	$4 = *($5 + [80])
	if ( ($4 == 0) ){ goto $label$54 }
	$9 = [46]
	goto $label$6 
	
.LABEL $label$84
	$3 = ($5 + [84])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$17 }
	$9 = [47]
	goto $label$6 
	
.LABEL $label$83
	$9 = [48]
	goto $label$6 
	
.LABEL $label$82
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	$9 = [49]
	goto $label$6 
	
.LABEL $label$81
	CALL _ZdlPv($8)
	$9 = [50]
	goto $label$6 
	
.LABEL $label$80
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$16 }
	$9 = [51]
	goto $label$6 
	
.LABEL $label$79
	$7 = *(($5 + [80]))
	goto $label$14 
	
.LABEL $label$78
	$7 = $4
	$9 = [52]
	goto $label$6 
	
.LABEL $label$77
	*($3) = $4
	CALL _ZdlPv($7)
	$9 = [6]
	goto $label$6 
	
.LABEL $label$76
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$53 }
	$9 = [7]
	goto $label$6 
	
.LABEL $label$75
	$3 = ($5 + [132])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$50 }
	$9 = [8]
	goto $label$6 
	
.LABEL $label$74
	$9 = [9]
	goto $label$6 
	
.LABEL $label$73
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$48 }
	$9 = [10]
	goto $label$6 
	
.LABEL $label$72
	CALL _ZdlPv($8)
	$9 = [11]
	goto $label$6 
	
.LABEL $label$71
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$49 }
	$9 = [12]
	goto $label$6 
	
.LABEL $label$70
	$7 = *(($5 + [128]))
	goto $label$47 
	
.LABEL $label$69
	$7 = $4
	$9 = [13]
	goto $label$6 
	
.LABEL $label$68
	*($3) = $4
	CALL _ZdlPv($7)
	$9 = [14]
	goto $label$6 
	
.LABEL $label$67
	$global$0 = ($5 + [320])
	return 
	
.LABEL $label$66
	CALL $15(($5 + [80]), ($5 + [288]), ($5 + [144]), ($5 + [280]))
	$8 = *($5 + [288])
	*($5 + [288]) = [0]
	if ( $8 ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$65
	$9 = [1]
	goto $label$6 
	
.LABEL $label$64
	$9 = [3]
	goto $label$6 
	
.LABEL $label$63
	$9 = [0]
	goto $label$6 
	
.LABEL $label$62
	$9 = [2]
	goto $label$6 
	
.LABEL $label$61
	$9 = [4]
	goto $label$6 
	
.LABEL $label$60
	$9 = [5]
	goto $label$6 
	
.LABEL $label$59
	$9 = [68]
	goto $label$6 
	
.LABEL $label$58
	$9 = [5]
	goto $label$6 
	
.LABEL $label$57
	$9 = [5]
	goto $label$6 
	
.LABEL $label$56
	$9 = [6]
	goto $label$6 
	
.LABEL $label$55
	$9 = [6]
	goto $label$6 
	
.LABEL $label$54
	$9 = [6]
	goto $label$6 
	
.LABEL $label$53
	$9 = [14]
	goto $label$6 
	
.LABEL $label$52
	$9 = [14]
	goto $label$6 
	
.LABEL $label$51
	$9 = [7]
	goto $label$6 
	
.LABEL $label$50
	$9 = [15]
	goto $label$6 
	
.LABEL $label$49
	$9 = [9]
	goto $label$6 
	
.LABEL $label$48
	$9 = [11]
	goto $label$6 
	
.LABEL $label$47
	$9 = [13]
	goto $label$6 
	
.LABEL $label$46
	$9 = [21]
	goto $label$6 
	
.LABEL $label$45
	$9 = [21]
	goto $label$6 
	
.LABEL $label$44
	$9 = [21]
	goto $label$6 
	
.LABEL $label$43
	$9 = [21]
	goto $label$6 
	
.LABEL $label$42
	$9 = [22]
	goto $label$6 
	
.LABEL $label$41
	$9 = [24]
	goto $label$6 
	
.LABEL $label$40
	$9 = [22]
	goto $label$6 
	
.LABEL $label$39
	$9 = [24]
	goto $label$6 
	
.LABEL $label$38
	$9 = [23]
	goto $label$6 
	
.LABEL $label$37
	$9 = [23]
	goto $label$6 
	
.LABEL $label$36
	$9 = [26]
	goto $label$6 
	
.LABEL $label$35
	$9 = [57]
	goto $label$6 
	
.LABEL $label$34
	$9 = [29]
	goto $label$6 
	
.LABEL $label$33
	$9 = [32]
	goto $label$6 
	
.LABEL $label$32
	$9 = [31]
	goto $label$6 
	
.LABEL $label$31
	$9 = [32]
	goto $label$6 
	
.LABEL $label$30
	$9 = [32]
	goto $label$6 
	
.LABEL $label$29
	$9 = [32]
	goto $label$6 
	
.LABEL $label$28
	$9 = [59]
	goto $label$6 
	
.LABEL $label$27
	$9 = [33]
	goto $label$6 
	
.LABEL $label$26
	$9 = [35]
	goto $label$6 
	
.LABEL $label$25
	$9 = [35]
	goto $label$6 
	
.LABEL $label$24
	$9 = [34]
	goto $label$6 
	
.LABEL $label$23
	$9 = [37]
	goto $label$6 
	
.LABEL $label$22
	$9 = [45]
	goto $label$6 
	
.LABEL $label$21
	$9 = [54]
	goto $label$6 
	
.LABEL $label$20
	$9 = [40]
	goto $label$6 
	
.LABEL $label$19
	$9 = [42]
	goto $label$6 
	
.LABEL $label$18
	$9 = [44]
	goto $label$6 
	
.LABEL $label$17
	$9 = [53]
	goto $label$6 
	
.LABEL $label$16
	$9 = [48]
	goto $label$6 
	
.LABEL $label$15
	$9 = [50]
	goto $label$6 
	
.LABEL $label$14
	$9 = [52]
	goto $label$6 
	
.LABEL $label$13
	$9 = [58]
	goto $label$6 
	
.LABEL $label$12
	$9 = [63]
	goto $label$6 
	
.LABEL $label$11
	$9 = [64]
	goto $label$6 
	
.LABEL $label$10
	$9 = [69]
	goto $label$6 
	
.LABEL $label$9
	$9 = [71]
	goto $label$6 
	
.LABEL $label$8
	$9 = [71]
	goto $label$6 
	
.LABEL $label$7
	$9 = [70]
	goto $label$6 
	$9
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18799])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $91($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([152])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [136]) = $0
	CALL $52(($3 + [32]), $5)
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18793])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18793])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $51($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $7 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18793])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18793])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18793])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18793])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18793])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18793])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18793])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $51(CALL $35($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC memory ()
{
	CALL $64()
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $3($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $2($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $4($2, $1)
	CALL $6(CALL $5(CALL $5($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [7]) = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18793])
	CALL memcpy(*($0 + [4]), ($2 + [7]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [84]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_32 $20
	$5 = ($global$0 - [432])
	$global$0 = $5
	*($5 + [272]) = $3
	*($5 + [280]) = $2
	CALL require_auth($1)
	CALL $17($5, ($5 + [280]), ($5 + [272]))
	$6 = [0]
	*((($5 + [232]) + [32])) = [0]
	*($5 + [248]) = (int_64)-1
	$7 = *($0)
	*($5 + [232]) = $7
	*($5 + [240]) = $7
	*($5 + [256]) = (int_64)0
	$8 = CALL db_lowerbound_i64($7, $7, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $9(($5 + [232]), $8)
	if ( ((int_64)*($9 + [16]) != (int_64)$2) ){ goto $label$3 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$3
	$10 = [0]
	goto $label$1 
	
.LABEL $label$2
	$10 = [84]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$143 
	
.LABEL $label$145
	if ( ((int_64)*(($9 + [32])) != (int_64)$3) ){ goto $label$58 }
	goto $label$59 
	
.LABEL $label$144
	$9 = CALL $9(($5 + [232]), $8)
	if ( ((int_64)*($9 + [16]) == (int_64)$2) ){ goto $label$57 }
	$10 = [0]
	goto $label$4 
	
.LABEL $label$143
	CALL eosio_assert([1], [18827])
	$8 = CALL db_next_i64(*($9 + [140]), ($5 + [288]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$60 }
	$10 = [84]
	goto $label$4 
	
.LABEL $label$142
	$9 = [0]
	$11 = [0]
	goto $label$56 
	
.LABEL $label$141
	$11 = [1]
	$10 = [4]
	goto $label$4 
	
.LABEL $label$140
	CALL eosio_assert($11, [17025])
	CALL eosio_assert(*($9 + [8]), [17083])
	*((($5 + [192]) + [32])) = [0]
	*($5 + [200]) = $1
	*($5 + [208]) = (int_64)-1
	*($5 + [216]) = (int_64)0
	*($5 + [228]) = [0]
	*($5 + [192]) = *($0)
	*($5 + [184]) = ($5 + [192])
	*($5 + [296]) = $2
	*($5 + [288]) = $3
	CALL $10(($5 + [48]), ($5 + [184]), ($5 + [288]))
	$8 = *($5 + [52])
	if ( ($8 == 0) ){ goto $label$55 }
	$10 = [5]
	goto $label$4 
	
.LABEL $label$139
	$6 = ( $8 ? [0] : (int_64)(((int_64)((int_64)*($5 + [288]) ^ (int_64)*(($8 + [24]))) | (int_64)((int_64)*($5 + [296]) ^ (int_64)*($8 + [8]))) == 0) )
	$10 = [6]
	goto $label$4 
	
.LABEL $label$138
	$12 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17264])
	*(($5 + [176])) = [0]
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	$2 = *($0)
	*($5 + [144]) = $2
	*($5 + [152]) = $1
	$13 = [0]
	$8 = CALL db_find_i64($2, $1, (int_64)-5001342339331915776, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$54 }
	$10 = [7]
	goto $label$4 
	
.LABEL $label$137
	$13 = CALL $18(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($5 + [144])), [19048])
	$10 = [8]
	goto $label$4 
	
.LABEL $label$136
	$14 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($14, [17264])
	CALL eosio_assert(((int_64)*($13 + [24]) > (int_64)0), [17290])
	$15 = CALL current_time()
	CALL eosio_assert(((int_64))($15 - *($13 + [8])) >= (int_64)((int_64)*($9 + [80]) * (int_64)86400000000)), [17314])
	$16 = *($9 + [40])
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18454])
	$2 = (uint_64)$3 >> (uint_64)(int_64)8
	$7 = $2)
	$10 = [9]
	goto $label$4 
	
.LABEL $label$135
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$10 = [78]
	goto $label$4 
	
.LABEL $label$134
	$17 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$10 = [79]
	goto $label$4 
	
.LABEL $label$133
	$7 = $17
	$6 = [1]
	$18 = $12
	$12 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$132
	$7 = $17
	$10 = [81]
	goto $label$4 
	
.LABEL $label$131
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$10 = [82]
	goto $label$4 
	
.LABEL $label$130
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$12 < (int_32)[6])
	$18 = ($12 + [1])
	$12 = $18
	if ( $6 ){ goto $label$5 }
	$10 = [83]
	goto $label$4 
	
.LABEL $label$129
	$6 = [1]
	$12 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$128
	$6 = [0]
	$10 = [11]
	goto $label$4 
	
.LABEL $label$127
	CALL eosio_assert($6, [18503])
	$7 = *(($13 + [24]))
	CALL __multi3(($5 + [32]), *($9 + [48]), (int_64)0, $7, (int_64)$7 >> (int_64)63))
	CALL __multi3(($5 + [16]), *($5 + [32]), *((($5 + [32]) + [8])), *(($9 + [80])), (int_64)0)
	CALL __divti3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)3650000, (int_64)0)
	$17 = *($5)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18454])
	$10 = [12]
	goto $label$4 
	
.LABEL $label$126
	$18 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$10 = [72]
	goto $label$4 
	
.LABEL $label$125
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$10 = [73]
	goto $label$4 
	
.LABEL $label$124
	$2 = $7
	$18 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$123
	$2 = $7
	$10 = [75]
	goto $label$4 
	
.LABEL $label$122
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$10 = [76]
	goto $label$4 
	
.LABEL $label$121
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$12 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $12 ){ goto $label$7 }
	$10 = [77]
	goto $label$4 
	
.LABEL $label$120
	$18 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$47 }
	$10 = [13]
	goto $label$4 
	
.LABEL $label$119
	CALL eosio_assert($18, [18503])
	CALL eosio_assert([1], [18582])
	$2 = ((int_64)$16 + (int_64)$17)
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [18625])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [18644])
	$8 = ($9 + [32])
	CALL eosio_assert(((int_64)*($8) == (int_64)$3), [18523])
	$19 = *($9 + [24])
	if ( ((int_64)$2 <= (int_64)$19) ){ goto $label$42 }
	$10 = [71]
	goto $label$4 
	
.LABEL $label$118
	$7 = *($8)
	CALL eosio_assert(((int_64)$7 == (int_64)$3), [18662])
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($19 - $16)) > (int_64)-4611686018427387904), [18710])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [18732])
	$3 = *($0)
	$2 = *($9 + [56])
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$117
	$7 = $3
	$3 = *($0)
	$2 = *($9 + [56])
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$41 }
	$10 = [15]
	goto $label$4 
	
.LABEL $label$116
	*($5 + [136]) = (int_64)3617214756542218240
	*($5 + [128]) = $2
	$16 = *($9 + [16])
	*(($5 + [312])) = $7
	*($5 + [296]) = $3
	*($5 + [288]) = $2
	*($5 + [304]) = $17
	$20 = ($5 + [320])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$38 }
	$10 = [16]
	goto $label$4 
	
.LABEL $label$115
	$12 = [0]
	$6 = *([0] + [18756])
	$2 = $1
	$10 = [17]
	goto $label$4 
	
.LABEL $label$114
	*((($5 + [48]) + ($8 = $12))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$12 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$36 }
	$10 = [18]
	goto $label$4 
	
.LABEL $label$113
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$37 }
	$10 = [19]
	goto $label$4 
	
.LABEL $label$112
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$35 }
	$10 = [69]
	goto $label$4 
	
.LABEL $label$111
	*($5 + [112]) = ($12 << [1])
	$6 = (($5 + [112]) | [1])
	goto $label$34 
	
.LABEL $label$110
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	*($5 + [112]) = [0]
	$8 = (($5 + [112]) | [1])
	goto $label$32 
	
.LABEL $label$109
	$18 = (($12 + [16]) & [-16])
	$6 = CALL _Znwj($18)
	*($5 + [112]) = ($18 | [1])
	*($5 + [120]) = $6
	*($5 + [116]) = $12
	$10 = [21]
	goto $label$4 
	
.LABEL $label$108
	$18 = ($8 + [1])
	$8 = [0]
	$10 = [22]
	goto $label$4 
	
.LABEL $label$107
	*(($6 + $8)) = *((($5 + [48]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$33 }
	$10 = [23]
	goto $label$4 
	
.LABEL $label$106
	$8 = ($6 + $12)
	$10 = [24]
	goto $label$4 
	
.LABEL $label$105
	*($8) = [0]
	$8 = CALL $79(($5 + [112]), [0], [17353])
	*($20) = *($8)
	$12 = ($8 + [8])
	*(($20 + [8])) = *($12)
	*($8) = (int_64)0
	*($12) = [0]
	$8 = CALL $19(($5 + [48]), ($5 + [128]), $16, (int_64)-3617168760277827584, ($5 + [288]))
	CALL $20(($5 + [416]), $8)
	$12 = *($5 + [416])
	CALL send_inline($12, (*($5 + [420]) - $12))
	$12 = *($5 + [416])
	if ( ($12 == 0) ){ goto $label$31 }
	$10 = [25]
	goto $label$4 
	
.LABEL $label$104
	*($5 + [420]) = $12
	CALL _ZdlPv($12)
	$10 = [26]
	goto $label$4 
	
.LABEL $label$103
	$12 = *($8 + [28])
	if ( ($12 == 0) ){ goto $label$30 }
	$10 = [27]
	goto $label$4 
	
.LABEL $label$102
	*(($8 + [32])) = $12
	CALL _ZdlPv($12)
	$10 = [28]
	goto $label$4 
	
.LABEL $label$101
	$12 = *($8 + [16])
	if ( ($12 == 0) ){ goto $label$29 }
	$10 = [29]
	goto $label$4 
	
.LABEL $label$100
	*(($8 + [20])) = $12
	CALL _ZdlPv($12)
	$10 = [30]
	goto $label$4 
	
.LABEL $label$99
	if ( ((*(($5 + [320])) & [1]) == 0) ){ goto $label$28 }
	$10 = [31]
	goto $label$4 
	
.LABEL $label$98
	CALL _ZdlPv(*(($5 + [328])))
	$10 = [32]
	goto $label$4 
	
.LABEL $label$97
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$27 }
	$10 = [33]
	goto $label$4 
	
.LABEL $label$96
	CALL _ZdlPv(*($5 + [120]))
	$10 = [34]
	goto $label$4 
	
.LABEL $label$95
	$3 = *($0)
	$10 = [35]
	goto $label$4 
	
.LABEL $label$94
	CALL eosio_assert($14, [18857])
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($5 + [144])), [18892])
	CALL eosio_assert(((int_64)*($5 + [144]) == (int_64)CALL $fimport$7()), [18938])
	$2 = *($13)
	$16 = *($13 + [24])
	$8 = ($13 + [32])
	$19 = *($8)
	CALL eosio_assert(((int_64)$7 == (int_64)$19), [18582])
	$7 = ((int_64)$16 + (int_64)$17)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18625])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [18644])
	*($8) = $19
	*($13 + [24]) = (int_64))((int_64)0 - $7)
	*($13 + [8]) = $15
	CALL eosio_assert(((int_64)$2 == (int_64)*($13)), [18989])
	*($5 + [56]) = (($5 + [288]) + [40])
	*($5 + [52]) = ($5 + [288])
	*($5 + [48]) = ($5 + [288])
	CALL $21(($5 + [48]), $13)
	CALL db_update_i64(*($13 + [44]), $3, ($5 + [288]), [40])
	$8 = ($5 + [160])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$26 }
	$10 = [36]
	goto $label$4 
	
.LABEL $label$93
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$10 = [37]
	goto $label$4 
	
.LABEL $label$92
	$2 = CALL current_time()
	*(($5 + [76])) = (int_64)0
	*(($5 + [92])) = (int_64)0
	*(($5 + [100])) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [64]) = [0]
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [296]) = (int_64)3617214756542218240
	$2 = *($0)
	*($5 + [288]) = $2
	*($5 + [416]) = $2
	*($5 + [112]) = (int_64)-7951197872704569344
	*($5 + [136]) = $4
	*($5 + [128]) = $1
	CALL $22(($5 + [84]), ($5 + [288]), ($5 + [416]), ($5 + [112]), ($5 + [128]))
	*($5 + [68]) = *($9 + [84])
	*($5 + [136]) = $1
	*($5 + [128]) = $4
	CALL cancel_deferred(($5 + [128]))
	$2 = *($0)
	CALL $1(($5 + [288]), ($5 + [48]))
	$8 = *($5 + [288])
	CALL send_deferred(($5 + [128]), $2, $8, (*($5 + [292]) - $8), [1])
	$8 = *($5 + [288])
	if ( ($8 == 0) ){ goto $label$25 }
	$10 = [38]
	goto $label$4 
	
.LABEL $label$91
	*($5 + [292]) = $8
	CALL _ZdlPv($8)
	$10 = [39]
	goto $label$4 
	
.LABEL $label$90
	$7 = *($0)
	CALL eosio_assert($11, [18857])
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)($5 + [232])), [18892])
	CALL eosio_assert(((int_64)*($5 + [232]) == (int_64)CALL $fimport$7()), [18938])
	*(($8 = ($9 + [40]))) = ((int_64)*($8) + (int_64)$17)
	$2 = *($9)
	CALL eosio_assert([1], [18989])
	*($5 + [424]) = (($5 + [288]) + [125])
	*($5 + [420]) = ($5 + [288])
	*($5 + [416]) = ($5 + [288])
	CALL $14(($5 + [416]), $9)
	CALL db_update_i64(*($9 + [140]), $7, ($5 + [288]), [125])
	$8 = ($5 + [248])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$24 }
	$10 = [40]
	goto $label$4 
	
.LABEL $label$89
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$10 = [41]
	goto $label$4 
	
.LABEL $label$88
	CALL $23(($5 + [48]))
	$9 = *($5 + [168])
	if ( ($9 == 0) ){ goto $label$23 }
	$10 = [42]
	goto $label$4 
	
.LABEL $label$87
	$6 = ($5 + [172])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$22 }
	$10 = [43]
	goto $label$4 
	
.LABEL $label$86
	$10 = [44]
	goto $label$4 
	
.LABEL $label$85
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$20 }
	$10 = [45]
	goto $label$4 
	
.LABEL $label$84
	CALL _ZdlPv($12)
	$10 = [46]
	goto $label$4 
	
.LABEL $label$83
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$21 }
	$10 = [47]
	goto $label$4 
	
.LABEL $label$82
	$8 = *(($5 + [168]))
	goto $label$19 
	
.LABEL $label$81
	$8 = $9
	$10 = [48]
	goto $label$4 
	
.LABEL $label$80
	*($6) = $9
	CALL _ZdlPv($8)
	$10 = [49]
	goto $label$4 
	
.LABEL $label$79
	$9 = *($5 + [216])
	if ( ($9 == 0) ){ goto $label$18 }
	$10 = [50]
	goto $label$4 
	
.LABEL $label$78
	$6 = ($5 + [220])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$17 }
	$10 = [51]
	goto $label$4 
	
.LABEL $label$77
	$10 = [52]
	goto $label$4 
	
.LABEL $label$76
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$15 }
	$10 = [53]
	goto $label$4 
	
.LABEL $label$75
	CALL _ZdlPv($12)
	$10 = [54]
	goto $label$4 
	
.LABEL $label$74
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$16 }
	$10 = [55]
	goto $label$4 
	
.LABEL $label$73
	$8 = *(($5 + [216]))
	goto $label$14 
	
.LABEL $label$72
	$8 = $9
	$10 = [56]
	goto $label$4 
	
.LABEL $label$71
	*($6) = $9
	CALL _ZdlPv($8)
	$10 = [57]
	goto $label$4 
	
.LABEL $label$70
	$9 = *($5 + [256])
	if ( ($9 == 0) ){ goto $label$13 }
	$10 = [58]
	goto $label$4 
	
.LABEL $label$69
	$6 = ($5 + [260])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$12 }
	$10 = [59]
	goto $label$4 
	
.LABEL $label$68
	$10 = [60]
	goto $label$4 
	
.LABEL $label$67
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$10 }
	$10 = [61]
	goto $label$4 
	
.LABEL $label$66
	CALL _ZdlPv($12)
	$10 = [62]
	goto $label$4 
	
.LABEL $label$65
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$11 }
	$10 = [63]
	goto $label$4 
	
.LABEL $label$64
	$8 = *(($5 + [256]))
	goto $label$9 
	
.LABEL $label$63
	$8 = $9
	$10 = [64]
	goto $label$4 
	
.LABEL $label$62
	*($6) = $9
	CALL _ZdlPv($8)
	$10 = [65]
	goto $label$4 
	
.LABEL $label$61
	$global$0 = ($5 + [432])
	return 
	
.LABEL $label$60
	$10 = [1]
	goto $label$4 
	
.LABEL $label$59
	$10 = [3]
	goto $label$4 
	
.LABEL $label$58
	$10 = [0]
	goto $label$4 
	
.LABEL $label$57
	$10 = [2]
	goto $label$4 
	
.LABEL $label$56
	$10 = [4]
	goto $label$4 
	
.LABEL $label$55
	$10 = [6]
	goto $label$4 
	
.LABEL $label$54
	$10 = [8]
	goto $label$4 
	
.LABEL $label$53
	$10 = [9]
	goto $label$4 
	
.LABEL $label$52
	$10 = [11]
	goto $label$4 
	
.LABEL $label$51
	$10 = [9]
	goto $label$4 
	
.LABEL $label$50
	$10 = [11]
	goto $label$4 
	
.LABEL $label$49
	$10 = [10]
	goto $label$4 
	
.LABEL $label$48
	$10 = [10]
	goto $label$4 
	
.LABEL $label$47
	$10 = [12]
	goto $label$4 
	
.LABEL $label$46
	$10 = [12]
	goto $label$4 
	
.LABEL $label$45
	$10 = [13]
	goto $label$4 
	
.LABEL $label$44
	$10 = [13]
	goto $label$4 
	
.LABEL $label$43
	$10 = [13]
	goto $label$4 
	
.LABEL $label$42
	$10 = [14]
	goto $label$4 
	
.LABEL $label$41
	$10 = [35]
	goto $label$4 
	
.LABEL $label$40
	$10 = [35]
	goto $label$4 
	
.LABEL $label$39
	$10 = [15]
	goto $label$4 
	
.LABEL $label$38
	$10 = [70]
	goto $label$4 
	
.LABEL $label$37
	$10 = [17]
	goto $label$4 
	
.LABEL $label$36
	$10 = [19]
	goto $label$4 
	
.LABEL $label$35
	$10 = [20]
	goto $label$4 
	
.LABEL $label$34
	$10 = [21]
	goto $label$4 
	
.LABEL $label$33
	$10 = [22]
	goto $label$4 
	
.LABEL $label$32
	$10 = [24]
	goto $label$4 
	
.LABEL $label$31
	$10 = [26]
	goto $label$4 
	
.LABEL $label$30
	$10 = [28]
	goto $label$4 
	
.LABEL $label$29
	$10 = [30]
	goto $label$4 
	
.LABEL $label$28
	$10 = [32]
	goto $label$4 
	
.LABEL $label$27
	$10 = [34]
	goto $label$4 
	
.LABEL $label$26
	$10 = [37]
	goto $label$4 
	
.LABEL $label$25
	$10 = [39]
	goto $label$4 
	
.LABEL $label$24
	$10 = [41]
	goto $label$4 
	
.LABEL $label$23
	$10 = [49]
	goto $label$4 
	
.LABEL $label$22
	$10 = [68]
	goto $label$4 
	
.LABEL $label$21
	$10 = [44]
	goto $label$4 
	
.LABEL $label$20
	$10 = [46]
	goto $label$4 
	
.LABEL $label$19
	$10 = [48]
	goto $label$4 
	
.LABEL $label$18
	$10 = [57]
	goto $label$4 
	
.LABEL $label$17
	$10 = [67]
	goto $label$4 
	
.LABEL $label$16
	$10 = [52]
	goto $label$4 
	
.LABEL $label$15
	$10 = [54]
	goto $label$4 
	
.LABEL $label$14
	$10 = [56]
	goto $label$4 
	
.LABEL $label$13
	$10 = [65]
	goto $label$4 
	
.LABEL $label$12
	$10 = [66]
	goto $label$4 
	
.LABEL $label$11
	$10 = [60]
	goto $label$4 
	
.LABEL $label$10
	$10 = [62]
	goto $label$4 
	
.LABEL $label$9
	$10 = [64]
	goto $label$4 
	
.LABEL $label$8
	$10 = [74]
	goto $label$4 
	
.LABEL $label$7
	$10 = [75]
	goto $label$4 
	
.LABEL $label$6
	$10 = [80]
	goto $label$4 
	
.LABEL $label$5
	$10 = [81]
	goto $label$4 
	$10
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($1)
	*($3 + [8]) = $5
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [16]) = $4)
	$1 = [0]
	$6 = CALL db_find_i64($5, $4, (int_64)-4157508551318700032, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $24(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($3 + [8])), [19048])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17562])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($1 + [8])), [17589])
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)4152997947673411584, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [19048])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $53($7, CALL $fimport$13(*($7), *($7 + [8]), (int_64)4152997947673411584, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [19048])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5 + [4])
	$7 = *($5)
	$8 = *($7 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)4152997947673411584, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	CALL $53($7, $9)
	*($3 + [4]) = [0]
	*($3) = $7
	$8 = *(*(CALL $55($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [19150])
	*($1) = *(($7 + [16]))
	*($1 + [8]) = *($6 + [8])
	$7 = *($5 + [8])
	*($1 + [16]) = *($7)
	*(($5 = ($1 + [24]))) = *(($7 + [8]))
	$7 = $2
	$2 = ($7 + [-32])
	$global$0 = $2
	CALL eosio_assert([1], [18793])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [18793])
	$6 = ($1 + [8])
	CALL memcpy(($7 + [-24]), $6, [8])
	CALL eosio_assert([1], [18793])
	CALL memcpy(($7 + [-16]), ($1 + [16]), [8])
	*($3) = *($5)
	CALL eosio_assert([1], [18793])
	CALL memcpy(($7 + [-8]), $3, [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)4152997947673411584, *(*($0 + [8])), $8, $2, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [8]) = *($6)
	*($3) = *($5)
	*($1 + [40]) = CALL db_idx128_store($8, (int_64)4152997947673411584, $10, $11, $3)
	$global$0 = ($3 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5 + [8])
	$7 = *($5)
	$8 = *($7 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)-5001342339331915776, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	CALL $18($7, $9)
	*($3 + [4]) = [0]
	*($3) = $7
	$8 = *(*(CALL $56($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [19150])
	*($1) = *(($7 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *($6 + [8])
	$5 = *($5 + [12])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$7 = $2
	$5 = ($7 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($7 + [-8])
	CALL $21($3, $1)
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-5001342339331915776, *(*($0 + [8])), $8, $5, [40])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18799])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $91($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $57(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($4 + [32])
	$6 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $2($6, $7)
	$6 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $1
	*($5 + [32]) = $4
	*($5 + [36]) = ($4 + [8])
	*($5 + [40]) = ($4 + [16])
	CALL $25(($5 + [32]), ($5 + [24]))
	$global$0 = ($5 + [48])
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18793])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18793])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [140]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19256])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [19202])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19202])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $74(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $74(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18793])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18793])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18822])
	CALL memcpy(($2 + [7]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [8]) = ((int_32)*($2 + [7]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [18822])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [18822])
	CALL memcpy(($1 + [80]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [18822])
	CALL memcpy(($1 + [84]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18799])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $91($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	CALL $54(($3 + [32]), $5)
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19256])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5001342339331915776)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [19202])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19202])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $18(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18793])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18793])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18793])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18827])
	$2 = *($0 + [4])
	$3 = *($2 + [40])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx128_find_primary(*($3), *($3 + [8]), (int_64)4152997947673411584, $1, *($2))
	*(*(($0 + [4])) + [40]) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = CALL db_idx128_next($3, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1)
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [19048])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $53($6, CALL $fimport$13(*($6), *($6 + [8]), (int_64)4152997947673411584, $5))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [19048])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [40])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [19338])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [19383])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19433])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19256])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4152997947673411584)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [19202])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19202])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $53(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $2($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18793])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18793])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $51(CALL $35($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $2(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [18793])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [18793])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $58(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *($0 + [24])
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_32)*(($4 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$4 = ($4 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$4 = *(($4 + [-24]))
	$global$0 = ($3 + [16])
	return $4
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18799])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $91($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	CALL db_get_i64($1, $7, $6)
	*(($8 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [18822])
	CALL memcpy($8, $7, [8])
	*($3 + [8]) = (int_64)0
	$4 = ($6 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [18822])
	CALL memcpy(($3 + [8]), ($7 + [8]), [8])
	*($8 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [18822])
	CALL memcpy(($8 + [16]), ($7 + [16]), [8])
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)$4 != (int_32)[24]), [18822])
	CALL memcpy(($3 + [8]), ($7 + [24]), [8])
	*($8 + [24]) = *($3 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[32]), [18822])
	CALL memcpy(($8 + [32]), ($7 + [32]), [8])
	*($8 + [44]) = $1
	$9 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$10 = *(($0 + [32]))
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$10) ){ goto $label$8 }
	*($4 + [8]) = $9
	*($4) = $8
	*($4 + [16]) = $1
	*($5) = ($4 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = ($0 + [24])
	$2 = *($11)
	$5 = ((int_32)($4 - $2) / (int_32)[24])
	$12 = ($5 + [1])
	if ( ((uint_32)$12 >= (uint_32)[178956971]) ){ goto $label$10 }
	$11 = [178956970]
	$10 = ((int_32)($10 - $2) / (int_32)[24])
	if ( ((uint_32)$10 > (uint_32)[89478484]) ){ goto $label$12 }
	$10 = ($10 << [1])
	$11 = ( $12 ? $10 : ($10 <= $12) )
	if ( ($11 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = CALL _Znwj(((int_32)$11 * (int_32)[24]))
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	goto $label$9 
	
.LABEL $label$11
	$11 = [0]
	$10 = [0]
	goto $label$9 
	
.LABEL $label$10
	CALL $81($11)
	
.LABEL $label$9
	*(($5 = ($10 + ($13 = ((int_32)$5 * (int_32)[24])))) + [8]) = $9
	*($5) = $8
	*($5 + [16]) = $1
	$11 = ($10 + ((int_32)$11 * (int_32)[24]))
	$12 = ($5 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	$1 = (($10 + $13) + [-24])
	
.LOOP $label$14:
	$5 = ($4 + [-24])
	$10 = *($5)
	*($5) = [0]
	*($1) = $10
	*(($1 + [16])) = *(($4 + [-8]))
	*(($1 + [8])) = *(($4 + [-16]))
	$1 = ($1 + [-24])
	$4 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$14 }
	$5 = ($1 + [24])
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	
.LABEL $label$13
	*(($0 + [28])) = $12
	*(($0 + [24])) = $5
	*(($0 + [32])) = $11
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	CALL _ZdlPv($1)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$18 }
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ($6 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($7)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
	(unreachable)
	return $8
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18793])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [192])
	$global$0 = $3
	*((($3 + [88]) + [32])) = [0]
	*($3 + [96]) = $1
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$4 = *($0)
	*($3 + [88]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $1, (int_64)-5001342339331915776, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $18(($3 + [88]), $6)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($3 + [88])), [19048])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [17264])
	CALL eosio_assert((CASTING uint_32)(uint_64 (uint_64)*($5 + [24]) >> (uint_64)(int_64)63)), [17366])
	$8 = *($5 + [16])
	$4 = *($0)
	$9 = *(($5 + [32]))
	$2 = *($5 + [24])
	*(($3 + [152])) = [0]
	*($3 + [144]) = (int_64)0
	$6 = CALL $86([17390])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [144]) = ($6 << [1])
	$10 = (($3 + [144]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = (($6 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($3 + [144]) = ($11 | [1])
	*($3 + [152]) = $10
	*($3 + [148]) = $6
	
.LABEL $label$7
	CALL memcpy($10, [17390], $6)
	
.LABEL $label$6
	$12 = (int_64))((int_64)0 - $2)
	$11 = [0]
	*(($10 + $6)) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$12 }
	$10 = *([0] + [18756])
	$2 = $1
	
.LOOP $label$14:
	*(($3 + ($6 = $11))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$11 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($3 + [136])) = [0]
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$11 }
	*($3 + [128]) = ($11 << [1])
	$10 = (($3 + [128]) | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($3 + [136])) = [0]
	*($3 + [128]) = (int_64)0
	*($3 + [128]) = [0]
	$6 = (($3 + [128]) | [1])
	$11 = $6
	goto $label$9 
	
.LABEL $label$11
	$13 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($13)
	*($3 + [128]) = ($13 | [1])
	*($3 + [136]) = $10
	*($3 + [132]) = $11
	
.LABEL $label$10
	$13 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$15:
	*(($10 + $6)) = *(($3 + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$15 }
	$11 = ($10 + $11)
	$6 = (($3 + [128]) | [1])
	
.LABEL $label$9
	*($11) = [0]
	$11 = *($3 + [128])
	$10 = ($11 & [1])
	$6 = CALL $77(($3 + [144]), ( *($3 + [136]) ? $6 : $10 ), ( *($3 + [132]) ? uint_32($11 >> [1]) : $10 ))
	$2 = *($6)
	*($6) = [0]
	$11 = *($6 + [8])
	*($6 + [4 align=4]) = (int_64)0
	*(($10 = (($3 + [48]) + [24]))) = [0]
	*(($3 + [24])) = $9
	*(($3 + [40])) = $11
	*($3 + [64]) = (int_64)0
	*($3) = $4
	*($3 + [8]) = $1
	*($3 + [16]) = $12
	*($3 + [32]) = $2
	*($3 + [48]) = $8
	*($3 + [56]) = (int_64)-3617168760277827584
	*(($6 = CALL _Znwj([16]))) = $4
	*($6 + [8]) = (int_64)3617214756542218240
	*((($3 + [48]) + [36])) = [0]
	$11 = ($6 + [16])
	*($10) = $11
	*(($3 + [68])) = $11
	*($3 + [64]) = $6
	*($3 + [76 align=4]) = (int_64)0
	$6 = *($3 + [32])
	$11 = ( *(($3 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($11 + [32])
	$2 = (CASTING uint_64)(uint_32 $11)
	$11 = ($3 + [76])
	
.LOOP $label$16:
	$6 = ($6 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$18 }
	CALL $2($11, $6)
	$11 = *(($3 + [80]))
	$6 = *(($3 + [76]))
	goto $label$17 
	
.LABEL $label$18
	$11 = [0]
	$6 = [0]
	
.LABEL $label$17
	*($3 + [164]) = $6
	*($3 + [160]) = $6
	*($3 + [168]) = $11
	*($3 + [176]) = ($3 + [160])
	*($3 + [184]) = $3
	CALL $27(($3 + [184]), ($3 + [176]))
	CALL $20(($3 + [160]), ($3 + [48]))
	$6 = *($3 + [160])
	CALL send_inline($6, (*($3 + [164]) - $6))
	$6 = *($3 + [160])
	if ( ($6 == 0) ){ goto $label$19 }
	*($3 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$6 = *($3 + [76])
	if ( ($6 == 0) ){ goto $label$20 }
	*(($3 + [80])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$6 = *($3 + [64])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($3 + [68])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( (*($3 + [32]) & [1]) ){ goto $label$23 }
	if ( (*($3 + [128]) & [1]) ){ goto $label$22 }
	goto $label$4 
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($3 + [136])))
	if ( (*($3 + [144]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $73(($3 + [144]))
	
.LABEL $label$4
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [152]))
	
.LABEL $label$2
	CALL eosio_assert($7, [19304])
	CALL eosio_assert($7, [18827])
	$6 = [0]
	$11 = CALL db_next_i64(*($5 + [44]), $3)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$24 }
	CALL $18(($3 + [88]), $11)
	
.LABEL $label$24
	CALL $28(($3 + [88]), $5)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	*($3) = *($0)
	*($3 + [184]) = $3
	*($3 + [56]) = *(($5 + [16]))
	$7 = ($5 + [32])
	*($3 + [48]) = *($7)
	CALL $10(($3 + [160]), ($3 + [184]), ($3 + [48]))
	$14 = ($3 + [184])
	$11 = *($3 + [164])
	if ( ($11 == 0) ){ goto $label$25 }
	if ( ((int_64)((int_64)((int_64)*($3 + [48]) ^ (int_64)*(($11 + [24]))) | (int_64)((int_64)*($3 + [56]) ^ (int_64)*($11 + [8]))) != (int_64)0) ){ goto $label$25 }
	$14 = *($3 + [160])
	$6 = $11
	
.LABEL $label$25
	$4 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18857])
	$10 = *($3 + [184])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$10), [18892])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$7()), [18938])
	$13 = ($6 + [24])
	$1 = *($13)
	$0 = ($6 + [8])
	*($3 + [136]) = *($0)
	*($3 + [128]) = $1
	$2 = *($6)
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [18582])
	$1 = ((int_64)*($11) + (int_64)*(($5 + [24])))
	*(($11 = ($6 + [16]))) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [18625])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [18644])
	CALL eosio_assert(((int_64)$2 == (int_64)*($6)), [18989])
	CALL eosio_assert([1], [18793])
	CALL memcpy(($3 + [48]), $6, [8])
	CALL eosio_assert([1], [18793])
	CALL memcpy((($3 + [48]) | [8]), $0, [8])
	CALL eosio_assert([1], [18793])
	CALL memcpy((($3 + [48]) + [16]), $11, [8])
	*($3 + [160]) = *($13)
	CALL eosio_assert([1], [18793])
	CALL memcpy((($3 + [48]) + [24]), ($3 + [160]), [8])
	CALL db_update_i64(*($6 + [36]), $4, ($3 + [48]), [32])
	if ( (uint_64)($2 <= *($10 + [16])) ){ goto $label$26 }
	*(($10 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	*($3 + [168]) = *($0)
	*($3 + [160]) = *($13)
	if ( (CALL $85(($3 + [128]), ($3 + [160]), [16]) == 0) ){ goto $label$27 }
	$13 = ($6 + [40])
	$11 = *($13)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$28 }
	$11 = CALL db_idx128_find_primary(*($10), *($10 + [8]), (int_64)4152997947673411584, ($3 + [144]), $2)
	*($13) = $11
	
.LABEL $label$28
	CALL db_idx128_update($11, $4, ($3 + [160]))
	
.LABEL $label$27
	if ( ((int_64)*($6 + [16]) > (int_64)0) ){ goto $label$29 }
	*($3 + [48]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $14))
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19304])
	CALL $29(($3 + [48]))
	CALL $30(*($3 + [184]), $6)
	
.LABEL $label$29
	$10 = *($3 + [24])
	if ( ($10 == 0) ){ goto $label$30 }
	$13 = ($3 + [28])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$34 }
	CALL _ZdlPv($11)
	
.LABEL $label$34
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	$6 = *(($3 + [24]))
	goto $label$31 
	
.LABEL $label$32
	$6 = $10
	
.LABEL $label$31
	*($13) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$30
	$10 = *($3 + [112])
	if ( ($10 == 0) ){ goto $label$35 }
	$13 = ($3 + [116])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$37 }
	
.LOOP $label$38:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$39 }
	CALL _ZdlPv($11)
	
.LABEL $label$39
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$38 }
	$6 = *(($3 + [112]))
	goto $label$36 
	
.LABEL $label$37
	$6 = $10
	
.LABEL $label$36
	*($13) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$35
	$global$0 = ($3 + [192])
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $89(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $89(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $91($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $91($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $64 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $86([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $84([7], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $73([8192])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $95($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($3 + [72]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [80])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [96])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [112])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [128])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [136]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [144])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18822])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18822])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18822])
	CALL memcpy(($4 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18822])
	CALL memcpy(($4 + [68]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*($2) = $4
	CALL $61($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19486])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $2($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18822])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $63($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $76($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $76($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $73($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $82())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $90($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $88 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $87 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $87([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $94([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $88([8216])
	return [0]
	
.LABEL $label$1
	CALL $88([8216])
	return [-1]
}

void .FUNC $83 (int_32 $0)
{
}

int_32 .FUNC $82 ()
{
	return [8208]
}

void .FUNC $81 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $86($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $4 ){ goto $label$6 }
	$0 = ($0 + [1])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$0 = CALL $85($0, $1, $4)
	if ( ($0 == 0) ){ goto $label$1 }
	return $0
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $5 : ($3 <= $2) )
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $73 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $95($0)
	
.LABEL $label$1
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $75($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [19338])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [19383])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19433])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [140]))
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	$14 = ($global$0 - [224])
	$global$0 = $14
	*($14 + [192]) = $4
	*($14 + [200]) = $1
	*($14 + [184]) = $6
	*($14 + [180]) = $3
	*($14 + [176]) = $7
	*($14 + [172]) = $8
	CALL $32($0, ($14 + [200]), $2, ($14 + [180]), ($14 + [192]), $5, ($14 + [176]), ($14 + [172]), $9, $10, $11, $12, $13)
	*((($14 + [128]) + [32])) = [0]
	*($14 + [144]) = (int_64)-1
	$6 = *($0)
	*($14 + [128]) = $6
	*($14 + [136]) = $6
	*($14 + [152]) = (int_64)0
	$8 = CALL db_lowerbound_i64($6, $6, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = ($2 + [8])
	$8 = CALL $9(($14 + [128]), $8)
	if ( ((int_64)*($8 + [16]) != (int_64)$1) ){ goto $label$3 }
	$15 = [2]
	goto $label$1 
	
.LABEL $label$3
	$15 = [0]
	goto $label$1 
	
.LABEL $label$2
	$15 = [32]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$60 
	
.LABEL $label$62
	if ( ((int_64)*(($8 + [32])) != (int_64)*($7)) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$61
	$8 = CALL $9(($14 + [128]), $8)
	if ( ((int_64)*($8 + [16]) == (int_64)$1) ){ goto $label$26 }
	$15 = [0]
	goto $label$4 
	
.LABEL $label$60
	CALL eosio_assert([1], [18827])
	$8 = CALL db_next_i64(*($8 + [140]), ($14 + [64]))
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$29 }
	$15 = [32]
	goto $label$4 
	
.LABEL $label$59
	CALL eosio_assert([0], [17450])
	$15 = [4]
	goto $label$4 
	
.LABEL $label$58
	$0 = *($14 + [152])
	if ( ($0 == 0) ){ goto $label$22 }
	$15 = [5]
	goto $label$4 
	
.LABEL $label$57
	$2 = ($14 + [156])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$19 }
	$15 = [6]
	goto $label$4 
	
.LABEL $label$56
	$15 = [7]
	goto $label$4 
	
.LABEL $label$55
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	$15 = [8]
	goto $label$4 
	
.LABEL $label$54
	CALL _ZdlPv($7)
	$15 = [9]
	goto $label$4 
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$18 }
	$15 = [10]
	goto $label$4 
	
.LABEL $label$52
	$8 = *(($14 + [152]))
	goto $label$16 
	
.LABEL $label$51
	$8 = $0
	$15 = [11]
	goto $label$4 
	
.LABEL $label$50
	*($2) = $0
	CALL _ZdlPv($8)
	$15 = [12]
	goto $label$4 
	
.LABEL $label$49
	$global$0 = ($14 + [224])
	return 
	
.LABEL $label$48
	$6 = *($14 + [192])
	*($14 + [127]) = ((int_64)*($8 + [56]) != (int_64)$6)
	$4 = *($0)
	*($14 + [126]) = ((int_64)$6 == (int_64)$4)
	*($14 + [64]) = $2
	*($14 + [84]) = $5
	*($14 + [100]) = $9
	*($14 + [104]) = $10
	*($14 + [108]) = $11
	*($14 + [112]) = $12
	*($14 + [116]) = $13
	*($14 + [68]) = ($14 + [180])
	*($14 + [72]) = ($14 + [127])
	*($14 + [76]) = ($14 + [192])
	*($14 + [80]) = ($14 + [126])
	*($14 + [88]) = ($14 + [184])
	*($14 + [92]) = ($14 + [176])
	*($14 + [96]) = ($14 + [172])
	CALL eosio_assert([1], [18857])
	CALL $37(($14 + [128]), $8, $4, ($14 + [64]))
	if ( (*($14 + [127]) == 0) ){ goto $label$25 }
	$15 = [14]
	goto $label$4 
	
.LABEL $label$47
	if ( (*($14 + [126]) & [255]) ){ goto $label$24 }
	$15 = [15]
	goto $label$4 
	
.LABEL $label$46
	*($14 + [16]) = (int_64)3617214756542218240
	$6 = *($14 + [192])
	*($14 + [8]) = $6
	$4 = *(($2 + [8]))
	*((($14 + [64]) + [24])) = $4
	*($14 + [64]) = $6
	*($14 + [80]) = (int_64)1
	*($14 + [72]) = *($0)
	CALL eosio_assert([1], [18454])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	$15 = [16]
	goto $label$4 
	
.LABEL $label$45
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$15 = [26]
	goto $label$4 
	
.LABEL $label$44
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$15 = [27]
	goto $label$4 
	
.LABEL $label$43
	$6 = $4
	$7 = [1]
	$0 = $8
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$42
	$6 = $4
	$15 = [29]
	goto $label$4 
	
.LABEL $label$41
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$15 = [30]
	goto $label$4 
	
.LABEL $label$40
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$0 = ($8 + [1])
	$8 = $0
	if ( $7 ){ goto $label$5 }
	$15 = [31]
	goto $label$4 
	
.LABEL $label$39
	$7 = [1]
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$38
	$7 = [0]
	$15 = [18]
	goto $label$4 
	
.LABEL $label$37
	CALL eosio_assert($7, [18503])
	$0 = CALL $74(($14 + [96]), [8192])
	$8 = CALL $19(($14 + [24]), ($14 + [8]), $1, (int_64)-3617168760277827584, ($14 + [64]))
	CALL $20(($14 + [208]), $8)
	$7 = *($14 + [208])
	CALL send_inline($7, (*($14 + [212]) - $7))
	$7 = *($14 + [208])
	if ( ($7 == 0) ){ goto $label$9 }
	$15 = [19]
	goto $label$4 
	
.LABEL $label$36
	*($14 + [212]) = $7
	CALL _ZdlPv($7)
	$15 = [20]
	goto $label$4 
	
.LABEL $label$35
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$8 }
	$15 = [21]
	goto $label$4 
	
.LABEL $label$34
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	$15 = [22]
	goto $label$4 
	
.LABEL $label$33
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$7 }
	$15 = [23]
	goto $label$4 
	
.LABEL $label$32
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	$15 = [24]
	goto $label$4 
	
.LABEL $label$31
	if ( ((*($0) & [1]) == 0) ){ goto $label$23 }
	$15 = [25]
	goto $label$4 
	
.LABEL $label$30
	CALL _ZdlPv(*(($14 + [104])))
	$0 = *($14 + [152])
	if ( $0 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$29
	$15 = [1]
	goto $label$4 
	
.LABEL $label$28
	$15 = [3]
	goto $label$4 
	
.LABEL $label$27
	$15 = [0]
	goto $label$4 
	
.LABEL $label$26
	$15 = [2]
	goto $label$4 
	
.LABEL $label$25
	$15 = [4]
	goto $label$4 
	
.LABEL $label$24
	$15 = [4]
	goto $label$4 
	
.LABEL $label$23
	$15 = [4]
	goto $label$4 
	
.LABEL $label$22
	$15 = [12]
	goto $label$4 
	
.LABEL $label$21
	$15 = [12]
	goto $label$4 
	
.LABEL $label$20
	$15 = [5]
	goto $label$4 
	
.LABEL $label$19
	$15 = [13]
	goto $label$4 
	
.LABEL $label$18
	$15 = [7]
	goto $label$4 
	
.LABEL $label$17
	$15 = [9]
	goto $label$4 
	
.LABEL $label$16
	$15 = [11]
	goto $label$4 
	
.LABEL $label$15
	$15 = [16]
	goto $label$4 
	
.LABEL $label$14
	$15 = [18]
	goto $label$4 
	
.LABEL $label$13
	$15 = [16]
	goto $label$4 
	
.LABEL $label$12
	$15 = [18]
	goto $label$4 
	
.LABEL $label$11
	$15 = [17]
	goto $label$4 
	
.LABEL $label$10
	$15 = [17]
	goto $label$4 
	
.LABEL $label$9
	$15 = [20]
	goto $label$4 
	
.LABEL $label$8
	$15 = [22]
	goto $label$4 
	
.LABEL $label$7
	$15 = [24]
	goto $label$4 
	
.LABEL $label$6
	$15 = [28]
	goto $label$4 
	
.LABEL $label$5
	$15 = [29]
	goto $label$4 
	$15
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [18892])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18938])
	$6 = *($3)
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [48]) = *(*($3 + [4]))
	$7 = *($1)
	if ( (*(*($3 + [8])) == 0) ){ goto $label$1 }
	*($1 + [56]) = *(*($3 + [12]))
	*($1 + [8]) = *(*($3 + [16]))
	
.LABEL $label$1
	*($1 + [64]) = *(*($3 + [20]))
	*($1 + [80]) = *(*($3 + [28]))
	*($1 + [72]) = *(*($3 + [24]))
	*($1 + [84]) = *(*($3 + [32]))
	*($1 + [96]) = *(*($3 + [36]))
	*($1 + [104]) = *(*($3 + [40]))
	*($1 + [112]) = *(*($3 + [44]))
	*($1 + [120]) = *(*($3 + [48]))
	*($1 + [128]) = *(*($3 + [52]))
	CALL eosio_assert([1], [18989])
	$4 = $4
	$3 = ($4 + [-128])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-3])
	CALL $14($5, $1)
	CALL db_update_i64(*($1 + [140]), $2, $3, [125])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $75($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $78($0, $1, $2, CALL $86($2))
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	$13 = ($global$0 - [48])
	$global$0 = $13
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [17616])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($5) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17650])
	CALL eosio_assert(((int_32)*($3) != (int_32)[0]), [17689])
	CALL eosio_assert((*($3) <= [3601]), [17732])
	CALL eosio_assert(((int_32)*($6) != (int_32)[0]), [17767])
	CALL eosio_assert(((int_32)*($7) != (int_32)[0]), [17814])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($8) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17857])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($9) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17908])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($10) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17950])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($11) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17992])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($12) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [18034])
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$2(*($1)), [18076])
	CALL eosio_assert(CALL $fimport$2(*($4)), [18096])
	*($13 + [24]) = (int_64)6138663582462279680
	*($13 + [16]) = *($0)
	*(($0 = CALL _Znwj([16]))) = *($13 + [16])
	*(($0 + [8])) = *($13 + [24])
	*($13 + [32]) = $0
	$0 = ($0 + [16])
	*($13 + [40]) = $0
	*($13 + [36]) = $0
	*($13 + [8]) = [0]
	*($13) = (int_64)0
	CALL $2($13, [17])
	$0 = *($13 + [4])
	$3 = *($13)
	*($13 + [20]) = $3
	*($13 + [16]) = $3
	*($13 + [24]) = $0
	CALL $35(($13 + [16]), ($13 + [32]))
	$0 = *($13)
	CALL eosio_assert(((int_32)CALL $fimport$1(*($4), (int_64)3617214756542218240, [0], [0], $0, (*($13 + [4]) - $0), (int_64)0) > (int_32)[0]), [18117])
	CALL $17($13, $1, ($2 + [8]))
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($5 + [8])), [18168])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($8 + [8])), [18201])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($9 + [8])), [18246])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($10 + [8])), [18282])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($11 + [8])), [18318])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($12 + [8])), [18354])
	if ( ($0 == 0) ){ goto $label$1 }
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$2 = *($13 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	*($13 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($13 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $9($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $59($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [19150])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = *(*($5 + [20]))
	*($1 + [48]) = *(*($5 + [16]))
	*($1 + [64]) = *(*($5 + [24]))
	*($1 + [72]) = *(*($5 + [28]))
	*($1 + [80]) = *(*($5 + [32]))
	*($1 + [84]) = *(*($5 + [36]))
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = *(*($5 + [40]))
	*($1 + [104]) = *(*($5 + [44]))
	*($1 + [112]) = *(*($5 + [48]))
	*($1 + [120]) = *(*($5 + [52]))
	*($1 + [128]) = *(*($5 + [56]))
	$6 = $2
	$5 = ($6 + [-128])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-3])
	CALL $14($3, $1)
	$7 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $7, $5, [125])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [19338])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [19383])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19433])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)4152997947673411584, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx128_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	$14 = ($global$0 - [224])
	$global$0 = $14
	*($14 + [192]) = $4
	*($14 + [200]) = $1
	*($14 + [184]) = $6
	*($14 + [180]) = $3
	*($14 + [176]) = $7
	*($14 + [172]) = $8
	CALL $32($0, ($14 + [200]), $2, ($14 + [180]), ($14 + [192]), $5, ($14 + [176]), ($14 + [172]), $9, $10, $11, $12, $13)
	*(($3 = (($14 + [128]) + [32]))) = [0]
	*($14 + [144]) = (int_64)-1
	$6 = *($0)
	*($14 + [128]) = $6
	*($14 + [136]) = $6
	*($14 + [152]) = (int_64)0
	$8 = CALL db_lowerbound_i64($6, $6, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = ($2 + [8])
	$8 = CALL $9(($14 + [128]), $8)
	if ( ((int_64)*($8 + [16]) == (int_64)*($14 + [200])) ){ goto $label$3 }
	$15 = [0]
	goto $label$1 
	
.LABEL $label$3
	$15 = [3]
	goto $label$1 
	
.LABEL $label$2
	$15 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$65 
	
.LABEL $label$65
	CALL eosio_assert([1], [17402])
	goto $label$28 
	
.LABEL $label$64
	$8 = CALL $9(($14 + [128]), $8)
	if ( ((int_64)*($8 + [16]) != (int_64)*($14 + [200])) ){ goto $label$29 }
	$15 = [3]
	goto $label$4 
	
.LABEL $label$63
	CALL eosio_assert(((uint_64)((int_64)*($7) ^ (int_64)*(($8 + [32]))) > (uint_64)(int_64)255), [17402])
	$15 = [1]
	goto $label$4 
	
.LABEL $label$62
	CALL eosio_assert([1], [18827])
	$8 = CALL db_next_i64(*($8 + [140]), ($14 + [64]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$27 }
	$15 = [4]
	goto $label$4 
	
.LABEL $label$61
	$6 = *($0)
	*($14 + [127]) = ((int_64)*($14 + [192]) == (int_64)$6)
	*($14 + [76]) = $2
	*($14 + [88]) = $5
	*($14 + [104]) = $9
	*($14 + [108]) = $10
	*($14 + [112]) = $11
	*($14 + [116]) = $12
	*($14 + [120]) = $13
	*($14 + [68]) = ($14 + [127])
	*($14 + [64]) = ($14 + [128])
	*($14 + [72]) = ($14 + [200])
	*($14 + [80]) = ($14 + [180])
	*($14 + [84]) = ($14 + [192])
	*($14 + [92]) = ($14 + [184])
	*($14 + [96]) = ($14 + [176])
	*($14 + [100]) = ($14 + [172])
	*($14 + [8]) = $6
	CALL eosio_assert(((int_64)*($14 + [128]) == (int_64)CALL $fimport$7()), [19099])
	*($14 + [28]) = ($14 + [64])
	*($14 + [24]) = ($14 + [128])
	*($14 + [32]) = ($14 + [8])
	*(($8 = CALL _Znwj([152])) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [136]) = ($14 + [128])
	CALL $33(($14 + [24]), $8)
	*($14 + [208]) = $8
	$6 = *($8)
	*($14 + [24]) = $6
	$5 = *($8 + [140])
	*($14 + [220]) = $5
	$9 = ($14 + [156])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*($3)) ){ goto $label$26 }
	$15 = [35]
	goto $label$4 
	
.LABEL $label$60
	*($7 + [8]) = $6
	*($7 + [16]) = $5
	*($14 + [208]) = [0]
	*($7) = $8
	*($9) = ($7 + [24])
	$8 = *($14 + [208])
	*($14 + [208]) = [0]
	if ( $8 ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$59
	CALL $34(($14 + [152]), ($14 + [208]), ($14 + [24]), ($14 + [220]))
	$8 = *($14 + [208])
	*($14 + [208]) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	$15 = [6]
	goto $label$4 
	
.LABEL $label$58
	CALL _ZdlPv($8)
	$15 = [7]
	goto $label$4 
	
.LABEL $label$57
	if ( *($14 + [127]) ){ goto $label$22 }
	$15 = [18]
	goto $label$4 
	
.LABEL $label$56
	*($14 + [16]) = (int_64)3617214756542218240
	$6 = *($14 + [192])
	*($14 + [8]) = $6
	$4 = *($14 + [200])
	$1 = *($2 + [8])
	*((($14 + [64]) + [24])) = $1
	*($14 + [64]) = $6
	*($14 + [80]) = (int_64)1
	*($14 + [72]) = *($0)
	CALL eosio_assert([1], [18454])
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = [0]
	$15 = [19]
	goto $label$4 
	
.LABEL $label$55
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$15 = [29]
	goto $label$4 
	
.LABEL $label$54
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$15 = [30]
	goto $label$4 
	
.LABEL $label$53
	$6 = $1
	$7 = [1]
	$0 = $8
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$52
	$6 = $1
	$15 = [32]
	goto $label$4 
	
.LABEL $label$51
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$15 = [33]
	goto $label$4 
	
.LABEL $label$50
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$0 = ($8 + [1])
	$8 = $0
	if ( $7 ){ goto $label$5 }
	$15 = [34]
	goto $label$4 
	
.LABEL $label$49
	$7 = [1]
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$48
	$7 = [0]
	$15 = [21]
	goto $label$4 
	
.LABEL $label$47
	CALL eosio_assert($7, [18503])
	$0 = CALL $74(($14 + [96]), [8192])
	$8 = CALL $19(($14 + [24]), ($14 + [8]), $4, (int_64)-3617168760277827584, ($14 + [64]))
	CALL $20(($14 + [208]), $8)
	$7 = *($14 + [208])
	CALL send_inline($7, (*($14 + [212]) - $7))
	$7 = *($14 + [208])
	if ( ($7 == 0) ){ goto $label$9 }
	$15 = [22]
	goto $label$4 
	
.LABEL $label$46
	*($14 + [212]) = $7
	CALL _ZdlPv($7)
	$15 = [23]
	goto $label$4 
	
.LABEL $label$45
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$8 }
	$15 = [24]
	goto $label$4 
	
.LABEL $label$44
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	$15 = [25]
	goto $label$4 
	
.LABEL $label$43
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$7 }
	$15 = [26]
	goto $label$4 
	
.LABEL $label$42
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	$15 = [27]
	goto $label$4 
	
.LABEL $label$41
	if ( ((*($0) & [1]) == 0) ){ goto $label$21 }
	$15 = [28]
	goto $label$4 
	
.LABEL $label$40
	CALL _ZdlPv(*(($14 + [104])))
	$15 = [8]
	goto $label$4 
	
.LABEL $label$39
	$0 = *($14 + [152])
	if ( ($0 == 0) ){ goto $label$20 }
	$15 = [9]
	goto $label$4 
	
.LABEL $label$38
	$2 = ($14 + [156])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$19 }
	$15 = [10]
	goto $label$4 
	
.LABEL $label$37
	$15 = [11]
	goto $label$4 
	
.LABEL $label$36
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	$15 = [12]
	goto $label$4 
	
.LABEL $label$35
	CALL _ZdlPv($7)
	$15 = [13]
	goto $label$4 
	
.LABEL $label$34
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$18 }
	$15 = [14]
	goto $label$4 
	
.LABEL $label$33
	$8 = *(($14 + [152]))
	goto $label$16 
	
.LABEL $label$32
	$8 = $0
	$15 = [15]
	goto $label$4 
	
.LABEL $label$31
	*($2) = $0
	CALL _ZdlPv($8)
	$15 = [16]
	goto $label$4 
	
.LABEL $label$30
	$global$0 = ($14 + [224])
	return 
	
.LABEL $label$29
	$15 = [0]
	goto $label$4 
	
.LABEL $label$28
	$15 = [1]
	goto $label$4 
	
.LABEL $label$27
	$15 = [2]
	goto $label$4 
	
.LABEL $label$26
	$15 = [5]
	goto $label$4 
	
.LABEL $label$25
	$15 = [7]
	goto $label$4 
	
.LABEL $label$24
	$15 = [7]
	goto $label$4 
	
.LABEL $label$23
	$15 = [6]
	goto $label$4 
	
.LABEL $label$22
	$15 = [8]
	goto $label$4 
	
.LABEL $label$21
	$15 = [8]
	goto $label$4 
	
.LABEL $label$20
	$15 = [16]
	goto $label$4 
	
.LABEL $label$19
	$15 = [17]
	goto $label$4 
	
.LABEL $label$18
	$15 = [11]
	goto $label$4 
	
.LABEL $label$17
	$15 = [13]
	goto $label$4 
	
.LABEL $label$16
	$15 = [15]
	goto $label$4 
	
.LABEL $label$15
	$15 = [19]
	goto $label$4 
	
.LABEL $label$14
	$15 = [21]
	goto $label$4 
	
.LABEL $label$13
	$15 = [19]
	goto $label$4 
	
.LABEL $label$12
	$15 = [21]
	goto $label$4 
	
.LABEL $label$11
	$15 = [20]
	goto $label$4 
	
.LABEL $label$10
	$15 = [20]
	goto $label$4 
	
.LABEL $label$9
	$15 = [23]
	goto $label$4 
	
.LABEL $label$8
	$15 = [25]
	goto $label$4 
	
.LABEL $label$7
	$15 = [27]
	goto $label$4 
	
.LABEL $label$6
	$15 = [31]
	goto $label$4 
	
.LABEL $label$5
	$15 = [32]
	goto $label$4 
	$15
}