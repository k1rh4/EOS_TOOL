(data (i32.const 8192) "contract was not support action\00")
(data (i32.const 8224) "transfer not made to this contract\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8345) "transfer not from eosio.token Or eosyxtoken11\00")
(data (i32.const 8391) "EOS\00")
(data (i32.const 8395) "EOSYX\00")
(data (i32.const 8401) "operation was valide\00")
(data (i32.const 8422) "draw share account was not exists\00")
(data (i32.const 8456) "draw share account was not enough\00")
(data (i32.const 8490) "This is your hold token reward,Thanks for your support\ef\bc\81\e8\bf\99\e6\98\af\e6\82\a8\e7\9a\84\e6\8c\81\e5\b8\81\e5\88\86\e7\ba\a2\ef\bc\8c\e6\84\9f\e8\b0\a2\e6\82\a8\e7\9a\84\e6\94\af\e6\8c\81\ef\bc\81(Eosyx token from eosyxtoken11 ,https://eosyx.vip)\00")
(data (i32.const 8646) "redeem asset number invalide\00")
(data (i32.const 8675) "redeem EOSYX asset was not exist\00")
(data (i32.const 8708) "redeem EOSYX asset was not enough\00")
(data (i32.const 8742) "draw EOSYX asset was not enough\00")
(data (i32.const 8774) "redeem EOSYX asset was time not enough\00")
(data (i32.const 8813) "This is your unstake Token reward!(\e8\bf\99\e6\98\af\e6\82\a8\e7\9a\84\e8\b5\8e\e5\9b\9e\e7\9a\84eosyx\e4\bb\a3\e5\b8\81\ef\bc\89https://eosyx.vip\00")
(data (i32.const 8901) "share count was invalide\00")
(data (i32.const 8926) "\e8\bf\9b\e5\85\a5\e9\be\99\e4\ba\89\e8\99\8e\e6\96\97\e7\9a\84\e6\9e\84\e9\80\a0\e6\96\b9\e6\b3\95 \n\00")
(data (i32.const 8962) "unable to find key\00")
(data (i32.const 8981) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9032) "error reading iterator\00")
(data (i32.const 9055) "read\00")
(data (i32.const 9060) "string is too long to be a valid symbol_code\00")
(data (i32.const 9105) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9158) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9207) "invalid symbol name\00")
(data (i32.const 9227) "write\00")
(data (i32.const 9233) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9292) "divide by zero\00")
(data (i32.const 9307) "signed division overflow\00")
(data (i32.const 9332) "multiplication overflow\00")
(data (i32.const 9356) "multiplication underflow\00")
(data (i32.const 9381) "get\00")
(data (i32.const 9385) "cannot pass end iterator to modify\00")
(data (i32.const 9420) "object passed to modify is not in multi_index\00")
(data (i32.const 9466) "cannot modify objects in table of another contract\00")
(data (i32.const 9517) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9576) "attempt to add asset with different symbol\00")
(data (i32.const 9619) "addition underflow\00")
(data (i32.const 9638) "addition overflow\00")
(data (i32.const 9656) "cannot create objects in table of another contract\00")
(data (i32.const 9707) "cannot pass end iterator to erase\00")
(data (i32.const 9741) "cannot increment end iterator\00")
(data (i32.const 9771) "object passed to erase is not in multi_index\00")
(data (i32.const 9816) "cannot erase objects in table of another contract\00")
(data (i32.const 9866) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9919) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9971) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10025) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10073) "attempt to subtract asset with different symbol\00")
(data (i32.const 10121) "subtraction underflow\00")
(data (i32.const 10143) "subtraction overflow\00")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$12 (result i64)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$19 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $46))
(export "_Znwj" (func $44))
(export "_Znaj" (func $45))
(export "_ZdaPv" (func $47))
(export "_ZnwjSt11align_val_t" (func $48))
(export "_ZnajSt11align_val_t" (func $49))
(export "_ZdlPvSt11align_val_t" (func $50))
(export "_ZdaPvSt11align_val_t" (func $51))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $5 $7 $9 $11 $13)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18580))
(global $global$2 i32 (i32.const 18580))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = ($0 + [88])
	$4 = *($1)
	$6 = *(($0 + [116]))
	$5 = *(($0 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [8981])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)-4157661383434960896, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $22($3, $7)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [8981])
	
.LABEL $label$1
	$7 = CALL $58([8391])
	if ( ($7 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9060])
	goto $label$7 
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$9 = (int_64)0
	
.LOOP $label$9:
	$6 = *(($7 + [8390]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$10
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$9 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert([1], [9158])
	$4 = ((int_64)$9 & (int_64)72057594037927935)
	$10 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $9
	$6 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [9207])
	$7 = CALL $58([8395])
	if ( ($7 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9060])
	goto $label$18 
	
.LABEL $label$19
	if ( ($7 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$9 = (int_64)0
	
.LOOP $label$20:
	$6 = *(($7 + [8394]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$21
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$20 }
	goto $label$16 
	
.LABEL $label$17
	$9 = (int_64)0
	
.LABEL $label$16
	CALL eosio_assert([1], [9158])
	$4 = ((int_64)$9 & (int_64)72057594037927935)
	$11 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$4 = $9
	$12 = [1]
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	$4 = $9
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$29 }
	$12 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$26 }
	
.LABEL $label$27
	CALL eosio_assert($12, [9207])
	$9 = *($0)
	if ( ($8 == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL eosio_assert([0], [9207])
	$9 = *($0)
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$24
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9656])
	*(($7 = CALL _Znwj([80])) + [64]) = $3
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = $11
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = $10
	*($7 + [56]) = (int_64)0
	*($7) = *($1)
	*($7 + [8]) = *($1 + [16])
	*(($7 + [16])) = *(($1 + [24]))
	*($2 + [88]) = (($2 + [16]) + [64])
	*($2 + [84]) = ($2 + [16])
	*($2 + [80]) = ($2 + [16])
	CALL $24(($2 + [80]), $7)
	$4 = *($7)
	$5 = CALL db_store_i64(*(($0 + [96])), (int_64)-4157661383434960896, $9, $4, ($2 + [16]), [64])
	*($7 + [68]) = $5
	$6 = ($0 + [104])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$30 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$30
	*($2 + [80]) = $7
	$4 = *($7)
	*($2 + [16]) = $4
	*($2 + [12]) = $5
	$8 = ($0 + [116])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [120]))) ){ goto $label$32 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($2 + [80]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $7 ){ goto $label$31 }
	goto $label$22 
	
.LABEL $label$32
	CALL $30(($0 + [112]), ($2 + [80]), ($2 + [16]), ($2 + [12]))
	$7 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($7 == 0) ){ goto $label$22 }
	
.LABEL $label$31
	CALL _ZdlPv($7)
	goto $label$22 
	
.LABEL $label$23
	CALL eosio_assert([1], [9385])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [9420])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9466])
	$4 = *($8)
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)*(($8 + [16]))), [9576])
	$10 = ((int_64)*($8 + [8]) + (int_64)*($1 + [16]))
	*($8 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9619])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9638])
	CALL eosio_assert(((int_64)$4 == (int_64)*($8)), [9517])
	*($2 + [88]) = (($2 + [16]) + [64])
	*($2 + [84]) = ($2 + [16])
	*($2 + [80]) = ($2 + [16])
	CALL $24(($2 + [80]), $8)
	CALL db_update_i64(*($8 + [68]), $9, ($2 + [16]), [64])
	$7 = ($0 + [104])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$22 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	$6 = ($0 + [48])
	$7 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$33 }
	$7 = CALL $16($6, $5)
	
.LABEL $label$33
	$9 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9385])
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$6), [9420])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$5()), [9466])
	$4 = *($7)
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)*(($7 + [32]))), [9576])
	$10 = ((int_64)*($7 + [24]) + (int_64)*($1 + [16]))
	*($7 + [24]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9619])
	CALL eosio_assert(((int_64)*($7 + [24]) < (int_64)4611686018427387904), [9638])
	CALL eosio_assert(((int_64)$4 == (int_64)*($7)), [9517])
	*($2 + [88]) = (($2 + [16]) + [56])
	*($2 + [84]) = ($2 + [16])
	*($2 + [80]) = ($2 + [16])
	CALL $17(($2 + [80]), $7)
	CALL db_update_i64(*($7 + [60]), $9, ($2 + [16]), [56])
	$7 = ($0 + [64])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$34 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	$global$0 = ($2 + [96])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8259])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9816])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9866])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9381])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $31($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9055])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8981])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $34($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8981])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9420])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9466])
	$6 = *($1)
	$7 = *($3)
	$8 = *($7)
	$3 = CALL $58([8391])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9060])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = *(($3 + [8390]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	*(($5 + [56])) = [0]
	*($5 + [32]) = $8
	*($5 + [24]) = (int_64)6138663591592764928
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = CALL $29(($5 + [24]), $9, [8962])
	*(($11 = (($5 + [8]) + [8]))) = *(($3 + [8]))
	*($5 + [8]) = *($3)
	$12 = *($5 + [48])
	if ( ($12 == 0) ){ goto $label$7 }
	$13 = ($5 + [52])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$10 = *($3)
	*($3) = [0]
	if ( ($10 == 0) ){ goto $label$11 }
	CALL _ZdlPv($10)
	
.LABEL $label$11
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($5 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $12
	
.LABEL $label$8
	*($13) = $12
	CALL _ZdlPv($3)
	
.LABEL $label$7
	*($1 + [8]) = *($5 + [8])
	*(($1 + [16])) = *($11)
	$8 = *($7)
	$3 = CALL $58([8395])
	if ( ($3 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9060])
	goto $label$14 
	
.LABEL $label$15
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$9 = (int_64)0
	
.LOOP $label$16:
	$10 = *(($3 + [8394]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$17
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)0
	
.LABEL $label$12
	*((($5 + [24]) + [32])) = [0]
	*($5 + [32]) = $8
	*($5 + [24]) = (int_64)6138950441114059280
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = CALL $29(($5 + [24]), $9, [8962])
	*(($7 = (($5 + [8]) + [8]))) = *(($3 + [8]))
	*($5 + [8]) = *($3)
	$12 = *($5 + [48])
	if ( ($12 == 0) ){ goto $label$18 }
	$11 = ($5 + [52])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($3 + [-24])
	$10 = *($3)
	*($3) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$21 }
	$3 = *(($5 + [48]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $12
	
.LABEL $label$19
	*($11) = $12
	CALL _ZdlPv($3)
	
.LABEL $label$18
	*($1 + [24]) = *($5 + [8])
	*(($1 + [32])) = *($7)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9517])
	$10 = $4
	$3 = ($10 + [-64])
	$global$0 = $3
	*($5 + [28]) = $3
	*($5 + [24]) = $3
	*($5 + [32]) = ($10 + [-8])
	CALL $17(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $3, [56])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$23 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$global$0 = ($5 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [64])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [48])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $43($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [64])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9919])
	*($1) = *($7)
	$6 = *($5 + [4])
	*($1 + [8]) = *($6)
	*(($1 + [16])) = *(($6 + [8]))
	$5 = *($5 + [8])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	*($1 + [48]) = (CASTING uint_64)(uint_32 ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [259200]) / (uint_32)[86400]))
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = $2
	$2 = ($5 + [-64])
	$global$0 = $2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($5 + [-8])
	CALL $17($3, $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $8, $2, [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $6
	*($5 + [24]) = *($3)
	$4 = CALL $53((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = $1
	*(($3 = CALL _Znwj([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$0 = ($3 + [16])
	*((($5 + [56]) + [24])) = $0
	*(($5 + [76])) = $0
	*($5 + [72]) = $3
	*($5 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $31($4, $3)
	$4 = *(($5 + [88]))
	$3 = *(($5 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [116]) = $3
	*($5 + [112]) = $3
	*($5 + [120]) = $4
	*($5 + [96]) = ($5 + [112])
	*($5 + [104]) = ($5 + [8])
	CALL $32(($5 + [104]), ($5 + [96]))
	CALL $33(($5 + [112]), ($5 + [56]))
	$3 = *($5 + [112])
	CALL send_inline($3, (*($5 + [116]) - $3))
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [84])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [64]) = $0
	CALL $41(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9055])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9055])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9816])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9866])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $59(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10164])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $59(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10025])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7235159537265672192)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9971])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9971])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9227])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9227])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9055])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9055])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9055])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $61($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10164])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $61($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $61($1)
	
.LABEL $label$2
	*(CALL $56()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $61(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $64($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, float_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(CALL eosio_assert0($2), [8401])
	CALL eosio_assert(((($1 + [-1]) & [255]) <= [2]), [8401])
	$3 = ((float_64)$3 * (float_64)(float_64)1e4)
	CALL eosio_assert(((float_64)$3 > (float_64)(float_64)0), [8646])
	$5 = ($0 + [88])
	$7 = *(($0 + [116]))
	$6 = *(($0 + [112]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [8981])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [96])), (int_64)-4157661383434960896, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $22($5, $8)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [8981])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8675])
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$15 }
	$8 = CALL $58([8395])
	$7 = ($8 <= [8])
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$14 }
	$11 = (int_64)0
	if ( ($7 == 0) ){ goto $label$13 }
	goto $label$8 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*($9 + [24]) > (int_64)0), [8742])
	CALL eosio_assert(((uint_64)(int_64))(((int_64)((uint_64)CALL eosio_assert2() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($9 + [56])) > (uint_64)(int_64)129600), [8774])
	*((($4 + [16]) + [8])) = [0]
	*((($4 + [32]) + [8])) = *(($9 + [32]))
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = *($9 + [24])
	$12 = *($0 + [40])
	$8 = CALL $58([8813])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [16]) = ($8 << [1])
	$7 = (($4 + [16]) | [1])
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$14
	$11 = (Rounds 0)($3)
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$13
	CALL eosio_assert([0], [9060])
	goto $label$7 
	
.LABEL $label$12
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [16]) = ($6 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $8
	
.LABEL $label$11
	CALL memcpy($7, [8813], $8)
	
.LABEL $label$10
	*(($7 + $8)) = [0]
	*(($4 + [8])) = *((($4 + [32]) + [8]))
	*($4) = *($4 + [32])
	CALL $23($0, $12, $2, $4, ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$16
	$12 = *($0)
	CALL eosio_assert($10, [9385])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [9420])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9466])
	*($9 + [24]) = (int_64)0
	*($9 + [56]) = (int_64)0
	$2 = *($9)
	CALL eosio_assert([1], [9517])
	*($4 + [120]) = (($4 + [48]) + [64])
	*($4 + [116]) = ($4 + [48])
	*($4 + [112]) = ($4 + [48])
	CALL $24(($4 + [112]), $9)
	CALL db_update_i64(*($9 + [68]), $12, ($4 + [48]), [64])
	$8 = ($0 + [104])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$9
	CALL $52(($4 + [16]))
	
.LABEL $label$8
	if ( $8 ){ goto $label$7 }
	$12 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$12 = (int_64)0
	
.LOOP $label$17:
	$7 = *(($8 + [8394]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$17 }
	
.LABEL $label$6
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9158])
	$2 = ((int_64)$12 & (int_64)72057594037927935)
	$13 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$12 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$2 = $12
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$2 = $12
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$23 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$7 = [0]
	
.LABEL $label$19
	CALL eosio_assert($7, [9207])
	$8 = ($9 + [16])
	CALL eosio_assert(((int_64)$13 == (int_64)*($8)), [9233])
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)$11), [8708])
	$12 = *($0)
	CALL eosio_assert($10, [9385])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [9420])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9466])
	$2 = *($9)
	CALL eosio_assert(((int_64)$13 == (int_64)*($8)), [10073])
	$14 = (int_64)
	*($9 + [8]) = $14(*($9 + [8]) - $11))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [10121])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [10143])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($9 + [32]))), [9576])
	$14 = ((int_64)*($9 + [24]) + (int_64)$11)
	*($9 + [24]) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [9619])
	CALL eosio_assert(((int_64)*($9 + [24]) < (int_64)4611686018427387904), [9638])
	*($9 + [56]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($9)), [9517])
	*($4 + [120]) = (($4 + [48]) + [64])
	*($4 + [116]) = ($4 + [48])
	*($4 + [112]) = ($4 + [48])
	CALL $24(($4 + [112]), $9)
	CALL db_update_i64(*($9 + [68]), $12, ($4 + [48]), [64])
	$8 = ($0 + [104])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$24 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$7 = ($0 + [48])
	$8 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$25 }
	$8 = CALL $16($7, $9)
	
.LABEL $label$25
	$12 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9385])
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$7), [9420])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$5()), [9466])
	$2 = *($8)
	CALL eosio_assert(((int_64)$13 == (int_64)*(($8 + [32]))), [10073])
	$11 = (int_64)
	*($8 + [24]) = $11(*($8 + [24]) - $11))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [10121])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [10143])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [9517])
	*($4 + [120]) = (($4 + [48]) + [56])
	*($4 + [116]) = ($4 + [48])
	*($4 + [112]) = ($4 + [48])
	CALL $17(($4 + [112]), $8)
	CALL db_update_i64(*($8 + [60]), $12, ($4 + [48]), [56])
	$8 = ($0 + [64])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = (int_64)6138663591592764928
	*($4 + [48]) = (int_64)6138950441114059280
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [136]) = $0
	CALL prints([8926])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $64($2)
	
.LABEL $label$5
	CALL $8(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [48])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $16($2, $4)
	
.LABEL $label$1
	$5 = *($0)
	*($1 + [8]) = $0
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9385])
	CALL $28($2, $3, $5, ($1 + [8]))
	$global$0 = ($1 + [16])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *(($1 + [24]))
	$4 = CALL $58([8395])
	if ( ($4 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9060])
	goto $label$5 
	
.LABEL $label$6
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($4 + [8394]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$7 }
	if ( ((int_64)$3 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)$3 == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [48])
	$4 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $16($6, $7)
	
.LABEL $label$9
	$3 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9385])
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$6), [9420])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$5()), [9466])
	$5 = *($4)
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)*(($4 + [16]))), [9576])
	$8 = ((int_64)*($4 + [8]) + (int_64)*(($1 + [16])))
	*($4 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9619])
	CALL eosio_assert(((int_64)*($4 + [8]) < (int_64)4611686018427387904), [9638])
	CALL eosio_assert(((int_64)$5 == (int_64)*($4)), [9517])
	*($2 + [120]) = (($2 + [48]) + [56])
	*($2 + [116]) = ($2 + [48])
	*($2 + [112]) = ($2 + [48])
	CALL $17(($2 + [112]), $4)
	CALL db_update_i64(*($4 + [60]), $3, ($2 + [48]), [56])
	$4 = ($0 + [64])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$1 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	*(($2 + [24])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [16]))
	*(($2 + [8])) = *(($1 + [8]))
	*($2) = *($1)
	$4 = CALL $53(($2 + [32]), ($1 + [32]))
	CALL $18($0, $2)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($2 + [40])))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

void .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [48])
	$3 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $16($2, $3)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9707])
	CALL eosio_assert([1], [9741])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [60]), ($1 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $16($2, $5)
	
.LABEL $label$3
	CALL $19($2, $4)
	$4 = $3
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	$3 = CALL $58([8391])
	if ( ($3 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9060])
	goto $label$6 
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$4 = *(($3 + [8390]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$8 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$6 = (int_64)4
	
.LABEL $label$4
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = $6
	CALL eosio_assert([1], [9158])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $7
	$4 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$5 = ($3 + [1])
	$3 = $5
	if ( $4 ){ goto $label$14 }
	$4 = [1]
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	CALL eosio_assert($4, [9207])
	$3 = CALL $58([8395])
	if ( ($3 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [9060])
	goto $label$17 
	
.LABEL $label$18
	if ( ($3 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$6 = (int_64)0
	
.LOOP $label$19:
	$4 = *(($3 + [8394]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$20
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$19 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$15 
	
.LABEL $label$16
	$6 = (int_64)4
	
.LABEL $label$15
	*($1 + [24]) = (int_64)15749530000
	*($1 + [32]) = $6
	CALL eosio_assert([1], [9158])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$6 = $7
	$4 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$6 = $7
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$5 = ($3 + [1])
	$3 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [9207])
	$6 = *($0)
	*($1 + [8]) = $0
	*($1 + [12]) = ($1 + [40])
	*($1 + [16]) = ($1 + [24])
	*($1 + [88]) = $6
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$5()), [9656])
	*($1 + [64]) = $2
	*($1 + [68]) = ($1 + [8])
	*($1 + [72]) = ($1 + [88])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [56]) = $2
	CALL $20(($1 + [64]), $3)
	*($1 + [80]) = $3
	$6 = *($3)
	*($1 + [64]) = $6
	$5 = *($3 + [60])
	*($1 + [60]) = $5
	$2 = ($0 + [76])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$28 }
	*($4 + [8]) = $6
	*($4 + [16]) = $5
	*($1 + [80]) = [0]
	*($4) = $3
	*($2) = ($4 + [24])
	$3 = *($1 + [80])
	*($1 + [80]) = [0]
	if ( $3 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL $21(($0 + [72]), ($1 + [80]), ($1 + [64]), ($1 + [60]))
	$3 = *($1 + [80])
	*($1 + [80]) = [0]
	if ( ($3 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$global$0 = ($1 + [96])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $61($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $15(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = CALL $58([8391])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9060])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8390]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	$2 = CALL $58([8395])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9060])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (int_64)0
	
.LOOP $label$11:
	$4 = *(($2 + [8394]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9105])
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)4
	
.LABEL $label$7
	$7 = [0]
	$3 = *(($1 + [24]))
	if ( ((int_64)$3 == (int_64)$5) ){ goto $label$14 }
	if ( ((int_64)$3 != (int_64)$6) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($1 + [16])
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$13 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = [0]
	$2 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$3 = $5
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$3 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$1 = ($2 + [1])
	$2 = $1
	if ( $4 ){ goto $label$18 }
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$15 }
	
.LABEL $label$16
	$7 = ((int_64)$6 > (int_64)0)
	
.LABEL $label$13
	return $7
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [400])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 == (int_64)-6569208335818555392) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$10 }
	if ( ((int_64)$1 == (int_64)6138950441114059280) ){ goto $label$11 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$9 }
	
.LABEL $label$11
	CALL $2(($3 + [352]))
	*((($3 + [184]) + [24])) = [0]
	*(($3 + [240])) = $0
	*(($3 + [248])) = (int_64)-1
	*(($3 + [256])) = (int_64)0
	*(($3 + [264])) = [0]
	*(($3 + [280])) = $0
	*(($3 + [288])) = (int_64)-1
	*(($3 + [296])) = (int_64)0
	*(($3 + [304])) = [0]
	*(($3 + [320])) = $0
	*($3 + [192]) = $1
	*($3 + [184]) = $0
	*($3 + [200]) = (int_64)0
	*($3 + [216]) = (int_64)6138663591592764928
	*($3 + [224]) = (int_64)6138950441114059280
	*($3 + [232]) = $0
	*($3 + [272]) = $0
	*($3 + [312]) = $0
	*(($3 + [328])) = (int_64)-1
	*(($3 + [336])) = (int_64)0
	*(($3 + [344])) = [0]
	CALL prints([8926])
	*((($3 + [136]) + [24])) = *((($3 + [352]) + [24]))
	*((($3 + [136]) + [16])) = *((($3 + [352]) + [16]))
	*((($3 + [136]) + [8])) = *((($3 + [352]) + [8]))
	*($3 + [136]) = *($3 + [352])
	$4 = (($3 + [352]) + [32])
	$5 = CALL $53((($3 + [136]) + [32]), $4)
	CALL eosio_assert(CALL $3($3, ($3 + [136])), [8192])
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [176])))
	
.LABEL $label$12
	if ( ((int_64)*($3 + [352]) == (int_64)$0) ){ goto $label$6 }
	if ( ((int_64)*($3 + [360]) != (int_64)$0) ){ goto $label$7 }
	*((($3 + [88]) + [24])) = *((($3 + [352]) + [24]))
	*((($3 + [88]) + [16])) = *((($3 + [352]) + [16]))
	*((($3 + [88]) + [8])) = *((($3 + [352]) + [8]))
	*($3 + [88]) = *($3 + [352])
	$5 = CALL $53(($3 + [120]), $4)
	CALL $4(($3 + [184]), ($3 + [88]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [128])))
	goto $label$6 
	
.LABEL $label$10
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)-3102536759825661953) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)7112176236457099264) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [8]) = *($3 + [80])
	CALL $6($0, $0, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$13
	CALL eosio_assert([0], [8192])
	goto $label$1 
	
.LABEL $label$9
	CALL eosio_assert([0], [8345])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4373711020246433792) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$2 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [40]) = *($3 + [48])
	CALL $6($0, $0, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert([0], [8224])
	
.LABEL $label$6
	CALL $8(($3 + [184]))
	if ( ((*(($3 + [384])) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [392])))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [16]) = *($3 + [72])
	CALL $10($0, $0, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [24]) = *($3 + [64])
	CALL $12($0, $0, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [32]) = *($3 + [56])
	CALL $14($0, $0, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8192])
	
.LABEL $label$1
	CALL $57([0])
	$global$0 = ($3 + [400])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9055])
	CALL memcpy(($4 + [168]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = (int_64)6138663591592764928
	*($4 + [40]) = (int_64)6138950441114059280
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [128]) = $0
	CALL prints([8926])
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $64($2)
	
.LABEL $label$5
	CALL $8($4)
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9055])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9055])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9055])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9055])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [56]) = $0
	CALL $40(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_32 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = [0]
	*($4 + [184]) = (int_64)0
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9055])
	CALL memcpy(($4 + [168]), $2, [1])
	CALL eosio_assert(((uint_32)($7 + [-1]) > (uint_32)[7]), [9055])
	CALL memcpy((($4 + [168]) + [8]), ($2 + [1]), [8])
	CALL eosio_assert(((uint_32)($7 + [-9]) > (uint_32)[7]), [9055])
	CALL memcpy(($4 + [184]), ($2 + [9]), [8])
	*(($4 + [20])) = ($2 + [17])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = (int_64)6138663591592764928
	*($4 + [40]) = (int_64)6138950441114059280
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [128]) = $0
	CALL prints([8926])
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [184])
	$0 = *($4 + [176])
	$9 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($9 & [255])), (int_32 $0), (int_64 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $64($2)
	
.LABEL $label$5
	CALL $8($4)
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL eosio_assert(CALL eosio_assert0($1), [8401])
	$3 = ($0 + [88])
	$5 = *(($0 + [116]))
	$4 = *(($0 + [112]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8981])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $22($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8981])
	
.LABEL $label$1
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [8422])
	CALL eosio_assert(((int_64)*($7 + [40]) > (int_64)0), [8456])
	*((($2 + [16]) + [8])) = [0]
	*((($2 + [32]) + [8])) = *(($7 + [48]))
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = *($7 + [40])
	$8 = *($0 + [32])
	$6 = CALL $58([8490])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [16]) = ($9 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$7
	CALL memcpy($5, [8490], $6)
	
.LABEL $label$6
	*(($5 + $6)) = [0]
	*(($2 + [8])) = *((($2 + [32]) + [8]))
	*($2) = *($2 + [32])
	CALL $23($0, $8, $1, $2, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$9
	$8 = *($0)
	CALL eosio_assert($4, [9385])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [9420])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9466])
	*($7 + [40]) = (int_64)0
	$1 = *($7)
	CALL eosio_assert([1], [9517])
	*($2 + [120]) = (($2 + [48]) + [64])
	*($2 + [116]) = ($2 + [48])
	*($2 + [112]) = ($2 + [48])
	CALL $24(($2 + [112]), $7)
	CALL db_update_i64(*($7 + [68]), $8, ($2 + [48]), [64])
	$6 = ($0 + [104])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$10 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$global$0 = ($2 + [128])
	return (unreachable)
	
.LABEL $label$5
	CALL $52(($2 + [16]))
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9055])
	CALL memcpy(($4 + [168]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = (int_64)6138663591592764928
	*($4 + [40]) = (int_64)6138950441114059280
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [128]) = $0
	CALL prints([8926])
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $64($2)
	
.LABEL $label$5
	CALL $8($4)
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [48])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $16($3, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($4 + [48]) == (int_64)$1), [8901])
	$6 = ($0 + [128])
	$8 = *(($0 + [156]))
	$7 = *(($0 + [152]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($8 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$8 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$6), [8981])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$5 = CALL db_find_i64(*($6), *(($0 + [136])), (int_64)-4373710791243202560, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $25($6, $5)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$6), [8981])
	
.LABEL $label$2
	$5 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-4157661383434960896, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$8 = ($0 + [88])
	$5 = CALL $22($8, $5)
	if ( ($9 == 0) ){ goto $label$13 }
	$1 = *($9 + [8])
	$11 = *(($0 + [116]))
	$10 = *(($0 + [112]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$11 }
	
.LOOP $label$14:
	$7 = ($11 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$12 }
	$11 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$14 }
	goto $label$11 
	
.LABEL $label$13
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$5()), [9656])
	*(($7 = CALL _Znwj([32])) + [16]) = $6
	*($7 + [8]) = (int_64)0
	*($7) = $1
	*($7 + [8]) = *($5)
	CALL eosio_assert([1], [9227])
	CALL memcpy(($2 + [32]), $7, [8])
	CALL eosio_assert([1], [9227])
	CALL memcpy((($2 + [32]) | [8]), ($7 + [8]), [8])
	$1 = *($7)
	$10 = CALL db_store_i64(*(($0 + [136])), (int_64)-4373710791243202560, $12, $1, ($2 + [32]), [16])
	*($7 + [20]) = $10
	$11 = ($0 + [144])
	if ( (uint_64)($1 <= *($11)) ){ goto $label$15 }
	*($11) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($2 + [96]) = $7
	$1 = *($7)
	*($2 + [32]) = $1
	*($2 + [28]) = $10
	$13 = ($0 + [156])
	$11 = *($13)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [160]))) ){ goto $label$10 }
	*($11 + [8]) = $1
	*($11 + [16]) = $10
	*($2 + [96]) = [0]
	*($11) = $7
	*($13) = ($11 + [24])
	$7 = *($2 + [96])
	*($2 + [96]) = [0]
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$8), [8981])
	if ( $5 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$11
	$5 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $22($8, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$8), [8981])
	goto $label$8 
	
.LABEL $label$10
	CALL $26(($0 + [152]), ($2 + [96]), ($2 + [32]), ($2 + [28]))
	$7 = *($2 + [96])
	*($2 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$11 = (($2 + [32]) + [64])
	$10 = ($4 + [16])
	$13 = ($4 + [24])
	$14 = ($0 + [88])
	$7 = ($0 + [104])
	$15 = (int_64)0
	
.LOOP $label$16:
	$1 = *($5 + [8])
	if ( ((int_64)$1 <= (int_64)0) ){ goto $label$17 }
	$12 = *(($4 + [8]))
	CALL __multi3(($2 + [8]), $12, (int_64)$12 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$16 = *($10)
	$12 = *((($2 + [8]) + [8]))
	$1 = *($2 + [8])
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [9332])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [9356])
	$17 = *($13)
	CALL eosio_assert(((int_64)$17 != (int_64)0), [9292])
	CALL eosio_assert((((int_64)$1 != (int_64)-9223372036854775808) | ((int_64)$17 != (int_64)-1)), [9307])
	$18 = *($0)
	CALL eosio_assert([1], [9385])
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$8), [9420])
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$5()), [9466])
	$12 = *($5)
	CALL eosio_assert(((int_64)$16 == (int_64)*(($5 + [48]))), [9576])
	$1 = ((int_64)*($5 + [40]) + (int_64)((int_64)$1 / (int_64)$17))
	*($5 + [40]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9619])
	CALL eosio_assert(((int_64)*($5 + [40]) < (int_64)4611686018427387904), [9638])
	CALL eosio_assert(((int_64)$12 == (int_64)*($5)), [9517])
	*((($2 + [96]) + [8])) = $11
	*($2 + [100]) = ($2 + [32])
	*($2 + [96]) = ($2 + [32])
	CALL $24(($2 + [96]), $5)
	CALL db_update_i64(*($5 + [68]), $18, ($2 + [32]), [64])
	if ( (uint_64)($12 <= *($7)) ){ goto $label$17 }
	*($7) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	CALL eosio_assert([1], [9741])
	$5 = CALL db_next_i64(*(($5 + [68])), ($2 + [32]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $22($8, $5)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((uint_64)$15 <= (uint_64)(int_64)299) ){ goto $label$16 }
	$12 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9385])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$6), [9420])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$5()), [9466])
	*($9 + [8]) = *($5)
	$1 = *($9)
	CALL eosio_assert([1], [9517])
	CALL eosio_assert([1], [9227])
	CALL memcpy(($2 + [32]), $9, [8])
	CALL eosio_assert([1], [9227])
	CALL memcpy((($2 + [32]) | [8]), ($9 + [8]), [8])
	CALL db_update_i64(*($9 + [20]), $12, ($2 + [32]), [16])
	$5 = ($0 + [144])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($2 + [112])
	return 
	
.LABEL $label$6
	$1 = CALL current_time()
	$12 = ((int_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400])) * (int_64)86400)
	$1 = (CASTING uint_64)(uint_32 ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [259200]) / (uint_32)[86400]))
	$5 = [0]
	$8 = ($0 + [48])
	$7 = CALL db_lowerbound_i64(*($8), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	$5 = CALL $16($3, $7)
	
.LABEL $label$18
	$15 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9385])
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$3), [9420])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$5()), [9466])
	*($5 + [8]) = (int_64)0
	*($5 + [48]) = $1
	*($5 + [40]) = $12
	$1 = *($5)
	CALL eosio_assert([1], [9517])
	*($2 + [104]) = (($2 + [32]) + [56])
	*($2 + [100]) = ($2 + [32])
	*($2 + [96]) = ($2 + [32])
	CALL $17(($2 + [96]), $5)
	CALL db_update_i64(*($5 + [60]), $15, ($2 + [32]), [56])
	$5 = ($0 + [64])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$19 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [9707])
	CALL eosio_assert($5, [9741])
	$5 = CALL db_next_i64(*($9 + [20]), ($2 + [32]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$20 }
	CALL $25($6, $5)
	
.LABEL $label$20
	CALL $27($6, $9)
	$global$0 = ($2 + [112])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9227])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9227])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9227])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9227])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9227])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9055])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9055])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9227])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9227])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9227])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9227])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $42(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9227])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9227])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $37(CALL $36($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $56())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $60($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $61 (int_32 $0)
{
	return CALL $62([10184], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10176]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10180])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10176]) = [1]
	$2 = ($2 << [16])
	*([0] + [10180]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10180])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10180]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10176]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10176]) = [1]
	$3 = ($3 << [16])
	*([0] + [10180]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10180])
	
.LABEL $label$10
	*([0] + [10180]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18568])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18376]
	$3 = (((int_32)$1 * (int_32)[12]) + [18376])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $39($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $54($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $54($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $52($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $52 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 ()
{
	return [10168]
}

void .FUNC $57 (int_32 $0)
{
}