(data (i32.const 4) "\90U\00\00")
(data (i32.const 16) "collectible with name already exists\00")
(data (i32.const 64) "author account does not exist\00")
(data (i32.const 96) "revenue of unico account is more than 100 percent\00")
(data (i32.const 160) "revenue of author account is more than 100 percent\00")
(data (i32.const 224) "total revenue is more than 100 percent\00")
(data (i32.const 272) "secondary market revenue of unico account must be less than 100 percent\00")
(data (i32.const 352) "secondary market revenue of author account must be less than 100 percent\00")
(data (i32.const 432) "secondary market total revenue must be less than 100 percent\00")
(data (i32.const 496) "category has more than 64 bytes\00")
(data (i32.const 528) "invalid symbol in price\00")
(data (i32.const 560) "charity account does not exist\00")
(data (i32.const 592) "cannot create objects in table of another contract\00")
(data (i32.const 656) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 720) "invalid symbol name\00")
(data (i32.const 752) "next primary key in table is at autoincrement limit\00")
(data (i32.const 816) "write\00")
(data (i32.const 832) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 896) "cannot decrement iterator at beginning of table\00")
(data (i32.const 944) "error reading iterator\00")
(data (i32.const 976) "read\00")
(data (i32.const 992) "get\00")
(data (i32.const 1008) "cannot increment end iterator\00")
(data (i32.const 1040) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1104) "contract is temporary suspended\00")
(data (i32.const 1136) "collectible with id does not exist\00")
(data (i32.const 1184) "must issue positive number of licenses\00")
(data (i32.const 1232) "cannot issue more than 10 licenses at once\00")
(data (i32.const 1280) "licenses number exceeds available supply\00")
(data (i32.const 1328) "unicoeosnft1\00")
(data (i32.const 1344) "active\00")
(data (i32.const 1360) "issue\00")
(data (i32.const 1376) "issue collectible license(s)\00")
(data (i32.const 1408) "cannot pass end iterator to modify\00")
(data (i32.const 1456) "object passed to modify is not in multi_index\00")
(data (i32.const 1504) "cannot modify objects in table of another contract\00")
(data (i32.const 1568) "attempt to add asset with different symbol\00")
(data (i32.const 1616) "addition underflow\00")
(data (i32.const 1648) "addition overflow\00")
(data (i32.const 1680) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1744) "to account does not exist\00")
(data (i32.const 1776) "license does not exist\00")
(data (i32.const 1808) "license is not found in collectibles\00")
(data (i32.const 1856) "transfer license (1 \00")
(data (i32.const 1888) ") to a new owner\00")
(data (i32.const 1920) "transferid\00")
(data (i32.const 1936) "license is being sold on market\00")
(data (i32.const 1968) "buyer account does not exist\00")
(data (i32.const 2000) "invalid price value\00")
(data (i32.const 2032) "setrampayer\00")
(data (i32.const 2048) "prepare license to sell\00")
(data (i32.const 2080) "cancel license sell\00")
(data (i32.const 2112) "cannot pass end iterator to erase\00")
(data (i32.const 2160) "nothing to cancel\00")
(data (i32.const 2192) "object passed to erase is not in multi_index\00")
(data (i32.const 2240) "cannot erase objects in table of another contract\00")
(data (i32.const 2304) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2368) "collectible with name does not exist\00")
(data (i32.const 2416) "account cannot buy the license\00")
(data (i32.const 2448) "nothing to buy\00")
(data (i32.const 2464) "author account fee\00")
(data (i32.const 2496) "charity account fee\00")
(data (i32.const 2528) "price after paying primary market fees must not be negative\00")
(data (i32.const 2592) "price after paying secondary market fees must be positive number\00")
(data (i32.const 2672) "unicoproxy12\00")
(data (i32.const 2688) " buy license\00")
(data (i32.const 2704) "transfer\00")
(data (i32.const 2720) " unico account fee\00")
(data (i32.const 2752) " \00")
(data (i32.const 2768) ") to buyer\00")
(data (i32.const 2780) "\e0\n\00\00")
(data (i32.const 2784) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2832) "myunicotoken\00")
(data (i32.const 2848) "eosio.token\00")
(data (i32.const 2864) "license must be owned by issuer\00")
(data (i32.const 2896) "price in specified symbol is unknown\00")
(data (i32.const 2944) "price in specified symbol must be positive\00")
(data (i32.const 2992) "unicoacnt account does not exist\00")
(data (i32.const 3040) "symbol not found\00")
(data (i32.const 3072) "onerror\00")
(data (i32.const 3088) "eosio\00")
(data (i32.const 3104) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 11568) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$8 (param i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$17 (param i32 i32)))
(import "env" "is_account" (func $fimport$18 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "require_auth2" (func $fimport$24 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$25 (param i64)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio5unico6createEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_hhhhS8_y" (func $5))
(export "_ZN5eosio5unico12check_pausedEv" (func $6))
(export "_ZN5eosio5unico8issuelicEyhNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE" (func $28))
(export "_ZN5eosio5unico10transferidEyy" (func $35))
(export "_ZN5eosio5unico12check_marketEy" (func $36))
(export "_ZNK5eosio5unico16symbol_to_stringENS_5assetE" (func $46))
(export "_ZN5eosio5unico6selltoEyyNS_5assetEy" (func $47))
(export "_ZN5eosio5unico10add_marketEyyNS_5assetEy" (func $48))
(export "_ZN5eosio5unico10cancelsellEyy" (func $52))
(export "_ZN5eosio5unico7buyfromEyyy" (func $55))
(export "_ZN5eosio5unico3buyEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $61))
(export "_ZN5eosio5unico12setunicoacntEy" (func $62))
(export "_ZN5eosio5unico9setpausedEh" (func $63))
(export "_ZN5eosio5unico8setpriceEyNS_5assetE" (func $64))
(export "_ZN5eosio5unico10setrevenueEyhh" (func $66))
(export "_ZN5eosio5unico11setrevenue2Eyhh" (func $68))
(export "_ZN5eosio5unico10setcharityEyy" (func $70))
(export "_ZN5eosio5unico11removepriceEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $72))
(export "_ZNK5eosio5unico14name_to_stringEy" (func $74))
(export "apply" (func $75))
(export "memcmp" (func $114))
(export "strlen" (func $115))
(export "malloc" (func $116))
(export "free" (func $119))
(table $0 15 15 anyfunc)
(elem (i32.const 0) $120 $64 $52 $70 $61 $68 $5 $63 $55 $72 $47 $62 $35 $66 $28)



void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [976])
	CALL memcpy(($2 + [56]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [976])
	CALL memcpy(($3 + [57]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [976])
	CALL memcpy(($3 + [58]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [976])
	CALL memcpy(($3 + [59]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $23(*($1), ($3 + [60]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [976])
	CALL memcpy(($3 + [72]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = *($3)
	$7 = ($8 + [24])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = ($8 + [8])
	$5 = CALL db_lowerbound_i64(*($4), *(($8 + [16])), (int_64)-6524895285083111424, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $26($4, $5)
	*($9 + [12]) = [0]
	*($9 + [8]) = $4
	$6 = *(*(CALL $100(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [24])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [752])
	*($1) = *($7)
	$8 = *($3 + [4])
	*($1 + [16]) = [0]
	*($1 + [8]) = *($8)
	$10 = $10
	$8 = ($10 + [-32])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [816])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [816])
	CALL memcpy(($10 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [816])
	CALL memcpy(($10 + [-16]), ($1 + [16]), [1])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-6524895285083111424, *(*($0 + [8])), $6, $8, [17])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $101(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $111($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $102(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $102($5)
	
.LABEL $label$14
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [656])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [720])
	*(($0 + [32])) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [48])) = (int_64)1398362884
	CALL eosio_assert([1], [656])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [720])
	*($0 + [56]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $97(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [192])
	*([0] + [4]) = $10
	*((($10 + [80]) + [12])) = *(($1 + [20]))
	*(($8 = (($10 + [80]) + [8]))) = *(($1 + [16]))
	*($10 + [80]) = *($1 + [8])
	*($10 + [84]) = *(($1 + [12]))
	$2 = *($1)
	CALL $112(($10 + [64]), ($1 + [24]))
	*(($9 = (($10 + [48]) + [8]))) = *(($1 + [48]))
	*($10 + [48]) = *($1 + [40])
	$6 = *($1 + [59])
	$5 = *($1 + [58])
	$4 = *($1 + [57])
	$3 = *($1 + [56])
	CALL $112(($10 + [32]), ($1 + [60]))
	$7 = *($1 + [72])
	*((($10 + [112]) + [8])) = *($9)
	*((($10 + [96]) + [8])) = *($8)
	*($10 + [112]) = *($10 + [48])
	*($10 + [96]) = *($10 + [80])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*(*($0)) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($8 = (($10 + [176]) + [8]))) = *((($10 + [96]) + [8]))
	*($10 + [176]) = *($10 + [96])
	CALL $112(($10 + [160]), ($10 + [64]))
	*(($9 = (($10 + [144]) + [8]))) = *((($10 + [112]) + [8]))
	*($10 + [144]) = *($10 + [112])
	CALL $112(($10 + [128]), ($10 + [32]))
	*((($10 + [16]) + [8])) = *($8)
	*(($10 + [8])) = *($9)
	*($10 + [16]) = *($10 + [176])
	*($10) = *($10 + [144])
	CALL void $0((int_32 $2), (int_64 ($10 + [16])), (int_32 ($10 + [160])), (int_32 $10), (int_32 ($3 & [255])), (int_32 ($4 & [255])), (int_32 ($5 & [255])), (int_32 ($6 & [255])), (int_32 ($10 + [128])), (int_32 $7), (int_64 $1))
	if ( ((*($10 + [128]) & [1]) == 0) ){ goto $label$2 }
	CALL $102(*($10 + [136]))
	
.LABEL $label$2
	if ( ((*($10 + [160]) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($10 + [168]))
	
.LABEL $label$3
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*($10 + [40]))
	
.LABEL $label$4
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*($10 + [72]))
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [192])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [24]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $98(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [976])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [992])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $94($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $23($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	$5 = (*(($1 + [16])) - *($1 + [12]))
	$4 = ((int_32)$5 / (int_32)[12])
	$3 = *($1 + [8])
	$2 = *($1)
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL $101($5)
	*(($6 + [8])) = ($5 + ((int_32)$4 * (int_32)[12]))
	*($6) = $5
	*($6 + [4]) = $5
	$1 = *(($1 + [16]))
	$4 = *(($1 + [12]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $112($5, $4)
	$5 = ($5 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$3 }
	*($6 + [4]) = $5
	
.LABEL $label$2
	CALL $93($0, $2, ($3 & [255]), $6)
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$4 }
	$5 = *($6 + [4])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	$4 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$7:
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($5 + [8])))
	
.LABEL $label$8
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $4) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *($6)
	goto $label$5 
	
.LABEL $label$6
	$5 = $1
	
.LABEL $label$5
	*($6 + [4]) = $1
	CALL $102($5)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $111($6)
}

void .FUNC $93 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$4 = (*(*($0)) + int_32($6 >> [1]))
	$5 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$5 = *((*($4) + $5))
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$6 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL $101($0)
	*(($7 + [8])) = ($0 + ((int_32)$6 * (int_32)[12]))
	*($7) = $0
	*($7 + [4]) = $0
	$3 = *(($3 + [4]))
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $112($0, $6)
	$0 = ($0 + [12])
	$6 = ($6 + [12])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$4 }
	*($7 + [4]) = $0
	
.LABEL $label$3
	CALL void $4((int_32 $1), (int_64 $2), (int_32 $7), (int_32 $5))
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$5 }
	$0 = *($7 + [4])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	$6 = ([0] - $3)
	$0 = ($0 + [-12])
	
.LOOP $label$8:
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*(($0 + [8])))
	
.LABEL $label$9
	$0 = ($0 + [-12])
	if ( ((int_32)($0 + $6) != (int_32)[-12]) ){ goto $label$8 }
	$0 = *($7)
	goto $label$6 
	
.LABEL $label$7
	$0 = $3
	
.LABEL $label$6
	*($7 + [4]) = $3
	CALL $102($0)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $111($7)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $120 ()
{
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $101([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $25($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [816])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [816])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [816])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $21($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$5 = *($4 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $42($4, $6)
	*($9 + [28]) = [0]
	*($9 + [24]) = $4
	$5 = *(*(CALL $50(($9 + [24])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [752])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	$3 = *($3 + [16])
	*($1 + [32]) = *($3)
	$5 = *(($3 + [8]))
	*($1 + [48]) = [0]
	*(($1 + [40])) = $5
	$4 = $10
	$3 = ($4 + [-64])
	*([0] + [4]) = $3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($4 + [-15])
	*($9 + [16]) = $9
	$4 = ($1 + [8])
	*($9 + [28]) = $4
	*($9 + [24]) = $1
	$10 = ($1 + [16])
	*($9 + [32]) = $10
	$6 = ($1 + [24])
	*($9 + [36]) = $6
	*($9 + [40]) = ($1 + [32])
	*($9 + [44]) = ($1 + [48])
	CALL $51(($9 + [24]), ($9 + [16]))
	$5 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($2 + [8]), (int_64)-7949128877345865728, *(*($0 + [8])), $5, $3, [49])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = ($2 + [8])
	$5 = *($3)
	$0 = *(($0 + [8]))
	$7 = *($0)
	$8 = *($1)
	*($9 + [24]) = *($4)
	*($1 + [60]) = CALL db_idx64_store($5, (int_64)-7949128877345865728, $7, $8, ($9 + [24]))
	$5 = *($0)
	$7 = *($3)
	$8 = *($1)
	*($9 + [24]) = *($10)
	*(($1 + [64])) = CALL db_idx64_store($7, (int_64)-7949128877345865727, $5, $8, ($9 + [24]))
	$5 = *($0)
	$7 = *($3)
	$8 = *($1)
	*($9 + [24]) = *($6)
	*(($1 + [68])) = CALL db_idx64_store($7, (int_64)-7949128877345865726, $5, $8, ($9 + [24]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN5eosio5unico10add_marketEyyNS_5assetEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	*($7 + [80]) = $1
	*($7 + [72]) = $2
	*($7 + [64]) = $4
	$6 = [0]
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$4 = *($0)
	*($7 + [24]) = $4
	*($7 + [32]) = $4
	*(($7 + [62])) = [0]
	*($7 + [60]) = [0]
	*($7 + [16]) = $3
	*($7 + [4]) = ($7 + [64])
	*($7) = ($7 + [24])
	*($7 + [8]) = ($7 + [80])
	*($7 + [12]) = ($7 + [72])
	*($7 + [120]) = $1
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$2()), [592])
	*($7 + [100]) = $7
	*($7 + [96]) = ($7 + [24])
	*($7 + [104]) = ($7 + [120])
	*(($3 = CALL $101([72])) + [40]) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [656])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [720])
	*($3 + [52]) = ($7 + [24])
	CALL $49(($7 + [96]), $3)
	*($7 + [112]) = $3
	$1 = *($3)
	*($7 + [96]) = $1
	$0 = *($3 + [56])
	*($7 + [92]) = $0
	$5 = ($7 + [52])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($7 + [56]))) ){ goto $label$7 }
	*($6 + [8]) = $1
	*($6 + [16]) = $0
	*($7 + [112]) = [0]
	*($6) = $3
	*($5) = ($6 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $44(($7 + [48]), ($7 + [112]), ($7 + [96]), ($7 + [92]))
	
.LABEL $label$6
	$6 = *($7 + [112])
	*($7 + [112]) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $102($6)
	
.LABEL $label$8
	$0 = *($7 + [48])
	if ( ($0 == 0) ){ goto $label$9 }
	$5 = ($7 + [52])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $102($3)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($7 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $0
	
.LABEL $label$10
	*($5) = $0
	CALL $102($6)
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [32]) = (int_64)0
	*(($4 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [656])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [720])
	*($0 + [52]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [16])
	*($6 + [20]) = ($0 + [24])
	*($6 + [24]) = ($0 + [32])
	*($6 + [28]) = ($0 + [48])
	CALL $45(($6 + [8]), $6)
	$4 = *(*($2 + [8]))
	*($0 + [60]) = [-1]
	*($0 + [56]) = $4
	*(($0 + [64])) = [-1]
	*(($0 + [68])) = [-1]
	*([0] + [4]) = ($6 + [32])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [944])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $101([72])
	$6 = CALL $43($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [56])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [976])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [16]))
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $111($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($1 + [56])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $102(*(($1 + [16])))
	
.LABEL $label$12
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $102($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC _ZN5eosio5unico6selltoEyyNS_5assetEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [160])
	*([0] + [4]) = $15
	CALL require_auth($1)
	CALL _ZN5eosio5unico12check_pausedEv($0)
	CALL _ZN5eosio5unico12check_marketEy($0, $4)
	$6 = (int_64)($2 == 0)
	if ( $6 ){ goto $label$1 }
	CALL eosio_assert(CALL $fimport$18($2), [1968])
	
.LABEL $label$1
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$11 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [2000])
	$11 = (int_64)0
	$13 = (int_64)59
	$8 = [1328]
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$7 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1344]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$16 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [2032]
	$14 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$22 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$17 }
	*($15 + [56]) = $4
	*($15 + [48]) = $1
	*($15 + [112]) = $14
	*($15 + [104]) = $9
	*(($8 = CALL $101([16]))) = $1
	*($8 + [8]) = $12
	*(($5 = ($15 + [136]))) = [0]
	$7 = ($8 + [16])
	*(($15 + [128])) = $7
	*(($15 + [124])) = $7
	*($15 + [120]) = $8
	*($15 + [132]) = [0]
	*(($15 + [140])) = [0]
	CALL $25(($15 + [132]), [16])
	$8 = *($15 + [132])
	$5 = (*($5) - $8)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [816])
	CALL memcpy($8, ($15 + [48]), [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [816])
	CALL memcpy(($8 + [8]), (($15 + [48]) + [8]), [8])
	CALL $31(($15 + [88]), ($15 + [104]))
	$8 = *($15 + [88])
	CALL send_inline($8, (*($15 + [92]) - $8))
	$8 = *($15 + [88])
	if ( ($8 == 0) ){ goto $label$23 }
	*($15 + [92]) = $8
	CALL $102($8)
	
.LABEL $label$23
	$8 = *($15 + [132])
	if ( ($8 == 0) ){ goto $label$24 }
	*(($15 + [136])) = $8
	CALL $102($8)
	
.LABEL $label$24
	$8 = *($15 + [120])
	if ( ($8 == 0) ){ goto $label$25 }
	*(($15 + [124])) = $8
	CALL $102($8)
	
.LABEL $label$25
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1344]
	$12 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$31 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$5 = ($5 + [165])
	goto $label$29 
	
.LABEL $label$31
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$27
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$26 }
	*($15 + [96]) = $12
	*($15 + [88]) = $1
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1920]
	$12 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$11 > (uint_64)(int_64)9) ){ goto $label$37 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$5 = ($5 + [165])
	goto $label$35 
	
.LABEL $label$37
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$33
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$32 }
	*(($15 + [40])) = [0]
	*($15 + [32]) = (int_64)0
	$8 = CALL strlen([2048])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$41 }
	*($15 + [32]) = ($8 << [1])
	$5 = (($15 + [32]) | [1])
	if ( $8 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$7 = (($8 + [16]) & [-16])
	$5 = CALL $101($7)
	*($15 + [32]) = ($7 | [1])
	*($15 + [40]) = $5
	*($15 + [36]) = $8
	
.LABEL $label$40
	CALL memcpy($5, [2048], $8)
	
.LABEL $label$39
	*(($5 + $8)) = [0]
	*(($15 + [76])) = *($15 + [36])
	*($15 + [56]) = *($0)
	$8 = ($15 + [40])
	*(($15 + [80])) = *($8)
	*($15 + [48]) = $1
	*($15 + [64]) = $4
	*($15 + [72]) = *($15 + [32])
	*($15 + [32]) = [0]
	*($15 + [36]) = [0]
	*($8) = [0]
	$8 = CALL $38(($15 + [104]), ($15 + [88]), $9, $12, ($15 + [48]))
	CALL $31(($15 + [144]), $8)
	$5 = *($15 + [144])
	CALL send_inline($5, (*($15 + [148]) - $5))
	$5 = *($15 + [144])
	if ( ($5 == 0) ){ goto $label$42 }
	*($15 + [148]) = $5
	CALL $102($5)
	
.LABEL $label$42
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$43 }
	*(($8 + [32])) = $5
	CALL $102($5)
	
.LABEL $label$43
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$44 }
	*(($8 + [20])) = $5
	CALL $102($5)
	
.LABEL $label$44
	if ( ((*(($15 + [72])) & [1]) == 0) ){ goto $label$45 }
	CALL $102(*(($15 + [80])))
	
.LABEL $label$45
	if ( ((*($15 + [32]) & [1]) == 0) ){ goto $label$46 }
	CALL $102(*(($15 + [40])))
	
.LABEL $label$46
	*(($8 = (($15 + [16]) + [8]))) = *(($3 + [8]))
	$11 = *($3)
	*(($15 + [12])) = *((($15 + [16]) + [12]))
	*(($15 + [8])) = *($8)
	*($15 + [16]) = $11
	*($15 + [4]) = *($15 + [20])
	*($15) = *($15 + [16])
	CALL _ZN5eosio5unico10add_marketEyyNS_5assetEy($0, $1, $2, $15, $4)
	CALL require_recipient($1)
	if ( $6 ){ goto $label$47 }
	CALL require_recipient($2)
	
.LABEL $label$47
	*([0] + [4]) = ($15 + [160])
	return (unreachable)
	
.LABEL $label$38
	CALL $103(($15 + [32]))
}

void .FUNC _ZNK5eosio5unico16symbol_to_stringENS_5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$3 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $109($0, int_32(((CASTING uint_32)(uint_64 $3) << [24]) >> [24]))
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [976])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [976])
	CALL memcpy($0, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $111($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8 align=4]) = (int_64)0
	$2 = [0]
	*($0 + [36]) = [0]
	*($0 + [56]) = (int_64)0
	*(($0 + [16])) = [0]
	*(($0 + [40])) = [0]
	*(($0 + [44])) = [0]
	*(($3 = ($0 + [64]))) = (int_64)1398362884
	CALL eosio_assert([1], [656])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [720])
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [656])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [720])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	$18 = $19
	*([0] + [4]) = $19
	$2 = *($0)
	$3 = *($0 + [4])
	$14 = *($3)
	$15 = *($14 + [16])
	if ( ((int_64)$15 != (int_64)-1) ){ goto $label$1 }
	$15 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($14), *($14 + [8]), (int_64)-3108457608830881792, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($14, $4)
	*($18 + [36]) = [0]
	*($18 + [32]) = $14
	$15 = *(*(CALL $18(($18 + [32])) + [4]))
	$15 = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($14 + [16])) = $15
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($15 <= (int_64)-2), [752])
	*($1) = *(($14 + [16]))
	$4 = ($1 + [8])
	CALL $104($4, *($3 + [4]))
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [33]) = *(*($3 + [12]))
	*($1 + [32]) = *(*($3 + [16]))
	*($1 + [35]) = *(*($3 + [20]))
	*($1 + [34]) = *(*($3 + [24]))
	$10 = ($1 + [36])
	CALL $104($10, *($3 + [28]))
	*($1 + [48]) = *(*($3 + [32]))
	$14 = *($3 + [36])
	*($1 + [56]) = *($14)
	*(($1 + [64])) = *(($14 + [8]))
	*(($1 + [80])) = *(*($3 + [36]) + [8])
	*($18 + [24]) = [0]
	*($18 + [8]) = ($18 + [24])
	*($18 + [36]) = $4
	*($18 + [32]) = $1
	$5 = ($1 + [24])
	*($18 + [40]) = $5
	$7 = ($1 + [32])
	*($18 + [44]) = $7
	$6 = ($1 + [33])
	*($18 + [48]) = $6
	$9 = ($1 + [34])
	*($18 + [52]) = $9
	$8 = ($1 + [35])
	*($18 + [56]) = $8
	*($18 + [60]) = $10
	$11 = ($1 + [48])
	*($18 + [64]) = $11
	$12 = ($1 + [56])
	*($18 + [68]) = $12
	$13 = ($1 + [72])
	*($18 + [72]) = $13
	CALL $19(($18 + [32]), ($18 + [8]))
	$14 = *($18 + [24])
	if ( ($14 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($14)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($19 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($18 + [12]) = $3
	*($18 + [8]) = $3
	*($18 + [16]) = ($3 + $14)
	*($18 + [24]) = ($18 + [8])
	*($18 + [36]) = $4
	*($18 + [32]) = $1
	*($18 + [40]) = $5
	*($18 + [44]) = $7
	*($18 + [48]) = $6
	*($18 + [52]) = $9
	*($18 + [56]) = $8
	*($18 + [60]) = $10
	*($18 + [64]) = $11
	*($18 + [68]) = $12
	*($18 + [72]) = $13
	CALL $20(($18 + [32]), ($18 + [24]))
	$15 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($2 + [8]), (int_64)-3108457608830881792, *(*($0 + [8])), $15, $3, $14)
	if ( ($14 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($15 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$15 = *(($2 + [8]))
	$16 = *(*(($0 + [8])))
	$17 = *($1)
	*($18 + [32]) = *(($1 + [24]))
	*($1 + [96]) = CALL db_idx64_store($15, (int_64)-3108457608830881792, $16, $17, ($18 + [32]))
	*([0] + [4]) = ($18 + [80])
}

void .FUNC _ZN5eosio5unico12check_pausedEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [32]))
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	$4 = ($5 + [-24])
	$2 = ([0] - $1)
	
.LOOP $label$2:
	if ( (int_64)(*(*($4)) == 0) ){ goto $label$1 }
	$5 = $4
	$3 = ($4 + [-24])
	$4 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$4 }
	$3 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$4), [1040])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $26($4, CALL $fimport$5(*(($0 + [8])), *(($0 + [16])), (int_64)-6524895285083111424, (int_64)0))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$4), [1040])
	
.LABEL $label$3
	CALL eosio_assert((*($3 + [16]) == 0), [1104])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$10 = [0]
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	$4 = *($0)
	*($12) = $4
	*($12 + [8]) = $4
	*($12 + [24]) = (int_64)0
	*($12 + [36]) = [0]
	$0 = CALL db_lowerbound_i64($4, $4, (int_64)-3108457608830881792, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = ($1 + [1])
	$0 = CALL $17($12, $0)
	$6 = ($1 + [4])
	
.LOOP $label$2:
	$5 = ($11 & [1])
	$11 = *($1)
	$11 = ( *($6) ? uint_32($11 >> [1]) : $5 )
	$7 = *(($1 + [8]))
	$8 = *($0 + [8])
	if ( ($8 & [1]) ){ goto $label$4 }
	$9 = (($0 + [8]) + [1])
	$8 = uint_32($8 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$9 = *(($0 + [16]))
	$8 = *(($0 + [12]))
	
.LABEL $label$3
	$3 = ( $11 ? $8 : ($11 <= $8) )
	if ( ($3 == 0) ){ goto $label$7 }
	if ( CALL memcmp($9, ( $7 ? $2 : $5 ), $3) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ($8 <= $11) ){ goto $label$6 }
	if ( ((uint_32)$11 >= (uint_32)$8) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([1], [1008])
	$0 = CALL db_next_i64(*($0 + [92]), ($12 + [40]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $17($12, $0)
	goto $label$2 
	
.LABEL $label$5
	$10 = [1]
	
.LABEL $label$1
	$8 = *($12 + [24])
	if ( ($8 == 0) ){ goto $label$8 }
	$1 = ($12 + [28])
	$11 = *($1)
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$0 = *($11)
	*($11) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$13 }
	CALL $102(*(($0 + [44])))
	
.LABEL $label$13
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $102(*(($0 + [16])))
	
.LABEL $label$14
	CALL $102($0)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$11 }
	$0 = *(($12 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $8
	
.LABEL $label$9
	*($1) = $8
	CALL $102($0)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [48])
	return $10
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio5unico6createEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_hhhhS8_y (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 _ZN5eosio5unico6createEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_hhhhS8_y, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_64 $10)
{
	int_32 $11
	$11 = (*([0] + [4]) - [192])
	*([0] + [4]) = $11
	*($11 + [144]) = $1
	*($11 + [143]) = $5
	*($11 + [142]) = $6
	*($11 + [141]) = $7
	*($11 + [140]) = $8
	*($11 + [128]) = $10
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	*(($11 + [120])) = [0]
	*($11 + [104]) = (int_64)-1
	*($11 + [112]) = (int_64)0
	$10 = *($0)
	*($11 + [88]) = $10
	*($11 + [96]) = $10
	*($11 + [124]) = [0]
	CALL $112(($11 + [72]), $3)
	CALL eosio_assert(((int_32)CALL $7($0, ($11 + [72])) ^ (int_32)[1]), [16])
	if ( ((*($11 + [72]) & [1]) == 0) ){ goto $label$1 }
	CALL $102(*($11 + [80]))
	$1 = *($11 + [144])
	
.LABEL $label$1
	CALL eosio_assert(CALL $fimport$18($1), [64])
	CALL eosio_assert((*($11 + [143]) <= [101]), [96])
	CALL eosio_assert((*($11 + [142]) <= [101]), [160])
	CALL eosio_assert(((*($11 + [143]) + *($11 + [142])) <= [101]), [224])
	CALL eosio_assert((*($11 + [141]) <= [100]), [272])
	CALL eosio_assert((*($11 + [140]) <= [100]), [352])
	CALL eosio_assert(((*($11 + [141]) + *($11 + [140])) <= [100]), [432])
	$8 = *($9)
	if ( ($8 & [1]) ){ goto $label$3 }
	$8 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($9 + [4])
	
.LABEL $label$2
	CALL eosio_assert(($8 <= [65]), [496])
	$1 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [528])
	$1 = *($11 + [128])
	if ( (int_64)($1 == 0) ){ goto $label$9 }
	CALL eosio_assert(CALL $fimport$18($1), [560])
	
.LABEL $label$9
	$1 = *($0)
	*($11 + [28]) = $3
	*($11 + [24]) = ($11 + [88])
	*($11 + [32]) = ($11 + [144])
	*($11 + [36]) = ($11 + [142])
	*($11 + [40]) = ($11 + [143])
	*($11 + [44]) = ($11 + [140])
	*($11 + [48]) = ($11 + [141])
	*($11 + [52]) = $9
	*($11 + [56]) = ($11 + [128])
	*($11 + [60]) = $2
	*($11 + [8]) = $1
	CALL eosio_assert(((int_64)*($11 + [88]) == (int_64)CALL $fimport$2()), [592])
	*($11 + [164]) = ($11 + [24])
	*($11 + [160]) = ($11 + [88])
	*($11 + [168]) = ($11 + [8])
	$8 = CALL $101([104])
	CALL $8($8)
	*($8 + [88]) = ($11 + [88])
	CALL $9(($11 + [160]), $8)
	*($11 + [184]) = $8
	$1 = *($8)
	*($11 + [160]) = $1
	$9 = *($8 + [92])
	*($11 + [176]) = $9
	$3 = ($11 + [116])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($11 + [120]))) ){ goto $label$11 }
	*($7 + [8]) = $1
	*($7 + [16]) = $9
	*($11 + [184]) = [0]
	*($7) = $8
	*($3) = ($7 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $10(($11 + [112]), ($11 + [184]), ($11 + [160]), ($11 + [176]))
	
.LABEL $label$10
	*($11 + [68]) = $8
	*($11 + [64]) = ($11 + [88])
	$7 = *($11 + [184])
	$8 = [0]
	*($11 + [184]) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((*($7 + [36]) & [1]) == 0) ){ goto $label$13 }
	CALL $102(*(($7 + [44])))
	
.LABEL $label$13
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $102(*(($7 + [16])))
	
.LABEL $label$14
	CALL $102($7)
	
.LABEL $label$12
	*(($11 + [56])) = [0]
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$1 = *($0)
	*($11 + [24]) = $1
	*($11 + [32]) = $1
	*($11 + [60]) = [0]
	*($11 + [12]) = $4
	*($11 + [8]) = ($11 + [24])
	*($11 + [16]) = ($11 + [64])
	*($11 + [184]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$2()), [592])
	*($11 + [164]) = ($11 + [8])
	*($11 + [160]) = ($11 + [24])
	*($11 + [168]) = ($11 + [184])
	*(($7 = CALL $101([48])) + [16]) = (int_64)1398362884
	*($7 + [8]) = (int_64)0
	CALL eosio_assert([1], [656])
	$1 = (int_64)5462355
	
.LOOP $label$16:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$0 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	CALL eosio_assert($0, [720])
	*($7 + [32]) = ($11 + [24])
	CALL $11(($11 + [160]), $7)
	*($11 + [176]) = $7
	$1 = *($7)
	*($11 + [160]) = $1
	$0 = *($7 + [36])
	*($11 + [156]) = $0
	$9 = ($11 + [52])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($11 + [56]))) ){ goto $label$20 }
	*($8 + [8]) = $1
	*($8 + [16]) = $0
	*($11 + [176]) = [0]
	*($8) = $7
	*($9) = ($8 + [24])
	goto $label$19 
	
.LABEL $label$20
	CALL $12(($11 + [48]), ($11 + [176]), ($11 + [160]), ($11 + [156]))
	
.LABEL $label$19
	$8 = *($11 + [176])
	*($11 + [176]) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	CALL $102($8)
	
.LABEL $label$21
	CALL require_recipient(*($11 + [144]))
	$7 = *($11 + [48])
	if ( ($7 == 0) ){ goto $label$22 }
	$9 = ($11 + [52])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$26 }
	CALL $102($0)
	
.LABEL $label$26
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$25 }
	$8 = *(($11 + [48]))
	goto $label$23 
	
.LABEL $label$24
	$8 = $7
	
.LABEL $label$23
	*($9) = $7
	CALL $102($8)
	
.LABEL $label$22
	$7 = *($11 + [112])
	if ( ($7 == 0) ){ goto $label$27 }
	$9 = ($11 + [116])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$30:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$31 }
	if ( ((*($8 + [36]) & [1]) == 0) ){ goto $label$32 }
	CALL $102(*(($8 + [44])))
	
.LABEL $label$32
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL $102(*(($8 + [16])))
	
.LABEL $label$33
	CALL $102($8)
	
.LABEL $label$31
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$30 }
	$8 = *(($11 + [112]))
	goto $label$28 
	
.LABEL $label$29
	$8 = $7
	
.LABEL $label$28
	*($9) = $7
	CALL $102($8)
	
.LABEL $label$27
	*([0] + [4]) = ($11 + [192])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [896])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5918709162908319744)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [832])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [832])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $13(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [976])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [944])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $101([104])
	CALL $8($6)
	*($6 + [88]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [32])
	*($8 + [48]) = ($6 + [33])
	*($8 + [52]) = ($6 + [34])
	*($8 + [56]) = ($6 + [35])
	*($8 + [60]) = ($6 + [36])
	*($8 + [64]) = ($6 + [48])
	*($8 + [68]) = ($6 + [56])
	*($8 + [72]) = ($6 + [72])
	CALL $22(($8 + [32]), ($8 + [24]))
	*($6 + [96]) = [-1]
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [92])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $10(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($4 + [44])))
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($4 + [16])))
	
.LABEL $label$11
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $111($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($1 + [44])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $102(*(($1 + [16])))
	
.LABEL $label$12
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $102($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$4 = *($6 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5918709162908319744, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $13($6, $5)
	*($9 + [36]) = [0]
	*($9 + [32]) = $6
	$4 = *(*(CALL $14(($9 + [32])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [752])
	*($1) = *(($6 + [16]))
	$6 = *($3 + [4])
	*($1 + [8]) = *($6)
	*(($5 = ($1 + [16]))) = *(($6 + [8]))
	*($1 + [24]) = *(*(*($3 + [8]) + [4]))
	$10 = $10
	$6 = ($10 + [-32])
	*([0] + [4]) = $6
	*($9 + [12]) = $6
	*($9 + [8]) = $6
	*($9 + [16]) = $10
	*($9 + [24]) = ($9 + [8])
	*($9 + [36]) = ($1 + [8])
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + [24])
	CALL $15(($9 + [32]), ($9 + [24]))
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-5918709162908319744, *(*($0 + [8])), $4, $6, [32])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [32]) = (uint_64)*($5) >> (uint_64)(int_64)8)
	*($1 + [40]) = CALL db_idx64_store($4, (int_64)-5918709162908319744, $7, $8, ($9 + [32]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $111($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [944])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $101([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [656])
	$3 = ($4 + [8])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [720])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [24])
	CALL $16(($8 + [32]), ($8 + [24]))
	*($4 + [40]) = [-1]
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $12($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $102($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [304])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3072]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3088]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [3104])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3072]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [248])) = $0
	*(($11 + [256])) = (int_64)-1
	*(($11 + [264])) = (int_64)0
	*($11 + [296]) = $0
	*($11 + [240]) = $0
	*($11 + [232]) = $0
	*(($11 + [272])) = [0]
	$6 = ($11 + [240])
	$3 = CALL db_find_i64($0, $0, (int_64)-6524895285083111424, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*(CALL $26($6, $3) + [24]) == (int_32)$6), [1040])
	goto $label$22 
	
.LABEL $label$23
	*($11 + [292]) = ($11 + [296])
	*($11 + [288]) = ($11 + [232])
	CALL $76(($11 + [280]), $6, $0, ($11 + [288]))
	
.LABEL $label$22
	if ( ((int_64)$2 > (int_64)-4417000197147449457) ){ goto $label$37 }
	if ( ((int_64)$2 <= (int_64)-4417095090321227777) ){ goto $label$36 }
	if ( ((int_64)$2 > (int_64)-4417057697102135297) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)-4417095090321227776) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)-4417085959225475072) ){ goto $label$24 }
	*($11 + [156]) = [0]
	*($11 + [152]) = [1]
	*($11 + [80 align=4]) = *($11 + [152])
	CALL $85(($11 + [232]), ($11 + [80]))
	goto $label$24 
	
.LABEL $label$37
	if ( ((int_64)$2 <= (int_64)4520694637664403455) ){ goto $label$35 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)4520694637664403456) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4730614998765420544) ){ goto $label$24 }
	*($11 + [196]) = [0]
	*($11 + [192]) = [2]
	*($11 + [40 align=4]) = *($11 + [192])
	CALL $81(($11 + [232]), ($11 + [40]))
	goto $label$24 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)-4997502815880211456) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4421658729468919808) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-4417320284507373568) ){ goto $label$24 }
	*($11 + [124]) = [0]
	*($11 + [120]) = [3]
	*($11 + [112 align=4]) = *($11 + [120])
	CALL $81(($11 + [232]), ($11 + [112]))
	goto $label$24 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-4417000197147449456) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-3617168760270340096) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4520488125973135360) ){ goto $label$24 }
	*($11 + [180]) = [0]
	*($11 + [176]) = [4]
	*($11 + [56 align=4]) = *($11 + [176])
	CALL $82(($11 + [232]), ($11 + [56]))
	goto $label$24 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)-4417057697102135296) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4417057697102134272) ){ goto $label$24 }
	*($11 + [132]) = [0]
	*($11 + [128]) = [5]
	*($11 + [104 align=4]) = *($11 + [128])
	CALL $87(($11 + [232]), ($11 + [104]))
	goto $label$24 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)8516770089461088256) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$24 }
	*($11 + [228]) = [0]
	*($11 + [224]) = [6]
	*($11 + [8 align=4]) = *($11 + [224])
	CALL $77(($11 + [232]), ($11 + [8]))
	goto $label$24 
	
.LABEL $label$32
	*($11 + [164]) = [0]
	*($11 + [160]) = [7]
	*($11 + [72 align=4]) = *($11 + [160])
	CALL $84(($11 + [232]), ($11 + [72]))
	goto $label$24 
	
.LABEL $label$31
	*($11 + [204]) = [0]
	*($11 + [200]) = [8]
	*($11 + [32 align=4]) = *($11 + [200])
	CALL $80(($11 + [232]), ($11 + [32]))
	goto $label$24 
	
.LABEL $label$30
	*($11 + [148]) = [0]
	*($11 + [144]) = [9]
	*($11 + [88 align=4]) = *($11 + [144])
	CALL $86(($11 + [232]), ($11 + [88]))
	goto $label$24 
	
.LABEL $label$29
	*($11 + [212]) = [0]
	*($11 + [208]) = [10]
	*($11 + [24 align=4]) = *($11 + [208])
	CALL $79(($11 + [232]), ($11 + [24]))
	goto $label$24 
	
.LABEL $label$28
	*($11 + [172]) = [0]
	*($11 + [168]) = [11]
	*($11 + [64 align=4]) = *($11 + [168])
	CALL $83(($11 + [232]), ($11 + [64]))
	goto $label$24 
	
.LABEL $label$27
	*($11 + [188]) = [0]
	*($11 + [184]) = [12]
	*($11 + [48 align=4]) = *($11 + [184])
	CALL $81(($11 + [232]), ($11 + [48]))
	goto $label$24 
	
.LABEL $label$26
	*($11 + [140]) = [0]
	*($11 + [136]) = [13]
	*($11 + [96 align=4]) = *($11 + [136])
	CALL $87(($11 + [232]), ($11 + [96]))
	goto $label$24 
	
.LABEL $label$25
	*($11 + [220]) = [0]
	*($11 + [216]) = [14]
	*($11 + [16 align=4]) = *($11 + [216])
	CALL $78(($11 + [232]), ($11 + [16]))
	
.LABEL $label$24
	$4 = *(($11 + [264]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [268])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $102($3)
	
.LABEL $label$41
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($11 + [264]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $4
	
.LABEL $label$38
	*($5) = $4
	CALL $102($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [304])
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [92]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [896])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3108457608830881792)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [832])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [832])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $17(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [1])
	*(($4 = *($1))) = (*($4) + [1])
	*(($4 = *($1))) = (*($4) + [1])
	*(($4 = *($1))) = (*($4) + [1])
	$4 = *($2)
	$2 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [16])
	*(($4 = *($1))) = (*($4) + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $101([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2780]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $113($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $106($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $101([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $25($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $60(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [56]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [896])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7949128877345865728)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [832])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [832])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $42(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [816])
	CALL memcpy(*($2 + [4]), $0, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

void .FUNC _ZN5eosio5unico10cancelsellEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL require_auth($1)
	CALL _ZN5eosio5unico12check_pausedEv($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1328]
	$4 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$4 = ((int_64)$10 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	$3 = [0]
	*(($14 + [152])) = [0]
	*($14 + [136]) = (int_64)-1
	$13 = (int_64)0
	*($14 + [144]) = (int_64)0
	$9 = *($0)
	*($14 + [120]) = $9
	*($14 + [128]) = $9
	*(($14 + [158])) = [0]
	*($14 + [156]) = [0]
	$7 = CALL db_lowerbound_i64($9, $9, (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $42(($14 + [120]), $7)
	
.LOOP $label$8:
	if ( ((int_64)*($7 + [8]) != (int_64)$2) ){ goto $label$9 }
	if ( (*($7 + [48]) == 0) ){ goto $label$7 }
	
.LABEL $label$9
	CALL eosio_assert([1], [1008])
	$7 = CALL db_next_i64(*($7 + [56]), ($14 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$7 = CALL $42(($14 + [120]), $7)
	goto $label$8 
	
.LABEL $label$10
	$3 = [0]
	goto $label$6 
	
.LABEL $label$7
	$13 = *($7 + [24])
	$12 = *($0)
	$9 = (int_64)0
	$10 = (int_64)59
	$3 = [1344]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$16 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$8 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	*($14 + [72]) = $11
	*($14 + [64]) = $12
	$9 = (int_64)0
	$10 = (int_64)59
	$3 = [1920]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$22 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$8 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$17 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$3 = CALL strlen([2080])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$25 }
	*($14 + [8]) = ($3 << [1])
	$5 = (($14 + [8]) | [1])
	if ( $3 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$6 = (($3 + [16]) & [-16])
	$5 = CALL $101($6)
	*($14 + [8]) = ($6 | [1])
	*($14 + [16]) = $5
	*($14 + [12]) = $3
	
.LABEL $label$24
	CALL memcpy($5, [2080], $3)
	
.LABEL $label$23
	*(($5 + $3)) = [0]
	*(($14 + [52])) = *($14 + [12])
	*($14 + [32]) = $1
	$3 = ($14 + [16])
	*(($14 + [56])) = *($3)
	*($14 + [24]) = *($0)
	*($14 + [40]) = $2
	*($14 + [48]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($3) = [0]
	$3 = CALL $38(($14 + [80]), ($14 + [64]), $4, $11, ($14 + [24]))
	CALL $31(($14 + [160]), $3)
	$5 = *($14 + [160])
	CALL send_inline($5, (*($14 + [164]) - $5))
	$5 = *($14 + [160])
	if ( ($5 == 0) ){ goto $label$26 }
	*($14 + [164]) = $5
	CALL $102($5)
	
.LABEL $label$26
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$27 }
	*(($3 + [32])) = $5
	CALL $102($5)
	
.LABEL $label$27
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$28 }
	*(($3 + [20])) = $5
	CALL $102($5)
	
.LABEL $label$28
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$29 }
	CALL $102(*(($14 + [56])))
	
.LABEL $label$29
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$30 }
	CALL $102(*(($14 + [16])))
	
.LABEL $label$30
	$9 = (int_64)0
	$10 = (int_64)59
	$3 = [1344]
	$11 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$36 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$5 = ($5 + [165])
	goto $label$34 
	
.LABEL $label$36
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$32
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$8 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$31 }
	$9 = (int_64)0
	$10 = (int_64)59
	$3 = [2032]
	$12 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$42 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$5 = ($5 + [165])
	goto $label$40 
	
.LABEL $label$42
	$8 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$8 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$37 }
	*($14 + [32]) = $2
	*($14 + [24]) = $1
	*($14 + [88]) = $12
	*($14 + [80]) = $4
	*(($3 = CALL $101([16]))) = $1
	*($3 + [8]) = $11
	*(($5 = ($14 + [112]))) = [0]
	$0 = ($3 + [16])
	*(($14 + [104])) = $0
	*(($14 + [100])) = $0
	*($14 + [96]) = $3
	*($14 + [108]) = [0]
	*(($14 + [116])) = [0]
	CALL $25(($14 + [108]), [16])
	$3 = *($14 + [108])
	$5 = (*($5) - $3)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [816])
	CALL memcpy($3, ($14 + [24]), [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [816])
	CALL memcpy(($3 + [8]), (($14 + [24]) + [8]), [8])
	CALL $31(($14 + [64]), ($14 + [80]))
	$3 = *($14 + [64])
	CALL send_inline($3, (*($14 + [68]) - $3))
	$3 = *($14 + [64])
	if ( ($3 == 0) ){ goto $label$43 }
	*($14 + [68]) = $3
	CALL $102($3)
	
.LABEL $label$43
	$3 = *($14 + [108])
	if ( ($3 == 0) ){ goto $label$44 }
	*(($14 + [112])) = $3
	CALL $102($3)
	
.LABEL $label$44
	$3 = *($14 + [96])
	if ( ($3 == 0) ){ goto $label$45 }
	*(($14 + [100])) = $3
	CALL $102($3)
	
.LABEL $label$45
	$3 = [1]
	CALL eosio_assert([1], [2112])
	CALL eosio_assert([1], [1008])
	$5 = CALL db_next_i64(*($7 + [56]), ($14 + [80]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$46 }
	CALL $42(($14 + [120]), $5)
	
.LABEL $label$46
	CALL $53(($14 + [120]), $7)
	
.LABEL $label$6
	CALL eosio_assert($3, [2160])
	CALL require_recipient($1)
	if ( (int_64)($13 == 0) ){ goto $label$47 }
	CALL require_recipient($13)
	
.LABEL $label$47
	$5 = *($14 + [144])
	if ( ($5 == 0) ){ goto $label$48 }
	$0 = ($14 + [148])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$50 }
	
.LOOP $label$51:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$52 }
	CALL $102($3)
	
.LABEL $label$52
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$51 }
	$7 = *(($14 + [144]))
	goto $label$49 
	
.LABEL $label$50
	$7 = $5
	
.LABEL $label$49
	*($0) = $5
	CALL $102($7)
	
.LABEL $label$48
	*([0] + [4]) = ($14 + [176])
	return (unreachable)
	
.LABEL $label$5
	CALL $103(($14 + [8]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [2192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [2240])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2304])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $102($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $102($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $54(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *($4 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-7949128877345865728, ($7 + [8]), *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *(($4 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-7949128877345865727, ($7 + [8]), *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($6)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$0 = *(($5 + [68]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($6)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865726, ($7 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [816])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [816])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	$25 = (*([0] + [4]) - [176])
	*([0] + [4]) = $25
	$7 = *(($0 + [32]))
	$17 = *(($0 + [36]))
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$1 }
	$19 = ($17 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$2:
	if ( (int_64)(*(*($19)) == 0) ){ goto $label$1 }
	$17 = $19
	$16 = ($19 + [-24])
	$19 = $16
	if ( ((int_32)($16 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$19 = ($0 + [8])
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$4 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$19), [1040])
	goto $label$3 
	
.LABEL $label$4
	$16 = CALL $26($19, CALL $fimport$5(*(($0 + [8])), *(($0 + [16])), (int_64)-6524895285083111424, (int_64)0))
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$19), [1040])
	
.LABEL $label$3
	$18 = *($2 + [24])
	$17 = *($2 + [33])
	$8 = *($2 + [32])
	$9 = *($16 + [8])
	*(($25 + [152])) = [0]
	*($25 + [144]) = (int_64)0
	$19 = CALL strlen([2464])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$11 }
	*($25 + [144]) = ($19 << [1])
	$16 = (($25 + [144]) | [1])
	if ( $19 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$7 = (($19 + [16]) & [-16])
	$16 = CALL $101($7)
	*($25 + [144]) = ($7 | [1])
	*($25 + [152]) = $16
	*($25 + [148]) = $19
	
.LABEL $label$10
	CALL memcpy($16, [2464], $19)
	
.LABEL $label$9
	*(($16 + $19)) = [0]
	$22 = *($2 + [48])
	if ( (int_64)($22 == 0) ){ goto $label$12 }
	*(($25 + [32])) = [0]
	*($25 + [24]) = (int_64)0
	$19 = CALL strlen([2496])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$15 }
	*($25 + [24]) = ($19 << [1])
	$16 = (($25 + [24]) | [1])
	if ( $19 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$7 = (($19 + [16]) & [-16])
	$16 = CALL $101($7)
	*($25 + [24]) = ($7 | [1])
	*($25 + [32]) = $16
	*($25 + [28]) = $19
	
.LABEL $label$14
	CALL memcpy($16, [2496], $19)
	
.LABEL $label$13
	*(($16 + $19)) = [0]
	if ( (*($25 + [144]) & [1]) ){ goto $label$17 }
	*($25 + [144]) = [0]
	goto $label$16 
	
.LABEL $label$17
	*(*($25 + [152])) = [0]
	*($25 + [148]) = [0]
	
.LABEL $label$16
	CALL $106(($25 + [144]), [0])
	*((($25 + [144]) + [8])) = *((($25 + [24]) + [8]))
	*($25 + [144]) = *($25 + [24])
	$18 = $22
	
.LABEL $label$12
	$13 = ((int_64)((int_64)(CASTING uint_64)(uint_32 ( $17 ? *($2 + [35]) : $6 )) & (int_64)255) * (int_64)$22)
	$14 = ((int_64)$13 / (int_64)100)
	$11 = ((int_64)$22 * (int_64)((int_64)(CASTING uint_64)(uint_32 ( $8 ? *($2 + [34]) : $6 )) & (int_64)255))
	$12 = ((int_64)$11 / (int_64)100)
	$22 = *($3)
	$24 = (int_64))((int_64))($22 - $12) - $14)
	$10 = *($3 + [8])
	if ( ($6 == 0) ){ goto $label$19 }
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$24 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [2528])
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert(((int_64)$24 > (int_64)0), [2592])
	
.LABEL $label$18
	$15 = CALL $57($0, $10)
	$22 = (int_64)0
	$23 = (int_64)59
	$19 = [2672]
	$20 = (int_64)0
	
.LOOP $label$20:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$21 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$16 = ($16 + [165])
	goto $label$22 
	
.LABEL $label$23
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$21
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$20 }
	if ( ((int_64)$24 < (int_64)1) ){ goto $label$24 }
	*($25 + [88]) = $5
	CALL $58(($25 + [24]), ($25 + [88]))
	$19 = CALL $108(($25 + [24]), [2688])
	$16 = ($19 + [8])
	*((($25 + [128]) + [8])) = *($16)
	*($25 + [128]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($16) = [0]
	if ( ((*($25 + [24]) & [1]) == 0) ){ goto $label$25 }
	CALL $102(*($25 + [32]))
	
.LABEL $label$25
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [1344]
	$5 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$31 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$16 = ($16 + [165])
	goto $label$29 
	
.LABEL $label$31
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$27
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$26 }
	*($25 + [80]) = $5
	*($25 + [72]) = $4
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [2704]
	$5 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$37 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$16 = ($16 + [165])
	goto $label$35 
	
.LABEL $label$37
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$33
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$32 }
	*(($25 + [48])) = $10
	*($25 + [32]) = $20
	*($25 + [24]) = $4
	*($25 + [40]) = $24
	CALL $112(($25 + [56]), ($25 + [128]))
	$19 = CALL $59(($25 + [88]), ($25 + [72]), $15, $5, ($25 + [24]))
	CALL $31(($25 + [160]), $19)
	$16 = *($25 + [160])
	CALL send_inline($16, (*($25 + [164]) - $16))
	$16 = *($25 + [160])
	if ( ($16 == 0) ){ goto $label$38 }
	*($25 + [164]) = $16
	CALL $102($16)
	
.LABEL $label$38
	$16 = *($19 + [28])
	if ( ($16 == 0) ){ goto $label$39 }
	*(($19 + [32])) = $16
	CALL $102($16)
	
.LABEL $label$39
	$16 = *($19 + [16])
	if ( ($16 == 0) ){ goto $label$40 }
	*(($19 + [20])) = $16
	CALL $102($16)
	
.LABEL $label$40
	if ( ((*($25 + [56]) & [1]) == 0) ){ goto $label$41 }
	CALL $102(*(($25 + [64])))
	
.LABEL $label$41
	if ( ((*($25 + [128]) & [1]) == 0) ){ goto $label$24 }
	CALL $102(*($25 + [136]))
	
.LABEL $label$24
	if ( ((int_64)$9 == (int_64)$4) ){ goto $label$42 }
	if ( ((int_64)$11 < (int_64)100) ){ goto $label$42 }
	*($25 + [88]) = $9
	CALL $58(($25 + [24]), ($25 + [88]))
	$19 = CALL $108(($25 + [24]), [2720])
	$16 = ($19 + [8])
	*((($25 + [128]) + [8])) = *($16)
	*($25 + [128]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($16) = [0]
	if ( ((*($25 + [24]) & [1]) == 0) ){ goto $label$43 }
	CALL $102(*($25 + [32]))
	
.LABEL $label$43
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [1344]
	$5 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$49 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$16 = ($16 + [165])
	goto $label$47 
	
.LABEL $label$49
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$45
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$44 }
	*($25 + [80]) = $5
	*($25 + [72]) = $4
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [2704]
	$5 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$55 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$16 = ($16 + [165])
	goto $label$53 
	
.LABEL $label$55
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$51
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$50 }
	*(($25 + [48])) = $10
	*($25 + [32]) = $20
	*($25 + [24]) = $4
	*($25 + [40]) = $12
	CALL $112(($25 + [56]), ($25 + [128]))
	$19 = CALL $59(($25 + [88]), ($25 + [72]), $15, $5, ($25 + [24]))
	CALL $31(($25 + [160]), $19)
	$16 = *($25 + [160])
	CALL send_inline($16, (*($25 + [164]) - $16))
	$16 = *($25 + [160])
	if ( ($16 == 0) ){ goto $label$56 }
	*($25 + [164]) = $16
	CALL $102($16)
	
.LABEL $label$56
	$16 = *($19 + [28])
	if ( ($16 == 0) ){ goto $label$57 }
	*(($19 + [32])) = $16
	CALL $102($16)
	
.LABEL $label$57
	$16 = *($19 + [16])
	if ( ($16 == 0) ){ goto $label$58 }
	*(($19 + [20])) = $16
	CALL $102($16)
	
.LABEL $label$58
	if ( ((*($25 + [56]) & [1]) == 0) ){ goto $label$59 }
	CALL $102(*(($25 + [64])))
	
.LABEL $label$59
	if ( ((*($25 + [128]) & [1]) == 0) ){ goto $label$42 }
	CALL $102(*($25 + [136]))
	
.LABEL $label$42
	if ( ((int_64)$18 == (int_64)$4) ){ goto $label$60 }
	if ( ((int_64)$13 < (int_64)100) ){ goto $label$60 }
	*($25 + [24]) = $18
	CALL $58(($25 + [88]), ($25 + [24]))
	$19 = CALL $108(($25 + [88]), [2752])
	$16 = ($19 + [8])
	*((($25 + [24]) + [8])) = *($16)
	*($25 + [24]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($16) = [0]
	$19 = *($25 + [144])
	$16 = ($19 & [1])
	$19 = CALL $107(($25 + [24]), ( *($25 + [152]) ? (($25 + [144]) | [1]) : $16 ), ( *($25 + [148]) ? uint_32($19 >> [1]) : $16 ))
	$16 = ($19 + [8])
	*((($25 + [128]) + [8])) = *($16)
	*($25 + [128]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($16) = [0]
	if ( ((*($25 + [24]) & [1]) == 0) ){ goto $label$61 }
	CALL $102(*($25 + [32]))
	
.LABEL $label$61
	if ( ((*($25 + [88]) & [1]) == 0) ){ goto $label$62 }
	CALL $102(*($25 + [96]))
	
.LABEL $label$62
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [1344]
	$5 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$68 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$16 = ($16 + [165])
	goto $label$66 
	
.LABEL $label$68
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$64
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$63 }
	*($25 + [80]) = $5
	*($25 + [72]) = $4
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [2704]
	$5 = (int_64)0
	
.LOOP $label$69:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$74 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$16 = ($16 + [165])
	goto $label$72 
	
.LABEL $label$74
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$70
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$69 }
	*(($25 + [48])) = $10
	*($25 + [32]) = $20
	*($25 + [24]) = $4
	*($25 + [40]) = $14
	CALL $112(($25 + [56]), ($25 + [128]))
	$19 = CALL $59(($25 + [88]), ($25 + [72]), $15, $5, ($25 + [24]))
	CALL $31(($25 + [160]), $19)
	$16 = *($25 + [160])
	CALL send_inline($16, (*($25 + [164]) - $16))
	$16 = *($25 + [160])
	if ( ($16 == 0) ){ goto $label$75 }
	*($25 + [164]) = $16
	CALL $102($16)
	
.LABEL $label$75
	$16 = *($19 + [28])
	if ( ($16 == 0) ){ goto $label$76 }
	*(($19 + [32])) = $16
	CALL $102($16)
	
.LABEL $label$76
	$16 = *($19 + [16])
	if ( ($16 == 0) ){ goto $label$77 }
	*(($19 + [20])) = $16
	CALL $102($16)
	
.LABEL $label$77
	if ( ((*($25 + [56]) & [1]) == 0) ){ goto $label$78 }
	CALL $102(*(($25 + [64])))
	
.LABEL $label$78
	if ( ((*($25 + [128]) & [1]) == 0) ){ goto $label$60 }
	CALL $102(*($25 + [136]))
	
.LABEL $label$60
	*($25 + [128]) = (int_64)0
	*($25 + [136]) = [0]
	$22 = (uint_64)*(($2 + [80])) >> (uint_64)(int_64)8
	if ( (int_64)($22) == 0) ){ goto $label$79 }
	
.LOOP $label$80:
	CALL $109(($25 + [128]), int_32(((CASTING uint_32)(uint_64 $22) << [24]) >> [24]))
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)$22) != (int_64)0) ){ goto $label$80 }
	
.LABEL $label$79
	*(($25 + [96])) = [0]
	*($25 + [88]) = (int_64)0
	$19 = CALL strlen([1856])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$83 }
	*($25 + [88]) = ($19 << [1])
	$16 = (($25 + [88]) | [1])
	if ( $19 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	$17 = (($19 + [16]) & [-16])
	$16 = CALL $101($17)
	*($25 + [88]) = ($17 | [1])
	*($25 + [96]) = $16
	*($25 + [92]) = $19
	
.LABEL $label$82
	CALL memcpy($16, [1856], $19)
	
.LABEL $label$81
	*(($16 + $19)) = [0]
	$19 = *($25 + [128])
	$16 = ($19 & [1])
	$19 = CALL $107(($25 + [88]), ( *((($25 + [128]) + [8])) ? (($25 + [128]) | [1]) : $16 ), ( *($25 + [132]) ? uint_32($19 >> [1]) : $16 ))
	$16 = ($19 + [8])
	*((($25 + [24]) + [8])) = *($16)
	*($25 + [24]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($16) = [0]
	*((($25 + [72]) + [8])) = [0]
	*($25 + [72]) = (int_64)0
	$19 = CALL strlen([2768])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$86 }
	*($25 + [72]) = ($19 << [1])
	$17 = (($25 + [72]) | [1])
	$16 = $17
	if ( $19 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$17 = (($19 + [16]) & [-16])
	$16 = CALL $101($17)
	*($25 + [72]) = ($17 | [1])
	*($25 + [80]) = $16
	*($25 + [76]) = $19
	$17 = (($25 + [72]) | [1])
	
.LABEL $label$85
	CALL memcpy($16, [2768], $19)
	
.LABEL $label$84
	*(($16 + $19)) = [0]
	$19 = *($25 + [72])
	$16 = ($19 & [1])
	$19 = CALL $107(($25 + [24]), ( *($25 + [80]) ? $17 : $16 ), ( *($25 + [76]) ? uint_32($19 >> [1]) : $16 ))
	$16 = ($19 + [8])
	*((($25 + [8]) + [8])) = *($16)
	*($25 + [8]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($16) = [0]
	if ( ((*($25 + [72]) & [1]) == 0) ){ goto $label$87 }
	CALL $102(*((($25 + [72]) + [8])))
	
.LABEL $label$87
	if ( ((*($25 + [24]) & [1]) == 0) ){ goto $label$88 }
	CALL $102(*($25 + [32]))
	
.LABEL $label$88
	if ( ((*($25 + [88]) & [1]) == 0) ){ goto $label$89 }
	CALL $102(*($25 + [96]))
	
.LABEL $label$89
	$22 = (int_64)0
	$23 = (int_64)59
	$19 = [1328]
	$20 = (int_64)0
	
.LOOP $label$90:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$91 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$16 = ($16 + [165])
	goto $label$92 
	
.LABEL $label$93
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$91
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$90 }
	$24 = *($0)
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [1344]
	$5 = (int_64)0
	
.LOOP $label$94:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$99 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$98 }
	$16 = ($16 + [165])
	goto $label$97 
	
.LABEL $label$99
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$98
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$97
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$96
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$95
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$94 }
	*($25 + [80]) = $5
	*($25 + [72]) = $24
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [1920]
	$5 = (int_64)0
	
.LOOP $label$100:
	if ( ((uint_64)$22 > (uint_64)(int_64)9) ){ goto $label$105 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$104 }
	$16 = ($16 + [165])
	goto $label$103 
	
.LABEL $label$105
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$104
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$103
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$102
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$101
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$100 }
	*($25 + [96]) = $4
	*($25 + [88]) = $24
	*($25 + [104]) = $1
	CALL $112(($25 + [112]), ($25 + [8]))
	$19 = CALL $38(($25 + [24]), ($25 + [72]), $20, $5, ($25 + [88]))
	CALL $31(($25 + [160]), $19)
	$16 = *($25 + [160])
	CALL send_inline($16, (*($25 + [164]) - $16))
	$16 = *($25 + [160])
	if ( ($16 == 0) ){ goto $label$106 }
	*($25 + [164]) = $16
	CALL $102($16)
	
.LABEL $label$106
	$16 = *($19 + [28])
	if ( ($16 == 0) ){ goto $label$107 }
	*(($19 + [32])) = $16
	CALL $102($16)
	
.LABEL $label$107
	$16 = *($19 + [16])
	if ( ($16 == 0) ){ goto $label$108 }
	*(($19 + [20])) = $16
	CALL $102($16)
	
.LABEL $label$108
	if ( ((*($25 + [112]) & [1]) == 0) ){ goto $label$109 }
	CALL $102(*(($25 + [120])))
	
.LABEL $label$109
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [1344]
	$5 = (int_64)0
	
.LOOP $label$110:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$115 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$16 = ($16 + [165])
	goto $label$113 
	
.LABEL $label$115
	$23 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$114
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$112
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$111
	$19 = ($19 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$5 = ((int_64)$23 | (int_64)$5)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$110 }
	$22 = (int_64)0
	$21 = (int_64)59
	$19 = [2032]
	$24 = (int_64)0
	
.LOOP $label$116:
	if ( ((uint_64)$22 > (uint_64)(int_64)10) ){ goto $label$121 }
	$16 = *($19)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$120 }
	$16 = ($16 + [165])
	goto $label$119 
	
.LABEL $label$121
	$23 = (int_64)0
	if ( ((int_64)$22 == (int_64)11) ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$120
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$119
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$118
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$117
	$19 = ($19 + [1])
	$21 = ((int_64)$21 + (int_64)-5)
	$24 = ((int_64)$23 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)1)
	if ( ((int_64)$22 != (int_64)13) ){ goto $label$116 }
	*($25 + [96]) = $1
	*($25 + [88]) = $4
	*($25 + [32]) = $24
	*($25 + [24]) = $20
	*(($19 = CALL $101([16]))) = $4
	*($19 + [8]) = $5
	*(($16 = ($25 + [56]))) = [0]
	$17 = ($19 + [16])
	*(($25 + [48])) = $17
	*(($25 + [44])) = $17
	*($25 + [40]) = $19
	*($25 + [52]) = [0]
	*(($25 + [60])) = [0]
	CALL $25(($25 + [52]), [16])
	$19 = *($25 + [52])
	$16 = (*($16) - $19)
	CALL eosio_assert(((int_32)$16 > (int_32)[7]), [816])
	CALL memcpy($19, ($25 + [88]), [8])
	CALL eosio_assert(((int_32)($16 + [-8]) > (int_32)[7]), [816])
	CALL memcpy(($19 + [8]), (($25 + [88]) + [8]), [8])
	CALL $31(($25 + [72]), ($25 + [24]))
	$19 = *($25 + [72])
	CALL send_inline($19, (*($25 + [76]) - $19))
	$19 = *($25 + [72])
	if ( ($19 == 0) ){ goto $label$122 }
	*($25 + [76]) = $19
	CALL $102($19)
	
.LABEL $label$122
	$19 = *($25 + [52])
	if ( ($19 == 0) ){ goto $label$123 }
	*(($25 + [56])) = $19
	CALL $102($19)
	
.LABEL $label$123
	$19 = *($25 + [40])
	if ( ($19 == 0) ){ goto $label$124 }
	*(($25 + [44])) = $19
	CALL $102($19)
	
.LABEL $label$124
	if ( ((*($25 + [8]) & [1]) == 0) ){ goto $label$125 }
	CALL $102(*($25 + [16]))
	
.LABEL $label$125
	if ( ((*($25 + [128]) & [1]) == 0) ){ goto $label$126 }
	CALL $102(*(($25 + [136])))
	
.LABEL $label$126
	if ( ((*($25 + [144]) & [1]) == 0) ){ goto $label$127 }
	CALL $102(*($25 + [152]))
	
.LABEL $label$127
	*([0] + [4]) = ($25 + [176])
	return (unreachable)
	
.LABEL $label$8
	CALL $103(($25 + [144]))
	
.LABEL $label$7
	CALL $103(($25 + [88]))
	
.LABEL $label$6
	CALL $103(($25 + [72]))
	
.LABEL $label$5
	CALL $103(($25 + [24]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_64 .FUNC $57 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	CALL eosio_assert([1], [656])
	$6 = [0]
	$7 = (int_64)340431294037
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [720])
	$6 = ( [2832] ? [2848] : ((int_64)(uint_64)$1 >> (uint_64)(int_64)8) == (int_64)340431294037) )
	$5 = [-1]
	
.LOOP $label$6:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$6 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$7 = (int_64)0
	$1 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$3) ){ goto $label$8 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$12 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$11 
	
.LABEL $label$12
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$11
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$7 }
	return $8
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $117([3172], $0)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $118($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11568])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN5eosio5unico10transferidEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [320])
	*([0] + [4]) = $22
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	CALL _ZN5eosio5unico12check_marketEy($0, $2)
	CALL eosio_assert(CALL $fimport$18($1), [1744])
	$19 = (int_64)0
	$21 = (int_64)59
	$15 = [1328]
	$12 = (int_64)0
	
.LOOP $label$1:
	$18 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$2 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$16 = ($16 + [165])
	goto $label$3 
	
.LABEL $label$4
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$12 = ((int_64)$18 | (int_64)$12)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$1 }
	*((($22 + [264]) + [32])) = [0]
	*(($22 + [302])) = [0]
	*($22 + [272]) = $12
	*($22 + [264]) = $12
	*($22 + [280]) = (int_64)-1
	*($22 + [288]) = (int_64)0
	*($22 + [300]) = [0]
	$15 = [0]
	$16 = CALL db_find_i64($12, $12, (int_64)-3665743729458675712, $2)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$5 }
	$15 = CALL $37(($22 + [264]), $16)
	CALL eosio_assert(((int_32)*($15 + [60]) == (int_32)($22 + [264])), [1040])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1776])
	$3 = CALL $8(($22 + [176]))
	*((($22 + [136]) + [32])) = [0]
	*($22 + [152]) = (int_64)-1
	$19 = *($0)
	*($22 + [136]) = $19
	*($22 + [144]) = $19
	*($22 + [160]) = (int_64)0
	*($22 + [172]) = [0]
	$16 = CALL db_lowerbound_i64($19, $19, (int_64)-3108457608830881792, (int_64)0)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$8 }
	$17 = ($15 + [40])
	$4 = ($15 + [49])
	$13 = CALL $17(($22 + [136]), $16)
	$9 = ($15 + [48])
	$10 = ($15 + [52])
	$11 = ($15 + [56])
	
.LOOP $label$10:
	$15 = ($15 & [1])
	$15 = *($9)
	$14 = ($15 & [1])
	$15 = *($13 + [8])
	$6 = uint_32($15 >> [1])
	$7 = ( *(($13 + [12])) ? $6 : $14 )
	if ( ((int_32)$7 != (int_32)( *($10) ? uint_32($15 >> [1]) : $15 )) ){ goto $label$11 }
	$5 = ($13 + [8])
	$16 = ($5 + [1])
	$15 = ( *($11) ? $4 : $15 )
	if ( ($14 == 0) ){ goto $label$13 }
	if ( ($7 == 0) ){ goto $label$12 }
	if ( CALL memcmp(( *(($13 + [16])) ? $16 : $14 ), $15, $7) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$12 }
	$14 = ([0] - $6)
	
.LOOP $label$14:
	if ( ((int_32)*($16) != (int_32)*($15)) ){ goto $label$11 }
	$15 = ($15 + [1])
	$16 = ($16 + [1])
	$14 = ($14 + [1])
	if ( $14 ){ goto $label$14 }
	
.LABEL $label$12
	if ( ((int_64)*(($13 + [80])) == (int_64)*($17)) ){ goto $label$9 }
	
.LABEL $label$11
	CALL eosio_assert([1], [1008])
	$15 = CALL db_next_i64(*($13 + [92]), ($22 + [64]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $17(($22 + [136]), $15)
	goto $label$10 
	
.LABEL $label$9
	*($3) = *($13)
	CALL $104(($3 + [8]), $5)
	*(($3 + [32])) = *(($13 + [32]))
	*($3 + [24]) = *($13 + [24])
	CALL $104(($3 + [36]), ($13 + [36]))
	CALL memcpy(($3 + [48]), ($13 + [48]), [40])
	$15 = [1]
	goto $label$6 
	
.LABEL $label$8
	$17 = ($15 + [40])
	
.LABEL $label$7
	$15 = [0]
	
.LABEL $label$6
	CALL eosio_assert($15, [1808])
	*($22 + [120]) = (int_64)0
	*($22 + [128]) = [0]
	$19 = (uint_64)*($17) >> (uint_64)(int_64)8
	if ( (int_64)($19) == 0) ){ goto $label$15 }
	
.LOOP $label$16:
	CALL $109(($22 + [120]), int_32(((CASTING uint_32)(uint_64 $19) << [24]) >> [24]))
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$16 }
	
.LABEL $label$15
	*(($22 + [16])) = [0]
	*($22 + [8]) = (int_64)0
	$15 = CALL strlen([1856])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$21 }
	*($22 + [8]) = ($15 << [1])
	$16 = (($22 + [8]) | [1])
	if ( $15 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$14 = (($15 + [16]) & [-16])
	$16 = CALL $101($14)
	*($22 + [8]) = ($14 | [1])
	*($22 + [16]) = $16
	*($22 + [12]) = $15
	
.LABEL $label$20
	CALL memcpy($16, [1856], $15)
	
.LABEL $label$19
	*(($16 + $15)) = [0]
	$15 = *($22 + [120])
	$16 = ($15 & [1])
	$15 = CALL $107(($22 + [8]), ( *((($22 + [120]) + [8])) ? (($22 + [120]) | [1]) : $16 ), ( *($22 + [124]) ? uint_32($15 >> [1]) : $16 ))
	$16 = ($15 + [8])
	*((($22 + [64]) + [8])) = *($16)
	*($22 + [64]) = *($15)
	*($15) = [0]
	*(($15 + [4])) = [0]
	*($16) = [0]
	*((($22 + [48]) + [8])) = [0]
	*($22 + [48]) = (int_64)0
	$15 = CALL strlen([1888])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$24 }
	*($22 + [48]) = ($15 << [1])
	$14 = (($22 + [48]) | [1])
	$16 = $14
	if ( $15 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$14 = (($15 + [16]) & [-16])
	$16 = CALL $101($14)
	*($22 + [48]) = ($14 | [1])
	*($22 + [56]) = $16
	*($22 + [52]) = $15
	$14 = (($22 + [48]) | [1])
	
.LABEL $label$23
	CALL memcpy($16, [1888], $15)
	
.LABEL $label$22
	*(($16 + $15)) = [0]
	$15 = *($22 + [48])
	$16 = ($15 & [1])
	$15 = CALL $107(($22 + [64]), ( *($22 + [56]) ? $14 : $16 ), ( *($22 + [52]) ? uint_32($15 >> [1]) : $16 ))
	$16 = ($15 + [8])
	*((($22 + [104]) + [8])) = *($16)
	*($22 + [104]) = *($15)
	*($15) = [0]
	*(($15 + [4])) = [0]
	*($16) = [0]
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$25 }
	CALL $102(*((($22 + [48]) + [8])))
	
.LABEL $label$25
	if ( ((*($22 + [64]) & [1]) == 0) ){ goto $label$26 }
	CALL $102(*($22 + [72]))
	
.LABEL $label$26
	if ( ((*($22 + [8]) & [1]) == 0) ){ goto $label$27 }
	CALL $102(*($22 + [16]))
	
.LABEL $label$27
	$8 = *($0)
	$19 = (int_64)0
	$18 = (int_64)59
	$15 = [1344]
	$20 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$33 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$16 = ($16 + [165])
	goto $label$31 
	
.LABEL $label$33
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$29
	$15 = ($15 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$28 }
	*($22 + [56]) = $20
	*($22 + [48]) = $8
	$19 = (int_64)0
	$18 = (int_64)59
	$15 = [1920]
	$20 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$19 > (uint_64)(int_64)9) ){ goto $label$39 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$16 = ($16 + [165])
	goto $label$37 
	
.LABEL $label$39
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$35
	$15 = ($15 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$34 }
	*($22 + [16]) = $1
	*($22 + [8]) = $8
	*($22 + [24]) = $2
	CALL $112(($22 + [32]), ($22 + [104]))
	$15 = CALL $38(($22 + [64]), ($22 + [48]), $12, $20, ($22 + [8]))
	CALL $31(($22 + [304]), $15)
	$16 = *($22 + [304])
	CALL send_inline($16, (*($22 + [308]) - $16))
	$16 = *($22 + [304])
	if ( ($16 == 0) ){ goto $label$40 }
	*($22 + [308]) = $16
	CALL $102($16)
	
.LABEL $label$40
	$16 = *($15 + [28])
	if ( ($16 == 0) ){ goto $label$41 }
	*(($15 + [32])) = $16
	CALL $102($16)
	
.LABEL $label$41
	$16 = *($15 + [16])
	if ( ($16 == 0) ){ goto $label$42 }
	*(($15 + [20])) = $16
	CALL $102($16)
	
.LABEL $label$42
	if ( ((*($22 + [32]) & [1]) == 0) ){ goto $label$43 }
	CALL $102(*(($22 + [40])))
	
.LABEL $label$43
	CALL require_recipient($1)
	if ( ((*($22 + [104]) & [1]) == 0) ){ goto $label$44 }
	CALL $102(*($22 + [112]))
	
.LABEL $label$44
	if ( ((*($22 + [120]) & [1]) == 0) ){ goto $label$45 }
	CALL $102(*(($22 + [128])))
	
.LABEL $label$45
	$14 = *($22 + [160])
	if ( ($14 == 0) ){ goto $label$46 }
	$13 = ($22 + [164])
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$48 }
	
.LOOP $label$49:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$50 }
	if ( ((*($15 + [36]) & [1]) == 0) ){ goto $label$51 }
	CALL $102(*(($15 + [44])))
	
.LABEL $label$51
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$52 }
	CALL $102(*(($15 + [16])))
	
.LABEL $label$52
	CALL $102($15)
	
.LABEL $label$50
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$49 }
	$15 = *(($22 + [160]))
	goto $label$47 
	
.LABEL $label$48
	$15 = $14
	
.LABEL $label$47
	*($13) = $14
	CALL $102($15)
	
.LABEL $label$46
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$53 }
	CALL $102(*(($3 + [44])))
	
.LABEL $label$53
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$54 }
	CALL $102(*(($3 + [16])))
	
.LABEL $label$54
	$14 = *($22 + [288])
	if ( ($14 == 0) ){ goto $label$55 }
	$13 = ($22 + [292])
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$57 }
	
.LOOP $label$58:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$59 }
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$60 }
	CALL $102(*(($15 + [56])))
	
.LABEL $label$60
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$61 }
	CALL $102(*(($15 + [16])))
	
.LABEL $label$61
	CALL $102($15)
	
.LABEL $label$59
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$58 }
	$15 = *(($22 + [288]))
	goto $label$56 
	
.LABEL $label$57
	$15 = $14
	
.LABEL $label$56
	*($13) = $14
	CALL $102($15)
	
.LABEL $label$55
	*([0] + [4]) = ($22 + [320])
	return (unreachable)
	
.LABEL $label$18
	CALL $103(($22 + [8]))
	
.LABEL $label$17
	CALL $103(($22 + [48]))
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $101($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $101($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $101($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $102($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $111 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11654]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11656])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11654]) = [1]
	$7 = ($7 << [16])
	*([0] + [11656]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11656])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11656]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11654]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11654]) = [1]
	$3 = ($3 << [16])
	*([0] + [11656]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11656])
	
.LABEL $label$8
	*([0] + [11656]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11556])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11364]
	$1 = (((int_32)$2 * (int_32)[12]) + [11364])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($6 = *($1))) = (*($6) + [8])
	$2 = *($0)
	*(($0 = *($1))) = (*($0) + [16])
	$6 = *($2 + [24])
	$4 = *(($2 + [28]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($4 - $6) / (int_32)[12]))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($6)
	$7 = (CASTING uint_64)(uint_32 ( *($6 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$4:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	*($3) = $0
	$5 = *($6)
	$5 = ( *(($6 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$5 }
	$0 = ($5 + $0)
	*($3) = $0
	
.LABEL $label$5
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = *($2 + [36])
	$7 = (CASTING uint_64)(uint_32 ( *(($2 + [40])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$6 = *($1)
	$0 = *($6)
	
.LOOP $label$6:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	*($6) = $0
	$5 = *(($2 + [36]))
	$5 = ( *(($2 + [40])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$7 }
	*($6) = ($5 + $0)
	
.LABEL $label$7
	$0 = *($2 + [48])
	$7 = (CASTING uint_64)(uint_32 ( *(($2 + [52])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$6 = *($1)
	$0 = *($6)
	
.LOOP $label$8:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	*($6) = $0
	$5 = *(($2 + [48]))
	$5 = ( *(($2 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$9 }
	*($6) = ($5 + $0)
	
.LABEL $label$9
}

void .FUNC _ZN5eosio5unico8issuelicEyhNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [208])
	*([0] + [4]) = $15
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	$8 = [0]
	*(($15 + [168])) = [0]
	*($15 + [152]) = (int_64)-1
	*($15 + [160]) = (int_64)0
	$11 = *($0)
	*($15 + [136]) = $11
	*($15 + [144]) = $11
	*($15 + [172]) = [0]
	$4 = [0]
	$14 = CALL db_find_i64($11, $11, (int_64)-3108457608830881792, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $17(($15 + [136]), $14)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($15 + [136])), [1040])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [1136])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1184])
	CALL eosio_assert(($2 <= [11]), [1232])
	$1 = (CASTING uint_64)(uint_32 $2)
	*($15 + [120]) = $1
	$11 = *(($4 + [80]))
	*($15 + [128]) = $11
	CALL eosio_assert([1], [656])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$2
	CALL eosio_assert($2, [720])
	CALL eosio_assert(((int_64)((int_64)$1 + (int_64)*($4 + [72])) <= (int_64)*($4 + [56])), [1280])
	$11 = (int_64)0
	$1 = (int_64)59
	$8 = [1328]
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$7 }
	$6 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1344]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$16 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$2 = ($2 + [165])
	goto $label$14 
	
.LABEL $label$16
	$1 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$1 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1360]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$11 > (uint_64)(int_64)4) ){ goto $label$22 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$2 = ($2 + [165])
	goto $label$20 
	
.LABEL $label$22
	$1 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$1 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$17 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([1376])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($15) = ($8 << [1])
	$2 = ($15 | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$14 = (($8 + [16]) & [-16])
	$2 = CALL $101($14)
	*($15) = ($14 | [1])
	*($15 + [8]) = $2
	*($15 + [4]) = $8
	
.LABEL $label$26
	CALL memcpy($2, [1376], $8)
	
.LABEL $label$25
	$14 = [0]
	*(($2 + $8)) = [0]
	*((($15 + [16]) + [20])) = *((($15 + [120]) + [12]))
	*((($15 + [16]) + [16])) = *((($15 + [120]) + [8]))
	*((($15 + [16]) + [12])) = *($15 + [124])
	*($15 + [16]) = *($0)
	*($15 + [24]) = *($15 + [120])
	*($15 + [40]) = [0]
	*((($15 + [16]) + [28])) = [0]
	*((($15 + [16]) + [32])) = [0]
	$8 = (*($3 + [4]) - *($3))
	$7 = ((int_32)$8 / (int_32)[12])
	if ( ($8 == 0) ){ goto $label$28 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$23 }
	$2 = CALL $101($8)
	*(($15 + [40])) = $2
	*(($0 = ($15 + [44]))) = $2
	*(($15 + [48])) = ($2 + ((int_32)$7 * (int_32)[12]))
	$3 = *(($3 + [4]))
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$28 }
	
.LOOP $label$29:
	CALL $112($2, $8)
	$2 = (*($0) + [12])
	*($0) = $2
	$8 = ($8 + [12])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$29 }
	
.LABEL $label$28
	CALL $112((($15 + [16]) + [36]), ($4 + [8]))
	$8 = ($15 + [8])
	$2 = *($8)
	*($8) = [0]
	*(($15 + [72])) = $2
	$11 = *($15)
	*($15) = (int_64)0
	*($15 + [64]) = $11
	*($15 + [88]) = $13
	*($15 + [80]) = $9
	*($15 + [96]) = [0]
	*(($2 = (($15 + [80]) + [20]))) = [0]
	*(($0 = (($15 + [80]) + [24]))) = [0]
	*(($8 = CALL $101([16]))) = $6
	*($8 + [8]) = $12
	*((($15 + [80]) + [32])) = [0]
	$3 = ($8 + [16])
	*($0) = $3
	*($2) = $3
	*($15 + [96]) = $8
	*($15 + [108]) = [0]
	*((($15 + [80]) + [36])) = [0]
	*($15 + [176]) = [0]
	*($15 + [184]) = ($15 + [176])
	*($15 + [192]) = ($15 + [16])
	CALL $29(($15 + [192]), ($15 + [184]))
	$8 = *($15 + [176])
	if ( ($8 == 0) ){ goto $label$31 }
	CALL $25((($15 + [80]) + [28]), $8)
	$14 = *(($15 + [112]))
	$8 = *(($15 + [108]))
	goto $label$30 
	
.LABEL $label$31
	$8 = [0]
	
.LABEL $label$30
	*($15 + [196]) = $8
	*($15 + [192]) = $8
	*($15 + [200]) = $14
	*($15 + [176]) = ($15 + [192])
	*($15 + [184]) = ($15 + [16])
	CALL $30(($15 + [184]), ($15 + [176]))
	CALL $31(($15 + [192]), ($15 + [80]))
	$8 = *($15 + [192])
	CALL send_inline($8, (*($15 + [196]) - $8))
	$8 = *($15 + [192])
	if ( ($8 == 0) ){ goto $label$32 }
	*($15 + [196]) = $8
	CALL $102($8)
	
.LABEL $label$32
	$8 = *($15 + [108])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [112])) = $8
	CALL $102($8)
	
.LABEL $label$33
	$8 = *($15 + [96])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($15 + [100])) = $8
	CALL $102($8)
	
.LABEL $label$34
	if ( ((*(($15 + [64])) & [1]) == 0) ){ goto $label$35 }
	CALL $102(*(($15 + [72])))
	
.LABEL $label$35
	if ( ((*($15 + [52]) & [1]) == 0) ){ goto $label$36 }
	CALL $102(*(($15 + [60])))
	
.LABEL $label$36
	$0 = *(($15 + [40]))
	if ( ($0 == 0) ){ goto $label$37 }
	$3 = ($15 + [44])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$39 }
	$2 = ([0] - $0)
	$8 = ($8 + [-12])
	
.LOOP $label$40:
	if ( ((*($8) & [1]) == 0) ){ goto $label$41 }
	CALL $102(*(($8 + [8])))
	
.LABEL $label$41
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $2) != (int_32)[-12]) ){ goto $label$40 }
	$8 = *(($15 + [40]))
	goto $label$38 
	
.LABEL $label$39
	$8 = $0
	
.LABEL $label$38
	*($3) = $0
	CALL $102($8)
	
.LABEL $label$37
	if ( ((*($15) & [1]) == 0) ){ goto $label$42 }
	CALL $102(*(($15 + [8])))
	
.LABEL $label$42
	*($15 + [16]) = ($15 + [120])
	CALL eosio_assert($5, [1408])
	CALL $32(($15 + [136]), $4, ($15 + [16]))
	$0 = *($15 + [160])
	if ( ($0 == 0) ){ goto $label$43 }
	$3 = ($15 + [164])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$45 }
	
.LOOP $label$46:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$47 }
	if ( ((*($8 + [36]) & [1]) == 0) ){ goto $label$48 }
	CALL $102(*(($8 + [44])))
	
.LABEL $label$48
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$49 }
	CALL $102(*(($8 + [16])))
	
.LABEL $label$49
	CALL $102($8)
	
.LABEL $label$47
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$46 }
	$8 = *(($15 + [160]))
	goto $label$44 
	
.LABEL $label$45
	$8 = $0
	
.LABEL $label$44
	*($3) = $0
	CALL $102($8)
	
.LABEL $label$43
	*([0] + [4]) = ($15 + [208])
	return (unreachable)
	
.LABEL $label$24
	CALL $103($15)
	
.LABEL $label$23
	CALL $111((($15 + [16]) + [24]))
	(unreachable)
}

void .FUNC _ZN5eosio5unico7buyfromEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [272])
	*([0] + [4]) = $20
	CALL require_auth($1)
	CALL _ZN5eosio5unico12check_pausedEv($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1328]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$19 = *($12)
	if ( ((uint_32)(($19 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$19 = ($19 + [165])
	goto $label$3 
	
.LABEL $label$4
	$19 = ( ($19 + [208]) ? [0] : ((($19 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($19 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	$19 = [0]
	*((($20 + [224]) + [32])) = [0]
	*(($20 + [262])) = [0]
	*($20 + [232]) = $15
	*($20 + [224]) = $15
	*($20 + [240]) = (int_64)-1
	*($20 + [248]) = (int_64)0
	*($20 + [260]) = [0]
	$12 = [0]
	$18 = CALL db_find_i64($15, $15, (int_64)-3665743729458675712, $3)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $37(($20 + [224]), $18)
	CALL eosio_assert(((int_32)*($12 + [60]) == (int_32)($20 + [224])), [1040])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1776])
	$4 = CALL $8(($20 + [136]))
	*((($20 + [96]) + [32])) = [0]
	*($20 + [112]) = (int_64)-1
	$14 = *($0)
	*($20 + [96]) = $14
	*($20 + [104]) = $14
	*($20 + [120]) = (int_64)0
	*($20 + [132]) = [0]
	$18 = CALL db_lowerbound_i64($14, $14, (int_64)-3108457608830881792, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$6 }
	$5 = ($12 + [49])
	$17 = CALL $17(($20 + [96]), $18)
	$9 = ($12 + [48])
	$10 = ($12 + [52])
	$11 = ($12 + [56])
	
.LOOP $label$9:
	$12 = ($12 & [1])
	$12 = *($9)
	$18 = ($12 & [1])
	$12 = *($17 + [8])
	$7 = uint_32($12 >> [1])
	$8 = ( *(($17 + [12])) ? $7 : $18 )
	if ( ((int_32)$8 != (int_32)( *($10) ? uint_32($12 >> [1]) : $12 )) ){ goto $label$10 }
	$6 = ($17 + [8])
	$19 = ($6 + [1])
	$12 = ( *($11) ? $5 : $12 )
	if ( ($18 == 0) ){ goto $label$11 }
	if ( ($8 == 0) ){ goto $label$8 }
	if ( (CALL memcmp(( *(($17 + [16])) ? $19 : $18 ), $12, $8) == 0) ){ goto $label$8 }
	goto $label$10 
	
.LABEL $label$11
	if ( ($8 == 0) ){ goto $label$8 }
	$18 = ([0] - $7)
	
.LOOP $label$12:
	if ( ((int_32)*($19) != (int_32)*($12)) ){ goto $label$10 }
	$12 = ($12 + [1])
	$19 = ($19 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([1], [1008])
	$12 = CALL db_next_i64(*($17 + [92]), ($20 + [56]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$17 = CALL $17(($20 + [96]), $12)
	goto $label$9 
	
.LABEL $label$8
	*($4) = *($17)
	CALL $104(($4 + [8]), $6)
	*(($4 + [32])) = *(($17 + [32]))
	*($4 + [24]) = *($17 + [24])
	CALL $104(($4 + [36]), ($17 + [36]))
	CALL memcpy(($4 + [48]), ($17 + [48]), [40])
	$19 = [1]
	goto $label$6 
	
.LABEL $label$7
	$19 = [0]
	
.LABEL $label$6
	CALL eosio_assert($19, [2368])
	$8 = *(($0 + [32]))
	$18 = *(($0 + [36]))
	if ( ((int_32)$18 == (int_32)$8) ){ goto $label$13 }
	$12 = ($18 + [-24])
	$17 = ([0] - $8)
	
.LOOP $label$14:
	if ( (int_64)(*(*($12)) == 0) ){ goto $label$13 }
	$18 = $12
	$19 = ($12 + [-24])
	$12 = $19
	if ( ((int_32)($19 + $17) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$12 = ($0 + [8])
	if ( ((int_32)$18 == (int_32)$8) ){ goto $label$16 }
	$19 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)$12), [1040])
	goto $label$15 
	
.LABEL $label$16
	$19 = CALL $26($12, CALL $fimport$5(*(($0 + [8])), *(($0 + [16])), (int_64)-6524895285083111424, (int_64)0))
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)$12), [1040])
	
.LABEL $label$15
	$16 = *($4 + [24])
	$13 = *($19 + [8])
	$19 = [0]
	*(($20 + [88])) = [0]
	*($20 + [72]) = (int_64)-1
	$14 = *($0)
	*($20 + [56]) = $14
	*($20 + [64]) = $14
	*($20 + [80]) = (int_64)0
	*(($20 + [94])) = [0]
	*($20 + [92]) = [0]
	$12 = CALL db_lowerbound_i64($14, $14, (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$17 }
	$12 = CALL $42(($20 + [56]), $12)
	
.LOOP $label$19:
	if ( ((int_64)*($12 + [8]) != (int_64)$3) ){ goto $label$20 }
	if ( ((int_64)*($12 + [16]) != (int_64)$2) ){ goto $label$20 }
	if ( (*($12 + [48]) == 0) ){ goto $label$18 }
	
.LABEL $label$20
	CALL eosio_assert([1], [1008])
	$12 = CALL db_next_i64(*($12 + [56]), ($20 + [40]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$21 }
	$12 = CALL $42(($20 + [56]), $12)
	goto $label$19 
	
.LABEL $label$21
	$19 = [0]
	goto $label$17 
	
.LABEL $label$18
	$14 = *($12 + [24])
	if ( (int_64)($14 == 0) ){ goto $label$22 }
	CALL eosio_assert(((int_64)$14 == (int_64)$1), [2416])
	
.LABEL $label$22
	$14 = *(($12 + [40]))
	*((($20 + [40]) + [8])) = $14
	*(($19 = (($20 + [24]) + [8]))) = $14
	$14 = *($12 + [32])
	*($20 + [40]) = $14
	*($20 + [24]) = $14
	*((($20 + [8]) + [8])) = *($19)
	*($20 + [8]) = *($20 + [24])
	CALL $56($0, $3, $4, ($20 + [8]), $1, $2, [0])
	$19 = [1]
	CALL eosio_assert([1], [2112])
	CALL eosio_assert([1], [1008])
	$18 = CALL db_next_i64(*($12 + [56]), ($20 + [264]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$23 }
	CALL $42(($20 + [56]), $18)
	
.LABEL $label$23
	CALL $53(($20 + [56]), $12)
	
.LABEL $label$17
	CALL eosio_assert($19, [2448])
	CALL require_recipient($1)
	CALL require_recipient($2)
	CALL require_recipient($13)
	if ( ((int_64)$13 == (int_64)$16) ){ goto $label$24 }
	CALL require_recipient($16)
	
.LABEL $label$24
	$18 = *($20 + [80])
	if ( ($18 == 0) ){ goto $label$25 }
	$17 = ($20 + [84])
	$12 = *($17)
	if ( ((int_32)$12 == (int_32)$18) ){ goto $label$27 }
	
.LOOP $label$28:
	$12 = ($12 + [-24])
	$19 = *($12)
	*($12) = [0]
	if ( ($19 == 0) ){ goto $label$29 }
	CALL $102($19)
	
.LABEL $label$29
	if ( ((int_32)$18 != (int_32)$12) ){ goto $label$28 }
	$12 = *(($20 + [80]))
	goto $label$26 
	
.LABEL $label$27
	$12 = $18
	
.LABEL $label$26
	*($17) = $18
	CALL $102($12)
	
.LABEL $label$25
	$18 = *($20 + [120])
	if ( ($18 == 0) ){ goto $label$30 }
	$17 = ($20 + [124])
	$19 = *($17)
	if ( ((int_32)$19 == (int_32)$18) ){ goto $label$32 }
	
.LOOP $label$33:
	$19 = ($19 + [-24])
	$12 = *($19)
	*($19) = [0]
	if ( ($12 == 0) ){ goto $label$34 }
	if ( ((*($12 + [36]) & [1]) == 0) ){ goto $label$35 }
	CALL $102(*(($12 + [44])))
	
.LABEL $label$35
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$36 }
	CALL $102(*(($12 + [16])))
	
.LABEL $label$36
	CALL $102($12)
	
.LABEL $label$34
	if ( ((int_32)$18 != (int_32)$19) ){ goto $label$33 }
	$12 = *(($20 + [120]))
	goto $label$31 
	
.LABEL $label$32
	$12 = $18
	
.LABEL $label$31
	*($17) = $18
	CALL $102($12)
	
.LABEL $label$30
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$37 }
	CALL $102(*(($4 + [44])))
	
.LABEL $label$37
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$38 }
	CALL $102(*(($4 + [16])))
	
.LABEL $label$38
	$18 = *($20 + [248])
	if ( ($18 == 0) ){ goto $label$39 }
	$17 = ($20 + [252])
	$19 = *($17)
	if ( ((int_32)$19 == (int_32)$18) ){ goto $label$41 }
	
.LOOP $label$42:
	$19 = ($19 + [-24])
	$12 = *($19)
	*($19) = [0]
	if ( ($12 == 0) ){ goto $label$43 }
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$44 }
	CALL $102(*(($12 + [56])))
	
.LABEL $label$44
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$45 }
	CALL $102(*(($12 + [16])))
	
.LABEL $label$45
	CALL $102($12)
	
.LABEL $label$43
	if ( ((int_32)$18 != (int_32)$19) ){ goto $label$42 }
	$12 = *(($20 + [248]))
	goto $label$40 
	
.LABEL $label$41
	$12 = $18
	
.LABEL $label$40
	*($17) = $18
	CALL $102($12)
	
.LABEL $label$39
	*([0] + [4]) = ($20 + [272])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $105($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $101(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $102($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [816])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [816])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $21(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [816])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [816])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [816])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [816])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $21(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [816])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [816])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $24($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $106($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $101($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $106($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $102($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $103($7)
	return (unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [976])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [976])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [976])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [976])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $23(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [976])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [976])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [976])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $101($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $111($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $102($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [992])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $25($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [976])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $111($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [944])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $101([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [976])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [976])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [976])
	CALL memcpy(($6 + [16]), ($7 + [16]), [1])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $110($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [1456])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1504])
	*($1 + [35]) = *(*($2))
	$3 = ($1 + [24])
	*(($15 = $16) + [16]) = *($3)
	$4 = *($1)
	*($1 + [34]) = *(*($2 + [4]))
	CALL eosio_assert([1], [1680])
	*($15 + [24]) = [0]
	*($15) = ($15 + [24])
	$7 = ($1 + [8])
	*($15 + [36]) = $7
	*($15 + [32]) = $1
	*($15 + [40]) = $3
	$8 = ($1 + [32])
	*($15 + [44]) = $8
	$9 = ($1 + [33])
	*($15 + [48]) = $9
	$6 = ($1 + [34])
	*($15 + [52]) = $6
	$5 = ($1 + [35])
	*($15 + [56]) = $5
	$10 = ($1 + [36])
	*($15 + [60]) = $10
	$11 = ($1 + [48])
	*($15 + [64]) = $11
	$12 = ($1 + [56])
	*($15 + [68]) = $12
	$13 = ($1 + [72])
	*($15 + [72]) = $13
	CALL $19(($15 + [32]), $15)
	$14 = *($15 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($16 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	*($15 + [4]) = $2
	*($15) = $2
	*($15 + [8]) = ($2 + $14)
	*($15 + [24]) = $15
	*($15 + [36]) = $7
	*($15 + [40]) = $3
	*($15 + [44]) = $8
	*($15 + [48]) = $9
	*($15 + [52]) = $6
	*($15 + [56]) = $5
	*($15 + [32]) = $1
	*($15 + [60]) = $10
	*($15 + [64]) = $11
	*($15 + [68]) = $12
	*($15 + [72]) = $13
	CALL $20(($15 + [32]), ($15 + [24]))
	CALL db_update_i64(*($1 + [92]), (int_64)0, $2, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($15 + [32]) = *($3)
	if ( (CALL memcmp(($15 + [16]), ($15 + [32]), [8]) == 0) ){ goto $label$5 }
	$2 = ($1 + [96])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3108457608830881792, ($15 + [24]), $4)
	*($2) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, (int_64)0, ($15 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($15 + [80])
}

void .FUNC _ZN5eosio5unico11setrevenue2Eyhh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [63]) = $2
	*($6 + [62]) = $3
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [16]) = $4
	*($6 + [24]) = $4
	*($6 + [52]) = [0]
	$0 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-3108457608830881792, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($6 + [16]), $5)
	CALL eosio_assert(((int_32)*($0 + [88]) == (int_32)($6 + [16])), [1040])
	$3 = *($6 + [62])
	$2 = *($6 + [63])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [1136])
	$2 = ($2 & [255])
	CALL eosio_assert(($2 <= [100]), [272])
	$3 = ($3 & [255])
	CALL eosio_assert(($3 <= [100]), [352])
	CALL eosio_assert((($2 + $3) <= [100]), [432])
	*($6 + [12]) = ($6 + [63])
	*($6 + [8]) = ($6 + [62])
	CALL eosio_assert($5, [1408])
	CALL $69(($6 + [16]), $0, ($6 + [8]))
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [44])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($0 + [44])))
	
.LABEL $label$7
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($0 + [16])))
	
.LABEL $label$8
	CALL $102($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$5 }
	$0 = *(($6 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $102($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	return CALL $107($0, $1, CALL $115($1))
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$4 = *($6 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5918709162908319744, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $13($6, $5)
	*($9 + [36]) = [0]
	*($9 + [32]) = $6
	$4 = *(*(CALL $14(($9 + [32])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [752])
	*($1) = *(($6 + [16]))
	$6 = *($3 + [4])
	*($1 + [8]) = *($6)
	*(($5 = ($1 + [16]))) = *(($6 + [8]))
	*($1 + [24]) = *(*($3 + [8]))
	$10 = $10
	$6 = ($10 + [-32])
	*([0] + [4]) = $6
	*($9 + [12]) = $6
	*($9 + [8]) = $6
	*($9 + [16]) = $10
	*($9 + [24]) = ($9 + [8])
	*($9 + [36]) = ($1 + [8])
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + [24])
	CALL $15(($9 + [32]), ($9 + [24]))
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-5918709162908319744, *(*($0 + [8])), $4, $6, [32])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [32]) = (uint_64)*($5) >> (uint_64)(int_64)8)
	*($1 + [40]) = CALL db_idx64_store($4, (int_64)-5918709162908319744, $7, $8, ($9 + [32]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN5eosio5unico8setpriceEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	*($6 + [88]) = $1
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	*((($6 + [48]) + [32])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	$4 = *($0)
	*($6 + [48]) = $4
	*($6 + [56]) = $4
	*($6 + [84]) = [0]
	$3 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-3108457608830881792, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $17(($6 + [48]), $5)
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)($6 + [48])), [1040])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1136])
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	*($6 + [32]) = (int_64)0
	*($6 + [44]) = [0]
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)-5918709162908319744, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $13(($6 + [8]), $3)
	$5 = ($2 + [8])
	
.LOOP $label$7:
	if ( ((int_64)*($3 + [24]) != (int_64)*($6 + [88])) ){ goto $label$8 }
	if ( ((uint_64)((int_64)*($5) ^ (int_64)*(($3 + [16]))) <= (uint_64)(int_64)255) ){ goto $label$5 }
	
.LABEL $label$8
	CALL eosio_assert([1], [1008])
	$3 = CALL db_next_i64(*($3 + [36]), ($6 + [96]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $13(($6 + [8]), $3)
	goto $label$7 
	
.LABEL $label$6
	$4 = *($0)
	*($6 + [164]) = $2
	*($6 + [160]) = ($6 + [8])
	*($6 + [168]) = ($6 + [88])
	*($6 + [128]) = $4
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [592])
	*($6 + [100]) = ($6 + [160])
	*($6 + [96]) = ($6 + [8])
	*($6 + [104]) = ($6 + [128])
	*(($5 = CALL $101([48])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [656])
	$4 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$0 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$0 = [0]
	
.LABEL $label$9
	CALL eosio_assert($0, [720])
	*($5 + [32]) = ($6 + [8])
	CALL $65(($6 + [96]), $5)
	*($6 + [152]) = $5
	$4 = *($5)
	*($6 + [96]) = $4
	$0 = *($5 + [36])
	*($6 + [144]) = $0
	$2 = ($6 + [36])
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)*(($6 + [40]))) ){ goto $label$15 }
	*($3 + [8]) = $4
	*($3 + [16]) = $0
	*($6 + [152]) = [0]
	*($3) = $5
	*($2) = ($3 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $12(($6 + [32]), ($6 + [152]), ($6 + [96]), ($6 + [144]))
	
.LABEL $label$14
	$3 = *($6 + [152])
	*($6 + [152]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $102($3)
	$0 = *($6 + [32])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([1], [1408])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($6 + [8])), [1456])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [1504])
	$5 = ($3 + [16])
	$4 = *($5)
	*(($3 + [20])) = *(($2 + [12]))
	*($5) = *(($2 + [8]))
	*(($3 + [12])) = *(($2 + [4]))
	*($3 + [8]) = *($2)
	*($6 + [144]) = (uint_64)$4 >> (uint_64)(int_64)8)
	$4 = *($3)
	CALL eosio_assert([1], [1680])
	*($6 + [136]) = (($6 + [96]) + [32])
	*($6 + [132]) = ($6 + [96])
	*($6 + [128]) = ($6 + [96])
	*($6 + [152]) = ($6 + [128])
	*($6 + [164]) = ($3 + [8])
	*($6 + [160]) = $3
	*($6 + [168]) = ($3 + [24])
	CALL $15(($6 + [160]), ($6 + [152]))
	CALL db_update_i64(*($3 + [36]), (int_64)0, ($6 + [96]), [32])
	$0 = (($6 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$16 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($6 + [160]) = (uint_64)*($5) >> (uint_64)(int_64)8)
	if ( (CALL memcmp(($6 + [144]), ($6 + [160]), [8]) == 0) ){ goto $label$4 }
	$5 = ($3 + [40])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$17 }
	$3 = CALL db_idx64_find_primary(*($6 + [8]), *(($6 + [16])), (int_64)-5918709162908319744, ($6 + [152]), $4)
	*($5) = $3
	
.LABEL $label$17
	CALL db_idx64_update($3, (int_64)0, ($6 + [160]))
	
.LABEL $label$4
	$0 = *($6 + [32])
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($6 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$21 }
	CALL $102($5)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($6 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $0
	
.LABEL $label$18
	*($2) = $0
	CALL $102($3)
	
.LABEL $label$2
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$22 }
	$2 = ($6 + [76])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$26 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$27 }
	CALL $102(*(($3 + [44])))
	
.LABEL $label$27
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$28 }
	CALL $102(*(($3 + [16])))
	
.LABEL $label$28
	CALL $102($3)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$25 }
	$3 = *(($6 + [72]))
	goto $label$23 
	
.LABEL $label$24
	$3 = $0
	
.LABEL $label$23
	*($2) = $0
	CALL $102($3)
	
.LABEL $label$22
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [1456])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1504])
	*($1 + [33]) = *(*($2))
	$3 = ($1 + [24])
	*(($15 = $16) + [16]) = *($3)
	$4 = *($1)
	*($1 + [32]) = *(*($2 + [4]))
	CALL eosio_assert([1], [1680])
	*($15 + [24]) = [0]
	*($15) = ($15 + [24])
	$7 = ($1 + [8])
	*($15 + [36]) = $7
	*($15 + [32]) = $1
	*($15 + [40]) = $3
	$6 = ($1 + [32])
	*($15 + [44]) = $6
	$5 = ($1 + [33])
	*($15 + [48]) = $5
	$8 = ($1 + [34])
	*($15 + [52]) = $8
	$9 = ($1 + [35])
	*($15 + [56]) = $9
	$10 = ($1 + [36])
	*($15 + [60]) = $10
	$11 = ($1 + [48])
	*($15 + [64]) = $11
	$12 = ($1 + [56])
	*($15 + [68]) = $12
	$13 = ($1 + [72])
	*($15 + [72]) = $13
	CALL $19(($15 + [32]), $15)
	$14 = *($15 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($16 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	*($15 + [4]) = $2
	*($15) = $2
	*($15 + [8]) = ($2 + $14)
	*($15 + [24]) = $15
	*($15 + [36]) = $7
	*($15 + [40]) = $3
	*($15 + [44]) = $6
	*($15 + [48]) = $5
	*($15 + [52]) = $8
	*($15 + [56]) = $9
	*($15 + [32]) = $1
	*($15 + [60]) = $10
	*($15 + [64]) = $11
	*($15 + [68]) = $12
	*($15 + [72]) = $13
	CALL $20(($15 + [32]), ($15 + [24]))
	CALL db_update_i64(*($1 + [92]), (int_64)0, $2, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($15 + [32]) = *($3)
	if ( (CALL memcmp(($15 + [16]), ($15 + [32]), [8]) == 0) ){ goto $label$5 }
	$2 = ($1 + [96])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3108457608830881792, ($15 + [24]), $4)
	*($2) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, (int_64)0, ($15 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($15 + [80])
}

void .FUNC _ZN5eosio5unico10setrevenueEyhh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [63]) = $2
	*($6 + [62]) = $3
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [16]) = $4
	*($6 + [24]) = $4
	*($6 + [52]) = [0]
	$0 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-3108457608830881792, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($6 + [16]), $5)
	CALL eosio_assert(((int_32)*($0 + [88]) == (int_32)($6 + [16])), [1040])
	$3 = *($6 + [62])
	$2 = *($6 + [63])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [1136])
	$2 = ($2 & [255])
	CALL eosio_assert(($2 <= [101]), [96])
	$3 = ($3 & [255])
	CALL eosio_assert(($3 <= [101]), [160])
	CALL eosio_assert((($2 + $3) <= [101]), [224])
	*($6 + [12]) = ($6 + [63])
	*($6 + [8]) = ($6 + [62])
	CALL eosio_assert($5, [1408])
	CALL $67(($6 + [16]), $0, ($6 + [8]))
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [44])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($0 + [44])))
	
.LABEL $label$7
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($0 + [16])))
	
.LABEL $label$8
	CALL $102($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$5 }
	$0 = *(($6 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $102($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [64])
}

void .FUNC _ZN5eosio5unico3buyEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [256])
	*([0] + [4]) = $22
	CALL require_auth($1)
	CALL _ZN5eosio5unico12check_pausedEv($0)
	CALL _ZN5eosio5unico12check_marketEy($0, $3)
	$14 = (int_64)0
	$13 = (int_64)59
	$20 = [1328]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$21 = *($20)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$21 = ($21 + [165])
	goto $label$3 
	
.LABEL $label$4
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($21 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$20 = ($20 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	$20 = [0]
	*((($22 + [208]) + [32])) = [0]
	*(($22 + [246])) = [0]
	*($22 + [216]) = $15
	*($22 + [208]) = $15
	*($22 + [224]) = (int_64)-1
	*($22 + [232]) = (int_64)0
	*($22 + [244]) = [0]
	$17 = [0]
	$21 = CALL db_find_i64($15, $15, (int_64)-3665743729458675712, $3)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$5 }
	$17 = CALL $37(($22 + [208]), $21)
	CALL eosio_assert(((int_32)*($17 + [60]) == (int_32)($22 + [208])), [1040])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [1776])
	$4 = CALL $8(($22 + [120]))
	*((($22 + [80]) + [32])) = [0]
	*($22 + [96]) = (int_64)-1
	$14 = *($0)
	*($22 + [80]) = $14
	*($22 + [88]) = $14
	*($22 + [104]) = (int_64)0
	*($22 + [116]) = [0]
	$21 = CALL db_lowerbound_i64($14, $14, (int_64)-3108457608830881792, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$6 }
	$5 = ($17 + [49])
	$18 = CALL $17(($22 + [80]), $21)
	$9 = ($17 + [48])
	$10 = ($17 + [52])
	$11 = ($17 + [56])
	$12 = ($17 + [40])
	
.LOOP $label$8:
	$20 = ($20 & [1])
	$20 = *($9)
	$19 = ($20 & [1])
	$20 = *($18 + [8])
	$7 = uint_32($20 >> [1])
	$8 = ( *(($18 + [12])) ? $7 : $19 )
	if ( ((int_32)$8 != (int_32)( *($10) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$9 }
	$6 = ($18 + [8])
	$21 = ($6 + [1])
	$20 = ( *($11) ? $5 : $20 )
	if ( ($19 == 0) ){ goto $label$11 }
	if ( ($8 == 0) ){ goto $label$10 }
	if ( CALL memcmp(( *(($18 + [16])) ? $21 : $19 ), $20, $8) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( ($8 == 0) ){ goto $label$10 }
	$19 = ([0] - $7)
	
.LOOP $label$12:
	if ( ((int_32)*($21) != (int_32)*($20)) ){ goto $label$9 }
	$20 = ($20 + [1])
	$21 = ($21 + [1])
	$19 = ($19 + [1])
	if ( $19 ){ goto $label$12 }
	
.LABEL $label$10
	if ( ((int_64)*(($18 + [80])) == (int_64)*($12)) ){ goto $label$7 }
	
.LABEL $label$9
	CALL eosio_assert([1], [1008])
	$20 = CALL db_next_i64(*($18 + [92]), ($22 + [40]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$13 }
	$18 = CALL $17(($22 + [80]), $20)
	goto $label$8 
	
.LABEL $label$13
	$20 = [0]
	goto $label$6 
	
.LABEL $label$7
	*($4) = *($18)
	CALL $104(($4 + [8]), $6)
	*(($4 + [32])) = *(($18 + [32]))
	*($4 + [24]) = *($18 + [24])
	CALL $104(($4 + [36]), ($18 + [36]))
	CALL memcpy(($4 + [48]), ($18 + [48]), [40])
	$20 = [1]
	
.LABEL $label$6
	CALL eosio_assert($20, [1808])
	CALL eosio_assert(((int_64)*($17 + [24]) == (int_64)*($0)), [2864])
	*(($22 + [72])) = [0]
	*($22 + [56]) = (int_64)-1
	*($22 + [64]) = (int_64)0
	$14 = *($0)
	*($22 + [40]) = $14
	*($22 + [48]) = $14
	*($22 + [76]) = [0]
	if ( (*($2) & [1]) ){ goto $label$15 }
	$21 = ($2 + [1])
	goto $label$14 
	
.LABEL $label$15
	$21 = *($2 + [8])
	
.LABEL $label$14
	$20 = [-1]
	
.LOOP $label$16:
	$19 = ($21 + $20)
	$18 = ($20 + [1])
	$20 = $18
	if ( *(($19 + [1])) ){ goto $label$16 }
	$16 = (int_64)0
	if ( ($18 == 0) ){ goto $label$17 }
	$13 = (CASTING uint_64)(uint_32 $18)
	$14 = (int_64)8
	$16 = (int_64)0
	
.LOOP $label$18:
	$20 = *($21)
	if ( ((uint_32)(($20 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$16 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$14 & (int_64)4294967288)) | (int_64)$16)
	
.LABEL $label$19
	$21 = ($21 + [1])
	$14 = ((int_64)$14 + (int_64)8)
	$13 = ((int_64)$13 + (int_64)-1)
	if ( ((int_64)$13 != (int_64)0) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert([1], [656])
	$20 = [0]
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	$14 = $16)
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$21 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$21 = [0]
	
.LABEL $label$20
	CALL eosio_assert($21, [720])
	CALL eosio_assert([1], [656])
	$14 = (int_64)5462355
	$13 = (int_64)1398362884
	$20 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$21 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$21 = [0]
	
.LABEL $label$25
	CALL eosio_assert($21, [720])
	$20 = [0]
	$21 = CALL db_lowerbound_i64(*($22 + [40]), *((($22 + [40]) + [8])), (int_64)-5918709162908319744, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$32 }
	$20 = CALL $13(($22 + [40]), $21)
	
.LOOP $label$33:
	if ( ((int_64)*($20 + [24]) != (int_64)*($4)) ){ goto $label$34 }
	$13 = *(($20 + [16]))
	if ( ((int_64)(uint_64)$13 >> (uint_64)(int_64)8) == (int_64)$16) ){ goto $label$31 }
	
.LABEL $label$34
	CALL eosio_assert([1], [1008])
	$20 = CALL db_next_i64(*($20 + [36]), ($22 + [248]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$35 }
	$20 = CALL $13(($22 + [40]), $20)
	goto $label$33 
	
.LABEL $label$35
	$20 = [0]
	$14 = (int_64)0
	$13 = (int_64)1398362884
	goto $label$30 
	
.LABEL $label$32
	$14 = (int_64)0
	goto $label$30 
	
.LABEL $label$31
	$14 = *($20 + [8])
	$20 = [1]
	
.LABEL $label$30
	CALL eosio_assert($20, [2896])
	CALL eosio_assert(((int_64)$14 > (int_64)0), [2944])
	*($22 + [32]) = $13
	$16 = *($0)
	*((($22 + [8]) + [8])) = $13
	*($22 + [24]) = $14
	*($22 + [8]) = $14
	CALL $56($0, $3, $4, ($22 + [8]), $1, $16, [1])
	$8 = *(($0 + [32]))
	$19 = *(($0 + [36]))
	if ( ((int_32)$19 == (int_32)$8) ){ goto $label$36 }
	$20 = ($19 + [-24])
	$18 = ([0] - $8)
	
.LOOP $label$37:
	if ( (int_64)(*(*($20)) == 0) ){ goto $label$36 }
	$19 = $20
	$21 = ($20 + [-24])
	$20 = $21
	if ( ((int_32)($21 + $18) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	$20 = ($0 + [8])
	if ( ((int_32)$19 == (int_32)$8) ){ goto $label$39 }
	$21 = *(($19 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [24]) == (int_32)$20), [1040])
	goto $label$38 
	
.LABEL $label$39
	$21 = CALL $26($20, CALL $fimport$5(*(($0 + [8])), *(($0 + [16])), (int_64)-6524895285083111424, (int_64)0))
	CALL eosio_assert(((int_32)*($21 + [24]) == (int_32)$20), [1040])
	
.LABEL $label$38
	$13 = *($4 + [24])
	$14 = *($21 + [8])
	CALL require_recipient($1)
	CALL require_recipient(*($0))
	if ( ((int_64)$14 == (int_64)*($0)) ){ goto $label$40 }
	CALL require_recipient($14)
	
.LABEL $label$40
	if ( ((int_64)$14 == (int_64)$13) ){ goto $label$41 }
	CALL require_recipient($13)
	
.LABEL $label$41
	$19 = *($22 + [64])
	if ( ($19 == 0) ){ goto $label$42 }
	$18 = ($22 + [68])
	$20 = *($18)
	if ( ((int_32)$20 == (int_32)$19) ){ goto $label$44 }
	
.LOOP $label$45:
	$20 = ($20 + [-24])
	$21 = *($20)
	*($20) = [0]
	if ( ($21 == 0) ){ goto $label$46 }
	CALL $102($21)
	
.LABEL $label$46
	if ( ((int_32)$19 != (int_32)$20) ){ goto $label$45 }
	$20 = *(($22 + [64]))
	goto $label$43 
	
.LABEL $label$44
	$20 = $19
	
.LABEL $label$43
	*($18) = $19
	CALL $102($20)
	
.LABEL $label$42
	$19 = *($22 + [104])
	if ( ($19 == 0) ){ goto $label$47 }
	$18 = ($22 + [108])
	$21 = *($18)
	if ( ((int_32)$21 == (int_32)$19) ){ goto $label$49 }
	
.LOOP $label$50:
	$21 = ($21 + [-24])
	$20 = *($21)
	*($21) = [0]
	if ( ($20 == 0) ){ goto $label$51 }
	if ( ((*($20 + [36]) & [1]) == 0) ){ goto $label$52 }
	CALL $102(*(($20 + [44])))
	
.LABEL $label$52
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$53 }
	CALL $102(*(($20 + [16])))
	
.LABEL $label$53
	CALL $102($20)
	
.LABEL $label$51
	if ( ((int_32)$19 != (int_32)$21) ){ goto $label$50 }
	$20 = *(($22 + [104]))
	goto $label$48 
	
.LABEL $label$49
	$20 = $19
	
.LABEL $label$48
	*($18) = $19
	CALL $102($20)
	
.LABEL $label$47
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$54 }
	CALL $102(*(($4 + [44])))
	
.LABEL $label$54
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$55 }
	CALL $102(*(($4 + [16])))
	
.LABEL $label$55
	$19 = *($22 + [232])
	if ( ($19 == 0) ){ goto $label$56 }
	$18 = ($22 + [236])
	$21 = *($18)
	if ( ((int_32)$21 == (int_32)$19) ){ goto $label$58 }
	
.LOOP $label$59:
	$21 = ($21 + [-24])
	$20 = *($21)
	*($21) = [0]
	if ( ($20 == 0) ){ goto $label$60 }
	if ( ((*($20 + [48]) & [1]) == 0) ){ goto $label$61 }
	CALL $102(*(($20 + [56])))
	
.LABEL $label$61
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$62 }
	CALL $102(*(($20 + [16])))
	
.LABEL $label$62
	CALL $102($20)
	
.LABEL $label$60
	if ( ((int_32)$19 != (int_32)$21) ){ goto $label$59 }
	$20 = *(($22 + [232]))
	goto $label$57 
	
.LABEL $label$58
	$20 = $19
	
.LABEL $label$57
	*($18) = $19
	CALL $102($20)
	
.LABEL $label$56
	*([0] + [4]) = ($22 + [256])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [816])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

void .FUNC _ZN5eosio5unico9setpausedEh (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$2 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( (int_64)(*(*($6)) == 0) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$4), [1040])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6524895285083111424, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $26($4, $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$4), [1040])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1408])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$4), [1456])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [1504])
	*($6 + [16]) = $1
	$5 = *($6)
	CALL eosio_assert([1], [1680])
	CALL eosio_assert([1], [816])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert([1], [816])
	CALL memcpy(($8 | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [816])
	CALL memcpy(($8 + [16]), ($6 + [16]), [1])
	CALL db_update_i64(*($6 + [28]), (int_64)0, $8, [17])
	$6 = ($0 + [24])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [32])
}

void .FUNC _ZN5eosio5unico12setunicoacntEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$18($1), [2992])
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( (int_64)(*(*($5)) == 0) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1040])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6524895285083111424, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $26($4, $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1040])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1408])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1456])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [1504])
	*($5 + [8]) = $1
	$1 = *($5)
	CALL eosio_assert([1], [1680])
	CALL eosio_assert([1], [816])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert([1], [816])
	CALL memcpy(($7 | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [816])
	CALL memcpy(($7 + [16]), ($5 + [16]), [1])
	CALL db_update_i64(*($5 + [28]), (int_64)0, $7, [17])
	$5 = ($0 + [24])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [3168])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [896])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6524895285083111424)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [832])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [832])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $26(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $103 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $102 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $101($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $102($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $105($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $112($5, ($1 + [8]))
	$3 = *($1 + [24])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $112(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $102(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $112($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $112(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $102(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [976])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [976])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [1])
	CALL eosio_assert(((int_32)$1 != (int_32)[9]), [976])
	$4 = ($7 + [9])
	CALL memcpy($4, ($5 + [9]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($8 & [255])), (int_32 ($5 & [255])), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [976])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $23(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $88(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [656])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [720])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [976])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [976])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [976])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [976])
	CALL memcpy(($5 + [8]), $3, [1])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [255])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [976])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [976])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $23(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [976])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $89(($2 + [48]), $2)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [976])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [976])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [976])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [976])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [976])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN5eosio5unico11removepriceEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	if ( (*($2) & [1]) ){ goto $label$2 }
	$5 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [8])
	
.LABEL $label$1
	$2 = [-1]
	
.LOOP $label$3:
	$4 = ($5 + $2)
	$3 = ($2 + [1])
	$2 = $3
	if ( *(($4 + [1])) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = (CASTING uint_64)(uint_32 $3)
	$8 = (int_64)8
	$7 = (int_64)0
	
.LOOP $label$5:
	$2 = *($5)
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$8 & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)8)
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert([1], [656])
	$2 = [0]
	$6 = (uint_64)$7 >> (uint_64)(int_64)8
	$8 = $6)
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [720])
	$5 = [0]
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	$8 = *($0)
	*($9) = $8
	*($9 + [8]) = $8
	*($9 + [24]) = (int_64)0
	*($9 + [36]) = [0]
	$2 = CALL db_lowerbound_i64($8, $8, (int_64)-5918709162908319744, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $13($9, $2)
	
.LOOP $label$14:
	if ( ((int_64)*($2 + [24]) != (int_64)$1) ){ goto $label$15 }
	if ( ((int_64)(uint_64)*(($2 + [16])) >> (uint_64)(int_64)8) == (int_64)$6) ){ goto $label$13 }
	
.LABEL $label$15
	CALL eosio_assert([1], [1008])
	$2 = CALL db_next_i64(*($2 + [36]), ($9 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$16 }
	$2 = CALL $13($9, $2)
	goto $label$14 
	
.LABEL $label$16
	$5 = [0]
	goto $label$12 
	
.LABEL $label$13
	$5 = [1]
	CALL eosio_assert([1], [2112])
	CALL eosio_assert([1], [1008])
	$4 = CALL db_next_i64(*($2 + [36]), ($9 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	CALL $13($9, $4)
	
.LABEL $label$17
	CALL $73($9, $2)
	
.LABEL $label$12
	CALL eosio_assert($5, [3040])
	$4 = *($9 + [24])
	if ( ($4 == 0) ){ goto $label$18 }
	$3 = ($9 + [28])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	CALL $102($5)
	
.LABEL $label$22
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($9 + [24]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $4
	
.LABEL $label$19
	*($3) = $4
	CALL $102($2)
	
.LABEL $label$18
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [2192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [2240])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2304])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $102($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $102($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
	$7 = *(($1 + [40]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5918709162908319744, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN5eosio5unico10setcharityEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $2
	CALL require_auth(*($0))
	CALL _ZN5eosio5unico12check_pausedEv($0)
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$4 = *($0)
	*($7 + [16]) = $4
	*($7 + [24]) = $4
	*($7 + [52]) = [0]
	$0 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-3108457608830881792, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($7 + [16]), $6)
	CALL eosio_assert(((int_32)*($0 + [88]) == (int_32)($7 + [16])), [1040])
	$2 = *($7 + [56])
	
.LABEL $label$1
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [1136])
	if ( (int_64)($2 == 0) ){ goto $label$2 }
	CALL eosio_assert(CALL $fimport$18($2), [560])
	
.LABEL $label$2
	*($7 + [8]) = ($7 + [56])
	CALL eosio_assert($6, [1408])
	CALL $71(($7 + [16]), $0, ($7 + [8]))
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($7 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($0 + [44])))
	
.LABEL $label$8
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*(($0 + [16])))
	
.LABEL $label$9
	CALL $102($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	$0 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $102($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [1456])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1504])
	*($1 + [48]) = *(*($2))
	$3 = ($1 + [24])
	*(($2 = $15) + [16]) = *($3)
	$4 = *($1)
	CALL eosio_assert([1], [1680])
	*($2 + [24]) = [0]
	*($2) = ($2 + [24])
	$6 = ($1 + [8])
	*($2 + [36]) = $6
	*($2 + [32]) = $1
	*($2 + [40]) = $3
	$7 = ($1 + [32])
	*($2 + [44]) = $7
	$8 = ($1 + [33])
	*($2 + [48]) = $8
	$9 = ($1 + [34])
	*($2 + [52]) = $9
	$10 = ($1 + [35])
	*($2 + [56]) = $10
	$11 = ($1 + [36])
	*($2 + [60]) = $11
	$5 = ($1 + [48])
	*($2 + [64]) = $5
	$12 = ($1 + [56])
	*($2 + [68]) = $12
	$13 = ($1 + [72])
	*($2 + [72]) = $13
	CALL $19(($2 + [32]), $2)
	$14 = *($2 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$15 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$15 = ($15 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$1
	*($2 + [4]) = $15
	*($2) = $15
	*($2 + [8]) = ($15 + $14)
	*($2 + [24]) = $2
	*($2 + [36]) = $6
	*($2 + [40]) = $3
	*($2 + [44]) = $7
	*($2 + [48]) = $8
	*($2 + [52]) = $9
	*($2 + [56]) = $10
	*($2 + [32]) = $1
	*($2 + [60]) = $11
	*($2 + [64]) = $5
	*($2 + [68]) = $12
	*($2 + [72]) = $13
	CALL $20(($2 + [32]), ($2 + [24]))
	CALL db_update_i64(*($1 + [92]), (int_64)0, $15, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($15)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($2 + [32]) = *($3)
	if ( (CALL memcmp(($2 + [16]), ($2 + [32]), [8]) == 0) ){ goto $label$5 }
	$15 = ($1 + [96])
	$1 = *($15)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3108457608830881792, ($2 + [24]), $4)
	*($15) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, (int_64)0, ($2 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [592])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $101([40])) + [24]) = $1
	CALL $99(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $102($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [112])
	*([0] + [4]) = $2
	*(($3 = $2) + [108]) = $0
	*($3 + [96]) = *($1)
	*($3 + [100]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $95(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [96])
	*($3 + [8]) = ($3 + [108])
	CALL $96(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*(($3 + [84])))
	
.LABEL $label$6
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($3 + [48])))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [112])
	return [1]
}

void .FUNC _ZNK5eosio5unico14name_to_stringEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = $2
	CALL $58($0, ($3 + [8]))
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($5 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [656])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [720])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [60]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [24])
	*($6 + [20]) = ($0 + [32])
	*($6 + [24]) = ($0 + [48])
	CALL $41(($6 + [8]), $6)
	$4 = *(*($2 + [8]))
	*($0 + [68]) = [-1]
	*($0 + [64]) = $4
	*(($0 + [72])) = [-1]
	*(($0 + [76])) = [-1]
	*([0] + [4]) = ($6 + [32])
	return $0
}

void .FUNC _ZN5eosio5unico12check_marketEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	*($6 + [24]) = (int_64)0
	*(($6 + [38])) = [0]
	*($6 + [36]) = [0]
	$0 = CALL db_lowerbound_i64($4, $4, (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $42($6, $0)
	
.LOOP $label$2:
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($0 + [48]) != (int_32)[0]), [1936])
	
.LABEL $label$3
	CALL eosio_assert([1], [1008])
	$0 = CALL db_next_i64(*($0 + [56]), ($6 + [40]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $42($6, $0)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $102($3)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($5) = $2
	CALL $102($0)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [944])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $101([80])
	$6 = CALL $39($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [64])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($4 + [56])))
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($4 + [16])))
	
.LABEL $label$11
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [64])
	*([0] + [4]) = $2
	*(($4 = $2) + [44]) = $0
	*($4 + [32]) = *($1)
	*($4 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [28])) = [0]
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [20 align=4]) = (int_64)0
	*($4 + [56]) = ($1 + $0)
	*($4 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [976])
	CALL memcpy(($4 + [8]), $1, [8])
	CALL eosio_assert(((int_32)$0 != (int_32)[8]), [976])
	CALL memcpy((($4 + [8]) + [8]), ($1 + [8]), [1])
	*($4 + [52]) = ($1 + [9])
	CALL $91(($4 + [48]), ($4 + [20]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [52]) = ($4 + [32])
	*($4 + [48]) = ($4 + [44])
	CALL $92(($4 + [48]), ($4 + [8]))
	$2 = *($4 + [20])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($4 + [24])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *(($4 + [20]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $102($1)
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [64])
	return [1]
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [112])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*((($11 + [24]) + [24])) = (int_64)1398362884
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = (int_64)0
	*($11 + [40]) = (int_64)0
	CALL eosio_assert([1], [656])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [720])
	*($11 + [56]) = (int_64)0
	*($11 + [100]) = $7
	*($11 + [96]) = $7
	*($11 + [104]) = ($7 + $3)
	*($11 + [64]) = ($11 + [96])
	*($11 + [80]) = ($11 + [24])
	CALL $90(($11 + [80]), ($11 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	$8 = *((($11 + [24]) + [8]))
	*(($11 + [76])) = *(($11 + [52]))
	*(($1 = (($11 + [64]) + [8]))) = *(($11 + [48]))
	$4 = *($11 + [24])
	*($11 + [64]) = *($11 + [40])
	*($11 + [68]) = *(($11 + [44]))
	$5 = *(($11 + [56]))
	*((($11 + [80]) + [8])) = *($1)
	*($11 + [80]) = *($11 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [96]) + [8])) = $6
	*((($11 + [8]) + [8])) = $6
	$6 = *($11 + [80])
	*($11 + [96]) = $6
	*($11 + [8]) = $6
	CALL void $1((int_32 $4), (int_64 $8), (int_64 ($11 + [8])), (int_32 $5), (int_64 $10))
	*([0] + [4]) = ($11 + [112])
	return [1]
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [1456])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1504])
	$3 = ($1 + [24])
	*(($16 = $15) + [16]) = *($3)
	$4 = *($1)
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [80]))), [1568])
	$14 = ((int_64)*($1 + [72]) + (int_64)*($2))
	*($1 + [72]) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1616])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [1648])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1680])
	*($16 + [24]) = [0]
	*($16) = ($16 + [24])
	$5 = ($1 + [8])
	*($16 + [36]) = $5
	*($16 + [32]) = $1
	*($16 + [40]) = $3
	$6 = ($1 + [32])
	*($16 + [44]) = $6
	$7 = ($1 + [33])
	*($16 + [48]) = $7
	$8 = ($1 + [34])
	*($16 + [52]) = $8
	$9 = ($1 + [35])
	*($16 + [56]) = $9
	$10 = ($1 + [36])
	*($16 + [60]) = $10
	$11 = ($1 + [48])
	*($16 + [64]) = $11
	$12 = ($1 + [56])
	*($16 + [68]) = $12
	$13 = ($1 + [72])
	*($16 + [72]) = $13
	CALL $19(($16 + [32]), $16)
	$2 = *($16 + [24])
	if ( ($2 <= [513]) ){ goto $label$2 }
	$15 = CALL malloc($2)
	goto $label$1 
	
.LABEL $label$2
	$15 = ($15 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$1
	*($16 + [4]) = $15
	*($16) = $15
	*($16 + [8]) = ($15 + $2)
	*($16 + [24]) = $16
	*($16 + [36]) = $5
	*($16 + [40]) = $3
	*($16 + [44]) = $6
	*($16 + [48]) = $7
	*($16 + [52]) = $8
	*($16 + [56]) = $9
	*($16 + [32]) = $1
	*($16 + [60]) = $10
	*($16 + [64]) = $11
	*($16 + [68]) = $12
	*($16 + [72]) = $13
	CALL $20(($16 + [32]), ($16 + [24]))
	CALL db_update_i64(*($1 + [92]), (int_64)0, $15, $2)
	if ( ($2 <= [513]) ){ goto $label$3 }
	CALL free($15)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($16 + [32]) = *($3)
	if ( (CALL memcmp(($16 + [16]), ($16 + [32]), [8]) == 0) ){ goto $label$5 }
	$15 = ($1 + [96])
	$1 = *($15)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3108457608830881792, ($16 + [24]), $4)
	*($15) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, (int_64)0, ($16 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($16 + [80])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [816])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [816])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [816])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$4 = *($0)
	$6 = *($1)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($6 + [4]), $4, [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$2 = *($0)
	$6 = *($1)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [816])
	CALL memcpy(*($6 + [4]), ($2 + [8]), [8])
	$0 = (*($6 + [4]) + [8])
	*($6 + [4]) = $0
	CALL eosio_assert(((int_32)(*($6 + [8]) - $0) > (int_32)[7]), [816])
	CALL memcpy(*($6 + [4]), ($2 + [16]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*(($2 + [28])) - *($2 + [24])) / (int_32)[12]))
	$3 = *($1)
	$0 = *($3 + [4])
	$6 = ($3 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $0) > (int_32)[0]), [816])
	CALL memcpy(*($6), ($8 + [15]), [1])
	$0 = (*($6) + [1])
	*($6) = $0
	if ( $5 ){ goto $label$1 }
	$0 = *(($2 + [28]))
	$6 = *(($2 + [24]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $21($3, $6)
	$6 = ($6 + [12])
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $21(*($1), ($2 + [36]))
	CALL $21(*($1), ($2 + [48]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [816])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [816])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $34(CALL $33($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}