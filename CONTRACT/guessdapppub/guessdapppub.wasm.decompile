(data (i32.const 8192) "Can\'t execute transfer action\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8231) "charge\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8329) "Invalid quantity\00")
(data (i32.const 8346) "Quantity must be positive\00stoul\00")
(data (i32.const 8378) "GUESS\00")
(data (i32.const 8384) "Only accepts GUESS for create fee\00stoull\00")
(data (i32.const 8425) "GUESS must be issued by tokendapppub, Don\'t cheat guys\00")
(data (i32.const 8480) "Transfered GUESS create fee insufficient\00")
(data (i32.const 8521) "Invalid stake quantity\00")
(data (i32.const 8544) "Guess not found for current trx\00")
(data (i32.const 8576) "Invalid airdrop quantity\00")
(data (i32.const 8601) "Invalid memo\00")
(data (i32.const 8614) "unable to find key\00")
(data (i32.const 8633) "Approved or canceled guess can\'t add airdrop\00")
(data (i32.const 8678) "Airdrop token contract mismatch\00%llu\00")
(data (i32.const 8715) "Airdrop token symbol mismatch\00")
(data (i32.const 8745) "Approved or canceled guess can\'t add stake\00")
(data (i32.const 8788) "Staked token contract mismatch\00")
(data (i32.const 8819) "Staked token symbol mismatch\00")
(data (i32.const 8848) "Transfered token symbol mismatch\00")
(data (i32.const 8881) "Transfered token contract mismatch\00")
(data (i32.const 8916) "Guess can\'t bet due to staked Insufficient, please contract creator\00")
(data (i32.const 8984) "Transfered quantity after fee must greater than zero\00")
(data (i32.const 9037) "End time expired\00")
(data (i32.const 9054) "End time must greater than start time\00")
(data (i32.const 9092) "Revel time must greater than end time\00: no conversion\00")
(data (i32.const 9146) "Discount from rate must greater than zero\00: out of range\00")
(data (i32.const 9203) "Discount from rate must smaller than or equals to 100\00")
(data (i32.const 9257) "Discount until amount must greater than zero\00")
(data (i32.const 9302) "Guess not start yet\00")
(data (i32.const 9322) "Guess not ended\00")
(data (i32.const 9338) "Canceled guess can\'t reveal\00")
(data (i32.const 9366) "Guess already have a approved result\00")
(data (i32.const 9403) "Guess status error, can\'t reveal\00")
(data (i32.const 9436) "Canceled guess can\'t approve\00")
(data (i32.const 9465) "Guess no result\00")
(data (i32.const 9481) "result mismatch\00")
(data (i32.const 9497) "Already approved\00")
(data (i32.const 9514) "Guess status error, can\'t approve\00")
(data (i32.const 9548) "\01")
(data (i32.const 9549) "No bet for guess\00")
(data (i32.const 9566) "Invalid referrer account\00")
(data (i32.const 9591) "referrer already existed\00")
(data (i32.const 9616) "referrer not existed\00")
(data (i32.const 9637) "Invalid staff account\00")
(data (i32.const 9659) "staff already existed\00")
(data (i32.const 9681) "staff not existed\00")
(data (i32.const 9699) "Approved guess can\'t cancel\00")
(data (i32.const 9727) "Already canceled\00")
(data (i32.const 9744) "Guess status error, can\'t cancel\00")
(data (i32.const 9777) "\02")
(data (i32.const 9778) "Only canceled guess can refund\00")
(data (i32.const 9809) "No refundable bet for guess\00")
(data (i32.const 9837) "Already withdrawed, can\'t refund\00")
(data (i32.const 9870) "Already airdroped, can\'t refund\00")
(data (i32.const 9902) "guess id:\00")
(data (i32.const 9912) " player: \00")
(data (i32.const 9922) " refund\00")
(data (i32.const 9930) "Erase bet error\00")
(data (i32.const 9946) "No required auth\00")
(data (i32.const 9963) "Only approved or canceled guess can unstake\00")
(data (i32.const 10007) "Unstake overdraw\00")
(data (i32.const 10024) " creator: \00")
(data (i32.const 10035) " unstake\00")
(data (i32.const 10044) " refund airdrop\00")
(data (i32.const 10060) "invalid memo\00")
(data (i32.const 10073) "No guess id\00")
(data (i32.const 10085) "No option id\00")
(data (i32.const 10098) "invalid first pos\00")
(data (i32.const 10116) "parse memo error\00")
(data (i32.const 10133) "string is too long to be a valid name\00")
(data (i32.const 10171) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10238) "character is not in allowed character set for names\00")
(data (i32.const 10290) "No start time\00")
(data (i32.const 10304) "No end time\00")
(data (i32.const 10316) "No reveal time\00")
(data (i32.const 10331) "No discount from rate\00")
(data (i32.const 10353) "No discount until amount\00")
(data (i32.const 10378) "No options\00")
(data (i32.const 10389) "-\00")
(data (i32.const 10391) "string is too long to be a valid symbol_code\00")
(data (i32.const 10436) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10489) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10548) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10597) "invalid symbol name\00")
(data (i32.const 10617) "Guess not found\00")
(data (i32.const 10633) "Guess already ended\00")
(data (i32.const 10654) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10705) "error reading iterator\00")
(data (i32.const 10728) "read\00")
(data (i32.const 10733) "cannot create objects in table of another contract\00")
(data (i32.const 10784) "write\00")
(data (i32.const 10790) "cannot pass end iterator to modify\00")
(data (i32.const 10825) "object passed to modify is not in multi_index\00")
(data (i32.const 10871) "cannot modify objects in table of another contract\00")
(data (i32.const 10922) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10981) "attempt to add asset with different symbol\00")
(data (i32.const 11024) "addition underflow\00")
(data (i32.const 11043) "addition overflow\00")
(data (i32.const 11061) " referral reward!\00")
(data (i32.const 11079) " bet fee\00")
(data (i32.const 11088) "attempt to subtract asset with different symbol\00")
(data (i32.const 11136) "subtraction underflow\00")
(data (i32.const 11158) "subtraction overflow\00")
(data (i32.const 11179) "Option not found\00")
(data (i32.const 11196) "Options can not be empty\00")
(data (i32.const 11221) "Option must be greater than zero\00")
(data (i32.const 11254) "Options has duplicates\00")
(data (i32.const 11277) "Canceled guess can\'t withdraw, please contract creator\00")
(data (i32.const 11332) "Guess result preparing\00")
(data (i32.const 11355) "Already withdrawed\00")
(data (i32.const 11374) "No win bet for guess\00")
(data (i32.const 11395) "Not held withdrawed token, can\'t withdraw\00")
(data (i32.const 11437) " winner!\00")
(data (i32.const 11446) " withdraw fee\00")
(data (i32.const 11460) "Canceled guess can\'t airdrop, please contract creator\00")
(data (i32.const 11514) "Already airdroped\00")
(data (i32.const 11532) "Not held airdroped token, can\'t airdrop\00")
(data (i32.const 11572) " airdrop\00")
(data (i32.const 11584) "D-\00\00")
(data (i32.const 11588) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 11621) "cannot increment end iterator\00")
(data (i32.const 11651) "get\00")
(data (i32.const 11655) "cannot pass end iterator to erase\00")
(data (i32.const 11689) "object passed to erase is not in multi_index\00")
(data (i32.const 11734) "cannot erase objects in table of another contract\00")
(data (i32.const 11784) "attempt to remove object that was not in multi_index\00")
(data (i32.const 20256) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 20272) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 20288) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 20304) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 20384) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "read_transaction" (func $fimport$0 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$1 (param i32 i32 i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$3 (param i32)))
(import "env" "action_data_size" (func $fimport$4 (result i32)))
(import "env" "read_action_data" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "has_auth" (func $fimport$9 (param i64) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$18 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$25 (param i32 i64 i32)))
(import "env" "db_idx64_store" (func $fimport$26 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "db_idx64_next" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$29 (param i32)))
(import "env" "__lttf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$42 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$43 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$46 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$48 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$49 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$50 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $161))
(export "_Znwj" (func $159))
(export "_Znaj" (func $160))
(export "_ZdaPv" (func $162))
(export "_ZnwjSt11align_val_t" (func $163))
(export "_ZnajSt11align_val_t" (func $164))
(export "_ZdlPvSt11align_val_t" (func $165))
(export "_ZdaPvSt11align_val_t" (func $166))
(table $0 23 23 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $12 $14 $15 $16 $18 $19 $20 $21 $22 $24 $25 $27 $28 $29 $31 $198 $200)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20641))
(global $global$2 i32 (i32.const 20641))


void .FUNC $174 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL $42($0, $1, $2)
	$4 = [0]
	*((($3 = CALL memcpy($3, ($5 = CALL $43(($0 + [32]), *($1), [8614])), [120])) + [128])) = [0]
	*($3 + [120]) = (int_64)0
	$6 = (*(($5 + [124])) - *($5 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$1 }
	$4 = CALL _Znwj($6)
	*(($3 + [120])) = $4
	*(($3 + [128])) = ($4 + ((int_32)$7 * (int_32)[72]))
	*(($7 = ($3 + [124]))) = $4
	$8 = *(($5 + [120]))
	$6 = (*(($5 + [124])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $8, $6)
	*($7) = ($4 + ((int_32)((uint_32)$6 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*(($3 + [145])) = *(($5 + [145]))
	*(($3 + [140])) = *(($5 + [140]))
	*($3 + [132 align=4]) = *($5 + [132 align=4])
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$4 }
	CALL require_auth(*($0))
	goto $label$3 
	
.LABEL $label$4
	CALL require_auth(*($3 + [144]))
	
.LABEL $label$3
	$5 = *($3 + [136])
	CALL eosio_assert(((int_32)$5 != (int_32)[2]), [9436])
	$6 = *(($3 + [132]))
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9465])
	CALL eosio_assert(((int_32)$6 == (int_32)*($2)), [9481])
	CALL eosio_assert(((int_32)$5 != (int_32)[1]), [9497])
	CALL eosio_assert(($5 == 0), [9514])
	CALL $45($0, $1, [9548])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($3 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $189(($3 + [120]))
}

int_32 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $170($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $212($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $170($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $170($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10728])
	CALL memcpy(($4 + [192]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [10728])
	CALL memcpy((($4 + [192]) + [8]), ($2 + [8]), [4])
	*(($4 + [20])) = ($2 + [12])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$0 = *($4 + [192])
	*($4 + [212]) = *($4 + [200])
	*($4 + [216]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [216])), (int_32 ($4 + [212])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $218($2)
	
.LABEL $label$5
	CALL $33($4)
	$global$0 = ($4 + [224])
	return [1]
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $210(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [48]) = ($0 + [32])
	$0 = CALL read_transaction([0], [0])
	$5 = CALL $215($0)
	CALL read_transaction($5, $0)
	CALL sha256($5, $0, $4)
	*($4 + [40]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [1]) << (int_64)48) | (int_64)((int_64)*($4) << (int_64)56)) | (int_64)((int_64)*($4 + [2]) << (int_64)40)) | (int_64)((int_64)*($4 + [3]) << (int_64)32)) | (int_64)((int_64)*($4 + [4]) << (int_64)24)) | (int_64)((int_64)*($4 + [5]) << (int_64)16)) | (int_64)((int_64)*($4 + [6]) << (int_64)8)) + (int_64)*($4 + [7]))
	CALL $38(($4 + [56]), ($4 + [48]), ($4 + [40]))
	$5 = [0]
	$0 = *($4 + [60])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = ( $0 ? [0] : ((int_64)*($4 + [40]) == (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($0 + [17])) << (int_64)48) | (int_64)((int_64)*($0 + [16]) << (int_64)56)) | (int_64)((int_64)*(($0 + [18])) << (int_64)40)) | (int_64)((int_64)*(($0 + [19])) << (int_64)32)) | (int_64)((int_64)*(($0 + [20])) << (int_64)24)) | (int_64)((int_64)*(($0 + [21])) << (int_64)16)) | (int_64)((int_64)*(($0 + [22])) << (int_64)8)) + (int_64)*(($0 + [23])))) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8544])
	CALL require_auth(*($5 + [144]))
	$global$0 = ($4 + [64])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [288])
	$global$0 = $3
	*(($4 = $3) + [248]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [224])) = (int_64)0
	*(($4 + [240])) = [0]
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $5)
	CALL $68(($4 + [192]), ($4 + [208]))
	CALL $68(($4 + [192]), ($4 + [220]))
	CALL $68(($4 + [192]), (($4 + [208]) + [24]))
	*(($3 = (($4 + [256]) + [8]))) = *($4 + [200])
	*($4 + [256]) = *($4 + [192])
	$3 = *($3)
	*((($4 + [272]) + [8])) = $3
	*(($4 + [24])) = $3
	*($4) = $0
	*($4 + [8]) = $1
	$1 = *($4 + [256])
	*($4 + [16]) = $1
	*($4 + [272]) = $1
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [276]) = ($4 + [248])
	*($4 + [272]) = $4
	CALL $69(($4 + [272]), ($4 + [208]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $218($2)
	
.LABEL $label$4
	CALL $33($4)
	if ( (*($4 + [232]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [220]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [240])))
	if ( ((*($4 + [220]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [228])))
	$2 = [1]
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [208]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [288])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [216])))
	$global$0 = ($4 + [288])
	return $2
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = *(($1 + [124]))
	$2 = *($1 + [120])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$3 = *(*($0))
	
.LOOP $label$2:
	if ( ((int_32)*($2) == (int_32)$3) ){ goto $label$1 }
	$2 = ($2 + [72])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	$2 = $1
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)$1), [11179])
	*($2 + [64]) = ((int_64)*($2 + [64]) + (int_64)*(*($0 + [4])))
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($2 + [16]))), [10981])
	$4 = ((int_64)*($2 + [8]) + (int_64)*($1))
	*($2 + [8]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [11043])
	$1 = *($0 + [12])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($2 + [40]))), [10981])
	$4 = ((int_64)*($2 + [32]) + (int_64)*($1))
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [11043])
	*($2 + [56]) = ((int_64)*($2 + [56]) + (int_64)*(*($0 + [16])))
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [208]) + [24]))) = (int_64)0
	*((($4 + [208]) + [40])) = [0]
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [288]) = ($4 + [192])
	*($4) = ($4 + [208])
	CALL $32($4, ($4 + [288]))
	*(($3 = (($4 + [272]) + [8]))) = *($4 + [200])
	*($4 + [272]) = *($4 + [192])
	$10 = *($3)
	*(($9 = (($4 + [288]) + [8]))) = $10
	*(($4 + [24])) = $10
	*($4) = $0
	*($4 + [8]) = $1
	$1 = *($4 + [272])
	*($4 + [16]) = $1
	*($4 + [288]) = $1
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($3) = *($8)
	*($4 + [272]) = *($4 + [224])
	$0 = *($4 + [216])
	$1 = *($4 + [208])
	$8 = CALL $168(($4 + [256]), ($4 + [240]))
	*($9) = *($3)
	*($4 + [312]) = $1
	*($4 + [304]) = $0
	*($4 + [288]) = *($4 + [272])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [312])), (int_32 ($4 + [304])), (int_32 ($4 + [288])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $218($2)
	
.LABEL $label$6
	CALL $33($4)
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$7
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $189 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $188 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = *($1)
	*($3 + [16]) = $5
	$1 = [0]
	$2 = CALL db_find_i64($4, $5, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $79(($3 + [8]), $2)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($3 + [8])), [10654])
	
.LABEL $label$1
	$2 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($2, [9549])
	CALL eosio_assert(((int_32)*($1 + [20]) ^ (int_32)[1]), [11355])
	$4 = *($0)
	CALL eosio_assert($2, [10790])
	CALL $107(($3 + [8]), $1, $4, $3)
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$2 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($0 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$6 = *($1)
	*($5 + [8]) = $6
	$7 = *($2)
	*($5 + [16]) = $7
	$2 = [0]
	$3 = CALL db_find_i64($6, $7, (int_64)4229880090286096384, *($3))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $79(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($5 + [8])), [10654])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), $4)
	*(($0 + [12])) = (int_64)0
	*($0 + [8]) = [0]
	*($0) = *($2)
	$4 = (*(($2 + [12])) - *($2 + [8]))
	if ( ($4 == 0) ){ goto $label$3 }
	$3 = int_32($4 >> [6])
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$2 }
	$4 = CALL _Znwj($4)
	*(($0 + [8])) = $4
	*(($0 + [16])) = ($4 + ($3 << [6]))
	*(($3 = ($0 + [12]))) = $4
	$8 = *(($2 + [8]))
	$1 = (*(($2 + [12])) - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $8, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$3
	*($0 + [20]) = *($2 + [20])
	$3 = *($5 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($5 + [36])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($0 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($5 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $3
	
.LABEL $label$5
	*($1) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($5 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $189(($0 + [8]))
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($6 + [156])) == (int_32)$0), [10654])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7391968480164052992, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $65($0, $4)
	CALL eosio_assert(((int_32)*($5 + [156]) == (int_32)$0), [10654])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL $46($0, $1)
	$4 = [0]
	*((($3 = CALL memcpy($3, ($0 = CALL $43(($0 + [32]), *($1), [8614])), [120])) + [128])) = [0]
	*($3 + [120]) = (int_64)0
	$1 = (*(($0 + [124])) - *($0 + [120]))
	$5 = ((int_32)$1 / (int_32)[72])
	if ( ($1 == 0) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[59652324]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($3 + [120])) = $1
	*(($3 + [128])) = ($1 + ((int_32)$5 * (int_32)[72]))
	*(($5 = ($3 + [124]))) = $1
	$6 = *(($0 + [120]))
	$4 = (*(($0 + [124])) - $6)
	if ( ((int_32)$4 <= (int_32)[0]) ){ goto $label$7 }
	CALL memcpy($1, $6, $4)
	*(($3 + [140])) = *(($0 + [140]))
	*(($3 + [145])) = *(($0 + [145]))
	$6 = ((int_32)((uint_32)$4 / (uint_32)[72]) * (int_32)[72])
	$7 = ($1 + $6)
	*($5) = $7
	*($3 + [132 align=4]) = *($0 + [132 align=4])
	if ( ($6 == 0) ){ goto $label$9 }
	$6 = ((int_32)((uint_32)$4 / (uint_32)[72]) * (int_32)[72])
	$4 = *($2)
	$0 = [0]
	
.LOOP $label$10:
	$5 = ($1 + $0)
	if ( ((int_32)*($5) == (int_32)$4) ){ goto $label$4 }
	$0 = ($0 + [72])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = $1
	goto $label$5 
	
.LABEL $label$8
	$7 = [0]
	$1 = [0]
	goto $label$6 
	
.LABEL $label$7
	$4 = $1
	$7 = $1
	
.LABEL $label$6
	*(($3 + [145])) = *(($0 + [145]))
	*(($3 + [140])) = *(($0 + [140]))
	*($3 + [132 align=4]) = *($0 + [132 align=4])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$7 != (int_32)$7), [11179])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = $1
	CALL eosio_assert(((int_32)$5 != (int_32)$7), [11179])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $189(($3 + [120]))
	
.LABEL $label$2
	*(($3 + [124])) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [160])
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$8 = ($global$0 - [208])
	$global$0 = $8
	CALL require_auth(*($1))
	CALL eosio_assert(((uint_32)*($4) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9037])
	CALL eosio_assert(((uint_32)*($4) > (uint_32)*($2)), [9054])
	CALL eosio_assert(((uint_32)*($3) > (uint_32)*($4)), [9092])
	*($8 + [184]) = [0]
	*($8 + [176]) = (int_64)0
	$9 = (*($7 + [4]) - *($7))
	if ( ($9 == 0) ){ goto $label$3 }
	$10 = int_32($9 >> [2])
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$9 = CALL _Znwj($9)
	*(($8 + [184])) = ($9 + ($10 << [2]))
	*($8 + [176]) = $9
	*($8 + [180]) = $9
	$11 = *($7)
	$10 = (*(($7 + [4])) - $11)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($9, $11, $10)
	*($8 + [180]) = ($9 + $10)
	
.LABEL $label$3
	CALL $92($0, ($8 + [176]))
	$9 = *($8 + [176])
	if ( ($9 == 0) ){ goto $label$4 }
	*($8 + [180]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$4
	$9 = [0]
	CALL eosio_assert(((int_32)*($5) != (int_32)[0]), [9146])
	CALL eosio_assert((*($5) <= [101]), [9203])
	CALL eosio_assert(((int_64)*($6) != (int_64)0), [9257])
	*($8 + [168]) = [0]
	*($8 + [160]) = (int_64)0
	$12 = *(($7 + [4]))
	$11 = *($7)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$6 }
	$13 = ($8 + [16])
	$14 = ($8 + [40])
	$15 = ($8 + [32])
	$16 = ($8 + [48])
	$17 = ($8 + [56])
	$18 = ($8 + [64])
	
.LOOP $label$7:
	*($8) = *($11)
	$7 = CALL $212([8378])
	if ( ($7 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [10391])
	goto $label$9 
	
.LABEL $label$10
	if ( $7 ){ goto $label$9 }
	$19 = (int_64)0
	goto $label$8 
	
.LABEL $label$9
	$20 = (int_64)0
	
.LOOP $label$11:
	$9 = *(($7 + [8377]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$12
	$20 = ((int_64)((int_64)$20 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$11 }
	$19 = ((int_64)$20 << (int_64)8)
	
.LABEL $label$8
	CALL eosio_assert([1], [10548])
	$20 = (uint_64)$19 >> (uint_64)(int_64)8)
	$21 = ((int_64)$19 | (int_64)4)
	$7 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$19 = (uint_64)$20 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$20 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$20 = $19
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$20 = $19
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$20 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$17 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	
.LABEL $label$13
	CALL eosio_assert($9, [10597])
	*($13) = $21
	*(($8 + [8])) = (int_64)0
	*(($8 + [24])) = (int_64)-3665743571254938512
	$7 = CALL $212([8378])
	if ( ($7 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [10391])
	goto $label$19 
	
.LABEL $label$20
	if ( $7 ){ goto $label$19 }
	$19 = (int_64)0
	goto $label$18 
	
.LABEL $label$19
	$20 = (int_64)0
	
.LOOP $label$21:
	$9 = *(($7 + [8377]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$22
	$20 = ((int_64)((int_64)$20 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$21 }
	$19 = ((int_64)$20 << (int_64)8)
	
.LABEL $label$18
	CALL eosio_assert([1], [10548])
	$20 = (uint_64)$19 >> (uint_64)(int_64)8)
	$21 = ((int_64)$19 | (int_64)4)
	$7 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$19 = (uint_64)$20 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$20 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$20 = $19
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$20 = $19
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$20 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$27 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$9 = [0]
	
.LABEL $label$23
	CALL eosio_assert($9, [10597])
	*($14) = $21
	*($15) = (int_64)0
	*($16) = (int_64)-3665743571254938512
	*($17) = (int_64)0
	*($18) = (int_64)0
	$7 = *($8 + [164])
	if ( ((uint_32)$7 >= (uint_32)*((($8 + [160]) + [8]))) ){ goto $label$29 }
	*($8 + [164]) = (CALL memcpy($7, $8, [72]) + [72])
	$11 = ($11 + [4])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$7 }
	goto $label$28 
	
.LABEL $label$29
	CALL $93(($8 + [160]), $8)
	$11 = ($11 + [4])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$7 }
	
.LABEL $label$28
	$9 = *($8 + [160])
	$7 = *($8 + [164])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	*(($8 + [40])) = (int_64)0
	*(($8 + [32])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	*(($8 + [80])) = (int_64)0
	*(($8 + [88])) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [48]) = *($2)
	*($8 + [52]) = *($3)
	*($8 + [56]) = *($4)
	*($8 + [60]) = *($5)
	*($8 + [64]) = *($6)
	*(($8 + [104])) = (int_64)0
	*(($8 + [112])) = (int_64)0
	*(($8 + [128])) = [0]
	*($8 + [96]) = (int_64)0
	*($8 + [120]) = (int_64)0
	$7 = ($7 - $9)
	$9 = ((int_32)$7 / (int_32)[72])
	if ( ($7 == 0) ){ goto $label$30 }
	if ( ((uint_32)$9 >= (uint_32)[59652324]) ){ goto $label$1 }
	$7 = CALL _Znwj($7)
	*(($8 + [120])) = $7
	*(($10 = ($8 + [124]))) = $7
	*(($8 + [128])) = ($7 + ((int_32)$9 * (int_32)[72]))
	$11 = *($8 + [160])
	$9 = (*($8 + [164]) - $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$30 }
	CALL memcpy($7, $11, $9)
	*($10) = (*($10) + ((int_32)((uint_32)$9 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$30
	*($8 + [136]) = [0]
	*($8 + [132]) = [0]
	*($8 + [152]) = [0]
	*($8 + [144]) = *($1)
	$20 = *($0)
	*($8 + [204]) = $0
	*($8 + [200]) = $8
	CALL $94(($8 + [192]), ($0 + [32]), $20, ($8 + [200]))
	$7 = *($8 + [120])
	if ( ($7 == 0) ){ goto $label$31 }
	*(($8 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$31
	$7 = *($8 + [160])
	if ( ($7 == 0) ){ goto $label$32 }
	*($8 + [164]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$global$0 = ($8 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $189(($8 + [176]))
	
.LABEL $label$1
	CALL $189(($8 + [120]))
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10728])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $61(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = CALL $43(($0 + [32]), *($2), [8614])
	CALL memcpy(($3 + [48]), $4, [120])
	*(($3 + [176])) = [0]
	*($3 + [168]) = (int_64)0
	$5 = (*(($4 + [124])) - *($4 + [120]))
	$6 = ((int_32)$5 / (int_32)[72])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[59652324]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*((($3 + [48]) + [120])) = $5
	*(($3 + [176])) = ($5 + ((int_32)$6 * (int_32)[72]))
	*(($7 = (($3 + [48]) + [124]))) = $5
	$8 = *(($4 + [120]))
	$6 = (*(($4 + [124])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $8, $6)
	*($7) = ($5 + ((int_32)((uint_32)$6 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*((($3 + [48]) + [145])) = *(($4 + [145]))
	*((($3 + [48]) + [140])) = *(($4 + [140]))
	*($3 + [180 align=4]) = *($4 + [132 align=4])
	CALL eosio_assert((*($3 + [96]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9302])
	CALL eosio_assert((*($3 + [104]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9322])
	$4 = *($3 + [184])
	CALL eosio_assert(((int_32)$4 != (int_32)[2]), [11277])
	CALL eosio_assert(((int_32)*($3 + [180]) != (int_32)[0]), [9465])
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [11332])
	CALL $48(($3 + [24]), $0, $1, $2, [9549])
	CALL eosio_assert(((int_32)*($3 + [44]) ^ (int_32)[1]), [11355])
	$2 = *(($3 + [36]))
	$4 = *($3 + [32])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	$5 = *(($3 + [180]))
	
.LOOP $label$4:
	if ( ((int_32)*($4) == (int_32)$5) ){ goto $label$3 }
	$4 = ($4 + [64])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$4 }
	$4 = $2
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 != (int_32)$2), [11374])
	*($3 + [23]) = [1]
	CALL $97($3, $0, $1, ($3 + [160]), ($3 + [152]), ($3 + [23]), [11395])
	$4 = *(($3 + [32]))
	if ( ($4 == 0) ){ goto $label$5 }
	*(($3 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($3 + [168])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [172])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $189((($3 + [48]) + [120]))
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [32])
	$3 = *($1)
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$3 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($6 + [156])) == (int_32)$2), [10654])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$1 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)7391968480164052992, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $65($2, $1)
	CALL eosio_assert(((int_32)*($6 + [156]) == (int_32)$2), [10654])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10617])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($0 + [32])
	$5 = *($1)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($7 + [-24])
	$8 = *($1)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$3 }
	$7 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [156])) == (int_32)$4), [10654])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$1 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7391968480164052992, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $65($4, $1)
	CALL eosio_assert(((int_32)*($8 + [156]) == (int_32)$4), [10654])
	
.LABEL $label$1
	$5 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10790])
	CALL $106($4, $8, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($0 + [32])
	$5 = *($1)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($7 + [-24])
	$8 = *($1)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$3 }
	$7 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [156])) == (int_32)$4), [10654])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$1 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7391968480164052992, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $65($4, $1)
	CALL eosio_assert(((int_32)*($8 + [156]) == (int_32)$4), [10654])
	
.LABEL $label$1
	$5 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10790])
	CALL $105($4, $8, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $167 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $218($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $213(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11840])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $213(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $218($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $212($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $170($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10728])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $212([9902])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [9902], $5)
	
.LABEL $label$2
	$7 = [0]
	*(($6 + $5)) = [0]
	CALL $185(($4 + [16]), *($3))
	$5 = *($4 + [16])
	$6 = ($5 & [1])
	CALL $176($0, ( *($4 + [24]) ? (($4 + [16]) | [1]) : $6 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $6 ))
	CALL $175($0, [9912])
	$8 = *($2)
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$8 }
	$6 = *([0] + [11584])
	
.LOOP $label$10:
	*((($4 + [35]) + ($5 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$7 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$9 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($4) = ($7 << [1])
	$6 = ($4 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$7 = $5
	goto $label$5 
	
.LABEL $label$7
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $7
	
.LABEL $label$6
	$2 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$11:
	*(($6 + $5)) = *((($4 + [35]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$7 = ($6 + $7)
	$5 = ($4 | [1])
	
.LABEL $label$5
	*($7) = [0]
	$7 = *($4)
	$6 = ($7 & [1])
	CALL $176($0, ( *($4 + [8]) ? $5 : $6 ), ( *($4 + [4]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	CALL $175($0, [11446])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$13
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $212([9902])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [9902], $5)
	
.LABEL $label$2
	$7 = [0]
	*(($6 + $5)) = [0]
	CALL $185(($4 + [16]), *($3))
	$5 = *($4 + [16])
	$6 = ($5 & [1])
	CALL $176($0, ( *($4 + [24]) ? (($4 + [16]) | [1]) : $6 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $6 ))
	CALL $175($0, [9912])
	$8 = *($2)
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$8 }
	$6 = *([0] + [11584])
	
.LOOP $label$10:
	*((($4 + [35]) + ($5 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$7 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$9 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($4) = ($7 << [1])
	$6 = ($4 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$7 = $5
	goto $label$5 
	
.LABEL $label$7
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $7
	
.LABEL $label$6
	$2 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$11:
	*(($6 + $5)) = *((($4 + [35]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$7 = ($6 + $7)
	$5 = ($4 | [1])
	
.LABEL $label$5
	*($7) = [0]
	$7 = *($4)
	$6 = ($7 & [1])
	CALL $176($0, ( *($4 + [8]) ? $5 : $6 ), ( *($4 + [4]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	CALL $175($0, [11437])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$13
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $72($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $100(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $72($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10784])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10784])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $120(CALL $119($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [224])
	$global$0 = $3
	$4 = CALL $43(($0 + [32]), *($2), [8614])
	CALL memcpy(($3 + [64]), $4, [120])
	$5 = [0]
	*(($3 + [192])) = [0]
	*($3 + [184]) = (int_64)0
	$6 = (*(($4 + [124])) - *($4 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$1 }
	$6 = CALL _Znwj($6)
	*((($3 + [64]) + [120])) = $6
	*(($3 + [192])) = ($6 + ((int_32)$7 * (int_32)[72]))
	*(($8 = (($3 + [64]) + [124]))) = $6
	$9 = *(($4 + [120]))
	$7 = (*(($4 + [124])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $9, $7)
	*($8) = ($6 + ((int_32)((uint_32)$7 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*((($3 + [64]) + [145])) = *(($4 + [145]))
	*((($3 + [64]) + [140])) = *(($4 + [140]))
	*($3 + [196 align=4]) = *($4 + [132 align=4])
	CALL eosio_assert((*($3 + [112]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9302])
	CALL eosio_assert((*($3 + [120]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9322])
	$4 = *($3 + [200])
	CALL eosio_assert(((int_32)$4 != (int_32)[2]), [11460])
	CALL eosio_assert(((int_32)*($3 + [196]) != (int_32)[0]), [9465])
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [11332])
	*((($3 + [24]) + [32])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$10 = *($0)
	*($3 + [24]) = $10
	$11 = *($1)
	*($3 + [32]) = $11
	$4 = CALL db_find_i64($10, $11, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $79(($3 + [24]), $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [24])), [10654])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9549])
	CALL eosio_assert(((int_32)*($5 + [21]) ^ (int_32)[1]), [11514])
	*($3 + [23]) = [1]
	CALL $97($3, $0, $1, ($3 + [152]), ($3 + [144]), ($3 + [23]), [11532])
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	$2 = ($3 + [52])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($0 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($3 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $1
	
.LABEL $label$5
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($3 + [184])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [188])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $189((($3 + [64]) + [120]))
}

int_64 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	$4 = (int_64)0
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($1)
	*($3 + [16]) = $6
	$2 = CALL db_find_i64($5, $6, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $79(($3 + [8]), $2)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($3 + [8])), [10654])
	$1 = *(($1 + [12]))
	$2 = *($1 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = (int_64)0
	
.LOOP $label$2:
	$4 = ((int_64)*(($2 + [56])) + (int_64)$4)
	$2 = ($2 + [64])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($3 + [36])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	$0 = *($1 + [8])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($1 + [12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($3 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $212([9902])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [9902], $5)
	
.LABEL $label$2
	$7 = [0]
	*(($6 + $5)) = [0]
	CALL $185(($4 + [16]), *($3))
	$5 = *($4 + [16])
	$6 = ($5 & [1])
	CALL $176($0, ( *($4 + [24]) ? (($4 + [16]) | [1]) : $6 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $6 ))
	CALL $175($0, [9912])
	$8 = *($2)
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$8 }
	$6 = *([0] + [11584])
	
.LOOP $label$10:
	*((($4 + [35]) + ($5 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$7 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$9 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($4) = ($7 << [1])
	$6 = ($4 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$7 = $5
	goto $label$5 
	
.LABEL $label$7
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $7
	
.LABEL $label$6
	$2 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$11:
	*(($6 + $5)) = *((($4 + [35]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$7 = ($6 + $7)
	$5 = ($4 | [1])
	
.LABEL $label$5
	*($7) = [0]
	$7 = *($4)
	$6 = ($7 & [1])
	CALL $176($0, ( *($4 + [8]) ? $5 : $6 ), ( *($4 + [4]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	CALL $175($0, [11572])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$13
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = *($1)
	*($3 + [16]) = $5
	$1 = [0]
	$2 = CALL db_find_i64($4, $5, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $79(($3 + [8]), $2)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($3 + [8])), [10654])
	
.LABEL $label$1
	$2 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($2, [9549])
	CALL eosio_assert(((int_32)*($1 + [21]) ^ (int_32)[1]), [11514])
	$4 = *($0)
	CALL eosio_assert($2, [10790])
	CALL $108(($3 + [8]), $1, $4, $3)
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$2 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($0 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $174($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10784])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10784])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [80])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [84])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $189($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($1, *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	
.LOOP $label$1:
	$5 = ($1 + [-8])
	$6 = ($1 + [-4])
	
.LOOP $label$6:
	$4 = $0
	$0 = ($1 - $4)
	$7 = int_32($0 >> [2])
	if ( ((uint_32)$7 <= (uint_32)[5]) ){ goto $label$45 }
	if ( ((int_32)$0 <= (int_32)[123]) ){ goto $label$44 }
	$8 = ($4 + (((int_32)$7 / (int_32)[2]) << [2]))
	if ( ((int_32)$0 < (int_32)[3997]) ){ goto $label$46 }
	$0 = (((int_32)$7 / (int_32)[4]) << [2])
	$9 = CALL $157($4, ($4 + $0), $8, ($8 + $0), $6, $2)
	goto $label$16 
	
.LABEL $label$46
	$0 = *($6)
	$10 = *($4)
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$49 }
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$48 }
	*($4) = $0
	*($6) = $10
	$9 = [1]
	$10 = *($8)
	$3 = *($4)
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$49
	$9 = [0]
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$16 }
	*($8) = $0
	*($6) = $7
	$9 = [1]
	$7 = *($4)
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$16 }
	*($4) = $0
	*($8) = $7
	goto $label$47 
	
.LABEL $label$48
	*($4) = $7
	*($8) = $10
	$9 = [1]
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$16 }
	*($8) = $0
	*($6) = $10
	
.LABEL $label$47
	$9 = [2]
	$10 = *($8)
	$3 = *($4)
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$45
	goto $label$30 
	
.LABEL $label$50
	$10 = *($4)
	$0 = ($1 + [-4])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$23 }
	*($4) = $7
	*($0) = $10
	return 
	
.LABEL $label$44
	$0 = *($4 + [8])
	$10 = *($4)
	$7 = *($4 + [4])
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$56 }
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$55 }
	*($4) = $0
	*(($4 + [8])) = $10
	goto $label$54 
	
.LABEL $label$56
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$52 }
	*(($4 + [8])) = $7
	*(($11 = ($4 + [4]))) = $0
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($11) = $10
	$12 = ($4 + [12])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$51 }
	goto $label$21 
	
.LABEL $label$55
	*($4) = $7
	*(($7 = ($4 + [4]))) = $10
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$52 }
	*(($4 + [8])) = $10
	*($7) = $0
	
.LABEL $label$54
	$7 = $10
	
.LABEL $label$53
	$12 = ($4 + [12])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$51 }
	goto $label$22 
	
.LABEL $label$52
	$7 = $0
	$12 = ($4 + [12])
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$20 }
	
.LABEL $label$51
	$6 = [8]
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)$7) ){ goto $label$31 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$43
	$10 = ($1 + [-4])
	$0 = *($10)
	$11 = *($4)
	$7 = *($4 + [4])
	if ( ((uint_32)$7 >= (uint_32)$11) ){ goto $label$40 }
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$38 }
	*($4) = $0
	*($10) = $11
	return 
	
.LABEL $label$42
	CALL $157($4, ($4 + [4]), ($4 + [8]), ($4 + [12]), ($1 + [-4]), $2)
	return 
	
.LABEL $label$41
	$11 = ($1 + [-4])
	$7 = *($4 + [8])
	$10 = *($4)
	$0 = *($4 + [4])
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$37 }
	*($4) = $7
	*(($4 + [8])) = $10
	goto $label$36 
	
.LABEL $label$40
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$26 }
	*(($11 = ($4 + [4]))) = $0
	*($10) = $7
	$7 = *($4)
	$0 = *($11)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$25 }
	*($4) = $0
	*($11) = $7
	return 
	
.LABEL $label$39
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$35 }
	*(($4 + [8])) = $0
	*(($12 = ($4 + [4]))) = $7
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$33 }
	*($4) = $7
	*($12) = $10
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$19 }
	goto $label$32 
	
.LABEL $label$38
	*($4) = $7
	*(($0 = ($4 + [4]))) = $11
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)$11) ){ goto $label$24 }
	*($0) = $7
	*($10) = $11
	return 
	
.LABEL $label$37
	*($4) = $0
	*(($0 = ($4 + [4]))) = $10
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$34 }
	*(($4 + [8])) = $10
	*($0) = $7
	
.LABEL $label$36
	$0 = $10
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$17 }
	goto $label$32 
	
.LABEL $label$35
	$0 = $7
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$18 }
	goto $label$32 
	
.LABEL $label$34
	$0 = $7
	
.LABEL $label$33
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$29 }
	
.LABEL $label$32
	*(($7 = ($4 + [8]))) = $12
	*($11) = $0
	$10 = ($4 + [4])
	$11 = *($10)
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$28 }
	*($7) = $11
	*($10) = $0
	$7 = *($4)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$27 }
	*($4) = $0
	*(($4 + [4])) = $7
	return $13
	
.LABEL $label$31
	$13 = [0]
	goto $label$3 
	
.LABEL $label$30
	$13 = [7]
	goto $label$3 
	
.LABEL $label$29
	$13 = [7]
	goto $label$3 
	
.LABEL $label$28
	$13 = [7]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$24
	$13 = [7]
	goto $label$3 
	
.LABEL $label$23
	$13 = [7]
	goto $label$3 
	
.LABEL $label$22
	$13 = [7]
	goto $label$3 
	
.LABEL $label$21
	$13 = [7]
	goto $label$3 
	
.LABEL $label$20
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$13 = [7]
	goto $label$3 
	
.LABEL $label$18
	$13 = [7]
	goto $label$3 
	
.LABEL $label$17
	$13 = [7]
	goto $label$3 
	
.LABEL $label$16
	$10 = *($8)
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = $6
	$3 = ($4 + [4])
	if ( ($3 <= $7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$0 = $5
	
.LOOP $label$57:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$7 = *($0)
	$11 = ($0 + [-4])
	$0 = $11
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$57 }
	*($4) = $7
	*(($7 = ($11 + [4]))) = $3
	$9 = ($9 + [1])
	$3 = ($4 + [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$11 }
	
.LABEL $label$13
	
.LOOP $label$58:
	$0 = ($3 + [-4])
	$10 = *($8)
	
.LOOP $label$59:
	$0 = ($0 + [4])
	$11 = *($0)
	if ( ($11 <= $10) ){ goto $label$59 }
	$3 = ($0 + [4])
	
.LOOP $label$60:
	$7 = ($7 + [-4])
	$12 = *($7)
	if ( ((uint_32)$12 >= (uint_32)$10) ){ goto $label$60 }
	if ( ((uint_32)$0 > (uint_32)$7) ){ goto $label$61 }
	*($0) = $12
	*($7) = $11
	$8 = ( $7 ? $8 : ((int_32)$8 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$58 
	
.LABEL $label$61
	$3 = $0
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$12 = ($4 + [4])
	$10 = *($6)
	if ( ($3 <= $10) ){ goto $label$66 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$65 }
	$12 = ($4 + [8])
	
.LOOP $label$68:
	$0 = ($12 + [-4])
	$7 = *($0)
	if ( ($3 <= $7) ){ goto $label$67 }
	$12 = ($12 + [4])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$68 }
	goto $label$64 
	
.LABEL $label$67
	*($0) = $10
	*($6) = $7
	
.LABEL $label$66
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$63 }
	
.LOOP $label$69:
	$0 = ($12 + [-4])
	$7 = *($4)
	
.LOOP $label$70:
	$0 = ($0 + [4])
	$10 = *($0)
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$70 }
	$12 = ($0 + [4])
	
.LOOP $label$71:
	$6 = ($6 + [-4])
	$11 = *($6)
	if ( ($7 <= $11) ){ goto $label$71 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$72 }
	*($0) = $11
	*($6) = $10
	goto $label$69 
	
.LABEL $label$72
	$7 = ([4] & [7])
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$62 }
	goto $label$4 
	
.LABEL $label$65
	$13 = [7]
	goto $label$3 
	
.LABEL $label$64
	$13 = [7]
	goto $label$3 
	
.LABEL $label$63
	$13 = [7]
	goto $label$3 
	
.LABEL $label$62
	$13 = [7]
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$10
	$7 = *($3)
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$9 }
	*($3) = $0
	*($8) = $7
	if ( ($9 + [1]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$8
	$7 = CALL $158($4, $3, $2)
	$0 = ($3 + [4])
	if ( CALL $158($0, $1, $2) ){ goto $label$5 }
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $156($4, $3, $2)
	$0 = ($3 + [4])
	goto $label$6 
	
.LABEL $label$5
	$1 = ( $1 ? $3 : $7 )
	$0 = $4
	$7 = (( [1] ? [2] : $7 ) & [7])
	if ( ((uint_32)$7 <= (uint_32)[4]) ){ goto $label$4 }
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $7) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$73:
	goto $label$81 
	
.LABEL $label$88
	$0 = $6
	$13 = [3]
	goto $label$73 
	
.LABEL $label$87
	*((($10 = ($4 + $0)) + [4])) = $7
	if ( ($0 == 0) ){ goto $label$75 }
	$13 = [4]
	goto $label$73 
	
.LABEL $label$86
	$0 = ($0 + [-4])
	$7 = *(($10 + [-4]))
	if ( ($11 <= $7) ){ goto $label$76 }
	$13 = [5]
	goto $label$73 
	
.LABEL $label$85
	$0 = (($4 + $0) + [4])
	goto $label$74 
	
.LABEL $label$84
	$0 = $4
	$13 = [6]
	goto $label$73 
	
.LABEL $label$83
	*($0) = $11
	$0 = ($12 + [4])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$77 }
	$13 = [1]
	goto $label$73 
	
.LABEL $label$82
	$6 = ($6 + [4])
	$7 = *($12)
	$12 = $0
	$11 = *($12)
	if ( ($11 <= $7) ){ goto $label$79 }
	$13 = [0]
	goto $label$73 
	
.LABEL $label$81
	$0 = ($12 + [4])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$78 }
	$13 = [7]
	goto $label$73 
	
.LABEL $label$80
	return 
	
.LABEL $label$79
	$13 = [2]
	goto $label$73 
	
.LABEL $label$78
	$13 = [1]
	goto $label$73 
	
.LABEL $label$77
	$13 = [7]
	goto $label$73 
	
.LABEL $label$76
	$13 = [3]
	goto $label$73 
	
.LABEL $label$75
	$13 = [8]
	goto $label$73 
	
.LABEL $label$74
	$13 = [6]
	goto $label$73 
	
.LABEL $label$2
	CALL $156(($3 + [4]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$7
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$8 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$5 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)$8) ){ goto $label$6 }
	*($0) = $6
	*($1) = $8
	$9 = [2]
	$7 = *($2)
	$8 = *($3)
	if ( ($8 <= $7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$6 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$7
	$7 = $8
	
.LABEL $label$6
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = $6
	$8 = *($3)
	if ( ($8 <= $7) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($3)
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2) = $8
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$11 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$10 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$11
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$1 }
	
.LABEL $label$2
	return $9
	
.LABEL $label$1
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$14 }
	*($2) = $7
	*($3) = $6
	$7 = *($1)
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$13 }
	*($1) = $3
	*($2) = $7
	$3 = *($0)
	$2 = *($1)
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$12 }
	*($0) = $2
	*($1) = $3
	return ($9 + [4])
	
.LABEL $label$14
	return ($9 + [1])
	
.LABEL $label$13
	return ($9 + [2])
	
.LABEL $label$12
	return ($9 + [3])
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = int_32(($1 - $0) >> [2])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$21 }
	goto $label$3 
	
.LABEL $label$22
	$4 = *($0)
	$3 = ($1 + [-4])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$3 }
	*($0) = $2
	*($3) = $4
	return [1]
	
.LABEL $label$21
	$3 = *($0 + [8])
	$4 = *($0)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$17 }
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$14 }
	*($0) = $3
	*(($0 + [8])) = $4
	goto $label$13 
	
.LABEL $label$20
	$4 = ($1 + [-4])
	$3 = *($4)
	$5 = *($0)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$16 }
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$9 }
	*($0) = $3
	*($4) = $5
	return [1]
	
.LABEL $label$19
	CALL $157($0, ($0 + [4]), ($0 + [8]), ($0 + [12]), ($1 + [-4]), $2)
	return [1]
	
.LABEL $label$18
	$5 = ($1 + [-4])
	$2 = *($0 + [8])
	$4 = *($0)
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$15 }
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [8])) = $4
	goto $label$7 
	
.LABEL $label$17
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$11 }
	*(($0 + [8])) = $2
	*(($5 = ($0 + [4]))) = $3
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$12 }
	*($0) = $3
	*($5) = $4
	$6 = ($0 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$16
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$3 }
	*(($5 = ($0 + [4]))) = $3
	*($4) = $2
	$2 = *($0)
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$3 }
	*($0) = $3
	*($5) = $2
	return [1]
	
.LABEL $label$15
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$5 }
	*(($0 + [8])) = $3
	*(($6 = ($0 + [4]))) = $2
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$6 }
	*($0) = $2
	*($6) = $4
	$4 = *($5)
	if ( ($4 <= $3) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$14
	*($0) = $2
	*(($2 = ($0 + [4]))) = $4
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$11 }
	*(($0 + [8])) = $4
	*($2) = $3
	
.LABEL $label$13
	$2 = $4
	
.LABEL $label$12
	$6 = ($0 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	$2 = $3
	$6 = ($0 + [12])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$10
	$7 = [0]
	$8 = [8]
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)$2) ){ goto $label$2 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$9
	*($0) = $2
	*(($3 = ($0 + [4]))) = $5
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$3 }
	*($3) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$8
	*($0) = $3
	*(($3 = ($0 + [4]))) = $4
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$5 }
	*(($0 + [8])) = $4
	*($3) = $2
	
.LABEL $label$7
	$3 = $4
	
.LABEL $label$6
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$3 = $2
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$4
	*(($2 = ($0 + [8]))) = $4
	*($5) = $3
	$4 = ($0 + [4])
	$5 = *($4)
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)$5) ){ goto $label$3 }
	*($2) = $5
	*($4) = $3
	$2 = *($0)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$3 }
	*($0) = $3
	*(($0 + [4])) = $2
	return [1]
	
.LABEL $label$3
	return [1]
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	
.LOOP $label$23:
	goto $label$34 
	
.LABEL $label$40
	$3 = $8
	$9 = [3]
	goto $label$23 
	
.LABEL $label$39
	*((($4 = ($0 + $3)) + [4])) = $2
	if ( ($3 == 0) ){ goto $label$24 }
	$9 = [4]
	goto $label$23 
	
.LABEL $label$38
	$3 = ($3 + [-4])
	$2 = *(($4 + [-4]))
	if ( ($5 <= $2) ){ goto $label$25 }
	$9 = [5]
	goto $label$23 
	
.LABEL $label$37
	*((($0 + $3) + [4])) = $5
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$36
	*($0) = $5
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$35
	$8 = ($8 + [4])
	$2 = *($6)
	$6 = $3
	$5 = *($6)
	if ( ($5 <= $2) ){ goto $label$30 }
	$9 = [0]
	goto $label$23 
	
.LABEL $label$34
	$3 = ($6 + [4])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$31 }
	$9 = [8]
	goto $label$23 
	
.LABEL $label$33
	return [1]
	
.LABEL $label$32
	return ((int_32)($6 + [4]) == (int_32)$1)
	
.LABEL $label$31
	$9 = [1]
	goto $label$23 
	
.LABEL $label$30
	$9 = [2]
	goto $label$23 
	
.LABEL $label$29
	$9 = [6]
	goto $label$23 
	
.LABEL $label$28
	$9 = [0]
	goto $label$23 
	
.LABEL $label$27
	$9 = [6]
	goto $label$23 
	
.LABEL $label$26
	$9 = [0]
	goto $label$23 
	
.LABEL $label$25
	$9 = [3]
	goto $label$23 
	
.LABEL $label$24
	$9 = [7]
	goto $label$23 
	$3
	return $9
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $215($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11840])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $215($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $179 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $211(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $212([8372])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8372], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $191())
	*(CALL $191()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $208($4, ($3 + [12]), $2)
	$5 = CALL $191()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $181($3)
	
.LABEL $label$1
	CALL $182($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $168(($2 + [32]), $1)
	$4 = CALL $168(($2 + [16]), ($1 + [12]))
	$1 = CALL $168($2, ($1 + [24]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL void $6((int_32 $3), (int_32 $4), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$6 }
	if ( (*($4) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $149($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $171($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $171($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $167($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [80]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [144]) = (int_64)0
	*($5 + [156]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [52])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [60])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [96])
	*($3 + [76]) = ($5 + [120])
	*($3 + [80]) = ($5 + [132])
	*($3 + [84]) = ($5 + [136])
	*($3 + [88]) = ($5 + [144])
	*($3 + [92]) = ($5 + [152])
	CALL $144(($3 + [40]), ($3 + [32]))
	*($5 + [164]) = [-1]
	*($5 + [160]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $132(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [120])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-4157748382292508672, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$2 = [1]
	$4 = ($0 + [112])
	$0 = CALL $40($4, $3)
	if ( CALL has_auth(*($0)) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [11621])
	$0 = CALL db_next_i64(*($0 + [12]), ($1 + [8]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $40($4, $0)
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$3 }
	$2 = [1]
	
.LABEL $label$2
	$global$0 = ($1 + [16])
	return $2
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return [0]
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($1 + [72]) = (int_64)0
	*(($4 = $3) + [24]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	$5 = *($1)
	CALL eosio_assert([1], [10922])
	$6 = ($1 + [120])
	$7 = ($1 + [16])
	$9 = *($1 + [120])
	$8 = *(($1 + [124]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[72]))
	$12 = [112]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($10 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $12) + [68])
	
.LABEL $label$2
	$8 = ($12 + [14])
	if ( ($8 <= [513]) ){ goto $label$4 }
	$12 = CALL $215($8)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($4 + [12]) = $12
	*($4 + [8]) = $12
	*($4 + [16]) = ($12 + $8)
	*($4 + [32]) = ($4 + [8])
	*($4 + [44]) = $7
	*($4 + [76]) = $6
	*($4 + [40]) = $1
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [52])
	*($4 + [56]) = ($1 + [56])
	*($4 + [60]) = ($1 + [60])
	*($4 + [64]) = ($1 + [64])
	*($4 + [68]) = ($1 + [72])
	*($4 + [72]) = ($1 + [96])
	*($4 + [80]) = ($1 + [132])
	*($4 + [84]) = ($1 + [136])
	*($4 + [88]) = ($1 + [144])
	*($4 + [92]) = ($1 + [152])
	CALL $128(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [160]), $2, $12, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL $218($12)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [40]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*(($1 + [16])) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	if ( (CALL $211(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$7 }
	$12 = *($1 + [164])
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$8 }
	$12 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7391968480164052992, ($4 + [32]), $5)
	*(($1 + [164])) = $12
	
.LABEL $label$8
	CALL db_idx64_update($12, $2, ($4 + [40]))
	
.LABEL $label$7
	$global$0 = ($4 + [96])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($1 + [96]) = (int_64)0
	*(($4 = $3) + [24]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	$5 = *($1)
	CALL eosio_assert([1], [10922])
	$6 = ($1 + [120])
	$7 = ($1 + [16])
	$9 = *($1 + [120])
	$8 = *(($1 + [124]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[72]))
	$12 = [112]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($10 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $12) + [68])
	
.LABEL $label$2
	$8 = ($12 + [14])
	if ( ($8 <= [513]) ){ goto $label$4 }
	$12 = CALL $215($8)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($4 + [12]) = $12
	*($4 + [8]) = $12
	*($4 + [16]) = ($12 + $8)
	*($4 + [32]) = ($4 + [8])
	*($4 + [44]) = $7
	*($4 + [76]) = $6
	*($4 + [40]) = $1
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [52])
	*($4 + [56]) = ($1 + [56])
	*($4 + [60]) = ($1 + [60])
	*($4 + [64]) = ($1 + [64])
	*($4 + [68]) = ($1 + [72])
	*($4 + [72]) = ($1 + [96])
	*($4 + [80]) = ($1 + [132])
	*($4 + [84]) = ($1 + [136])
	*($4 + [88]) = ($1 + [144])
	*($4 + [92]) = ($1 + [152])
	CALL $128(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [160]), $2, $12, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL $218($12)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [40]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*(($1 + [16])) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	if ( (CALL $211(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$7 }
	$12 = *($1 + [164])
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$8 }
	$12 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7391968480164052992, ($4 + [32]), $5)
	*(($1 + [164])) = $12
	
.LABEL $label$8
	CALL db_idx64_update($12, $2, ($4 + [40]))
	
.LABEL $label$7
	$global$0 = ($4 + [96])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [11689])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [11734])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11784])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$5 = *($0)
	*($4) = $5
	$6 = *($1)
	*($4 + [8]) = $6
	$1 = [0]
	$2 = CALL db_find_i64($5, $6, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $79($4, $2)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$4), [10654])
	
.LABEL $label$1
	$2 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($2, $3)
	CALL eosio_assert($2, [11655])
	CALL eosio_assert($2, [11621])
	$2 = CALL db_next_i64(*($1 + [28]), ($4 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $79($4, $2)
	
.LABEL $label$2
	CALL $80($4, $1)
	$0 = *($4 + [24])
	if ( ($0 == 0) ){ goto $label$3 }
	$7 = ($4 + [28])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($4 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $0
	
.LABEL $label$4
	*($7) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [11689])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [11734])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11784])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [320])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$0 != (int_64)7391968453230163056) ){ goto $label$2 }
	if ( ((int_64)$1 != (int_64)7391968453230163056) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	CALL eosio_assert([0], [8192])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 == (int_64)7391968453230163056) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [1]
	*($3 + [152]) = *($3 + [312])
	CALL $3((int_64)7391968453230163056, $1, ($3 + [152]))
	
.LABEL $label$2
	CALL $192([0])
	$global$0 = ($3 + [320])
	return (unreachable)
	
.LABEL $label$1
	if ( ((int_64)$2 <= (int_64)4730614985703555071) ){ goto $label$22 }
	if ( ((int_64)$2 > (int_64)6761208896257458175) ){ goto $label$21 }
	if ( ((int_64)$2 <= (int_64)5378271211849515007) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)5378271211849515008) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)5378296970563551232) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)5381955181023854592) ){ goto $label$4 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [2]
	*($3 + [96]) = *($3 + [208])
	CALL $5((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$22
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$20 }
	if ( ((int_64)$2 <= (int_64)3626396715516428287) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)3626396715516428288) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)3724085270811770880) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)3849304916161986560) ){ goto $label$4 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [3]
	*($3 + [16]) = *($3 + [288])
	CALL $7((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$21
	if ( ((int_64)$2 <= (int_64)6761208896415361215) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)6761208896415361216) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)6761211911981092128) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)6761211911982310220) ){ goto $label$4 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [144]) = *($3 + [160])
	CALL $9((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [144]))
	CALL eosio_exit([0])
	
.LABEL $label$20
	if ( ((int_64)$2 > (int_64)-4992623624440512513) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-5003137131753242624) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-5001342339331915776) ){ goto $label$4 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [5]
	*($3 + [80]) = *($3 + [224])
	CALL $11((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)4730614985703555072) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4851652482884960256) ){ goto $label$4 }
	*($3 + [308]) = [0]
	*($3 + [304]) = [6]
	*($3) = *($3 + [304])
	CALL $13((int_64)7391968453230163056, (int_64)7391968453230163056, $3)
	CALL eosio_exit([0])
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)3626370956802392064) ){ goto $label$4 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [7]
	*($3 + [40]) = *($3 + [264])
	CALL $13((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)6761208896257458176) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6761208896350879744) ){ goto $label$4 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [8]
	*($3 + [120]) = *($3 + [184])
	CALL $11((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [120]))
	CALL eosio_exit([0])
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$4 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [9]
	*($3 + [88]) = *($3 + [216])
	CALL $17((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	*($3 + [260]) = [0]
	*($3 + [256]) = [10]
	*($3 + [48]) = *($3 + [256])
	CALL $13((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	*($3 + [244]) = [0]
	*($3 + [240]) = [11]
	*($3 + [64]) = *($3 + [240])
	CALL $13((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	*($3 + [252]) = [0]
	*($3 + [248]) = [12]
	*($3 + [56]) = *($3 + [248])
	CALL $13((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	*($3 + [276]) = [0]
	*($3 + [272]) = [13]
	*($3 + [32]) = *($3 + [272])
	CALL $11((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [172]) = [0]
	*($3 + [168]) = [14]
	*($3 + [136]) = *($3 + [168])
	CALL $23((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [136]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [196]) = [0]
	*($3 + [192]) = [15]
	*($3 + [112]) = *($3 + [192])
	CALL $17((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [112]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [204]) = [0]
	*($3 + [200]) = [16]
	*($3 + [104]) = *($3 + [200])
	CALL $26((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [236]) = [0]
	*($3 + [232]) = [17]
	*($3 + [72]) = *($3 + [232])
	CALL $17((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [284]) = [0]
	*($3 + [280]) = [18]
	*($3 + [24]) = *($3 + [280])
	CALL $11((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [180]) = [0]
	*($3 + [176]) = [19]
	*($3 + [128]) = *($3 + [176])
	CALL $30((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [128]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [300]) = [0]
	*($3 + [296]) = [20]
	*($3 + [8]) = *($3 + [296])
	CALL $7((int_64)7391968453230163056, (int_64)7391968453230163056, ($3 + [8]))
	
.LABEL $label$4
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $212([9902])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [9902], $5)
	
.LABEL $label$2
	$7 = [0]
	*(($6 + $5)) = [0]
	CALL $185(($4 + [16]), *($3))
	$5 = *($4 + [16])
	$6 = ($5 & [1])
	CALL $176($0, ( *($4 + [24]) ? (($4 + [16]) | [1]) : $6 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $6 ))
	CALL $175($0, [9912])
	$8 = *($2)
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$8 }
	$6 = *([0] + [11584])
	
.LOOP $label$10:
	*((($4 + [35]) + ($5 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$7 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$9 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($4) = ($7 << [1])
	$6 = ($4 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$7 = $5
	goto $label$5 
	
.LABEL $label$7
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $7
	
.LABEL $label$6
	$2 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$11:
	*(($6 + $5)) = *((($4 + [35]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$7 = ($6 + $7)
	$5 = ($4 | [1])
	
.LABEL $label$5
	*($7) = [0]
	$7 = *($4)
	$6 = ($7 & [1])
	CALL $176($0, ( *($4 + [8]) ? $5 : $6 ), ( *($4 + [4]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	CALL $175($0, [11079])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$13
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $212([9902])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [9902], $5)
	
.LABEL $label$2
	$7 = [0]
	*(($6 + $5)) = [0]
	CALL $185(($4 + [16]), *($3))
	$5 = *($4 + [16])
	$6 = ($5 & [1])
	CALL $176($0, ( *($4 + [24]) ? (($4 + [16]) | [1]) : $6 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $6 ))
	CALL $175($0, [9912])
	$8 = *($2)
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$8 }
	$6 = *([0] + [11584])
	
.LOOP $label$10:
	*((($4 + [35]) + ($5 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$7 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$9 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($4) = ($7 << [1])
	$6 = ($4 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$7 = $5
	goto $label$5 
	
.LABEL $label$7
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $7
	
.LABEL $label$6
	$2 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$11:
	*(($6 + $5)) = *((($4 + [35]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$7 = ($6 + $7)
	$5 = ($4 | [1])
	
.LABEL $label$5
	*($7) = [0]
	$7 = *($4)
	$6 = ($7 & [1])
	CALL $176($0, ( *($4 + [8]) ? $5 : $6 ), ( *($4 + [4]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	CALL $175($0, [11061])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$13
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $167($0)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($2)
	*($3 + [24]) = $4
	if ( CALL is_account($4) ){ goto $label$1 }
	$4 = *($0)
	*($3 + [24]) = $4
	
.LABEL $label$1
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$5), [10654])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-5001621369000034304, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $58($5, $8)
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$5), [10654])
	
.LABEL $label$2
	*($3 + [40]) = (int_64)-3665743571254938512
	$8 = CALL $212([8378])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [10391])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = (int_64)0
	
.LOOP $label$10:
	$7 = *(($8 + [8377]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$11
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$4 = (int_64)4
	
.LABEL $label$6
	*($3 + [32]) = $4
	*($3 + [7]) = [0]
	CALL $97(($3 + [8]), $0, ($3 + [24]), ($3 + [40]), ($3 + [32]), ($3 + [7]), [10653])
	if ( $9 ){ goto $label$12 }
	$8 = CALL $212([8378])
	if ( ($8 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [10391])
	goto $label$15 
	
.LABEL $label$16
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = (int_64)0
	
.LOOP $label$17:
	$7 = *(($8 + [8377]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$18
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$17 }
	$10 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$13 
	
.LABEL $label$14
	$10 = (int_64)4
	
.LABEL $label$13
	CALL eosio_assert([1], [10548])
	$4 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$11 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$4 = $11
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$4 = $11
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$23 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$7 = [0]
	
.LABEL $label$19
	CALL eosio_assert($7, [10597])
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)$10), [10489])
	if ( ((int_64)*($3 + [8]) > (int_64)1410065407) ){ goto $label$12 }
	*($3 + [24]) = *($0)
	
.LABEL $label$12
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$4 = *($0)
	*($3 + [40]) = $4
	*($3 + [48]) = *($1)
	*($3 + [32]) = (int_64)3631284093736285296
	$4 = CALL $98(($3 + [40]), $4, ($3 + [32]))
	$9 = *($3 + [64])
	if ( ($9 == 0) ){ goto $label$24 }
	$6 = ($3 + [68])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$26 }
	
.LOOP $label$27:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL _ZdlPv($7)
	
.LABEL $label$28
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$27 }
	$8 = *(($3 + [64]))
	goto $label$25 
	
.LABEL $label$26
	$8 = $9
	
.LABEL $label$25
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$24
	if ( ((int_64)$4 != (int_64)3631284093736285296) ){ goto $label$33 }
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$4 = *($0)
	*($3 + [40]) = $4
	*($3 + [48]) = *($1)
	*($3 + [32]) = *($3 + [24])
	CALL $99(($3 + [40]), ($3 + [32]), $4)
	$9 = *($3 + [64])
	if ( ($9 == 0) ){ goto $label$30 }
	$6 = ($3 + [68])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$32 }
	
.LOOP $label$34:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	CALL _ZdlPv($7)
	
.LABEL $label$35
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$34 }
	$8 = *(($3 + [64]))
	goto $label$31 
	
.LABEL $label$33
	*($3 + [24]) = $4
	goto $label$29 
	
.LABEL $label$32
	$8 = $9
	
.LABEL $label$31
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$30
	$4 = *($3 + [24])
	
.LABEL $label$29
	*($2) = $4
	$global$0 = ($3 + [80])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	CALL $42($0, $1, $2)
	$3 = ($0 + [32])
	$4 = *($1)
	$2 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($2 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$4) ){ goto $label$3 }
	$2 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($6 + [156])) == (int_32)$3), [10654])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)7391968480164052992, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $65($3, $1)
	CALL eosio_assert(((int_32)*($6 + [156]) == (int_32)$3), [10654])
	
.LABEL $label$1
	CALL eosio_assert((*($6 + [48]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9302])
	CALL eosio_assert(((uint_32)*($6 + [56]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [10633])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [10133])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10238])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10171])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10238])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [10728])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = *($0 + [20])
	$3 = *($1)
	$5 = *($3 + [4])
	$8 = [0]
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *(($3 + [8]))), [11651])
	$9 = ($3 + [4])
	$5 = *($9)
	$4 = *($5)
	$5 = ($5 + [1])
	*($9) = $5
	$8 = ($8 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $8)))
	$8 = ($8 + [7])
	if ( ($4 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $6)
	$4 = *($7)
	$5 = *($7 + [4])
	$9 = ((int_32)($5 - $4) / (int_32)[40])
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$4 }
	CALL $150($7, ($8 - $9))
	$5 = *(($7 + [4]))
	$4 = *($7)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$9 <= (uint_32)$8) ){ goto $label$5 }
	$5 = ($4 + ((int_32)$8 * (int_32)[40]))
	*(($7 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $151($3, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10728])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10728])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [7]) != (int_32)[0])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10728])
	CALL memcpy(($2 + [6]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [6]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $147(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10728])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [10728])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [14]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $124(*($1), *($0 + [4]))
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [8]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [11689])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [11734])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11784])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $182 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $186($1, $0, [9130])
	CALL $188()
	(unreachable)
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11651])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $72($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10728])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [6])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$4 }
	$3 = [67108863]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$3 = int_32($2 >> [5])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [64])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $189($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [6]))
	$5 = ($2 + ($5 << [6]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	$3 = ($3 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [6]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[72]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[72])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[59652324]) ){ goto $label$3 }
	$3 = [59652323]
	$2 = ((int_32)($2 - $4) / (int_32)[72])
	if ( ((uint_32)$2 > (uint_32)[29826160]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[72]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*((($3 = CALL memset($3, [0], [72])) + [16])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [32]) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	$3 = (*($0) + [72])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $189($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[72]))
	$5 = ($2 + ((int_32)$5 * (int_32)[72]))
	$3 = $5
	
.LOOP $label$8:
	*((($3 = CALL memset($3, [0], [72])) + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	$3 = ($3 + [72])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[72]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-72]) * (int_32)[72]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [10728])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = *($0 + [36])
	$3 = *($1)
	$5 = *($3 + [4])
	$8 = [0]
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *(($3 + [8]))), [11651])
	$9 = ($3 + [4])
	$5 = *($9)
	$4 = *($5)
	$5 = ($5 + [1])
	*($9) = $5
	$8 = ($8 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $8)))
	$8 = ($8 + [7])
	if ( ($4 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $6)
	$4 = *($7)
	$5 = *($7 + [4])
	$9 = ((int_32)($5 - $4) / (int_32)[72])
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$4 }
	CALL $145($7, ($8 - $9))
	$5 = *(($7 + [4]))
	$4 = *($7)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$9 <= (uint_32)$8) ){ goto $label$5 }
	$5 = ($4 + ((int_32)$8 * (int_32)[72]))
	*(($7 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $146($3, $4)
	$4 = ($4 + [72])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10728])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10728])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [11651])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [6])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $148($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [6]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$7 = *($8)
	
.LOOP $label$6:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[3]), [10728])
	CALL memcpy($3, *($8), [4])
	$7 = (*($8) + [4])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [8]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [16])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [24]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [32]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [40])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [48]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [10728])
	CALL memcpy(($3 + [56]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [64])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10728])
	CALL memcpy($1, *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [10733])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10784])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [10784])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $141(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3)
	$0 = *($3 + [4])
	*($2 + [8]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($0 + [17])) << (int_64)48) | (int_64)((int_64)*($0 + [16]) << (int_64)56)) | (int_64)((int_64)*(($0 + [18])) << (int_64)40)) | (int_64)((int_64)*(($0 + [19])) << (int_64)32)) | (int_64)((int_64)*(($0 + [20])) << (int_64)24)) | (int_64)((int_64)*(($0 + [21])) << (int_64)16)) | (int_64)((int_64)*(($0 + [22])) << (int_64)8)) + (int_64)*(($0 + [23])))
	if ( (CALL $211(*($3 + [8]), ($2 + [8]), [8]) == 0) ){ goto $label$1 }
	$0 = *(*($3 + [12]) + [164])
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$2 }
	$0 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7391968480164052992, $2, *(*($3 + [16])))
	*(*(($3 + [12])) + [164]) = $0
	
.LABEL $label$2
	CALL db_idx64_update($0, *(*($3 + [20])), ($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3)
	$0 = *($3 + [4])
	*($2 + [8]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($0 + [17])) << (int_64)48) | (int_64)((int_64)*($0 + [16]) << (int_64)56)) | (int_64)((int_64)*(($0 + [18])) << (int_64)40)) | (int_64)((int_64)*(($0 + [19])) << (int_64)32)) | (int_64)((int_64)*(($0 + [20])) << (int_64)24)) | (int_64)((int_64)*(($0 + [21])) << (int_64)16)) | (int_64)((int_64)*(($0 + [22])) << (int_64)8)) + (int_64)*(($0 + [23])))
	if ( (CALL $211(*($3 + [8]), ($2 + [8]), [8]) == 0) ){ goto $label$1 }
	$0 = *(*($3 + [12]) + [164])
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$2 }
	$0 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7391968480164052992, $2, *(*($3 + [16])))
	*(*(($3 + [12])) + [164]) = $0
	
.LABEL $label$2
	CALL db_idx64_update($0, *(*($3 + [20])), ($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $189($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [10784])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($3 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$6 = *($0 + [20])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[40]))
	$3 = *($1)
	$5 = *($3 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$8 = ((int_64)$7) != (int_64)0
	*($2 + [7]) = (($8) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $5) > (int_32)[0]), [10784])
	$4 = ($3 + [4])
	CALL memcpy(*($4), ($2 + [7]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $8 ){ goto $label$1 }
	$5 = *(($6 + [4]))
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $154($3, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [56]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [100]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	*($3 + [44]) = ($5 + [52])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [80])
	*($3 + [56]) = ($5 + [92])
	*($3 + [60]) = ($5 + [96])
	CALL $84(($3 + [32]), ($3 + [24]))
	*($5 + [104]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $153(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [80])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [100])) == (int_32)$0), [11689])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [11734])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11784])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [80])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [84])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [80])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [84])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*(($1 + [104])))
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11621])
	$3 = *($0 + [4])
	$4 = *($3 + [52])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229865212519383040, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [52]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($2 + [44])) == (int_32)$7), [10654])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $109($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$7), [10654])
	
.LABEL $label$3
	*($2 + [52]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [11689])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [11734])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11784])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [48]))
	$6 = *($1 + [52])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383040, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229865212519383040, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [44])) == (int_32)$7), [10654])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $109($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$7), [10654])
	
.LABEL $label$2
	*($4 + [52]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)4229865212519383040, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [44])) == (int_32)$7), [10654])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $109($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$7), [10654])
	
.LABEL $label$2
	*($4 + [52]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [7]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [6]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [6]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [20])
	*($3 + [44]) = ($5 + [21])
	CALL $82(($3 + [32]), ($3 + [24]))
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $122(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $98 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [10654])
	if ( ($4 == 0) ){ goto $label$1 }
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001621369012617216, (int_64)-5001621369012617216)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $113($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [10654])
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$1
	*($3 + [8]) = $2
	CALL $117($3, $0, $1, ($3 + [8]))
	$1 = *(*($3 + [4]))
	$global$0 = ($3 + [16])
	return $1
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [10654])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001621369012617216, (int_64)-5001621369012617216)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $113($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [10654])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10790])
	CALL $114($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $115($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [10733])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([176])) + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128]) = [0]
	*($3 + [144]) = (int_64)0
	*($3 + [156]) = $1
	CALL $131(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [160])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $132(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [120])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*(($5 = $4) + [24]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	$6 = ($1 + [96])
	$7 = *($3)
	$8 = *($1)
	if ( ((int_64)*($1 + [96]) == (int_64)0) ){ goto $label$2 }
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [104]))), [10981])
	$9 = ((int_64)*($1 + [96]) + (int_64)*($7))
	*($1 + [96]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [11043])
	goto $label$1 
	
.LABEL $label$2
	*($6) = *($7)
	*(($6 + [16])) = *(($7 + [16]))
	*(($6 + [8])) = *(($7 + [8]))
	
.LABEL $label$1
	$7 = *($3)
	*(($10 = (($5 + [40]) + [8]))) = *(($7 + [16]))
	*($5 + [40]) = *($7 + [8])
	$11 = ($1 + [124])
	$7 = *($1 + [120])
	if ( ((int_32)$7 == (int_32)*($11)) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($7 + [8])
	if ( ((int_64)*($3) == (int_64)0) ){ goto $label$7 }
	$3 = ($7 + [32])
	if ( ((int_64)*($3) == (int_64)0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	*($3) = (int_64)0
	*(($7 + [24])) = *($10)
	*(($7 + [16])) = *($5 + [40])
	$3 = ($7 + [32])
	if ( ((int_64)*($3) != (int_64)0) ){ goto $label$5 }
	
.LABEL $label$6
	*($3) = (int_64)0
	*(($7 + [48])) = *($10)
	*(($7 + [40])) = *($5 + [40])
	$7 = ($7 + [72])
	if ( ((int_32)$7 != (int_32)*($11)) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = ($7 + [72])
	if ( ((int_32)$7 != (int_32)*($11)) ){ goto $label$4 }
	
.LABEL $label$3
	$10 = ($1 + [16])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [10922])
	$12 = ($1 + [120])
	$11 = *($1 + [120])
	$3 = *($11)
	$13 = ($3 - $11)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$13 / (int_32)[72]))
	$7 = [112]
	
.LOOP $label$8:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$9 }
	$7 = ((((int_32)((uint_32)($13 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $7) + [68])
	
.LABEL $label$9
	$3 = ($7 + [14])
	if ( ($3 <= [513]) ){ goto $label$11 }
	$7 = CALL $215($3)
	goto $label$10 
	
.LABEL $label$11
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$10
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $3)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $10
	*($5 + [72]) = $6
	*($5 + [76]) = $12
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [52])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [60])
	*($5 + [64]) = ($1 + [64])
	*($5 + [68]) = ($1 + [72])
	*($5 + [80]) = ($1 + [132])
	*($5 + [84]) = ($1 + [136])
	*($5 + [88]) = ($1 + [144])
	*($5 + [92]) = ($1 + [152])
	CALL $128(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [160]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL $218($7)
	
.LABEL $label$12
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($5 + [40]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*(($1 + [16])) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	if ( (CALL $211(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$14 }
	$7 = *($1 + [164])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7391968480164052992, ($5 + [32]), $8)
	*(($1 + [164])) = $7
	
.LABEL $label$15
	CALL db_idx64_update($7, $2, ($5 + [40]))
	
.LABEL $label$14
	$global$0 = ($5 + [96])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*(($5 = $4) + [24]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	$6 = ($1 + [72])
	$3 = *($3)
	$7 = *($1)
	if ( ((int_64)*($1 + [72]) == (int_64)0) ){ goto $label$2 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [80]))), [10981])
	$8 = ((int_64)*($1 + [72]) + (int_64)*($3))
	*($1 + [72]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [11043])
	$8 = *($1)
	goto $label$1 
	
.LABEL $label$2
	*($6) = *($3)
	*(($6 + [16])) = *(($3 + [16]))
	*(($6 + [8])) = *(($3 + [8]))
	$8 = $7
	
.LABEL $label$1
	$9 = ($1 + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [10922])
	$10 = ($1 + [120])
	$12 = *($1 + [120])
	$11 = *(($1 + [124]))
	$13 = ($11 - $12)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$13 / (int_32)[72]))
	$3 = [112]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$4 }
	$3 = ((((int_32)((uint_32)($13 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $3) + [68])
	
.LABEL $label$4
	$11 = ($3 + [14])
	if ( ($11 <= [513]) ){ goto $label$6 }
	$3 = CALL $215($11)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($11 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $11)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $9
	*($5 + [68]) = $6
	*($5 + [76]) = $10
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [52])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [60])
	*($5 + [64]) = ($1 + [64])
	*($5 + [72]) = ($1 + [96])
	*($5 + [80]) = ($1 + [132])
	*($5 + [84]) = ($1 + [136])
	*($5 + [88]) = ($1 + [144])
	*($5 + [92]) = ($1 + [152])
	CALL $128(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [160]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$7 }
	CALL $218($3)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*(($1 + [16])) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	if ( (CALL $211(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = *($1 + [164])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7391968480164052992, ($5 + [32]), $7)
	*(($1 + [164])) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [96])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$7 = ($global$0 - [48])
	$global$0 = $7
	$8 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$9 = *($3)
	*($7 + [8]) = $9
	$10 = *($2)
	*($7 + [16]) = $10
	$11 = (uint_64)*($4) >> (uint_64)(int_64)8
	$2 = CALL db_find_i64($9, $10, (int_64)3607749779137757184, $11)
	if ( ((int_32)$2) <= (int_32)[-1]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $111(($7 + [8]), $2) + [16]) == (int_32)($7 + [8])), [10654])
	$8 = CALL $112(($7 + [8]), $11, [8614])
	*($0) = *($8)
	*(($0 + [8])) = *(($8 + [8]))
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$2 = ($7 + [36])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$5:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$5 }
	$8 = *(($7 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($5) ^ (int_32)[1]), $6)
	*($0) = (int_64)0
	$9 = *($4)
	*($0 + [8]) = $9
	CALL eosio_assert([1], [10548])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$9 = $10
	$2 = [1]
	$0 = $8
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$0 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $0 ){ goto $label$10 }
	$2 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($2, [10597])
	
.LABEL $label$3
	$global$0 = ($7 + [48])
	return 
	
.LABEL $label$2
	$8 = $4
	
.LABEL $label$1
	*($2) = $4
	CALL _ZdlPv($8)
	$global$0 = ($7 + [48])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [160])
	$global$0 = $6
	$7 = CALL $101($0, $2, $3, $4)
	*($6 + [152]) = $7
	*((($6 + [88]) + [16])) = *(($4 + [8]))
	*(($6 + [112])) = *(($4 + [16]))
	*(($6 + [128])) = *(($5 + [8]))
	*(($6 + [136])) = *(($5 + [16]))
	*($6 + [144]) = $7
	*($6 + [88]) = *($3)
	*($6 + [96]) = *($4)
	*($6 + [120]) = *($5)
	*(($6 + [80])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	$7 = *($0)
	*($6 + [48]) = $7
	$8 = *($1)
	*($6 + [56]) = $8
	$1 = CALL db_find_i64($7, $8, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL $79(($6 + [48]), $1)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($6 + [48])), [10654])
	*($6 + [47]) = [0]
	$7 = *($0)
	*($6 + [12]) = $4
	*($6 + [8]) = $3
	*($6 + [16]) = $5
	*($6 + [20]) = ($6 + [152])
	*($6 + [24]) = ($6 + [88])
	*($6 + [28]) = ($6 + [47])
	CALL eosio_assert([1], [10790])
	CALL $102(($6 + [48]), $1, $7, ($6 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($6 + [47]) = [0]
	$7 = *($0)
	*($6 + [8]) = $2
	*($6 + [12]) = ($6 + [88])
	CALL $103(($6 + [32]), ($6 + [48]), $7, ($6 + [8]))
	*($6 + [47]) = [1]
	
.LABEL $label$1
	$9 = ($0 + [32])
	$7 = *($2)
	$1 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($1 + [-24])
	$11 = *($2)
	if ( ((int_64)*($11) == (int_64)$7) ){ goto $label$5 }
	$1 = $2
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($11 + [156])) == (int_32)$9), [10654])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$2 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)7391968480164052992, $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $65($9, $2)
	CALL eosio_assert(((int_32)*($11 + [156]) == (int_32)$9), [10654])
	
.LABEL $label$3
	$7 = *($0)
	*($6 + [8]) = $3
	*($6 + [16]) = $4
	*($6 + [20]) = $5
	*($6 + [12]) = ($6 + [47])
	*($6 + [24]) = ($6 + [152])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [10790])
	CALL $104($9, $11, $7, ($6 + [8]))
	$10 = *($6 + [72])
	if ( ($10 == 0) ){ goto $label$7 }
	$0 = ($6 + [76])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$11 = *($1 + [8])
	if ( ($11 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($6 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $10
	
.LABEL $label$8
	*($0) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($6 + [160])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 + [1])
	$6 = ($2 + [1])
	$7 = [0]
	$9 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$3 }
	$10 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $10 )
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$2 }
	$11 = ( *($2 + [8]) ? $6 : $10 )
	$12 = ($11 + $7)
	$13 = ( *($3 + [8]) ? $5 : $9 )
	$10 = *($13)
	$9 = $11
	
.LOOP $label$4:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$2 }
	$7 = CALL $210($9, $10, $7)
	if ( ($7 == 0) ){ goto $label$2 }
	if ( (CALL $211($7, $13, $8) == 0) ){ goto $label$5 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$2 }
	$7 = ($7 - $11)
	if ( ((int_32)$7 == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = ($0 + [8])
	$15 = ($0 + [4])
	$10 = [0]
	
.LOOP $label$6:
	$9 = CALL $183(CALL $169($4, $2, $10, ($7 - $10), $2), [0], [10])
	*($4 + [12]) = $9
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)*($14)) ){ goto $label$9 }
	*($8) = $9
	*($15) = ($8 + [4])
	if ( (*($4) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $110($0, ($4 + [12]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$7
	$11 = ($8 & [1])
	$8 = *($3)
	$8 = ( *(($3 + [4])) ? uint_32($8 >> [1]) : $11 )
	$10 = ($8 + $7)
	$9 = ($8 & [1])
	$8 = *($2)
	$13 = ( *(($2 + [4])) ? uint_32($8 >> [1]) : $9 )
	if ( ($13 <= $10) ){ goto $label$1 }
	$7 = $10
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = ($16 + $10)
	$16 = ( *(($2 + [8])) ? $6 : $9 )
	$12 = ($16 + $13)
	$7 = ($12 - $9)
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$1 }
	$11 = ( *(($3 + [8])) ? $5 : $11 )
	$13 = *($11)
	
.LOOP $label$11:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $210($9, $13, $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $211($7, $11, $8) == 0) ){ goto $label$12 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$11 }
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$1 }
	$7 = ($7 - $16)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	$8 = *($2)
	if ( ((int_32)$10 == (int_32)( *(($2 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$13 }
	$7 = CALL $169($4, $2, $10, [-1], $2)
	$2 = CALL $183($7, [0], [10])
	*($4 + [12]) = $2
	$8 = *(($0 + [4]))
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [8]))) ){ goto $label$15 }
	*($8) = $2
	*(($0 + [4])) = ($8 + [4])
	if ( (*($4) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $110($0, ($4 + [12]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$13
	$global$0 = ($4 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (*($1 + [4]) - *($1))
	CALL eosio_assert(((int_32)$3 > (int_32)[0]), [11196])
	CALL $156(*($1), *($1 + [4]), ($2 + [8]))
	CALL eosio_assert(((int_32)*(*($1)) != (int_32)[0]), [11221])
	$4 = *($1)
	$5 = $4
	$6 = *($1 + [4])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$2 }
	$7 = ($4 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$5 = ($7 + [-4])
	$8 = *($7)
	$9 = ($7 + [4])
	$7 = $9
	if ( ((int_32)$8 != (int_32)*($5)) ){ goto $label$3 }
	$5 = ($9 + [-8])
	
.LABEL $label$2
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	$7 = ($5 + [8])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = *($7)
	if ( ((int_32)*($5) == (int_32)$8) ){ goto $label$6 }
	*($5 + [4]) = $8
	$5 = ($5 + [4])
	
.LABEL $label$6
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = ($5 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$1 }
	*(($1 + [4])) = $7
	$6 = $7
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($6 - $4) == (int_32)$3), [11254])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[72])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[59652324]) ){ goto $label$2 }
	$6 = [59652323]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[72])
	if ( ((uint_32)$7 > (uint_32)[29826160]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[72]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$2 = ($2 - $3)
	$4 = CALL memcpy(($5 + ((int_32)$4 * (int_32)[72])), $1, [72])
	$1 = ($4 + ((int_32)((int_32)$2 / (int_32)[-72]) * (int_32)[72]))
	$6 = ($5 + ((int_32)$6 * (int_32)[72]))
	$5 = ($4 + [72])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $138 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10922])
	CALL eosio_assert([1], [10784])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10784])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [10733])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10784])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [10784])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $141(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $133(*($0 + [4]), $1)
	$5 = ($1 + [120])
	$7 = *($1 + [120])
	$6 = *(($1 + [124]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[72]))
	$10 = [112]
	
.LOOP $label$1:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$10 = ((((int_32)((uint_32)($8 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $10) + [68])
	
.LABEL $label$2
	$6 = ($10 + [14])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$10 = CALL $215($6)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$3
	*($3 + [4]) = $10
	*($3) = $10
	*($3 + [8]) = ($10 + $6)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [16])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [48])
	*($3 + [36]) = ($1 + [52])
	*($3 + [40]) = ($1 + [56])
	*($3 + [44]) = ($1 + [60])
	*($3 + [48]) = ($1 + [64])
	*($3 + [52]) = ($1 + [72])
	*($3 + [56]) = ($1 + [96])
	*($3 + [60]) = $5
	*($3 + [64]) = ($1 + [132])
	*($3 + [68]) = ($1 + [136])
	*($3 + [72]) = ($1 + [144])
	*($3 + [76]) = ($1 + [152])
	CALL $128(($3 + [24]), ($3 + [16]))
	$9 = *($1)
	*($1 + [160]) = CALL db_store_i64(*($4 + [8]), (int_64)7391968480164052992, *(*($0 + [8])), $9, $10, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $218($10)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*(($1 + [16])) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	*($1 + [164]) = CALL db_idx64_store($9, (int_64)7391968480164052992, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [80])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [120])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	*($1 + [48]) = *($3 + [48])
	*($1 + [56]) = *($3 + [56])
	$4 = *($0 + [4])
	$5 = $1
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $134(($1 + [120]), *($3 + [120]), *(($3 + [124])))
	$5 = *($0)
	
.LABEL $label$1
	*($1 + [64]) = *($5 + [64])
	*($1 + [144]) = *($5 + [144])
	*($1 + [60]) = *($5 + [60])
	$6 = ($4 + [112])
	$7 = *($5 + [144])
	$3 = *(($4 + [140]))
	$8 = *(($4 + [136]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($3 + [-24])
	$0 = *($5)
	if ( ((int_64)*($0) == (int_64)$7) ){ goto $label$4 }
	$3 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$6), [10654])
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	$5 = CALL db_find_i64(*($6), *(($4 + [120])), (int_64)-4157748382292508672, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $40($6, $5)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$6), [10654])
	
.LABEL $label$2
	*($1 + [152]) = ((int_32)$0 != (int_32)[0])
	$5 = CALL $212([8378])
	if ( ($5 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [10391])
	goto $label$8 
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$3 = *(($5 + [8377]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$10 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$9 = (int_64)4
	
.LABEL $label$6
	CALL eosio_assert([1], [10548])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$7 = $10
	$3 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$7 = $10
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$0 = ($5 + [1])
	$5 = $0
	if ( $3 ){ goto $label$16 }
	$3 = [1]
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$3 = [0]
	
.LABEL $label$12
	CALL eosio_assert($3, [10597])
	*(($1 + [80])) = $9
	*($1 + [72]) = (int_64)0
	*(($1 + [88])) = (int_64)-3665743571254938512
	$5 = CALL $212([8378])
	if ( ($5 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [10391])
	goto $label$19 
	
.LABEL $label$20
	if ( ($5 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$7 = (int_64)0
	
.LOOP $label$21:
	$3 = *(($5 + [8377]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$22
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$21 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$17 
	
.LABEL $label$18
	$9 = (int_64)4
	
.LABEL $label$17
	CALL eosio_assert([1], [10548])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$7 = $10
	$3 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$7 = $10
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$0 = ($5 + [1])
	$5 = $0
	if ( $3 ){ goto $label$27 }
	$3 = [1]
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$3 = [0]
	
.LABEL $label$23
	CALL eosio_assert($3, [10597])
	*(($1 + [104])) = $9
	*($1 + [96]) = (int_64)0
	*(($1 + [112])) = (int_64)-3665743571254938512
	$7 = *($4)
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$5 = ($4 + [152])
	CALL $135(($2 + [32]), $5, $7, $2)
	*($2 + [32]) = ((int_64)*($2 + [32]) + (int_64)1)
	CALL $136($5, ($2 + [32]), *($4))
	*($1) = *($2 + [32])
	$5 = CALL read_transaction([0], [0])
	$3 = CALL $215($5)
	CALL read_transaction($3, $5)
	CALL sha256($3, $5, $2)
	*(($1 + [40])) = *(($2 + [24]))
	*(($1 + [32])) = *(($2 + [16]))
	*(($1 + [24])) = *($2 + [8])
	*($1 + [16]) = *($2)
	*($1 + [132]) = [0]
	*($1 + [136]) = [0]
	$global$0 = ($2 + [48])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[72])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[72])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[59652324]) ){ goto $label$1 }
	$6 = [59652323]
	$2 = ((int_32)$5 / (int_32)[72])
	if ( ((uint_32)$2 > (uint_32)[29826160]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[72])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[72]) * (int_32)[72]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[72])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[72])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[72])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[72]) * (int_32)[72]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[72]))
	return (unreachable)
	
.LABEL $label$1
	CALL $189($0)
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [10654])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $137($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [10654])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $140($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [10654])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $137($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [10654])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10790])
	CALL $138($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $139($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10728])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [10728])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [20]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $141(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $191())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $214($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $208 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $204($3, (int_64)0)
	$4 = CALL $206($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $209 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $204($3, (int_64)0)
	$4 = CALL $206($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $202 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $202($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $201 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $197([22], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_64 .FUNC $206 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $205($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $191()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $205($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20385]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $204($0, (int_64)0)
	*(CALL $191()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $205($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $205($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $205($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $205($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20385])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $205($0)
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $205($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8222]))
	$8 = (int_64)0
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $205($0)
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $205($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20385]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20385]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $205($0) + [20385]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $191()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $191()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $191()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $207 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $204($3, (int_64)0)
	$4 = CALL $206($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $204 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $205 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $203($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $181 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $186($1, $0, [9188])
	CALL $187()
	(unreachable)
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3)
	$0 = *($3 + [4])
	*($2 + [8]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($0 + [17])) << (int_64)48) | (int_64)((int_64)*($0 + [16]) << (int_64)56)) | (int_64)((int_64)*(($0 + [18])) << (int_64)40)) | (int_64)((int_64)*(($0 + [19])) << (int_64)32)) | (int_64)((int_64)*(($0 + [20])) << (int_64)24)) | (int_64)((int_64)*(($0 + [21])) << (int_64)16)) | (int_64)((int_64)*(($0 + [22])) << (int_64)8)) + (int_64)*(($0 + [23])))
	if ( (CALL $211(*($3 + [8]), ($2 + [8]), [8]) == 0) ){ goto $label$1 }
	$0 = *(*($3 + [12]) + [164])
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$2 }
	$0 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7391968480164052992, $2, *(*($3 + [16])))
	*(*(($3 + [12])) + [164]) = $0
	
.LABEL $label$2
	CALL db_idx64_update($0, *(*($3 + [20])), ($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [10784])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($3 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($3 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$6 = *($0 + [36])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[72]))
	$3 = *($1)
	$5 = *($3 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$8 = ((int_64)$7) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $5) > (int_32)[0]), [10784])
	$4 = ($3 + [4])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $8 ){ goto $label$1 }
	$5 = *(($6 + [4]))
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $130($3, $4)
	$4 = ($4 + [72])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10784])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [52]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [208]), [0], [112])
	*((($4 + [208]) + [64])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*((($4 + [208]) + [88])) = [0]
	*($4 + [264]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [336]) = ($4 + [192])
	*($4 + [4]) = ($4 + [224])
	*($4 + [8]) = (($4 + [208]) + [48])
	*($4 + [12]) = ($4 + [260])
	*($4 + [16]) = (($4 + [208]) + [56])
	*($4 + [20]) = (($4 + [208]) + [80])
	$3 = ($4 + [300])
	*($4 + [24]) = $3
	*($4 + [28]) = (($4 + [208]) + [96])
	*($4) = ($4 + [208])
	CALL $84($4, ($4 + [336]))
	*(($8 = (($4 + [320]) + [8]))) = *($4 + [200])
	*($4 + [320]) = *($4 + [192])
	$8 = *($8)
	*((($4 + [336]) + [8])) = $8
	*(($4 + [24])) = $8
	*($4) = $0
	*($4 + [8]) = $1
	$1 = *($4 + [320])
	*($4 + [16]) = $1
	*($4 + [336]) = $1
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	CALL memcpy(($4 + [336]), ($4 + [208]), [80])
	*((($4 + [336]) + [88])) = [0]
	*($4 + [416]) = (int_64)0
	$8 = (*(($4 + [292])) - *($4 + [288]))
	$9 = ((int_32)$8 / (int_32)[40])
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((uint_32)$9 >= (uint_32)[107374183]) ){ goto $label$4 }
	$8 = CALL _Znwj($8)
	*((($4 + [336]) + [80])) = $8
	*(($10 = (($4 + [336]) + [84]))) = $8
	*(($4 + [424])) = ($8 + ((int_32)$9 * (int_32)[40]))
	$11 = *((($4 + [208]) + [80]))
	$9 = (*((($4 + [208]) + [84])) - $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $11, $9)
	*($10) = (*($10) + ((int_32)((uint_32)$9 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$5
	*((($4 + [336]) + [96])) = *(($3 + [4]))
	*($4 + [428]) = *($3)
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [336])), (int_32 $6))
	$5 = *($4 + [416])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [420])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $218($2)
	
.LABEL $label$8
	CALL $33($4)
	$2 = *(($4 + [288]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [292])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [448])
	return [1]
	
.LABEL $label$4
	CALL $189((($4 + [336]) + [80]))
	return (unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [6])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [6])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$1 }
	$5 = [67108863]
	if ( ((uint_32)int_32($4 >> [6]) > (uint_32)[33554430]) ){ goto $label$6 }
	$5 = $3
	$4 = int_32($4 >> [5])
	if ( ($4 <= $3) ){ goto $label$6 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$1 }
	
.LABEL $label$6
	$5 = ($5 << [6])
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($1)
	*(($4 + [56])) = *(($1 + [56]))
	*(($4 + [48])) = *(($1 + [48]))
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$4 = (*($0) + [64])
	*($0) = $4
	$1 = ($1 + [64])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$7 = int_32($6 >> [6])
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$8 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($8 - $1)
	if ( ($6 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$9:
	*($1) = *($4)
	*(($1 + [56])) = *(($4 + [56]))
	*(($1 + [48])) = *(($4 + [48]))
	*(($1 + [40])) = *(($4 + [40]))
	*(($1 + [32])) = *(($4 + [32]))
	*(($1 + [24])) = *(($4 + [24]))
	*(($1 + [16])) = *(($4 + [16]))
	*(($1 + [8])) = *(($4 + [8]))
	$1 = (*($0) + [64])
	*($0) = $1
	$4 = ($4 + [64])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + (int_32($6 >> [6]) << [6]))
	return (unreachable)
	
.LABEL $label$1
	CALL $189($0)
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(((($5 = $2) + [24]) + [56])) = *(($3 + [56]))
	*((($5 + [24]) + [48])) = *(($3 + [48]))
	*((($5 + [24]) + [40])) = *(($3 + [40]))
	*((($5 + [24]) + [32])) = *(($3 + [32]))
	*((($5 + [24]) + [24])) = *(($3 + [24]))
	*((($5 + [24]) + [16])) = *(($3 + [16]))
	*((($5 + [24]) + [8])) = *(($3 + [8]))
	*($5 + [24]) = *($3)
	$6 = ($1 + [8])
	CALL $123($6, ($5 + [24]), ($5 + [88]))
	*($1 + [20]) = [0]
	$7 = ($1 + [21])
	$8 = ($1 + [20])
	$10 = *($1 + [8])
	$9 = *(($1 + [12]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [6]))
	$3 = [68]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	$3 = (((int_32)uint_32(($11 + [-64]) >> [6]) * (int_32)[60]) + $3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-60])
	
.LABEL $label$2
	$9 = ($3 + [2])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$3 = CALL $215($9)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [88]) = ($5 + [8])
	*($5 + [28]) = $6
	*($5 + [24]) = $1
	*($5 + [32]) = $8
	*($5 + [36]) = $7
	CALL $81(($5 + [24]), ($5 + [88]))
	$12 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)4229880090286096384, *(*($0 + [8])), $12, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$12 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $218($3)
	if ( (uint_64)($12 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [96])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10784])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$2 = *($4)
	$7 = CALL $212([8231])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$2 }
	if ( (CALL $179($4, [0], [-1], [8231], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8329])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8346])
	$7 = CALL $169(($5 + [144]), $4, [0], CALL $178($4, [58], [0]), $4)
	$2 = CALL $180($7, [0], [10])
	if ( ((*($5 + [144]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$8
	$9 = CALL $169(($5 + [208]), $4, (CALL $178($4, [58], [0]) + [1]), [-1], $4)
	$2 = ($2 + [-1])
	if ( ((uint_32)$2 > (uint_32)[4]) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$23
	*($5 + [184]) = (int_64)0
	$2 = CALL $168(($5 + [168]), $9)
	CALL $34($0, $2, ($5 + [200]), ($5 + [196]), ($5 + [184]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$24
	*(($2 = (($5 + [128]) + [8]))) = *(($3 + [8]))
	*($5 + [128]) = *($3)
	$6 = *($0 + [8])
	$8 = *($2)
	*((($5 + [224]) + [8])) = $8
	*((($5 + [144]) + [8])) = $8
	*($5 + [160]) = $6
	$6 = *($5 + [128])
	*($5 + [144]) = $6
	*($5 + [224]) = $6
	CALL $35($0, $1, ($5 + [144]), ($5 + [200]), ($5 + [196]), ($5 + [184]))
	if ( (*($5 + [208]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$22
	CALL eosio_assert([0], [8601])
	if ( (*($5 + [208]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$21
	*($5 + [152]) = [0]
	*($5 + [144]) = (int_64)0
	$2 = CALL $168(($5 + [112]), $9)
	CALL $36($0, $2, ($5 + [200]), ($5 + [184]), ($5 + [196]), ($5 + [124]), ($5 + [224]), ($5 + [144]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$25
	$2 = CALL $212([8378])
	if ( ($2 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [10391])
	goto $label$16 
	
.LABEL $label$20
	$1 = [0]
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$14 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$6 = $8
	$7 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$26 }
	goto $label$14 
	
.LABEL $label$27
	$6 = $8
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $7 ){ goto $label$28 }
	$7 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$26 }
	goto $label$14 
	
.LABEL $label$19
	$1 = [0]
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$6 = $8
	$7 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$29 }
	goto $label$12 
	
.LABEL $label$30
	$6 = $8
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $7 ){ goto $label$31 }
	$7 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$29 }
	goto $label$12 
	
.LABEL $label$18
	*($5 + [200]) = CALL $184($9, [0], [10])
	*(($2 = ($5 + [8]))) = *(($3 + [8]))
	*($5) = *($3)
	$6 = *($0 + [8])
	$8 = *($2)
	*((($5 + [224]) + [8])) = $8
	*((($5 + [144]) + [8])) = $8
	*($5 + [160]) = $6
	$6 = *($5)
	*($5 + [144]) = $6
	*($5 + [224]) = $6
	CALL $37($0, ($5 + [200]), ($5 + [144]))
	if ( (*($5 + [208]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$17
	if ( ($2 == 0) ){ goto $label$11 }
	
.LABEL $label$16
	$6 = (int_64)0
	
.LOOP $label$32:
	$7 = *(($2 + [8377]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$33 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$33
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$32 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [8521])
	*($5 + [200]) = ($0 + [32])
	$2 = CALL read_transaction([0], [0])
	$7 = CALL $215($2)
	CALL read_transaction($7, $2)
	CALL sha256($7, $2, ($5 + [80]))
	*($5 + [224]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($5 + [81]) << (int_64)48) | (int_64)((int_64)*($5 + [80]) << (int_64)56)) | (int_64)((int_64)*($5 + [82]) << (int_64)40)) | (int_64)((int_64)*($5 + [83]) << (int_64)32)) | (int_64)((int_64)*($5 + [84]) << (int_64)24)) | (int_64)((int_64)*($5 + [85]) << (int_64)16)) | (int_64)((int_64)*($5 + [86]) << (int_64)8)) + (int_64)*($5 + [87]))
	CALL $38(($5 + [144]), ($5 + [200]), ($5 + [224]))
	$2 = *($5 + [148])
	if ( ($2 == 0) ){ goto $label$34 }
	$1 = ( $2 ? [0] : ((int_64)*($5 + [224]) == (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($2 + [17])) << (int_64)48) | (int_64)((int_64)*($2 + [16]) << (int_64)56)) | (int_64)((int_64)*(($2 + [18])) << (int_64)40)) | (int_64)((int_64)*(($2 + [19])) << (int_64)32)) | (int_64)((int_64)*(($2 + [20])) << (int_64)24)) | (int_64)((int_64)*(($2 + [21])) << (int_64)16)) | (int_64)((int_64)*(($2 + [22])) << (int_64)8)) + (int_64)*(($2 + [23])))) )
	
.LABEL $label$34
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [8544])
	*(($2 = (($5 + [64]) + [8]))) = *(($3 + [8]))
	*($5 + [64]) = *($3)
	$6 = *($0 + [8])
	$8 = *($2)
	*((($5 + [224]) + [8])) = $8
	*((($5 + [144]) + [8])) = $8
	*($5 + [160]) = $6
	$6 = *($5 + [64])
	*($5 + [144]) = $6
	*($5 + [224]) = $6
	CALL $37($0, $1, ($5 + [144]))
	if ( (*($5 + [208]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$13
	$7 = [0]
	
.LABEL $label$12
	CALL eosio_assert($7, [8576])
	*($5 + [200]) = ($0 + [32])
	$2 = CALL read_transaction([0], [0])
	$7 = CALL $215($2)
	CALL read_transaction($7, $2)
	CALL sha256($7, $2, ($5 + [32]))
	*($5 + [224]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($5 + [33]) << (int_64)48) | (int_64)((int_64)*($5 + [32]) << (int_64)56)) | (int_64)((int_64)*($5 + [34]) << (int_64)40)) | (int_64)((int_64)*($5 + [35]) << (int_64)32)) | (int_64)((int_64)*($5 + [36]) << (int_64)24)) | (int_64)((int_64)*($5 + [37]) << (int_64)16)) | (int_64)((int_64)*($5 + [38]) << (int_64)8)) + (int_64)*($5 + [39]))
	CALL $38(($5 + [144]), ($5 + [200]), ($5 + [224]))
	$2 = *($5 + [148])
	if ( ($2 == 0) ){ goto $label$35 }
	$1 = ( $2 ? [0] : ((int_64)*($5 + [224]) == (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($2 + [17])) << (int_64)48) | (int_64)((int_64)*($2 + [16]) << (int_64)56)) | (int_64)((int_64)*(($2 + [18])) << (int_64)40)) | (int_64)((int_64)*(($2 + [19])) << (int_64)32)) | (int_64)((int_64)*(($2 + [20])) << (int_64)24)) | (int_64)((int_64)*(($2 + [21])) << (int_64)16)) | (int_64)((int_64)*(($2 + [22])) << (int_64)8)) + (int_64)*(($2 + [23])))) )
	
.LABEL $label$35
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [8544])
	*(($2 = (($5 + [16]) + [8]))) = *(($3 + [8]))
	*($5 + [16]) = *($3)
	$6 = *($0 + [8])
	$8 = *($2)
	*((($5 + [224]) + [8])) = $8
	*((($5 + [144]) + [8])) = $8
	*($5 + [160]) = $6
	$6 = *($5 + [16])
	*($5 + [144]) = $6
	*($5 + [224]) = $6
	CALL $39($0, $1, ($5 + [144]))
	if ( (*($5 + [208]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$11
	$6 = (int_64)4
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [8384])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)-3665743571254938512), [8425])
	$10 = ($0 + [112])
	$6 = *($1)
	$7 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$37 }
	
.LOOP $label$39:
	$2 = ($7 + [-24])
	$11 = *($2)
	if ( ((int_64)*($11) == (int_64)$6) ){ goto $label$38 }
	$7 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$10), [10654])
	goto $label$36 
	
.LABEL $label$37
	$2 = CALL db_find_i64(*($10), *(($0 + [120])), (int_64)-4157748382292508672, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$40 }
	CALL eosio_assert(((int_32)*(CALL $40($10, $2) + [8]) == (int_32)$10), [10654])
	goto $label$36 
	
.LABEL $label$40
	$2 = CALL $212([8378])
	if ( ($2 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [10391])
	goto $label$43 
	
.LABEL $label$44
	if ( ($2 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$6 = (int_64)0
	
.LOOP $label$45:
	$7 = *(($2 + [8377]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [10436])
	
.LABEL $label$46
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$45 }
	$12 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$41 
	
.LABEL $label$42
	$12 = (int_64)4
	
.LABEL $label$41
	CALL eosio_assert([1], [10548])
	$6 = (uint_64)$12 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$6 = $8
	$7 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$6 = $8
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $7 ){ goto $label$51 }
	$7 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$7 = [0]
	
.LABEL $label$47
	CALL eosio_assert($7, [10597])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$12), [10489])
	CALL eosio_assert(((int_64)*($3) > (int_64)999999), [8480])
	
.LABEL $label$36
	CALL $41($0, $1, ($5 + [200]), ($5 + [184]), ($5 + [196]), ($5 + [124]), ($5 + [224]), ($5 + [144]))
	$2 = *($5 + [144])
	if ( ($2 == 0) ){ goto $label$52 }
	*($5 + [148]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$52
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$9
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [240])
	$2
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [6])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[67108864]) ){ goto $label$3 }
	$6 = [67108863]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$6 = int_32($7 >> [5])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [6]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $189($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [6])))) = *($1)
	*(($4 + [56])) = *(($1 + [56]))
	*(($4 + [48])) = *(($1 + [48]))
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [6]))
	$4 = ($4 + [64])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = *(($1 + [12]))
	$2 = *($1 + [8])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = *(*($0))
	
.LOOP $label$3:
	if ( ((int_32)*($2) == (int_32)$4) ){ goto $label$2 }
	$2 = ($2 + [64])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$3 = *($0 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($2 + [16]))), [10981])
	$5 = ((int_64)*($2 + [8]) + (int_64)*($3))
	*($2 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [11043])
	$3 = *($0 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($2 + [40]))), [10981])
	$5 = ((int_64)*($2 + [32]) + (int_64)*($3))
	*($2 + [32]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [11043])
	*($2 + [56]) = ((int_64)*($2 + [56]) + (int_64)*(*($0 + [12])))
	return 
	
.LABEL $label$1
	$2 = *($0 + [16])
	if ( ((int_32)$3 == (int_32)*(($1 + [16]))) ){ goto $label$4 }
	*($3) = *($2)
	*(($3 + [56])) = *(($2 + [56]))
	*(($3 + [48])) = *(($2 + [48]))
	*(($3 + [40])) = *(($2 + [40]))
	*(($3 + [32])) = *(($2 + [32]))
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*(($3 + [8])) = *(($2 + [8]))
	*(($2 = ($1 + [12]))) = (*($2) + [64])
	*(*($0 + [20])) = [1]
	return 
	
.LABEL $label$4
	CALL $126(($1 + [8]), $2)
	*(*($0 + [20])) = [1]
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [6]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10784])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [10784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2 + [8]) = *(($7 + [16]))
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($7 + [24]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($7 + [32]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2 + [8]) = *(($7 + [40]))
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($7 + [48]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($7 + [56]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [64])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$12(*($1)), [9566])
	$3 = ($0 + [72])
	$4 = *($1)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$3), [10654])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-5001621369000034304, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $58($3, $7)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$3), [10654])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [9591])
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$13()), [10733])
	*(($7 = CALL _Znwj([24])) + [8]) = $3
	*($7) = *($1)
	CALL eosio_assert([1], [10784])
	CALL memcpy(($2 + [16]), $7, [8])
	$4 = *($7)
	$8 = CALL db_store_i64(*(($0 + [80])), (int_64)-5001621369000034304, $9, $4, ($2 + [16]), [8])
	*($7 + [12]) = $8
	$6 = ($0 + [88])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $7
	$4 = *($7)
	*($2 + [16]) = $4
	*($2 + [4]) = $8
	$5 = ($0 + [100])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$8 }
	*($6 + [8]) = $4
	*($6 + [16]) = $8
	*($2 + [8]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59(($0 + [96]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [136])) = [0]
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [140]) = [0]
	*($3 + [104]) = *($0)
	*($3 + [112]) = *($1)
	*($3 + [96]) = ($3 + [104])
	CALL $74(($3 + [40]), ($3 + [96]), $2)
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)*($4 + [8])) ){ goto $label$1 }
	CALL $74(($3 + [176]), ($3 + [96]), $2)
	CALL $75(($3 + [88]), ($3 + [96]), $2)
	$4 = *($3 + [180])
	if ( ((int_32)$4 == (int_32)*($3 + [92])) ){ goto $label$1 }
	$5 = ($3 + [81])
	$6 = (($3 + [40]) + [40])
	$7 = (($3 + [40]) + [24])
	$8 = (($3 + [40]) + [16])
	$9 = (($3 + [40]) + [8])
	$10 = ($3 + [28])
	$11 = ($3 + [36])
	$12 = ($3 + [164])
	
.LOOP $label$2:
	*($6) = *(($4 + [40]))
	*((($3 + [40]) + [32])) = *(($4 + [32]))
	*($7) = *(($4 + [24]))
	*($8) = *(($4 + [16]))
	*($9) = *(($4 + [8]))
	*($3 + [40]) = *($4)
	$13 = *($3 + [176])
	*($3) = $13
	$4 = (CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$4) != (int_32)[0]), [11655])
	CALL $76($3)
	CALL $77(*($3 + [96]), $4)
	*($3 + [176]) = *($3)
	*(($3 + [8])) = (int_64)6761208896415361216
	*(($14 = ($3 + [16]))) = (int_64)0
	*(($15 = ($3 + [24]))) = [0]
	$13 = *($0)
	*($3) = $13
	$4 = CALL _Znwj([16])
	*($14) = $4
	*($4) = $13
	*($4 + [8]) = (int_64)3617214756542218240
	*($10) = (int_64)0
	*($11) = [0]
	$4 = ($4 + [16])
	*($15) = $4
	*(($15 = ($3 + [20]))) = $4
	CALL $72($10, [38])
	$4 = *($10)
	$16 = ($3 + [32])
	*((($3 + [192]) + [8])) = *($16)
	*($3 + [196]) = $4
	*($3 + [192]) = $4
	*($3 + [144]) = ($3 + [192])
	*((($3 + [152]) + [8])) = $8
	*($12) = $7
	*((($3 + [152]) + [16])) = $6
	*((($3 + [152]) + [20])) = $5
	*($3 + [156]) = $9
	*($3 + [152]) = ($3 + [40])
	CALL $78(($3 + [152]), ($3 + [144]))
	CALL $53(($3 + [152]), $3)
	$4 = *($3 + [152])
	CALL send_inline($4, (*($3 + [156]) - $4))
	$4 = *($3 + [152])
	if ( ($4 == 0) ){ goto $label$3 }
	*($3 + [156]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$4 = *($10)
	if ( ($4 == 0) ){ goto $label$4 }
	*($16) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($14)
	if ( ($4 == 0) ){ goto $label$5 }
	*($15) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($3 + [180])
	if ( ((int_32)$4 != (int_32)*($3 + [92])) ){ goto $label$2 }
	
.LABEL $label$1
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$13 = *($0)
	*($3 + [40]) = $13
	$17 = *($1)
	*($3 + [48]) = $17
	$4 = CALL db_find_i64($13, $17, (int_64)4229880090286096384, *($2))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $79(($3 + [40]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [40])), [10654])
	if ( (*($4 + [20]) == 0) ){ goto $label$6 }
	if ( (*($4 + [21]) == 0) ){ goto $label$6 }
	*((($3 + [152]) + [12])) = (int_64)0
	*($3 + [160]) = [0]
	*($3 + [152]) = *($4)
	$14 = ($3 + [160])
	$10 = (*(($4 + [12])) - *($4 + [8]))
	if ( ($10 == 0) ){ goto $label$10 }
	$6 = int_32($10 >> [6])
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$9 }
	$10 = CALL _Znwj($10)
	*((($3 + [152]) + [8])) = $10
	*(($3 + [168])) = ($10 + ($6 << [6]))
	*(($6 = (($3 + [152]) + [12]))) = $10
	$8 = *(($4 + [8]))
	$7 = (*(($4 + [12])) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($10, $8, $7)
	*($6) = (*($6) + $7)
	
.LABEL $label$10
	*($3 + [172]) = *(($4 + [20]))
	CALL eosio_assert([1], [11655])
	CALL eosio_assert([1], [11621])
	$10 = CALL db_next_i64(*($4 + [28]), $3)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$11 }
	CALL $79(($3 + [40]), $10)
	
.LABEL $label$11
	$10 = (($3 + [152]) + [20])
	CALL $80(($3 + [40]), $4)
	*($3 + [8]) = (int_64)6761208896257458176
	$13 = *($0)
	*($3) = $13
	*(($4 = CALL _Znwj([16]))) = $13
	*($4 + [8]) = (int_64)3617214756542218240
	*(($3 + [36])) = [0]
	$6 = ($4 + [16])
	*(($3 + [24])) = $6
	*(($3 + [20])) = $6
	*($3 + [16]) = $4
	*($3 + [28 align=4]) = (int_64)0
	$7 = *(($3 + [160]))
	$6 = *(($3 + [164]))
	$8 = ($6 - $7)
	$13 = (CASTING uint_64)(uint_32 int_32($8 >> [6]))
	$9 = ($3 + [28])
	$4 = [68]
	
.LOOP $label$12:
	$4 = ($4 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$14 }
	$4 = ((((int_32)uint_32(($8 + [-64]) >> [6]) * (int_32)[60]) + $4) + [2])
	if ( ($4 == 0) ){ goto $label$13 }
	goto $label$8 
	
.LABEL $label$14
	$4 = (($4 + [-60]) + [2])
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$13
	$6 = [0]
	$4 = [0]
	goto $label$7 
	
.LABEL $label$9
	CALL $189($14)
	
.LABEL $label$8
	CALL $72($9, $4)
	$6 = *(($3 + [32]))
	$4 = *(($3 + [28]))
	
.LABEL $label$7
	*($3 + [180]) = $4
	*($3 + [176]) = $4
	*($3 + [184]) = $6
	*($3 + [88]) = ($3 + [176])
	*($3 + [196]) = $14
	*($3 + [200]) = $10
	*($3 + [204]) = ($3 + [173])
	*($3 + [192]) = ($3 + [152])
	CALL $81(($3 + [192]), ($3 + [88]))
	CALL $53(($3 + [192]), $3)
	$4 = *($3 + [192])
	CALL send_inline($4, (*($3 + [196]) - $4))
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$15 }
	*($3 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($3 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$4 = *($3 + [160])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [164])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$6 = *($3 + [64])
	if ( ($6 == 0) ){ goto $label$18 }
	$7 = ($3 + [68])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$10 = *($4)
	*($4) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	$14 = *($10 + [8])
	if ( ($14 == 0) ){ goto $label$23 }
	*(($10 + [12])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$23
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($3 + [64]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $6
	
.LABEL $label$19
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$14 = *($3 + [128])
	if ( ($14 == 0) ){ goto $label$24 }
	$6 = ($3 + [132])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$10 = *($4)
	*($4) = [0]
	if ( ($10 == 0) ){ goto $label$28 }
	CALL _ZdlPv($10)
	
.LABEL $label$28
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [128]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $14
	
.LABEL $label$25
	*($6) = $14
	CALL _ZdlPv($4)
	
.LABEL $label$24
	$global$0 = ($3 + [208])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [336])
	$global$0 = $2
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$2 }
	CALL require_auth(*($0))
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(CALL $64($0), [9946])
	
.LABEL $label$1
	CALL $46($0, $1)
	$3 = ($0 + [32])
	$4 = CALL $43($3, *($1), [8614])
	CALL memcpy(($2 + [160]), $4, [120])
	$5 = [0]
	*(($2 + [288])) = [0]
	*($2 + [280]) = (int_64)0
	$6 = (*(($4 + [124])) - *($4 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	$8 = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$6 }
	$8 = CALL _Znwj($6)
	*((($2 + [160]) + [120])) = $8
	*(($2 + [288])) = ($8 + ((int_32)$7 * (int_32)[72]))
	*(($6 = (($2 + [160]) + [124]))) = $8
	$7 = *(($4 + [120]))
	$5 = (*(($4 + [124])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($8, $7, $5)
	$5 = ($8 + ((int_32)((uint_32)$5 / (uint_32)[72]) * (int_32)[72]))
	*($6) = $5
	goto $label$7 
	
.LABEL $label$8
	$5 = $8
	
.LABEL $label$7
	*((($2 + [160]) + [145])) = *(($4 + [145]))
	*((($2 + [160]) + [140])) = *(($4 + [140]))
	*($2 + [292 align=4]) = *($4 + [132 align=4])
	$4 = *($2 + [296])
	CALL eosio_assert(((($4 + [-1]) & [255]) <= [2]), [9963])
	$9 = *($2 + [256])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [10007])
	$10 = *(($2 + [272]))
	$11 = *(($2 + [264]))
	if ( ((int_32)$4 != (int_32)[2]) ){ goto $label$9 }
	$12 = (int_64)0
	$13 = (int_64)0
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$10 }
	$13 = (int_64)0
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*(($8 + [40])) == (int_64)$13), [10981])
	$12 = ((int_64)*(($8 + [32])) + (int_64)$12)
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [11043])
	$8 = ($8 + [72])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$13 = *(($8 + [40]))
	$12 = *(($8 + [32]))
	$8 = ($8 + [72])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$13 == (int_64)$11), [11088])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - $12)) > (int_64)-4611686018427387904), [11136])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11158])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [10007])
	
.LABEL $label$9
	*(($2 + [152])) = [0]
	*($2 + [144]) = (int_64)0
	$8 = CALL $212([9902])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$16 }
	*($2 + [144]) = ($8 << [1])
	$4 = (($2 + [144]) | [1])
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$5 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [144]) = ($5 | [1])
	*($2 + [152]) = $4
	*($2 + [148]) = $8
	
.LABEL $label$15
	CALL memcpy($4, [9902], $8)
	
.LABEL $label$14
	$5 = [0]
	*(($4 + $8)) = [0]
	CALL $185(($2 + [128]), *($1))
	$8 = *($2 + [128])
	$4 = ($8 & [1])
	CALL $176(($2 + [144]), ( *($2 + [136]) ? (($2 + [128]) | [1]) : $4 ), ( *($2 + [132]) ? uint_32($8 >> [1]) : $4 ))
	CALL $175(($2 + [144]), [10024])
	$12 = *($2 + [304])
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$20 }
	$4 = *([0] + [11584])
	
.LOOP $label$22:
	*((($2 + [24]) + ($8 = $5))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$12 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$5 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$21 }
	$12 = ((int_64)$12 << (int_64)5)
	if ( ((int_64)$12 != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($2 + [96])) = [0]
	*($2 + [88]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [88]) = ($5 << [1])
	$4 = (($2 + [88]) | [1])
	goto $label$18 
	
.LABEL $label$20
	*(($2 + [96])) = [0]
	*($2 + [88]) = (int_64)0
	*($2 + [88]) = [0]
	$8 = (($2 + [88]) | [1])
	$5 = $8
	goto $label$17 
	
.LABEL $label$19
	$6 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [88]) = ($6 | [1])
	*($2 + [96]) = $4
	*($2 + [92]) = $5
	
.LABEL $label$18
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$23:
	*(($4 + $8)) = *((($2 + [24]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$23 }
	$5 = ($4 + $5)
	$8 = (($2 + [88]) | [1])
	
.LABEL $label$17
	*($5) = [0]
	$5 = *($2 + [88])
	$4 = ($5 & [1])
	CALL $176(($2 + [144]), ( *($2 + [96]) ? $8 : $4 ), ( *($2 + [92]) ? uint_32($5 >> [1]) : $4 ))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($2 + [96])))
	
.LABEL $label$24
	CALL $175(($2 + [144]), [10035])
	*($2 + [80]) = (int_64)3617214756542218240
	$12 = *($0)
	*($2 + [72]) = $12
	*(($2 + [48])) = $11
	*($2 + [24]) = $12
	*($2 + [40]) = $9
	*($2 + [32]) = *(($2 + [304]))
	CALL $168(($2 + [56]), ($2 + [144]))
	$8 = CALL $52(($2 + [88]), ($2 + [72]), $10, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $53(($2 + [320]), $8)
	$5 = *($2 + [320])
	CALL send_inline($5, (*($2 + [324]) - $5))
	$5 = *($2 + [320])
	if ( ($5 == 0) ){ goto $label$25 }
	*($2 + [324]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$26 }
	*(($8 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$26
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$27 }
	*(($8 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$28
	$12 = *($1)
	$5 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$30 }
	
.LOOP $label$32:
	$8 = ($5 + [-24])
	$4 = *($8)
	if ( ((int_64)*($4) == (int_64)$12) ){ goto $label$31 }
	$5 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*(($4 + [156])) == (int_32)$3), [10654])
	goto $label$29 
	
.LABEL $label$30
	$4 = [0]
	$8 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)7391968480164052992, $12)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$29 }
	$4 = CALL $65($3, $8)
	CALL eosio_assert(((int_32)*($4 + [156]) == (int_32)$3), [10654])
	
.LABEL $label$29
	$12 = *($0)
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [10790])
	CALL $66($3, $4, $12)
	if ( ((int_32)*(($2 + [296])) != (int_32)[2]) ){ goto $label$33 }
	if ( ((int_64)*($2 + [232]) < (int_64)1) ){ goto $label$33 }
	CALL $172(($2 + [144]), [9902])
	CALL $185(($2 + [8]), *($1))
	$8 = *($2 + [8])
	$5 = ($8 & [1])
	CALL $176(($2 + [144]), ( *($2 + [16]) ? (($2 + [8]) | [1]) : $5 ), ( *($2 + [12]) ? uint_32($8 >> [1]) : $5 ))
	CALL $175(($2 + [144]), [10024])
	$12 = *(($2 + [304]))
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$37 }
	$5 = [0]
	$6 = *([0] + [11584])
	
.LOOP $label$39:
	*((($2 + [24]) + ($8 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$12 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$5 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$38 }
	$12 = ((int_64)$12 << (int_64)5)
	if ( ((int_64)$12 != (int_64)0) ){ goto $label$39 }
	
.LABEL $label$38
	*(($2 + [96])) = [0]
	*($2 + [88]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$36 }
	*($2 + [88]) = ($5 << [1])
	$6 = (($2 + [88]) | [1])
	goto $label$35 
	
.LABEL $label$37
	*(($2 + [96])) = [0]
	*($2 + [88]) = (int_64)0
	*($2 + [88]) = [0]
	$5 = (($2 + [88]) | [1])
	$6 = $5
	goto $label$34 
	
.LABEL $label$36
	$1 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($1)
	*($2 + [88]) = ($1 | [1])
	*($2 + [96]) = $6
	*($2 + [92]) = $5
	
.LABEL $label$35
	$1 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$40:
	*(($6 + $8)) = *((($2 + [24]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$40 }
	$6 = ($6 + $5)
	$5 = (($2 + [88]) | [1])
	
.LABEL $label$34
	$8 = ($2 + [232])
	*($6) = [0]
	$6 = *($2 + [88])
	$1 = ($6 & [1])
	CALL $176(($2 + [144]), ( *($2 + [96]) ? $5 : $1 ), ( *($2 + [92]) ? uint_32($6 >> [1]) : $1 ))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($2 + [96])))
	
.LABEL $label$41
	CALL $175(($2 + [144]), [10044])
	*($2 + [80]) = (int_64)3617214756542218240
	$12 = *($0)
	*($2 + [72]) = $12
	$13 = *(($2 + [248]))
	*(($2 + [48])) = *(($8 + [8]))
	*($2 + [24]) = $12
	*($2 + [32]) = *(($2 + [304]))
	*($2 + [40]) = *($8)
	CALL $168(($2 + [56]), ($2 + [144]))
	$8 = CALL $52(($2 + [88]), ($2 + [72]), $13, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $53(($2 + [320]), $8)
	$5 = *($2 + [320])
	CALL send_inline($5, (*($2 + [324]) - $5))
	$5 = *($2 + [320])
	if ( ($5 == 0) ){ goto $label$42 }
	*($2 + [324]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$42
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$43 }
	*(($8 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$43
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$44 }
	*(($8 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$44
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$45
	$12 = *($0)
	CALL eosio_assert($7, [10790])
	CALL $67($3, $4, $12)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$33
	if ( (*($2 + [128]) & [1]) ){ goto $label$47 }
	if ( (*($2 + [144]) & [1]) ){ goto $label$46 }
	goto $label$5 
	
.LABEL $label$47
	CALL _ZdlPv(*(($2 + [136])))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$46
	CALL _ZdlPv(*($2 + [152]))
	$8 = *($2 + [280])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$13
	CALL $167(($2 + [144]))
	
.LABEL $label$6
	CALL $189((($2 + [160]) + [120]))
	
.LABEL $label$5
	$8 = *($2 + [280])
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	*(($2 + [284])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$global$0 = ($2 + [336])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10728])
	CALL memcpy(($4 + [192]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	*($4 + [200]) = *($4 + [192])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [200])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $218($2)
	
.LABEL $label$5
	CALL $33($4)
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [336])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL $46($0, $2)
	$4 = CALL $43(($0 + [32]), *($2), [8614])
	CALL memcpy(($3 + [160]), $4, [120])
	*(($3 + [288])) = [0]
	$5 = (int_64)0
	*($3 + [280]) = (int_64)0
	$6 = (*(($4 + [124])) - *($4 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$4 }
	$6 = CALL _Znwj($6)
	*((($3 + [160]) + [120])) = $6
	*(($3 + [288])) = ($6 + ((int_32)$7 * (int_32)[72]))
	*(($8 = (($3 + [160]) + [124]))) = $6
	$9 = *(($4 + [120]))
	$7 = (*(($4 + [124])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $9, $7)
	*($8) = ($6 + ((int_32)((uint_32)$7 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$5
	*((($3 + [160]) + [145])) = *(($4 + [145]))
	*((($3 + [160]) + [140])) = *(($4 + [140]))
	*($3 + [292 align=4]) = *($4 + [132 align=4])
	CALL eosio_assert(((int_32)*($3 + [296]) == (int_32)[2]), [9778])
	CALL $48(($3 + [136]), $0, $1, $2, [9809])
	CALL eosio_assert(((int_32)*($3 + [156]) ^ (int_32)[1]), [9837])
	CALL eosio_assert(((int_32)*($3 + [157]) ^ (int_32)[1]), [9870])
	$10 = (int_64)0
	$11 = (int_64)0
	$12 = (int_64)0
	$6 = *(($3 + [148]))
	$4 = *($3 + [144])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$6 }
	$10 = (int_64)0
	$5 = (int_64)0
	
.LOOP $label$8:
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)$10), [10981])
	$5 = ((int_64)*(($4 + [8])) + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [11043])
	$4 = ($4 + [64])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$10 = *(($4 + [16]))
	$5 = *(($4 + [8]))
	$4 = ($4 + [64])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = *(($3 + [148]))
	$4 = *(($3 + [144]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$10 }
	$11 = (int_64)0
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*(($4 + [40])) == (int_64)$11), [10981])
	$12 = ((int_64)*(($4 + [32])) + (int_64)$12)
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [11043])
	$4 = ($4 + [64])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$12
	$11 = *(($4 + [40]))
	$12 = *(($4 + [32]))
	$4 = ($4 + [64])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$10
	$11 = (int_64)0
	$12 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [10981])
	$12 = ((int_64)$12 + (int_64)$5)
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [11043])
	*(($3 + [128])) = [0]
	*($3 + [120]) = (int_64)0
	$4 = CALL $212([9902])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [120]) = ($4 << [1])
	$7 = (($3 + [120]) | [1])
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($3 + [120]) = ($6 | [1])
	*($3 + [128]) = $7
	*($3 + [124]) = $4
	
.LABEL $label$15
	CALL memcpy($7, [9902], $4)
	
.LABEL $label$14
	$6 = [0]
	*(($7 + $4)) = [0]
	CALL $185(($3 + [104]), *($2))
	$4 = *($3 + [104])
	$7 = ($4 & [1])
	CALL $176(($3 + [120]), ( *($3 + [112]) ? (($3 + [104]) | [1]) : $7 ), ( *($3 + [108]) ? uint_32($4 >> [1]) : $7 ))
	CALL $175(($3 + [120]), [9912])
	$5 = *($1)
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$20 }
	$7 = *([0] + [11584])
	
.LOOP $label$22:
	*(($3 + ($4 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$6 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$21 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($3 + [64]) = ($6 << [1])
	$7 = (($3 + [64]) | [1])
	goto $label$18 
	
.LABEL $label$20
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [64]) = [0]
	$4 = (($3 + [64]) | [1])
	$6 = $4
	goto $label$17 
	
.LABEL $label$19
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($3 + [64]) = ($8 | [1])
	*($3 + [72]) = $7
	*($3 + [68]) = $6
	
.LABEL $label$18
	$8 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$23:
	*(($7 + $4)) = *(($3 + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$23 }
	$6 = ($7 + $6)
	$4 = (($3 + [64]) | [1])
	
.LABEL $label$17
	*($6) = [0]
	$6 = *($3 + [64])
	$7 = ($6 & [1])
	CALL $176(($3 + [120]), ( *($3 + [72]) ? $4 : $7 ), ( *($3 + [68]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$24
	CALL $175(($3 + [120]), [9922])
	*($3 + [56]) = (int_64)3617214756542218240
	$5 = *($0)
	*($3 + [48]) = $5
	*(($3 + [24])) = $10
	*($3) = $5
	*($3 + [16]) = $12
	*($3 + [8]) = *($1)
	CALL $168(($3 + [32]), ($3 + [120]))
	$4 = CALL $52(($3 + [64]), ($3 + [48]), (int_64)-3665743571254938512, (int_64)-3617168760277827584, $3)
	CALL $53(($3 + [320]), $4)
	$6 = *($3 + [320])
	CALL send_inline($6, (*($3 + [324]) - $6))
	$6 = *($3 + [320])
	if ( ($6 == 0) ){ goto $label$25 }
	*($3 + [324]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$26 }
	*(($4 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$27 }
	*(($4 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$28
	CALL $63($0, $1, $2, [9930])
	if ( (*($3 + [104]) & [1]) ){ goto $label$30 }
	if ( (*($3 + [120]) & [1]) ){ goto $label$29 }
	goto $label$3 
	
.LABEL $label$30
	CALL _ZdlPv(*(($3 + [112])))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$29
	CALL _ZdlPv(*($3 + [128]))
	$4 = *(($3 + [144]))
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$13
	CALL $167(($3 + [120]))
	
.LABEL $label$4
	CALL $189((($3 + [160]) + [120]))
	
.LABEL $label$3
	$4 = *(($3 + [144]))
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($3 + [148])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($3 + [280])
	if ( ($4 == 0) ){ goto $label$31 }
	*(($3 + [284])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$31
	$global$0 = ($3 + [336])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10728])
	CALL memcpy(($4 + [192]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10728])
	CALL memcpy((($4 + [192]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$0 = *($4 + [192])
	*($4 + [208]) = *($4 + [200])
	*($4 + [216]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [216])), (int_32 ($4 + [208])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $218($2)
	
.LABEL $label$5
	CALL $33($4)
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($1))
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10728])
	CALL memcpy(($4 + [192]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	*($4 + [200]) = *($4 + [192])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [200])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $218($2)
	
.LABEL $label$5
	CALL $33($4)
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $185 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $173(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $201(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8710], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $173(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $173(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$12(*($1)), [9566])
	$3 = ($0 + [72])
	$4 = *($1)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10654])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-5001621369000034304, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $58($3, $1)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10654])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [9616])
	CALL eosio_assert($1, [11655])
	CALL eosio_assert($1, [11621])
	$1 = CALL db_next_i64(*($7 + [12]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $58($3, $1)
	
.LABEL $label$5
	CALL $60($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$12(*($1)), [9637])
	$3 = ($0 + [112])
	$4 = *($1)
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10654])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-4157748382292508672, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $40($3, $1)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10654])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [9681])
	CALL eosio_assert($1, [11655])
	CALL eosio_assert($1, [11621])
	$1 = CALL db_next_i64(*($7 + [12]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $40($3, $1)
	
.LABEL $label$5
	CALL $62($3, $7)
	$global$0 = ($2 + [16])
}

int_64 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $212([8418])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8418], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $191())
	*(CALL $191()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $207($4, ($3 + [12]), $2)
	$0 = CALL $191()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $181($3)
	
.LABEL $label$1
	CALL $182($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $187 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $218 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20244])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [20052]
	$3 = (((int_32)$1 * (int_32)[12]) + [20052])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $212($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $170($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $212([8238])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8238], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $191())
	*(CALL $191()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $209($4, ($3 + [12]), $2)
	$5 = CALL $191()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $181($3)
	
.LABEL $label$1
	CALL $182($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [10733])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [10784])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-5001621369012617216, $2, (int_64)-5001621369012617216, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-5001621369012617216) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-5001621369012617215
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-5001621369012617216
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-5001621369012617216
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $118(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($1) = *(*($3))
	CALL eosio_assert([1], [10922])
	CALL eosio_assert([1], [10784])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-5001621369012617216) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-5001621369012617215
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [10733])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [10784])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-5001621369012617216, $2, (int_64)-5001621369012617216, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-5001621369012617216) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-5001621369012617215
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-5001621369012617216
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-5001621369012617216
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $118(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $112 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10654])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $111($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10654])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10728])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-5001621369012617216
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-5001621369012617216
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $118(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $189($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10728])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10728])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $116(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $189($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10784])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	float_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	float_64 $19
	int_64 $20
	$3 = ($global$0 - [320])
	$global$0 = $3
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$2 }
	CALL require_auth(*($0))
	goto $label$1 
	
.LABEL $label$2
	CALL require_auth(*($1))
	
.LABEL $label$1
	CALL $46($0, $2)
	CALL $47($0, $1, $2)
	$4 = CALL $43(($0 + [32]), *($2), [8614])
	CALL memcpy(($3 + [144]), $4, [120])
	*(($3 + [272])) = [0]
	*($3 + [264]) = (int_64)0
	$5 = (*(($4 + [124])) - *($4 + [120]))
	$6 = ((int_32)$5 / (int_32)[72])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[59652324]) ){ goto $label$3 }
	$5 = CALL _Znwj($5)
	*((($3 + [144]) + [120])) = $5
	*(($3 + [272])) = ($5 + ((int_32)$6 * (int_32)[72]))
	*(($7 = (($3 + [144]) + [124]))) = $5
	$8 = *(($4 + [120]))
	$6 = (*(($4 + [124])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $8, $6)
	*($7) = ($5 + ((int_32)((uint_32)$6 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$4
	*((($3 + [144]) + [145])) = *(($4 + [145]))
	*((($3 + [144]) + [140])) = *(($4 + [140]))
	*($3 + [276 align=4]) = *($4 + [132 align=4])
	CALL $48(($3 + [120]), $0, $1, $2, [9549])
	$4 = *($3 + [264])
	$5 = $4
	$6 = *((($3 + [144]) + [124]))
	$9 = ((int_32)$4 == (int_32)$6)
	if ( $9 ){ goto $label$5 }
	$7 = *(($3 + [276]))
	$5 = $4
	
.LOOP $label$6:
	if ( ((int_32)*($5) == (int_32)$7) ){ goto $label$5 }
	$5 = ($5 + [72])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	$5 = $6
	
.LABEL $label$5
	$10 = *(($5 + [16]))
	$11 = *($5 + [56])
	$12 = *($5 + [8])
	$7 = *(($3 + [132]))
	$5 = *($3 + [128])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	$8 = *(($3 + [276]))
	
.LOOP $label$8:
	if ( ((int_32)*($5) == (int_32)$8) ){ goto $label$7 }
	$5 = ($5 + [64])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	$5 = $7
	
.LABEL $label$7
	$13 = ((float_64)(CASTING float_64)(uint_64 *($5 + [56])) / (float_64)(CASTING float_64)(uint_64 $11))
	$14 = *(($5 + [24]))
	$15 = *(($5 + [16]))
	$16 = *($5 + [8])
	if ( $9 ){ goto $label$10 }
	$17 = (int_64)0
	$18 = (int_64)0
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((int_64)$11 == (int_64)0) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)$17), [10981])
	$11 = ((int_64)*(($4 + [8])) + (int_64)$11)
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [11043])
	$4 = ($4 + [72])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$18 = *(($4 + [24]))
	$17 = *(($4 + [16]))
	$11 = *(($4 + [8]))
	$4 = ($4 + [72])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$11 = (int_64)0
	$17 = (int_64)0
	$18 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$10 == (int_64)$17), [11088])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - $12)) > (int_64)-4611686018427387904), [11136])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [11158])
	$13 = ((float_64)$13 * (float_64)(CASTING float_64)(int_64 $11))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$12 = (int_64)-9223372036854775808
	goto $label$13 
	
.LABEL $label$14
	$12 = (Rounds 0)($13)
	
.LABEL $label$13
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10548])
	$11 = (uint_64)$17 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$10 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$11 = $10
	$5 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$11 = $10
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$19 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [10597])
	CALL $49($0, $1, $2)
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$29 }
	$13 = (CASTING float_64)(uint_64 $12)
	if ( (*($3 + [296]) == 0) ){ goto $label$28 }
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	CALL $50($3, $0, $1, $2)
	*(($3 + [40])) = $17
	$4 = ($3 + [8])
	*(($3 + [56])) = *($4)
	*($4) = [0]
	*($3 + [24]) = (int_64)3631284093736285296
	$13 = ((float_64)$13 * (float_64)(float_64)0.05)
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$27 }
	$11 = (int_64)0
	goto $label$26 
	
.LABEL $label$29
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	CALL $51($3, $0, $1, $2)
	*(($3 + [40])) = $15
	$4 = ($3 + [8])
	*(($3 + [56])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $16
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($1)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$4 = CALL $52(($3 + [80]), ($3 + [64]), $14, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $53(($3 + [304]), $4)
	$5 = *($3 + [304])
	CALL send_inline($5, (*($3 + [308]) - $5))
	$5 = *($3 + [304])
	if ( ($5 == 0) ){ goto $label$30 }
	*($3 + [308]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$30
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$31 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$31
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$32 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$32
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$33
	if ( ((*($3) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [8])))
	$4 = *(($3 + [128]))
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$28
	CALL eosio_assert([1], [10981])
	$19 = ((float_64)$13 * (float_64)(float_64)0.01)
	if ( (((float_64)$19 < (float_64)(float_64)18446744073709551615) & ((float_64)$19 >= (float_64)(float_64)0)) ){ goto $label$25 }
	$11 = (int_64)0
	goto $label$24 
	
.LABEL $label$27
	$11 = (Rounds 0)($13)
	
.LABEL $label$26
	$10 = ( (int_64)1 ? $11 : (int_64)($11 == 0) )
	*($3 + [32]) = $10
	*($3 + [16]) = *($0)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$4 = CALL $52(($3 + [80]), ($3 + [64]), $18, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $53(($3 + [304]), $4)
	$5 = *($3 + [304])
	CALL send_inline($5, (*($3 + [308]) - $5))
	$5 = *($3 + [304])
	if ( ($5 == 0) ){ goto $label$34 }
	*($3 + [308]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$34
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$35 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$35
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$36 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$36
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$37
	if ( ((*($3) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [8])))
	goto $label$23 
	
.LABEL $label$25
	$11 = (Rounds 0)($19)
	
.LABEL $label$24
	$11 = ( (int_64)1 ? $11 : (int_64)($11 == 0) )
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [11043])
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	CALL $50($3, $0, $1, $2)
	*(($3 + [40])) = $17
	$4 = ($3 + [8])
	*(($3 + [56])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $11
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($3 + [288])
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$4 = CALL $52(($3 + [80]), ($3 + [64]), $18, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $53(($3 + [304]), $4)
	$5 = *($3 + [304])
	CALL send_inline($5, (*($3 + [308]) - $5))
	$5 = *($3 + [304])
	if ( ($5 == 0) ){ goto $label$38 }
	*($3 + [308]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$38
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$39 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$39
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$40 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$40
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$41
	if ( ((*($3) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$42
	CALL eosio_assert([1], [10981])
	$13 = ((float_64)$13 * (float_64)(float_64)0.04)
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$44 }
	$10 = (int_64)0
	goto $label$43 
	
.LABEL $label$44
	$10 = (Rounds 0)($13)
	
.LABEL $label$43
	$20 = ( (int_64)1 ? $10 : (int_64)($10 == 0) )
	$10 = ((int_64)$11 + (int_64)$20)
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [11043])
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	CALL $50($3, $0, $1, $2)
	*(($3 + [40])) = $17
	$4 = ($3 + [8])
	*(($3 + [56])) = *($4)
	*($4) = [0]
	*($3 + [24]) = (int_64)3631284093736285296
	*($3 + [32]) = $20
	*($3 + [16]) = *($0)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$4 = CALL $52(($3 + [80]), ($3 + [64]), $18, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $53(($3 + [304]), $4)
	$5 = *($3 + [304])
	CALL send_inline($5, (*($3 + [308]) - $5))
	$5 = *($3 + [304])
	if ( ($5 == 0) ){ goto $label$45 }
	*($3 + [308]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$45
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$46 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$46
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$47 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$47
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$48
	if ( ((*($3) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$23
	$4 = ((int_64)$17 == (int_64)$15)
	CALL eosio_assert($4, [10981])
	$11 = ((int_64)$16 + (int_64)$12)
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [11043])
	CALL eosio_assert($4, [11088])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - $10)) > (int_64)-4611686018427387904), [11136])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [11158])
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	CALL $51($3, $0, $1, $2)
	*(($3 + [40])) = $15
	$4 = ($3 + [8])
	*(($3 + [56])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $11
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($1)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$4 = CALL $52(($3 + [80]), ($3 + [64]), $14, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $53(($3 + [304]), $4)
	$5 = *($3 + [304])
	CALL send_inline($5, (*($3 + [308]) - $5))
	$5 = *($3 + [304])
	if ( ($5 == 0) ){ goto $label$49 }
	*($3 + [308]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$49
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$50 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$50
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$51 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$51
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$52
	if ( ((*($3) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$22
	$4 = *(($3 + [128]))
	if ( ($4 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	*(($3 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$4 = *(($3 + [264]))
	if ( ($4 == 0) ){ goto $label$53 }
	*(($3 + [268])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$53
	$global$0 = ($3 + [320])
	return (unreachable)
	
.LABEL $label$3
	CALL $189((($3 + [144]) + [120]))
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	float_64 $11
	int_64 $12
	$3 = ($global$0 - [304])
	$global$0 = $3
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$2 }
	CALL require_auth(*($0))
	goto $label$1 
	
.LABEL $label$2
	CALL require_auth(*($1))
	
.LABEL $label$1
	CALL $46($0, $2)
	CALL $54($0, $1, $2)
	$4 = CALL $43(($0 + [32]), *($2), [8614])
	CALL memcpy(($3 + [128]), $4, [120])
	$5 = [0]
	*(($3 + [256])) = [0]
	*($3 + [248]) = (int_64)0
	$6 = (*(($4 + [124])) - *($4 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	$8 = [0]
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$3 }
	$8 = CALL _Znwj($6)
	*((($3 + [128]) + [120])) = $8
	*(($3 + [256])) = ($8 + ((int_32)$7 * (int_32)[72]))
	*(($6 = (($3 + [128]) + [124]))) = $8
	$7 = *(($4 + [120]))
	$5 = (*(($4 + [124])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $7, $5)
	$5 = ($8 + ((int_32)((uint_32)$5 / (uint_32)[72]) * (int_32)[72]))
	*($6) = $5
	goto $label$4 
	
.LABEL $label$5
	$5 = $8
	
.LABEL $label$4
	*((($3 + [128]) + [145])) = *(($4 + [145]))
	*((($3 + [128]) + [140])) = *(($4 + [140]))
	*($3 + [260 align=4]) = *($4 + [132 align=4])
	$9 = CALL $55($0, $1, $2)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$7 }
	$10 = (int_64)0
	
.LOOP $label$8:
	$10 = ((int_64)*(($8 + [56])) + (int_64)$10)
	$8 = ($8 + [72])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$8 }
	$11 = (CASTING float_64)(uint_64 $10)
	goto $label$6 
	
.LABEL $label$7
	$11 = (float_64)0
	
.LABEL $label$6
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 $9) / (float_64)$11) * (float_64)(CASTING float_64)(int_64 *($3 + [200])))
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$10 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (Rounds 0)($11)
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$9 }
	
.LABEL $label$10
	$9 = *(($3 + [208]))
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = *($0)
	$12 = *(($3 + [216]))
	CALL $56(($3 + [8]), $0, $1, $2)
	*(($3 + [48])) = $9
	$8 = ($3 + [16])
	*(($3 + [64])) = *($8)
	*($8) = [0]
	*($3 + [40]) = $10
	*($3 + [24]) = *($0)
	*($3 + [32]) = *($1)
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$8 = CALL $52(($3 + [88]), ($3 + [72]), $12, (int_64)-3617168760277827584, ($3 + [24]))
	CALL $53(($3 + [288]), $8)
	$5 = *($3 + [288])
	CALL send_inline($5, (*($3 + [292]) - $5))
	$5 = *($3 + [288])
	if ( ($5 == 0) ){ goto $label$12 }
	*($3 + [292]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($8 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($8 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$15
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$9
	CALL $57($0, $1, $2)
	$8 = *(($3 + [248]))
	if ( ($8 == 0) ){ goto $label$16 }
	*(($3 + [252])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$global$0 = ($3 + [304])
	return (unreachable)
	
.LABEL $label$3
	CALL $189((($3 + [128]) + [120]))
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$12(*($1)), [9637])
	$3 = ($0 + [112])
	$4 = *($1)
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$3), [10654])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-4157748382292508672, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $40($3, $7)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$3), [10654])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [9659])
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$13()), [10733])
	*(($7 = CALL _Znwj([24])) + [8]) = $3
	*($7) = *($1)
	CALL eosio_assert([1], [10784])
	CALL memcpy(($2 + [16]), $7, [8])
	$4 = *($7)
	$8 = CALL db_store_i64(*(($0 + [120])), (int_64)-4157748382292508672, $9, $4, ($2 + [16]), [8])
	*($7 + [12]) = $8
	$6 = ($0 + [128])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $7
	$4 = *($7)
	*($2 + [16]) = $4
	*($2 + [4]) = $8
	$5 = ($0 + [140])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [144]))) ){ goto $label$8 }
	*($6 + [8]) = $4
	*($6 + [16]) = $8
	*($2 + [8]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $61(($0 + [136]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [208]) + [40]))) = (int_64)0
	*(($9 = (($4 + [208]) + [16]))) = (int_64)0
	*(($10 = (($4 + [208]) + [8]))) = (int_64)0
	*(($11 = (($4 + [208]) + [24]))) = (int_64)0
	*(($12 = (($4 + [208]) + [32]))) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [304]) = ($4 + [192])
	*($4 + [4]) = $10
	*($4 + [8]) = $9
	*($4 + [12]) = $11
	*($4 + [16]) = $8
	*($4 + [20]) = ($4 + [249])
	*($4) = ($4 + [208])
	CALL $83($4, ($4 + [304]))
	*(($3 = (($4 + [256]) + [8]))) = *($4 + [200])
	*($4 + [256]) = *($4 + [192])
	$14 = *($3)
	*(($13 = (($4 + [304]) + [8]))) = $14
	*(($4 + [24])) = $14
	*($4) = $0
	*($4 + [8]) = $1
	$1 = *($4 + [256])
	*($4 + [16]) = $1
	*($4 + [304]) = $1
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($14 = (($4 + [256]) + [40]))) = *($8)
	*(($8 = (($4 + [256]) + [32]))) = *($12)
	*(($12 = (($4 + [256]) + [24]))) = *($11)
	*(($11 = (($4 + [256]) + [16]))) = *($9)
	*($3) = *($10)
	*($4 + [256]) = *($4 + [208])
	*((($4 + [304]) + [40])) = *($14)
	*((($4 + [304]) + [32])) = *($8)
	*((($4 + [304]) + [24])) = *($12)
	*((($4 + [304]) + [16])) = *($11)
	*($13) = *($3)
	*($4 + [304]) = *($4 + [256])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [304])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $218($2)
	
.LABEL $label$5
	CALL $33($4)
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$1 }
	CALL require_auth(*($0))
	CALL $46($0, $1)
	return 
	
.LABEL $label$1
	CALL eosio_assert(CALL $64($0), [9946])
	CALL $46($0, $1)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [192])) = [0]
	*($2 + [176]) = (int_64)-1
	*($2 + [184]) = (int_64)0
	$3 = *($0)
	*($2 + [160]) = $3
	*($2 + [168]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)7391968479710019584, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $70(($2 + [160]), $1)
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)($2 + [160])), [10654])
	CALL memcpy(($2 + [48]), $1, [80])
	*(($2 + [136])) = [0]
	*($2 + [128]) = (int_64)0
	$4 = (*(($1 + [84])) - *($1 + [80]))
	$5 = ((int_32)$4 / (int_32)[40])
	$6 = (($2 + [48]) + [80])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$1 }
	$4 = CALL _Znwj($4)
	*((($2 + [48]) + [80])) = $4
	*(($2 + [136])) = ($4 + ((int_32)$5 * (int_32)[40]))
	*(($5 = (($2 + [48]) + [84]))) = $4
	$7 = *(($1 + [80]))
	$8 = (*(($1 + [84])) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $7, $8)
	*($5) = (*($5) + ((int_32)((uint_32)$8 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$3
	*((($2 + [48]) + [96])) = *(($1 + [96]))
	*($2 + [140]) = *($1 + [92])
	CALL eosio_assert([1], [11655])
	CALL eosio_assert([1], [11621])
	$4 = CALL db_next_i64(*($1 + [104]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $70(($2 + [160]), $4)
	
.LABEL $label$4
	$4 = ($2 + [140])
	CALL $71(($2 + [160]), $1)
	*($2 + [16]) = (int_64)6761211911982310220
	$3 = *($0)
	*($2 + [8]) = $3
	*(($1 = CALL _Znwj([16]))) = $3
	*($1 + [8]) = (int_64)3617214756542218240
	*(($2 + [44])) = [0]
	$0 = ($1 + [16])
	*(($2 + [32])) = $0
	*(($2 + [28])) = $0
	*($2 + [24]) = $1
	*($2 + [36 align=4]) = (int_64)0
	$5 = *(($2 + [128]))
	$0 = *(($2 + [132]))
	$8 = ($0 - $5)
	$3 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[40]))
	$7 = ($2 + [36])
	$1 = [72]
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$6 }
	$1 = ((((int_32)((uint_32)($8 + [-40]) / (uint_32)[40]) * (int_32)[36]) + $1) + [36])
	
.LABEL $label$6
	$1 = ($1 + [5])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $72($7, $1)
	$0 = *(($2 + [40]))
	$1 = *(($2 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$0 = [0]
	$1 = [0]
	
.LABEL $label$7
	*($2 + [204]) = $1
	*($2 + [200]) = $1
	*($2 + [208]) = $0
	*($2 + [216]) = ($2 + [200])
	*($2 + [228]) = ($2 + [64])
	*($2 + [232]) = ($2 + [96])
	*($2 + [236]) = ($2 + [100])
	*($2 + [240]) = ($2 + [104])
	*($2 + [244]) = $6
	*($2 + [248]) = $4
	*($2 + [252]) = ($2 + [144])
	*($2 + [224]) = ($2 + [48])
	CALL $73(($2 + [224]), ($2 + [216]))
	CALL $53(($2 + [224]), ($2 + [8]))
	$1 = *($2 + [224])
	CALL send_inline($1, (*($2 + [228]) - $1))
	$1 = *($2 + [224])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [228]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [36])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($2 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($2 + [24])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($2 + [128])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($2 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$5 = *($2 + [184])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [188])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	$4 = *($0 + [80])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($0 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$15 }
	$1 = *(($2 + [184]))
	goto $label$13 
	
.LABEL $label$14
	$1 = $5
	
.LABEL $label$13
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$1
	CALL $189($6)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $46($0, $1)
	$3 = [0]
	*((($2 = CALL memcpy($2, ($4 = CALL $43(($0 + [32]), *($1), [8614])), [120])) + [128])) = [0]
	*($2 + [120]) = (int_64)0
	$5 = (*(($4 + [124])) - *($4 + [120]))
	$6 = ((int_32)$5 / (int_32)[72])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[59652324]) ){ goto $label$1 }
	$3 = CALL _Znwj($5)
	*(($2 + [120])) = $3
	*(($2 + [128])) = ($3 + ((int_32)$6 * (int_32)[72]))
	*(($6 = ($2 + [124]))) = $3
	$7 = *(($4 + [120]))
	$5 = (*(($4 + [124])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $7, $5)
	*($6) = ($3 + ((int_32)((uint_32)$5 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*(($2 + [145])) = *(($4 + [145]))
	*(($2 + [140])) = *(($4 + [140]))
	*($2 + [132 align=4]) = *($4 + [132 align=4])
	$4 = *($2 + [136])
	CALL eosio_assert(((int_32)$4 != (int_32)[1]), [9699])
	CALL eosio_assert(((int_32)$4 != (int_32)[2]), [9727])
	CALL eosio_assert(($4 == 0), [9744])
	CALL $45($0, $1, [9777])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $189(($2 + [120]))
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10728])
	CALL memcpy(($4 + [192]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [10728])
	CALL memcpy($4, ($2 + [8]), [1])
	$3 = ((int_32)*($4) != (int_32)[0])
	*($4 + [200]) = $3
	*(($4 + [20])) = ($2 + [9])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$0 = *($4 + [192])
	*($4 + [215]) = $3
	*($4 + [216]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [216])), (int_32 ($4 + [215])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $218($2)
	
.LABEL $label$5
	CALL $33($4)
	$global$0 = ($4 + [224])
	return [1]
}

int_64 .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	float_64 $9
	int_64 $10
	float_64 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = [0]
	*((($6 = CALL memcpy($4, ($1 = CALL $43(($0 + [32]), *($1), [8614])), [120])) + [128])) = [0]
	*($6 + [120]) = (int_64)0
	$0 = (*(($1 + [124])) - *($1 + [120]))
	$4 = ((int_32)$0 / (int_32)[72])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[59652324]) ){ goto $label$1 }
	$5 = CALL _Znwj($0)
	*(($6 + [120])) = $5
	*(($6 + [128])) = ($5 + ((int_32)$4 * (int_32)[72]))
	*(($4 = ($6 + [124]))) = $5
	$7 = *(($1 + [120]))
	$0 = (*(($1 + [124])) - $7)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $7, $0)
	$0 = ($5 + ((int_32)((uint_32)$0 / (uint_32)[72]) * (int_32)[72]))
	*($4) = $0
	goto $label$2 
	
.LABEL $label$4
	$0 = [0]
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*(($6 + [145])) = *(($1 + [145]))
	*(($6 + [140])) = *(($1 + [140]))
	*($6 + [132 align=4]) = *($1 + [132 align=4])
	$8 = ((float_64)((float_64)(CASTING float_64)(uint_64 *($6 + [64])) / (float_64)((float_64)CALL $194($8, (float_64)-9.000000000000002) + (float_64)(float_64)-1)) * (float_64)CALL $194((float_64)10, (CASTING float_64)(uint_32 *($3 + [8]))))
	$8 = ((float_64)(CASTING float_64)(uint_32 *($6 + [60])) / (float_64)(float_64)100)
	$9 = ((float_64)((float_64)$8 * (float_64)(float_64)0.9) * (float_64)$8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	$4 = *($2)
	$10 = (int_64)0
	$1 = $5
	
.LOOP $label$8:
	$10 = ((int_64)( *(($1 + [56])) ? (int_64)0 : ((int_32)*($1) == (int_32)$4) ) + (int_64)$10)
	$1 = ($1 + [72])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$8 }
	$8 = ((float_64)$8 + (float_64)(CASTING float_64)(uint_64 $10))
	$1 = $5
	
.LOOP $label$9:
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$6 }
	$1 = ($1 + [72])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$9 }
	$11 = (float_64)0
	goto $label$5 
	
.LABEL $label$7
	$11 = (float_64)0
	$8 = ((float_64)$8 + (float_64)(float_64)0)
	goto $label$5 
	
.LABEL $label$6
	$11 = (CASTING float_64)(int_64 *(($1 + [8])))
	
.LABEL $label$5
	$8 = ((float_64)$8 * (float_64)((float_64)CALL $194(((float_64)((float_64)(CASTING float_64)(int_64 *($3)) / (float_64)((float_64)$9 + (float_64)$11)) + (float_64)(float_64)1), (float_64)0.9) + (float_64)(float_64)-1))
	if ( (((float_64)$8 < (float_64)(float_64)18446744073709551615) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$12 }
	$10 = (int_64)0
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$10 = (Rounds 0)($8)
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($6 + [124])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($6 + [160])
	return $10
	
.LABEL $label$1
	CALL $189(($6 + [120]))
	return (unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10784])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $152(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [10733])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = $1
	CALL $121(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $122(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	$6 = *($1)
	CALL $125($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10922])
	$7 = ($1 + [8])
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [6]))
	$3 = [68]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	$3 = (((int_32)uint_32(($10 + [-64]) >> [6]) * (int_32)[60]) + $3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-60])
	
.LABEL $label$2
	$8 = ($3 + [2])
	if ( ($8 <= [513]) ){ goto $label$5 }
	$3 = CALL $215($8)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [20])
	*($5 + [44]) = ($1 + [21])
	CALL $81(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [28]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $218($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($5 + [32]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	*($1 + [132]) = *(*($3))
	$6 = *($1)
	*($5 + [24]) = $6
	CALL eosio_assert([1], [10922])
	$7 = ($1 + [120])
	$8 = ($1 + [132])
	$9 = ($1 + [16])
	$11 = *($1 + [120])
	$10 = *(($1 + [124]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[72]))
	$3 = [112]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($12 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $3) + [68])
	
.LABEL $label$2
	$10 = ($3 + [14])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL $215($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [48]) = ($5 + [8])
	*($5 + [60]) = $9
	*($5 + [92]) = $7
	*($5 + [96]) = $8
	*($5 + [56]) = $1
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [52])
	*($5 + [72]) = ($1 + [56])
	*($5 + [76]) = ($1 + [60])
	*($5 + [80]) = ($1 + [64])
	*($5 + [84]) = ($1 + [72])
	*($5 + [88]) = ($1 + [96])
	*($5 + [100]) = ($1 + [136])
	*($5 + [104]) = ($1 + [144])
	*($5 + [108]) = ($1 + [152])
	CALL $128(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [160]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$5 }
	CALL $218($3)
	$6 = *($5 + [24])
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [60]) = $1
	*($5 + [68]) = $1
	*($5 + [56]) = $0
	*($5 + [64]) = ($5 + [32])
	*($5 + [72]) = ($5 + [24])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $142(($5 + [48]), ($0 + [36]))
	$global$0 = ($5 + [112])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($5 + [32]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	$6 = *($1)
	*($5 + [24]) = $6
	CALL $127($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10922])
	$7 = ($1 + [120])
	$8 = ($1 + [16])
	$10 = *($1 + [120])
	$9 = *(($1 + [124]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 ((int_32)$11 / (int_32)[72]))
	$3 = [112]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($11 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $3) + [68])
	
.LABEL $label$2
	$9 = ($3 + [14])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL $215($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [48]) = ($5 + [8])
	*($5 + [60]) = $8
	*($5 + [92]) = $7
	*($5 + [56]) = $1
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [52])
	*($5 + [72]) = ($1 + [56])
	*($5 + [76]) = ($1 + [60])
	*($5 + [80]) = ($1 + [64])
	*($5 + [84]) = ($1 + [72])
	*($5 + [88]) = ($1 + [96])
	*($5 + [96]) = ($1 + [132])
	*($5 + [100]) = ($1 + [136])
	*($5 + [104]) = ($1 + [144])
	*($5 + [108]) = ($1 + [152])
	CALL $128(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [160]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL $218($3)
	$6 = *($5 + [24])
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [60]) = $1
	*($5 + [68]) = $1
	*($5 + [56]) = $0
	*($5 + [64]) = ($5 + [32])
	*($5 + [72]) = ($5 + [24])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $129(($5 + [48]), ($0 + [36]))
	$global$0 = ($5 + [112])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($1 + [20]) = [1]
	$6 = *($1)
	CALL eosio_assert([1], [10922])
	$7 = ($1 + [8])
	$8 = ($1 + [20])
	$10 = *($1 + [8])
	$9 = *(($1 + [12]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [6]))
	$13 = [68]
	
.LOOP $label$1:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	$13 = (((int_32)uint_32(($11 + [-64]) >> [6]) * (int_32)[60]) + $13)
	goto $label$2 
	
.LABEL $label$3
	$13 = ($13 + [-60])
	
.LABEL $label$2
	$9 = ($13 + [2])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$13 = CALL $215($9)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$4
	*($5 + [12]) = $13
	*($5 + [8]) = $13
	*($5 + [16]) = ($13 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $8
	*($5 + [32]) = $1
	*($5 + [44]) = ($1 + [21])
	CALL $81(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [28]), $2, $13, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $218($13)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*(($1 + [156])) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($5 + [32]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*(($1 + [17])) << (int_64)48) | (int_64)((int_64)*($1 + [16]) << (int_64)56)) | (int_64)((int_64)*(($1 + [18])) << (int_64)40)) | (int_64)((int_64)*(($1 + [19])) << (int_64)32)) | (int_64)((int_64)*(($1 + [20])) << (int_64)24)) | (int_64)((int_64)*(($1 + [21])) << (int_64)16)) | (int_64)((int_64)*(($1 + [22])) << (int_64)8)) + (int_64)*(($1 + [23])))
	$6 = *($1)
	*($5 + [24]) = $6
	*($1 + [136]) = *(*($3))
	CALL eosio_assert([1], [10922])
	$7 = ($1 + [120])
	$8 = ($1 + [136])
	$9 = ($1 + [16])
	$11 = *($1 + [120])
	$10 = *(($1 + [124]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[72]))
	$3 = [112]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($12 + [-72]) / (uint_32)[72]) * (int_32)[68]) + $3) + [68])
	
.LABEL $label$2
	$10 = ($3 + [14])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL $215($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [48]) = ($5 + [8])
	*($5 + [60]) = $9
	*($5 + [92]) = $7
	*($5 + [100]) = $8
	*($5 + [56]) = $1
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [52])
	*($5 + [72]) = ($1 + [56])
	*($5 + [76]) = ($1 + [60])
	*($5 + [80]) = ($1 + [64])
	*($5 + [84]) = ($1 + [72])
	*($5 + [88]) = ($1 + [96])
	*($5 + [96]) = ($1 + [132])
	*($5 + [104]) = ($1 + [144])
	*($5 + [108]) = ($1 + [152])
	CALL $128(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [160]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$5 }
	CALL $218($3)
	$6 = *($5 + [24])
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [60]) = $1
	*($5 + [68]) = $1
	*($5 + [56]) = $0
	*($5 + [64]) = ($5 + [32])
	*($5 + [72]) = ($5 + [24])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $143(($5 + [48]), ($0 + [36]))
	$global$0 = ($5 + [112])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10705])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $215($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [44]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [41])
	CALL $83(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = [-1]
	*($5 + [48]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $155(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $218($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10825])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10871])
	*($1 + [21]) = [1]
	$6 = *($1)
	CALL eosio_assert([1], [10922])
	$7 = ($1 + [8])
	$8 = ($1 + [21])
	$10 = *($1 + [8])
	$9 = *(($1 + [12]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [6]))
	$13 = [68]
	
.LOOP $label$1:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	$13 = (((int_32)uint_32(($11 + [-64]) >> [6]) * (int_32)[60]) + $13)
	goto $label$2 
	
.LABEL $label$3
	$13 = ($13 + [-60])
	
.LABEL $label$2
	$9 = ($13 + [2])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$13 = CALL $215($9)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$4
	*($5 + [12]) = $13
	*($5 + [8]) = $13
	*($5 + [16]) = ($13 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [44]) = $8
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [20])
	CALL $81(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [28]), $2, $13, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $218($13)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

int_32 .FUNC $212 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7391968480164052992, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [156])) == (int_32)$7), [10654])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $65($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)7391968480164052992, $6))
	CALL eosio_assert(((int_32)*($4 + [156]) == (int_32)$7), [10654])
	
.LABEL $label$2
	*($4 + [164]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL $46($0, $1)
	$4 = ($0 + [32])
	$5 = CALL $43($4, *($1), [8614])
	CALL memcpy(($3 + [16]), $5, [120])
	*(($3 + [144])) = [0]
	*($3 + [136]) = (int_64)0
	$6 = (*(($5 + [124])) - *($5 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$1 }
	$6 = CALL _Znwj($6)
	*((($3 + [16]) + [120])) = $6
	*(($3 + [144])) = ($6 + ((int_32)$7 * (int_32)[72]))
	*(($8 = (($3 + [16]) + [124]))) = $6
	$9 = *(($5 + [120]))
	$7 = (*(($5 + [124])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $9, $7)
	*($8) = ($6 + ((int_32)((uint_32)$7 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*((($3 + [16]) + [145])) = *(($5 + [145]))
	*((($3 + [16]) + [140])) = *(($5 + [140]))
	*($3 + [148 align=4]) = *($5 + [132 align=4])
	CALL require_auth(*($3 + [160]))
	CALL eosio_assert(((uint_32)((*($3 + [152]) + [-1]) & [255]) > (uint_32)[1]), [8633])
	if ( ((int_64)*($3 + [88]) < (int_64)1) ){ goto $label$3 }
	CALL eosio_assert(((int_64)*(($3 + [104])) == (int_64)*($2 + [16])), [8678])
	CALL eosio_assert(((int_64)*(($3 + [96])) == (int_64)*($2 + [8])), [8715])
	
.LABEL $label$3
	$10 = *($1)
	$1 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($1 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$10) ){ goto $label$6 }
	$1 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($6 + [156])) == (int_32)$4), [10654])
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	$5 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)7391968480164052992, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $65($4, $5)
	CALL eosio_assert(((int_32)*($6 + [156]) == (int_32)$4), [10654])
	
.LABEL $label$4
	$10 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10790])
	CALL $96($4, $6, $10, ($3 + [8]))
	$5 = *($3 + [136])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($3 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$global$0 = ($3 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $189((($3 + [16]) + [120]))
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = ($global$0 - [48])
	$global$0 = $8
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$6 }
	$9 = uint_32($9 >> [1])
	$10 = ($1 + [1])
	$11 = ($10 + $9)
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = *($1 + [4])
	$10 = *($1 + [8])
	$11 = ($10 + $9)
	if ( ($9 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $190(*($10)) ){ goto $label$4 }
	$10 = ($10 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$7 }
	$10 = $11
	$9 = [1]
	$12 = *($1)
	if ( (($12 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$8 }
	$9 = ($10 + [1])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $190(*($9)) == 0) ){ goto $label$10 }
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($10) = *($9)
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = [1]
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$11 = ($1 + $9)
	$9 = ($11 + uint_32($12 >> $9))
	goto $label$1 
	
.LABEL $label$2
	$11 = *($1 + [8])
	$9 = ($11 + *($1 + [4]))
	
.LABEL $label$1
	CALL $177($1, ($10 - $11), ($9 - $10))
	$11 = *($1)
	if ( ($11 & [1]) ){ goto $label$13 }
	$10 = ($1 + [1])
	$12 = [0]
	$9 = [0]
	$11 = uint_32($11 >> [1])
	if ( $11 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = *($1 + [8])
	$12 = [0]
	$9 = [0]
	$11 = *($1 + [4])
	if ( ($11 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$9 = [0]
	
.LOOP $label$14:
	$9 = ($9 + ((int_32)*($10) == (int_32)[44]))
	$10 = ($10 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$14 }
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$9 == (int_32)[5]), [10060])
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = $12
	CALL eosio_assert([1], [10098])
	$9 = CALL $178($1, [44], $12)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$18 }
	CALL $169(($8 + [32]), $1, [0], $9, $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$17 }
	*($8 + [16]) = [0]
	goto $label$16 
	
.LABEL $label$18
	$11 = [0]
	CALL eosio_assert([0], [10116])
	$10 = [0]
	goto $label$15 
	
.LABEL $label$17
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$16
	CALL $171(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	$11 = *($8 + [20])
	$10 = *($8 + [16])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)( $11 ? uint_32(($10 & [254]) >> [1]) : ($10 & [1]) ) != (int_32)[0]), [10290])
	*($2) = CALL $183(($8 + [16]), [0], [10])
	$10 = ($9 + [1])
	CALL eosio_assert(((int_32)$10 != (int_32)[-1]), [10098])
	$9 = CALL $178($1, [44], $10)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$22 }
	CALL $169(($8 + [32]), $1, $10, ($9 - $10), $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$21 }
	*($8 + [16]) = [0]
	goto $label$20 
	
.LABEL $label$22
	CALL eosio_assert([0], [10116])
	goto $label$19 
	
.LABEL $label$21
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$20
	CALL $171(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	
.LABEL $label$19
	$10 = *($8 + [16])
	CALL eosio_assert(((int_32)( *($8 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [10304])
	*($4) = CALL $183(($8 + [16]), [0], [10])
	$10 = ($9 + [1])
	CALL eosio_assert(((int_32)$10 != (int_32)[-1]), [10098])
	$9 = CALL $178($1, [44], $10)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$26 }
	CALL $169(($8 + [32]), $1, $10, ($9 - $10), $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$25 }
	*($8 + [16]) = [0]
	goto $label$24 
	
.LABEL $label$26
	CALL eosio_assert([0], [10116])
	goto $label$23 
	
.LABEL $label$25
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$24
	CALL $171(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	
.LABEL $label$23
	$10 = *($8 + [16])
	CALL eosio_assert(((int_32)( *($8 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [10316])
	*($3) = CALL $183(($8 + [16]), [0], [10])
	$10 = ($9 + [1])
	CALL eosio_assert(((int_32)$10 != (int_32)[-1]), [10098])
	$9 = CALL $178($1, [44], $10)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$30 }
	CALL $169(($8 + [32]), $1, $10, ($9 - $10), $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$29 }
	*($8 + [16]) = [0]
	goto $label$28 
	
.LABEL $label$30
	CALL eosio_assert([0], [10116])
	goto $label$27 
	
.LABEL $label$29
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$28
	CALL $171(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	
.LABEL $label$27
	$10 = *($8 + [16])
	CALL eosio_assert(((int_32)( *($8 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [10331])
	*($5) = CALL $183(($8 + [16]), [0], [10])
	$10 = ($9 + [1])
	CALL eosio_assert(((int_32)$10 != (int_32)[-1]), [10098])
	$9 = CALL $178($1, [44], $10)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$34 }
	CALL $169(($8 + [32]), $1, $10, ($9 - $10), $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$33 }
	*($8 + [16]) = [0]
	goto $label$32 
	
.LABEL $label$34
	CALL eosio_assert([0], [10116])
	goto $label$31 
	
.LABEL $label$33
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$32
	CALL $171(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	
.LABEL $label$31
	$10 = *($8 + [16])
	CALL eosio_assert(((int_32)( *($8 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [10353])
	*($6) = CALL $184(($8 + [16]), [0], [10])
	CALL $169(($8 + [32]), $1, ($9 + [1]), [-1], $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$36 }
	*($8 + [16]) = [0]
	goto $label$35 
	
.LABEL $label$36
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$35
	CALL $171(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	$10 = *($8 + [16])
	CALL eosio_assert(((int_32)( *($8 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [10378])
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$10 = CALL $212([10389])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$41 }
	*($8) = ($10 << [1])
	$9 = ($8 | [1])
	if ( $10 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$11 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($8) = ($11 | [1])
	*($8 + [8]) = $9
	*($8 + [4]) = $10
	
.LABEL $label$40
	CALL memcpy($9, [10389], $10)
	
.LABEL $label$39
	*(($9 + $10)) = [0]
	CALL $91(($8 + [32]), $0, ($8 + [16]), $8)
	$10 = *($7)
	if ( ($10 == 0) ){ goto $label$43 }
	*($7 + [4]) = $10
	CALL _ZdlPv($10)
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$10 = ($7 + [8])
	goto $label$42 
	
.LABEL $label$43
	$10 = ($7 + [8])
	
.LABEL $label$42
	*($7) = *($8 + [32])
	*($10) = *($8 + [40])
	*($8 + [40]) = [0]
	*($8 + [32]) = (int_64)0
	if ( (*($8) & [1]) ){ goto $label$45 }
	if ( (*($8 + [16]) & [1]) ){ goto $label$44 }
	goto $label$37 
	
.LABEL $label$45
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$37 }
	
.LABEL $label$44
	CALL _ZdlPv(*(($8 + [24])))
	$global$0 = ($8 + [48])
	return (unreachable)
	
.LABEL $label$38
	CALL $167($8)
	
.LABEL $label$37
	$global$0 = ($8 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL $46($0, $1)
	$4 = ($0 + [32])
	$5 = CALL $43($4, *($1), [8614])
	CALL memcpy(($3 + [16]), $5, [120])
	*(($3 + [144])) = [0]
	*($3 + [136]) = (int_64)0
	$6 = (*(($5 + [124])) - *($5 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$1 }
	$6 = CALL _Znwj($6)
	*((($3 + [16]) + [120])) = $6
	*(($3 + [144])) = ($6 + ((int_32)$7 * (int_32)[72]))
	*(($8 = (($3 + [16]) + [124]))) = $6
	$9 = *(($5 + [120]))
	$7 = (*(($5 + [124])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $9, $7)
	*($8) = ($6 + ((int_32)((uint_32)$7 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*((($3 + [16]) + [145])) = *(($5 + [145]))
	*((($3 + [16]) + [140])) = *(($5 + [140]))
	*($3 + [148 align=4]) = *($5 + [132 align=4])
	CALL require_auth(*($3 + [160]))
	CALL eosio_assert(((uint_32)((*($3 + [152]) + [-1]) & [255]) > (uint_32)[1]), [8745])
	if ( ((int_64)*($3 + [112]) < (int_64)1) ){ goto $label$3 }
	CALL eosio_assert(((int_64)*(($3 + [128])) == (int_64)*($2 + [16])), [8788])
	CALL eosio_assert(((int_64)*(($3 + [120])) == (int_64)*($2 + [8])), [8819])
	
.LABEL $label$3
	$10 = *($1)
	$1 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($1 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$10) ){ goto $label$6 }
	$1 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($6 + [156])) == (int_32)$4), [10654])
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	$5 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)7391968480164052992, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $65($4, $5)
	CALL eosio_assert(((int_32)*($6 + [156]) == (int_32)$4), [10654])
	
.LABEL $label$4
	$10 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10790])
	CALL $95($4, $6, $10, ($3 + [8]))
	$5 = *($3 + [136])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($3 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$global$0 = ($3 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $189((($3 + [16]) + [120]))
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$6 }
	$6 = uint_32($6 >> [1])
	$7 = ($1 + [1])
	$8 = ($7 + $6)
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = *($1 + [4])
	$7 = *($1 + [8])
	$8 = ($7 + $6)
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $190(*($7)) ){ goto $label$4 }
	$7 = ($7 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$7 = $8
	$6 = [1]
	$9 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$6 = ($7 + [1])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $190(*($6)) == 0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($7) = *($6)
	$7 = ($7 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($1 + $6)
	$6 = ($8 + uint_32($9 >> $6))
	goto $label$1 
	
.LABEL $label$2
	$8 = *($1 + [8])
	$6 = ($8 + *($1 + [4]))
	
.LABEL $label$1
	CALL $177($1, ($7 - $8), ($6 - $7))
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$13 }
	$7 = ($1 + [1])
	$9 = [0]
	$6 = [0]
	$8 = uint_32($8 >> [1])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = *($1 + [8])
	$9 = [0]
	$6 = [0]
	$8 = *($1 + [4])
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = [0]
	
.LOOP $label$14:
	$6 = ($6 + ((int_32)*($7) == (int_32)[44]))
	$7 = ($7 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	$6 = ((int_32)$6 == (int_32)[2])
	
.LABEL $label$11
	CALL eosio_assert($6, [10060])
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $9
	CALL eosio_assert([1], [10098])
	$6 = CALL $178($1, [44], $9)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$18 }
	CALL $169(($5 + [32]), $1, [0], $6, $1)
	if ( (*($5 + [16]) & [1]) ){ goto $label$17 }
	*($5 + [16]) = [0]
	goto $label$16 
	
.LABEL $label$18
	$8 = [0]
	CALL eosio_assert([0], [10116])
	$7 = [0]
	goto $label$15 
	
.LABEL $label$17
	*(*(($5 + [24]))) = [0]
	*($5 + [20]) = [0]
	
.LABEL $label$16
	CALL $171(($5 + [16]), [0])
	*((($5 + [16]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	$8 = *($5 + [20])
	$7 = *($5 + [16])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)( $8 ? uint_32(($7 & [254]) >> [1]) : ($7 & [1]) ) != (int_32)[0]), [10073])
	*($2) = CALL $184(($5 + [16]), [0], [10])
	$7 = ($6 + [1])
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [10098])
	$6 = CALL $178($1, [44], $7)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$22 }
	CALL $169(($5 + [32]), $1, $7, ($6 - $7), $1)
	if ( (*($5 + [16]) & [1]) ){ goto $label$21 }
	*($5 + [16]) = [0]
	goto $label$20 
	
.LABEL $label$22
	CALL eosio_assert([0], [10116])
	goto $label$19 
	
.LABEL $label$21
	*(*(($5 + [24]))) = [0]
	*($5 + [20]) = [0]
	
.LABEL $label$20
	CALL $171(($5 + [16]), [0])
	*((($5 + [16]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	
.LABEL $label$19
	$7 = *($5 + [16])
	CALL eosio_assert(((int_32)( *($5 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [10085])
	*($3) = CALL $180(($5 + [16]), [0], [10])
	CALL $169(($5 + [32]), $1, ($6 + [1]), [-1], $1)
	if ( (*($5 + [16]) & [1]) ){ goto $label$24 }
	*($5 + [16]) = [0]
	goto $label$23 
	
.LABEL $label$24
	*(*(($5 + [24]))) = [0]
	*($5 + [20]) = [0]
	
.LABEL $label$23
	CALL $171(($5 + [16]), [0])
	*(($6 = (($5 + [16]) + [8]))) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	$7 = ($7 & [1])
	$7 = *($5 + [16])
	$8 = ( *($5 + [20]) ? uint_32($7 >> [1]) : $7 )
	if ( ($8 == 0) ){ goto $label$27 }
	*($5 + [12]) = $8
	*($5 + [8]) = ( *($6) ? (($5 + [16]) | [1]) : $7 )
	*($5) = *($5 + [8])
	$7 = CALL $85(($5 + [32]), $5)
	$6 = *($5 + [16])
	*($4) = *($7)
	if ( (($6 & [1]) == 0) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$27
	*($4) = *($0)
	if ( ($7 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$25
	$global$0 = ($5 + [48])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	float_64 $18
	$6 = ($global$0 - [336])
	$global$0 = $6
	CALL $86($0, $3, $4)
	$7 = CALL $43(($0 + [32]), *($3), [8614])
	CALL memcpy(($6 + [160]), $7, [120])
	$8 = [0]
	*(($6 + [288])) = [0]
	*($6 + [280]) = (int_64)0
	$9 = (*(($7 + [124])) - *($7 + [120]))
	$10 = ((int_32)$9 / (int_32)[72])
	$11 = [0]
	$12 = [0]
	if ( ($9 == 0) ){ goto $label$2 }
	if ( ((uint_32)$10 >= (uint_32)[59652324]) ){ goto $label$1 }
	$12 = CALL _Znwj($9)
	*((($6 + [160]) + [120])) = $12
	*(($6 + [288])) = ($12 + ((int_32)$10 * (int_32)[72]))
	*(($9 = (($6 + [160]) + [124]))) = $12
	$10 = *(($7 + [120]))
	$11 = (*(($7 + [124])) - $10)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($12, $10, $11)
	$11 = ($12 + ((int_32)((uint_32)$11 / (uint_32)[72]) * (int_32)[72]))
	*($9) = $11
	goto $label$2 
	
.LABEL $label$3
	$11 = $12
	
.LABEL $label$2
	*((($6 + [160]) + [145])) = *(($7 + [145]))
	*((($6 + [160]) + [140])) = *(($7 + [140]))
	*($6 + [292 align=4]) = *($7 + [132 align=4])
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$13 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$13 = $14
	$8 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$13 = $14
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$8 }
	$8 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	CALL eosio_assert($8, [8329])
	$13 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8346])
	$15 = *(($6 + [264]))
	$8 = ($2 + [8])
	CALL eosio_assert(((int_64)*($8) == (int_64)$15), [8848])
	CALL eosio_assert(((int_64)*($2 + [16]) == (int_64)*(($6 + [272]))), [8881])
	if ( *($6 + [312]) ){ goto $label$9 }
	$16 = (int_64)0
	$9 = ((int_32)$12 == (int_32)$11)
	if ( $9 ){ goto $label$10 }
	$16 = (int_64)0
	$13 = (int_64)0
	$7 = $12
	
.LOOP $label$11:
	if ( ((int_64)$13 == (int_64)0) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)$16), [10981])
	$13 = ((int_64)*(($7 + [8])) + (int_64)$13)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [11043])
	$7 = ($7 + [72])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$16 = *(($7 + [16]))
	$13 = *(($7 + [8]))
	$7 = ($7 + [72])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$10
	if ( $9 ){ goto $label$14 }
	$17 = (int_64)0
	$14 = (int_64)0
	
.LOOP $label$15:
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$16 }
	CALL eosio_assert(((int_64)*(($12 + [40])) == (int_64)$17), [10981])
	$14 = ((int_64)*(($12 + [32])) + (int_64)$14)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [11043])
	$12 = ($12 + [72])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$17 = *(($12 + [40]))
	$14 = *(($12 + [32]))
	$12 = ($12 + [72])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$14 = (int_64)0
	$17 = (int_64)0
	
.LABEL $label$13
	CALL eosio_assert(((int_64)$17 == (int_64)$16), [10981])
	$13 = ((int_64)$14 + (int_64)$13)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [11043])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$16), [10981])
	$13 = ((int_64)*($2) + (int_64)$13)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [11043])
	CALL eosio_assert(((int_64)$15 == (int_64)$16), [10489])
	CALL eosio_assert(((int_64)*($6 + [256]) >= (int_64)$13), [8916])
	
.LABEL $label$9
	*($6 + [152]) = *($5)
	CALL $87($0, $1, ($6 + [152]))
	$14 = *(($2 + [16]))
	*((($6 + [128]) + [16])) = $14
	$16 = *($8)
	*((($6 + [128]) + [8])) = $16
	$13 = *($2)
	*($6 + [128]) = $13
	CALL eosio_assert([1], [10981])
	$18 = ((float_64)(CASTING float_64)(uint_64 $13) * (float_64)(float_64)0.001)
	if ( (((float_64)$18 < (float_64)(float_64)18446744073709551615) & ((float_64)$18 >= (float_64)(float_64)0)) ){ goto $label$18 }
	$13 = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	$13 = (Rounds 0)($18)
	
.LABEL $label$17
	$13 = ( (int_64)1 ? $13 : (int_64)($13 == 0) )
	*($6 + [128]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [11043])
	$15 = *($0)
	$17 = *($6 + [152])
	if ( ((int_64)$17 != (int_64)$15) ){ goto $label$20 }
	*($6 + [80]) = (int_64)3617214756542218240
	*($6 + [72]) = $17
	CALL $88(($6 + [8]), $0, $1, $3)
	*(($6 + [48])) = $16
	$7 = ($6 + [16])
	*(($6 + [64])) = *($7)
	*($7) = [0]
	*($6 + [32]) = (int_64)3631284093736285296
	*($6 + [40]) = $13
	*($6 + [24]) = *($0)
	*($6 + [56]) = *($6 + [8])
	*($6 + [8]) = (int_64)0
	$7 = CALL $52(($6 + [88]), ($6 + [72]), $14, (int_64)-3617168760277827584, ($6 + [24]))
	CALL $53(($6 + [320]), $7)
	$12 = *($6 + [320])
	CALL send_inline($12, (*($6 + [324]) - $12))
	$12 = *($6 + [320])
	if ( ($12 == 0) ){ goto $label$21 }
	*($6 + [324]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$21
	$12 = *($7 + [28])
	if ( ($12 == 0) ){ goto $label$22 }
	*(($7 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$22
	$12 = *($7 + [16])
	if ( ($12 == 0) ){ goto $label$23 }
	*(($7 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$23
	if ( ((*(($6 + [56])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$24
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [16])))
	goto $label$19 
	
.LABEL $label$20
	*($6 + [80]) = (int_64)3617214756542218240
	*($6 + [72]) = $15
	CALL $88(($6 + [8]), $0, $1, $3)
	*(($6 + [48])) = $16
	$7 = ($6 + [16])
	*(($6 + [64])) = *($7)
	*($7) = [0]
	*($6 + [40]) = $13
	*($6 + [24]) = *($0)
	*($6 + [32]) = *($6 + [152])
	*($6 + [56]) = *($6 + [8])
	*($6 + [8]) = (int_64)0
	$7 = CALL $52(($6 + [88]), ($6 + [72]), $14, (int_64)-3617168760277827584, ($6 + [24]))
	CALL $53(($6 + [320]), $7)
	$12 = *($6 + [320])
	CALL send_inline($12, (*($6 + [324]) - $12))
	$12 = *($6 + [320])
	if ( ($12 == 0) ){ goto $label$25 }
	*($6 + [324]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$25
	$12 = *($7 + [28])
	if ( ($12 == 0) ){ goto $label$26 }
	*(($7 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$26
	$12 = *($7 + [16])
	if ( ($12 == 0) ){ goto $label$27 }
	*(($7 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$27
	if ( ((*(($6 + [56])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$28
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$19
	$14 = *(($2 + [16]))
	$13 = *(($2 + [8]))
	$18 = (CASTING float_64)(uint_64 *($2))
	if ( (*(($6 + [312])) == 0) ){ goto $label$34 }
	CALL eosio_assert(((int_64)$13 == (int_64)*((($6 + [128]) + [8]))), [10981])
	$18 = ((float_64)$18 * (float_64)(float_64)0.049)
	if ( (((float_64)$18 < (float_64)(float_64)18446744073709551615) & ((float_64)$18 >= (float_64)(float_64)0)) ){ goto $label$33 }
	$16 = (int_64)0
	goto $label$32 
	
.LABEL $label$34
	CALL eosio_assert(((int_64)$13 == (int_64)*((($6 + [128]) + [8]))), [10981])
	$18 = ((float_64)$18 * (float_64)(float_64)0.04)
	if ( (((float_64)$18 < (float_64)(float_64)18446744073709551615) & ((float_64)$18 >= (float_64)(float_64)0)) ){ goto $label$31 }
	$16 = (int_64)0
	goto $label$30 
	
.LABEL $label$33
	$16 = (Rounds 0)($18)
	
.LABEL $label$32
	$16 = ( (int_64)1 ? $16 : (int_64)($16 == 0) )
	$17 = ((int_64)*($6 + [128]) + (int_64)$16)
	*($6 + [128]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($6 + [128]) < (int_64)4611686018427387904), [11043])
	*($6 + [80]) = (int_64)3617214756542218240
	*($6 + [72]) = *($0)
	CALL $89(($6 + [8]), $0, $1, $3)
	*(($6 + [48])) = $13
	$7 = (($6 + [8]) + [8])
	*(($6 + [64])) = *($7)
	*($7) = [0]
	*($6 + [32]) = (int_64)3631284093736285296
	*($6 + [40]) = $16
	*($6 + [24]) = *($0)
	*($6 + [56]) = *($6 + [8])
	*($6 + [8]) = (int_64)0
	$7 = CALL $52(($6 + [88]), ($6 + [72]), $14, (int_64)-3617168760277827584, ($6 + [24]))
	CALL $53(($6 + [320]), $7)
	$12 = *($6 + [320])
	CALL send_inline($12, (*($6 + [324]) - $12))
	$12 = *($6 + [320])
	if ( ($12 == 0) ){ goto $label$35 }
	*($6 + [324]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$35
	$12 = *($7 + [28])
	if ( ($12 == 0) ){ goto $label$36 }
	*(($7 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$36
	$12 = *($7 + [16])
	if ( ($12 == 0) ){ goto $label$37 }
	*(($7 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$37
	if ( ((*(($6 + [56])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$38
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($6 + [16])))
	goto $label$29 
	
.LABEL $label$31
	$16 = (Rounds 0)($18)
	
.LABEL $label$30
	$16 = ( (int_64)1 ? $16 : (int_64)($16 == 0) )
	$17 = ((int_64)*($6 + [128]) + (int_64)$16)
	*($6 + [128]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($6 + [128]) < (int_64)4611686018427387904), [11043])
	*($6 + [80]) = (int_64)3617214756542218240
	*($6 + [72]) = *($0)
	CALL $89(($6 + [8]), $0, $1, $3)
	*(($6 + [48])) = $13
	$7 = (($6 + [8]) + [8])
	*(($6 + [64])) = *($7)
	*($7) = [0]
	*($6 + [40]) = $16
	*($6 + [24]) = *($0)
	*($6 + [32]) = *($6 + [304])
	*($6 + [56]) = *($6 + [8])
	*($6 + [8]) = (int_64)0
	$7 = CALL $52(($6 + [88]), ($6 + [72]), $14, (int_64)-3617168760277827584, ($6 + [24]))
	CALL $53(($6 + [320]), $7)
	$12 = *($6 + [320])
	CALL send_inline($12, (*($6 + [324]) - $12))
	$12 = *($6 + [320])
	if ( ($12 == 0) ){ goto $label$39 }
	*($6 + [324]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$39
	$12 = *($7 + [28])
	if ( ($12 == 0) ){ goto $label$40 }
	*(($7 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$40
	$12 = *($7 + [16])
	if ( ($12 == 0) ){ goto $label$41 }
	*(($7 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$41
	if ( ((*(($6 + [56])) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$42
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$43
	$16 = *($2)
	CALL eosio_assert(((int_64)$13 == (int_64)*((($6 + [128]) + [8]))), [10981])
	$18 = ((float_64)(CASTING float_64)(uint_64 $16) * (float_64)(float_64)0.009)
	if ( (((float_64)$18 < (float_64)(float_64)18446744073709551615) & ((float_64)$18 >= (float_64)(float_64)0)) ){ goto $label$45 }
	$16 = (int_64)0
	goto $label$44 
	
.LABEL $label$45
	$16 = (Rounds 0)($18)
	
.LABEL $label$44
	$16 = ( (int_64)1 ? $16 : (int_64)($16 == 0) )
	$17 = ((int_64)$16 + (int_64)*($6 + [128]))
	*($6 + [128]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [11024])
	CALL eosio_assert(((int_64)*($6 + [128]) < (int_64)4611686018427387904), [11043])
	*($6 + [80]) = (int_64)3617214756542218240
	*($6 + [72]) = *($0)
	CALL $89(($6 + [8]), $0, $1, $3)
	*(($6 + [48])) = $13
	$7 = (($6 + [8]) + [8])
	*(($6 + [64])) = *($7)
	*($7) = [0]
	*($6 + [32]) = (int_64)3631284093736285296
	*($6 + [40]) = $16
	*($6 + [24]) = *($0)
	*($6 + [56]) = *($6 + [8])
	*($6 + [8]) = (int_64)0
	$7 = CALL $52(($6 + [88]), ($6 + [72]), $14, (int_64)-3617168760277827584, ($6 + [24]))
	CALL $53(($6 + [320]), $7)
	$12 = *($6 + [320])
	CALL send_inline($12, (*($6 + [324]) - $12))
	$12 = *($6 + [320])
	if ( ($12 == 0) ){ goto $label$46 }
	*($6 + [324]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$46
	$12 = *($7 + [28])
	if ( ($12 == 0) ){ goto $label$47 }
	*(($7 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$47
	$12 = *($7 + [16])
	if ( ($12 == 0) ){ goto $label$48 }
	*(($7 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$48
	if ( ((*(($6 + [56])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$49
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$29
	*((($6 + [24]) + [16])) = *(($2 + [16]))
	$13 = *(($2 + [8]))
	*((($6 + [24]) + [8])) = $13
	*($6 + [24]) = *($2)
	CALL eosio_assert(((int_64)$13 == (int_64)*((($6 + [128]) + [8]))), [11088])
	$13 = (int_64)
	*($6 + [24]) = $13(*($6 + [24]) - *($6 + [128])))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [11136])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [11158])
	CALL eosio_assert(((int_64)$13 > (int_64)0), [8984])
	CALL $90($0, $1, $3, $4, ($6 + [24]), ($6 + [128]))
	$7 = *($6 + [280])
	if ( ($7 == 0) ){ goto $label$50 }
	*(($6 + [284])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$50
	$global$0 = ($6 + [336])
	return (unreachable)
	
.LABEL $label$1
	CALL $189((($6 + [160]) + [120]))
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10728])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10728])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$2 = *(($0 + [56]))
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = ($0 + [60])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	$1 = *($4 + [120])
	if ( ($1 == 0) ){ goto $label$21 }
	*(($4 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $2
	
.LABEL $label$17
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $215($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [208]) + [16]))) = (int_64)0
	*(($3 = (($4 + [208]) + [8]))) = (int_64)0
	*($8) = [0]
	*($4 + [208]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [248]) = ($4 + [192])
	*($4 + [4]) = $3
	$8 = ($4 + [228])
	*($4 + [8]) = $8
	*($4 + [12]) = ($4 + [229])
	*($4) = ($4 + [208])
	CALL $82($4, ($4 + [248]))
	*(($9 = (($4 + [232]) + [8]))) = *($4 + [200])
	*($4 + [232]) = *($4 + [192])
	$9 = *($9)
	*(($10 = (($4 + [248]) + [8]))) = $9
	*(($4 + [24])) = $9
	*($4) = $0
	*($4 + [8]) = $1
	$1 = *($4 + [232])
	*($4 + [16]) = $1
	*($4 + [248]) = $1
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*((($4 + [248]) + [16])) = [0]
	*($4 + [256]) = (int_64)0
	*($4 + [248]) = *($4 + [208])
	$3 = (*(($4 + [220])) - *($3))
	if ( ($3 == 0) ){ goto $label$5 }
	$11 = int_32($3 >> [6])
	if ( ((uint_32)$11 >= (uint_32)[67108864]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*((($4 + [248]) + [8])) = $3
	*(($9 = (($4 + [248]) + [12]))) = $3
	*(($4 + [264])) = ($3 + ($11 << [6]))
	$10 = *((($4 + [208]) + [8]))
	$11 = (*((($4 + [208]) + [12])) - $10)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $10, $11)
	*($9) = (*($9) + $11)
	
.LABEL $label$5
	*($4 + [268]) = *($8)
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [248])), (int_32 $6))
	$5 = *($4 + [256])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [260])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $218($2)
	
.LABEL $label$8
	CALL $33($4)
	$2 = *(($4 + [216]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [220])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [272])
	return [1]
	
.LABEL $label$4
	CALL $189($10)
	return (unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL $42($0, $1, $2)
	$4 = [0]
	*((($3 = CALL memcpy($3, ($5 = CALL $43(($0 + [32]), *($1), [8614])), [120])) + [128])) = [0]
	*($3 + [120]) = (int_64)0
	$6 = (*(($5 + [124])) - *($5 + [120]))
	$7 = ((int_32)$6 / (int_32)[72])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$1 }
	$4 = CALL _Znwj($6)
	*(($3 + [120])) = $4
	*(($3 + [128])) = ($4 + ((int_32)$7 * (int_32)[72]))
	*(($7 = ($3 + [124]))) = $4
	$8 = *(($5 + [120]))
	$6 = (*(($5 + [124])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $8, $6)
	*($7) = ($4 + ((int_32)((uint_32)$6 / (uint_32)[72]) * (int_32)[72]))
	
.LABEL $label$2
	*(($3 + [145])) = *(($5 + [145]))
	*(($3 + [140])) = *(($5 + [140]))
	*($3 + [132 align=4]) = *($5 + [132 align=4])
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$4 }
	CALL require_auth(*($0))
	goto $label$3 
	
.LABEL $label$4
	CALL require_auth(*($3 + [144]))
	
.LABEL $label$3
	CALL eosio_assert((*($3 + [48]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9302])
	CALL eosio_assert((*($3 + [56]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9322])
	$5 = *($3 + [136])
	CALL eosio_assert(((int_32)$5 != (int_32)[2]), [9338])
	CALL eosio_assert(((int_32)$5 != (int_32)[1]), [9366])
	CALL eosio_assert(($5 == 0), [9403])
	CALL $44($0, $1, $2)
	if ( ($4 == 0) ){ goto $label$5 }
	*(($3 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $189(($3 + [120]))
}

int_32 .FUNC $215 (int_32 $0)
{
	return CALL $216([11860], $0)
}

int_32 .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $215($1)
	
.LABEL $label$2
	*(CALL $191()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $215(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $218($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $217 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11852]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11856])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11852]) = [1]
	$2 = ($2 << [16])
	*([0] + [11856]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11856])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11856]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11852]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11852]) = [1]
	$3 = ($3 << [16])
	*([0] + [11856]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11856])
	
.LABEL $label$10
	*([0] + [11856]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $217($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8243])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $211 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_64 .FUNC $196 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $197 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [21] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $199($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $199($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $199($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $199($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [20304]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $199($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $199($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $199($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_64 .FUNC $194 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $196($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $193($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [20272])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [20256]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [20288]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $195($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $195 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $192 (int_32 $0)
{
}

int_64 .FUNC $193 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $190 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $191 ()
{
	return [11844]
}