(data (i32.const 4) "\e0h\00\00")
(data (i32.const 16) "lhlxyaytoken\00")
(data (i32.const 32) "error!\00")
(data (i32.const 48) "eosowangfeng\00")
(data (i32.const 64) "creator account does not exist.\00")
(data (i32.const 96) "must more than 0 BT.\00")
(data (i32.const 128) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 192) "no mortgage object found.\00")
(data (i32.const 224) "redemption amount is greater than the amount of mortgage.\00")
(data (i32.const 288) "no open mortgage yet.\00")
(data (i32.const 320) "eosbtextoken\00")
(data (i32.const 336) "invalid symbol name\00")
(data (i32.const 368) "object passed to modify is not in multi_index\00")
(data (i32.const 416) "cannot modify objects in table of another contract\00")
(data (i32.const 480) "attempt to subtract asset with different symbol\00")
(data (i32.const 528) "subtraction underflow\00")
(data (i32.const 560) "subtraction overflow\00")
(data (i32.const 592) "attempt to add asset with different symbol\00")
(data (i32.const 640) "addition underflow\00")
(data (i32.const 672) "addition overflow\00")
(data (i32.const 704) "updater cannot change primary key when modifying an object\00")
(data (i32.const 768) "cannot pass end iterator to modify\00")
(data (i32.const 816) "active\00")
(data (i32.const 832) "transfer\00")
(data (i32.const 848) "redeemed of mortgage\00")
(data (i32.const 880) "eosio.token\00")
(data (i32.const 896) "dividend\00")
(data (i32.const 912) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 976) "unable to find key\00")
(data (i32.const 1008) "error reading iterator\00")
(data (i32.const 1040) "read\00")
(data (i32.const 1056) "write\00")
(data (i32.const 1072) "object passed to erase is not in multi_index\00")
(data (i32.const 1120) "cannot erase objects in table of another contract\00")
(data (i32.const 1184) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1248) "manager account does not exist.\00")
(data (i32.const 1280) "the account is not the administrator account.\00")
(data (i32.const 1328) "no mortgage BT.\00")
(data (i32.const 1344) "no bonus was available.\00")
(data (i32.const 1376) "btexexchange\00")
(data (i32.const 1392) "the balance can not be adjusted to less than 0 EOS.\00")
(data (i32.const 1456) "cannot create objects in table of another contract\00")
(data (i32.const 1520) "asset must be EOS.\00")
(data (i32.const 1552) "the quantity can not be 0 EOS.\00")
(data (i32.const 1584) "owner account does not exist.\00")
(data (i32.const 1616) "cannot increment end iterator\00")
(data (i32.const 1648) "cannot pass end iterator to erase\00")
(data (i32.const 1696) "asset must be BT.\00")
(data (i32.const 1728) "must more than 100 BT.\00")
(data (i32.const 1760) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1824) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1888) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1936) "it is not my action.\00")
(data (i32.const 1968) "get\00")
(data (i32.const 10368) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "is_account" (func $fimport$15 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio5bonus8redeembtEyyNS_5assetE" (func $5))
(export "_ZN5eosio5bonus9redeem_btEyyNS_5assetE" (func $6))
(export "_ZN5eosio5bonus9allredeemEyy" (func $34))
(export "_ZN5eosio5bonus9takebonusEyy" (func $35))
(export "_ZN5eosio5bonus10adjustpoolEyNS_5assetE" (func $36))
(export "_ZN5eosio5bonus11adjust_poolENS_5assetE" (func $37))
(export "_ZN5eosio5bonus11mortgage_btEyNS_5assetE" (func $39))
(export "_ZN5eosio5bonus5applyEyy" (func $50))
(export "apply" (func $60))
(export "malloc" (func $61))
(export "free" (func $64))
(export "memcmp" (func $70))
(export "strlen" (func $71))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $72 $35 $34 $5 $36)



int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [912])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [336])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1040])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10368])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10460])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZN5eosio5bonus11mortgage_btEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	*($9 + [136]) = $1
	CALL eosio_assert(CALL $fimport$15($1), [1584])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)5521924), [1696])
	CALL eosio_assert(((int_64)*($2) > (int_64)999999), [1728])
	*(($5 = ($9 + [128]))) = [0]
	*($9 + [104]) = $1
	*($9 + [112]) = (int_64)-1
	*($9 + [120]) = (int_64)0
	$1 = *($0)
	*($9 + [96]) = $1
	*($9 + [20]) = $2
	*($9 + [16]) = ($9 + [96])
	*($9 + [56]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$2()), [1456])
	*($9 + [148]) = ($9 + [16])
	*($9 + [144]) = ($9 + [96])
	*($9 + [152]) = ($9 + [56])
	$8 = CALL $65([80])
	CALL $31($8)
	*($8 + [64]) = ($9 + [96])
	CALL $45(($9 + [144]), $8)
	*($9 + [208]) = $8
	$1 = *($8)
	*($9 + [144]) = $1
	$3 = *($8 + [68])
	*($9) = $3
	$6 = ($9 + [124])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$2 }
	*($4 + [8]) = $1
	*($4 + [16]) = $3
	*($9 + [208]) = [0]
	*($4) = $8
	*($6) = ($4 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($9 + [120]), ($9 + [208]), ($9 + [144]), $9)
	
.LABEL $label$1
	$8 = *($9 + [208])
	*($9 + [208]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $66($8)
	
.LABEL $label$3
	*(($4 = (($9 + [56]) + [32]))) = [0]
	$1 = *($0)
	*($9 + [56]) = $1
	*($9 + [72]) = (int_64)-1
	*($9 + [80]) = (int_64)0
	*($9 + [64]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-5915276457541632000, *($9 + [136]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $11(($9 + [56]), $8)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($9 + [56])), [128])
	CALL eosio_assert([1], [768])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($9 + [56])), [368])
	CALL eosio_assert(((int_64)*($9 + [56]) == (int_64)CALL $fimport$2()), [416])
	$1 = *($8)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($8 + [32]))), [592])
	$7 = ((int_64)*($8 + [24]) + (int_64)*($2))
	*($8 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [704])
	*($9 + [24]) = (($9 + [144]) + [40])
	*($9 + [20]) = ($9 + [144])
	*($9 + [16]) = ($9 + [144])
	CALL $12(($9 + [16]), $8)
	CALL db_update_i64(*($8 + [44]), (int_64)0, ($9 + [144]), [40])
	$8 = ($9 + [72])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$4 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$4 
	
.LABEL $label$5
	$1 = *($0)
	*($9 + [212]) = $2
	*($9 + [208]) = ($9 + [136])
	*($9 + [16]) = $1
	CALL eosio_assert(((int_64)*($9 + [56]) == (int_64)CALL $fimport$2()), [1456])
	*($9 + [148]) = ($9 + [208])
	*($9 + [144]) = ($9 + [56])
	*($9 + [152]) = ($9 + [16])
	$8 = CALL $65([56])
	CALL $25($8)
	*($8 + [40]) = ($9 + [56])
	CALL $40(($9 + [144]), $8)
	*($9) = $8
	$1 = *($8)
	*($9 + [144]) = $1
	$3 = *($8 + [44])
	*($9 + [232]) = $3
	$6 = ($9 + [84])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*($4)) ){ goto $label$7 }
	*($5 + [8]) = $1
	*($5 + [16]) = $3
	*($9) = [0]
	*($5) = $8
	*($6) = ($5 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $27(($9 + [80]), $9, ($9 + [144]), ($9 + [232]))
	
.LABEL $label$6
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$4 }
	CALL $66($8)
	
.LABEL $label$4
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	*($9 + [40]) = (int_64)0
	$1 = *($0)
	*($9 + [16]) = $1
	*($9 + [24]) = $1
	$8 = [0]
	$4 = CALL db_find_i64($1, $1, (int_64)8417982702971518976, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $8(($9 + [16]), $4)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($9 + [16])), [128])
	
.LABEL $label$8
	$4 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($4, [288])
	CALL eosio_assert($4, [768])
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($9 + [16])), [368])
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)CALL $fimport$2()), [416])
	$1 = *($8)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($8 + [16]))), [592])
	$7 = ((int_64)*($8 + [8]) + (int_64)*($2))
	*($8 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [704])
	*($9 + [216]) = (($9 + [144]) + [56])
	*($9 + [212]) = ($9 + [144])
	*($9 + [208]) = ($9 + [144])
	CALL $9(($9 + [208]), $8)
	CALL db_update_i64(*($8 + [60]), (int_64)0, ($9 + [144]), [56])
	$8 = (($9 + [16]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*(($9 + [176])) = [0]
	*($9 + [160]) = (int_64)-1
	*($9 + [168]) = (int_64)0
	$1 = *($0)
	*($9 + [144]) = $1
	*($9 + [152]) = $1
	*($9 + [8]) = $2
	*($9 + [4]) = ($9 + [136])
	*($9) = ($9 + [144])
	*($9 + [232]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$2()), [1456])
	*($9 + [212]) = $9
	*($9 + [208]) = ($9 + [144])
	*($9 + [216]) = ($9 + [232])
	*(($2 = CALL $65([56])) + [24]) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [912])
	$1 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$0 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$0 = [0]
	
.LABEL $label$10
	CALL eosio_assert($0, [336])
	*($2 + [40]) = ($9 + [144])
	CALL $41(($9 + [208]), $2)
	*($9 + [224]) = $2
	$1 = *($2)
	*($9 + [208]) = $1
	$0 = *($2 + [44])
	*($9 + [204]) = $0
	$4 = ($9 + [172])
	$8 = *($4)
	if ( ((uint_32)$8 >= (uint_32)*(($9 + [176]))) ){ goto $label$16 }
	*($8 + [8]) = $1
	*($8 + [16]) = $0
	*($9 + [224]) = [0]
	*($8) = $2
	*($4) = ($8 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $42(($9 + [168]), ($9 + [224]), ($9 + [208]), ($9 + [204]))
	
.LABEL $label$15
	$8 = *($9 + [224])
	*($9 + [224]) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $66($8)
	
.LABEL $label$17
	$8 = CALL db_lowerbound_i64(*($9 + [144]), *(($9 + [152])), (int_64)-3662787283683961472, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$8 = CALL $43(($9 + [144]), $8)
	CALL eosio_assert([1], [1616])
	$2 = CALL db_next_i64(*($8 + [44]), ($9 + [208]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$18 }
	$8 = [1]
	
.LOOP $label$19:
	$2 = CALL $43(($9 + [144]), $2)
	CALL eosio_assert([1], [1616])
	$8 = ($8 + [1])
	$2 = CALL db_next_i64(*($2 + [44]), ($9 + [208]))
	if ( ((int_32)$2 >= (int_32)[0]) ){ goto $label$19 }
	if ( ((uint_32)$8 <= (uint_32)[50]) ){ goto $label$18 }
	$8 = [0]
	$2 = CALL db_lowerbound_i64(*($9 + [144]), *(($9 + [152])), (int_64)-3662787283683961472, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$20 }
	$8 = CALL $43(($9 + [144]), $2)
	
.LABEL $label$20
	$2 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($2, [1648])
	CALL eosio_assert($2, [1616])
	$2 = CALL db_next_i64(*($8 + [44]), ($9 + [208]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$21 }
	CALL $43(($9 + [144]), $2)
	
.LABEL $label$21
	CALL $44(($9 + [144]), $8)
	
.LABEL $label$18
	$0 = *($9 + [168])
	if ( ($0 == 0) ){ goto $label$22 }
	$4 = ($9 + [172])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	CALL $66($2)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$25 }
	$8 = *(($9 + [168]))
	goto $label$23 
	
.LABEL $label$24
	$8 = $0
	
.LABEL $label$23
	*($4) = $0
	CALL $66($8)
	
.LABEL $label$22
	$0 = *($9 + [40])
	if ( ($0 == 0) ){ goto $label$27 }
	$4 = ($9 + [44])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$31 }
	CALL $66($2)
	
.LABEL $label$31
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$30 }
	$8 = *(($9 + [40]))
	goto $label$28 
	
.LABEL $label$29
	$8 = $0
	
.LABEL $label$28
	*($4) = $0
	CALL $66($8)
	
.LABEL $label$27
	$0 = *($9 + [80])
	if ( ($0 == 0) ){ goto $label$32 }
	$4 = ($9 + [84])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$34 }
	
.LOOP $label$35:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$36 }
	CALL $66($2)
	
.LABEL $label$36
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$35 }
	$8 = *(($9 + [80]))
	goto $label$33 
	
.LABEL $label$34
	$8 = $0
	
.LABEL $label$33
	*($4) = $0
	CALL $66($8)
	
.LABEL $label$32
	$0 = *($9 + [120])
	if ( ($0 == 0) ){ goto $label$37 }
	$4 = ($9 + [124])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$39 }
	
.LOOP $label$40:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$41 }
	CALL $66($2)
	
.LABEL $label$41
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$40 }
	$8 = *(($9 + [120]))
	goto $label$38 
	
.LABEL $label$39
	$8 = $0
	
.LABEL $label$38
	*($4) = $0
	CALL $66($8)
	
.LABEL $label$37
	*([0] + [4]) = ($9 + [240])
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $28 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [336])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [336])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [336])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1056])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1056])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1056])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $65($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $69($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $66($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [32]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1056])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1056])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [336])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [336])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1056])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1056])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1888])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3662787283683961472)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1824])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1824])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $43(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $65(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $66($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $65([56])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [912])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [336])
	*($4 + [40]) = $0
	CALL $47(($8 + [32]), $4)
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $42($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $66($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3662787283683961472, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $43($6, $4)
	*($7 + [4]) = [0]
	*($7) = $6
	$5 = *(*(CALL $48($7) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1760])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$8 = $8
	$6 = ($8 + [-48])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($8 + [-8])
	CALL $49($7, $1)
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-3662787283683961472, *(*($0 + [8])), $5, $6, [40])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	CALL eosio_assert([1], [912])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [336])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	$5 = *($3 + [4])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$6 = $8
	$5 = ($6 + [-48])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $12($7, $1)
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-5915276457541632000, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [68]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1888])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7696768201706700800)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1824])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1824])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $7(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$6 = *($0 + [4])
	$5 = *($6)
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-7696768201706700800, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $7($5, $3)
	*($7 + [4]) = [0]
	*($7) = $5
	$4 = *(*(CALL $46($7) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1760])
	*($1) = *(($5 + [16]))
	$5 = *($6 + [4])
	*($1 + [8]) = *($5)
	*(($1 + [16])) = *(($5 + [8]))
	$5 = *($6 + [4])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	CALL eosio_assert([1], [912])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	
.LABEL $label$3
	CALL eosio_assert($6, [336])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = $6
	CALL $10($7, $1)
	$4 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-7696768201706700800, *(*($0 + [8])), $4, $5, [64])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1120])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1184])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $66($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $66($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $72 ()
{
	(unreachable)
}

void .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $56($0, $2, $1)
	*([0] + [4]) = $3
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = $0
	CALL _ZN5eosio5bonus5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $65([72])
	$4 = CALL $28($6)
	*($6 + [56]) = $0
	CALL $29(($8 + [32]), $4)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN5eosio5bonus9redeem_btEyyNS_5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [272])
	*([0] + [4]) = $16
	CALL eosio_assert(CALL $fimport$15($1), [64])
	$15 = *($3)
	CALL eosio_assert(((int_64)$15 > (int_64)0), [96])
	$9 = [0]
	*((($16 + [152]) + [32])) = [0]
	*($16 + [160]) = $1
	*($16 + [168]) = (int_64)-1
	*($16 + [176]) = (int_64)0
	$14 = *($0)
	*($16 + [152]) = $14
	$8 = [0]
	$10 = CALL db_find_i64($14, $1, (int_64)-7696768201706700800, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $7(($16 + [152]), $10)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($16 + [152])), [128])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [192])
	CALL eosio_assert(((int_64)$15 <= (int_64)*($8 + [8])), [224])
	*((($16 + [112]) + [32])) = [0]
	*($16 + [128]) = (int_64)-1
	*($16 + [136]) = (int_64)0
	$2 = *($0)
	*($16 + [112]) = $2
	*($16 + [120]) = $2
	$10 = CALL db_find_i64($2, $2, (int_64)8417982702971518976, (int_64)1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $8(($16 + [112]), $10)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($16 + [112])), [128])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [288])
	$5 = *($9 + [40])
	$2 = (int_64)0
	$14 = (int_64)59
	$10 = [320]
	$11 = (int_64)0
	
.LOOP $label$3:
	$13 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$4 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$12 = ($12 + [165])
	goto $label$5 
	
.LABEL $label$6
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$4
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$3 }
	$2 = *($0)
	$10 = [0]
	*(($16 + [224])) = [0]
	*($16 + [200]) = $2
	*($16 + [192]) = $11
	*($16 + [208]) = (int_64)-1
	*($16 + [216]) = (int_64)0
	$14 = *(CALL $16(($16 + [192]), (int_64)21570, [976]))
	$6 = *($16 + [216])
	if ( ($6 == 0) ){ goto $label$7 }
	$7 = ($16 + [220])
	$12 = *($7)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$12 = ($12 + [-24])
	$4 = *($12)
	*($12) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $66($4)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$10 }
	$12 = *(($16 + [216]))
	goto $label$8 
	
.LABEL $label$9
	$12 = $6
	
.LABEL $label$8
	*($7) = $6
	CALL $66($12)
	
.LABEL $label$7
	$2 = CALL current_time()
	$13 = *($8 + [56])
	CALL eosio_assert([1], [912])
	$13 = ((uint_64)(int_64))(((uint_64)$2 / (uint_64)(int_64)1000) - $13) / (uint_64)(int_64)86400000)
	$2 = (int_64)5459781
	
.LOOP $label$13:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$12 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($12, [336])
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($16 + [112])), [368])
	CALL eosio_assert(((int_64)*($16 + [112]) == (int_64)CALL $fimport$2()), [416])
	$2 = *($9)
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($9 + [48]))), [480])
	$5 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $5) * (float_64)((float_64)(CASTING float_64)(uint_64 $13) * (float_64)(CASTING float_64)(int_64 $15))) / (float_64)(float_64)180) / (float_64)(CASTING float_64)(int_64 $14)))
	$14 = (int_64)
	*(($10 = ($9 + [40]))) = $14(*($10) - $5))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [560])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($9 + [32]))), [592])
	$14 = ((int_64)*($9 + [24]) + (int_64)$5)
	*($9 + [24]) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($9 + [24]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$2 == (int_64)*($9)), [704])
	*($16 + [80]) = (($16 + [192]) + [56])
	*($16 + [76]) = ($16 + [192])
	*($16 + [72]) = ($16 + [192])
	CALL $9(($16 + [72]), $9)
	CALL db_update_i64(*($9 + [60]), (int_64)0, ($16 + [192]), [56])
	$10 = (($16 + [112]) + [16])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$16 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($16 + [152])), [368])
	CALL eosio_assert(((int_64)*($16 + [152]) == (int_64)CALL $fimport$2()), [416])
	$2 = *($8)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($8 + [16]))), [480])
	$14 = (int_64)
	*(($10 = ($8 + [8]))) = $14(*($10) - $15))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [560])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($8 + [48]))), [592])
	$14 = ((int_64)*($8 + [40]) + (int_64)$5)
	*($8 + [40]) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($8 + [40]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [704])
	*($16 + [80]) = (($16 + [192]) + [64])
	*($16 + [76]) = ($16 + [192])
	*($16 + [72]) = ($16 + [192])
	CALL $10(($16 + [72]), $8)
	CALL db_update_i64(*($8 + [68]), (int_64)0, ($16 + [192]), [64])
	if ( (uint_64)($2 <= *((($16 + [152]) + [16]))) ){ goto $label$17 }
	*(($16 + [168])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*(($16 + [104])) = [0]
	*($16 + [88]) = (int_64)-1
	*($16 + [96]) = (int_64)0
	$2 = *($0)
	*($16 + [72]) = $2
	*($16 + [80]) = $2
	$10 = [0]
	$12 = CALL db_find_i64($2, $2, (int_64)-5915276457541632000, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$18 }
	$10 = CALL $11(($16 + [72]), $12)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($16 + [72])), [128])
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [768])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($16 + [72])), [368])
	CALL eosio_assert(((int_64)*($16 + [72]) == (int_64)CALL $fimport$2()), [416])
	$2 = *($10)
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($10 + [16]))), [592])
	$14 = ((int_64)*($10 + [8]) + (int_64)$5)
	*($10 + [8]) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$2 == (int_64)*($10)), [704])
	*($16 + [40]) = (($16 + [192]) + [40])
	*($16 + [36]) = ($16 + [192])
	*($16 + [32]) = ($16 + [192])
	CALL $12(($16 + [32]), $10)
	CALL db_update_i64(*($10 + [44]), (int_64)0, ($16 + [192]), [40])
	$10 = (($16 + [72]) + [16])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$19 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	$2 = (int_64)0
	if ( ((int_64)*(($8 + [8])) > (int_64)0) ){ goto $label$20 }
	CALL $13(($16 + [152]), $8)
	
.LABEL $label$20
	$15 = *($0)
	$13 = (int_64)59
	$10 = [816]
	$11 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$26 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$12 = ($12 + [165])
	goto $label$24 
	
.LABEL $label$26
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$22
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$14 | (int_64)$11)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$21 }
	*($16 + [24]) = $11
	*($16 + [16]) = $15
	$2 = (int_64)0
	$14 = (int_64)59
	$10 = [320]
	$11 = (int_64)0
	
.LOOP $label$27:
	$13 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$28 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$12 = ($12 + [165])
	goto $label$29 
	
.LABEL $label$30
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$28
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$27 }
	$2 = (int_64)0
	$13 = (int_64)59
	$10 = [832]
	$15 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$36 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$12 = ($12 + [165])
	goto $label$34 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$32
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$31 }
	*(($16 + [8])) = [0]
	*($16) = (int_64)0
	$10 = CALL strlen([848])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$40 }
	*($16) = ($10 << [1])
	$12 = ($16 | [1])
	if ( $10 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$4 = (($10 + [16]) & [-16])
	$12 = CALL $65($4)
	*($16) = ($4 | [1])
	*($16 + [8]) = $12
	*($16 + [4]) = $10
	
.LABEL $label$39
	CALL memcpy($12, [848], $10)
	
.LABEL $label$38
	*(($12 + $10)) = [0]
	*(($16 + [220])) = *(($3 + [12]))
	*(($16 + [216])) = *(($3 + [8]))
	*(($16 + [212])) = *(($3 + [4]))
	*($16 + [200]) = $1
	*($16 + [192]) = *($0)
	*($16 + [208]) = *($3)
	$10 = ($16 + [8])
	*(($16 + [232])) = *($10)
	*($16 + [224]) = *($16)
	*($16) = [0]
	*($16 + [4]) = [0]
	*($10) = [0]
	$10 = CALL $14(($16 + [32]), ($16 + [16]), $11, $15, ($16 + [192]))
	CALL $15(($16 + [256]), $10)
	$12 = *($16 + [256])
	CALL send_inline($12, (*($16 + [260]) - $12))
	$12 = *($16 + [256])
	if ( ($12 == 0) ){ goto $label$41 }
	*($16 + [260]) = $12
	CALL $66($12)
	
.LABEL $label$41
	$12 = *($10 + [28])
	if ( ($12 == 0) ){ goto $label$42 }
	*(($10 + [32])) = $12
	CALL $66($12)
	
.LABEL $label$42
	$12 = *($10 + [16])
	if ( ($12 == 0) ){ goto $label$43 }
	*(($10 + [20])) = $12
	CALL $66($12)
	
.LABEL $label$43
	if ( ((*(($16 + [224])) & [1]) == 0) ){ goto $label$44 }
	CALL $66(*(($16 + [232])))
	
.LABEL $label$44
	if ( ((*($16) & [1]) == 0) ){ goto $label$45 }
	CALL $66(*(($16 + [8])))
	
.LABEL $label$45
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$46 }
	$15 = *($0)
	$2 = (int_64)0
	$13 = (int_64)59
	$10 = [816]
	$11 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$52 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$12 = ($12 + [165])
	goto $label$50 
	
.LABEL $label$52
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$48
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$14 | (int_64)$11)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$47 }
	*($16 + [24]) = $11
	*($16 + [16]) = $15
	$2 = (int_64)0
	$13 = (int_64)59
	$10 = [880]
	$11 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$58 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$12 = ($12 + [165])
	goto $label$56 
	
.LABEL $label$58
	$14 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$54
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$11 = ((int_64)$14 | (int_64)$11)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$53 }
	$2 = (int_64)0
	$13 = (int_64)59
	$10 = [832]
	$15 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$64 }
	$12 = *($10)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$12 = ($12 + [165])
	goto $label$62 
	
.LABEL $label$64
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$60
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$59 }
	*(($16 + [8])) = [0]
	*($16) = (int_64)0
	$10 = CALL strlen([896])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$67 }
	*($16) = ($10 << [1])
	$12 = ($16 | [1])
	if ( $10 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$4 = (($10 + [16]) & [-16])
	$12 = CALL $65($4)
	*($16) = ($4 | [1])
	*($16 + [8]) = $12
	*($16 + [4]) = $10
	
.LABEL $label$66
	CALL memcpy($12, [896], $10)
	
.LABEL $label$65
	*(($12 + $10)) = [0]
	*(($16 + [216])) = (int_64)1397703940
	*(($16 + [228])) = *($16 + [4])
	*($16 + [200]) = $1
	$10 = ($16 + [8])
	*(($16 + [232])) = *($10)
	*($16 + [192]) = *($0)
	*($16 + [208]) = $5
	*($16 + [224]) = *($16)
	*($16) = [0]
	*($16 + [4]) = [0]
	*($10) = [0]
	$10 = CALL $14(($16 + [32]), ($16 + [16]), $11, $15, ($16 + [192]))
	CALL $15(($16 + [256]), $10)
	$12 = *($16 + [256])
	CALL send_inline($12, (*($16 + [260]) - $12))
	$12 = *($16 + [256])
	if ( ($12 == 0) ){ goto $label$68 }
	*($16 + [260]) = $12
	CALL $66($12)
	
.LABEL $label$68
	$12 = *($10 + [28])
	if ( ($12 == 0) ){ goto $label$69 }
	*(($10 + [32])) = $12
	CALL $66($12)
	
.LABEL $label$69
	$12 = *($10 + [16])
	if ( ($12 == 0) ){ goto $label$70 }
	*(($10 + [20])) = $12
	CALL $66($12)
	
.LABEL $label$70
	if ( ((*(($16 + [224])) & [1]) == 0) ){ goto $label$71 }
	CALL $66(*(($16 + [232])))
	
.LABEL $label$71
	if ( ((*($16) & [1]) == 0) ){ goto $label$46 }
	CALL $66(*(($16 + [8])))
	
.LABEL $label$46
	$4 = *($16 + [96])
	if ( ($4 == 0) ){ goto $label$72 }
	$8 = ($16 + [100])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$74 }
	
.LOOP $label$75:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$76 }
	CALL $66($12)
	
.LABEL $label$76
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$75 }
	$10 = *(($16 + [96]))
	goto $label$73 
	
.LABEL $label$74
	$10 = $4
	
.LABEL $label$73
	*($8) = $4
	CALL $66($10)
	
.LABEL $label$72
	$4 = *($16 + [136])
	if ( ($4 == 0) ){ goto $label$77 }
	$8 = ($16 + [140])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$79 }
	
.LOOP $label$80:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$81 }
	CALL $66($12)
	
.LABEL $label$81
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$80 }
	$10 = *(($16 + [136]))
	goto $label$78 
	
.LABEL $label$79
	$10 = $4
	
.LABEL $label$78
	*($8) = $4
	CALL $66($10)
	
.LABEL $label$77
	$4 = *($16 + [176])
	if ( ($4 == 0) ){ goto $label$82 }
	$8 = ($16 + [180])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$84 }
	
.LOOP $label$85:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$86 }
	CALL $66($12)
	
.LABEL $label$86
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$85 }
	$10 = *(($16 + [176]))
	goto $label$83 
	
.LABEL $label$84
	$10 = $4
	
.LABEL $label$83
	*($8) = $4
	CALL $66($10)
	
.LABEL $label$82
	*([0] + [4]) = ($16 + [272])
	return (unreachable)
	
.LABEL $label$37
	CALL $67($16)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $65([80])
	$4 = CALL $31($6)
	*($6 + [64]) = $0
	CALL $32(($8 + [32]), $4)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $33(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio5bonus8redeembtEyyNS_5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL require_auth($1)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [16]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$8 != (int_64)$1), [32])
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [48]
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [165])
	goto $label$7 
	
.LABEL $label$8
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$5 }
	CALL eosio_assert(((int_64)$8 != (int_64)$1), [32])
	*(($5 = (($10 + [16]) + [8]))) = *(($3 + [8]))
	$7 = *($3)
	*(($10 + [12])) = *((($10 + [16]) + [12]))
	*(($10 + [8])) = *($5)
	*($10 + [16]) = $7
	*($10 + [4]) = *($10 + [20])
	*($10) = *($10 + [16])
	CALL _ZN5eosio5bonus9redeem_btEyyNS_5assetE($0, $1, $2, $10)
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $65([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $20($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $23(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $20($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1056])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1056])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [128])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $17($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [128])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $65([32])
	$6 = CALL $18($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $19(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $65([56])
	$4 = CALL $25($6)
	*($6 + [40]) = $0
	CALL $26(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1056])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1120])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1184])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $66($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $66($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC _ZN5eosio5bonus10adjustpoolEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$15($1), [1248])
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1376]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$4 = [1]
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$5 }
	$4 = ((int_64)*($0) == (int_64)$1)
	
.LABEL $label$5
	CALL eosio_assert($4, [1280])
	*(($4 = (($9 + [16]) + [8]))) = *(($2 + [8]))
	$6 = *($2)
	*(($9 + [12])) = *((($9 + [16]) + [12]))
	*(($9 + [8])) = *($4)
	*($9 + [16]) = $6
	*($9 + [4]) = *($9 + [20])
	*($9) = *($9 + [16])
	CALL _ZN5eosio5bonus11adjust_poolENS_5assetE($0, $9)
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN5eosio5bonus11adjust_poolENS_5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	$2 = *($1 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [1520])
	$3 = *($1)
	CALL eosio_assert(((int_64)$3 != (int_64)0), [1552])
	*(($5 = ($9 + [40]))) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$6 = *($0)
	*($9 + [8]) = $6
	*($9 + [16]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)8417982702971518976, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$1 = CALL $8(($9 + [8]), $4)
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)($9 + [8])), [128])
	$6 = *($1 + [40])
	$0 = ($1 + [48])
	$7 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)$7), [592])
	$6 = ((int_64)$3 + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [1392])
	CALL eosio_assert([1], [768])
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)($9 + [8])), [368])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [416])
	*($1 + [40]) = $6
	*($0) = $7
	$6 = *($1)
	CALL eosio_assert([1], [704])
	*($9 + [120]) = (($9 + [48]) + [56])
	*($9 + [116]) = ($9 + [48])
	*($9 + [112]) = ($9 + [48])
	CALL $9(($9 + [112]), $1)
	CALL db_update_i64(*($1 + [60]), (int_64)0, ($9 + [48]), [56])
	$1 = ($9 + [24])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$3 }
	*($1) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$4 = *($9 + [32])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*((($9 + [48]) + [8])) = *(($1 + [8]))
	$6 = *($1)
	*($9 + [48]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)0), [1392])
	$6 = *($0)
	*($9) = ($9 + [48])
	*($9 + [136]) = $6
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [1456])
	*($9 + [116]) = $9
	*($9 + [112]) = ($9 + [8])
	*($9 + [120]) = ($9 + [136])
	$1 = CALL $65([72])
	CALL $28($1)
	*($1 + [56]) = ($9 + [8])
	CALL $38(($9 + [112]), $1)
	*($9 + [128]) = $1
	$6 = *($1)
	*($9 + [112]) = $6
	$4 = *($1 + [60])
	*($9 + [108]) = $4
	$8 = ($9 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*($5)) ){ goto $label$6 }
	*($0 + [8]) = $6
	*($0 + [16]) = $4
	*($9 + [128]) = [0]
	*($0) = $1
	*($8) = ($0 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $30(($9 + [32]), ($9 + [128]), ($9 + [112]), ($9 + [108]))
	
.LABEL $label$5
	$1 = *($9 + [128])
	*($9 + [128]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $66($1)
	
.LABEL $label$3
	$4 = *($9 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($9 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $66($0)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$9 }
	$1 = *(($9 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL $66($1)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [144])
}

void .FUNC _ZN5eosio5bonus9allredeemEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$15($1), [1248])
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [1280])
	CALL eosio_assert(CALL $fimport$15($2), [64])
	*(($6 + [88])) = [0]
	*($6 + [64]) = $2
	*($6 + [72]) = (int_64)-1
	$1 = *($0)
	*($6 + [56]) = $1
	*($6 + [80]) = (int_64)0
	$5 = [0]
	$3 = CALL db_lowerbound_i64($1, $2, (int_64)-7696768201706700800, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $7(($6 + [56]), $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1328])
	if ( ($5 == 0) ){ goto $label$2 }
	$1 = *($5)
	*(($3 = (($6 + [40]) + [8]))) = *(($5 + [16]))
	*($6 + [40]) = *($5 + [8])
	*((($6 + [24]) + [8])) = *($3)
	*($6 + [24]) = *($6 + [40])
	*($6 + [28]) = *($6 + [44])
	CALL _ZN5eosio5bonus9redeem_btEyyNS_5assetE($0, $2, $1, ($6 + [24]))
	$4 = (($6 + [56]) + [8])
	$5 = CALL db_lowerbound_i64(*($6 + [56]), *($4), (int_64)-7696768201706700800, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $7(($6 + [56]), $5)
	$1 = *($5)
	*($3) = *(($5 + [16]))
	*($6 + [40]) = *($5 + [8])
	*((($6 + [8]) + [8])) = *($3)
	*($6 + [8]) = *($6 + [40])
	*($6 + [12]) = *($6 + [44])
	CALL _ZN5eosio5bonus9redeem_btEyyNS_5assetE($0, $2, $1, ($6 + [8]))
	$5 = CALL db_lowerbound_i64(*($6 + [56]), *($4), (int_64)-7696768201706700800, (int_64)0)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$4 }
	$4 = ($6 + [84])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $66($3)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($6 + [80]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $0
	
.LABEL $label$5
	*($4) = $0
	CALL $66($5)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [96])
}

void .FUNC _ZN5eosio5bonus9takebonusEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [272])
	*([0] + [4]) = $15
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$15($1), [64])
	$8 = [0]
	*((($15 + [152]) + [32])) = [0]
	*($15 + [160]) = $1
	*($15 + [168]) = (int_64)-1
	*($15 + [176]) = (int_64)0
	$10 = *($0)
	*($15 + [152]) = $10
	$7 = [0]
	$9 = CALL db_find_i64($10, $1, (int_64)-7696768201706700800, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $7(($15 + [152]), $9)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)($15 + [152])), [128])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [192])
	*((($15 + [112]) + [32])) = [0]
	*($15 + [128]) = (int_64)-1
	*($15 + [136]) = (int_64)0
	$2 = *($0)
	*($15 + [112]) = $2
	*($15 + [120]) = $2
	$9 = CALL db_find_i64($2, $2, (int_64)8417982702971518976, (int_64)1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $8(($15 + [112]), $9)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($15 + [112])), [128])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [288])
	$14 = *($8 + [40])
	$2 = (int_64)0
	$10 = (int_64)59
	$9 = [320]
	$11 = (int_64)0
	
.LOOP $label$3:
	$12 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$4 }
	$13 = *($9)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$13 = ($13 + [165])
	goto $label$5 
	
.LABEL $label$6
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$3 }
	$2 = *($0)
	$9 = [0]
	*(($15 + [224])) = [0]
	*($15 + [200]) = $2
	*($15 + [192]) = $11
	*($15 + [208]) = (int_64)-1
	*($15 + [216]) = (int_64)0
	$10 = *(CALL $16(($15 + [192]), (int_64)21570, [976]))
	$5 = *($15 + [216])
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($15 + [220])
	$13 = *($6)
	if ( ((int_32)$13 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$13 = ($13 + [-24])
	$3 = *($13)
	*($13) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $66($3)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$13) ){ goto $label$10 }
	$13 = *(($15 + [216]))
	goto $label$8 
	
.LABEL $label$9
	$13 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL $66($13)
	
.LABEL $label$7
	$2 = CALL current_time()
	$12 = *($7 + [56])
	CALL eosio_assert([1], [912])
	$12 = ((uint_64)(int_64))(((uint_64)$2 / (uint_64)(int_64)1000) - $12) / (uint_64)(int_64)86400000)
	$2 = (int_64)5459781
	
.LOOP $label$13:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$13 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($13, [336])
	$4 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $14) * (float_64)((float_64)(CASTING float_64)(uint_64 $12) * (float_64)(CASTING float_64)(int_64 *($7 + [8])))) / (float_64)(float_64)180) / (float_64)(CASTING float_64)(int_64 $10)))
	CALL eosio_assert(((int_64)$4 > (int_64)0), [1344])
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($15 + [112])), [368])
	CALL eosio_assert(((int_64)*($15 + [112]) == (int_64)CALL $fimport$2()), [416])
	$2 = *($8)
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($8 + [48]))), [480])
	$10 = (int_64)
	*(($9 = ($8 + [40]))) = $10(*($9) - $4))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [560])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($8 + [32]))), [592])
	$10 = ((int_64)*($8 + [24]) + (int_64)$4)
	*($8 + [24]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [704])
	*($15 + [80]) = (($15 + [192]) + [56])
	*($15 + [76]) = ($15 + [192])
	*($15 + [72]) = ($15 + [192])
	CALL $9(($15 + [72]), $8)
	CALL db_update_i64(*($8 + [60]), (int_64)0, ($15 + [192]), [56])
	$9 = (($15 + [112]) + [16])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$16 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)($15 + [152])), [368])
	CALL eosio_assert(((int_64)*($15 + [152]) == (int_64)CALL $fimport$2()), [416])
	$2 = *($7)
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($7 + [48]))), [592])
	$10 = ((int_64)*($7 + [40]) + (int_64)$4)
	*($7 + [40]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($7 + [40]) < (int_64)4611686018427387904), [672])
	*(($7 + [56])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	CALL eosio_assert(((int_64)$2 == (int_64)*($7)), [704])
	*($15 + [80]) = (($15 + [192]) + [64])
	*($15 + [76]) = ($15 + [192])
	*($15 + [72]) = ($15 + [192])
	CALL $10(($15 + [72]), $7)
	CALL db_update_i64(*($7 + [68]), (int_64)0, ($15 + [192]), [64])
	if ( (uint_64)($2 <= *((($15 + [152]) + [16]))) ){ goto $label$17 }
	*(($15 + [168])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*(($15 + [104])) = [0]
	*($15 + [88]) = (int_64)-1
	*($15 + [96]) = (int_64)0
	$2 = *($0)
	*($15 + [72]) = $2
	*($15 + [80]) = $2
	$9 = [0]
	$13 = CALL db_find_i64($2, $2, (int_64)-5915276457541632000, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$18 }
	$9 = CALL $11(($15 + [72]), $13)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($15 + [72])), [128])
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [768])
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($15 + [72])), [368])
	CALL eosio_assert(((int_64)*($15 + [72]) == (int_64)CALL $fimport$2()), [416])
	$2 = *($9)
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($9 + [16]))), [592])
	$10 = ((int_64)*($9 + [8]) + (int_64)$4)
	*($9 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [640])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [672])
	CALL eosio_assert(((int_64)$2 == (int_64)*($9)), [704])
	*($15 + [40]) = (($15 + [192]) + [40])
	*($15 + [36]) = ($15 + [192])
	*($15 + [32]) = ($15 + [192])
	CALL $12(($15 + [32]), $9)
	CALL db_update_i64(*($9 + [44]), (int_64)0, ($15 + [192]), [40])
	$9 = (($15 + [72]) + [16])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$19 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$21 }
	$14 = *($0)
	$2 = (int_64)0
	$12 = (int_64)59
	$9 = [816]
	$11 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$27 }
	$13 = *($9)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$13 = ($13 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$23
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$22 }
	*($15 + [24]) = $11
	*($15 + [16]) = $14
	$2 = (int_64)0
	$12 = (int_64)59
	$9 = [880]
	$11 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$33 }
	$13 = *($9)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$13 = ($13 + [165])
	goto $label$31 
	
.LABEL $label$33
	$10 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$29
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$11 = ((int_64)$10 | (int_64)$11)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$28 }
	$2 = (int_64)0
	$12 = (int_64)59
	$9 = [832]
	$14 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$39 }
	$13 = *($9)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$13 = ($13 + [165])
	goto $label$37 
	
.LABEL $label$39
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$35
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$34 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$9 = CALL strlen([896])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$42 }
	*($15) = ($9 << [1])
	$13 = ($15 | [1])
	if ( $9 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$3 = (($9 + [16]) & [-16])
	$13 = CALL $65($3)
	*($15) = ($3 | [1])
	*($15 + [8]) = $13
	*($15 + [4]) = $9
	
.LABEL $label$41
	CALL memcpy($13, [896], $9)
	
.LABEL $label$40
	*(($13 + $9)) = [0]
	*(($15 + [216])) = (int_64)1397703940
	*(($15 + [228])) = *($15 + [4])
	*($15 + [200]) = $1
	$9 = ($15 + [8])
	*(($15 + [232])) = *($9)
	*($15 + [192]) = *($0)
	*($15 + [208]) = $4
	*($15 + [224]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($9) = [0]
	$9 = CALL $14(($15 + [32]), ($15 + [16]), $11, $14, ($15 + [192]))
	CALL $15(($15 + [256]), $9)
	$13 = *($15 + [256])
	CALL send_inline($13, (*($15 + [260]) - $13))
	$13 = *($15 + [256])
	if ( ($13 == 0) ){ goto $label$43 }
	*($15 + [260]) = $13
	CALL $66($13)
	
.LABEL $label$43
	$13 = *($9 + [28])
	if ( ($13 == 0) ){ goto $label$44 }
	*(($9 + [32])) = $13
	CALL $66($13)
	
.LABEL $label$44
	$13 = *($9 + [16])
	if ( ($13 == 0) ){ goto $label$45 }
	*(($9 + [20])) = $13
	CALL $66($13)
	
.LABEL $label$45
	if ( ((*(($15 + [224])) & [1]) == 0) ){ goto $label$46 }
	CALL $66(*(($15 + [232])))
	
.LABEL $label$46
	if ( ((*($15) & [1]) == 0) ){ goto $label$21 }
	CALL $66(*(($15 + [8])))
	
.LABEL $label$21
	$3 = *($15 + [96])
	if ( ($3 == 0) ){ goto $label$47 }
	$5 = ($15 + [100])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$49 }
	
.LOOP $label$50:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$51 }
	CALL $66($13)
	
.LABEL $label$51
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$50 }
	$9 = *(($15 + [96]))
	goto $label$48 
	
.LABEL $label$49
	$9 = $3
	
.LABEL $label$48
	*($5) = $3
	CALL $66($9)
	
.LABEL $label$47
	$3 = *($15 + [136])
	if ( ($3 == 0) ){ goto $label$52 }
	$5 = ($15 + [140])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$54 }
	
.LOOP $label$55:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$56 }
	CALL $66($13)
	
.LABEL $label$56
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$55 }
	$9 = *(($15 + [136]))
	goto $label$53 
	
.LABEL $label$54
	$9 = $3
	
.LABEL $label$53
	*($5) = $3
	CALL $66($9)
	
.LABEL $label$52
	$3 = *($15 + [176])
	if ( ($3 == 0) ){ goto $label$57 }
	$5 = ($15 + [180])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$59 }
	
.LOOP $label$60:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$61 }
	CALL $66($13)
	
.LABEL $label$61
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$60 }
	$9 = *(($15 + [176]))
	goto $label$58 
	
.LABEL $label$59
	$9 = $3
	
.LABEL $label$58
	*($5) = $3
	CALL $66($9)
	
.LABEL $label$57
	*([0] + [4]) = ($15 + [272])
	return (unreachable)
	
.LABEL $label$20
	CALL $67($15)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1040])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [336])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [336])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [912])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [336])
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $59($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $68($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $65($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $68($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $66($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $67($7)
	return (unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1968])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $20($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1040])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $62([1972], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10454]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10456])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10454]) = [1]
	$7 = ($7 << [16])
	*([0] + [10456]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10456])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10456]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10454]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10454]) = [1]
	$3 = ($3 << [16])
	*([0] + [10456]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10456])
	
.LABEL $label$8
	*([0] + [10456]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10356])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10164]
	$1 = (((int_32)$2 * (int_32)[12]) + [10164])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC _ZN5eosio5bonus5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [176])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [832]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$14 }
	CALL $51(($10 + [128]))
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [320]
	$8 = (int_64)0
	
.LOOP $label$15:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$16 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$16
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$13 }
	if ( ((uint_64)((int_64)*(($10 + [152])) ^ (int_64)5521920) > (uint_64)(int_64)255) ){ goto $label$12 }
	if ( ((int_64)*($10 + [136]) != (int_64)*($0)) ){ goto $label$12 }
	$5 = ($10 + [144])
	*((($10 + [112]) + [12])) = *(($5 + [12]))
	*(($3 = (($10 + [112]) + [8]))) = *(($5 + [8]))
	$7 = *($10 + [128])
	*($10 + [112]) = *($5)
	*(($10 + [8])) = *($3)
	*($10) = *($10 + [112])
	CALL _ZN5eosio5bonus11mortgage_btEyNS_5assetE($0, $7, $10)
	goto $label$12 
	
.LABEL $label$14
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)3629809381801213951) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-5002754503221444608) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3917951551414468608) ){ goto $label$8 }
	*($10 + [76]) = [0]
	*($10 + [72]) = [1]
	*($10 + [48 align=4]) = *($10 + [72])
	CALL $53($0, ($10 + [48]))
	goto $label$7 
	
.LABEL $label$13
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [880]
	$8 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$24 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$3 = ($3 + [165])
	goto $label$22 
	
.LABEL $label$24
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$20
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$19 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$12 }
	if ( ((uint_64)((int_64)*(($10 + [152])) ^ (int_64)1397703936) > (uint_64)(int_64)255) ){ goto $label$12 }
	if ( ((int_64)*($10 + [136]) != (int_64)*($0)) ){ goto $label$12 }
	$4 = ($10 + [144])
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [1376]
	$2 = *($10 + [128])
	$8 = (int_64)0
	
.LOOP $label$25:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$26 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$26
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)$8) ){ goto $label$12 }
	$7 = *(($4 + [8]))
	*((($10 + [96]) + [8])) = $7
	$9 = *($4)
	*((($10 + [16]) + [8])) = $7
	*($10 + [96]) = $9
	*($10 + [20]) = *($10 + [100])
	*($10 + [16]) = *($10 + [96])
	CALL _ZN5eosio5bonus11adjust_poolENS_5assetE($0, ($10 + [16]))
	
.LABEL $label$12
	if ( ((*($10 + [160]) & [1]) == 0) ){ goto $label$7 }
	CALL $66(*(($10 + [168])))
	goto $label$7 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)3629809381801213952) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)3774989715691798528) ){ goto $label$8 }
	*($10 + [84]) = [0]
	*($10 + [80]) = [2]
	*($10 + [40 align=4]) = *($10 + [80])
	CALL $53($0, ($10 + [40]))
	goto $label$7 
	
.LABEL $label$10
	*($10 + [92]) = [0]
	*($10 + [88]) = [3]
	*($10 + [32 align=4]) = *($10 + [88])
	CALL $52($0, ($10 + [32]))
	goto $label$7 
	
.LABEL $label$9
	*($10 + [68]) = [0]
	*($10 + [64]) = [4]
	*($10 + [56 align=4]) = *($10 + [64])
	CALL $54($0, ($10 + [56]))
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [1936])
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [176])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	*($1) = (int_64)1
	$2 = *($0)
	CALL eosio_assert([1], [912])
	$4 = (int_64)21570
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [336])
	*(($1 + [16])) = (int_64)5521924
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [912])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [336])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	$5 = *($3)
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $9($7, $1)
	$4 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)8417982702971518976, *(*($0 + [8])), $4, $5, [56])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [912])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [336])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $55(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1040])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1040])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [912])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [336])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [1040])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [1040])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [1040])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [1040])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [912])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [336])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $57(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1040])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1040])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $58(*($1), *($0 + [12]))
}