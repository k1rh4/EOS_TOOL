(data (i32.const 4) "\a0c\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "Must transfer EOS\00")
(data (i32.const 80) "active\00")
(data (i32.const 96) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 160) "Redzone already unpaused\00")
(data (i32.const 192) "Redzone does not start paused\00")
(data (i32.const 224) "cannot pass end iterator to modify\00")
(data (i32.const 272) "object passed to modify is not in multi_index\00")
(data (i32.const 320) "cannot modify objects in table of another contract\00")
(data (i32.const 384) "updater cannot change primary key when modifying an object\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) "error reading iterator\00")
(data (i32.const 496) "read\00")
(data (i32.const 512) "invalid symbol name\00")
(data (i32.const 544) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 608) "get\00")
(data (i32.const 624) "Redzone doesn\'t exist\00")
(data (i32.const 656) " string_to_sign \00")
(data (i32.const 688) " Validating signature;\00")
(data (i32.const 720) "SIG_K1_\00")
(data (i32.const 736) "\00\02iZ\c7\fe\f9\f5b\15%\fa\17*I\97\ccW\a6.\n\f5\e6\c6\15?\a84:\ba\e2.\d9X")
(data (i32.const 772) "\10\03\00\00")
(data (i32.const 784) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 832) "Redzone not found\00")
(data (i32.const 864) "Cannot delete an redzone while it is enabled\00")
(data (i32.const 912) "cannot pass end iterator to erase\00")
(data (i32.const 960) "cannot increment end iterator\00")
(data (i32.const 992) "object passed to erase is not in multi_index\00")
(data (i32.const 1040) "cannot erase objects in table of another contract\00")
(data (i32.const 1104) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1168) "Insufficient funds: \00")
(data (i32.const 1200) " available, \00")
(data (i32.const 1216) " required\00")
(data (i32.const 1232) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1296) "Cannot restart redzone while it is disabled\00")
(data (i32.const 1344) "Cannot restart redzone that has not been paid out\00")
(data (i32.const 1408) "cannot create objects in table of another contract\00")
(data (i32.const 1472) "-\00")
(data (i32.const 1504) ".\00")
(data (i32.const 1520) " \00")
(data (i32.const 1536) "Trying to pay redzone that is still live\00")
(data (i32.const 1584) "Redzone has already been paid out\00")
(data (i32.const 1632) "You win! Play eostime.io!\00")
(data (i32.const 1664) "Bonus for time spent as last bidder\00")
(data (i32.const 1712) "You won!  Now join in the profits!  Play at eostime.io\00")
(data (i32.const 1776) "Dividends to be shared with community\00")
(data (i32.const 1824) "attempt to subtract asset with different symbol\00")
(data (i32.const 1872) "subtraction underflow\00")
(data (i32.const 1904) "subtraction overflow\00")
(data (i32.const 1936) "rzreceipt\00")
(data (i32.const 1952) "issue\00")
(data (i32.const 1968) " Issued \00")
(data (i32.const 1984) " to \00")
(data (i32.const 2000) ".  \00")
(data (i32.const 2016) "Can issue only TIME coins\00")
(data (i32.const 2048) ",\00")
(data (i32.const 2064) "There is a bug in computing elapsed time\00")
(data (i32.const 2112) " high bidder is \00")
(data (i32.const 2144) " seconds elapsed is \00")
(data (i32.const 2176) " first place timecoins_per_second_bonus is \00")
(data (i32.const 2224) "Redzone with that type already exists\00")
(data (i32.const 2272) "Invalid asset\00")
(data (i32.const 2288) "verb \00")
(data (i32.const 2304) ", signature_str \00")
(data (i32.const 2336) ", redzone_id \00")
(data (i32.const 2352) ", referrer \"\00")
(data (i32.const 2368) "\" or \00")
(data (i32.const 2384) "RZBID\00")
(data (i32.const 2400) "Incorrect amount sent\00")
(data (i32.const 2432) "Cannot bid on disabled redzone\00")
(data (i32.const 2464) "multiplication overflow\00")
(data (i32.const 2496) "multiplication underflow\00")
(data (i32.const 2528) "divide by zero\00")
(data (i32.const 2544) "signed division overflow\00")
(data (i32.const 2576) "call to bid() did not set bid id correctly\00")
(data (i32.const 2624) "Bonus for time spent as high bidder\00")
(data (i32.const 2672) " Issuing \00")
(data (i32.const 2688) " as bidder bonus\00")
(data (i32.const 2720) "Thanks for bidding - now join in the profits!  Play EOS Time at eostime.io\00")
(data (i32.const 2800) " Not issuing \00")
(data (i32.const 2816) "Thanks for the referral!  Play EOS Time at www.eostime.io\00")
(data (i32.const 2880) "attempt to add asset with different symbol\00")
(data (i32.const 2928) "addition underflow\00")
(data (i32.const 2960) "addition overflow\00")
(data (i32.const 2992) " bidder \00")
(data (i32.const 3008) " bid \00")
(data (i32.const 3024) ", house portion was \00")
(data (i32.const 3056) ", referrer portion of \00")
(data (i32.const 3088) " sent to \00")
(data (i32.const 3104) "rzbidreceipt\00")
(data (i32.const 3120) "eostimecontr cannot bid\00")
(data (i32.const 3152) "Redzone is not enabled\00")
(data (i32.const 3184) "Redzone has no remaining bids left\00")
(data (i32.const 3232) "Same bidder cannot bid twice in a row\00")
(data (i32.const 3280) "Redzone has ended\00")
(data (i32.const 3312) "; prev_expiration time \00")
(data (i32.const 3344) "; seconds remaining \00")
(data (i32.const 3376) "; new_seconds_remaining \00")
(data (i32.const 3408) "; new_expiration time \00")
(data (i32.const 3440) "RZBIDNT\00")
(data (i32.const 3448) "\0d\00\00\00\0e\00\00\00")
(data (i32.const 3456) "T = \00")
(data (i32.const 3472) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 3696) "Contract is already initialized\00")
(data (i32.const 3728) "eostimecontr\00")
(data (i32.const 3744) "eostimehouse\00")
(data (i32.const 3760) "eostimetoken\00")
(data (i32.const 3776) "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\00")
(data (i32.const 3840) "stoull\00")
(data (i32.const 3856) ": no conversion\00")
(data (i32.const 3872) ": out of range\00")
(data (i32.const 3888) "%llu\00")
(data (i32.const 3904) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 3920) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 3936) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 3952) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 4416) "0123456789ABCDEF")
(data (i32.const 4432) "-+   0X0x\00")
(data (i32.const 4448) "(null)\00")
(data (i32.const 4464) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 4496) "inf\00")
(data (i32.const 4512) "INF\00")
(data (i32.const 4528) "nan\00")
(data (i32.const 4544) "NAN\00")
(data (i32.const 4560) ".\00")
(data (i32.const 4576) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 4672) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 6480) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 6752) "\00\01\02\04\07\03\06\05\00")
(data (i32.const 15168) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$23 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$24 (param i32 i32)))
(import "env" "is_account" (func $fimport$25 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$29 (param i64)))
(import "env" "printn" (func $fimport$30 (param i64)))
(import "env" "prints" (func $fimport$31 (param i32)))
(import "env" "prints_l" (func $fimport$32 (param i32 i32)))
(import "env" "printui" (func $fimport$33 (param i64)))
(import "env" "read_action_data" (func $fimport$34 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$35 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$36 (param i64)))
(import "env" "send_inline" (func $fimport$37 (param i32 i32)))
(import "env" "sha256" (func $fimport$38 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $132))
(export "_ZNSt3__19to_stringEy" (func $136))
(export "__errno_location" (func $141))
(export "pow" (func $142))
(export "sqrt" (func $143))
(export "fabs" (func $144))
(export "scalbn" (func $145))
(export "snprintf" (func $146))
(export "vsnprintf" (func $147))
(export "vfprintf" (func $149))
(export "__lockfile" (func $151))
(export "__unlockfile" (func $152))
(export "__fwritex" (func $153))
(export "strerror" (func $155))
(export "strnlen" (func $156))
(export "wctomb" (func $157))
(export "__signbitl" (func $158))
(export "__fpclassifyl" (func $159))
(export "frexpl" (func $160))
(export "wcrtomb" (func $161))
(export "memchr" (func $162))
(export "__lctrans" (func $163))
(export "__lctrans_impl" (func $164))
(export "__mo_lookup" (func $165))
(export "strcmp" (func $166))
(export "__towrite" (func $167))
(export "llabs" (func $168))
(export "strtoull" (func $169))
(export "__shlim" (func $170))
(export "__intscan" (func $171))
(export "__shgetc" (func $172))
(export "__uflow" (func $173))
(export "__toread" (func $174))
(export "memcmp" (func $175))
(export "strlen" (func $176))
(export "malloc" (func $177))
(export "free" (func $180))
(table $0 15 15 anyfunc)
(elem (i32.const 0) $181 $18 $22 $7 $12 $14 $16 $20 $21 $24 $9 $10 $148 $101 $102)



int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	*($0 + [8]) = (int_64)1
	*($0) = $1
	*($0 + [16]) = (int_64)2
	*($0 + [24]) = (int_64)3
	*($0 + [32]) = (int_64)1
	*($0 + [40]) = (int_64)2
	*($0 + [48]) = (int_64)4
	*($0 + [56]) = (int_64)8
	*($0 + [64]) = (int_64)16
	*($0 + [72]) = (int_64)32
	$1 = (int_64)0
	$4 = (int_64)59
	$3 = [3728]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	*(($0 + [80])) = $5
	$1 = (int_64)0
	$4 = (int_64)59
	$3 = [3744]
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$6
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$5 }
	*(($0 + [88])) = $5
	$1 = (int_64)0
	$4 = (int_64)59
	$3 = [3760]
	$5 = (int_64)0
	
.LOOP $label$9:
	$6 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$10 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$9 }
	*($0 + [104]) = (int_64)0
	*(($0 + [96])) = $5
	*(($3 = ($0 + [112]))) = (int_64)1397703940
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$2 = [0]
	
.LABEL $label$13
	CALL eosio_assert($2, [512])
	*($0 + [120]) = [3776]
	*($0 + [124 align=1]) = [-1]
	*(($0 + [128])) = [-1]
	*(($0 + [132])) = [-1]
	*(($0 + [136])) = [65535]
	*(($0 + [138])) = [255]
	*(($0 + [139])) = [255]
	*(($0 + [140])) = [255]
	*(($0 + [141])) = [255]
	*(($0 + [142])) = [255]
	*(($0 + [143])) = [255]
	*(($0 + [144])) = [255]
	*(($0 + [145])) = [255]
	*(($0 + [146])) = [255]
	*(($0 + [147])) = [255]
	*(($0 + [148])) = [255]
	*(($0 + [149])) = [255]
	*(($0 + [150])) = [255]
	*(($0 + [151])) = [255]
	*(($0 + [152])) = [255]
	*(($0 + [153])) = [255]
	*(($0 + [154])) = [255]
	*(($0 + [155])) = [255]
	*(($0 + [156])) = [255]
	*(($0 + [157])) = [255]
	*(($0 + [158])) = [255]
	*(($0 + [159])) = [255]
	*(($0 + [160])) = [255]
	*(($0 + [161])) = [255]
	*(($0 + [162])) = [255]
	*(($0 + [163])) = [255]
	*(($0 + [164])) = [255]
	*(($0 + [165])) = [255]
	*(($0 + [166])) = [255]
	*(($0 + [167])) = [255]
	*(($0 + [168])) = [255]
	*(($0 + [169])) = [255]
	*(($0 + [170])) = [255]
	*(($0 + [171])) = [255]
	*(($0 + [172])) = [255]
	*(($0 + [173])) = [0]
	*(($0 + [174])) = [1]
	*(($0 + [175])) = [2]
	*(($0 + [176])) = [3]
	*(($0 + [177])) = [4]
	*(($0 + [178])) = [5]
	*(($0 + [179])) = [6]
	*(($0 + [180])) = [7]
	*(($0 + [181])) = [8]
	*(($0 + [182])) = [255]
	*(($0 + [183])) = [255]
	*(($0 + [184])) = [255]
	*(($0 + [185])) = [255]
	*(($0 + [186])) = [255]
	*(($0 + [187])) = [255]
	*(($0 + [188])) = [255]
	*(($0 + [189])) = [9]
	*(($0 + [190])) = [10]
	*(($0 + [191])) = [11]
	*(($0 + [192])) = [12]
	*(($0 + [193])) = [13]
	*(($0 + [194])) = [14]
	*(($0 + [195])) = [15]
	*(($0 + [196])) = [16]
	*(($0 + [197])) = [255]
	*(($0 + [198])) = [17]
	*(($0 + [199])) = [18]
	*(($0 + [200])) = [19]
	*(($0 + [201])) = [20]
	*(($0 + [202])) = [21]
	*(($0 + [203])) = [255]
	*(($0 + [204])) = [22]
	*(($0 + [205])) = [23]
	*(($0 + [206])) = [24]
	*(($0 + [207])) = [25]
	*(($0 + [208])) = [26]
	*(($0 + [209])) = [27]
	*(($0 + [210])) = [28]
	*(($0 + [211])) = [29]
	*(($0 + [212])) = [30]
	*(($0 + [213])) = [31]
	*(($0 + [214])) = [32]
	*(($0 + [215])) = [255]
	*(($0 + [216])) = [255]
	*(($0 + [217])) = [255]
	*(($0 + [218])) = [255]
	*(($0 + [219])) = [255]
	*(($0 + [220])) = [255]
	*(($0 + [221])) = [33]
	*(($0 + [222])) = [34]
	*(($0 + [223])) = [35]
	*(($0 + [224])) = [36]
	*(($0 + [225])) = [37]
	*(($0 + [226])) = [38]
	*(($0 + [227])) = [39]
	*(($0 + [228])) = [40]
	*(($0 + [229])) = [41]
	*(($0 + [230])) = [42]
	*(($0 + [231])) = [43]
	*(($0 + [232])) = [255]
	*(($0 + [233])) = [44]
	*(($0 + [234])) = [45]
	*(($0 + [235])) = [46]
	*(($0 + [236])) = [47]
	*(($0 + [237])) = [48]
	*(($0 + [238])) = [49]
	*(($0 + [239])) = [50]
	*(($0 + [240])) = [51]
	*(($0 + [241])) = [52]
	*(($0 + [242])) = [53]
	*(($0 + [243])) = [54]
	*(($0 + [244])) = [55]
	*(($0 + [245])) = [56]
	*(($0 + [246])) = [57]
	*(($0 + [247])) = [255]
	*(($0 + [248])) = [255]
	*(($0 + [249])) = [255]
	*(($0 + [250])) = [255]
	*(($0 + [251])) = [255]
	$1 = *($0)
	*($0 + [256]) = $1
	*(($0 + [264])) = $1
	*(($0 + [272])) = (int_64)-1
	*(($0 + [280])) = [0]
	*(($0 + [284])) = [0]
	*(($0 + [288])) = [0]
	*($0 + [296]) = $1
	*(($0 + [304])) = $1
	*(($0 + [312])) = (int_64)-1
	*(($0 + [320])) = [0]
	*(($0 + [324])) = [0]
	*(($0 + [328])) = [0]
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $178([6764], $0)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [6481])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [6481])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [6481]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [6481]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [6752]))
	$10 = *(($13 + [6481]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [6481]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [6481]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [6481]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [6481])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [6481])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11 + [16]) = $1
	*($11 + [8]) = $2
	$3 = *($0 + [80])
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$6 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$10 = ($10 + [165])
	goto $label$4 
	
.LABEL $label$6
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$1 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($3, $9)
	$4 = ($0 + [296])
	$7 = CALL db_lowerbound_i64(*($0 + [296]), *(($0 + [304])), (int_64)7235159551874301952, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $50($4, $7)
	
.LOOP $label$8:
	CALL eosio_assert([1], [912])
	CALL eosio_assert([1], [960])
	$7 = [0]
	$5 = CALL db_next_i64(*($10 + [20]), ($11 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $50($4, $5)
	
.LABEL $label$9
	CALL $107($4, $10)
	$10 = $7
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$7
	$7 = CALL db_lowerbound_i64(*($0 + [256]), *(($0 + [264])), (int_64)-5002379550982668288, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$5 = ($0 + [256])
	$10 = CALL $25($5, $7)
	
.LOOP $label$11:
	CALL eosio_assert([1], [912])
	CALL eosio_assert([1], [960])
	$7 = [0]
	$6 = CALL db_next_i64(*($10 + [260]), ($11 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $25($5, $6)
	
.LABEL $label$12
	CALL $40($5, $10)
	$10 = $7
	if ( $7 ){ goto $label$11 }
	
.LABEL $label$10
	$7 = [0]
	$10 = CALL db_lowerbound_i64(*(($0 + [296])), *(($0 + [304])), (int_64)7235159551874301952, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	CALL $50($4, $10)
	goto $label$13 
	
.LABEL $label$14
	$7 = [1]
	
.LABEL $label$13
	CALL eosio_assert($7, [3696])
	$2 = *($0)
	*($11 + [24]) = $0
	*($11 + [28]) = ($11 + [16])
	CALL $108($11, $4, $2, ($11 + [24]))
	$2 = *($0)
	*($11) = $0
	CALL $109(($11 + [24]), $4, $2, $11)
	$2 = *($0)
	*($11 + [24]) = $0
	*($11 + [28]) = ($11 + [8])
	CALL $110($11, $4, $2, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $179($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [15168])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [512])
	*([0] + [4]) = $12
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$8 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [165])
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$4
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$16 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$15
	$4 = CALL $6(($12 + [176]), $0)
	if ( ((int_64)$2 <= (int_64)-4617755933242905089) ){ goto $label$32 }
	if ( ((int_64)$2 > (int_64)-4614717804295225345) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-4617755933242905088) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)-4616572068420911104) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-4616563018891264000) ){ goto $label$22 }
	*($12 + [124]) = [0]
	*($12 + [120]) = [1]
	*($12 + [48 align=4]) = *($12 + [120])
	CALL $19($4, ($12 + [48]))
	goto $label$22 
	
.LABEL $label$32
	if ( ((int_64)$2 <= (int_64)-4624448414258561025) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4624448414258561024) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4623733237779267584) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4622263498182230016) ){ goto $label$22 }
	*($12 + [100]) = [0]
	*($12 + [96]) = [2]
	*($12 + [72 align=4]) = *($12 + [96])
	CALL $23($4, ($12 + [72]))
	goto $label$22 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-4614717804295225344) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$22 }
	*($12 + [172]) = [0]
	*($12 + [168]) = [3]
	*($12) = *($12 + [168])
	CALL $8($4, $12)
	goto $label$22 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-4625508128210572400) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-4624786582803578880) ){ goto $label$22 }
	*($12 + [148]) = [0]
	*($12 + [144]) = [4]
	*($12 + [24 align=4]) = *($12 + [144])
	CALL $13($4, ($12 + [24]))
	goto $label$22 
	
.LABEL $label$29
	*($12 + [140]) = [0]
	*($12 + [136]) = [5]
	*($12 + [32 align=4]) = *($12 + [136])
	CALL $15($4, ($12 + [32]))
	goto $label$22 
	
.LABEL $label$28
	*($12 + [132]) = [0]
	*($12 + [128]) = [6]
	*($12 + [40 align=4]) = *($12 + [128])
	CALL $17($4, ($12 + [40]))
	goto $label$22 
	
.LABEL $label$27
	*($12 + [116]) = [0]
	*($12 + [112]) = [7]
	*($12 + [56 align=4]) = *($12 + [112])
	CALL $19($4, ($12 + [56]))
	goto $label$22 
	
.LABEL $label$26
	*($12 + [108]) = [0]
	*($12 + [104]) = [8]
	*($12 + [64 align=4]) = *($12 + [104])
	CALL $15($4, ($12 + [64]))
	goto $label$22 
	
.LABEL $label$25
	*($12 + [92]) = [0]
	*($12 + [88]) = [9]
	*($12 + [80 align=4]) = *($12 + [88])
	CALL $19($4, ($12 + [80]))
	goto $label$22 
	
.LABEL $label$24
	*($12 + [164]) = [0]
	*($12 + [160]) = [10]
	*($12 + [8 align=4]) = *($12 + [160])
	CALL $8($4, ($12 + [8]))
	goto $label$22 
	
.LABEL $label$23
	*($12 + [156]) = [0]
	*($12 + [152]) = [11]
	*($12 + [16 align=4]) = *($12 + [152])
	CALL $11($4, ($12 + [16]))
	
.LABEL $label$22
	$5 = *(($4 + [320]))
	if ( ($5 == 0) ){ goto $label$33 }
	$6 = ($4 + [324])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$35 }
	
.LOOP $label$36:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$37 }
	CALL $119($3)
	
.LABEL $label$37
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$36 }
	$7 = *(($4 + [320]))
	goto $label$34 
	
.LABEL $label$35
	$7 = $5
	
.LABEL $label$34
	*($6) = $5
	CALL $119($7)
	
.LABEL $label$33
	$5 = *(($4 + [280]))
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($4 + [284])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $119($3)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($4 + [280]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $5
	
.LABEL $label$38
	*($6) = $5
	CALL $119($7)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [512])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $128($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($4 + $3)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $117($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $125($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $121($0)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [384])
	*([0] + [4]) = $4
	CALL $28($0)
	*($0 + [256]) = $1
	$1 = *($2)
	CALL memcpy($0, *(*($2 + [4])), [256])
	*($4 + [256]) = ($4 + [244])
	*($4 + [252]) = $4
	*($4 + [248]) = $4
	*($4 + [264]) = ($4 + [248])
	*($4 + [276]) = ($0 + [8])
	*($4 + [272]) = $0
	*($4 + [280]) = ($0 + [16])
	*($4 + [284]) = ($0 + [24])
	*($4 + [288]) = ($0 + [40])
	*($4 + [292]) = ($0 + [56])
	*($4 + [296]) = ($0 + [72])
	*($4 + [300]) = ($0 + [80])
	*($4 + [304]) = ($0 + [88])
	*($4 + [308]) = ($0 + [96])
	*($4 + [312]) = ($0 + [104])
	*($4 + [316]) = ($0 + [112])
	*($4 + [320]) = ($0 + [120])
	*($4 + [324]) = ($0 + [128])
	*($4 + [328]) = ($0 + [136])
	*($4 + [332]) = ($0 + [144])
	*($4 + [336]) = ($0 + [152])
	*($4 + [340]) = ($0 + [160])
	*($4 + [344]) = ($0 + [176])
	*($4 + [348]) = ($0 + [184])
	*($4 + [352]) = ($0 + [200])
	*($4 + [356]) = ($0 + [208])
	*($4 + [360]) = ($0 + [216])
	*($4 + [364]) = ($0 + [224])
	*($4 + [368]) = ($0 + [232])
	*($4 + [372]) = ($0 + [240])
	*($4 + [376]) = ($0 + [248])
	CALL $27(($4 + [272]), ($4 + [264]))
	$3 = *($0)
	*($0 + [260]) = CALL db_store_i64(*($1 + [8]), (int_64)-5002379550982668288, *(*($2 + [8])), $3, $4, [244])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [384])
	return $0
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1408])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $117([272])
	CALL $48($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [260])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $119($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	*($11 + [64]) = [0]
	*($11 + [68 align=4]) = (int_64)0
	$10 = ( [1472] ? [1488] : ((int_64)*($2) < (int_64)0) )
	$3 = CALL strlen($10)
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($11 + [64]) = ($3 << [1])
	$7 = (($11 + [64]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($3 + [16]) & [-16])
	$7 = CALL $117($6)
	*($11 + [64]) = ($6 | [1])
	*($11 + [72]) = $7
	*($11 + [68]) = $3
	
.LABEL $label$3
	CALL memcpy($7, $10, $3)
	
.LABEL $label$2
	$10 = [0]
	*(($7 + $3)) = [0]
	$5 = *($2 + [8])
	$4 = CALL llabs(*($2))
	CALL _ZNSt3__19to_stringEy(($11 + [48]), $4)
	$9 = ((int_64)$5 & (int_64)255)
	if ( (int_64)($9 == 0) ){ goto $label$5 }
	$8 = (int_64))((int_64)0 - $9)
	$9 = (int_64)1
	
.LOOP $label$6:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$6 }
	CALL _ZNSt3__19to_stringEy(($11 + [32]), ((uint_64)$4 / (uint_64)$9))
	if ( (*($11 + [48]) & [1]) ){ goto $label$8 }
	*($11 + [48]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*($11 + [56])) = [0]
	*($11 + [52]) = [0]
	
.LABEL $label$7
	CALL $124(($11 + [48]), [0])
	$7 = (($11 + [32]) + [8])
	*((($11 + [48]) + [8])) = *($7)
	*($11 + [48]) = *($11 + [32])
	CALL _ZNSt3__19to_stringEy(($11 + [16]), ((int_64)((uint_64)$4 % (uint_64)$9) + (int_64)$9))
	CALL $131(($11 + [32]), [1504], CALL $129(($11 + [16]), [0], [1]))
	$3 = *($11 + [32])
	$2 = ($3 & [1])
	CALL $125(($11 + [48]), ( *($11 + [40]) ? (($11 + [32]) | [1]) : $2 ), ( *($11 + [36]) ? uint_32($3 >> [1]) : $2 ))
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $119(*($7))
	
.LABEL $label$9
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $119(*($11 + [24]))
	
.LABEL $label$5
	CALL $49(($11 + [16]), ($11 + [64]), ($11 + [48]))
	$3 = CALL $126(($11 + [16]), [1520])
	$2 = ($3 + [8])
	*((($11 + [32]) + [8])) = *($2)
	*($11 + [32]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	*($11 + [8]) = [0]
	*($11) = (int_64)0
	$9 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (int_64)($9) == 0) ){ goto $label$11 }
	
.LOOP $label$12:
	CALL $127($11, int_32(((CASTING uint_32)(uint_64 $9) << [24]) >> [24]))
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$12 }
	$7 = *(($11 + [8]))
	$10 = *($11 + [4])
	$3 = *($11)
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	$3 = [0]
	
.LABEL $label$10
	$2 = ($3 & [1])
	$3 = CALL $125(($11 + [32]), ( $7 ? ($11 | [1]) : $2 ), ( $10 ? uint_32(($3 & [254]) >> [1]) : $2 ))
	$9 = *($3)
	*($3) = (int_64)0
	*($0) = $9
	$3 = ($3 + [8])
	*(($0 + [8])) = *($3)
	*($3) = [0]
	if ( ((*($11) & [1]) == 0) ){ goto $label$13 }
	CALL $119(*(($11 + [8])))
	
.LABEL $label$13
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $119(*($11 + [40]))
	
.LABEL $label$14
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $119(*($11 + [24]))
	
.LABEL $label$15
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL $119(*($11 + [56]))
	
.LABEL $label$16
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL $119(*($11 + [72]))
	
.LABEL $label$17
	*([0] + [4]) = ($11 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $121(($11 + [64]))
}

int_64 .FUNC $41 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [320]))
	$6 = *(($0 + [324]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [296])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [296])), *(($0 + [304])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $50($4, $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [96])
	
.LABEL $label$3
	$1 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [224])
	CALL $51($4, $5, $1, ($7 + [8]))
	$1 = *($5 + [8])
	*([0] + [4]) = ($7 + [16])
	return $1
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1040])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1104])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $119($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $119($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [260]))
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $117(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $119($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $119($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $117([32])
	$6 = CALL $46($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $47(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $119($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	$5 = [0]
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($1)
	*($6 + [16]) = $4
	*($6 + [8]) = $2
	$1 = CALL db_find_i64($2, $4, (int_64)3607749779137757184, (uint_64)*($3) >> (uint_64)(int_64)8)
	if ( ((int_32)$1) <= (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL $45(($6 + [8]), $1)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [96])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($0) = (int_64)0
	$2 = *($3)
	*($0 + [8]) = $2
	CALL eosio_assert([1], [544])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	
.LOOP $label$5:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$0 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($0, [512])
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = ($6 + [36])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $119($0)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $3
	
.LABEL $label$8
	*($1) = $3
	CALL $119($5)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $117([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $34($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $71(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $34($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [448])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [448])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $70(CALL $69($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $117([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [496])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [496])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $52(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $119($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$4 = *($1)
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [448])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $117(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $119($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $119($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [512])
	*(($0 + [72])) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [512])
	*($0 + [80]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $54(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $55(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [32]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [72]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [80]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $56 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [280]))
	$6 = *(($0 + [284]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [256])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [256]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $25($4, $6)
	CALL eosio_assert(((int_32)*($5 + [256]) == (int_32)$4), [96])
	
.LABEL $label$3
	$4 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [624])
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)*($5 + [96])) ){ goto $label$5 }
	$4 = ((int_64)*($5 + [104]) != (int_64)0)
	
.LABEL $label$5
	return $4
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [160])
	*([0] + [4]) = $8
	*(($8 + [88])) = [0]
	*($8 + [80]) = (int_64)0
	$5 = CALL strlen([1520])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$6 }
	*($8 + [80]) = ($5 << [1])
	$6 = (($8 + [80]) | [1])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($5 + [16]) & [-16])
	$6 = CALL $117($7)
	*($8 + [80]) = ($7 | [1])
	*($8 + [88]) = $6
	*($8 + [84]) = $5
	
.LABEL $label$5
	CALL memcpy($6, [1520], $5)
	
.LABEL $label$4
	*(($6 + $5)) = [0]
	CALL _ZNSt3__19to_stringEy(($8 + [64]), $2)
	$5 = *($8 + [64])
	$6 = ($5 & [1])
	$5 = CALL $125(($8 + [80]), ( *($8 + [72]) ? (($8 + [64]) | [1]) : $6 ), ( *($8 + [68]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($8 + [96]) + [8])) = *($6)
	*($8 + [96]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($6) = [0]
	*((($8 + [48]) + [8])) = [0]
	*($8 + [48]) = (int_64)0
	$5 = CALL strlen([1472])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($8 + [48]) = ($5 << [1])
	$7 = (($8 + [48]) | [1])
	$6 = $7
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (($5 + [16]) & [-16])
	$6 = CALL $117($7)
	*($8 + [48]) = ($7 | [1])
	*($8 + [56]) = $6
	*($8 + [52]) = $5
	$7 = (($8 + [48]) | [1])
	
.LABEL $label$8
	CALL memcpy($6, [1472], $5)
	
.LABEL $label$7
	*(($6 + $5)) = [0]
	$5 = *($8 + [48])
	$6 = ($5 & [1])
	$5 = CALL $125(($8 + [96]), ( *($8 + [56]) ? $7 : $6 ), ( *($8 + [52]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($8 + [112]) + [8])) = *($6)
	*($8 + [112]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($6) = [0]
	CALL _ZNSt3__19to_stringEy(($8 + [32]), $3)
	$5 = *($8 + [32])
	$6 = ($5 & [1])
	$5 = CALL $125(($8 + [112]), ( *($8 + [40]) ? (($8 + [32]) | [1]) : $6 ), ( *($8 + [36]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($8 + [128]) + [8])) = *($6)
	*($8 + [128]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($6) = [0]
	*((($8 + [16]) + [8])) = [0]
	*($8 + [16]) = (int_64)0
	$5 = CALL strlen([1472])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*($8 + [16]) = ($5 << [1])
	$7 = (($8 + [16]) | [1])
	$6 = $7
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($5 + [16]) & [-16])
	$6 = CALL $117($7)
	*($8 + [16]) = ($7 | [1])
	*($8 + [24]) = $6
	*($8 + [20]) = $5
	$7 = (($8 + [16]) | [1])
	
.LABEL $label$11
	CALL memcpy($6, [1472], $5)
	
.LABEL $label$10
	*(($6 + $5)) = [0]
	$5 = *($8 + [16])
	$6 = ($5 & [1])
	$5 = CALL $125(($8 + [128]), ( *($8 + [24]) ? $7 : $6 ), ( *($8 + [20]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($8 + [144]) + [8])) = *($6)
	*($8 + [144]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($6) = [0]
	CALL _ZNSt3__19to_stringEy($8, $4)
	$5 = *($8)
	$6 = ($5 & [1])
	$5 = CALL $125(($8 + [144]), ( *($8 + [8]) ? ($8 | [1]) : $6 ), ( *($8 + [4]) ? uint_32($5 >> [1]) : $6 ))
	$2 = *($5)
	*($5) = (int_64)0
	*($0) = $2
	$5 = ($5 + [8])
	*(($0 + [8])) = *($5)
	*($5) = [0]
	if ( ((*($8) & [1]) == 0) ){ goto $label$13 }
	CALL $119(*(($8 + [8])))
	
.LABEL $label$13
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$14 }
	CALL $119(*($8 + [152]))
	
.LABEL $label$14
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $119(*(($8 + [24])))
	
.LABEL $label$15
	if ( ((*($8 + [128]) & [1]) == 0) ){ goto $label$16 }
	CALL $119(*($8 + [136]))
	
.LABEL $label$16
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL $119(*(($8 + [40])))
	
.LABEL $label$17
	if ( ((*($8 + [112]) & [1]) == 0) ){ goto $label$18 }
	CALL $119(*($8 + [120]))
	
.LABEL $label$18
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$19 }
	CALL $119(*(($8 + [56])))
	
.LABEL $label$19
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$20 }
	CALL $119(*($8 + [104]))
	
.LABEL $label$20
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$21 }
	CALL $119(*(($8 + [72])))
	
.LABEL $label$21
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$22 }
	CALL $119(*($8 + [88]))
	
.LABEL $label$22
	*([0] + [4]) = ($8 + [160])
	return (unreachable)
	
.LABEL $label$3
	CALL $121(($8 + [80]))
	
.LABEL $label$2
	CALL $121(($8 + [48]))
	
.LABEL $label$1
	CALL $121(($8 + [16]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [3952]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $154(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [4432]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [4464]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [4470] ? [4465] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [4434] ? [4432] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [4467]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $141()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [4432]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [4432]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [4416])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [4432])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [4448] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [4432]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [4528] ? [4544] : $30 ) ? ( [4496] ? [4512] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [4432]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [4433]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [4432] ? [4437] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [4416])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [4416])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [4416])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([4560], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([4560], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([4560], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $154(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $154(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $154(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $154(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $154(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $154(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $154(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $154(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $154(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [4576])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [4672]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [4672]
	return .LABEL $label$1
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [15254]) == 0) ){ goto $label$2 }
	$7 = *([0] + [15256])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [15254]) = [1]
	$7 = ($7 << [16])
	*([0] + [15256]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [15256])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [15256]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [15254]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [15254]) = [1]
	$3 = ($3 << [16])
	*([0] + [15256]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [15256])
	
.LABEL $label$8
	*([0] + [15256]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [448])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $117([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $34($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [448])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [448])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [448])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $68($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [32]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($0 + [48]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($0 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($0 + [72]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($0 + [80]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2048])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1504])
	CALL prints_l($2, $3)
	CALL prints([1520])
	CALL $67($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $61 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)297649394692), [2016])
	$4 = *($0 + [96])
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [80]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($10 + [80]) = $8
	*($10 + [72]) = $4
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1952]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)4) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	CALL $139($10, $3)
	if ( ((*($10) & [1]) == 0) ){ goto $label$14 }
	if ( (*($10 + [4]) <= [257]) ){ goto $label$14 }
	CALL $140(($10 + [16]), $10, [0], [256], $10)
	goto $label$13 
	
.LABEL $label$14
	$0 = ($10 + [8])
	*((($10 + [16]) + [8])) = *($0)
	*($0) = [0]
	*($10 + [16]) = *($10)
	*($10) = (int_64)0
	
.LABEL $label$13
	*(($10 + [52])) = *(($2 + [12]))
	*(($10 + [48])) = *(($2 + [8]))
	*((($10 + [32]) + [12])) = *(($2 + [4]))
	*($10 + [32]) = $1
	*($10 + [40]) = *($2)
	$0 = (($10 + [16]) + [8])
	*(($10 + [64])) = *($0)
	*($10 + [56]) = *($10 + [16])
	*($10 + [16]) = [0]
	*($10 + [20]) = [0]
	*($0) = [0]
	$0 = CALL $65(($10 + [88]), ($10 + [72]), $4, $8, ($10 + [32]))
	CALL $59(($10 + [128]), $0)
	$5 = *($10 + [128])
	CALL send_inline($5, (*($10 + [132]) - $5))
	$5 = *($10 + [128])
	if ( ($5 == 0) ){ goto $label$15 }
	*($10 + [132]) = $5
	CALL $119($5)
	
.LABEL $label$15
	$5 = *($0 + [28])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($0 + [32])) = $5
	CALL $119($5)
	
.LABEL $label$16
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($0 + [20])) = $5
	CALL $119($5)
	
.LABEL $label$17
	if ( ((*(($10 + [56])) & [1]) == 0) ){ goto $label$18 }
	CALL $119(*(($10 + [64])))
	
.LABEL $label$18
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL $119(*(($10 + [24])))
	
.LABEL $label$19
	if ( ((*($10) & [1]) == 0) ){ goto $label$20 }
	CALL $119(*($10 + [8]))
	
.LABEL $label$20
	CALL prints([1968])
	CALL $66($2)
	CALL prints([1984])
	CALL printn($1)
	CALL prints([2000])
	*([0] + [4]) = ($10 + [144])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = *(($1 + [280]))
	$8 = *(($1 + [284]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$2) ){ goto $label$1 }
	$8 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($1 + [256])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [256]) == (int_32)$9), [96])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$5 = CALL db_find_i64(*(($1 + [256])), *(($1 + [264])), (int_64)-5002379550982668288, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $25($9, $5)
	CALL eosio_assert(((int_32)*($8 + [256]) == (int_32)$9), [96])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [624])
	*($0 + [8]) = (int_64)297649394692
	*($0) = (int_64)0
	CALL eosio_assert([1], [544])
	$2 = (int_64)1162692948
	$9 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [512])
	if ( ((int_64)*($8 + [232]) < (int_64)1) ){ goto $label$10 }
	if ( ((int_64)*($8 + [72]) == (int_64)*($1 + [80])) ){ goto $label$10 }
	$6 = (int_64)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$6(((int_64)((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($8 + [80]))) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [2064])
	$7 = ((int_64)((int_64)$6 * (int_64)*(($8 + [232]))) / (int_64)10)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [544])
	$2 = (int_64)1162692948
	$9 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [512])
	*(($0 + [8])) = (int_64)297649394692
	*($0) = $7
	$2 = *(($8 + [72]))
	CALL prints([2112])
	CALL printn($2)
	CALL prints([2144])
	CALL printi($6)
	CALL prints([2176])
	CALL $66($0)
	
.LABEL $label$10
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [384])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	$4 = *($1)
	$5 = *($3 + [4])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [1824])
	$6 = (int_64)
	*($1 + [40]) = $6(*($1 + [40]) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [1904])
	*($1 + [240]) = ((int_64)*($1 + [240]) | (int_64)*($5 + [48]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [384])
	*($7 + [256]) = ($7 + [244])
	*($7 + [252]) = $7
	*($7 + [248]) = $7
	*($7 + [264]) = ($7 + [248])
	*($7 + [276]) = ($1 + [8])
	*($7 + [272]) = $1
	*($7 + [280]) = ($1 + [16])
	*($7 + [284]) = ($1 + [24])
	*($7 + [288]) = ($1 + [40])
	*($7 + [292]) = ($1 + [56])
	*($7 + [296]) = ($1 + [72])
	*($7 + [300]) = ($1 + [80])
	*($7 + [304]) = ($1 + [88])
	*($7 + [308]) = ($1 + [96])
	*($7 + [312]) = ($1 + [104])
	*($7 + [316]) = ($1 + [112])
	*($7 + [320]) = ($1 + [120])
	*($7 + [324]) = ($1 + [128])
	*($7 + [328]) = ($1 + [136])
	*($7 + [332]) = ($1 + [144])
	*($7 + [336]) = ($1 + [152])
	*($7 + [340]) = ($1 + [160])
	*($7 + [344]) = ($1 + [176])
	*($7 + [348]) = ($1 + [184])
	*($7 + [352]) = ($1 + [200])
	*($7 + [356]) = ($1 + [208])
	*($7 + [360]) = ($1 + [216])
	*($7 + [364]) = ($1 + [224])
	*($7 + [368]) = ($1 + [232])
	*($7 + [372]) = ($1 + [240])
	*($7 + [376]) = ($1 + [248])
	CALL $27(($7 + [272]), ($7 + [264]))
	CALL db_update_i64(*($1 + [260]), $2, $7, [244])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [384])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($2 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $64(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($4 + [4]), ($2 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [448])
	CALL memcpy(*($4 + [4]), ($2 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [104]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($4 + [112]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($2 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $89(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [384])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [2880])
	$5 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2928])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [2960])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [384])
	*($6 + [256]) = ($6 + [244])
	*($6 + [252]) = $6
	*($6 + [248]) = $6
	*($6 + [264]) = ($6 + [248])
	*($6 + [276]) = ($1 + [8])
	*($6 + [272]) = $1
	*($6 + [280]) = ($1 + [16])
	*($6 + [284]) = ($1 + [24])
	*($6 + [288]) = ($1 + [40])
	*($6 + [292]) = ($1 + [56])
	*($6 + [296]) = ($1 + [72])
	*($6 + [300]) = ($1 + [80])
	*($6 + [304]) = ($1 + [88])
	*($6 + [308]) = ($1 + [96])
	*($6 + [312]) = ($1 + [104])
	*($6 + [316]) = ($1 + [112])
	*($6 + [320]) = ($1 + [120])
	*($6 + [324]) = ($1 + [128])
	*($6 + [328]) = ($1 + [136])
	*($6 + [332]) = ($1 + [144])
	*($6 + [336]) = ($1 + [152])
	*($6 + [340]) = ($1 + [160])
	*($6 + [344]) = ($1 + [176])
	*($6 + [348]) = ($1 + [184])
	*($6 + [352]) = ($1 + [200])
	*($6 + [356]) = ($1 + [208])
	*($6 + [360]) = ($1 + [216])
	*($6 + [364]) = ($1 + [224])
	*($6 + [368]) = ($1 + [232])
	*($6 + [372]) = ($1 + [240])
	*($6 + [376]) = ($1 + [248])
	CALL $27(($6 + [272]), ($6 + [264]))
	CALL db_update_i64(*($1 + [260]), $2, $6, [244])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [384])
}

int_64 .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	*($14 + [40]) = $2
	CALL eosio_assert(((int_64)*($0 + [80]) != (int_64)$2), [3120])
	$5 = *(($0 + [280]))
	$13 = *(($0 + [284]))
	if ( ((int_32)$13 == (int_32)$5) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$13 = $12
	$7 = ($12 + [-24])
	$12 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [256])
	if ( ((int_32)$13 == (int_32)$5) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [256]) == (int_32)$6), [96])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$7 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $25($6, $7)
	CALL eosio_assert(((int_32)*($12 + [256]) == (int_32)$6), [96])
	
.LABEL $label$3
	$8 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($8, [624])
	CALL eosio_assert(((int_64)((int_64)*($0 + [40]) & (int_64)*($12 + [240])) != (int_64)0), [3152])
	CALL eosio_assert(((int_64)*($12 + [104]) != (int_64)0), [3184])
	if ( ((int_64)((int_64)*($0 + [32]) & (int_64)*($12 + [240])) != (int_64)0) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*($12 + [72]) != (int_64)$2), [3232])
	
.LABEL $label$5
	$1 = CALL current_time()
	$7 = *($12 + [96])
	*($14 + [36]) = $7
	$1 = ((uint_64)$1 / (uint_64)(int_64)1000000)
	$5 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$6 }
	if ( ((int_64)*($12 + [72]) != (int_64)*(($0 + [80]))) ){ goto $label$7 }
	$2 = *($12 + [200])
	$7 = (CASTING uint_32)(uint_64 ((int_64)((int_64)((int_64)((uint_64)(CASTING uint_64)(uint_32 ($5 - $7)) / (uint_64)$2) + (int_64)1) * (int_64)$2) + (int_64)(CASTING uint_64)(uint_32 $7)))
	*($14 + [36]) = $7
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [3280])
	
.LABEL $label$6
	$2 = *($12 + [224])
	if ( (int_64)($2 == 0) ){ goto $label$9 }
	$13 = ((uint_64)*(($12 + [104])) <= (uint_64)$2)
	goto $label$8 
	
.LABEL $label$9
	$13 = [0]
	
.LABEL $label$8
	$10 = ($12 + [208])
	$9 = ($12 + [216])
	$1 = (CASTING uint_64)(uint_32 $7)
	$2 = ((int_64)$1 & (int_64)4294967295)
	if ( ((uint_64)$2 >= (uint_64)(int_64))($1 - *(( $9 ? $10 : $13 )))) ){ goto $label$12 }
	$11 = *($12 + [152])
	if ( (int_64)($11 == 0) ){ goto $label$10 }
	CALL prints([3312])
	CALL printui($1)
	CALL prints([3344])
	$7 = ($7 - $5)
	CALL printui((CASTING uint_64)(uint_32 $7))
	CALL prints([3376])
	$7 = ((uint_32)((int_32)(CASTING uint_32)(uint_64 $11) * (int_32)$7) / (uint_32)[100000])
	CALL printui((CASTING uint_64)(uint_32 $7))
	$7 = ($7 + $5)
	*($14 + [36]) = $7
	CALL prints([3408])
	$1 = (CASTING uint_64)(uint_32 $7)
	CALL printui($1)
	if ( ($13 == 0) ){ goto $label$11 }
	$11 = *($9)
	if ( ((uint_64)$2 <= (uint_64)(int_64))($1 - $11)) ){ goto $label$10 }
	*($14 + [36]) = ((CASTING uint_32)(uint_64 $11) + $5)
	goto $label$10 
	
.LABEL $label$12
	if ( ($13 == 0) ){ goto $label$13 }
	*($14 + [36]) = (*($9) + $5)
	goto $label$10 
	
.LABEL $label$13
	*($14 + [36]) = (*($10) + $5)
	goto $label$10 
	
.LABEL $label$11
	$11 = *($10)
	if ( ((uint_64)$2 <= (uint_64)(int_64))($1 - $11)) ){ goto $label$10 }
	*($14 + [36]) = ((CASTING uint_32)(uint_64 $11) + $5)
	
.LABEL $label$10
	*($14 + [24]) = CALL $41($0, *($0 + [24]))
	$1 = *($0)
	*($14 + [12]) = $3
	*($14 + [16]) = $4
	*($14 + [4]) = ($14 + [40])
	*($14) = ($14 + [36])
	*($14 + [8]) = ($14 + [24])
	CALL eosio_assert($8, [224])
	CALL $90($6, $12, $1, $14)
	$1 = *($14 + [24])
	*([0] + [4]) = ($14 + [48])
	return $1
}

void .FUNC $85 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [608])
	*([0] + [4]) = $21
	CALL prints([2288])
	$13 = *($3)
	$11 = ($13 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $11 ), ( *($3 + [4]) ? uint_32($13 >> [1]) : $11 ))
	CALL prints([2304])
	$13 = *($4)
	$11 = ($13 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $11 ), ( *($4 + [4]) ? uint_32($13 >> [1]) : $11 ))
	CALL prints([2336])
	CALL printui($5)
	CALL prints([2352])
	CALL printn($6)
	CALL prints([2368])
	CALL printui($6)
	$7 = CALL $130($3, [2384])
	$9 = *(($0 + [280]))
	$11 = *(($0 + [284]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$1 }
	$3 = ($11 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($3)) == (int_64)$5) ){ goto $label$1 }
	$11 = $3
	$13 = ($3 + [-24])
	$3 = $13
	if ( ((int_32)($13 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [256])
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$4 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [256]) == (int_32)$8), [96])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$3 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $5)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $25($8, $3)
	CALL eosio_assert(((int_32)*($11 + [256]) == (int_32)$8), [96])
	
.LABEL $label$3
	$9 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($9, [624])
	CALL $35(($21 + [296]), $0, $1)
	CALL _ZNSt3__19to_stringEy(($21 + [528]), *($11 + [104]))
	$3 = *($21 + [528])
	$13 = ($3 & [1])
	$3 = CALL $125(($21 + [296]), ( *($21 + [536]) ? (($21 + [528]) | [1]) : $13 ), ( *($21 + [532]) ? uint_32($3 >> [1]) : $13 ))
	$13 = ($3 + [8])
	*((($21 + [128]) + [8])) = *($13)
	*($21 + [128]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($13) = [0]
	CALL _ZNSt3__19to_stringEy(($21 + [512]), $5)
	$3 = *($21 + [512])
	$13 = ($3 & [1])
	$3 = CALL $125(($21 + [128]), ( *($21 + [520]) ? (($21 + [512]) | [1]) : $13 ), ( *($21 + [516]) ? uint_32($3 >> [1]) : $13 ))
	$13 = ($3 + [8])
	*((($21 + [576]) + [8])) = *($13)
	*($21 + [576]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($13) = [0]
	if ( ((*($21 + [512]) & [1]) == 0) ){ goto $label$5 }
	CALL $119(*((($21 + [512]) + [8])))
	
.LABEL $label$5
	if ( ((*($21 + [128]) & [1]) == 0) ){ goto $label$6 }
	CALL $119(*($21 + [136]))
	
.LABEL $label$6
	if ( ((*($21 + [528]) & [1]) == 0) ){ goto $label$7 }
	CALL $119(*(($21 + [536])))
	
.LABEL $label$7
	if ( ((*($21 + [296]) & [1]) == 0) ){ goto $label$8 }
	CALL $119(*($21 + [304]))
	
.LABEL $label$8
	CALL prints([656])
	$3 = *($21 + [576])
	$13 = ($3 & [1])
	CALL prints_l(( *($21 + [584]) ? (($21 + [576]) | [1]) : $13 ), ( *($21 + [580]) ? uint_32($3 >> [1]) : $13 ))
	CALL prints([688])
	CALL $139(($21 + [560]), ($21 + [576]))
	CALL $139(($21 + [544]), $4)
	CALL $36($0, ($21 + [560]), ($21 + [544]))
	if ( ((*($21 + [544]) & [1]) == 0) ){ goto $label$9 }
	CALL $119(*($21 + [552]))
	
.LABEL $label$9
	if ( ((*($21 + [560]) & [1]) == 0) ){ goto $label$10 }
	CALL $119(*($21 + [568]))
	
.LABEL $label$10
	$13 = ($11 + [64])
	CALL eosio_assert(((int_64)*(($2 + [24])) == (int_64)*($13)), [1232])
	CALL eosio_assert(((int_64)*($2 + [16]) == (int_64)*($11 + [56])), [2400])
	CALL eosio_assert(((int_64)((int_64)*($0 + [40]) & (int_64)*($11 + [240])) != (int_64)0), [2432])
	*(($3 = (($21 + [528]) + [8]))) = *($13)
	*($21 + [528]) = *($11 + [56])
	$1 = *($11 + [112])
	$1 = *($21 + [528])
	CALL __multi3(($21 + [80]), $1, (int_64)$1 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$17 = *($3)
	$1 = *((($21 + [80]) + [8]))
	$19 = *($21 + [80])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [2464])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [2496])
	*($21 + [520]) = $17
	CALL eosio_assert([1], [2528])
	CALL eosio_assert([1], [2544])
	*($21 + [512]) = ((int_64)$19 / (int_64)100000)
	$1 = *($11 + [120])
	$1 = *($21 + [528])
	CALL __multi3(($21 + [64]), $1, (int_64)$1 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$17 = *($3)
	$1 = *((($21 + [64]) + [8]))
	$19 = *($21 + [64])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [2464])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [2496])
	*($21 + [504]) = $17
	CALL eosio_assert([1], [2528])
	CALL eosio_assert([1], [2544])
	*($21 + [496]) = ((int_64)$19 / (int_64)100000)
	CALL $60(($21 + [480]), $0, $5)
	*((($21 + [464]) + [12])) = *((($21 + [512]) + [12]))
	*(($3 = (($21 + [464]) + [8]))) = *($21 + [520])
	*($21 + [468]) = *($21 + [516])
	*($21 + [464]) = *($21 + [512])
	$19 = *($11 + [72])
	$1 = *($2)
	*(($13 = (($21 + [448]) + [8]))) = *($21 + [504])
	*($21 + [448]) = *($21 + [496])
	*((($21 + [112]) + [8])) = *($3)
	*($21 + [112]) = *($21 + [464])
	*((($21 + [96]) + [8])) = *($13)
	*($21 + [96]) = *($21 + [448])
	$17 = CALL $86($0, $5, $1, ($21 + [112]), ($21 + [96]))
	CALL eosio_assert(((int_64)$17 == (int_64)*($11 + [88])), [2576])
	CALL eosio_assert([1], [544])
	$1 = (int_64)1162692948
	$16 = (int_64)297649394692
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$13 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$13 = [0]
	
.LABEL $label$11
	CALL eosio_assert($13, [512])
	if ( ($7 == 0) ){ goto $label$17 }
	$15 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_64)*($21 + [480]) < (int_64)1) ){ goto $label$20 }
	*(($21 + [136])) = [0]
	*($21 + [128]) = (int_64)0
	$3 = CALL strlen([2624])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$23 }
	*($21 + [128]) = ($3 << [1])
	$13 = (($21 + [128]) | [1])
	if ( $3 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$10 = (($3 + [16]) & [-16])
	$13 = CALL $117($10)
	*($21 + [128]) = ($10 | [1])
	*($21 + [136]) = $13
	*($21 + [132]) = $3
	
.LABEL $label$22
	CALL memcpy($13, [2624], $3)
	
.LABEL $label$21
	*(($13 + $3)) = [0]
	CALL $57(($21 + [296]), $0, *($11 + [8]), *($11), *(($11 + [88])))
	$3 = *($21 + [296])
	$13 = ($3 & [1])
	CALL $125(($21 + [128]), ( *($21 + [304]) ? (($21 + [296]) | [1]) : $13 ), ( *($21 + [300]) ? uint_32($3 >> [1]) : $13 ))
	if ( ((*($21 + [296]) & [1]) == 0) ){ goto $label$24 }
	CALL $119(*(($21 + [304])))
	
.LABEL $label$24
	*(($3 = (($21 + [432]) + [8]))) = *((($21 + [480]) + [8]))
	*($21 + [432]) = *($21 + [480])
	CALL $139(($21 + [416]), ($21 + [128]))
	*((($21 + [48]) + [8])) = *($3)
	*($21 + [48]) = *($21 + [432])
	CALL $61($0, $19, ($21 + [48]), ($21 + [416]))
	if ( ((*($21 + [416]) & [1]) == 0) ){ goto $label$25 }
	CALL $119(*($21 + [424]))
	
.LABEL $label$25
	if ( ((*($21 + [128]) & [1]) == 0) ){ goto $label$20 }
	CALL $119(*($21 + [136]))
	
.LABEL $label$20
	$15 = (int_64)0
	$1 = *($11 + [128])
	if ( (int_64)($1 == 0) ){ goto $label$16 }
	$15 = ((int_64)*(($2 + [16])) * (int_64)$1)
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [544])
	$1 = (int_64)1162692948
	$3 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$13 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$13 = [0]
	
.LABEL $label$26
	CALL eosio_assert($13, [512])
	if ( ((int_64)$15 < (int_64)1) ){ goto $label$34 }
	*($21 + [408]) = (int_64)297649394692
	*((($21 + [16]) + [8])) = (int_64)297649394692
	*($21 + [400]) = $15
	*($21 + [16]) = $15
	CALL $42(($21 + [128]), $0, ($21 + [16]))
	$3 = *($21 + [136])
	$13 = *($21 + [128])
	CALL prints([2672])
	CALL prints(( $3 ? (($21 + [128]) | [1]) : ($13 & [1]) ))
	CALL prints([2688])
	if ( ((*($21 + [128]) & [1]) == 0) ){ goto $label$35 }
	CALL $119(*((($21 + [128]) + [8])))
	
.LABEL $label$35
	*((($21 + [128]) + [8])) = [0]
	*($21 + [128]) = (int_64)0
	$3 = CALL strlen([2720])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$33 }
	*($21 + [128]) = ($3 << [1])
	$13 = (($21 + [128]) | [1])
	if ( $3 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$16 = (int_64)297649394692
	*($21 + [360]) = (int_64)297649394692
	*((($21 + [32]) + [8])) = (int_64)297649394692
	*($21 + [352]) = $15
	*($21 + [32]) = $15
	CALL $42(($21 + [128]), $0, ($21 + [32]))
	$3 = *($21 + [136])
	$13 = *($21 + [128])
	CALL prints([2800])
	CALL prints(( $3 ? (($21 + [128]) | [1]) : ($13 & [1]) ))
	CALL prints([2688])
	if ( ((*($21 + [128]) & [1]) == 0) ){ goto $label$16 }
	CALL $119(*((($21 + [128]) + [8])))
	goto $label$16 
	
.LABEL $label$33
	$10 = (($3 + [16]) & [-16])
	$13 = CALL $117($10)
	*($21 + [128]) = ($10 | [1])
	*($21 + [136]) = $13
	*($21 + [132]) = $3
	
.LABEL $label$32
	CALL memcpy($13, [2720], $3)
	
.LABEL $label$31
	*(($13 + $3)) = [0]
	CALL $57(($21 + [296]), $0, *($11 + [8]), *($11), *(($11 + [88])))
	$3 = *($21 + [296])
	$13 = ($3 & [1])
	CALL $125(($21 + [128]), ( *($21 + [304]) ? (($21 + [296]) | [1]) : $13 ), ( *($21 + [300]) ? uint_32($3 >> [1]) : $13 ))
	if ( ((*($21 + [296]) & [1]) == 0) ){ goto $label$36 }
	CALL $119(*(($21 + [304])))
	
.LABEL $label$36
	*($21 + [384]) = $15
	*($21 + [392]) = (int_64)297649394692
	$1 = *($2)
	CALL $139(($21 + [368]), ($21 + [128]))
	*(($21 + [8])) = *($21 + [392])
	*($21) = *($21 + [384])
	CALL $61($0, $1, $21, ($21 + [368]))
	if ( ((*($21 + [368]) & [1]) == 0) ){ goto $label$37 }
	CALL $119(*($21 + [376]))
	
.LABEL $label$37
	if ( ((*($21 + [128]) & [1]) == 0) ){ goto $label$38 }
	CALL $119(*($21 + [136]))
	
.LABEL $label$38
	$16 = (int_64)297649394692
	goto $label$16 
	
.LABEL $label$19
	CALL $121(($21 + [128]))
	
.LABEL $label$18
	CALL $121(($21 + [128]))
	
.LABEL $label$16
	if ( ((int_64)*(($11 + [120])) == (int_64)0) ){ goto $label$45 }
	$10 = ($0 + [112])
	CALL eosio_assert(((int_64)*(($21 + [504])) == (int_64)*($10)), [1232])
	$4 = ($0 + [104])
	if ( ((int_64)*($21 + [496]) <= (int_64)*($0 + [104])) ){ goto $label$44 }
	if ( (CALL is_account($6) == 0) ){ goto $label$44 }
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$44 }
	*(($21 + [344])) = [0]
	*($21 + [336]) = (int_64)0
	$3 = CALL strlen([2816])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$43 }
	*($21 + [336]) = ($3 << [1])
	$13 = (($21 + [336]) | [1])
	if ( $3 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$45
	$4 = ($0 + [104])
	$10 = ($0 + [112])
	
.LABEL $label$44
	$3 = (($21 + [496]) + [8])
	CALL eosio_assert(((int_64)*($3) == (int_64)*((($21 + [512]) + [8]))), [2880])
	$1 = ((int_64)*($21 + [512]) + (int_64)*($21 + [496]))
	*($21 + [512]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [2928])
	CALL eosio_assert(((int_64)*($21 + [512]) < (int_64)4611686018427387904), [2960])
	*($3) = *(($0 + [112]))
	*($21 + [496]) = *($0 + [104])
	goto $label$39 
	
.LABEL $label$43
	$7 = (($3 + [16]) & [-16])
	$13 = CALL $117($7)
	*($21 + [336]) = ($7 | [1])
	*($21 + [344]) = $13
	*($21 + [340]) = $3
	
.LABEL $label$42
	CALL memcpy($13, [2816], $3)
	
.LABEL $label$41
	*(($13 + $3)) = [0]
	CALL $57(($21 + [128]), $0, *($11 + [8]), *($11), $17)
	$3 = *($21 + [128])
	$13 = ($3 & [1])
	CALL $125(($21 + [336]), ( *($21 + [136]) ? (($21 + [128]) | [1]) : $13 ), ( *($21 + [132]) ? uint_32($3 >> [1]) : $13 ))
	if ( ((*($21 + [128]) & [1]) == 0) ){ goto $label$46 }
	CALL $119(*(($21 + [136])))
	
.LABEL $label$46
	$20 = *($0 + [80])
	$1 = (int_64)0
	$17 = (int_64)59
	$3 = [80]
	$18 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$52 }
	$13 = *($3)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$13 = ($13 + [165])
	goto $label$50 
	
.LABEL $label$52
	$19 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$48
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$47 }
	*($21 + [288]) = $18
	*($21 + [280]) = $20
	$1 = (int_64)0
	$17 = (int_64)59
	$3 = [16]
	$18 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$58 }
	$13 = *($3)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$13 = ($13 + [165])
	goto $label$56 
	
.LABEL $label$58
	$19 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$54
	$3 = ($3 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$53 }
	$1 = (int_64)0
	$17 = (int_64)59
	$3 = [32]
	$20 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$64 }
	$13 = *($3)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$13 = ($13 + [165])
	goto $label$62 
	
.LABEL $label$64
	$19 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$60
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$59 }
	CALL $139(($21 + [248]), ($21 + [336]))
	if ( ((*($21 + [248]) & [1]) == 0) ){ goto $label$66 }
	if ( (*($21 + [252]) <= [257]) ){ goto $label$66 }
	CALL $140(($21 + [264]), ($21 + [248]), [0], [256], ($21 + [248]))
	goto $label$65 
	
.LABEL $label$66
	$3 = (($21 + [248]) + [8])
	*((($21 + [264]) + [8])) = *($3)
	*($3) = [0]
	*($21 + [264]) = *($21 + [248])
	*($21 + [248]) = (int_64)0
	
.LABEL $label$65
	*(($21 + [148])) = *($21 + [500])
	*($21 + [136]) = $6
	*(($21 + [156])) = *(($21 + [508]))
	*(($21 + [152])) = *((($21 + [496]) + [8]))
	*($21 + [128]) = *(($0 + [80]))
	*($21 + [144]) = *($21 + [496])
	$3 = (($21 + [264]) + [8])
	*(($21 + [168])) = *($3)
	*($21 + [160]) = *($21 + [264])
	*($21 + [264]) = [0]
	*($21 + [268]) = [0]
	*($3) = [0]
	$3 = CALL $58(($21 + [296]), ($21 + [280]), $18, $20, ($21 + [128]))
	CALL $59(($21 + [592]), $3)
	$13 = *($21 + [592])
	CALL send_inline($13, (*($21 + [596]) - $13))
	$13 = *($21 + [592])
	if ( ($13 == 0) ){ goto $label$67 }
	*($21 + [596]) = $13
	CALL $119($13)
	
.LABEL $label$67
	$13 = *($3 + [28])
	if ( ($13 == 0) ){ goto $label$68 }
	*(($3 + [32])) = $13
	CALL $119($13)
	
.LABEL $label$68
	$13 = *($3 + [16])
	if ( ($13 == 0) ){ goto $label$69 }
	*(($3 + [20])) = $13
	CALL $119($13)
	
.LABEL $label$69
	if ( ((*(($21 + [160])) & [1]) == 0) ){ goto $label$70 }
	CALL $119(*(($21 + [168])))
	
.LABEL $label$70
	if ( ((*($21 + [264]) & [1]) == 0) ){ goto $label$71 }
	CALL $119(*(($21 + [272])))
	
.LABEL $label$71
	if ( ((*($21 + [248]) & [1]) == 0) ){ goto $label$72 }
	CALL $119(*($21 + [256]))
	
.LABEL $label$72
	if ( ((*($21 + [336]) & [1]) == 0) ){ goto $label$39 }
	CALL $119(*($21 + [344]))
	goto $label$39 
	
.LABEL $label$40
	CALL $121(($21 + [336]))
	
.LABEL $label$39
	CALL eosio_assert(((int_64)*((($21 + [512]) + [8])) == (int_64)*($10)), [1232])
	if ( ((int_64)*($21 + [512]) <= (int_64)*($4)) ){ goto $label$73 }
	$1 = *($0)
	*($21 + [128]) = ($21 + [512])
	CALL eosio_assert($9, [224])
	CALL $87($8, $11, $1, ($21 + [128]))
	
.LABEL $label$73
	$1 = *($2)
	CALL prints([2992])
	CALL printn($1)
	CALL prints([3008])
	CALL $66(($21 + [528]))
	CALL prints([3024])
	CALL $66(($21 + [512]))
	CALL eosio_assert(((int_64)*((($21 + [496]) + [8])) == (int_64)*($10)), [1232])
	if ( ((int_64)*($21 + [496]) <= (int_64)*($4)) ){ goto $label$74 }
	CALL prints([3056])
	CALL $66(($21 + [496]))
	CALL prints([3088])
	CALL printn($6)
	
.LABEL $label$74
	$12 = *($0 + [80])
	$1 = (int_64)0
	$17 = (int_64)59
	$3 = [80]
	$18 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$80 }
	$13 = *($3)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$13 = ($13 + [165])
	goto $label$78 
	
.LABEL $label$80
	$19 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$76
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$75 }
	$14 = *($0)
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [3104]
	$20 = (int_64)0
	
.LOOP $label$81:
	$17 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$82 }
	$13 = *($3)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$13 = ($13 + [165])
	goto $label$83 
	
.LABEL $label$84
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$82
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$81 }
	$1 = (int_64)0
	$17 = (int_64)59
	$3 = [16]
	$6 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$90 }
	$13 = *($3)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$13 = ($13 + [165])
	goto $label$88 
	
.LABEL $label$90
	$19 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$86
	$3 = ($3 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$6 = ((int_64)$19 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$85 }
	*($21 + [144]) = $5
	*($21 + [128]) = *(($11 + [72]))
	*($21 + [136]) = *(($11 + [8]))
	*($21 + [152]) = *(($11 + [88]))
	*(($21 + [168])) = *((($21 + [528]) + [8]))
	*((($21 + [128]) + [36])) = *($21 + [532])
	*($21 + [160]) = *($21 + [528])
	*(($21 + [184])) = *((($21 + [512]) + [8]))
	*($21 + [176]) = *($21 + [512])
	*((($21 + [128]) + [72])) = *((($21 + [496]) + [8]))
	*($21 + [192]) = *($21 + [496])
	*($21 + [208]) = $15
	*((($21 + [128]) + [88])) = $16
	*(($21 + [232])) = *((($21 + [480]) + [8]))
	*($21 + [224]) = *($21 + [480])
	*($21 + [240]) = $6
	*($21 + [296]) = $14
	*($21 + [304]) = $20
	*(($3 = CALL $117([16]))) = $12
	*($3 + [8]) = $18
	*(($13 = ($21 + [328]))) = [0]
	$0 = ($3 + [16])
	*(($21 + [320])) = $0
	*(($21 + [316])) = $0
	*($21 + [312]) = $3
	*($21 + [324]) = [0]
	*((($21 + [296]) + [36])) = [0]
	CALL $34(($21 + [324]), [120])
	$3 = *($13)
	$13 = *($21 + [324])
	*($21 + [284]) = $13
	*($21 + [280]) = $13
	*($21 + [288]) = $3
	*($21 + [336]) = ($21 + [280])
	*($21 + [592]) = ($21 + [128])
	CALL $88(($21 + [592]), ($21 + [336]))
	CALL $59(($21 + [280]), ($21 + [296]))
	$3 = *($21 + [280])
	CALL send_inline($3, (*($21 + [284]) - $3))
	$3 = *($21 + [280])
	if ( ($3 == 0) ){ goto $label$91 }
	*($21 + [284]) = $3
	CALL $119($3)
	
.LABEL $label$91
	$3 = *($21 + [324])
	if ( ($3 == 0) ){ goto $label$92 }
	*(($21 + [328])) = $3
	CALL $119($3)
	
.LABEL $label$92
	$3 = *($21 + [312])
	if ( ($3 == 0) ){ goto $label$93 }
	*(($21 + [316])) = $3
	CALL $119($3)
	
.LABEL $label$93
	if ( ((*($21 + [576]) & [1]) == 0) ){ goto $label$94 }
	CALL $119(*(($21 + [584])))
	
.LABEL $label$94
	*([0] + [4]) = ($21 + [608])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [48])
	*([0] + [4]) = $15
	*($5) = (int_64)0
	$7 = [0]
	*($15 + [32]) = [0]
	*($15 + [24]) = (int_64)0
	$14 = CALL strlen([1472])
	*($15 + [16]) = $14
	*($15 + [8]) = [0]
	if ( ((uint_32)$14 >= (uint_32)[9]) ){ goto $label$3 }
	$8 = ($15 + [8])
	if ( $14 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$8 = CALL $118($14)
	*($15 + [8]) = $8
	
.LABEL $label$2
	CALL memmove($8, [1472], $14)
	$7 = *(($15 + [16]))
	
.LABEL $label$1
	CALL $114($8, ($8 + $7), ($15 + [40]))
	CALL $92(($15 + [24]), $1, ($15 + [8]), [1])
	if ( (*(($15 + [16])) <= [9]) ){ goto $label$4 }
	$14 = *($15 + [8])
	if ( ($14 == 0) ){ goto $label$4 }
	CALL $120($14)
	
.LABEL $label$4
	$7 = [0]
	$13 = *($15 + [24])
	if ( ((uint_32)(((int_32)(*($15 + [28]) - $13) / (int_32)[12]) + [-3]) > (uint_32)[1]) ){ goto $label$7 }
	if ( (CALL $130($13, [2384]) == 0) ){ goto $label$8 }
	if ( (CALL $130(*($15 + [24]), [3440]) == 0) ){ goto $label$8 }
	$13 = *($15 + [24])
	if ( $13 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $122($2, *($15 + [24]))
	CALL $122($3, (*($15 + [24]) + [12]))
	*($4) = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($15 + [24]) + [24]), [0], [10])
	$13 = *($15 + [24])
	if ( ((int_32)(*($15 + [28]) - $13) != (int_32)[48]) ){ goto $label$9 }
	if ( (*($13 + [36]) & [1]) ){ goto $label$11 }
	$14 = (($13 + [36]) + [1])
	goto $label$10 
	
.LABEL $label$11
	$14 = *(($13 + [44]))
	
.LABEL $label$10
	$8 = [-1]
	
.LOOP $label$12:
	$7 = ($14 + $8)
	$1 = ($8 + [1])
	$8 = $1
	if ( *(($7 + [1])) ){ goto $label$12 }
	$6 = (CASTING uint_64)(uint_32 $1)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$13:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$6) ){ goto $label$14 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [165])
	goto $label$15 
	
.LABEL $label$16
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$18 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$17 
	
.LABEL $label$18
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$17
	$14 = ($14 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$13 }
	*($5) = $11
	
.LABEL $label$9
	$7 = [1]
	
.LABEL $label$7
	if ( ($13 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$14 = *($15 + [28])
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$20 }
	$8 = ([0] - $13)
	$14 = ($14 + [-12])
	
.LOOP $label$21:
	if ( ((*($14) & [1]) == 0) ){ goto $label$22 }
	CALL $119(*(($14 + [8])))
	
.LABEL $label$22
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $8) != (int_32)[-12]) ){ goto $label$21 }
	$14 = *($15 + [24])
	goto $label$19 
	
.LABEL $label$20
	$14 = $13
	
.LABEL $label$19
	*($15 + [28]) = $13
	CALL $119($14)
	
.LABEL $label$5
	*([0] + [4]) = ($15 + [48])
	return $7
}

void .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $105($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($4 + [112]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $82(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [512])
	*(($0 + [72])) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [512])
	*(($0 + [88])) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$16
	CALL eosio_assert($5, [512])
	*(($0 + [104])) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$5 = [0]
	
.LABEL $label$21
	CALL eosio_assert($5, [512])
	*($0 + [112]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $81(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $150([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $150($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $150($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [12]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC __errno_location ()
{
	return [3896]
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $117($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [3920])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [3904]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [3936]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [512])
	*($0 + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [104]) = (int_64)0
	*($0 + [112]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*($0 + [128]) = (int_64)0
	*($0 + [136]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $73(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $74(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [112]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [120]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [128]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [136]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1408])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $117([272])
	CALL $28($3)
	*($3 + [256]) = $1
	CALL $78(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [260])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $119($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [48]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $75(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [80]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $76(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [384])
	*([0] + [4]) = $4
	$2 = *($0)
	CALL $79(*($0 + [4]), $1)
	*($4 + [256]) = ($4 + [244])
	*($4 + [252]) = $4
	*($4 + [248]) = $4
	*($4 + [264]) = ($4 + [248])
	*($4 + [276]) = ($1 + [8])
	*($4 + [272]) = $1
	*($4 + [280]) = ($1 + [16])
	*($4 + [284]) = ($1 + [24])
	*($4 + [288]) = ($1 + [40])
	*($4 + [292]) = ($1 + [56])
	*($4 + [296]) = ($1 + [72])
	*($4 + [300]) = ($1 + [80])
	*($4 + [304]) = ($1 + [88])
	*($4 + [308]) = ($1 + [96])
	*($4 + [312]) = ($1 + [104])
	*($4 + [316]) = ($1 + [112])
	*($4 + [320]) = ($1 + [120])
	*($4 + [324]) = ($1 + [128])
	*($4 + [328]) = ($1 + [136])
	*($4 + [332]) = ($1 + [144])
	*($4 + [336]) = ($1 + [152])
	*($4 + [340]) = ($1 + [160])
	*($4 + [344]) = ($1 + [176])
	*($4 + [348]) = ($1 + [184])
	*($4 + [352]) = ($1 + [200])
	*($4 + [356]) = ($1 + [208])
	*($4 + [360]) = ($1 + [216])
	*($4 + [364]) = ($1 + [224])
	*($4 + [368]) = ($1 + [232])
	*($4 + [372]) = ($1 + [240])
	*($4 + [376]) = ($1 + [248])
	CALL $27(($4 + [272]), ($4 + [264]))
	$3 = *($1)
	*($1 + [260]) = CALL db_store_i64(*($2 + [8]), (int_64)-5002379550982668288, *(*($0 + [8])), $3, $4, [244])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [384])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	$2 = *($0 + [40])
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = *($0 + [8])
	*($1 + [24]) = *($3)
	*(($4 = ($1 + [32]))) = *(($3 + [8]))
	*($1 + [160]) = *($1 + [24])
	*(($1 + [168])) = *($4)
	$3 = *($0 + [8])
	$5 = *($3)
	*(($1 + [48])) = *($3 + [8])
	*($1 + [40]) = (int_64))((int_64)0 - $5)
	$3 = *($0 + [12])
	*($1 + [56]) = *($3)
	*(($4 = ($1 + [64]))) = *(($3 + [8]))
	*(($1 + [192])) = *($4)
	*($1 + [184]) = *($1 + [56])
	*($1 + [144]) = *(*($0 + [16]))
	*($1 + [152]) = *(*($0 + [20]))
	*($1 + [128]) = *(*($0 + [24]))
	*($1 + [120]) = *(*($0 + [28]))
	*($1 + [136]) = *(*($0 + [32]))
	*($1 + [112]) = *(*($0 + [36]))
	*($1 + [72]) = *($2 + [80])
	*($1 + [80]) = [0]
	$3 = ($1 + [160])
	$4 = *($0 + [44])
	$5 = *($4)
	if ( (int_64)(((int_64)*($2 + [72]) & (int_64)$5) == 0) ){ goto $label$2 }
	*($4) = ((int_64)*($2 + [64]) | (int_64)$5)
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL current_time()
	$2 = (*(*($0 + [48])) + (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)))
	
.LABEL $label$1
	*($1 + [96]) = $2
	$5 = *(*($0 + [52]))
	*($1 + [104]) = $5
	*($1 + [176]) = $5
	*($1 + [224]) = *(*($0 + [56]))
	*($1 + [216]) = *(*($0 + [60]))
	$2 = *(($0 + [8]))
	*($3) = *($2)
	*(($3 + [8])) = *(($2 + [8]))
	*($1 + [232]) = *(*($0 + [64]))
	*($1 + [240]) = *(*(($0 + [44])))
	*($1 + [200]) = *(*(($0 + [48])))
	*($1 + [208]) = *(*($0 + [68]))
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5) = [0]
	$2 = *($1 + [8])
	*($5 + [8]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $5
	$3 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $118($2)
	*($5) = $4
	$3 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $3, $2)
	*($5 + [12]) = *($1 + [12])
	*($5 + [16]) = [0]
	$1 = *(($5 + [8]))
	*($5 + [24]) = $1
	$2 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $5
	$3 = ($5 + [16])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $118($1)
	*($5 + [16]) = $3
	$4 = *($5)
	
.LABEL $label$3
	CALL memcpy($3, $4, $1)
	*($5 + [28]) = *(($5 + [12]))
	$1 = CALL $99([3448], ($5 + [16]), $2)
	if ( (*((($5 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $120($2)
	
.LABEL $label$5
	if ( (*(($5 + [8])) <= [9]) ){ goto $label$6 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $120($2)
	
.LABEL $label$6
	*($0) = ( [3448] ? [0] : $1 )
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = $1
	$5 = [0]
	if ( CALL $100($6) ){ goto $label$1 }
	*($6 + [16]) = [0]
	$5 = *($1 + [8])
	*($6 + [24]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$3 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $118($5)
	*($6 + [16]) = $4
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, $3, $5)
	*($6 + [28]) = *($1 + [12])
	*(($1 = CALL $117([16]))) = [0]
	$5 = *((($6 + [16]) + [8]))
	*($1 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$5 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $118($5)
	*($1) = $3
	$5 = *(($1 + [8]))
	$4 = *($6 + [16])
	
.LABEL $label$4
	CALL memcpy($3, $4, $5)
	*($2) = $1
	*($1 + [12]) = *(($6 + [28]))
	$5 = [1]
	if ( (*(($6 + [24])) <= [9]) ){ goto $label$1 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $120($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
	return $5
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	$4 = *($3 + [8])
	*($7 + [16]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($7 + [8])
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $118($4)
	*($7 + [8]) = $6
	$5 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $5, $4)
	*($7 + [20]) = *($3 + [12])
	CALL $97($0, ($7 + [8]), [0])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $120($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($7 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$1 = *($7 + [24])
	if ( ((int_32)$1 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$2 = *($7 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($7 + [28]) = $2
	*($7 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$2 = *($7 + [28])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$2) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $1
	$1 = ($0 + [24])
	*(($0 + [16])) = *($1)
	*($1) = $2
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$3 = ($16 | [1])
	$5 = ($1 + [20])
	$6 = ($1 + [16])
	$7 = ($16 + [8])
	$8 = ($1 + [28])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$13 = [1]
	if ( (*($1) == 0) ){ goto $label$2 }
	$13 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$2
	if ( (*($2) == 0) ){ goto $label$10 }
	$15 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($13 | $15) == (int_32)[1]) ){ goto $label$9 }
	$15 = *(($2 + [16]))
	$13 = *($6)
	$12 = *($5)
	if ( ((int_32)($12 - $13) != (int_32)(*(($2 + [20])) - $15)) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$11 }
	$11 = $13
	
.LOOP $label$12:
	if ( ((int_32)*($11) != (int_32)*($15)) ){ goto $label$7 }
	$15 = ($15 + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)*($10) != (int_32)*(($2 + [24]))) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*(($2 + [28]))) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$8
	$12 = *($5)
	$13 = *($6)
	
.LABEL $label$7
	*($7) = [0]
	*($16) = (int_64)0
	$11 = ($12 - $13)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$15 }
	*($16) = ($11 << [1])
	$14 = $3
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($11 + [16]) & [-16])
	$14 = CALL $117($15)
	*($7) = $14
	*($16) = ($15 | [1])
	*($16 + [4]) = $11
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = $14
	
.LOOP $label$16:
	*($15) = *($13)
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$16 }
	$14 = ($14 + $11)
	
.LABEL $label$13
	*($14) = [0]
	$13 = ($0 + [4])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($15) = *($16)
	*(($15 + [8])) = *($7)
	*($7) = [0]
	*($16) = [0]
	*($16 + [4]) = [0]
	*($13) = (*($13) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $96($0, $16)
	if ( ((*($16) & [1]) == 0) ){ goto $label$17 }
	CALL $119(*($7))
	
.LABEL $label$17
	$13 = *($8)
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$20 }
	CALL void $16((int_32 $4), (int_32 *($10)), (int_32 $13), (int_32 *(($15 & [-2]) + [4])))
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$19 }
	$13 = *($16 + [4])
	goto $label$3 
	
.LABEL $label$20
	*($16 + [4]) = $13
	*($16) = $13
	$15 = $13
	goto $label$4 
	
.LABEL $label$19
	$13 = *($16 + [4])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [16])
	return $0
	
.LABEL $label$5
	CALL $121($16)
	
.LABEL $label$4
	if ( ((int_32)*($5) != (int_32)$15) ){ goto $label$3 }
	*($9) = [1]
	
.LABEL $label$3
	*($5) = $15
	*($6) = *($10)
	*($10) = $13
	goto $label$1 
	return (unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $117(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $119(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $119($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = [0]
	$3 = *($1 + [8])
	*($6 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	$4 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $118($3)
	*($6) = $5
	$4 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $4, $3)
	*($6 + [12]) = *($1 + [12])
	*($0) = [0]
	*($6 + [16]) = [0]
	$1 = *(($6 + [8]))
	*($6 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$3 = $6
	$5 = ($6 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $118($1)
	*($6 + [16]) = $5
	$3 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $3, $1)
	*($6 + [28]) = *(($6 + [12]))
	CALL $98($0, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $120($1)
	
.LABEL $label$5
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $120($1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [384])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	$4 = *($1)
	CALL $91($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [384])
	*($5 + [256]) = ($5 + [244])
	*($5 + [252]) = $5
	*($5 + [248]) = $5
	*($5 + [264]) = ($5 + [248])
	*($5 + [276]) = ($1 + [8])
	*($5 + [272]) = $1
	*($5 + [280]) = ($1 + [16])
	*($5 + [284]) = ($1 + [24])
	*($5 + [288]) = ($1 + [40])
	*($5 + [292]) = ($1 + [56])
	*($5 + [296]) = ($1 + [72])
	*($5 + [300]) = ($1 + [80])
	*($5 + [304]) = ($1 + [88])
	*($5 + [308]) = ($1 + [96])
	*($5 + [312]) = ($1 + [104])
	*($5 + [316]) = ($1 + [112])
	*($5 + [320]) = ($1 + [120])
	*($5 + [324]) = ($1 + [128])
	*($5 + [328]) = ($1 + [136])
	*($5 + [332]) = ($1 + [144])
	*($5 + [336]) = ($1 + [152])
	*($5 + [340]) = ($1 + [160])
	*($5 + [344]) = ($1 + [176])
	*($5 + [348]) = ($1 + [184])
	*($5 + [352]) = ($1 + [200])
	*($5 + [356]) = ($1 + [208])
	*($5 + [360]) = ($1 + [216])
	*($5 + [364]) = ($1 + [224])
	*($5 + [368]) = ($1 + [232])
	*($5 + [372]) = ($1 + [240])
	*($5 + [376]) = ($1 + [248])
	CALL $27(($5 + [272]), ($5 + [264]))
	CALL db_update_i64(*($1 + [260]), $2, $5, [244])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [384])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	*($1 + [96]) = *(*($0))
	*($1 + [72]) = *(*($0 + [4]))
	*($1 + [80]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [88]) = *(*($0 + [8]))
	$2 = *($1 + [56])
	$3 = *(($1 + [64]))
	$4 = *($0 + [12])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$3), [1824])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2($2 - *($4))) > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1904])
	$0 = *($0 + [16])
	CALL eosio_assert(((int_64)$3 == (int_64)*($0 + [8])), [1824])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2($2 - *($0))) > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1904])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [32]))), [2880])
	$3 = ((int_64)*($1 + [24]) + (int_64)$2)
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [2928])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2960])
	$3 = ((int_64)*($1 + [104]) + (int_64)-1)
	*($1 + [104]) = $3
	$2 = *($1 + [144])
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (CASTING int_64)(int_32 (CASTING int_32)(float_64 ((float_64)(CASTING float_64)(int_64 *($1 + [184])) * (float_64)CALL pow(((float_64)(CASTING float_64)(uint_64 $2) / (float_64)(float_64)1e5), (CASTING float_64)(uint_64 (int_64))(*($1 + [176]) - $3)))))
	CALL eosio_assert((uint_64)(((int_64)$2) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [544])
	$3 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [512])
	*(($1 + [64])) = (int_64)1397703940
	*(($1 + [56])) = $2
	
.LABEL $label$1
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6) = [0]
	$4 = *($2 + [8])
	*($6 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $118($4)
	*($6) = $5
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($5, $2, $4)
	*($6 + [32]) = [0]
	$2 = *(($6 + [8]))
	*($6 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $118($2)
	*($6 + [32]) = $5
	$4 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $4, $2)
	*($6 + [16]) = [0]
	$2 = *((($6 + [32]) + [8]))
	*($6 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$4 = ($6 + [16])
	$5 = ($6 + [32])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $118($2)
	*($6 + [16]) = $4
	$2 = *((($6 + [16]) + [8]))
	$5 = *($6 + [32])
	
.LABEL $label$5
	CALL memcpy($4, $5, $2)
	*($6 + [28]) = $3
	if ( (*((($6 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $120($2)
	
.LABEL $label$7
	$2 = CALL $93($0, $1, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $120($4)
	
.LABEL $label$8
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$9 }
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $120($4)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [48])
	return $2
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$5 = *($1 + [8])
	$6 = *($1 + [4])
	$4 = *($1)
	*($7 + [176]) = [0]
	$3 = *($2 + [8])
	*($7 + [184]) = $3
	$1 = ($4 & [1])
	$5 = ( $5 ? ($1 + [1]) : $1 )
	$1 = ($5 + ( $6 ? uint_32($4 >> [1]) : $1 ))
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = ($7 + [176])
	$6 = $2
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $118($3)
	*($7 + [176]) = $4
	$6 = *($2)
	
.LABEL $label$1
	CALL memcpy($4, $6, $3)
	*($7 + [188]) = *($2 + [12])
	$1 = CALL $94(($7 + [192]), $5, $1, ($7 + [176]))
	$2 = [0]
	*($7 + [232]) = [0]
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [232]) = $3
	if ( ($3 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($7 + [232]) | [4])), (int_32 [0]), (int_32 *(($3 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($7 + [232]) + [12])) = *(($1 + [12]))
	*($7 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $3
	
.LABEL $label$3
	*($7 + [248]) = *($1 + [16 align=4])
	*($7 + [256]) = *($1 + [24])
	*($7 + [260]) = *($1 + [28])
	*($7 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($1 + [4])
	CALL void $3((int_32 $3), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($7 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($7 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $120($1)
	
.LABEL $label$7
	*(($7 + [116])) = [0]
	*($7 + [96]) = [0]
	*($7 + [124]) = [0]
	*($7 + [120]) = [0]
	*($7 + [112]) = [0]
	*($7 + [128]) = [1]
	*($7 + [136]) = [0]
	*($7 + [164]) = [0]
	*($7 + [160]) = [0]
	*($7 + [168]) = [1]
	*($7 + [152]) = *($7 + [112])
	*($7 + [40]) = [0]
	$1 = [0]
	$2 = *($7 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($7 + [232]) | [4])((int_32 (($7 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($7 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($7 + [40]) + [12])) = *((($7 + [232]) + [12]))
	*($7 + [44 align=4]) = *($7 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($7 + [56]) = *((($7 + [232]) + [16]))
	*($7 + [64]) = *((($7 + [232]) + [24]))
	*($7 + [68]) = *((($7 + [232]) + [28]))
	*($7 + [72]) = *((($7 + [232]) + [32]))
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	*($7) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($7 + [136]) | [4])((int_32 ($7 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($7 + [12])) = *((($7 + [136]) + [12]))
	*($7 + [4 align=4]) = *($7 + [140 align=4])
	
.LABEL $label$10
	*($7 + [16]) = *((($7 + [136]) + [16]))
	*($7 + [24]) = *((($7 + [136]) + [24]))
	*($7 + [28]) = *((($7 + [136]) + [28]))
	*($7 + [32]) = *((($7 + [136]) + [32]))
	$3 = CALL $95(($7 + [80]), ($7 + [40]), $7)
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($7 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($7) = [0]
	
.LABEL $label$12
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($7 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($7 + [40]) = [0]
	
.LABEL $label$14
	$4 = *($0)
	*($0) = *($3)
	*($3) = $4
	$1 = *($0 + [4])
	*($0 + [4]) = *($3 + [4])
	*($3 + [4]) = $1
	$2 = *($0 + [8])
	*($0 + [8]) = *($3 + [8])
	*($3 + [8]) = $2
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$18 }
	$2 = ([0] - $4)
	$1 = ($1 + [-12])
	
.LOOP $label$19:
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL $119(*(($1 + [8])))
	
.LABEL $label$20
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$19 }
	$1 = *($3)
	goto $label$17 
	
.LABEL $label$18
	$1 = $4
	
.LABEL $label$17
	*(($3 + [4])) = $4
	CALL $119($1)
	
.LABEL $label$16
	$1 = *($7 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($7 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($7 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($7 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($7 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($7 + [232]) = [0]
	
.LABEL $label$23
	*([0] + [4]) = ($7 + [272])
	return $0
}

void .FUNC $138 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $117($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = *($0)
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	if ( $3 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$4 = ((uint_32)$5 > (uint_32)$2)
	$3 = ( $2 ? $5 : $4 )
	if ( ($3 == 0) ){ goto $label$7 }
	$0 = CALL memcmp($0, $1, $3)
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ( [-1] ? $4 : ($5 <= $2) )
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $117($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $125($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([3840])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $117($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [3840], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoull($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $119(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $133($7)
	
.LABEL $label$1
	CALL $134($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $133 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $135($1, $0, [3872])
	CALL abort()
	(unreachable)
}

void .FUNC $134 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $135($1, $0, [3856])
	CALL abort()
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $117($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $125($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [3888], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $137(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $137(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $128($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $181 ()
{
	(unreachable)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $117($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $119($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [496])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [496])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	CALL $83(($6 + [96]))
	$3 = *($0)
	if ( ((int_64)*($6 + [96]) == (int_64)$3) ){ goto $label$1 }
	if ( ((int_64)*($6 + [104]) != (int_64)$3) ){ goto $label$1 }
	$5 = [0]
	if ( ((uint_64)((int_64)*($6 + [112]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$3 = (uint_64)*((($6 + [96]) + [24])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [2272])
	*($6 + [88]) = [0]
	*($6 + [80]) = (int_64)0
	*($6 + [72]) = [0]
	*($6 + [64]) = (int_64)0
	CALL $139(($6 + [32]), ($6 + [128]))
	$4 = CALL $84($0, ($6 + [32]), ($6 + [80]), ($6 + [64]), ($6 + [56]), ($6 + [48]))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $119(*($6 + [40]))
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139(($6 + [16]), ($6 + [80]))
	CALL $139($6, ($6 + [64]))
	CALL $85($0, $1, ($6 + [96]), ($6 + [16]), $6, *($6 + [56]), *($6 + [48]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$9 }
	CALL $119(*($6 + [8]))
	
.LABEL $label$9
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $119(*($6 + [24]))
	
.LABEL $label$8
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $119(*(($6 + [72])))
	
.LABEL $label$10
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$1 }
	CALL $119(*(($6 + [88])))
	
.LABEL $label$1
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$11 }
	CALL $119(*(($6 + [136])))
	
.LABEL $label$11
	*([0] + [4]) = ($6 + [144])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $117($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $119($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $123($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $121 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $120 (int_32 $0)
{
	CALL $119($0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	return CALL $125($0, $1, CALL $176($1))
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $123($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $117(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $119($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [336])
	*([0] + [4]) = $20
	$14 = *($0 + [80])
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [80]
	$12 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($14, $12)
	$4 = *(($0 + [280]))
	$6 = *(($0 + [284]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$7 }
	$6 = $9
	$3 = ($9 + [-24])
	$9 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = ($0 + [256])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$10 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [256]) == (int_32)$5), [96])
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	$9 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $25($5, $9)
	CALL eosio_assert(((int_32)*($6 + [256]) == (int_32)$5), [96])
	
.LABEL $label$9
	$9 = [0]
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [624])
	CALL eosio_assert(((int_32)CALL $56($0, $1) ^ (int_32)[1]), [1536])
	CALL eosio_assert((int_64)(((int_64)*($0 + [48]) & (int_64)*($6 + [240])) == 0), [1584])
	*(($20 + [312])) = *(($0 + [112]))
	*($20 + [304]) = *($0 + [104])
	if ( ((int_64)*($6 + [72]) == (int_64)*(($0 + [80]))) ){ goto $label$15 }
	CALL eosio_assert([1], [544])
	$11 = (int_64)1162692948
	$18 = (int_64)297649394692
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [512])
	*(($20 + [296])) = [0]
	*($20 + [288]) = (int_64)0
	$9 = CALL strlen([1632])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$23 }
	*($20 + [288]) = ($9 << [1])
	$3 = (($20 + [288]) | [1])
	if ( $9 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$4 = (($9 + [16]) & [-16])
	$3 = CALL $117($4)
	*($20 + [288]) = ($4 | [1])
	*($20 + [296]) = $3
	*($20 + [292]) = $9
	
.LABEL $label$22
	CALL memcpy($3, [1632], $9)
	
.LABEL $label$21
	*(($3 + $9)) = [0]
	CALL $57(($20 + [32]), $0, *($6 + [8]), *($6), *($6 + [88]))
	$9 = *($20 + [32])
	$3 = ($9 & [1])
	CALL $125(($20 + [288]), ( *($20 + [40]) ? (($20 + [32]) | [1]) : $3 ), ( *($20 + [36]) ? uint_32($9 >> [1]) : $3 ))
	if ( ((*($20 + [32]) & [1]) == 0) ){ goto $label$24 }
	CALL $119(*(($20 + [40])))
	
.LABEL $label$24
	$14 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [80]
	$12 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$30 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$3 = ($3 + [165])
	goto $label$28 
	
.LABEL $label$30
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$26
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$25 }
	*($20 + [240]) = $12
	*($20 + [232]) = $14
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [16]
	$12 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$36 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$3 = ($3 + [165])
	goto $label$34 
	
.LABEL $label$36
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$32
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$31 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [32]
	$14 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$42 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$42
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$37 }
	$4 = ($6 + [24])
	CALL $139(($20 + [200]), ($20 + [288]))
	if ( ((*($20 + [200]) & [1]) == 0) ){ goto $label$44 }
	if ( (*($20 + [204]) <= [257]) ){ goto $label$44 }
	CALL $140(($20 + [216]), ($20 + [200]), [0], [256], ($20 + [200]))
	goto $label$43 
	
.LABEL $label$44
	$9 = (($20 + [200]) + [8])
	*((($20 + [216]) + [8])) = *($9)
	*($9) = [0]
	*($20 + [216]) = *($20 + [200])
	*($20 + [200]) = (int_64)0
	
.LABEL $label$43
	$11 = *(($6 + [72]))
	*(($20 + [56])) = *(($4 + [8]))
	*($20 + [32]) = *($0)
	*($20 + [40]) = $11
	*($20 + [48]) = *($4)
	*(($20 + [68])) = *($20 + [220 align=4])
	*($20 + [64]) = *($20 + [216])
	*($20 + [216]) = [0]
	*($20 + [220]) = [0]
	*((($20 + [216]) + [8])) = [0]
	$9 = CALL $58(($20 + [248]), ($20 + [232]), $12, $14, ($20 + [32]))
	CALL $59(($20 + [320]), $9)
	$3 = *($20 + [320])
	CALL send_inline($3, (*($20 + [324]) - $3))
	$3 = *($20 + [320])
	if ( ($3 == 0) ){ goto $label$45 }
	*($20 + [324]) = $3
	CALL $119($3)
	
.LABEL $label$45
	$3 = *($9 + [28])
	if ( ($3 == 0) ){ goto $label$46 }
	*(($9 + [32])) = $3
	CALL $119($3)
	
.LABEL $label$46
	$3 = *($9 + [16])
	if ( ($3 == 0) ){ goto $label$47 }
	*(($9 + [20])) = $3
	CALL $119($3)
	
.LABEL $label$47
	if ( ((*(($20 + [64])) & [1]) == 0) ){ goto $label$48 }
	CALL $119(*(($20 + [72])))
	
.LABEL $label$48
	if ( ((*($20 + [216]) & [1]) == 0) ){ goto $label$49 }
	CALL $119(*(($20 + [224])))
	
.LABEL $label$49
	if ( ((*($20 + [200]) & [1]) == 0) ){ goto $label$50 }
	CALL $119(*($20 + [208]))
	
.LABEL $label$50
	CALL eosio_assert([1], [544])
	$11 = (int_64)1162692948
	$16 = (int_64)297649394692
	$9 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$3 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$3 = [0]
	
.LABEL $label$51
	CALL eosio_assert($3, [512])
	$17 = (int_64)0
	if ( ($2 == 0) ){ goto $label$61 }
	CALL $60(($20 + [32]), $0, $1)
	$16 = *($20 + [40])
	$15 = *($20 + [32])
	if ( ((int_64)$15 < (int_64)1) ){ goto $label$57 }
	*(($20 + [40])) = [0]
	*($20 + [32]) = (int_64)0
	$9 = CALL strlen([1664])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$60 }
	*($20 + [32]) = ($9 << [1])
	$3 = (($20 + [32]) | [1])
	if ( $9 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$15 = (int_64)0
	goto $label$56 
	
.LABEL $label$60
	$2 = (($9 + [16]) & [-16])
	$3 = CALL $117($2)
	*($20 + [32]) = ($2 | [1])
	*($20 + [40]) = $3
	*($20 + [36]) = $9
	
.LABEL $label$59
	CALL memcpy($3, [1664], $9)
	
.LABEL $label$58
	*(($3 + $9)) = [0]
	if ( (*($20 + [288]) & [1]) ){ goto $label$63 }
	*($20 + [288]) = [0]
	goto $label$62 
	
.LABEL $label$63
	*(*($20 + [296])) = [0]
	*($20 + [292]) = [0]
	
.LABEL $label$62
	CALL $124(($20 + [288]), [0])
	$2 = (($20 + [32]) + [8])
	*((($20 + [288]) + [8])) = *($2)
	*($20 + [288]) = *($20 + [32])
	CALL $57(($20 + [32]), $0, *(($6 + [8])), *($6), *(($6 + [88])))
	$9 = *($20 + [32])
	$3 = ($9 & [1])
	CALL $125(($20 + [288]), ( *($20 + [40]) ? (($20 + [32]) | [1]) : $3 ), ( *($20 + [36]) ? uint_32($9 >> [1]) : $3 ))
	if ( ((*($20 + [32]) & [1]) == 0) ){ goto $label$64 }
	CALL $119(*($2))
	
.LABEL $label$64
	$11 = *(($6 + [72]))
	*($20 + [192]) = $16
	*($20 + [184]) = $15
	CALL $139(($20 + [168]), ($20 + [288]))
	*((($20 + [16]) + [8])) = *($20 + [192])
	*($20 + [16]) = *($20 + [184])
	CALL $61($0, $11, ($20 + [16]), ($20 + [168]))
	if ( ((*($20 + [168]) & [1]) == 0) ){ goto $label$57 }
	CALL $119(*($20 + [176]))
	
.LABEL $label$57
	$11 = *($6 + [136])
	if ( (int_64)($11 == 0) ){ goto $label$56 }
	$17 = ((int_64)*($6 + [24]) * (int_64)$11)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [544])
	$11 = (int_64)1162692948
	$9 = [0]
	
.LOOP $label$67:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$66 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	
.LOOP $label$69:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$69 }
	
.LABEL $label$68
	$3 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$66
	$3 = [0]
	
.LABEL $label$65
	CALL eosio_assert($3, [512])
	if ( ((int_64)$17 < (int_64)1) ){ goto $label$73 }
	*(($20 + [40])) = [0]
	*($20 + [32]) = (int_64)0
	$9 = CALL strlen([1712])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$72 }
	*($20 + [32]) = ($9 << [1])
	$3 = (($20 + [32]) | [1])
	if ( $9 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	$18 = (int_64)297649394692
	goto $label$56 
	
.LABEL $label$72
	$2 = (($9 + [16]) & [-16])
	$3 = CALL $117($2)
	*($20 + [32]) = ($2 | [1])
	*($20 + [40]) = $3
	*($20 + [36]) = $9
	
.LABEL $label$71
	CALL memcpy($3, [1712], $9)
	
.LABEL $label$70
	*(($3 + $9)) = [0]
	if ( (*($20 + [288]) & [1]) ){ goto $label$75 }
	*($20 + [288]) = [0]
	goto $label$74 
	
.LABEL $label$75
	*(*($20 + [296])) = [0]
	*($20 + [292]) = [0]
	
.LABEL $label$74
	CALL $124(($20 + [288]), [0])
	$2 = (($20 + [32]) + [8])
	*((($20 + [288]) + [8])) = *($2)
	*($20 + [288]) = *($20 + [32])
	CALL $57(($20 + [32]), $0, *(($6 + [8])), *($6), *(($6 + [88])))
	$9 = *($20 + [32])
	$3 = ($9 & [1])
	CALL $125(($20 + [288]), ( *($20 + [40]) ? (($20 + [32]) | [1]) : $3 ), ( *($20 + [36]) ? uint_32($9 >> [1]) : $3 ))
	if ( ((*($20 + [32]) & [1]) == 0) ){ goto $label$76 }
	CALL $119(*($2))
	
.LABEL $label$76
	$11 = *(($6 + [72]))
	$18 = (int_64)297649394692
	*($20 + [160]) = (int_64)297649394692
	*($20 + [152]) = $17
	CALL $139(($20 + [136]), ($20 + [288]))
	*(($20 + [8])) = *($20 + [160])
	*($20) = *($20 + [152])
	CALL $61($0, $11, $20, ($20 + [136]))
	if ( ((*($20 + [136]) & [1]) == 0) ){ goto $label$56 }
	CALL $119(*($20 + [144]))
	
.LABEL $label$56
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)*(($6 + [168]))), [1232])
	if ( ((int_64)*($6 + [40]) <= (int_64)*($6 + [160])) ){ goto $label$77 }
	*(($20 + [40])) = [0]
	*($20 + [32]) = (int_64)0
	$9 = CALL strlen([1776])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$80 }
	*($20 + [32]) = ($9 << [1])
	$3 = (($20 + [32]) | [1])
	if ( $9 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$2 = (($9 + [16]) & [-16])
	$3 = CALL $117($2)
	*($20 + [32]) = ($2 | [1])
	*($20 + [40]) = $3
	*($20 + [36]) = $9
	
.LABEL $label$79
	CALL memcpy($3, [1776], $9)
	
.LABEL $label$78
	*(($3 + $9)) = [0]
	if ( (*($20 + [288]) & [1]) ){ goto $label$82 }
	*($20 + [288]) = [0]
	goto $label$81 
	
.LABEL $label$82
	*(*($20 + [296])) = [0]
	*($20 + [292]) = [0]
	
.LABEL $label$81
	CALL $124(($20 + [288]), [0])
	$2 = (($20 + [32]) + [8])
	*((($20 + [288]) + [8])) = *($2)
	*($20 + [288]) = *($20 + [32])
	CALL $57(($20 + [32]), $0, *(($6 + [8])), *($6), *(($6 + [88])))
	$9 = *($20 + [32])
	$3 = ($9 & [1])
	CALL $125(($20 + [288]), ( *($20 + [40]) ? (($20 + [32]) | [1]) : $3 ), ( *($20 + [36]) ? uint_32($9 >> [1]) : $3 ))
	if ( ((*($20 + [32]) & [1]) == 0) ){ goto $label$83 }
	CALL $119(*($2))
	
.LABEL $label$83
	$11 = *(($6 + [40]))
	$13 = *(($6 + [48]))
	CALL eosio_assert(((int_64)*(($6 + [168])) == (int_64)$13), [1824])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - *(($6 + [160])))) > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1904])
	*($20 + [312]) = $13
	*($20 + [304]) = $11
	$14 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [80]
	$12 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$89 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$3 = ($3 + [165])
	goto $label$87 
	
.LABEL $label$89
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$85
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$84 }
	*($20 + [240]) = $12
	*($20 + [232]) = $14
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [16]
	$12 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$95 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$3 = ($3 + [165])
	goto $label$93 
	
.LABEL $label$95
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$91
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$90 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [32]
	$14 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$101 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$3 = ($3 + [165])
	goto $label$99 
	
.LABEL $label$101
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$97
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$96 }
	CALL $139(($20 + [120]), ($20 + [288]))
	if ( ((*($20 + [120]) & [1]) == 0) ){ goto $label$103 }
	if ( (*($20 + [124]) <= [257]) ){ goto $label$103 }
	CALL $140(($20 + [216]), ($20 + [120]), [0], [256], ($20 + [120]))
	goto $label$102 
	
.LABEL $label$103
	$9 = (($20 + [120]) + [8])
	*((($20 + [216]) + [8])) = *($9)
	*($9) = [0]
	*($20 + [216]) = *($20 + [120])
	*($20 + [120]) = (int_64)0
	
.LABEL $label$102
	*(($20 + [52])) = *($20 + [308])
	*($20 + [40]) = *(($0 + [88]))
	*(($20 + [60])) = *(($20 + [316]))
	*(($20 + [56])) = *((($20 + [304]) + [8]))
	*($20 + [32]) = *($0)
	*($20 + [48]) = *($20 + [304])
	$9 = (($20 + [216]) + [8])
	*(($20 + [72])) = *($9)
	*($20 + [64]) = *($20 + [216])
	*($20 + [216]) = [0]
	*($20 + [220]) = [0]
	*($9) = [0]
	$9 = CALL $58(($20 + [248]), ($20 + [232]), $12, $14, ($20 + [32]))
	CALL $59(($20 + [320]), $9)
	$3 = *($20 + [320])
	CALL send_inline($3, (*($20 + [324]) - $3))
	$3 = *($20 + [320])
	if ( ($3 == 0) ){ goto $label$104 }
	*($20 + [324]) = $3
	CALL $119($3)
	
.LABEL $label$104
	$3 = *($9 + [28])
	if ( ($3 == 0) ){ goto $label$105 }
	*(($9 + [32])) = $3
	CALL $119($3)
	
.LABEL $label$105
	$3 = *($9 + [16])
	if ( ($3 == 0) ){ goto $label$106 }
	*(($9 + [20])) = $3
	CALL $119($3)
	
.LABEL $label$106
	if ( ((*(($20 + [64])) & [1]) == 0) ){ goto $label$107 }
	CALL $119(*(($20 + [72])))
	
.LABEL $label$107
	if ( ((*($20 + [216]) & [1]) == 0) ){ goto $label$108 }
	CALL $119(*(($20 + [224])))
	
.LABEL $label$108
	if ( ((*($20 + [120]) & [1]) == 0) ){ goto $label$77 }
	CALL $119(*($20 + [128]))
	
.LABEL $label$77
	$8 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [80]
	$12 = (int_64)0
	
.LOOP $label$109:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$114 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$3 = ($3 + [165])
	goto $label$112 
	
.LABEL $label$114
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$113
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$111
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$110
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$109 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1936]
	$14 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$11 > (uint_64)(int_64)8) ){ goto $label$120 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$3 = ($3 + [165])
	goto $label$118 
	
.LABEL $label$120
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$116
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$115 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [16]
	$19 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$126 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$3 = ($3 + [165])
	goto $label$124 
	
.LABEL $label$126
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$122
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$19 = ((int_64)$13 | (int_64)$19)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$121 }
	*($20 + [48]) = $1
	*($20 + [32]) = *(($6 + [72]))
	*($20 + [40]) = *(($6 + [8]))
	*($20 + [56]) = *(($6 + [88]))
	*(($20 + [72])) = *(($4 + [8]))
	*($20 + [64]) = *($4)
	*($20 + [80]) = $17
	*(($20 + [88])) = $18
	*($20 + [96]) = $15
	*((($20 + [32]) + [72])) = $16
	*($20 + [112]) = $19
	*($20 + [248]) = $8
	*($20 + [256]) = $14
	*(($9 = CALL $117([16]))) = $8
	*($9 + [8]) = $12
	*(($3 = ($20 + [280]))) = [0]
	$4 = ($9 + [16])
	*(($20 + [272])) = $4
	*(($20 + [268])) = $4
	*($20 + [264]) = $9
	*($20 + [276]) = [0]
	*(($20 + [284])) = [0]
	CALL $34(($20 + [276]), [88])
	$9 = *($3)
	$3 = *($20 + [276])
	*($20 + [236]) = $3
	*($20 + [232]) = $3
	*($20 + [240]) = $9
	*($20 + [216]) = ($20 + [232])
	*($20 + [320]) = ($20 + [32])
	CALL $62(($20 + [320]), ($20 + [216]))
	CALL $59(($20 + [232]), ($20 + [248]))
	$9 = *($20 + [232])
	CALL send_inline($9, (*($20 + [236]) - $9))
	$9 = *($20 + [232])
	if ( ($9 == 0) ){ goto $label$127 }
	*($20 + [236]) = $9
	CALL $119($9)
	
.LABEL $label$127
	$9 = *($20 + [276])
	if ( ($9 == 0) ){ goto $label$128 }
	*(($20 + [280])) = $9
	CALL $119($9)
	
.LABEL $label$128
	$9 = *($20 + [264])
	if ( ($9 == 0) ){ goto $label$129 }
	*(($20 + [268])) = $9
	CALL $119($9)
	
.LABEL $label$129
	if ( ((*($20 + [288]) & [1]) == 0) ){ goto $label$15 }
	CALL $119(*($20 + [296]))
	
.LABEL $label$15
	$11 = *($0)
	*($20 + [36]) = $0
	*($20 + [32]) = ($20 + [304])
	CALL eosio_assert($7, [224])
	CALL $63($5, $6, $11, ($20 + [32]))
	*([0] + [4]) = ($20 + [336])
	return (unreachable)
	
.LABEL $label$14
	CALL $121(($20 + [288]))
	
.LABEL $label$13
	CALL $121(($20 + [32]))
	
.LABEL $label$12
	CALL $121(($20 + [32]))
	
.LABEL $label$11
	CALL $121(($20 + [32]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [496])
	CALL memcpy(($7 + [8]), $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [496])
	CALL memcpy(($7 + [31]), ($4 + [8]), [1])
	$5 = ((int_32)*($7 + [31]) != (int_32)[0])
	*($7 + [16]) = $5
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	$5 = *((($7 + [8]) + [8]))
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ((int_32)($5 & [255]) != (int_32)[0])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8)
{
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$9 = *($0 + [80])
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [80]
	$14 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$6 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$10 = ($10 + [165])
	goto $label$4 
	
.LABEL $label$6
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($9, $14)
	CALL require_recipient(*(($0 + [80])))
	CALL require_recipient($1)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [288])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$9 = [0]
	goto $label$1 
	
.LABEL $label$3
	$9 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	CALL read_action_data($9, $1)
	
.LABEL $label$1
	CALL $53(($11 + [56]), $9, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	$4 = *($11 + [64])
	*(($11 + [188])) = *(($11 + [100]))
	*(($1 = (($11 + [176]) + [8]))) = *(($11 + [96]))
	*($11 + [180]) = *(($11 + [92]))
	$3 = *($11 + [56])
	*($11 + [176]) = *($11 + [88])
	$6 = *($11 + [80])
	$5 = *($11 + [72])
	*(($9 = (($11 + [160]) + [8]))) = *(($11 + [112]))
	*($11 + [160]) = *($11 + [104])
	*(($8 = (($11 + [144]) + [8]))) = *(($11 + [128]))
	*($11 + [144]) = *($11 + [120])
	$7 = *($11 + [136])
	*((($11 + [224]) + [8])) = *($8)
	*((($11 + [208]) + [8])) = *($9)
	*($11 + [224]) = *($11 + [144])
	*($11 + [208]) = *($11 + [160])
	*((($11 + [192]) + [8])) = *($1)
	*($11 + [192]) = *($11 + [176])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$10 = *((*($1) + $10))
	
.LABEL $label$6
	*(($9 = (($11 + [272]) + [8]))) = *((($11 + [192]) + [8]))
	*(($2 = (($11 + [256]) + [8]))) = *((($11 + [208]) + [8]))
	*($11 + [272]) = *($11 + [192])
	*($11 + [256]) = *($11 + [208])
	*(($0 = (($11 + [240]) + [8]))) = *((($11 + [224]) + [8]))
	*($11 + [240]) = *($11 + [224])
	*((($11 + [40]) + [8])) = *($9)
	*($11 + [40]) = *($11 + [272])
	*((($11 + [24]) + [8])) = *($2)
	*($11 + [24]) = *($11 + [256])
	*((($11 + [8]) + [8])) = *($0)
	*($11 + [8]) = *($11 + [240])
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $6), (int_64 ($11 + [40])), (int_32 ($11 + [24])), (int_32 ($11 + [8])), (int_32 $7), (int_64 $10))
	*([0] + [4]) = ($11 + [288])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_64 $10)
{
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$11 = *($0 + [80])
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [80]
	$16 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$6 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$12 = ($12 + [165])
	goto $label$4 
	
.LABEL $label$6
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$2
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($11, $16)
	CALL require_recipient(*(($0 + [80])))
	CALL require_recipient($1)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$11 = (*([0] + [4]) - [448])
	$13 = $11
	*([0] + [4]) = $11
	$2 = *($1 + [4])
	$12 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$11 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$11 = [0]
	goto $label$1 
	
.LABEL $label$3
	$11 = ($11 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$2
	CALL read_action_data($11, $1)
	
.LABEL $label$1
	CALL $80(($13 + [88]), $11, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($11)
	
.LABEL $label$5
	$4 = *($13 + [96])
	*(($13 + [284])) = *(($13 + [132]))
	*(($1 = (($13 + [272]) + [8]))) = *(($13 + [128]))
	*($13 + [276]) = *(($13 + [124]))
	$3 = *($13 + [88])
	*($13 + [272]) = *($13 + [120])
	$6 = *($13 + [112])
	$5 = *($13 + [104])
	*(($11 = (($13 + [256]) + [8]))) = *(($13 + [144]))
	*($13 + [256]) = *($13 + [136])
	*(($8 = (($13 + [240]) + [8]))) = *(($13 + [160]))
	*($13 + [240]) = *($13 + [152])
	*(($9 = (($13 + [224]) + [8]))) = *(($13 + [176]))
	*($13 + [224]) = *($13 + [168])
	*(($10 = (($13 + [208]) + [8]))) = *(($13 + [192]))
	*($13 + [208]) = *($13 + [184])
	$7 = *($13 + [200])
	*((($13 + [352]) + [8])) = *($10)
	*((($13 + [336]) + [8])) = *($9)
	*($13 + [352]) = *($13 + [208])
	*($13 + [336]) = *($13 + [224])
	*((($13 + [320]) + [8])) = *($8)
	*($13 + [320]) = *($13 + [240])
	*((($13 + [304]) + [8])) = *($11)
	*($13 + [304]) = *($13 + [256])
	*((($13 + [288]) + [8])) = *($1)
	*($13 + [288]) = *($13 + [272])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$12 = *((*($1) + $12))
	
.LABEL $label$6
	*(($11 = (($13 + [432]) + [8]))) = *((($13 + [288]) + [8]))
	*(($2 = (($13 + [416]) + [8]))) = *((($13 + [304]) + [8]))
	*($13 + [432]) = *($13 + [288])
	*($13 + [416]) = *($13 + [304])
	*(($0 = (($13 + [400]) + [8]))) = *((($13 + [320]) + [8]))
	*($13 + [400]) = *($13 + [320])
	*(($8 = (($13 + [384]) + [8]))) = *((($13 + [336]) + [8]))
	*($13 + [384]) = *($13 + [336])
	*(($9 = (($13 + [368]) + [8]))) = *((($13 + [352]) + [8]))
	*($13 + [368]) = *($13 + [352])
	*((($13 + [72]) + [8])) = *($11)
	*($13 + [72]) = *($13 + [432])
	*((($13 + [56]) + [8])) = *($2)
	*($13 + [56]) = *($13 + [416])
	*((($13 + [40]) + [8])) = *($0)
	*($13 + [40]) = *($13 + [400])
	*((($13 + [24]) + [8])) = *($8)
	*($13 + [24]) = *($13 + [384])
	*((($13 + [8]) + [8])) = *($9)
	*($13 + [8]) = *($13 + [368])
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $6), (int_64 ($13 + [72])), (int_32 ($13 + [56])), (int_32 ($13 + [40])), (int_32 ($13 + [24])), (int_32 ($13 + [8])), (int_32 $7), (int_64 $12))
	*([0] + [4]) = ($13 + [448])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9, int_64 $10, int_64 $11, int_64 $12, int_64 $13, int_64 $14, int_64 $15, int_64 $16)
{
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [400])
	*([0] + [4]) = $21
	*($21 + [392]) = $1
	*($21 + [384]) = $4
	*($21 + [376]) = $5
	*($21 + [368]) = $6
	*($21 + [360]) = $7
	*($21 + [352]) = $8
	*($21 + [344]) = $9
	*($21 + [336]) = $10
	*($21 + [328]) = $11
	*($21 + [320]) = $12
	*($21 + [312]) = $13
	*($21 + [304]) = $14
	*($21 + [296]) = $15
	*($21 + [288]) = $16
	$12 = *($0 + [80])
	$16 = (int_64)0
	$14 = (int_64)59
	$19 = [80]
	$13 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$6 }
	$17 = *($19)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$17 = ($17 + [165])
	goto $label$4 
	
.LABEL $label$6
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$2
	$19 = ($19 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$13 = ((int_64)$15 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($12, $13)
	$18 = ($0 + [256])
	$16 = (int_64)0
	$19 = CALL db_lowerbound_i64(*($0 + [256]), *(($0 + [264])), (int_64)-5002379550982668288, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$7 }
	$19 = CALL $25($18, $19)
	CALL eosio_assert(((int_64)*($19 + [8]) != (int_64)$1), [2224])
	CALL eosio_assert([1], [960])
	$19 = CALL db_next_i64(*($19 + [260]), ($21 + [40]))
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$7 }
	
.LOOP $label$8:
	$19 = CALL $25($18, $19)
	CALL eosio_assert(((int_64)*($19 + [8]) != (int_64)*($21 + [392])), [2224])
	CALL eosio_assert([1], [960])
	$19 = CALL db_next_i64(*($19 + [260]), ($21 + [40]))
	if ( ((int_32)$19 >= (int_32)[0]) ){ goto $label$8 }
	
.LABEL $label$7
	$14 = (int_64)59
	$19 = [16]
	$13 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$14 }
	$17 = *($19)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$17 = ($17 + [165])
	goto $label$12 
	
.LABEL $label$14
	$15 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$10
	$19 = ($19 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$13 = ((int_64)$15 | (int_64)$13)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$9 }
	*($21 + [40]) = (int_64)1397703940
	CALL $44(($21 + [272]), $0, $13, ($21 + [40]))
	*(($21 + [216])) = [0]
	*($21 + [208]) = (int_64)0
	$19 = CALL strlen([1168])
	if ( ((uint_32)$19 > (uint_32)[-17]) ){ goto $label$17 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$20 }
	*($21 + [208]) = ($19 << [1])
	$17 = (($21 + [208]) | [1])
	if ( $19 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$20 = (($19 + [16]) & [-16])
	$17 = CALL $117($20)
	*($21 + [208]) = ($20 | [1])
	*($21 + [216]) = $17
	*($21 + [212]) = $19
	
.LABEL $label$19
	CALL memcpy($17, [1168], $19)
	
.LABEL $label$18
	*(($17 + $19)) = [0]
	$16 = *((($21 + [272]) + [8]))
	*((($21 + [176]) + [8])) = $16
	*((($21 + [24]) + [8])) = $16
	$16 = *($21 + [272])
	*($21 + [176]) = $16
	*($21 + [24]) = $16
	CALL $42(($21 + [192]), $0, ($21 + [24]))
	$19 = *($21 + [192])
	$17 = ($19 & [1])
	$19 = CALL $125(($21 + [208]), ( *($21 + [200]) ? (($21 + [192]) | [1]) : $17 ), ( *($21 + [196]) ? uint_32($19 >> [1]) : $17 ))
	$17 = ($19 + [8])
	*((($21 + [224]) + [8])) = *($17)
	*($21 + [224]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($17) = [0]
	*((($21 + [160]) + [8])) = [0]
	*($21 + [160]) = (int_64)0
	$19 = CALL strlen([1200])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$23 }
	*($21 + [160]) = ($19 << [1])
	$20 = (($21 + [160]) | [1])
	$17 = $20
	if ( $19 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$20 = (($19 + [16]) & [-16])
	$17 = CALL $117($20)
	*($21 + [160]) = ($20 | [1])
	*($21 + [168]) = $17
	*($21 + [164]) = $19
	$20 = (($21 + [160]) | [1])
	
.LABEL $label$22
	CALL memcpy($17, [1200], $19)
	
.LABEL $label$21
	*(($17 + $19)) = [0]
	$19 = *($21 + [160])
	$17 = ($19 & [1])
	$19 = CALL $125(($21 + [224]), ( *($21 + [168]) ? $20 : $17 ), ( *($21 + [164]) ? uint_32($19 >> [1]) : $17 ))
	$17 = ($19 + [8])
	*((($21 + [240]) + [8])) = *($17)
	*($21 + [240]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($17) = [0]
	*(($19 = (($21 + [128]) + [8]))) = *(($2 + [8]))
	$16 = *($2)
	*((($21 + [8]) + [12])) = *((($21 + [128]) + [12]))
	*((($21 + [8]) + [8])) = *($19)
	*($21 + [128]) = $16
	*($21 + [12]) = *($21 + [132])
	*($21 + [8]) = *($21 + [128])
	CALL $42(($21 + [144]), $0, ($21 + [8]))
	$19 = *($21 + [144])
	$17 = ($19 & [1])
	$19 = CALL $125(($21 + [240]), ( *($21 + [152]) ? (($21 + [144]) | [1]) : $17 ), ( *($21 + [148]) ? uint_32($19 >> [1]) : $17 ))
	$17 = ($19 + [8])
	*((($21 + [40]) + [8])) = *($17)
	*($21 + [40]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($17) = [0]
	*((($21 + [112]) + [8])) = [0]
	*($21 + [112]) = (int_64)0
	$19 = CALL strlen([1216])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$26 }
	*($21 + [112]) = ($19 << [1])
	$20 = (($21 + [112]) | [1])
	$17 = $20
	if ( $19 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$20 = (($19 + [16]) & [-16])
	$17 = CALL $117($20)
	*($21 + [112]) = ($20 | [1])
	*($21 + [120]) = $17
	*($21 + [116]) = $19
	$20 = (($21 + [112]) | [1])
	
.LABEL $label$25
	CALL memcpy($17, [1216], $19)
	
.LABEL $label$24
	*(($17 + $19)) = [0]
	$19 = *($21 + [112])
	$17 = ($19 & [1])
	$19 = CALL $125(($21 + [40]), ( *($21 + [120]) ? $20 : $17 ), ( *($21 + [116]) ? uint_32($19 >> [1]) : $17 ))
	$17 = ($19 + [8])
	*((($21 + [256]) + [8])) = *($17)
	*($21 + [256]) = *($19)
	*($19) = [0]
	*(($19 + [4])) = [0]
	*($17) = [0]
	if ( ((*($21 + [112]) & [1]) == 0) ){ goto $label$27 }
	CALL $119(*((($21 + [112]) + [8])))
	
.LABEL $label$27
	if ( ((*($21 + [40]) & [1]) == 0) ){ goto $label$28 }
	CALL $119(*($21 + [48]))
	
.LABEL $label$28
	if ( ((*($21 + [144]) & [1]) == 0) ){ goto $label$29 }
	CALL $119(*(($21 + [152])))
	
.LABEL $label$29
	if ( ((*($21 + [240]) & [1]) == 0) ){ goto $label$30 }
	CALL $119(*($21 + [248]))
	
.LABEL $label$30
	if ( ((*($21 + [160]) & [1]) == 0) ){ goto $label$31 }
	CALL $119(*(($21 + [168])))
	
.LABEL $label$31
	if ( ((*($21 + [224]) & [1]) == 0) ){ goto $label$32 }
	CALL $119(*($21 + [232]))
	
.LABEL $label$32
	if ( ((*($21 + [192]) & [1]) == 0) ){ goto $label$33 }
	CALL $119(*(($21 + [200])))
	
.LABEL $label$33
	if ( ((*($21 + [208]) & [1]) == 0) ){ goto $label$34 }
	CALL $119(*($21 + [216]))
	
.LABEL $label$34
	CALL eosio_assert(((int_64)*($21 + [280]) == (int_64)*($2 + [8])), [1232])
	CALL eosio_assert(((int_64)*($21 + [272]) >= (int_64)*($2)), ( *($21 + [264]) ? (($21 + [256]) | [1]) : (*($21 + [256]) & [1]) ))
	*($21 + [240]) = CALL $41($0, *($0 + [8]))
	$16 = *($0)
	*($21 + [48]) = $2
	*($21 + [52]) = $3
	*($21 + [44]) = ($21 + [392])
	*($21 + [40]) = ($21 + [240])
	*($21 + [56]) = ($21 + [384])
	*($21 + [60]) = ($21 + [376])
	*($21 + [64]) = ($21 + [352])
	*($21 + [68]) = ($21 + [360])
	*($21 + [72]) = ($21 + [344])
	*($21 + [76]) = ($21 + [368])
	*($21 + [80]) = $0
	*($21 + [84]) = ($21 + [336])
	*($21 + [88]) = ($21 + [320])
	*($21 + [92]) = ($21 + [328])
	*($21 + [96]) = ($21 + [304])
	*($21 + [100]) = ($21 + [296])
	*($21 + [104]) = ($21 + [288])
	*($21 + [108]) = ($21 + [312])
	CALL $77(($21 + [224]), $18, $16, ($21 + [40]))
	if ( ((*($21 + [256]) & [1]) == 0) ){ goto $label$35 }
	CALL $119(*(($21 + [264])))
	
.LABEL $label$35
	*([0] + [4]) = ($21 + [400])
	return (unreachable)
	
.LABEL $label$17
	CALL $121(($21 + [208]))
	
.LABEL $label$16
	CALL $121(($21 + [160]))
	
.LABEL $label$15
	CALL $121(($21 + [112]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$17 = (*([0] + [4]) - [272])
	$19 = $17
	*([0] + [4]) = $17
	$2 = *($1 + [4])
	$18 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$17 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$17 = [0]
	goto $label$1 
	
.LABEL $label$3
	$17 = ($17 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $17
	
.LABEL $label$2
	CALL read_action_data($17, $1)
	
.LABEL $label$1
	CALL $72(($19 + [32]), $17, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($17)
	
.LABEL $label$5
	*(($1 = (($19 + [192]) + [8]))) = *(($19 + [48]))
	$16 = *($19 + [40])
	*(($17 = (($19 + [176]) + [8]))) = *(($19 + [64]))
	$3 = *($19 + [32])
	*($19 + [192]) = $16
	*($19 + [176]) = *($19 + [56])
	$16 = *($19 + [168])
	$15 = *($19 + [160])
	$14 = *($19 + [152])
	$13 = *($19 + [144])
	$12 = *($19 + [136])
	$11 = *($19 + [128])
	$10 = *($19 + [120])
	$9 = *($19 + [112])
	$8 = *($19 + [104])
	$7 = *($19 + [96])
	$6 = *($19 + [88])
	$5 = *($19 + [80])
	$4 = *($19 + [72])
	*((($19 + [224]) + [8])) = *($17)
	*((($19 + [208]) + [8])) = *($1)
	*($19 + [224]) = *($19 + [176])
	*($19 + [208]) = *($19 + [192])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$18 = *((*($1) + $18))
	
.LABEL $label$6
	*(($17 = (($19 + [256]) + [8]))) = *((($19 + [208]) + [8]))
	*(($2 = (($19 + [240]) + [8]))) = *((($19 + [224]) + [8]))
	*($19 + [256]) = *($19 + [208])
	*($19 + [240]) = *($19 + [224])
	*((($19 + [16]) + [8])) = *($17)
	*($19 + [16]) = *($19 + [256])
	*(($19 + [8])) = *($2)
	*($19) = *($19 + [240])
	CALL void $1((int_32 $3), (int_64 ($19 + [16])), (int_32 $19), (int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8), (int_64 $9), (int_64 $10), (int_64 $11), (int_64 $12), (int_64 $13), (int_64 $14), (int_64 $15), (int_64 $16), (int_64 $18))
	*([0] + [4]) = ($19 + [272])
	return [1]
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [464])
	*([0] + [4]) = $12
	$2 = *($0 + [80])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $9)
	$4 = *(($0 + [280]))
	$11 = *(($0 + [284]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$7 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$7 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = ($0 + [256])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [256]) == (int_32)$5), [96])
	goto $label$9 
	
.LABEL $label$10
	$11 = [0]
	$6 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$11 = CALL $25($5, $6)
	CALL eosio_assert(((int_32)*($11 + [256]) == (int_32)$5), [96])
	
.LABEL $label$9
	$1 = CALL $41($0, *($0 + [8]))
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$16 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [165])
	goto $label$14 
	
.LABEL $label$16
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$12
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$11 }
	*($12 + [32]) = (int_64)1397703940
	CALL $44(($12 + [448]), $0, $9, ($12 + [32]))
	*(($12 + [392])) = [0]
	*($12 + [384]) = (int_64)0
	$6 = CALL strlen([1168])
	if ( ((uint_32)$6 > (uint_32)[-17]) ){ goto $label$19 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($12 + [384]) = ($6 << [1])
	$3 = (($12 + [384]) | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$4 = (($6 + [16]) & [-16])
	$3 = CALL $117($4)
	*($12 + [384]) = ($4 | [1])
	*($12 + [392]) = $3
	*($12 + [388]) = $6
	
.LABEL $label$21
	CALL memcpy($3, [1168], $6)
	
.LABEL $label$20
	*(($3 + $6)) = [0]
	$8 = *((($12 + [448]) + [8]))
	*((($12 + [352]) + [8])) = $8
	*((($12 + [16]) + [8])) = $8
	$8 = *($12 + [448])
	*($12 + [352]) = $8
	*($12 + [16]) = $8
	CALL $42(($12 + [368]), $0, ($12 + [16]))
	$6 = *($12 + [368])
	$3 = ($6 & [1])
	$6 = CALL $125(($12 + [384]), ( *($12 + [376]) ? (($12 + [368]) | [1]) : $3 ), ( *($12 + [372]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($12 + [400]) + [8])) = *($3)
	*($12 + [400]) = *($6)
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($3) = [0]
	*((($12 + [336]) + [8])) = [0]
	*($12 + [336]) = (int_64)0
	$6 = CALL strlen([1200])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$25 }
	*($12 + [336]) = ($6 << [1])
	$4 = (($12 + [336]) | [1])
	$3 = $4
	if ( $6 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$4 = (($6 + [16]) & [-16])
	$3 = CALL $117($4)
	*($12 + [336]) = ($4 | [1])
	*($12 + [344]) = $3
	*($12 + [340]) = $6
	$4 = (($12 + [336]) | [1])
	
.LABEL $label$24
	CALL memcpy($3, [1200], $6)
	
.LABEL $label$23
	*(($3 + $6)) = [0]
	$6 = *($12 + [336])
	$3 = ($6 & [1])
	$6 = CALL $125(($12 + [400]), ( *($12 + [344]) ? $4 : $3 ), ( *($12 + [340]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($12 + [416]) + [8])) = *($3)
	*($12 + [416]) = *($6)
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($3) = [0]
	*(($6 = (($12 + [304]) + [8]))) = *(($11 + [168]))
	$8 = *($11 + [160])
	*(($12 + [12])) = *((($12 + [304]) + [12]))
	*(($12 + [8])) = *($6)
	*($12 + [304]) = $8
	*($12 + [4]) = *($12 + [308])
	*($12) = *($12 + [304])
	CALL $42(($12 + [320]), $0, $12)
	$6 = *($12 + [320])
	$3 = ($6 & [1])
	$6 = CALL $125(($12 + [416]), ( *($12 + [328]) ? (($12 + [320]) | [1]) : $3 ), ( *($12 + [324]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($12 + [32]) + [8])) = *($3)
	*($12 + [32]) = *($6)
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($3) = [0]
	*((($12 + [288]) + [8])) = [0]
	*($12 + [288]) = (int_64)0
	$6 = CALL strlen([1216])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$28 }
	*($12 + [288]) = ($6 << [1])
	$4 = (($12 + [288]) | [1])
	$3 = $4
	if ( $6 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = (($6 + [16]) & [-16])
	$3 = CALL $117($4)
	*($12 + [288]) = ($4 | [1])
	*($12 + [296]) = $3
	*($12 + [292]) = $6
	$4 = (($12 + [288]) | [1])
	
.LABEL $label$27
	CALL memcpy($3, [1216], $6)
	
.LABEL $label$26
	*(($3 + $6)) = [0]
	$6 = *($12 + [288])
	$3 = ($6 & [1])
	$6 = CALL $125(($12 + [32]), ( *($12 + [296]) ? $4 : $3 ), ( *($12 + [292]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($12 + [432]) + [8])) = *($3)
	*($12 + [432]) = *($6)
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($3) = [0]
	if ( ((*($12 + [288]) & [1]) == 0) ){ goto $label$29 }
	CALL $119(*((($12 + [288]) + [8])))
	
.LABEL $label$29
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$30 }
	CALL $119(*($12 + [40]))
	
.LABEL $label$30
	if ( ((*($12 + [320]) & [1]) == 0) ){ goto $label$31 }
	CALL $119(*(($12 + [328])))
	
.LABEL $label$31
	if ( ((*($12 + [416]) & [1]) == 0) ){ goto $label$32 }
	CALL $119(*($12 + [424]))
	
.LABEL $label$32
	if ( ((*($12 + [336]) & [1]) == 0) ){ goto $label$33 }
	CALL $119(*(($12 + [344])))
	
.LABEL $label$33
	if ( ((*($12 + [400]) & [1]) == 0) ){ goto $label$34 }
	CALL $119(*($12 + [408]))
	
.LABEL $label$34
	if ( ((*($12 + [368]) & [1]) == 0) ){ goto $label$35 }
	CALL $119(*(($12 + [376])))
	
.LABEL $label$35
	if ( ((*($12 + [384]) & [1]) == 0) ){ goto $label$36 }
	CALL $119(*($12 + [392]))
	
.LABEL $label$36
	CALL eosio_assert(((int_64)*($12 + [456]) == (int_64)*(($11 + [168]))), [1232])
	CALL eosio_assert(((int_64)*($12 + [448]) >= (int_64)*(($11 + [160]))), ( *($12 + [440]) ? (($12 + [432]) | [1]) : (*($12 + [432]) & [1]) ))
	CALL eosio_assert(((int_64)((int_64)*($0 + [40]) & (int_64)*($11 + [240])) != (int_64)0), [1296])
	CALL eosio_assert(((int_64)((int_64)*($0 + [48]) & (int_64)*($11 + [240])) != (int_64)0), [1344])
	CALL memcpy(($12 + [32]), $11, [256])
	*($12 + [32]) = $1
	*($12 + [120]) = (int_64)0
	*($12 + [112]) = [0]
	*($12 + [104]) = *(($0 + [80]))
	$8 = ((int_64)*($12 + [272]) & (int_64)((int_64)((int_64)*($0 + [56]) | (int_64)*($0 + [48])) ^ (int_64)-1))
	*($12 + [272]) = $8
	$10 = *($0 + [64])
	if ( (int_64)(((int_64)*($0 + [72]) & (int_64)$8) == 0) ){ goto $label$38 }
	*(($12 + [272])) = ((int_64)$10 | (int_64)$8)
	$6 = [-1]
	goto $label$37 
	
.LABEL $label$38
	*(($12 + [272])) = ((int_64)$8 & (int_64)((int_64)$10 ^ (int_64)-1))
	$6 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + *($12 + [232]))
	
.LABEL $label$37
	*(($12 + [100])) = *(($12 + [228]))
	*(($12 + [96])) = *(($12 + [224]))
	*(($12 + [92])) = *(($12 + [220]))
	*($12 + [88]) = *($12 + [216])
	*($12 + [128]) = $6
	*(($12 + [64])) = *(($12 + [200]))
	*($12 + [56]) = *($12 + [192])
	*($12 + [136]) = *($12 + [208])
	*($12 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = *($0)
	*($12 + [400]) = ($12 + [32])
	CALL $43(($12 + [416]), $5, $8, ($12 + [400]))
	$6 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($6, [912])
	CALL eosio_assert($6, [960])
	$6 = CALL db_next_i64(*($11 + [260]), ($12 + [416]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$39 }
	CALL $25($5, $6)
	
.LABEL $label$39
	CALL $40($5, $11)
	if ( ((*($12 + [432]) & [1]) == 0) ){ goto $label$40 }
	CALL $119(*(($12 + [440])))
	
.LABEL $label$40
	*([0] + [4]) = ($12 + [464])
	return (unreachable)
	
.LABEL $label$19
	CALL $121(($12 + [384]))
	
.LABEL $label$18
	CALL $121(($12 + [336]))
	
.LABEL $label$17
	CALL $121(($12 + [288]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [496])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [15148])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [14956]
	$1 = (((int_32)$2 * (int_32)[12]) + [14956])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$19 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$20
	$3 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$1 }
	*($0) = $2
	*($4) = $3
	goto $label$1 
	
.LABEL $label$19
	$8 = *($0 + [2])
	$2 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$15 }
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$12 }
	*($0) = $8
	*(($0 + [2])) = $2
	goto $label$11 
	
.LABEL $label$18
	$3 = ($1 + [-1])
	$4 = *($3)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$14 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$4 }
	*($0) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$17
	$8 = [1]
	CALL $115($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	goto $label$1 
	
.LABEL $label$16
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$3 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$13 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [2])) = $3
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($3 = ($0 + [1]))) = $8
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$9 }
	*($0) = $8
	*($3) = $2
	goto $label$9 
	
.LABEL $label$14
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	$8 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($3) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$6 }
	*(($0 + [2])) = $4
	*(($5 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	*($0) = $2
	*($5) = $3
	goto $label$5 
	
.LABEL $label$12
	*($0) = $4
	*(($4 = ($0 + [1]))) = $2
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$10 }
	*(($0 + [2])) = $2
	*($4) = $8
	
.LABEL $label$11
	$4 = $2
	goto $label$9 
	
.LABEL $label$10
	$4 = $8
	
.LABEL $label$9
	$6 = ($0 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	$5 = [0]
	$7 = [0]
	
.LOOP $label$22:
	$3 = *($6)
	if ( ((int_32)$3 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$8 = $5
	
.LOOP $label$27:
	*((($2 = ($0 + $8)) + [3])) = $4
	if ( ((int_32)$8 == (int_32)[-2]) ){ goto $label$26 }
	$8 = ($8 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$3 < (int_32)$4) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = $0
	goto $label$24 
	
.LABEL $label$25
	$8 = (($0 + $8) + [3])
	
.LABEL $label$24
	*($8) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$21 }
	
.LABEL $label$23
	$4 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [1])
	$4 = *($6)
	$6 = $8
	goto $label$22 
	
.LABEL $label$21
	$8 = (((int_32)($6 + [1]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$8
	*($0) = $4
	*(($4 = ($0 + [1]))) = $3
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$6 }
	*(($0 + [2])) = $3
	*($4) = $2
	
.LABEL $label$7
	$4 = $3
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	$2 = *($6)
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$1 }
	*(($3 = ($0 + [2]))) = $2
	*($6) = $4
	$8 = [1]
	$2 = *(($0 + [1]))
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($3) = $2
	$8 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$4
	*($0) = $2
	$8 = [1]
	*(($0 + [1])) = $6
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$1 }
	$8 = [1]
	*(($0 + [1])) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	$8 = ($2 | $4)
	
.LABEL $label$1
	$4
	return ($8 & [1])
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [3836])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-2])
	$3 = ($1 + [-1])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$11 }
	$12 = ($5 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$13 }
	$0 = uint_32($0 >> [2])
	$10 = CALL $115($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [2])
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$22 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [2])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$19 }
	*(($5 + [2])) = $11
	*(($7 = ($5 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [1]))) = $6
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$19 }
	*(($5 + [2])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [3])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [0]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((int_32)$7 >= (int_32)int_32(($11 << [24]) >> [24])) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [3])) = $11
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$27 }
	$0 = ($0 + [-1])
	$11 = *(($6 + [1]))
	if ( ((int_32)$7 < (int_32)$11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [3])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [1])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [2])
	$6 = *($5)
	$0 = *($5 + [1])
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$33 }
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [2])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$30 }
	*(($5 + [2])) = $0
	*(($7 = ($5 + [1]))) = $11
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [1]))) = $6
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$30 }
	*(($5 + [2])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [2]))) = $11
	*($3) = $0
	$11 = ($5 + [1])
	$7 = *($11)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [1])) = $11
	return 
	
.LABEL $label$9
	CALL $115($5, ($5 + [1]), ($5 + [2]), ($5 + [3]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$35 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [1]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [1]))) = $6
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-1])
	$0 = $7
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [1])
	$6 = *($3)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [2])
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$11 = *($0)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$42 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-1])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$45 }
	$12 = ($0 + [1])
	
.LOOP $label$46:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [1]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-1])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$49 }
	$9 = ($0 + [1])
	
.LOOP $label$50:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $116($5, $9, $2)
	$0 = ($9 + [1])
	if ( CALL $116($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $114($5, $9, $2)
	$0 = ($9 + [1])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $114(($9 + [1]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$5 }
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)int_32(($8 << [24]) >> [24])) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0 + [8]) = (int_64)0
	*($0) = *(*($1) + [16])
	$1 = *($2)
	CALL eosio_assert([1], [448])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1) + [8])
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [448])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1408])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $117([32])
	CALL $111($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $52(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $119($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1) + [24])
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [448])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $118 (int_32 $0)
{
	return CALL $117($0)
}

void .FUNC $119 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [496])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [496])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [496])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [104])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	$2 = [0]
	*($0 + [16]) = [0]
	*(($3 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [512])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [512])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [512])
	*($0 + [96]) = [0]
	*($0 + [80]) = [0]
	*($0 + [160]) = (int_64)0
	*(($2 = ($0 + [168]))) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [512])
	*(($2 = ($0 + [192]))) = (int_64)1398362884
	*($0 + [184]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [512])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12 + [15]) = $2
	$3 = *($0 + [80])
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($3, $9)
	$5 = *(($0 + [280]))
	$11 = *(($0 + [284]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$7 }
	$2 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$8:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$7 }
	$11 = $2
	$4 = ($2 + [-24])
	$2 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = ($0 + [256])
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$10 }
	$2 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [256]) == (int_32)$4), [96])
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	$11 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $25($4, $11)
	CALL eosio_assert(((int_32)*($2 + [256]) == (int_32)$4), [96])
	
.LABEL $label$9
	$11 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($11, [832])
	$8 = *($0)
	*($12 + [4]) = $0
	*($12) = ($12 + [15])
	CALL eosio_assert($11, [224])
	CALL $39($4, $2, $8, $12)
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$2 = *($0 + [80])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $9)
	$4 = *(($0 + [280]))
	$11 = *(($0 + [284]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$7 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$7 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = ($0 + [256])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [256]) == (int_32)$3), [96])
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $25($3, $11)
	CALL eosio_assert(((int_32)*($6 + [256]) == (int_32)$3), [96])
	
.LABEL $label$9
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [832])
	CALL eosio_assert((int_64)(((int_64)*($0 + [40]) & (int_64)*($6 + [240])) == 0), [864])
	CALL eosio_assert($11, [912])
	CALL eosio_assert($11, [960])
	$11 = CALL db_next_i64(*($6 + [260]), ($12 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	CALL $25($3, $11)
	
.LABEL $label$11
	CALL $40($3, $6)
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [496])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $31(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [496])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $32(($2 + [48]), $2)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $119(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	*($13 + [120]) = $1
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [80]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $10)
	$5 = *(($0 + [280]))
	$12 = *(($0 + [284]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$7 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$8:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$7 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($0 + [256])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$10 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [256]) == (int_32)$6), [96])
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	$4 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $25($6, $4)
	CALL eosio_assert(((int_32)*($7 + [256]) == (int_32)$6), [96])
	
.LABEL $label$9
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [624])
	CALL $35(($13 + [72]), $0, $1)
	CALL _ZNSt3__19to_stringEy(($13 + [56]), *($7 + [104]))
	$4 = *($13 + [56])
	$5 = ($4 & [1])
	$4 = CALL $125(($13 + [72]), ( *($13 + [64]) ? (($13 + [56]) | [1]) : $5 ), ( *($13 + [60]) ? uint_32($4 >> [1]) : $5 ))
	$5 = ($4 + [8])
	*((($13 + [88]) + [8])) = *($5)
	*($13 + [88]) = *($4)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	CALL _ZNSt3__19to_stringEy(($13 + [40]), $3)
	$4 = *($13 + [40])
	$5 = ($4 & [1])
	$4 = CALL $125(($13 + [88]), ( *($13 + [48]) ? (($13 + [40]) | [1]) : $5 ), ( *($13 + [44]) ? uint_32($4 >> [1]) : $5 ))
	$5 = ($4 + [8])
	*((($13 + [104]) + [8])) = *($5)
	*($13 + [104]) = *($4)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $119(*((($13 + [40]) + [8])))
	
.LABEL $label$11
	if ( ((*($13 + [88]) & [1]) == 0) ){ goto $label$12 }
	CALL $119(*($13 + [96]))
	
.LABEL $label$12
	if ( ((*($13 + [56]) & [1]) == 0) ){ goto $label$13 }
	CALL $119(*(($13 + [64])))
	
.LABEL $label$13
	if ( ((*($13 + [72]) & [1]) == 0) ){ goto $label$14 }
	CALL $119(*($13 + [80]))
	
.LABEL $label$14
	CALL prints([656])
	$4 = *($13 + [104])
	$5 = ($4 & [1])
	CALL prints_l(( *($13 + [112]) ? (($13 + [104]) | [1]) : $5 ), ( *($13 + [108]) ? uint_32($4 >> [1]) : $5 ))
	CALL prints([688])
	CALL $139(($13 + [24]), ($13 + [104]))
	CALL $139(($13 + [8]), $2)
	CALL $36($0, ($13 + [24]), ($13 + [8]))
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $119(*($13 + [16]))
	
.LABEL $label$15
	if ( ((*($13 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL $119(*($13 + [32]))
	
.LABEL $label$16
	$9 = *($0)
	*($13 + [92]) = $0
	*($13 + [88]) = ($13 + [120])
	CALL eosio_assert($12, [224])
	CALL $37($6, $7, $9, ($13 + [88]))
	if ( ((*($13 + [104]) & [1]) == 0) ){ goto $label$17 }
	CALL $119(*(($13 + [112])))
	
.LABEL $label$17
	*([0] + [4]) = ($13 + [128])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $117([272])
	CALL $28($6)
	*($6 + [256]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [40])
	*($8 + [52]) = ($6 + [56])
	*($8 + [56]) = ($6 + [72])
	*($8 + [60]) = ($6 + [80])
	*($8 + [64]) = ($6 + [88])
	*($8 + [68]) = ($6 + [96])
	*($8 + [72]) = ($6 + [104])
	*($8 + [76]) = ($6 + [112])
	*($8 + [80]) = ($6 + [120])
	*($8 + [84]) = ($6 + [128])
	*($8 + [88]) = ($6 + [136])
	*($8 + [92]) = ($6 + [144])
	*($8 + [96]) = ($6 + [152])
	*($8 + [100]) = ($6 + [160])
	*($8 + [104]) = ($6 + [176])
	*($8 + [108]) = ($6 + [184])
	*($8 + [112]) = ($6 + [200])
	*($8 + [116]) = ($6 + [208])
	*($8 + [120]) = ($6 + [216])
	*($8 + [124]) = ($6 + [224])
	*($8 + [128]) = ($6 + [232])
	*($8 + [132]) = ($6 + [240])
	*($8 + [136]) = ($6 + [248])
	CALL $29(($8 + [32]), ($8 + [24]))
	*($6 + [260]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [260])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $119($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [144])
	return $6
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$2 = *($0 + [80])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $9)
	$4 = *(($0 + [280]))
	$11 = *(($0 + [284]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$7 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$7 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = ($0 + [256])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [256]) == (int_32)$3), [96])
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [256])), *(($0 + [264])), (int_64)-5002379550982668288, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $25($3, $11)
	CALL eosio_assert(((int_32)*($6 + [256]) == (int_32)$3), [96])
	
.LABEL $label$9
	$8 = *($0 + [72])
	$10 = *($6 + [240])
	CALL eosio_assert(((int_64)((int_64)*($0 + [64]) & (int_64)$10) != (int_64)0), [160])
	CALL eosio_assert(((int_64)((int_64)$8 & (int_64)$10) != (int_64)0), [192])
	$8 = *($0)
	*($12 + [8]) = $0
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [224])
	CALL $26($3, $6, $8, ($12 + [8]))
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [104])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [384])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	*($1 + [240]) = ((int_64)*($1 + [240]) & (int_64)((int_64)*(*($3) + [64]) ^ (int_64)-1))
	$4 = *($1)
	*($1 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + *($1 + [200]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [384])
	*($5 + [256]) = ($5 + [244])
	*($5 + [252]) = $5
	*($5 + [248]) = $5
	*($5 + [264]) = ($5 + [248])
	*($5 + [276]) = ($1 + [8])
	*($5 + [272]) = $1
	*($5 + [280]) = ($1 + [16])
	*($5 + [284]) = ($1 + [24])
	*($5 + [288]) = ($1 + [40])
	*($5 + [292]) = ($1 + [56])
	*($5 + [296]) = ($1 + [72])
	*($5 + [300]) = ($1 + [80])
	*($5 + [304]) = ($1 + [88])
	*($5 + [308]) = ($1 + [96])
	*($5 + [312]) = ($1 + [104])
	*($5 + [316]) = ($1 + [112])
	*($5 + [320]) = ($1 + [120])
	*($5 + [324]) = ($1 + [128])
	*($5 + [328]) = ($1 + [136])
	*($5 + [332]) = ($1 + [144])
	*($5 + [336]) = ($1 + [152])
	*($5 + [340]) = ($1 + [160])
	*($5 + [344]) = ($1 + [176])
	*($5 + [348]) = ($1 + [184])
	*($5 + [352]) = ($1 + [200])
	*($5 + [356]) = ($1 + [208])
	*($5 + [360]) = ($1 + [216])
	*($5 + [364]) = ($1 + [224])
	*($5 + [368]) = ($1 + [232])
	*($5 + [372]) = ($1 + [240])
	*($5 + [376]) = ($1 + [248])
	CALL $27(($5 + [272]), ($5 + [264]))
	CALL db_update_i64(*($1 + [260]), $2, $5, [244])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [384])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [-3]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [3514])) != (int_32)*(($2 + [3459]))) ){ goto $label$6 }
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[180]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$2 = [183]
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	CALL $104($0, $1, $2)
	return 
	
.LABEL $label$3
	$2 = $0
	goto $label$1 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	*($1 + [4]) = [0]
	*($1) = ( [3511] ? ($2 + [3515]) : ((int_32)$2 == (int_32)[183]) )
}

int_32 .FUNC $100 (int_32 $0)
{
	return [0]
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12) = [0]
	$8 = *($1 + [8])
	*($12 + [8]) = $8
	if ( ((uint_32)$8 > (uint_32)[8]) ){ goto $label$2 }
	$11 = $12
	$10 = $1
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL $118($8)
	*($12) = $11
	$10 = *($1)
	
.LABEL $label$1
	CALL memcpy($11, $10, $8)
	$4 = *(($12 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$5 }
	$5 = ($12 + $4)
	
.LOOP $label$6:
	$7 = *($2)
	$10 = $12
	$8 = $4
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$9 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$9
	$8 = $11
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($12)
	$6 = ($5 + $4)
	
.LOOP $label$11:
	$7 = *($2)
	$10 = $5
	$8 = $4
	if ( ($8 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$14 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$14
	$8 = $11
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	if ( ($4 <= [9]) ){ goto $label$16 }
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $120($8)
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	if ( (*($1 + [12]) == 0) ){ goto $label$18 }
	$4 = ($2 + [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = $3
	$4 = $3
	goto $label$17 
	
.LABEL $label$18
	$5 = *(($1 + [8]))
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$20 }
	$6 = ($1 + $5)
	$4 = $2
	
.LOOP $label$21:
	$7 = *($4)
	$10 = $1
	$8 = $5
	if ( ($8 == 0) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$24 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$24
	$8 = $11
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	$6 = *($1)
	$1 = ($6 + $5)
	$4 = $2
	
.LOOP $label$25:
	$7 = *($4)
	$10 = $6
	$8 = $5
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$28 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$28
	$8 = $11
	if ( $8 ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$17
	*($0 + [4]) = $4
	*($0) = $2
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $103($0, *($1), $2, $3)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $106(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$3 = *($0)
	*(($2 = CALL $117([16]))) = [0]
	$5 = *($3 + [8])
	*($2 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$8 }
	$0 = $3
	$4 = $2
	goto $label$7 
	
.LABEL $label$12
	$3 = [0]
	
.LOOP $label$14:
	$2 = [-3]
	
.LOOP $label$16:
	if ( ((int_32)*((($3 + $2) + [3514])) != (int_32)*(($2 + [3459]))) ){ goto $label$15 }
	if ( ($2 == 0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$16 }
	goto $label$4 
	
.LABEL $label$15
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$11
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$10
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$18 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $120($3)
	
.LABEL $label$18
	CALL $119($2)
	
.LABEL $label$17
	*($1) = [0]
	return 
	
.LABEL $label$9
	$5 = *($1)
	$3 = [0]
	
.LOOP $label$19:
	$2 = [-3]
	
.LOOP $label$21:
	if ( ((int_32)*((($3 + $2) + [3514])) != (int_32)*(($2 + [3459]))) ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$21 }
	goto $label$2 
	
.LABEL $label$20
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$8
	$4 = CALL $118($5)
	*($2) = $4
	$5 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$7
	CALL memcpy($4, $0, $5)
	*($1) = $2
	*($2 + [12]) = *($3 + [12])
	return 
	
.LABEL $label$6
	$2 = $3
	goto $label$3 
	
.LABEL $label$5
	$2 = $3
	goto $label$1 
	
.LABEL $label$4
	$2 = [183]
	
.LABEL $label$3
	*($1 + [4]) = [0]
	*($1) = ( [3511] ? ($2 + [3515]) : ((int_32)$2 == (int_32)[183]) )
	return 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	$3 = ( [3511] ? ($2 + [3515]) : ((int_32)$2 == (int_32)[183]) )
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$23 }
	$5 = ($5 + [1])
	
.LOOP $label$24:
	if ( ((int_32)($2 & [255]) != (int_32)*($3)) ){ goto $label$22 }
	$3 = ($3 + [1])
	$2 = *($5)
	$5 = ($5 + [1])
	if ( $2 ){ goto $label$24 }
	
.LABEL $label$23
	$2 = [0]
	
.LABEL $label$22
	*($1) = ( *($0) ? [0] : ((int_32)($2 & [255]) == (int_32)*($3)) )
	$2
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1040])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1104])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $119($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $119($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [496])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $31(*($1), *($0 + [12]))
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1408])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $117([32])
	CALL $112($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $52(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $119($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1408])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $117([32])
	CALL $113($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $52(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $119($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = [0]
	*($3) = [0]
	$8 = [1]
	if ( ($2 == 0) ){ goto $label$1 }
	$8 = [1]
	
.LOOP $label$2:
	$5 = *((($0 + *(($1 + $4))) + [124]))
	$6 = $8
	$7 = $3
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = (((int_32)*($7) * (int_32)[58]) + $5)
	*($7) = $5
	$7 = ($7 + [1])
	$5 = uint_32($5 >> [8])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($5 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	*(($3 + $8)) = $5
	$8 = ($8 + [1])
	$5 = uint_32($5 >> [8])
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$2 }
	if ( ($2 == 0) ){ goto $label$1 }
	$7 = ($3 + $8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((int_32)*(($1 + $5)) != (int_32)[49]) ){ goto $label$7 }
	*(($7 + $5)) = [0]
	$5 = ($5 + [1])
	if ( ($5 <= $2) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = ($8 + $5)
	
.LABEL $label$1
	$2 = (int_32($8 >> [1]) + ($8 & [1]))
	if ( ((int_32)$8 <= (int_32)$2) ){ goto $label$9 }
	$5 = $3
	$7 = $8
	
.LOOP $label$10:
	$6 = (($3 + $7) + [-1])
	$4 = *($6)
	*($6) = *($5)
	*($5) = $4
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( ((int_32)$7 > (int_32)$2) ){ goto $label$10 }
	
.LABEL $label$9
	return $8
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	$4 = *($1)
	$5 = *(*($3 + [4]) + [40])
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	*($1 + [240]) = ((int_64)*($1 + [240]) | (int_64)$5)
	$6 = ($1 + [240])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [240]) = ((int_64)*($1 + [240]) & (int_64)((int_64)$5 ^ (int_64)-1))
	$6 = ($1 + [240])
	
.LABEL $label$1
	CALL eosio_assert([1], [384])
	$8 = $8
	$3 = ($8 + [-256])
	*([0] + [4]) = $3
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($8 + [-12])
	*($7 + [24]) = ($7 + [8])
	*($7 + [32]) = $1
	*($7 + [36]) = ($1 + [8])
	*($7 + [40]) = ($1 + [16])
	*($7 + [44]) = ($1 + [24])
	*($7 + [48]) = ($1 + [40])
	*($7 + [52]) = ($1 + [56])
	*($7 + [56]) = ($1 + [72])
	*($7 + [60]) = ($1 + [80])
	*($7 + [64]) = ($1 + [88])
	*($7 + [68]) = ($1 + [96])
	*($7 + [72]) = ($1 + [104])
	*($7 + [76]) = ($1 + [112])
	*($7 + [80]) = ($1 + [120])
	*($7 + [84]) = ($1 + [128])
	*($7 + [88]) = ($1 + [136])
	*($7 + [92]) = ($1 + [144])
	*($7 + [96]) = ($1 + [152])
	*($7 + [100]) = ($1 + [160])
	*($7 + [104]) = ($1 + [176])
	*($7 + [108]) = ($1 + [184])
	*($7 + [112]) = ($1 + [200])
	*($7 + [116]) = ($1 + [208])
	*($7 + [120]) = ($1 + [216])
	*($7 + [124]) = ($1 + [224])
	*($7 + [128]) = ($1 + [232])
	*($7 + [132]) = $6
	*($7 + [136]) = ($1 + [248])
	CALL $27(($7 + [32]), ($7 + [24]))
	CALL db_update_i64(*($1 + [260]), $2, $3, [244])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [144])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [256])
	*([0] + [4]) = $4
	CALL $140(($4 + [184]), $2, CALL $176([720]), [-1], $2)
	if ( (*($2) & [1]) ){ goto $label$2 }
	*($2) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*($2 + [8])) = [0]
	*($2 + [4]) = [0]
	
.LABEL $label$1
	CALL $124($2, [0])
	*($2) = *($4 + [184])
	*(($2 + [8])) = *((($4 + [184]) + [8]))
	$3 = *($2)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	$2 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($2 + [4])
	$2 = *($2 + [8])
	
.LABEL $label$3
	CALL $38($0, $2, $3, ($4 + [112]))
	CALL memcpy((($4 + [184]) | [1]), ($4 + [112]), [65])
	*($4 + [184]) = [0]
	CALL memcpy(($4 + [32]), [736], [34])
	CALL memcpy(($4 + [72]), ($4 + [32]), [34])
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = uint_32($2 >> [1])
	$1 = ($1 + [1])
	goto $label$5 
	
.LABEL $label$6
	$2 = *($1 + [4])
	$1 = *($1 + [8])
	
.LABEL $label$5
	CALL sha256($1, $2, $4)
	CALL assert_recover_key($4, ($4 + [184]), [66], ($4 + [72]), [34])
	*([0] + [4]) = ($4 + [256])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [384])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [320])
	*($1 + [72]) = *(*($3))
	$4 = *($1)
	$3 = *($3 + [4])
	$5 = CALL current_time()
	*($1 + [104]) = (int_64)0
	*($1 + [80]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*($1 + [240]) = ((int_64)*($1 + [240]) | (int_64)*($3 + [56]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [384])
	*($6 + [256]) = ($6 + [244])
	*($6 + [252]) = $6
	*($6 + [248]) = $6
	*($6 + [264]) = ($6 + [248])
	*($6 + [276]) = ($1 + [8])
	*($6 + [272]) = $1
	*($6 + [280]) = ($1 + [16])
	*($6 + [284]) = ($1 + [24])
	*($6 + [288]) = ($1 + [40])
	*($6 + [292]) = ($1 + [56])
	*($6 + [296]) = ($1 + [72])
	*($6 + [300]) = ($1 + [80])
	*($6 + [304]) = ($1 + [88])
	*($6 + [308]) = ($1 + [96])
	*($6 + [312]) = ($1 + [104])
	*($6 + [316]) = ($1 + [112])
	*($6 + [320]) = ($1 + [120])
	*($6 + [324]) = ($1 + [128])
	*($6 + [328]) = ($1 + [136])
	*($6 + [332]) = ($1 + [144])
	*($6 + [336]) = ($1 + [152])
	*($6 + [340]) = ($1 + [160])
	*($6 + [344]) = ($1 + [176])
	*($6 + [348]) = ($1 + [184])
	*($6 + [352]) = ($1 + [200])
	*($6 + [356]) = ($1 + [208])
	*($6 + [360]) = ($1 + [216])
	*($6 + [364]) = ($1 + [224])
	*($6 + [368]) = ($1 + [232])
	*($6 + [372]) = ($1 + [240])
	*($6 + [376]) = ($1 + [248])
	CALL $27(($6 + [272]), ($6 + [264]))
	CALL db_update_i64(*($1 + [260]), $2, $6, [244])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [384])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $119($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = CALL $117([16])
	*($0 + [8]) = $7
	*($0) = (int_64)55834574865
	CALL memset($7, [46], [13])
	*($7 + [13]) = [0]
	$3 = ($0 + [1])
	$8 = [17]
	$6 = ($0 + [8])
	$7 = [12]
	
.LOOP $label$1:
	$5 = ((int_32)$7 == (int_32)[12])
	$4 = *((*([0] + [772]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $5 ) & (int_64)$2))))
	$9 = $3
	if ( (($8 & [1]) == 0) ){ goto $label$2 }
	$9 = *($6)
	
.LABEL $label$2
	*(($9 + $7)) = $4
	if ( ($7 == 0) ){ goto $label$3 }
	$7 = ($7 + [-1])
	$2 = (uint_64)$2 >> (uint_64)( (int_64)4 ? (int_64)5 : $5 ))
	$8 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$7 = ( *(($0 + [4])) ? uint_32($7 >> [1]) : $9 )
	$7 = *($0)
	$9 = ($7 & [1])
	$4 = ( *(($0 + [8])) ? $3 : $9 )
	$5 = ($4 + $7)
	
.LOOP $label$6:
	if ( ($7 == 0) ){ goto $label$5 }
	$9 = ($4 + $7)
	$8 = ($7 + [-1])
	$7 = $8
	if ( ((int_32)*(($9 + [-1])) == (int_32)[46]) ){ goto $label$6 }
	$7 = (($4 + $8) + [1])
	goto $label$4 
	
.LABEL $label$5
	$7 = $4
	
.LABEL $label$4
	CALL $129($0, ($7 - $4), ($5 - $7))
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $139($5, ($1 + [8]))
	$3 = *($1 + [24])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $139(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $119(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $119(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $34($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [496])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $117(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $119($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $119($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $33($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $124($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $117($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $124($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $119($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $121($7)
	return (unreachable)
}