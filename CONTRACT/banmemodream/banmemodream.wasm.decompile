(data (i32.const 8193) ",\00")
(data (i32.const 8195) "invalid currency\00")
(data (i32.const 8212) "invalid symbol name\00")
(data (i32.const 8232) "maximum fee must be lower or equal to 1000\00")
(data (i32.const 8275) "fee must be lower or equal to the maximum fee\00")
(data (i32.const 8321) "buy_fee less than buy_baseline\00")
(data (i32.const 8352) "sell_fee less than sell_baseline\00")
(data (i32.const 8385) "This currency already defined\00")
(data (i32.const 8415) "ratio must be between 1 and 1000\00")
(data (i32.const 8448) "EOS\00")
(data (i32.const 8452) "currency is symbol is error\00")
(data (i32.const 8480) "eosio.token\00")
(data (i32.const 8492) "contract is error\00")
(data (i32.const 8510) "existing already defined\00")
(data (i32.const 8535) "curreserve already defined\00")
(data (i32.const 8562) "This currency is not defined\00")
(data (i32.const 8591) "invalid quantity\00")
(data (i32.const 8608) "zero quantity is disallowed\00")
(data (i32.const 8636) "bad path format\00")
(data (i32.const 8652) ":\00")
(data (i32.const 8654) "send\00")
(data (i32.const 8659) "recieve\00")
(data (i32.const 8667) "symbol\00")
(data (i32.const 8674) "IboAccount is not add iboswitchs\00")
(data (i32.const 8707) "iboswitchs is not open\00")
(data (i32.const 8730) "whitelist is not define\00")
(data (i32.const 8754) "Open time not yet arrived\00")
(data (i32.const 8780) "converter is disabled\00")
(data (i32.const 8802) "converter can only receive from network contract\00")
(data (i32.const 8851) "wrong converter\00")
(data (i32.const 8867) "cannot convert to self\00")
(data (i32.const 8890) "cannot convert\00")
(data (i32.const 8905) "unknown \'from\' contract\00")
(data (i32.const 8929) "\'to\' token purchases disabled\00")
(data (i32.const 8959) "curreserves_table is not init\00")
(data (i32.const 8989) "Obtain buy_fee\00")
(data (i32.const 9004) "Obtain|buy_fee\00")
(data (i32.const 9019) "This balance is Null\00")
(data (i32.const 9040) "destroy on conversion\00")
(data (i32.const 9062) "closetime is error\00")
(data (i32.const 9081) "reserve not found\00")
(data (i32.const 9099) "whitelist already defined\00")
(data (i32.const 9125) "This currency is not found\00")
(data (i32.const 17628) "unable to find key\00")
(data (i32.const 17647) "|\00")
(data (i32.const 17649) "recharge\00")
(data (i32.const 17658) "send:\00")
(data (i32.const 17664) "recieve:\00")
(data (i32.const 17673) "symbol:\00")
(data (i32.const 17681) "curreserve not found\00")
(data (i32.const 17702) "active\00")
(data (i32.const 17709) "transfer\00")
(data (i32.const 17718) "string is too long to be a valid symbol_code\00")
(data (i32.const 17763) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17816) "string is too long to be a valid name\00")
(data (i32.const 17854) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17921) "character is not in allowed character set for names\00")
(data (i32.const 17973) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18022) "write\00")
(data (i32.const 18028) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18079) "error reading iterator\00")
(data (i32.const 18102) "read\00")
(data (i32.const 18107) "cannot create objects in table of another contract\00")
(data (i32.const 18158) "cannot pass end iterator to modify\00")
(data (i32.const 18193) "object passed to modify is not in multi_index\00")
(data (i32.const 18239) "cannot modify objects in table of another contract\00")
(data (i32.const 18290) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18349) "get\00")
(data (i32.const 18368) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18384) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18400) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 18416) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$9 (param i32)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $39))
(export "_ZdlPv" (func $71))
(export "_Znwj" (func $69))
(export "_Znaj" (func $70))
(export "_ZdaPv" (func $72))
(export "_ZnwjSt11align_val_t" (func $73))
(export "_ZnajSt11align_val_t" (func $74))
(export "_ZdlPvSt11align_val_t" (func $75))
(export "_ZdaPvSt11align_val_t" (func $76))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $36 $30 $7 $16 $3 $17 $31 $38 $33 $15 $32)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18502))
(global $global$2 i32 (i32.const 18502))


int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9224]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9228])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9224]) = [1]
	$2 = ($2 << [16])
	*([0] + [9228]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9228])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9228]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9224]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9224]) = [1]
	$3 = ($3 << [16])
	*([0] + [9228]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9228])
	
.LABEL $label$10
	*([0] + [9228]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17616])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17424]
	$3 = (((int_32)$1 * (int_32)[12]) + [17424])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $86())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $95($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $96($1)
	
.LABEL $label$2
	*(CALL $86()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $96(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $99($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $96 (int_32 $0)
{
	return CALL $97([9232], $0)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $98($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18416])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_64 .FUNC $90 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL require_auth(*($0))
	*($6 + [88]) = [17702]
	*($6 + [92]) = CALL $93([17702])
	*($6 + [16]) = *($6 + [88])
	$7 = *(CALL $8(($6 + [96]), ($6 + [16])))
	*($6 + [72]) = [17709]
	*($6 + [76]) = CALL $93([17709])
	*($6 + [8]) = *($6 + [72])
	$0 = CALL $8(($6 + [80]), ($6 + [8]))
	*((($6 + [24]) + [24])) = *(($4 + [8]))
	*($6 + [32]) = $3
	*($6 + [24]) = $2
	*($6 + [40]) = *($4)
	$5 = CALL $78((($6 + [24]) + [32]), $5)
	*($6 + [104]) = $1
	*($6 + [112]) = *($0)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $7
	*((($6 + [104]) + [36])) = [0]
	$0 = ($4 + [16])
	*((($6 + [104]) + [24])) = $0
	*(($6 + [124])) = $0
	*($6 + [120]) = $4
	*($6 + [132 align=4]) = (int_64)0
	$4 = *($5)
	$5 = ( *((($6 + [24]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [32])
	$2 = (CASTING uint_64)(uint_32 $5)
	$5 = ($6 + [132])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $25($5, $4)
	$5 = *(($6 + [136]))
	$4 = *(($6 + [132]))
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	
.LABEL $label$2
	*($6 + [164]) = $4
	*($6 + [160]) = $4
	*($6 + [168]) = $5
	*($6 + [144]) = ($6 + [160])
	*($6 + [152]) = ($6 + [24])
	CALL $29(($6 + [152]), ($6 + [144]))
	CALL $27(($6 + [160]), ($6 + [104]))
	$4 = *($6 + [160])
	CALL send_inline($4, (*($6 + [164]) - $4))
	$4 = *($6 + [160])
	if ( ($4 == 0) ){ goto $label$4 }
	*($6 + [164]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($6 + [132])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($6 + [136])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($6 + [120])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($6 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$7
	$global$0 = ($6 + [176])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $78(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $78(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	CALL $51(($4 + [56]), ($4 + [72]))
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [88]), *($4 + [60]), [8])
	$3 = (*($4 + [60]) + [8])
	*($4 + [60]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [64]) - $3) > (uint_32)[7]), [18102])
	CALL memcpy((($4 + [72]) + [24]), *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $53(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $99($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [136]))) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = [0]
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [240]) = ($4 + [88])
	*($4 + [56]) = ($4 + [104])
	CALL $50(($4 + [56]), ($4 + [240]))
	*(($8 = (($4 + [40]) + [8]))) = *($4 + [96])
	*($4 + [40]) = *($4 + [88])
	*(($9 = (($4 + [224]) + [8]))) = *($8)
	*($4 + [224]) = *($4 + [40])
	$8 = *($9)
	*((($4 + [240]) + [8])) = $8
	*(($4 + [80])) = $8
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$0 = *($4 + [224])
	*($4 + [72]) = $0
	*($4 + [240]) = $0
	*(($8 = (($4 + [176]) + [8]))) = *($4 + [112])
	*(($9 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [176]) = *($4 + [104])
	*($4 + [160]) = *($4 + [128])
	$0 = *($4 + [120])
	$1 = *($4 + [144])
	$10 = *($4 + [152])
	*((($4 + [208]) + [8])) = *($9)
	*((($4 + [192]) + [8])) = *($8)
	*($4 + [208]) = *($4 + [160])
	*($4 + [192]) = *($4 + [176])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [192]) + [8]))
	*((($4 + [240]) + [8])) = $11
	$12 = *((($4 + [208]) + [8]))
	*((($4 + [224]) + [8])) = $12
	*((($4 + [24]) + [8])) = $11
	*((($4 + [8]) + [8])) = $12
	$11 = *($4 + [192])
	*($4 + [240]) = $11
	$12 = *($4 + [208])
	*($4 + [224]) = $12
	*($4 + [24]) = $11
	*($4 + [8]) = $12
	CALL void $3((int_32 ($4 + [24])), (int_32 $0), (int_64 ($4 + [8])), (int_32 $1), (int_64 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	$global$0 = ($4 + [256])
	return [1]
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	CALL $51(($4 + [56]), ($4 + [72]))
	CALL eosio_assert(((int_32)*($4 + [64]) != (int_32)*($4 + [60])), [18102])
	CALL memcpy(($4 + [24]), *($4 + [60]), [1])
	*($4 + [60]) = (*($4 + [60]) + [1])
	*($4 + [84]) = ((int_32)*($4 + [24]) != (int_32)[0])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [24])
	CALL $52(($4 + [112]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $99($2)
	
.LABEL $label$4
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $48(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $49(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $99($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $99($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $54(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $55(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $99($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	CALL $51(($4 + [56]), ($4 + [72]))
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [88]), *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = CALL $78(($4 + [96]), ($4 + [72]))
	$0 = *($4 + [88])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $78(($4 + [112]), $8)
	CALL void $3((int_32 $5), (int_32 $0), (int_64 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $99($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return $2
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = [0]
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [224]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $56(($4 + [32]), ($4 + [224]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [208]) + [8]))) = *($9)
	*($4 + [208]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [224]) + [8])) = $9
	*(($4 + [56])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [208])
	*($4 + [48]) = $0
	*($4 + [224]) = $0
	*(($9 = (($4 + [192]) + [8]))) = *($8)
	*($4 + [192]) = *($4 + [88])
	$0 = *($4 + [80])
	$1 = *($4 + [104])
	$10 = *($4 + [112])
	$11 = *($4 + [120])
	$12 = *($4 + [128])
	$13 = *($4 + [136])
	$14 = *($4 + [144])
	$15 = *($4 + [152])
	$16 = *($4 + [160])
	$17 = *($4 + [168])
	$18 = *($4 + [176])
	$8 = *($4 + [184])
	*($3) = *($9)
	*($4 + [208]) = *($4 + [192])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$19 = *((($4 + [208]) + [8]))
	*((($4 + [224]) + [8])) = $19
	*(($4 + [8])) = $19
	$19 = *($4 + [208])
	*($4) = $19
	*($4 + [224]) = $19
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 $10), (int_64 $11), (int_64 $12), (int_64 $13), (int_64 $14), (int_64 $15), (int_64 $16), (int_64 $17), (int_64 $18), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17816])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17921])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17854])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17921])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18079])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $60(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)-1) <= (int_64)1000), [8415])
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	$9 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = [0]
	$11 = $7
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$11 = $12
	$9 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$11 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8195])
	$11 = $7
	
.LOOP $label$7:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$11 = $12
	$13 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = $12
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $10 ){ goto $label$9 }
	$13 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($13, [8212])
	$8 = CALL $93([8448])
	if ( ($8 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [17718])
	goto $label$12 
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$11 = (int_64)0
	
.LOOP $label$14:
	$10 = *(($8 + [8447]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [17763])
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	goto $label$10 
	
.LABEL $label$11
	$11 = (int_64)0
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$7 == (int_64)$11), [8452])
	*($6 + [56]) = [8480]
	*($6 + [60]) = CALL $93([8480])
	*($6) = *($6 + [56])
	CALL eosio_assert(((int_64)*(CALL $8(($6 + [80]), $6)) == (int_64)$2), [8492])
	$8 = [0]
	*((($6 + [16]) + [32])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$11 = *($0)
	*($6 + [16]) = $11
	*($6 + [24]) = $11
	$10 = CALL db_find_i64($11, $11, (int_64)-4994302950881886208, (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$10) < (int_32)[0]) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(CALL $9(($6 + [16]), $10) + [52]) == (int_32)($6 + [16])), [18028])
	goto $label$16 
	
.LABEL $label$17
	$8 = [1]
	
.LABEL $label$16
	CALL eosio_assert($8, [8510])
	$12 = *($0)
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)CALL $fimport$4()), [18107])
	*(($8 = CALL _Znwj([64])) + [52]) = ($6 + [16])
	*($8 + [16]) = $2
	*($8 + [40]) = $4
	*($8 + [48]) = $5
	*($8 + [8]) = *(($1 + [8]))
	*($8) = *($1)
	*($8 + [24]) = *($3)
	*(($8 + [32])) = *(($3 + [8]))
	*($6 + [144]) = (($6 + [80]) + [49])
	*($6 + [140]) = ($6 + [80])
	*($6 + [136]) = ($6 + [80])
	*($6 + [8]) = ($6 + [136])
	*($6 + [156]) = ($8 + [16])
	*($6 + [152]) = $8
	*($6 + [160]) = ($8 + [24])
	*($6 + [164]) = ($8 + [40])
	*($6 + [168]) = ($8 + [48])
	CALL $10(($6 + [152]), ($6 + [8]))
	$11 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8
	$9 = CALL db_store_i64(*((($6 + [16]) + [8])), (int_64)-4994302950881886208, $12, $11), ($6 + [80]), [49]
	*($8 + [56]) = $9)
	$10 = (($6 + [16]) + [16])
	if ( (uint_64)($11 <= *($10)) ){ goto $label$18 }
	*($10) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$18
	*($6 + [152]) = $8
	$11 = (uint_64)*(($8 + [8])) >> (uint_64)(int_64)8
	*($6 + [80]) = $11)
	*($6 + [136]) = $9
	$13 = ($6 + [44])
	$10 = *($13)
	if ( ((uint_32)$10 >= (uint_32)*(($6 + [48]))) ){ goto $label$21 }
	*($10 + [8]) = $11
	*($10 + [16]) = $9
	*($6 + [152]) = [0]
	*($10) = $8
	*($13) = ($10 + [24])
	$10 = *($6 + [152])
	$8 = [0]
	*($6 + [152]) = [0]
	if ( $10 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $11(($6 + [40]), ($6 + [152]), ($6 + [80]), ($6 + [136]))
	$10 = *($6 + [152])
	$8 = [0]
	*($6 + [152]) = [0]
	if ( ($10 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv($10)
	
.LABEL $label$19
	*(($9 = ($6 + [112]))) = $8
	*($6 + [96]) = (int_64)-1
	*($6 + [104]) = (int_64)0
	$11 = *($0)
	*($6 + [80]) = $11
	*($6 + [88]) = $11
	$10 = CALL db_find_i64($11, $11, (int_64)5093418764525547520, (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$10) < (int_32)$8) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*(CALL $12(($6 + [80]), $10) + [32]) == (int_32)($6 + [80])), [18028])
	$8 = [0]
	goto $label$22 
	
.LABEL $label$23
	$8 = [1]
	
.LABEL $label$22
	CALL eosio_assert($8, [8535])
	$11 = *($0)
	*($6 + [12]) = $3
	*($6 + [8]) = $1
	*($6 + [136]) = $11
	CALL eosio_assert(((int_64)*($6 + [80]) == (int_64)CALL $fimport$4()), [18107])
	*($6 + [156]) = ($6 + [8])
	*($6 + [152]) = ($6 + [80])
	*($6 + [160]) = ($6 + [136])
	*(($8 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = ($6 + [80])
	CALL $13(($6 + [152]), $8)
	*($6 + [72]) = $8
	$11 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8
	*($6 + [152]) = $11)
	$13 = *($8 + [36])
	*($6 + [68]) = $13
	$1 = ($6 + [108])
	$10 = *($1)
	if ( ((uint_32)$10 >= (uint_32)*($9)) ){ goto $label$26 }
	*($10 + [8]) = $11
	*($10 + [16]) = $13
	*($6 + [72]) = [0]
	*($10) = $8
	*($1) = ($10 + [24])
	$8 = *($6 + [72])
	*($6 + [72]) = [0]
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $14(($6 + [104]), ($6 + [72]), ($6 + [152]), ($6 + [68]))
	$8 = *($6 + [72])
	*($6 + [72]) = [0]
	if ( ($8 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv($8)
	
.LABEL $label$24
	$9 = *($6 + [104])
	if ( ($9 == 0) ){ goto $label$27 }
	$13 = ($6 + [108])
	$8 = *($13)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$31 }
	CALL _ZdlPv($10)
	
.LABEL $label$31
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$30 }
	$8 = *(($6 + [104]))
	goto $label$28 
	
.LABEL $label$29
	$8 = $9
	
.LABEL $label$28
	*($13) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$9 = *($6 + [40])
	if ( ($9 == 0) ){ goto $label$32 }
	$13 = ($6 + [44])
	$8 = *($13)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$34 }
	
.LOOP $label$35:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$36 }
	CALL _ZdlPv($10)
	
.LABEL $label$36
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$35 }
	$8 = *(($6 + [40]))
	goto $label$33 
	
.LABEL $label$34
	$8 = $9
	
.LABEL $label$33
	*($13) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$global$0 = ($6 + [176])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18079])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [128]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	*($3 + [80]) = ($5 + [104])
	*($3 + [84]) = ($5 + [112])
	*($3 + [88]) = ($5 + [120])
	CALL $59(($3 + [32]), ($3 + [24]))
	*($5 + [132]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [16]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $78(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9, int_64 $10, int_64 $11, int_64 $12, int_32 $13)
{
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$14 = ($global$0 - [272])
	$global$0 = $14
	CALL require_auth(*($0))
	$15 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$16 = [0]
	$17 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$18 = [0]
	$19 = $15
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$20 = (uint_64)$19 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$19 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$19 = $20
	$17 = [1]
	$21 = $18
	$18 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$19 = $20
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$19 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8)
	$17 = ((int_32)$18 < (int_32)[6])
	$21 = ($18 + [1])
	$18 = $21
	if ( $17 ){ goto $label$5 }
	$17 = [1]
	$18 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$17 = [0]
	
.LABEL $label$1
	CALL eosio_assert($17, [8195])
	$19 = $15
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$20 = (uint_64)$19 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$19 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$19 = $20
	$18 = [1]
	$17 = $16
	$16 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$19 = $20
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$19 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8)
	$18 = ((int_32)$16 < (int_32)[6])
	$17 = ($16 + [1])
	$16 = $17
	if ( $18 ){ goto $label$10 }
	$18 = [1]
	$16 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$18 = [0]
	
.LABEL $label$6
	CALL eosio_assert($18, [8212])
	CALL eosio_assert((uint_64)($7 <= (int_64)1001), [8232])
	CALL eosio_assert(((uint_64)$8 <= (uint_64)$7), [8275])
	CALL eosio_assert(((uint_64)$8 >= (uint_64)$9), [8321])
	CALL eosio_assert(((uint_64)$10 <= (uint_64)$7), [8275])
	CALL eosio_assert(((uint_64)$10 >= (uint_64)$11), [8352])
	CALL eosio_assert(((uint_64)$12 <= (uint_64)$7), [8275])
	*((($14 + [8]) + [32])) = [0]
	*($14 + [24]) = (int_64)-1
	*($14 + [32]) = (int_64)0
	$19 = *($0)
	*($14 + [8]) = $19
	*($14 + [16]) = $19
	$16 = CALL db_find_i64($19, $19, (int_64)5093418677664887680, $15)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $4(($14 + [8]), $16) + [128]) == (int_32)($14 + [8])), [18028])
	$16 = [0]
	goto $label$11 
	
.LABEL $label$12
	$16 = [1]
	
.LABEL $label$11
	CALL eosio_assert($16, [8385])
	$20 = *($0)
	CALL eosio_assert(((int_64)*($14 + [8]) == (int_64)CALL $fimport$4()), [18107])
	*(($16 = CALL _Znwj([144])) + [128]) = ($14 + [8])
	*($16) = $1
	*($16 + [24]) = $3
	*($16 + [32]) = $4
	*($16 + [40]) = $5
	*($16 + [48]) = $6
	*($16 + [56]) = $7
	*($16 + [64]) = $8
	*($16 + [72]) = $9
	*($16 + [80]) = $10
	*($16 + [88]) = $11
	*($16 + [96]) = $12
	*($16 + [104]) = $13
	*($16 + [112]) = (int_64)0
	*($16 + [120]) = (int_64)0
	*($16 + [8]) = *($2)
	*($16 + [16]) = *(($2 + [8]))
	*($14 + [192]) = (($14 + [48]) + [121])
	*($14 + [188]) = ($14 + [48])
	*($14 + [184]) = ($14 + [48])
	*($14 + [200]) = ($14 + [184])
	*($14 + [212]) = ($16 + [8])
	*($14 + [208]) = $16
	*($14 + [216]) = ($16 + [24])
	*($14 + [220]) = ($16 + [32])
	*($14 + [224]) = ($16 + [40])
	*($14 + [228]) = ($16 + [48])
	*($14 + [232]) = ($16 + [56])
	*($14 + [236]) = ($16 + [64])
	*($14 + [240]) = ($16 + [72])
	*($14 + [244]) = ($16 + [80])
	*($14 + [248]) = ($16 + [88])
	*($14 + [252]) = ($16 + [96])
	*($14 + [256]) = ($16 + [104])
	*($14 + [260]) = ($16 + [112])
	*($14 + [264]) = ($16 + [120])
	CALL $5(($14 + [208]), ($14 + [200]))
	$19 = (uint_64)*($16 + [16]) >> (uint_64)(int_64)8
	$17 = CALL db_store_i64(*((($14 + [8]) + [8])), (int_64)5093418677664887680, $20, $19), ($14 + [48]), [121]
	*($16 + [132]) = $17)
	$18 = (($14 + [8]) + [16])
	if ( (uint_64)($19 <= *($18)) ){ goto $label$13 }
	*($18) = ((int_64)$19 + (int_64)1)
	
.LABEL $label$13
	*($14 + [208]) = $16
	$19 = (uint_64)*(($16 + [16])) >> (uint_64)(int_64)8
	*($14 + [48]) = $19)
	*($14 + [184]) = $17
	$21 = ($14 + [36])
	$18 = *($21)
	if ( ((uint_32)$18 >= (uint_32)*(($14 + [40]))) ){ goto $label$16 }
	*($18 + [8]) = $19
	*($18 + [16]) = $17
	*($14 + [208]) = [0]
	*($18) = $16
	*($21) = ($18 + [24])
	$16 = *($14 + [208])
	*($14 + [208]) = [0]
	if ( $16 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $6(($14 + [32]), ($14 + [208]), ($14 + [48]), ($14 + [184]))
	$16 = *($14 + [208])
	*($14 + [208]) = [0]
	if ( ($16 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($16)
	
.LABEL $label$14
	$17 = *($14 + [32])
	if ( ($17 == 0) ){ goto $label$17 }
	$21 = ($14 + [36])
	$16 = *($21)
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$19 }
	
.LOOP $label$20:
	$16 = ($16 + [-24])
	$18 = *($16)
	*($16) = [0]
	if ( ($18 == 0) ){ goto $label$21 }
	CALL _ZdlPv($18)
	
.LABEL $label$21
	if ( ((int_32)$17 != (int_32)$16) ){ goto $label$20 }
	$16 = *(($14 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$16 = $17
	
.LABEL $label$18
	*($21) = $17
	CALL _ZdlPv($16)
	
.LABEL $label$17
	$global$0 = ($14 + [272])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $91($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $92($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $79($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $78($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $2($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [272])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$5 }
	$6 = ($1 + [1])
	$1 = uint_32($0 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($1 + [8])
	$1 = *($1 + [4])
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17718])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LOOP $label$6:
	$8 = (($6 + $1) + [-1])
	$0 = *($8)
	if ( ((($0 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	$0 = *($8)
	
.LABEL $label$7
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	$1 = [0]
	$0 = CALL db_find_i64($5, $5, (int_64)5093418677664887680, $7)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $4(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($4 + [8])), [18028])
	
.LABEL $label$8
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [8562])
	$7 = *($1 + [56])
	CALL eosio_assert(((uint_64)$7 >= (uint_64)$2), [8275])
	CALL eosio_assert(((uint_64)$7 >= (uint_64)$3), [8275])
	CALL eosio_assert(((uint_64)*($1 + [72]) <= (uint_64)$2), [8321])
	CALL eosio_assert(((uint_64)*($1 + [88]) <= (uint_64)$3), [8352])
	CALL eosio_assert($0, [18158])
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($4 + [8])), [18193])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [18239])
	*($1 + [64]) = $2
	*($1 + [80]) = $3
	$7 = *(($1 + [16]))
	CALL eosio_assert([1], [18290])
	*($4 + [192]) = (($4 + [48]) + [121])
	*($4 + [188]) = ($4 + [48])
	*($4 + [184]) = ($4 + [48])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [24])
	*($4 + [220]) = ($1 + [32])
	*($4 + [224]) = ($1 + [40])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [56])
	*($4 + [236]) = ($1 + [64])
	*($4 + [240]) = ($1 + [72])
	*($4 + [244]) = ($1 + [80])
	*($4 + [248]) = ($1 + [88])
	*($4 + [252]) = ($1 + [96])
	*($4 + [256]) = ($1 + [104])
	*($4 + [260]) = ($1 + [112])
	*($4 + [264]) = ($1 + [120])
	CALL $5(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, ($4 + [48]), [121])
	$1 = (($4 + [8]) + [16])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( (uint_64)($7) <= *($1)) ){ goto $label$9 }
	*($1) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$9
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	$6 = ($4 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($4 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $8
	
.LABEL $label$11
	*($6) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($4 + [272])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [272])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$5 }
	$6 = ($1 + [1])
	$1 = uint_32($0 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($1 + [8])
	$1 = *($1 + [4])
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17718])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LOOP $label$6:
	$8 = (($6 + $1) + [-1])
	$0 = *($8)
	if ( ((($0 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	$0 = *($8)
	
.LABEL $label$7
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	$1 = [0]
	$0 = CALL db_find_i64($5, $5, (int_64)5093418677664887680, $7)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $4(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($4 + [8])), [18028])
	
.LABEL $label$8
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [8562])
	CALL eosio_assert(((uint_64)*($1 + [64]) >= (uint_64)$2), [8321])
	CALL eosio_assert(((uint_64)*($1 + [80]) >= (uint_64)$3), [8352])
	CALL eosio_assert($0, [18158])
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($4 + [8])), [18193])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [18239])
	*($1 + [72]) = $2
	*($1 + [88]) = $3
	$7 = *(($1 + [16]))
	CALL eosio_assert([1], [18290])
	*($4 + [192]) = (($4 + [48]) + [121])
	*($4 + [188]) = ($4 + [48])
	*($4 + [184]) = ($4 + [48])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [24])
	*($4 + [220]) = ($1 + [32])
	*($4 + [224]) = ($1 + [40])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [56])
	*($4 + [236]) = ($1 + [64])
	*($4 + [240]) = ($1 + [72])
	*($4 + [244]) = ($1 + [80])
	*($4 + [248]) = ($1 + [88])
	*($4 + [252]) = ($1 + [96])
	*($4 + [256]) = ($1 + [104])
	*($4 + [260]) = ($1 + [112])
	*($4 + [264]) = ($1 + [120])
	CALL $5(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, ($4 + [48]), [121])
	$1 = (($4 + [8]) + [16])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( (uint_64)($7) <= *($1)) ){ goto $label$9 }
	*($1) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$9
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	$6 = ($4 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($4 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $8
	
.LABEL $label$11
	*($6) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($4 + [272])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	$1 = uint_32($0 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	$1 = *($1 + [4])
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17718])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = (($5 + $1) + [-1])
	$0 = *($7)
	if ( ((($0 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	$0 = *($7)
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	$1 = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)5093418677664887680, $6)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $4(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($3 + [8])), [18028])
	
.LABEL $label$8
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [8562])
	CALL eosio_assert(((uint_64)*($1 + [56]) >= (uint_64)$2), [8275])
	CALL eosio_assert($0, [18158])
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($3 + [8])), [18193])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [18239])
	*($1 + [96]) = $2
	$6 = *(($1 + [16]))
	CALL eosio_assert([1], [18290])
	*($3 + [192]) = (($3 + [48]) + [121])
	*($3 + [188]) = ($3 + [48])
	*($3 + [184]) = ($3 + [48])
	*($3 + [200]) = ($3 + [184])
	*($3 + [212]) = ($1 + [8])
	*($3 + [208]) = $1
	*($3 + [216]) = ($1 + [24])
	*($3 + [220]) = ($1 + [32])
	*($3 + [224]) = ($1 + [40])
	*($3 + [228]) = ($1 + [48])
	*($3 + [232]) = ($1 + [56])
	*($3 + [236]) = ($1 + [64])
	*($3 + [240]) = ($1 + [72])
	*($3 + [244]) = ($1 + [80])
	*($3 + [248]) = ($1 + [88])
	*($3 + [252]) = ($1 + [96])
	*($3 + [256]) = ($1 + [104])
	*($3 + [260]) = ($1 + [112])
	*($3 + [264]) = ($1 + [120])
	CALL $5(($3 + [208]), ($3 + [200]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, ($3 + [48]), [121])
	$1 = (($3 + [8]) + [16])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( (uint_64)($6) <= *($1)) ){ goto $label$9 }
	*($1) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$9
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	$5 = ($3 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $7
	
.LABEL $label$11
	*($5) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [272])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18079])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	CALL $61(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	$7 = *(*($5 + [4]) + [8])
	CALL eosio_assert([1], [17973])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8212])
	*(($1 + [24])) = $7
	*($1 + [16]) = (int_64)0
	$6 = $2
	$5 = ($6 + [-32])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $6
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [16])
	*($3 + [24]) = $1
	CALL $24(($3 + [24]), ($3 + [16]))
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)5093418764525547520, *(*($0 + [8])), $8), $5, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $99($0)
	
.LABEL $label$1
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	float_64 $25
	int_32 $26
	float_64 $27
	int_32 $28
	int_32 $29
	float_64 $30
	float_64 $31
	float_64 $32
	float_64 $33
	$5 = ($global$0 - [896])
	$global$0 = $5
	$6 = *($2 + [8])
	$7 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8591])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8608])
	$13 = CALL $88((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $6) & [255])))
	*(($5 + [840])) = [0]
	*($5 + [832]) = (int_64)0
	$10 = CALL $93([8193])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$15 }
	*($5 + [832]) = ($10 << [1])
	$7 = (($5 + [832]) | [1])
	if ( $10 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$12 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [832]) = ($12 | [1])
	*($5 + [840]) = $7
	*($5 + [836]) = $10
	
.LABEL $label$14
	CALL memcpy($7, [8193], $10)
	
.LABEL $label$13
	*(($7 + $10)) = [0]
	CALL $1(($5 + [792]), $3, ($5 + [832]))
	if ( ((*($5 + [832]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [840]))
	
.LABEL $label$16
	CALL eosio_assert(((uint_32)((int_32)(*($5 + [796]) - *($5 + [792])) / (int_32)[12]) > (uint_32)[2]), [8636])
	$12 = *($5 + [792])
	*(($5 + [840])) = [0]
	*($5 + [832]) = (int_64)0
	$10 = CALL $93([8652])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [832]) = ($10 << [1])
	$7 = (($5 + [832]) | [1])
	if ( $10 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$3 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($5 + [832]) = ($3 | [1])
	*($5 + [840]) = $7
	*($5 + [836]) = $10
	
.LABEL $label$18
	CALL memcpy($7, [8652], $10)
	
.LABEL $label$17
	*(($7 + $10)) = [0]
	CALL $1(($5 + [776]), $12, ($5 + [832]))
	if ( ((*($5 + [832]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($5 + [840]))
	
.LABEL $label$20
	$7 = *($5 + [792])
	*(($5 + [840])) = [0]
	*($5 + [832]) = (int_64)0
	$10 = CALL $93([8652])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$10 }
	$12 = ($7 + [12])
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$23 }
	*($5 + [832]) = ($10 << [1])
	$7 = (($5 + [832]) | [1])
	if ( $10 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$3 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($5 + [832]) = ($3 | [1])
	*($5 + [840]) = $7
	*($5 + [836]) = $10
	
.LABEL $label$22
	CALL memcpy($7, [8652], $10)
	
.LABEL $label$21
	*(($7 + $10)) = [0]
	CALL $1(($5 + [760]), $12, ($5 + [832]))
	if ( ((*($5 + [832]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($5 + [840]))
	
.LABEL $label$24
	$7 = *($5 + [792])
	*(($5 + [840])) = [0]
	*($5 + [832]) = (int_64)0
	$10 = CALL $93([8652])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$9 }
	$3 = ($7 + [24])
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$27 }
	*($5 + [832]) = ($10 << [1])
	$7 = (($5 + [832]) | [1])
	if ( $10 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$12 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [832]) = ($12 | [1])
	*($5 + [840]) = $7
	*($5 + [836]) = $10
	
.LABEL $label$26
	CALL memcpy($7, [8652], $10)
	
.LABEL $label$25
	$12 = [0]
	*(($7 + $10)) = [0]
	CALL $1(($5 + [744]), $3, ($5 + [832]))
	if ( ((*($5 + [832]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($5 + [840]))
	
.LABEL $label$28
	$10 = *($5 + [776])
	$7 = *($10)
	$3 = CALL $93([8654])
	if ( ((int_32)$3 != (int_32)( *($10 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$29 }
	$12 = [0]
	if ( CALL $84($10, [0], [-1], [8654], $3) ){ goto $label$29 }
	$10 = *($5 + [760])
	$7 = *($10)
	$3 = CALL $93([8659])
	if ( ((int_32)$3 != (int_32)( *($10 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$29 }
	$12 = [0]
	if ( CALL $84($10, [0], [-1], [8659], $3) ){ goto $label$29 }
	$10 = *($5 + [744])
	$7 = *($10)
	$3 = CALL $93([8667])
	if ( ((int_32)$3 != (int_32)( *($10 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$29 }
	$12 = (CALL $84($10, [0], [-1], [8667], $3) == 0)
	
.LABEL $label$29
	CALL eosio_assert($12, [8636])
	$10 = *($5 + [744])
	$7 = *($10 + [12])
	$12 = CALL $93([8448])
	if ( ((int_32)$12 != (int_32)( *(($10 + [16])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$31 }
	if ( (CALL $84(($10 + [12]), [0], [-1], [8448], $12) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$10 = *($5 + [744])
	$7 = *($10 + [12])
	if ( ($7 & [1]) ){ goto $label$33 }
	$3 = (($10 + [12]) + [1])
	$10 = uint_32($7 >> [1])
	if ( ((uint_32)$10 >= (uint_32)[8]) ){ goto $label$32 }
	goto $label$8 
	
.LABEL $label$33
	$3 = *(($10 + [20]))
	$10 = *(($10 + [16]))
	if ( ($10 <= [8]) ){ goto $label$8 }
	
.LABEL $label$32
	CALL eosio_assert([0], [17718])
	goto $label$7 
	
.LABEL $label$30
	$9 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	goto $label$6 
	
.LABEL $label$12
	CALL $77(($5 + [832]))
	
.LABEL $label$11
	CALL $77(($5 + [832]))
	
.LABEL $label$10
	CALL $77(($5 + [832]))
	
.LABEL $label$9
	CALL $77(($5 + [832]))
	
.LABEL $label$8
	if ( $10 ){ goto $label$7 }
	$9 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$9 = (int_64)0
	
.LOOP $label$34:
	$12 = (($3 + $10) + [-1])
	$7 = *($12)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$35 }
	CALL eosio_assert([0], [17763])
	$7 = *($12)
	
.LABEL $label$35
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$34 }
	
.LABEL $label$6
	$10 = [0]
	*((($5 + [704]) + [32])) = [0]
	*($5 + [720]) = (int_64)-1
	*($5 + [728]) = (int_64)0
	$11 = *($0)
	*($5 + [704]) = $11
	*($5 + [712]) = $11
	$14 = [0]
	$7 = CALL db_find_i64($11, $11, (int_64)5093418677664887680, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$36 }
	$14 = CALL $4(($5 + [704]), $7)
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)($5 + [704])), [18028])
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [8562])
	*((($5 + [664]) + [32])) = [0]
	*($5 + [680]) = (int_64)-1
	*($5 + [688]) = (int_64)0
	$9 = *($14 + [48])
	*($5 + [664]) = $9
	*($5 + [672]) = $9
	$7 = CALL db_find_i64($9, $9, (int_64)8208248180591951872, *($0))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$37 }
	$10 = CALL $19(($5 + [664]), $7)
	CALL eosio_assert(((int_32)*($10 + [12]) == (int_32)($5 + [664])), [18028])
	
.LABEL $label$37
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8674])
	CALL eosio_assert(*($10 + [8]), [8707])
	*(($5 + [656])) = [0]
	*($5 + [640]) = (int_64)-1
	*($5 + [648]) = (int_64)0
	$9 = *($0)
	*($5 + [624]) = $9
	*($5 + [632]) = $9
	$10 = *($5 + [760])
	$7 = *($10 + [12])
	if ( ($7 & [1]) ){ goto $label$39 }
	$7 = uint_32($7 >> [1])
	$10 = (($10 + [12]) + [1])
	goto $label$38 
	
.LABEL $label$39
	$7 = *(($10 + [16]))
	$10 = *(($10 + [20]))
	
.LABEL $label$38
	*($5 + [620]) = $7
	*($5 + [616]) = $10
	*($5 + [8]) = *($5 + [616])
	$9 = *(CALL $8(($5 + [832]), ($5 + [8])))
	$7 = *(($5 + [652]))
	$3 = *(($5 + [648]))
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$41 }
	
.LOOP $label$43:
	$10 = ($7 + [-24])
	$12 = *($10)
	if ( ((int_64)*($12) == (int_64)$9) ){ goto $label$42 }
	$7 = $10
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$41 }
	CALL eosio_assert(((int_32)*($12 + [8]) == (int_32)($5 + [624])), [18028])
	goto $label$40 
	
.LABEL $label$41
	$12 = [0]
	$10 = CALL db_find_i64(*($5 + [624]), *(($5 + [632])), (int_64)-2063328927043158016, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$40 }
	$12 = CALL $20(($5 + [624]), $10)
	CALL eosio_assert(((int_32)*($12 + [8]) == (int_32)($5 + [624])), [18028])
	
.LABEL $label$40
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8730])
	$9 = CALL current_time()
	CALL eosio_assert(((uint_64)*($14 + [112]) <= (uint_64)((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8754])
	CALL eosio_assert(*($14 + [104]), [8780])
	CALL eosio_assert(((int_64)*($14 + [24]) == (int_64)$1), [8802])
	$10 = *($5 + [776])
	$7 = *($10 + [12])
	if ( ($7 & [1]) ){ goto $label$45 }
	$7 = uint_32($7 >> [1])
	$10 = (($10 + [12]) + [1])
	goto $label$44 
	
.LABEL $label$45
	$7 = *(($10 + [16]))
	$10 = *(($10 + [20]))
	
.LABEL $label$44
	*($5 + [604]) = $7
	*($5 + [600]) = $10
	*($5) = *($5 + [600])
	CALL eosio_assert(((int_64)*(CALL $8(($5 + [608]), $5)) == (int_64)*($0)), [8851])
	$9 = *(($2 + [8]))
	$10 = *($5 + [744])
	$7 = *($10 + [12])
	if ( ($7 & [1]) ){ goto $label$50 }
	$3 = (($10 + [12]) + [1])
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = uint_32($7 >> [1])
	if ( ((uint_32)$10 >= (uint_32)[8]) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$3 = *(($10 + [20]))
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = *(($10 + [16]))
	if ( ($10 <= [8]) ){ goto $label$48 }
	
.LABEL $label$49
	CALL eosio_assert([0], [17718])
	goto $label$47 
	
.LABEL $label$48
	if ( $10 ){ goto $label$47 }
	$9 = (int_64)0
	goto $label$46 
	
.LABEL $label$47
	$9 = (int_64)0
	
.LOOP $label$51:
	$12 = (($3 + $10) + [-1])
	$7 = *($12)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$52 }
	CALL eosio_assert([0], [17763])
	$7 = *($12)
	
.LABEL $label$52
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$51 }
	
.LABEL $label$46
	CALL eosio_assert(((int_64)$1 != (int_64)$9), [8867])
	$10 = CALL $21($0, $1, $9)
	$15 = *(($10 + [32]))
	$16 = *($10 + [40])
	$17 = *($10 + [24])
	$18 = *($10 + [16])
	$10 = CALL $21($0, $9, $1)
	$19 = *($10 + [48])
	$20 = *($10 + [40])
	$21 = *($10 + [24])
	$22 = *($10 + [16])
	$23 = *(($10 + [32]))
	$10 = CALL $93([8448])
	if ( ($10 <= [8]) ){ goto $label$56 }
	CALL eosio_assert([0], [17718])
	goto $label$55 
	
.LABEL $label$56
	if ( ($10 == 0) ){ goto $label$54 }
	
.LABEL $label$55
	$9 = (int_64)0
	
.LOOP $label$57:
	$7 = *(($10 + [8447]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$58 }
	CALL eosio_assert([0], [17763])
	
.LABEL $label$58
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$57 }
	goto $label$53 
	
.LABEL $label$54
	$9 = (int_64)0
	
.LABEL $label$53
	$10 = CALL $93([8448])
	if ( ($10 <= [8]) ){ goto $label$62 }
	CALL eosio_assert([0], [17718])
	goto $label$61 
	
.LABEL $label$62
	if ( ($10 == 0) ){ goto $label$60 }
	
.LABEL $label$61
	$6 = (int_64)0
	
.LOOP $label$63:
	$7 = *(($10 + [8447]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$64 }
	CALL eosio_assert([0], [17763])
	
.LABEL $label$64
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$63 }
	goto $label$59 
	
.LABEL $label$60
	$6 = (int_64)0
	
.LABEL $label$59
	$10 = CALL $93([8448])
	if ( ($10 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [17718])
	goto $label$69 
	
.LABEL $label$70
	if ( ($10 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	$11 = (int_64)0
	
.LOOP $label$71:
	$7 = *(($10 + [8447]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [17763])
	
.LABEL $label$72
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$71 }
	$24 = (int_64)8
	if ( ((int_64)$1 != (int_64)$11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	$24 = (int_64)8
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$66 }
	
.LABEL $label$67
	$10 = *($5 + [744])
	$7 = *($10 + [12])
	if ( ($7 & [1]) ){ goto $label$77 }
	$3 = (($10 + [12]) + [1])
	$10 = uint_32($7 >> [1])
	if ( ((uint_32)$10 >= (uint_32)[8]) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$3 = *(($10 + [20]))
	$10 = *(($10 + [16]))
	if ( ($10 <= [8]) ){ goto $label$75 }
	
.LABEL $label$76
	CALL eosio_assert([0], [17718])
	goto $label$74 
	
.LABEL $label$75
	if ( $10 ){ goto $label$74 }
	$11 = (int_64)0
	goto $label$73 
	
.LABEL $label$74
	$11 = (int_64)0
	
.LOOP $label$78:
	$12 = (($3 + $10) + [-1])
	$7 = *($12)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$79 }
	CALL eosio_assert([0], [17763])
	$7 = *($12)
	
.LABEL $label$79
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$78 }
	
.LABEL $label$73
	$10 = CALL $93([8448])
	if ( ($10 <= [8]) ){ goto $label$83 }
	CALL eosio_assert([0], [17718])
	goto $label$82 
	
.LABEL $label$83
	if ( ($10 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	$1 = (int_64)0
	
.LOOP $label$84:
	$7 = *(($10 + [8447]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$85 }
	CALL eosio_assert([0], [17763])
	
.LABEL $label$85
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$84 }
	goto $label$80 
	
.LABEL $label$81
	$1 = (int_64)0
	
.LABEL $label$80
	CALL eosio_assert(((int_64)$11 == (int_64)$1), [8890])
	goto $label$65 
	
.LABEL $label$66
	CALL eosio_assert([1], [8890])
	
.LABEL $label$65
	$11 = (uint_64)$15 >> (uint_64)$24)
	CALL eosio_assert(((int_64)$18 == (int_64)$4), [8905])
	$10 = ($14 + [112])
	$1 = *($10)
	$4 = *($14 + [120])
	$25 = ((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($10))) / (float_64)(float_64)3600) / (float_64)(float_64)24
	if ( (((float_64)$25) < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$87 }
	$26 = [0]
	goto $label$86 
	
.LABEL $label$87
	$26 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$86
	$27 = (CASTING float_64)(int_64 $8)
	$10 = ((int_64)$11 == (int_64)$9)
	$25 = ((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))($4 - $1)) / (float_64)(float_64)3600) / (float_64)(float_64)24
	if ( (((float_64)$25) < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$91 }
	$28 = [0]
	$25 = ((float_64)$27 / (float_64)$13)
	$9 = (uint_64)$23 >> (uint_64)(int_64)8)
	if ( $10 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$28 = (CASTING uint_32)(float_64 $25)
	$25 = ((float_64)$27 / (float_64)$13)
	$9 = (uint_64)$23 >> (uint_64)(int_64)8)
	if ( ($10 == 0) ){ goto $label$89 }
	
.LABEL $label$90
	if ( ((int_64)$9 != (int_64)$6) ){ goto $label$92 }
	$2 = [0]
	$6 = (int_64)0
	goto $label$88 
	
.LABEL $label$92
	*((($5 + [560]) + [32])) = [0]
	*($5 + [576]) = (int_64)-1
	*($5 + [584]) = (int_64)0
	$6 = *($0)
	*($5 + [560]) = $6
	*($5 + [568]) = $6
	$3 = [0]
	$10 = CALL db_find_i64($6, $6, (int_64)5093418764525547520, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$93 }
	$3 = CALL $12(($5 + [560]), $10)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($5 + [560])), [18028])
	
.LABEL $label$93
	$2 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($2, [8959])
	*((($5 + [832]) + [32])) = [0]
	*($5 + [832]) = $22
	*($5 + [848]) = (int_64)-1
	*($5 + [856]) = (int_64)0
	*($5 + [840]) = $9
	$8 = *(CALL $22(($5 + [832]), $9, [17628]))
	$12 = *($5 + [856])
	if ( ($12 == 0) ){ goto $label$94 }
	$19 = ($5 + [860])
	$10 = *($19)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$96 }
	
.LOOP $label$97:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$98 }
	CALL _ZdlPv($7)
	
.LABEL $label$98
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$97 }
	$10 = *(($5 + [856]))
	goto $label$95 
	
.LABEL $label$96
	$10 = $12
	
.LABEL $label$95
	*($19) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$94
	$27 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $23) & [255]))
	$30 = CALL $88((float_64)10, $27)
	$4 = *($3 + [16])
	$13 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $15) & [255]))
	$31 = CALL $88((float_64)10, $13)
	$6 = *($14 + [64])
	$33 = (float_64)
	$32 = (CASTING float_64)(uint_64 *($14 + [88]))
	$32 = ( $32 ? $33((CASTING float_64)(uint_64 $6) - ((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))($6 - *($14 + [72]))) / (float_64)(CASTING float_64)(uint_32 $28)) * (float_64)(CASTING float_64)(uint_32 $26)))
	if ( ((int_32)((float_64)$32 : ((float_64)$33 < (float_64)$32) )) > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$111 }
	$32 = ((float_64)$25 * (float_64)((float_64)$32 / (float_64)(float_64)1e3))
	$6 = *($14 + [96])
	if ( (int_64)($6 == 0) ){ goto $label$110 }
	$24 = *($0)
	$33 = ((float_64)$32 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$33| < (float_64)(float_64)9223372036854775808) ){ goto $label$109 }
	$20 = (int_64)-9223372036854775808
	goto $label$108 
	
.LABEL $label$111
	if ( ((float_64)$32 != (float_64)(float_64)0) ){ goto $label$103 }
	$6 = *($14 + [96])
	if ( (int_64)($6 == 0) ){ goto $label$103 }
	$1 = *($0)
	$32 = ((float_64)$25 * (float_64)((float_64)(CASTING float_64)(uint_64 $6) / (float_64)(float_64)1e3))
	$33 = ((float_64)$32 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$33| < (float_64)(float_64)9223372036854775808) ){ goto $label$107 }
	$24 = (int_64)-9223372036854775808
	goto $label$106 
	
.LABEL $label$110
	$1 = *($0)
	$33 = ((float_64)$32 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$33| < (float_64)(float_64)9223372036854775808) ){ goto $label$105 }
	$24 = (int_64)-9223372036854775808
	goto $label$104 
	
.LABEL $label$109
	$20 = (Rounds 0)($33)
	
.LABEL $label$108
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$32 = ((float_64)$25 * (float_64)((float_64)(CASTING float_64)(uint_64 $6) / (float_64)(float_64)1e3))
	$25 = (float_64))((float_64))($25 - $32) - $32)
	$10 = [0]
	$6 = $11
	
.LOOP $label$114:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$113 }
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$115 }
	$6 = $1
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$114 }
	goto $label$112 
	
.LABEL $label$115
	$6 = $1
	
.LOOP $label$116:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$113 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$116 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$114 }
	goto $label$112 
	
.LABEL $label$113
	$7 = [0]
	
.LABEL $label$112
	CALL eosio_assert($7, [8212])
	*(($5 + [264])) = $15
	$6 = *($14 + [40])
	*(($5 + [280])) = [0]
	*($5 + [232]) = $18
	*($5 + [256]) = $20
	*($5 + [240]) = *($0)
	*($5 + [248]) = $6
	*($5 + [272]) = (int_64)0
	$7 = ($5 + [272])
	$10 = CALL $93([8989])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$102 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$119 }
	*(($5 + [272])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$119
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [280])) = $12
	*(($5 + [276])) = $10
	*($5 + [272]) = ($26 | [1])
	
.LABEL $label$118
	CALL memcpy($12, [8989], $10)
	
.LABEL $label$117
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $24
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [232]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$6 = *($7)
	*(($5 + [272])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [232])
	*($5 + [840]) = *((($5 + [232]) + [8]))
	*($5 + [848]) = *((($5 + [232]) + [16]))
	*($5 + [856]) = *($5 + [256])
	*($5 + [872]) = $6
	*(($5 + [276])) = (int_64)0
	CALL $23($24, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$120 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$120
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$121 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$121
	if ( ((*(($5 + [272])) & [1]) == 0) ){ goto $label$122 }
	CALL _ZdlPv(*(($5 + [280])))
	
.LABEL $label$122
	$1 = *($0)
	$32 = ((float_64)$32 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$32| < (float_64)(float_64)9223372036854775808) ){ goto $label$124 }
	$24 = (int_64)-9223372036854775808
	goto $label$123 
	
.LABEL $label$124
	$24 = (Rounds 0)($32)
	
.LABEL $label$123
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$10 = [0]
	
.LOOP $label$127:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$126 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$128 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$128
	$11 = $6
	
.LOOP $label$129:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$126 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$129 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$126
	$7 = [0]
	
.LABEL $label$125
	CALL eosio_assert($7, [8212])
	$11 = *($14 + [32])
	*(($5 + [208])) = $15
	*(($5 + [224])) = [0]
	*($5 + [176]) = $18
	*($5 + [200]) = $24
	*($5 + [184]) = *($0)
	*($5 + [192]) = $11
	*($5 + [216]) = (int_64)0
	$7 = ($5 + [216])
	$10 = CALL $93([9004])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$101 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$132 }
	*(($5 + [216])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$132
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [224])) = $12
	*(($5 + [220])) = $10
	*($5 + [216]) = ($26 | [1])
	
.LABEL $label$131
	CALL memcpy($12, [9004], $10)
	
.LABEL $label$130
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [176]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [216])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [176])
	*($5 + [840]) = *((($5 + [176]) + [8]))
	*($5 + [848]) = *((($5 + [176]) + [16]))
	*($5 + [856]) = *($5 + [200])
	*($5 + [872]) = $11
	*(($5 + [220])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$133
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$134 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$134
	if ( ((*(($5 + [216])) & [1]) == 0) ){ goto $label$103 }
	CALL _ZdlPv(*(($5 + [224])))
	goto $label$103 
	
.LABEL $label$107
	$24 = (Rounds 0)($33)
	
.LABEL $label$106
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$25 = (float_64))($25 - $32)
	$10 = [0]
	
.LOOP $label$137:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$136 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$138 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$137 }
	goto $label$135 
	
.LABEL $label$138
	$11 = $6
	
.LOOP $label$139:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$136 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$139 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$137 }
	goto $label$135 
	
.LABEL $label$136
	$7 = [0]
	
.LABEL $label$135
	CALL eosio_assert($7, [8212])
	$11 = *($14 + [32])
	*(($5 + [96])) = $15
	*(($5 + [112])) = [0]
	*($5 + [64]) = $18
	*($5 + [88]) = $24
	*($5 + [72]) = *($0)
	*($5 + [80]) = $11
	*($5 + [104]) = (int_64)0
	$7 = ($5 + [104])
	$10 = CALL $93([9004])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$100 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$142 }
	*(($5 + [104])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$142
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [112])) = $12
	*(($5 + [108])) = $10
	*($5 + [104]) = ($26 | [1])
	
.LABEL $label$141
	CALL memcpy($12, [9004], $10)
	
.LABEL $label$140
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [64]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [104])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [64])
	*($5 + [840]) = *((($5 + [64]) + [8]))
	*($5 + [848]) = *((($5 + [64]) + [16]))
	*($5 + [856]) = *($5 + [88])
	*($5 + [872]) = $11
	*(($5 + [108])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$143 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$143
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$144 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$144
	if ( ((*(($5 + [104])) & [1]) == 0) ){ goto $label$103 }
	CALL _ZdlPv(*(($5 + [112])))
	goto $label$103 
	
.LABEL $label$105
	$24 = (Rounds 0)($33)
	
.LABEL $label$104
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$25 = (float_64))($25 - $32)
	$10 = [0]
	
.LOOP $label$147:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$146 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$148 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$147 }
	goto $label$145 
	
.LABEL $label$148
	$11 = $6
	
.LOOP $label$149:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$146 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$149 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$147 }
	goto $label$145 
	
.LABEL $label$146
	$7 = [0]
	
.LABEL $label$145
	CALL eosio_assert($7, [8212])
	*(($5 + [152])) = $15
	$11 = *($14 + [40])
	*(($5 + [168])) = [0]
	*($5 + [120]) = $18
	*($5 + [144]) = $24
	*($5 + [128]) = *($0)
	*($5 + [136]) = $11
	*($5 + [160]) = (int_64)0
	$7 = ($5 + [160])
	$10 = CALL $93([8989])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$99 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$152 }
	*(($5 + [160])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$152
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [168])) = $12
	*(($5 + [164])) = $10
	*($5 + [160]) = ($26 | [1])
	
.LABEL $label$151
	CALL memcpy($12, [8989], $10)
	
.LABEL $label$150
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [120]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [160])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [120])
	*($5 + [840]) = *((($5 + [120]) + [8]))
	*($5 + [848]) = *((($5 + [120]) + [16]))
	*($5 + [856]) = *($5 + [144])
	*($5 + [872]) = $11
	*(($5 + [164])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$153 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$153
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$154 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$154
	if ( ((*(($5 + [160])) & [1]) == 0) ){ goto $label$103 }
	CALL _ZdlPv(*(($5 + [168])))
	
.LABEL $label$103
	$30 = ((float_64)(CASTING float_64)(int_64 ((int_64)$8 + (int_64)$21)) / (float_64)$30)
	$31 = CALL $88(((float_64)((float_64)$25 / (float_64)((float_64)(CASTING float_64)(int_64 ((int_64)$4 + (int_64)$17)) / (float_64)$31)) + (float_64)(float_64)1), ((float_64)(CASTING float_64)(uint_64 $16) / (float_64)(float_64)1e3))
	$27 = CALL $88((float_64)10, $27)
	CALL eosio_assert($2, [18158])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($5 + [560])), [18193])
	CALL eosio_assert(((int_64)*($5 + [560]) == (int_64)CALL $fimport$4()), [18239])
	$11 = *($3 + [8])
	$6 = *($3 + [16])
	$25 = ((float_64)((float_64)$25 * (float_64)CALL $88((float_64)10, $13)) + (float_64)(CASTING float_64)(int_64 $6))
	if ( ((float_64)(float_64)|$25| < (float_64)(float_64)9223372036854775808) ){ goto $label$156 }
	$6 = (int_64)-9223372036854775808
	goto $label$155 
	
.LABEL $label$156
	$6 = (Rounds 0)($25)
	
.LABEL $label$155
	*($3 + [16]) = $6
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$11) == (int_64)(uint_64)*($3 + [8]) >> (uint_64)(int_64)8)), [18290])
	*($5 + [312]) = (($5 + [832]) + [32])
	*($5 + [308]) = ($5 + [832])
	*($5 + [304]) = ($5 + [832])
	*($5 + [288]) = ($5 + [304])
	*($5 + [812]) = ($3 + [16])
	*($5 + [808]) = $3
	CALL $24(($5 + [808]), ($5 + [288]))
	CALL db_update_i64(*($3 + [36]), (int_64)0, ($5 + [832]), [32])
	$25 = ((float_64)$27 * (float_64)((float_64)$30 * (float_64)((float_64)$31 + (float_64)(float_64)-1)))
	if ( ((float_64)(float_64)|$25| < (float_64)(float_64)9223372036854775808) ){ goto $label$158 }
	$6 = (int_64)-9223372036854775808
	goto $label$157 
	
.LABEL $label$158
	$6 = (Rounds 0)($25)
	
.LABEL $label$157
	if ( (uint_64)($11 <= *((($5 + [560]) + [16]))) ){ goto $label$159 }
	*(($5 + [576])) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$159
	$2 = [1]
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*(($3 + [16])) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9019])
	$12 = *($5 + [584])
	if ( ($12 == 0) ){ goto $label$88 }
	$3 = ($5 + [588])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$161 }
	
.LOOP $label$162:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$163 }
	CALL _ZdlPv($7)
	
.LABEL $label$163
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$162 }
	$10 = *(($5 + [584]))
	goto $label$160 
	
.LABEL $label$161
	$10 = $12
	
.LABEL $label$160
	*($3) = $12
	CALL _ZdlPv($10)
	goto $label$88 
	
.LABEL $label$102
	CALL $77($7)
	
.LABEL $label$101
	CALL $77($7)
	
.LABEL $label$100
	CALL $77($7)
	
.LABEL $label$99
	CALL $77($7)
	
.LABEL $label$89
	CALL eosio_assert($19, [8929])
	*((($5 + [560]) + [32])) = [0]
	*($5 + [576]) = (int_64)-1
	*($5 + [584]) = (int_64)0
	$6 = *($0)
	*($5 + [560]) = $6
	*($5 + [568]) = $6
	$3 = [0]
	$10 = CALL db_find_i64($6, $6, (int_64)5093418764525547520, $11)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$164 }
	$3 = CALL $12(($5 + [560]), $10)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($5 + [560])), [18028])
	
.LABEL $label$164
	$19 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($19, [8959])
	*((($5 + [832]) + [32])) = [0]
	*($5 + [832]) = $18
	*($5 + [848]) = (int_64)-1
	*($5 + [856]) = (int_64)0
	*($5 + [840]) = $11
	$6 = *(CALL $22(($5 + [832]), $11, [17628]))
	$12 = *($5 + [856])
	if ( ($12 == 0) ){ goto $label$165 }
	$29 = ($5 + [860])
	$10 = *($29)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$167 }
	
.LOOP $label$168:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$169 }
	CALL _ZdlPv($7)
	
.LABEL $label$169
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$168 }
	$10 = *(($5 + [856]))
	goto $label$166 
	
.LABEL $label$167
	$10 = $12
	
.LABEL $label$166
	*($29) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$165
	$27 = CALL $88((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $15) & [255])))
	$1 = *($3 + [16])
	$13 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $23) & [255]))
	$30 = CALL $88((float_64)10, $13)
	$15 = *($14 + [88])
	$11 = *($14 + [80])
	$25 = ((float_64)((float_64)(CASTING float_64)(int_64 ((int_64)$1 + (int_64)$21)) / (float_64)$30) * (float_64)(float_64))((float_64)1 - CALL $88((float_64))((float_64)1 - ((float_64)$25 / (float_64)((float_64)(CASTING float_64)(int_64 ((int_64)$6 + (int_64)$17)) / (float_64)$27))), ((float_64)(float_64)1 / (float_64)((float_64)(CASTING float_64)(uint_64 $20) / (float_64)(float_64)1e3)))))
	$30 = (float_64)
	$27 = (CASTING float_64)(uint_64 *($14 + [88]))
	$27 = ( $27 ? $30((CASTING float_64)(uint_64 $11) - ((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))($11 - $15)) / (float_64)(CASTING float_64)(uint_32 $28)) * (float_64)(CASTING float_64)(uint_32 $26)))
	if ( ((int_32)((float_64)$27 : ((float_64)$30 < (float_64)$27) )) > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$185 }
	$27 = ((float_64)$25 * (float_64)((float_64)$27 / (float_64)(float_64)1e3))
	$11 = *($14 + [96])
	if ( (int_64)($11 == 0) ){ goto $label$184 }
	$1 = *($0)
	$30 = ((float_64)$27 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$30| < (float_64)(float_64)9223372036854775808) ){ goto $label$183 }
	$15 = (int_64)-9223372036854775808
	goto $label$182 
	
.LABEL $label$185
	if ( ((float_64)$27 != (float_64)(float_64)0) ){ goto $label$177 }
	$11 = *($14 + [96])
	if ( (int_64)($11 == 0) ){ goto $label$177 }
	$1 = *($0)
	$27 = ((float_64)$25 * (float_64)((float_64)(CASTING float_64)(uint_64 $11) / (float_64)(float_64)1e3))
	$30 = ((float_64)$27 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$30| < (float_64)(float_64)9223372036854775808) ){ goto $label$181 }
	$15 = (int_64)-9223372036854775808
	goto $label$180 
	
.LABEL $label$184
	$1 = *($0)
	$30 = ((float_64)$27 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$30| < (float_64)(float_64)9223372036854775808) ){ goto $label$179 }
	$15 = (int_64)-9223372036854775808
	goto $label$178 
	
.LABEL $label$183
	$15 = (Rounds 0)($30)
	
.LABEL $label$182
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$30 = ((float_64)$25 * (float_64)((float_64)(CASTING float_64)(uint_64 $11) / (float_64)(float_64)1e3))
	$10 = [0]
	$11 = $9
	
.LOOP $label$188:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$187 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$189 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$189
	$11 = $6
	
.LOOP $label$190:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$187 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$190 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	$7 = [0]
	
.LABEL $label$186
	CALL eosio_assert($7, [8212])
	*(($5 + [536])) = $23
	$11 = *($14 + [40])
	*(($5 + [552])) = [0]
	*($5 + [504]) = $22
	*($5 + [528]) = $15
	*($5 + [512]) = *($0)
	*($5 + [520]) = $11
	*($5 + [544]) = (int_64)0
	$7 = ($5 + [544])
	$10 = CALL $93([8989])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$176 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$193 }
	*(($5 + [544])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$192 }
	goto $label$191 
	
.LABEL $label$193
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [552])) = $12
	*(($5 + [548])) = $10
	*($5 + [544]) = ($26 | [1])
	
.LABEL $label$192
	CALL memcpy($12, [8989], $10)
	
.LABEL $label$191
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [504]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [544])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [504])
	*($5 + [840]) = *((($5 + [504]) + [8]))
	*($5 + [848]) = *((($5 + [504]) + [16]))
	*($5 + [856]) = *($5 + [528])
	*($5 + [872]) = $11
	*(($5 + [548])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$194 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$194
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$195 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$195
	if ( ((*(($5 + [544])) & [1]) == 0) ){ goto $label$196 }
	CALL _ZdlPv(*(($5 + [552])))
	
.LABEL $label$196
	$1 = *($0)
	$31 = ((float_64)$30 * (float_64)CALL $88((float_64)10, $13))
	if ( ((float_64)(float_64)|$31| < (float_64)(float_64)9223372036854775808) ){ goto $label$198 }
	$15 = (int_64)-9223372036854775808
	goto $label$197 
	
.LABEL $label$198
	$15 = (Rounds 0)($31)
	
.LABEL $label$197
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$10 = [0]
	$11 = $9
	
.LOOP $label$201:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$200 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$202 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$201 }
	goto $label$199 
	
.LABEL $label$202
	$11 = $6
	
.LOOP $label$203:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$200 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$203 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$201 }
	goto $label$199 
	
.LABEL $label$200
	$7 = [0]
	
.LABEL $label$199
	CALL eosio_assert($7, [8212])
	$11 = *($14 + [32])
	*(($5 + [480])) = $23
	*(($5 + [496])) = [0]
	*($5 + [448]) = $22
	*($5 + [472]) = $15
	*($5 + [456]) = *($0)
	*($5 + [464]) = $11
	*($5 + [488]) = (int_64)0
	$7 = ($5 + [488])
	$10 = CALL $93([9004])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$175 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$206 }
	*(($5 + [488])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$205 }
	goto $label$204 
	
.LABEL $label$206
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [496])) = $12
	*(($5 + [492])) = $10
	*($5 + [488]) = ($26 | [1])
	
.LABEL $label$205
	CALL memcpy($12, [9004], $10)
	
.LABEL $label$204
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [448]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [488])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [448])
	*($5 + [840]) = *((($5 + [448]) + [8]))
	*($5 + [848]) = *((($5 + [448]) + [16]))
	*($5 + [856]) = *($5 + [472])
	*($5 + [872]) = $11
	*(($5 + [492])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$207 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$207
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$208 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$208
	if ( ((*(($5 + [488])) & [1]) == 0) ){ goto $label$209 }
	CALL _ZdlPv(*(($5 + [496])))
	
.LABEL $label$209
	$25 = (float_64))((float_64))($25 - $27) - $30)
	goto $label$177 
	
.LABEL $label$181
	$15 = (Rounds 0)($30)
	
.LABEL $label$180
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$10 = [0]
	$11 = $9
	
.LOOP $label$212:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$211 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$213 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$212 }
	goto $label$210 
	
.LABEL $label$213
	$11 = $6
	
.LOOP $label$214:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$211 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$214 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$212 }
	goto $label$210 
	
.LABEL $label$211
	$7 = [0]
	
.LABEL $label$210
	CALL eosio_assert($7, [8212])
	$11 = *($14 + [32])
	*(($5 + [368])) = $23
	*(($5 + [384])) = [0]
	*($5 + [336]) = $22
	*($5 + [360]) = $15
	*($5 + [344]) = *($0)
	*($5 + [352]) = $11
	*($5 + [376]) = (int_64)0
	$7 = ($5 + [376])
	$10 = CALL $93([9004])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$174 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$217 }
	*(($5 + [376])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$216 }
	goto $label$215 
	
.LABEL $label$217
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [384])) = $12
	*(($5 + [380])) = $10
	*($5 + [376]) = ($26 | [1])
	
.LABEL $label$216
	CALL memcpy($12, [9004], $10)
	
.LABEL $label$215
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [336]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [376])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [336])
	*($5 + [840]) = *((($5 + [336]) + [8]))
	*($5 + [848]) = *((($5 + [336]) + [16]))
	*($5 + [856]) = *($5 + [360])
	*($5 + [872]) = $11
	*(($5 + [380])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$218 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$218
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$219 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$219
	if ( ((*(($5 + [376])) & [1]) == 0) ){ goto $label$220 }
	CALL _ZdlPv(*(($5 + [384])))
	
.LABEL $label$220
	$25 = (float_64))($25 - $27)
	goto $label$177 
	
.LABEL $label$179
	$15 = (Rounds 0)($30)
	
.LABEL $label$178
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$10 = [0]
	$11 = $9
	
.LOOP $label$223:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$222 }
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$224 }
	$11 = $6
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$223 }
	goto $label$221 
	
.LABEL $label$224
	$11 = $6
	
.LOOP $label$225:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$222 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$225 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$223 }
	goto $label$221 
	
.LABEL $label$222
	$7 = [0]
	
.LABEL $label$221
	CALL eosio_assert($7, [8212])
	*(($5 + [424])) = $23
	$11 = *($14 + [40])
	*(($5 + [440])) = [0]
	*($5 + [392]) = $22
	*($5 + [416]) = $15
	*($5 + [400]) = *($0)
	*($5 + [408]) = $11
	*($5 + [432]) = (int_64)0
	$7 = ($5 + [432])
	$10 = CALL $93([8989])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$173 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$228 }
	*(($5 + [432])) = ($10 << [1])
	$12 = ($7 + [1])
	if ( $10 ){ goto $label$227 }
	goto $label$226 
	
.LABEL $label$228
	$26 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($26)
	*(($5 + [440])) = $12
	*(($5 + [436])) = $10
	*($5 + [432]) = ($26 | [1])
	
.LABEL $label$227
	CALL memcpy($12, [8989], $10)
	
.LABEL $label$226
	*(($12 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [832]) + [32])) = *((($5 + [392]) + [32]))
	*(($12 = ($5 + [880]))) = *(($7 + [8]))
	$11 = *($7)
	*(($5 + [432])) = [0]
	*($5 + [304]) = $10
	$10 = ($10 + [16])
	*($5 + [312]) = $10
	*($5 + [308]) = $10
	*($5 + [832]) = *($5 + [392])
	*($5 + [840]) = *((($5 + [392]) + [8]))
	*($5 + [848]) = *((($5 + [392]) + [16]))
	*($5 + [856]) = *($5 + [416])
	*($5 + [872]) = $11
	*(($5 + [436])) = (int_64)0
	CALL $23($1, (int_64)8422551174711144624, ($5 + [304]), ($5 + [832]))
	if ( ((*($5 + [872]) & [1]) == 0) ){ goto $label$229 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$229
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$230 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$230
	if ( ((*(($5 + [432])) & [1]) == 0) ){ goto $label$231 }
	CALL _ZdlPv(*(($5 + [440])))
	
.LABEL $label$231
	$25 = (float_64))($25 - $27)
	
.LABEL $label$177
	$13 = CALL $88((float_64)10, $13)
	CALL eosio_assert($19, [18158])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($5 + [560])), [18193])
	CALL eosio_assert(((int_64)*($5 + [560]) == (int_64)CALL $fimport$4()), [18239])
	$25 = ((float_64)$25 * (float_64)$13)
	if ( ((float_64)(float_64)|$25| < (float_64)(float_64)9223372036854775808) ){ goto $label$233 }
	$6 = (int_64)-9223372036854775808
	goto $label$232 
	
.LABEL $label$233
	$6 = (Rounds 0)($25)
	
.LABEL $label$232
	*($3 + [16]) = (int_64))(*($3 + [16]) - $6)
	$11 = *($3 + [8])
	CALL eosio_assert([1], [18290])
	*($5 + [312]) = (($5 + [832]) + [32])
	*($5 + [308]) = ($5 + [832])
	*($5 + [304]) = ($5 + [832])
	*($5 + [288]) = ($5 + [304])
	$10 = ($3 + [16])
	*($5 + [812]) = $10
	*($5 + [808]) = $3
	CALL $24(($5 + [808]), ($5 + [288]))
	CALL db_update_i64(*($3 + [36]), (int_64)0, ($5 + [832]), [32])
	$7 = (($5 + [560]) + [16])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( (uint_64)($11) <= *($7)) ){ goto $label$234 }
	*($7) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$234
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($10) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9019])
	$11 = *($0)
	*(($5 + [296])) = [0]
	*($5 + [288]) = (int_64)0
	$10 = CALL $93([9040])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$235 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$238 }
	*($5 + [288]) = ($10 << [1])
	$7 = (($5 + [288]) | [1])
	if ( $10 ){ goto $label$237 }
	goto $label$236 
	
.LABEL $label$238
	$12 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [288]) = ($12 | [1])
	*($5 + [296]) = $7
	*($5 + [292]) = $10
	
.LABEL $label$237
	CALL memcpy($7, [9040], $10)
	
.LABEL $label$236
	*(($7 + $10)) = [0]
	*(($7 = (($5 + [832]) + [24]))) = [0]
	*((($5 + [304]) + [8])) = *(($2 + [8]))
	$10 = (($5 + [288]) + [8])
	*((($5 + [304]) + [24])) = *($10)
	*($10) = [0]
	*($5 + [832]) = $18
	*($5 + [840]) = (int_64)-4993669930013425664
	*($5 + [848]) = (int_64)0
	*($5 + [304]) = *($2)
	*($5 + [320]) = *($5 + [288])
	*($5 + [288]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $11
	*($10 + [8]) = (int_64)3617214756542218240
	*(($5 + [868])) = [0]
	$12 = ($10 + [16])
	*($7) = $12
	*((($5 + [832]) + [20])) = $12
	*($5 + [848]) = $10
	*($5 + [860 align=4]) = (int_64)0
	$10 = *($5 + [320])
	$7 = ( *((($5 + [304]) + [20])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [16])
	$11 = (CASTING uint_64)(uint_32 $7)
	$12 = (($5 + [304]) + [16])
	$7 = ($5 + [860])
	
.LOOP $label$239:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$239 }
	if ( ($10 == 0) ){ goto $label$241 }
	CALL $25($7, $10)
	$7 = *(($5 + [864]))
	$10 = *(($5 + [860]))
	goto $label$240 
	
.LABEL $label$241
	$7 = [0]
	$10 = [0]
	
.LABEL $label$240
	*($5 + [812]) = $10
	*($5 + [808]) = $10
	*($5 + [816]) = $7
	CALL eosio_assert(((int_32)($7 - $10) > (int_32)[7]), [18022])
	CALL memcpy(*($5 + [812]), ($5 + [304]), [8])
	$10 = (*($5 + [812]) + [8])
	*($5 + [812]) = $10
	*($5 + [824]) = *($5 + [312])
	CALL eosio_assert(((int_32)(*($5 + [816]) - $10) > (int_32)[7]), [18022])
	CALL memcpy(*($5 + [812]), ($5 + [824]), [8])
	*($5 + [812]) = (*($5 + [812]) + [8])
	CALL $26(($5 + [808]), $12)
	CALL $27(($5 + [808]), ($5 + [832]))
	$10 = *($5 + [808])
	CALL send_inline($10, (*($5 + [812]) - $10))
	$10 = *($5 + [808])
	if ( ($10 == 0) ){ goto $label$242 }
	*($5 + [812]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$242
	$10 = *($5 + [860])
	if ( ($10 == 0) ){ goto $label$243 }
	*(($5 + [864])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$243
	$10 = *($5 + [848])
	if ( ($10 == 0) ){ goto $label$244 }
	*(($5 + [852])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$244
	if ( (*(($5 + [320])) & [1]) ){ goto $label$246 }
	if ( (*($5 + [288]) & [1]) ){ goto $label$245 }
	goto $label$172 
	
.LABEL $label$246
	CALL _ZdlPv(*(($5 + [328])))
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$172 }
	
.LABEL $label$245
	CALL _ZdlPv(*(($5 + [296])))
	$12 = *($5 + [584])
	if ( ($12 == 0) ){ goto $label$170 }
	goto $label$171 
	
.LABEL $label$235
	CALL $77(($5 + [288]))
	
.LABEL $label$176
	CALL $77($7)
	
.LABEL $label$175
	CALL $77($7)
	
.LABEL $label$174
	CALL $77($7)
	
.LABEL $label$173
	CALL $77($7)
	
.LABEL $label$172
	$12 = *($5 + [584])
	if ( ($12 == 0) ){ goto $label$170 }
	
.LABEL $label$171
	$3 = ($5 + [588])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$248 }
	
.LOOP $label$249:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$250 }
	CALL _ZdlPv($7)
	
.LABEL $label$250
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$249 }
	$10 = *(($5 + [584]))
	goto $label$247 
	
.LABEL $label$248
	$10 = $12
	
.LABEL $label$247
	*($3) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$170
	$2 = [0]
	
.LABEL $label$88
	$12 = CALL $78(($5 + [16]), (*($5 + [744]) + [12]))
	$7 = CALL $78(($5 + [32]), (*($5 + [776]) + [12]))
	$10 = CALL $78(($5 + [48]), (*($5 + [760]) + [12]))
	CALL $28(($5 + [808]), $5, $10, $7, $12)
	if ( (*($12) & [1]) ){ goto $label$255 }
	if ( (*($7) & [1]) ){ goto $label$254 }
	goto $label$253 
	
.LABEL $label$255
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$253 }
	
.LABEL $label$254
	CALL _ZdlPv(*($7 + [8]))
	$3 = [1]
	if ( (*($10) & [1]) ){ goto $label$252 }
	goto $label$251 
	
.LABEL $label$253
	$3 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$251 }
	
.LABEL $label$252
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$251
	$1 = *(($14 + [24]))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17973])
	$10 = [0]
	
.LOOP $label$262:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$261 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$264 }
	$9 = $11
	$14 = [1]
	$7 = $10
	$10 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$262 }
	goto $label$263 
	
.LABEL $label$264
	$9 = $11
	
.LOOP $label$265:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$261 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + $3)
	$10 = $12
	if ( $7 ){ goto $label$265 }
	$14 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$262 }
	
.LABEL $label$263
	CALL eosio_assert($14, [8212])
	if ( ($2 == 0) ){ goto $label$260 }
	goto $label$259 
	
.LABEL $label$261
	CALL eosio_assert([0], [8212])
	if ( $2 ){ goto $label$259 }
	
.LABEL $label$260
	$9 = *($0)
	*((($5 + [832]) + [24])) = $23
	*($5 + [840]) = $1
	*($5 + [832]) = $9
	*($5 + [848]) = $6
	$7 = CALL $78((($5 + [832]) + [32]), ($5 + [808]))
	*(($12 = (($5 + [560]) + [24]))) = [0]
	*($5 + [568]) = (int_64)-3617168760277827584
	*($5 + [560]) = $22
	*($5 + [576]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $9
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [560]) + [36])) = [0]
	$3 = ($10 + [16])
	*($12) = $3
	*(($5 + [580])) = $3
	*($5 + [576]) = $10
	*($5 + [588 align=4]) = (int_64)0
	$10 = *($7)
	$7 = ( *((($5 + [832]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [32])
	$9 = (CASTING uint_64)(uint_32 $7)
	$7 = ($5 + [588])
	
.LOOP $label$266:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$266 }
	if ( ($10 == 0) ){ goto $label$268 }
	CALL $25($7, $10)
	$7 = *(($5 + [592]))
	$10 = *(($5 + [588]))
	goto $label$267 
	
.LABEL $label$268
	$7 = [0]
	$10 = [0]
	
.LABEL $label$267
	*($5 + [308]) = $10
	*($5 + [304]) = $10
	*($5 + [312]) = $7
	*($5 + [824]) = ($5 + [304])
	*($5 + [288]) = ($5 + [832])
	CALL $29(($5 + [288]), ($5 + [824]))
	CALL $27(($5 + [304]), ($5 + [560]))
	$10 = *($5 + [304])
	CALL send_inline($10, (*($5 + [308]) - $10))
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$269 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$269
	$10 = *($5 + [588])
	if ( ($10 == 0) ){ goto $label$270 }
	*(($5 + [592])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$270
	$10 = *($5 + [576])
	if ( ($10 == 0) ){ goto $label$271 }
	*(($5 + [580])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$271
	if ( ((*($5 + [864]) & [1]) == 0) ){ goto $label$258 }
	CALL _ZdlPv(*(($5 + [872])))
	goto $label$258 
	
.LABEL $label$259
	$9 = *($0)
	*((($5 + [560]) + [16])) = $23
	*($5 + [568]) = $6
	*($5 + [560]) = $1
	$7 = CALL $78((($5 + [560]) + [24]), ($5 + [808]))
	*(($12 = (($5 + [832]) + [24]))) = [0]
	*($5 + [840]) = (int_64)8516769789752901632
	*($5 + [832]) = $22
	*($5 + [848]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $9
	*($10 + [8]) = (int_64)3617214756542218240
	*(($5 + [868])) = [0]
	$3 = ($10 + [16])
	*($12) = $3
	*(($5 + [852])) = $3
	*($5 + [848]) = $10
	*($5 + [860 align=4]) = (int_64)0
	$10 = *($7)
	$12 = ( *((($5 + [560]) + [28])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [24])
	$9 = (CASTING uint_64)(uint_32 $12)
	$12 = (($5 + [832]) + [28])
	
.LOOP $label$272:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$272 }
	if ( ($10 == 0) ){ goto $label$274 }
	CALL $25($12, $10)
	$12 = *(($5 + [864]))
	$10 = *(($5 + [860]))
	goto $label$273 
	
.LABEL $label$274
	$12 = [0]
	$10 = [0]
	
.LABEL $label$273
	*($5 + [308]) = $10
	*($5 + [304]) = $10
	*($5 + [312]) = $12
	CALL eosio_assert(((int_32)($12 - $10) > (int_32)[7]), [18022])
	CALL memcpy(*($5 + [308]), ($5 + [560]), [8])
	$10 = (*($5 + [308]) + [8])
	*($5 + [308]) = $10
	CALL eosio_assert(((int_32)(*($5 + [312]) - $10) > (int_32)[7]), [18022])
	CALL memcpy(*($5 + [308]), (($5 + [560]) + [8]), [8])
	$10 = (*($5 + [308]) + [8])
	*($5 + [308]) = $10
	*($5 + [288]) = *(($5 + [576]))
	CALL eosio_assert(((int_32)(*($5 + [312]) - $10) > (int_32)[7]), [18022])
	CALL memcpy(*($5 + [308]), ($5 + [288]), [8])
	*($5 + [308]) = (*($5 + [308]) + [8])
	CALL $26(($5 + [304]), $7)
	CALL $27(($5 + [304]), ($5 + [832]))
	$10 = *($5 + [304])
	CALL send_inline($10, (*($5 + [308]) - $10))
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$275 }
	*($5 + [308]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$275
	$10 = *($5 + [860])
	if ( ($10 == 0) ){ goto $label$276 }
	*(($5 + [864])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$276
	$10 = *($5 + [848])
	if ( ($10 == 0) ){ goto $label$277 }
	*(($5 + [852])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$277
	if ( ((*($5 + [584]) & [1]) == 0) ){ goto $label$258 }
	CALL _ZdlPv(*(($5 + [592])))
	if ( (*($5 + [808]) & [1]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$258
	if ( ((*($5 + [808]) & [1]) == 0) ){ goto $label$256 }
	
.LABEL $label$257
	CALL _ZdlPv(*($5 + [816]))
	
.LABEL $label$256
	$12 = *($5 + [648])
	if ( ($12 == 0) ){ goto $label$278 }
	$3 = ($5 + [652])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$280 }
	
.LOOP $label$281:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$282 }
	CALL _ZdlPv($7)
	
.LABEL $label$282
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$281 }
	$10 = *(($5 + [648]))
	goto $label$279 
	
.LABEL $label$280
	$10 = $12
	
.LABEL $label$279
	*($3) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$278
	$12 = *($5 + [688])
	if ( ($12 == 0) ){ goto $label$283 }
	$3 = ($5 + [692])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$285 }
	
.LOOP $label$286:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$287 }
	CALL _ZdlPv($7)
	
.LABEL $label$287
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$286 }
	$10 = *(($5 + [688]))
	goto $label$284 
	
.LABEL $label$285
	$10 = $12
	
.LABEL $label$284
	*($3) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$283
	$12 = *($5 + [728])
	if ( ($12 == 0) ){ goto $label$288 }
	$3 = ($5 + [732])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$290 }
	
.LOOP $label$291:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$292 }
	CALL _ZdlPv($7)
	
.LABEL $label$292
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$291 }
	$10 = *(($5 + [728]))
	goto $label$289 
	
.LABEL $label$290
	$10 = $12
	
.LABEL $label$289
	*($3) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$288
	$12 = *($5 + [744])
	if ( ($12 == 0) ){ goto $label$293 }
	$7 = *($5 + [748])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$295 }
	
.LOOP $label$296:
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$297 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$297
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$296 }
	$10 = *($5 + [744])
	goto $label$294 
	
.LABEL $label$295
	$10 = $12
	
.LABEL $label$294
	*($5 + [748]) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$293
	$12 = *($5 + [760])
	if ( ($12 == 0) ){ goto $label$298 }
	$7 = *($5 + [764])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$300 }
	
.LOOP $label$301:
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$302 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$302
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$301 }
	$10 = *($5 + [760])
	goto $label$299 
	
.LABEL $label$300
	$10 = $12
	
.LABEL $label$299
	*($5 + [764]) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$298
	$12 = *($5 + [776])
	if ( ($12 == 0) ){ goto $label$303 }
	$7 = *($5 + [780])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$305 }
	
.LOOP $label$306:
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$307 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$307
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$306 }
	$10 = *($5 + [776])
	goto $label$304 
	
.LABEL $label$305
	$10 = $12
	
.LABEL $label$304
	*($5 + [780]) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$303
	$12 = *($5 + [792])
	if ( ($12 == 0) ){ goto $label$308 }
	$7 = *($5 + [796])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$310 }
	
.LOOP $label$311:
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$312 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$312
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$311 }
	$10 = *($5 + [792])
	goto $label$309 
	
.LABEL $label$310
	$10 = $12
	
.LABEL $label$309
	*($5 + [796]) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$308
	$global$0 = ($5 + [896])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18079])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18102])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [18102])
	CALL memcpy(($3 + [16]), ($2 + [8]), [1])
	*($5 + [8]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18022])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18022])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy($2, *($4 + [4]), [8])
	*($3 + [8]) = *($2)
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18102])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [48]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $66($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $81($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $81($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $77($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $78($2, $1)
	$4 = *($1 + [12])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $78(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 ((int_32)($4 & [255]) != (int_32)[0])), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $78($2, $1)
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $78(($2 + [16]), $3)
	CALL void $0((int_32 $6), (int_32 $5), (int_64 $4), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), ($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $67($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18022])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18022])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18022])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18079])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $64(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $65(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $93([8192])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [8192], $5)
	
.LABEL $label$2
	*(($6 + $5)) = [0]
	CALL $82($0, [17658])
	$5 = *($2)
	$6 = ($5 & [1])
	CALL $83($0, ( *($2 + [8]) ? ($2 + [1]) : $6 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $82($0, [8193])
	CALL $82($0, [17664])
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $83($0, ( *($3 + [8]) ? ($3 + [1]) : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $82($0, [8193])
	CALL $82($0, [17673])
	$5 = *($4)
	$2 = ($5 & [1])
	CALL $83($0, ( *($4 + [8]) ? ($4 + [1]) : $2 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $2 ))
	return (unreachable)
	
.LABEL $label$1
	CALL $77($0)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [32]))
	*($2 + [32]) = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$1 = CALL $78(($2 + [16]), ($1 + [40]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$3 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($8 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$7 = CALL $78(($2 + [64]), $1)
	*(($2 + [8])) = *($8)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $6), (int_64 $5), (int_64 $4), (int_64 $2), (int_32 $7), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $21 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL $93([8448])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17718])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($4 + [8447]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)0 == (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$4 = [0]
	$6 = CALL db_find_i64($5, $5, (int_64)5093418677664887680, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $4(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)($3 + [8])), [18028])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9125])
	if ( *([0] + [9208]) ){ goto $label$9 }
	*([0] + [9160]) = (int_64)0
	*([0] + [9152]) = (int_64)0
	*([0] + [9168]) = (int_64)0
	*([0] + [9176]) = (int_64)0
	*([0] + [9184]) = (int_64)0
	*([0] + [9208]) = [1]
	
.LABEL $label$9
	*([0] + [9192]) = (int_64)0
	$6 = ($4 + [16])
	*([0] + [9160]) = *($6)
	*([0] + [9152]) = *($4 + [8])
	*([0] + [9168]) = *($4)
	*([0] + [9184]) = *($6)
	*([0] + [9176]) = *($4 + [8])
	*([0] + [9200]) = [1]
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$10 }
	$7 = ($3 + [36])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $0
	
.LABEL $label$11
	*($7) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return [9152]
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$7 = [0]
	$4 = CALL db_find_i64($5, $5, (int_64)-4994302950881886208, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $9(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)($3 + [8])), [18028])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9081])
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$16 }
	$8 = ($3 + [36])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($3 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $0
	
.LABEL $label$17
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$global$0 = ($3 + [48])
	return $7
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18079])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18102])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $23 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [40])
	$2 = ( *(($3 + [44])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [40])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $25($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $63(($4 + [72]), ($4 + [64]))
	CALL $27(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $85(($4 + [8]))
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [18028])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $35($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [18028])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $85($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18022])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18022])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $58(CALL $57($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18022])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18022])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $96($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9212])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $96($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($3 + [72]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [18102])
	CALL memcpy(($2 + [15]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($4 + [104]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $68(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18349])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $25($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18102])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18102])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18102])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18022])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $26(*($1), ($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $89 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $88 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $90($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $87($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18384])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18368]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18400]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $89($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $87 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $86 ()
{
	return [9216]
}

void .FUNC $85 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $92(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $80($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $93($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $80($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $94(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9212])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $94(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $99($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3 + [80]) = *($3 + [168])
	CALL $40($0, $1, ($3 + [80]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-4098957130734764033) ){ goto $label$11 }
	if ( ((int_64)$2 <= (int_64)-4994301905001081857) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4994301905001081856) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4994301883677933568) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4098957130885758976) ){ goto $label$8 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [8]) = *($3 + [152])
	CALL $41($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)3626371185909596159) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)8422551174711144624) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)3626460632138363280) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)3626371185909596160) ){ goto $label$8 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [3]
	*($3) = *($3 + [160])
	CALL $42($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-4994302126483046400) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4994302021100109824) ){ goto $label$8 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [4]
	*($3 + [64]) = *($3 + [96])
	CALL $43($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4098957130734764032) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626116088789089280) ){ goto $label$8 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [5]
	*($3 + [72]) = *($3 + [88])
	CALL $44($1, $1, ($3 + [72]))
	
.LABEL $label$8
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [32]) = *($3 + [128])
	CALL $45($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [48]) = *($3 + [112])
	CALL $43($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [40]) = *($3 + [120])
	CALL $46($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [108]) = [0]
	*($3 + [104]) = [9]
	*($3 + [56]) = *($3 + [104])
	CALL $47($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [24]) = *($3 + [136])
	CALL $43($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [148]) = [0]
	*($3 + [144]) = [11]
	*($3 + [16]) = *($3 + [144])
	CALL $41($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$7 = CALL $93([17647])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [96]) = ($7 << [1])
	$8 = (($5 + [96]) | [1])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [96]) = ($9 | [1])
	*($5 + [104]) = $8
	*($5 + [100]) = $7
	
.LABEL $label$6
	CALL memcpy($8, [17647], $7)
	
.LABEL $label$5
	*(($8 + $7)) = [0]
	CALL $1(($5 + [112]), $4, ($5 + [96]))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($5 + [104]))
	
.LABEL $label$8
	$7 = *($5 + [112])
	if ( ((int_32)(*($5 + [116]) - $7) != (int_32)[24]) ){ goto $label$10 }
	$8 = *($7)
	$9 = CALL $93([17649])
	if ( ((int_32)$9 != (int_32)( *($7 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$10 }
	if ( (CALL $84($7, [0], [-1], [17649], $9) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	*(($8 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	$7 = CALL $78(($5 + [32]), $4)
	$2 = *($0 + [8])
	*((($5 + [16]) + [8])) = *($8)
	*($5 + [16]) = *($5 + [48])
	CALL $18($0, $1, ($5 + [16]), $7, $2)
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($7 + [8]))
	goto $label$3 
	
.LABEL $label$9
	*(($4 = (($5 + [80]) + [8]))) = *(($3 + [8]))
	*($5 + [80]) = *($3)
	$1 = *($0 + [8])
	$7 = CALL $78(($5 + [64]), (*($5 + [112]) + [12]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL $37($0, $5, $1, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($7 + [8]))
	$3 = *($5 + [112])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $77(($5 + [96]))
	
.LABEL $label$3
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *($5 + [116])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($7 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$14
	$7 = $0
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$13 }
	$0 = *($5 + [112])
	goto $label$11 
	
.LABEL $label$12
	$0 = $3
	
.LABEL $label$11
	*($5 + [116]) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [128])
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$5 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8591])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8608])
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$9 = *($0)
	*($4 + [40]) = $9
	*($4 + [48]) = $9
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$10 }
	$11 = ($3 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = *($3 + [8])
	$8 = *($3 + [4])
	if ( ($8 <= [8]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert([0], [17718])
	goto $label$7 
	
.LABEL $label$8
	if ( $8 ){ goto $label$7 }
	$7 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$7 = (int_64)0
	
.LOOP $label$11:
	$10 = (($11 + $8) + [-1])
	$5 = *($10)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [17763])
	$5 = *($10)
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	
.LABEL $label$6
	$12 = [0]
	$8 = CALL db_find_i64($9, $9, (int_64)-4994302950881886208, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$12 = CALL $9(($4 + [40]), $8)
	CALL eosio_assert(((int_32)*($12 + [52]) == (int_32)($4 + [40])), [18028])
	
.LABEL $label$13
	$13 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($13, [9081])
	CALL eosio_assert(((int_64)*($12 + [16]) == (int_64)$2), [8905])
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$7 = *($0)
	*($4) = $7
	*($4 + [8]) = $7
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$19 }
	$11 = ($3 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = *($3 + [8])
	$8 = *($3 + [4])
	if ( ($8 <= [8]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert([0], [17718])
	goto $label$16 
	
.LABEL $label$17
	if ( $8 ){ goto $label$16 }
	$7 = (int_64)0
	goto $label$15 
	
.LABEL $label$16
	$7 = (int_64)0
	
.LOOP $label$20:
	$10 = (($11 + $8) + [-1])
	$5 = *($10)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [17763])
	$5 = *($10)
	
.LABEL $label$21
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$20 }
	$10 = *(($4 + [28]))
	$11 = *(($4 + [24]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$15 }
	
.LOOP $label$23:
	$8 = ($10 + [-24])
	$5 = *($8)
	if ( ((int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8) == (int_64)$7) ){ goto $label$22 }
	$10 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$23 }
	goto $label$15 
	
.LABEL $label$22
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [18028])
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	$8 = CALL db_find_i64(*($4), *(($4 + [8])), (int_64)5093418764525547520, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $12($4, $8)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [18028])
	
.LABEL $label$14
	$8 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($8, [17681])
	CALL eosio_assert($8, [18158])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [18193])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$4()), [18239])
	*($5 + [16]) = ((int_64)*($5 + [16]) + (int_64)$6)
	$7 = *($5 + [8])
	CALL eosio_assert([1], [18290])
	*($4 + [176]) = (($4 + [80]) + [32])
	*($4 + [172]) = ($4 + [80])
	*($4 + [168]) = ($4 + [80])
	*($4 + [160]) = ($4 + [168])
	*($4 + [148]) = ($5 + [16])
	*($4 + [144]) = $5
	CALL $24(($4 + [144]), ($4 + [160]))
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($4 + [80]), [32])
	$8 = ($4 + [16])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( (uint_64)($7) <= *($8)) ){ goto $label$24 }
	*($8) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$24
	$7 = *($1)
	$6 = *($12 + [24])
	CALL eosio_assert($13, [18158])
	CALL eosio_assert(((int_32)*($12 + [52]) == (int_32)($4 + [40])), [18193])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$4()), [18239])
	$9 = (uint_64)*($12 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$28 }
	*(($8 = ($12 + [24]))) = (int_64)0
	CALL eosio_assert([1], [18290])
	*($4 + [152]) = (($4 + [80]) + [49])
	*($4 + [148]) = ($4 + [80])
	*($4 + [144]) = ($4 + [80])
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($12 + [16])
	*($4 + [168]) = $12
	*($4 + [176]) = $8
	*($4 + [180]) = ($12 + [40])
	*($4 + [184]) = ($12 + [48])
	CALL $10(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($12 + [56]), (int_64)0, ($4 + [80]), [49])
	$8 = (($4 + [40]) + [16])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$27 }
	*($8) = ((int_64)$9 + (int_64)1)
	$10 = *($4 + [24])
	if ( $10 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	*(($8 = ($12 + [24]))) = (int_64))(*($8) - $7)
	CALL eosio_assert([1], [18290])
	*($4 + [152]) = (($4 + [80]) + [49])
	*($4 + [148]) = ($4 + [80])
	*($4 + [144]) = ($4 + [80])
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($12 + [16])
	*($4 + [168]) = $12
	*($4 + [176]) = $8
	*($4 + [180]) = ($12 + [40])
	*($4 + [184]) = ($12 + [48])
	CALL $10(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($12 + [56]), (int_64)0, ($4 + [80]), [49])
	$8 = (($4 + [40]) + [16])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$27 }
	*($8) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$27
	$10 = *($4 + [24])
	if ( ($10 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$11 = ($4 + [28])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$30 }
	
.LOOP $label$31:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$32 }
	CALL _ZdlPv($5)
	
.LABEL $label$32
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$31 }
	$8 = *(($4 + [24]))
	goto $label$29 
	
.LABEL $label$30
	$8 = $10
	
.LABEL $label$29
	*($11) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$10 = *($4 + [64])
	if ( ($10 == 0) ){ goto $label$33 }
	$11 = ($4 + [68])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$36:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$37 }
	CALL _ZdlPv($5)
	
.LABEL $label$37
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$36 }
	$8 = *(($4 + [64]))
	goto $label$34 
	
.LABEL $label$35
	$8 = $10
	
.LABEL $label$34
	*($11) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$33
	$global$0 = ($4 + [192])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	$1 = uint_32($0 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	$1 = *($1 + [4])
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17718])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = (($5 + $1) + [-1])
	$0 = *($7)
	if ( ((($0 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	$0 = *($7)
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	$1 = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)-4994302950881886208, $6)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $9(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)($3 + [8])), [18028])
	
.LABEL $label$8
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [9081])
	CALL eosio_assert($0, [18158])
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)($3 + [8])), [18193])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [18239])
	*($1 + [48]) = $2
	$6 = *($1 + [8])
	CALL eosio_assert([1], [18290])
	*($3 + [120]) = (($3 + [48]) + [49])
	*($3 + [116]) = ($3 + [48])
	*($3 + [112]) = ($3 + [48])
	*($3 + [128]) = ($3 + [112])
	*($3 + [140]) = ($1 + [16])
	*($3 + [136]) = $1
	*($3 + [144]) = ($1 + [24])
	*($3 + [148]) = ($1 + [40])
	*($3 + [152]) = ($1 + [48])
	CALL $10(($3 + [136]), ($3 + [128]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, ($3 + [48]), [49])
	$1 = (($3 + [8]) + [16])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( (uint_64)($6) <= *($1)) ){ goto $label$9 }
	*($1) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$9
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	$5 = ($3 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $7
	
.LABEL $label$11
	*($5) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [160])
}

void .FUNC $33 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [1]
	$5 = CALL db_find_i64($3, $3, (int_64)-2063328927043158016, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $20(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [18028])
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9099])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$4()), [18107])
	*(($0 = CALL _Znwj([24])) + [8]) = ($2 + [8])
	*($0) = $1
	CALL eosio_assert([1], [18022])
	CALL memcpy(($2 + [64]), $0, [8])
	$3 = *($0)
	$5 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-2063328927043158016, $6, $3, ($2 + [64]), [8])
	*($0 + [12]) = $5
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($2 + [56]) = $0
	$3 = *($0)
	*($2 + [64]) = $3
	*($2 + [52]) = $5
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$5 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($2 + [56]) = [0]
	*($4) = $0
	*($7) = ($4 + [24])
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $34(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	$1 = uint_32($0 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	$1 = *($1 + [4])
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17718])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = (($5 + $1) + [-1])
	$0 = *($7)
	if ( ((($0 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	$0 = *($7)
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	$1 = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)5093418677664887680, $6)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $4(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($3 + [8])), [18028])
	
.LABEL $label$8
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [8562])
	CALL eosio_assert($0, [18158])
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($3 + [8])), [18193])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [18239])
	*($1 + [104]) = $2
	$6 = *(($1 + [16]))
	CALL eosio_assert([1], [18290])
	*($3 + [192]) = (($3 + [48]) + [121])
	*($3 + [188]) = ($3 + [48])
	*($3 + [184]) = ($3 + [48])
	*($3 + [200]) = ($3 + [184])
	*($3 + [212]) = ($1 + [8])
	*($3 + [208]) = $1
	*($3 + [216]) = ($1 + [24])
	*($3 + [220]) = ($1 + [32])
	*($3 + [224]) = ($1 + [40])
	*($3 + [228]) = ($1 + [48])
	*($3 + [232]) = ($1 + [56])
	*($3 + [236]) = ($1 + [64])
	*($3 + [240]) = ($1 + [72])
	*($3 + [244]) = ($1 + [80])
	*($3 + [248]) = ($1 + [88])
	*($3 + [252]) = ($1 + [96])
	*($3 + [256]) = ($1 + [104])
	*($3 + [260]) = ($1 + [112])
	*($3 + [264]) = ($1 + [120])
	CALL $5(($3 + [208]), ($3 + [200]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, ($3 + [48]), [121])
	$1 = (($3 + [8]) + [16])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( (uint_64)($6) <= *($1)) ){ goto $label$9 }
	*($1) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$9
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	$5 = ($3 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $7
	
.LABEL $label$11
	*($5) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [272])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [272])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$5 }
	$6 = ($1 + [1])
	$1 = uint_32($0 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($1 + [8])
	$1 = *($1 + [4])
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17718])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LOOP $label$6:
	$8 = (($6 + $1) + [-1])
	$0 = *($8)
	if ( ((($0 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17763])
	$0 = *($8)
	
.LABEL $label$7
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	$1 = [0]
	$0 = CALL db_find_i64($5, $5, (int_64)5093418677664887680, $7)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $4(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($4 + [8])), [18028])
	
.LABEL $label$8
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [8562])
	CALL eosio_assert(((uint_64)(int_64))($3 - $2) > (uint_64)(int_64)86399), [9062])
	CALL eosio_assert($0, [18158])
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)($4 + [8])), [18193])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [18239])
	*($1 + [112]) = $2
	*($1 + [120]) = $3
	$7 = *(($1 + [16]))
	CALL eosio_assert([1], [18290])
	*($4 + [192]) = (($4 + [48]) + [121])
	*($4 + [188]) = ($4 + [48])
	*($4 + [184]) = ($4 + [48])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [24])
	*($4 + [220]) = ($1 + [32])
	*($4 + [224]) = ($1 + [40])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [56])
	*($4 + [236]) = ($1 + [64])
	*($4 + [240]) = ($1 + [72])
	*($4 + [244]) = ($1 + [80])
	*($4 + [248]) = ($1 + [88])
	*($4 + [252]) = ($1 + [96])
	*($4 + [256]) = ($1 + [104])
	*($4 + [260]) = ($1 + [112])
	*($4 + [264]) = ($1 + [120])
	CALL $5(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, ($4 + [48]), [121])
	$1 = (($4 + [8]) + [16])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( (uint_64)($7) <= *($1)) ){ goto $label$9 }
	*($1) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$9
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	$6 = ($4 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($4 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $8
	
.LABEL $label$11
	*($6) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($4 + [272])
}