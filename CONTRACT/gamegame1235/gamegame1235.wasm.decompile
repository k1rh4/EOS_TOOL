(data (i32.const 8192) "0123456789\00")
(data (i32.const 8208) "\1f\00\00\00\1c\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00")
(data (i32.const 8256) "\1f\00\00\00\1d\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00\1e\00\00\00\1f\00\00\00")
(data (i32.const 8304) "0\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8392) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8456) "transfer\00")
(data (i32.const 8465) "\e6\95\b0\e6\8d\ae\e6\a0\bc\e5\bc\8f\e9\94\99\e8\af\af\00")
(data (i32.const 8484) "\e7\94\a8\e6\88\b7\e8\b4\a6\e5\8f\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 8506) "KEY\e5\b7\b2\e8\a2\ab\e4\bd\bf\e7\94\a8\00")
(data (i32.const 8522) "\e9\a2\86\e5\8f\96EOS\e5\a5\96\e5\8a\b1\00")
(data (i32.const 8538) "\e9\a2\86\e5\8f\96MGB\e5\a5\96\e5\8a\b1\00")
(data (i32.const 8554) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8605) "error reading iterator\00")
(data (i32.const 8628) "read\00")
(data (i32.const 8633) "cannot create objects in table of another contract\00")
(data (i32.const 8684) "write\00")
(data (i32.const 8690) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8739) "invalid symbol name\00")
(data (i32.const 8759) "eosio.token\00")
(data (i32.const 8771) "cannot pass end iterator to modify\00")
(data (i32.const 8806) "object passed to modify is not in multi_index\00")
(data (i32.const 8852) "cannot modify objects in table of another contract\00")
(data (i32.const 8903) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8962) "cannot increment end iterator\00")
(data (i32.const 8992) "\01\00\00\00\00\00\00\00\10\'\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\88\13\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\c4\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00-1\01\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\80\96\98\00\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@KL\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\a0%&\00\00\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\d0\12\13\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00h\89\t\00\00\00\00\00\n\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\b4\c4\04\00\00\00\00\00")
(data (i32.const 9232) "\e6\97\a5\e6\8e\92\e8\a1\8c\e5\a5\96\e5\8a\b1\00")
(data (i32.const 9248) "\01\00\00\00\00\00\00\00 N\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\10\'\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\88\13\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00Zb\02\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00-1\01\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\80\96\98\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@KL\00\00\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\a0%&\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\d0\12\13\00\00\00\00\00\n\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00h\89\t\00\00\00\00\00")
(data (i32.const 9488) "\e5\91\a8\e6\8e\92\e8\a1\8c\e5\a5\96\e5\8a\b1\00")
(data (i32.const 9504) "\01\00\00\00\00\00\00\00@\9c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00 N\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\10\'\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\b4\c4\04\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00Zb\02\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00-1\01\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\80\96\98\00\00\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@KL\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\a0%&\00\00\00\00\00\n\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\d0\12\13\00\00\00\00\00")
(data (i32.const 9744) "\e6\9c\88\e6\8e\92\e8\a1\8c\e5\a5\96\e5\8a\b1\00")
(data (i32.const 9760) "\e5\a5\96\e5\8a\b1\e5\b7\b2\e5\8f\91\e6\94\be\e8\bf\87\e4\ba\86\00")
(data (i32.const 9782) "invalid supply\00")
(data (i32.const 9797) "max-supply must be positive\00")
(data (i32.const 9825) "token with symbol already exists\00")
(data (i32.const 9858) "memo has more than 256 bytes\00")
(data (i32.const 9887) "token with symbol does not exist, create token before issue\00")
(data (i32.const 9947) "invalid quantity\00")
(data (i32.const 9964) "must issue positive quantity\00")
(data (i32.const 9993) "symbol precision mismatch\00")
(data (i32.const 10019) "quantity exceeds available supply\00")
(data (i32.const 10053) "attempt to add asset with different symbol\00")
(data (i32.const 10096) "addition underflow\00")
(data (i32.const 10115) "addition overflow\00")
(data (i32.const 10133) "cannot transfer to self\00")
(data (i32.const 10157) "to account does not exist\00")
(data (i32.const 10183) "unable to find key\00")
(data (i32.const 10202) "must transfer positive quantity\00")
(data (i32.const 10234) "no balance object found\00")
(data (i32.const 10258) "overdrawn balance\00")
(data (i32.const 10276) "object passed to erase is not in multi_index\00")
(data (i32.const 10321) "cannot erase objects in table of another contract\00")
(data (i32.const 10371) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10424) "attempt to subtract asset with different symbol\00")
(data (i32.const 10472) "subtraction underflow\00")
(data (i32.const 10494) "subtraction overflow\00")
(data (i32.const 10515) "get\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$1 (result i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$6 (param i32 i32 i32)))
(import "env" "assert_recover_key" (func $fimport$7 (param i32 i32 i32 i32 i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_recipient" (func $fimport$11 (param i64)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$17 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$18 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$21 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_Znwj" (func $76))
(export "_ZdlPv" (func $78))
(export "_Znaj" (func $77))
(export "_ZdaPv" (func $79))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $4 $6 $8 $10 $11 $12 $13)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18928))
(global $global$2 i32 (i32.const 18928))


void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18916])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18724]
	$3 = (((int_32)$1 * (int_32)[12]) + [18724])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $95 (int_32 $0)
{
	return CALL $96([10532], $0)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $97($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8306])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10524]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10528])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10524]) = [1]
	$2 = ($2 << [16])
	*([0] + [10528]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10528])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10528]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10524]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10524]) = [1]
	$3 = ($3 << [16])
	*([0] + [10528]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10528])
	
.LABEL $label$10
	*([0] + [10528]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $90 (int_32 $0)
{
}

int_64 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $89($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8633])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([64])
	CALL $55($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8806])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8852])
	$3 = *(*($3) + [4])
	*($1 + [8]) = *($3)
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	*($1 + [32]) = *($3 + [32])
	*($1 + [40]) = *($3 + [40])
	$5 = *($1)
	CALL eosio_assert([1], [8903])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	*($4 + [92]) = ($1 + [40])
	CALL $58(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8806])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8852])
	*($4 + [72]) = *($1 + [8])
	*($1 + [8]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	$5 = *($1)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8903])
	*($4 + [64]) = ($4 + [48])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [80]) = ($4 + [56])
	$3 = ($1 + [8])
	*($4 + [92]) = $3
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [32])
	*($4 + [108]) = ($1 + [40])
	CALL $54(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *($3)
	if ( (CALL $93(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371487072475632, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [112])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8605])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $53(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $52(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8684])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8684])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8684])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8684])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8684])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8605])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $57(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020371487072475632, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8554])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $42($7, CALL $fimport$10(*($7), *($7 + [8]), (int_64)-3020371487072475632, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8554])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $45 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [128])
	$global$0 = $2
	*((($2 + [88]) + [32])) = [0]
	*($2 + [96]) = $1
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	*($2 + [124]) = [0]
	*($2 + [88]) = *($0)
	*($2 + [80]) = ($2 + [88])
	*($2 + [32]) = (int_64)0
	CALL $46(($2 + [72]), ($2 + [80]), ($2 + [32]))
	*((($2 + [32]) + [32])) = [0]
	*($2 + [40]) = $1
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	*($2 + [32]) = *($0)
	*($2 + [28]) = [1]
	$3 = ($2 + [60])
	$4 = ($2 + [56])
	$5 = ($2 + [40])
	$6 = [1]
	
.LOOP $label$2:
	if ( (*($2 + [76]) == 0) ){ goto $label$1 }
	$1 = (CASTING int_64)(int_32 $6)
	$8 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($8 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$7 }
	$8 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($2 + [32])), [8554])
	goto $label$5 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*($2 + [32]), *($5), (int_64)-5069074825895811056, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $47(($2 + [32]), $6)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($2 + [32])), [8554])
	
.LABEL $label$5
	$1 = *($0)
	*($2 + [16]) = ($2 + [72])
	CALL eosio_assert([1], [8771])
	CALL $48(($2 + [32]), $9, $1, ($2 + [16]))
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0)
	*($2 + [20]) = ($2 + [72])
	*($2 + [16]) = ($2 + [28])
	CALL $49(($2 + [8]), ($2 + [32]), $1, ($2 + [16]))
	
.LABEL $label$3
	*($2 + [28]) = (*($2 + [28]) + [1])
	CALL $50(($2 + [72]))
	$6 = *($2 + [28])
	if ( ((int_32)$6 < (int_32)[11]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = *($2 + [56])
	if ( ($9 == 0) ){ goto $label$9 }
	$7 = ($2 + [60])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	CALL _ZdlPv($8)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($2 + [56]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $9
	
.LABEL $label$10
	*($7) = $9
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$9 = *($2 + [112])
	if ( ($9 == 0) ){ goto $label$14 }
	$7 = ($2 + [116])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($2 + [112]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $9
	
.LABEL $label$15
	*($7) = $9
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$global$0 = ($2 + [128])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8633])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [48]) = $1
	CALL $51(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $52(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8739])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [9858])
	$9 = [0]
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$7 = *($0)
	*($4 + [88]) = $7
	*($4 + [96]) = $6
	$11 = [0]
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $24(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [8554])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9887])
	CALL require_auth(*($11 + [32]))
	$12 = ($2 + [8])
	$13 = *($12)
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [9947])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [9964])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11 + [8])), [9993])
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [10019])
	*($4 + [128]) = $2
	CALL $27(($4 + [88]), $11, (int_64)0, ($4 + [128]))
	$5 = ($11 + [32])
	$7 = *($5)
	*(($9 = (($4 + [72]) + [8]))) = *($12)
	$8 = *($2)
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [72]) = $8
	*($4 + [8]) = *($4 + [72])
	CALL $28($0, $7, ($4 + [8]), $7)
	$8 = *($5)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$14 }
	$6 = *($0)
	$7 = (int_64)6
	
.LOOP $label$15:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$15 }
	*(($9 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $8
	*($4 + [40]) = *($2)
	CALL $81(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $8
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($9)
	$9 = (($4 + [24]) + [40])
	*(($10 = (($4 + [128]) + [40]))) = *($9)
	*($9) = [0]
	*($4 + [176]) = $5
	$5 = ($5 + [16])
	*($4 + [184]) = $5
	*($4 + [180]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $29($6, (int_64)-3617168760277827584, ($4 + [176]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$16
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$17 }
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$14
	$10 = *($4 + [112])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = ($4 + [116])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($4 + [112]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $10
	
.LABEL $label$19
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [8690])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8739])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8628])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [8628])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [8628])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $15(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $98($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $26(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$4 = ($global$0 - [432])
	$global$0 = $4
	$5 = CALL $81(($4 + [240]), $1)
	CALL memcpy(($4 + [174]), $2, [66])
	*(($2 = (($4 + [136]) + [32]))) = *(($3 + [32]))
	*(($6 = (($4 + [136]) + [24]))) = *(($3 + [24]))
	*(($7 = (($4 + [136]) + [16]))) = *(($3 + [16]))
	*(($8 = (($4 + [136]) + [8]))) = *(($3 + [8]))
	*($4 + [136]) = *($3)
	*((($4 + [328]) + [32])) = *($2)
	*((($4 + [328]) + [24])) = *($6)
	*((($4 + [328]) + [16])) = *($7)
	*((($4 + [328]) + [8])) = *($8)
	*($4 + [328]) = *($4 + [136])
	CALL memcpy(($4 + [256]), ($4 + [174]), [66])
	$3 = *($5)
	$2 = ($3 & [1])
	CALL sha256(( *($5 + [8]) ? ($5 + [1]) : $2 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $2 ), ($4 + [368]))
	CALL assert_recover_key(($4 + [368]), ($4 + [256]), [66], ($4 + [328]), [34])
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$1
	CALL require_auth(*($0))
	$5 = [0]
	$9 = CALL $88($1, [64], [0])
	$2 = CALL $88($1, [124], [0])
	$3 = CALL $88($1, [44], [0])
	CALL eosio_assert(((((int_32)$3 != (int_32)[-1]) & ((int_32)$2 != (int_32)[-1])) & ((int_32)$9 != (int_32)[-1])), [8465])
	$6 = CALL $82(($4 + [328]), $1, [0], $3, $1)
	$3 = ($3 + [1])
	$7 = CALL $82(($4 + [368]), $1, $3, ($2 - $3), $1)
	$3 = ($2 + [1])
	$8 = CALL $82(($4 + [120]), $1, $3, ($9 - $3), $1)
	$9 = CALL $82(($4 + [104]), $1, ($9 + [1]), [-1], $1)
	$10 = CALL $91(( *($6 + [8]) ? ($6 + [1]) : (*($4 + [328]) & [1]) ))
	$11 = CALL $91(( *($7 + [8]) ? ($7 + [1]) : (*($4 + [368]) & [1]) ))
	$12 = CALL $91(( *($8 + [8]) ? ($8 + [1]) : (*($4 + [120]) & [1]) ))
	$1 = ( *($9 + [8]) ? ($9 + [1]) : (*($4 + [104]) & [1]) )
	
.LOOP $label$2:
	$3 = ($1 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *($3) ){ goto $label$2 }
	$13 = (CASTING uint_64)(uint_32 ($2 + [-1]))
	$14 = (int_64)0
	$15 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$3:
	$17 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$13) ){ goto $label$4 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$8 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$7
	$1 = ($1 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$3 }
	CALL eosio_assert(CALL $fimport$9($16), [8484])
	CALL eosio_assert(CALL $18($0, $10), [8506])
	*($4 + [424]) = $10
	$1 = [0]
	*(($4 + [288])) = [0]
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)-1
	*($4 + [280]) = (int_64)0
	$14 = *($0)
	*($4 + [256]) = $14
	*($4 + [416]) = ($4 + [424])
	CALL $19(($4 + [408]), ($4 + [256]), $14, ($4 + [416]))
	$2 = *($4 + [280])
	if ( ($2 == 0) ){ goto $label$9 }
	$18 = ($4 + [284])
	$5 = *($18)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($4 + [280]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $2
	
.LABEL $label$10
	*($18) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8690])
	$14 = (int_64)5459781
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$15 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$14 = $15
	$5 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$14 = $15
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$3 = ($1 + [1])
	$1 = $3
	if ( $5 ){ goto $label$18 }
	$5 = [1]
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	
.LABEL $label$14
	CALL eosio_assert($5, [8739])
	*(($4 + [80])) = [0]
	*($4 + [96]) = (int_64)1397703940
	*($4 + [88]) = $11
	*($4 + [72]) = (int_64)0
	$5 = CALL $94([8522])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$30 }
	*($4 + [72]) = ($5 << [1])
	$3 = (($4 + [72]) | [1])
	if ( $5 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$1 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($1)
	*($4 + [72]) = ($1 | [1])
	*($4 + [80]) = $3
	*($4 + [76]) = $5
	
.LABEL $label$29
	CALL memcpy($3, [8522], $5)
	
.LABEL $label$28
	$1 = [0]
	*(($3 + $5)) = [0]
	*((($4 + [24]) + [8])) = *((($4 + [88]) + [8]))
	*($4 + [24]) = *($4 + [88])
	CALL $20($0, $16, ($4 + [24]), ($4 + [72]))
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($4 + [80]))
	
.LABEL $label$31
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8690])
	$14 = (int_64)4343629
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$15 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$14 = $15
	$5 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$14 = $15
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$3 = ($1 + [1])
	$1 = $3
	if ( $5 ){ goto $label$36 }
	$5 = [1]
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$5 = [0]
	
.LABEL $label$32
	CALL eosio_assert($5, [8739])
	*(($4 + [48])) = [0]
	*($4 + [64]) = (int_64)1111969028
	*($4 + [56]) = $12
	*($4 + [40]) = (int_64)0
	$1 = CALL $94([8538])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$39 }
	*($4 + [40]) = ($1 << [1])
	$5 = (($4 + [40]) | [1])
	if ( $1 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$3 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($3)
	*($4 + [40]) = ($3 | [1])
	*($4 + [48]) = $5
	*($4 + [44]) = $1
	
.LABEL $label$38
	CALL memcpy($5, [8538], $1)
	
.LABEL $label$37
	*(($5 + $1)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	CALL $21($0, $16, ($4 + [8]), ($4 + [40]))
	if ( (*($4 + [40]) & [1]) ){ goto $label$41 }
	if ( (*($4 + [104]) & [1]) ){ goto $label$40 }
	goto $label$25 
	
.LABEL $label$41
	CALL _ZdlPv(*($4 + [48]))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$40
	CALL _ZdlPv(*(($9 + [8])))
	$1 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	CALL $80(($4 + [72]))
	
.LABEL $label$26
	CALL $80(($4 + [40]))
	
.LABEL $label$25
	$1 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	if ( (*($4 + [368]) & $1) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($4 + [368]) & $1) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($7 + [8])))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( (*($4 + [328]) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	$global$0 = ($4 + [432])
	return 
	
.LABEL $label$19
	CALL _ZdlPv(*(($6 + [8])))
	$global$0 = ($4 + [432])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [416])
	$global$0 = $2
	*(($3 = $2) + [124]) = $0
	*($3 + [112]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $95($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$2 = CALL memset(($3 + [12]), [0], [66])
	*(($3 + [110])) = [0]
	*(($3 + [102])) = (int_64)0
	*(($3 + [94])) = (int_64)0
	*(($3 + [86])) = (int_64)0
	*($3 + [78 align=2]) = (int_64)0
	*($3 + [132]) = $1
	*($3 + [128]) = $1
	*($3 + [136]) = ($1 + $0)
	CALL $15(($3 + [128]), $3)
	*($3 + [144]) = ($3 + [128])
	*($3 + [156]) = ($3 + [13])
	*($3 + [152]) = $2
	*($3 + [160]) = ($3 + [14])
	*($3 + [164]) = ($3 + [15])
	*($3 + [168]) = ($3 + [16])
	*($3 + [172]) = ($3 + [17])
	*($3 + [176]) = ($3 + [18])
	*($3 + [180]) = ($3 + [19])
	*($3 + [184]) = ($3 + [20])
	*($3 + [188]) = ($3 + [21])
	*($3 + [192]) = ($3 + [22])
	*($3 + [196]) = ($3 + [23])
	*($3 + [200]) = ($3 + [24])
	*($3 + [204]) = ($3 + [25])
	*($3 + [208]) = ($3 + [26])
	*($3 + [212]) = ($3 + [27])
	*($3 + [216]) = ($3 + [28])
	*($3 + [220]) = ($3 + [29])
	*($3 + [224]) = ($3 + [30])
	*($3 + [232]) = ($3 + [32])
	*($3 + [228]) = ($3 + [31])
	*($3 + [236]) = ($3 + [33])
	*($3 + [240]) = ($3 + [34])
	*($3 + [244]) = ($3 + [35])
	*($3 + [248]) = ($3 + [36])
	*($3 + [252]) = ($3 + [37])
	*($3 + [256]) = ($3 + [38])
	*($3 + [260]) = ($3 + [39])
	*($3 + [264]) = ($3 + [40])
	*($3 + [268]) = ($3 + [41])
	*($3 + [272]) = ($3 + [42])
	*($3 + [276]) = ($3 + [43])
	*($3 + [280]) = ($3 + [44])
	*($3 + [284]) = ($3 + [45])
	*($3 + [288]) = ($3 + [46])
	*($3 + [292]) = ($3 + [47])
	*($3 + [296]) = ($3 + [48])
	*($3 + [300]) = ($3 + [49])
	*($3 + [308]) = ($3 + [51])
	*($3 + [304]) = ($3 + [50])
	*($3 + [312]) = ($3 + [52])
	*($3 + [316]) = ($3 + [53])
	*($3 + [320]) = ($3 + [54])
	*($3 + [324]) = ($3 + [55])
	*($3 + [328]) = ($3 + [56])
	*($3 + [332]) = ($3 + [57])
	*($3 + [336]) = ($3 + [58])
	*($3 + [340]) = ($3 + [59])
	*($3 + [344]) = ($3 + [60])
	*($3 + [348]) = ($3 + [61])
	*($3 + [352]) = ($3 + [62])
	*($3 + [356]) = ($3 + [63])
	*($3 + [360]) = ($3 + [64])
	*($3 + [364]) = ($3 + [65])
	*($3 + [368]) = ($3 + [66])
	*($3 + [372]) = ($3 + [67])
	*($3 + [376]) = ($3 + [68])
	*($3 + [384]) = ($3 + [70])
	*($3 + [380]) = ($3 + [69])
	*($3 + [388]) = ($3 + [71])
	*($3 + [392]) = ($3 + [72])
	*($3 + [396]) = ($3 + [73])
	*($3 + [400]) = ($3 + [74])
	*($3 + [404]) = ($3 + [75])
	*($3 + [408]) = ($3 + [76])
	*($3 + [412]) = ($3 + [77])
	CALL $16(($3 + [152]), ($3 + [144]))
	CALL eosio_assert(((uint_32)(*($3 + [136]) - *($3 + [132])) > (uint_32)[33]), [8628])
	CALL memcpy(($3 + [78]), *($3 + [132]), [34])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $98($1)
	
.LABEL $label$4
	*($3 + [156]) = ($3 + [112])
	*($3 + [152]) = ($3 + [124])
	CALL $17(($3 + [152]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$5
	$global$0 = ($3 + [416])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [10133])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$9($2), [10157])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $32(($5 + [72]), $8, [10183])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9947])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [10202])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [9993])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [9858])
	$11 = ($3 + [8])
	$12 = *($11)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $33($0, $1, ($5 + [24]))
	$12 = *($11)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $28($0, $2, ($5 + [8]), $1)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [8690])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8739])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $30(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $98($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $31(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_64 .FUNC $2 (int_64 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [112])
	$global$0 = $1
	$0 = ((int_64)((uint_64)$0 / (uint_64)(int_64)86400) + (int_64)1)
	$2 = ((uint_64)$0 / (uint_64)(int_64)1461)
	$3 = ((int_64)$2 << (int_64)2)
	$4 = ($1 + [64])
	$5 = (int_64)
	if ( ((uint_64)$5($0 - ((int_64)$2 * (int_64)1461))) >= (uint_64)(int_64)365) ){ goto $label$2 }
	$2 = ((int_64)$3 + (int_64)1970)
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_64)$5 > (uint_64)(int_64)729) ){ goto $label$3 }
	$5 = ((int_64)$5 + (int_64)-365)
	$2 = ((int_64)$3 + (int_64)1971)
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_64)$5 > (uint_64)(int_64)1094) ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)-730)
	$2 = ((int_64)$3 + (int_64)1972)
	goto $label$1 
	
.LABEL $label$4
	$5 = ((int_64)$5 + (int_64)-1095)
	$2 = ((int_64)$3 + (int_64)1973)
	$4 = ($1 + [16])
	
.LABEL $label$1
	$6 = [0]
	*((($1 + [64]) + [40])) = *([0] + [8248])
	*((($1 + [64]) + [32])) = *([0] + [8240])
	*((($1 + [64]) + [24])) = *([0] + [8232])
	*((($1 + [64]) + [16])) = *([0] + [8224])
	*($1 + [72]) = *([0] + [8216])
	*($1 + [64]) = *([0] + [8208])
	*((($1 + [16]) + [40])) = *([0] + [8296])
	*((($1 + [16]) + [32])) = *([0] + [8288])
	*((($1 + [16]) + [24])) = *([0] + [8280])
	*((($1 + [16]) + [16])) = *([0] + [8272])
	*($1 + [24]) = *([0] + [8264])
	*($1 + [16]) = *([0] + [8256])
	$0 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$6 }
	$0 = ((int_64)$0 + (int_64)1)
	$6 = ($6 + [1])
	$3 = *($4)
	$4 = ($4 + [4])
	$5 = (int_64)
	if ( ((int_64)$5($5 - $3)) > (int_64)0) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$0 = (int_64)0
	
.LABEL $label$5
	*($1 + [72]) = [0]
	*($1 + [64]) = (int_64)0
	CALL $84(($1 + [64]), [20])
	
.LOOP $label$8:
	$5 = ((int_64)$0 / (int_64)10)
	CALL $86(($1 + [64]), *(((CASTING uint_32)(uint_64 (int_64))($0 - ((int_64)$5 * (int_64)10))) + [8192])))
	$3 = ((int_64)$0 + (int_64)9)
	$0 = $5
	if ( ((uint_64)$3 > (uint_64)(int_64)18) ){ goto $label$8 }
	$7 = (($1 + [64]) | [1])
	$10 = ($6 & [1])
	$6 = *($1 + [64])
	$9 = uint_32($6 >> [1])
	$8 = *($1 + [68])
	$4 = ( $8 ? $9 : $10 )
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = ( *(($1 + [72])) ? $7 : $10 )
	$4 = (($6 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = *($6)
	*($6) = *($4)
	*($4) = $10
	$4 = ($4 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $4) ){ goto $label$10 }
	$6 = *($1 + [64])
	$9 = uint_32($6 >> [1])
	$10 = ($6 & [1])
	$8 = *($1 + [68])
	
.LABEL $label$9
	if ( ((uint_32)( $8 ? $9 : $10 ) > (uint_32)[1]) ){ goto $label$13 }
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$6 = CALL $94([8304])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$16 }
	*($1 + [16]) = ($6 << [1])
	$10 = (($1 + [16]) | [1])
	$4 = $10
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [16]) = ($10 | [1])
	*($1 + [24]) = $4
	*($1 + [20]) = $6
	$10 = (($1 + [16]) | [1])
	
.LABEL $label$15
	CALL memcpy($4, [8304], $6)
	
.LABEL $label$14
	*(($4 + $6)) = [0]
	$6 = *($1 + [16])
	$4 = ($6 & [1])
	CALL $87(($1 + [64]), ( *($1 + [24]) ? $10 : $4 ), ( *($1 + [20]) ? uint_32($6 >> [1]) : $4 ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$13
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	CALL $84($1, [20])
	
.LOOP $label$17:
	$0 = ((int_64)$2 / (int_64)10)
	CALL $86($1, *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$0 * (int_64)10))) + [8192])))
	$5 = ((int_64)$2 + (int_64)9)
	$2 = $0
	if ( ((uint_64)$5 > (uint_64)(int_64)18) ){ goto $label$17 }
	$6 = ($6 & [1])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($4 == 0) ){ goto $label$18 }
	$6 = ( *(($1 + [8])) ? ($1 | [1]) : $6 )
	$4 = (($6 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$18 }
	
.LOOP $label$19:
	$10 = *($6)
	*($6) = *($4)
	*($4) = $10
	$4 = ($4 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $4) ){ goto $label$19 }
	
.LABEL $label$18
	$6 = *($1 + [64])
	$4 = ($6 & [1])
	$6 = CALL $87($1, ( *((($1 + [64]) + [8])) ? $7 : $4 ), ( *($1 + [68]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($1 + [16]) + [8])) = *($4)
	*($1 + [16]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$20
	$0 = CALL $91(( *($1 + [24]) ? (($1 + [16]) | [1]) : (*($1 + [16]) & [1]) ))
	if ( (*($1 + [16]) & [1]) ){ goto $label$22 }
	if ( (*($1 + [64]) & [1]) ){ goto $label$21 }
	goto $label$11 
	
.LABEL $label$22
	CALL _ZdlPv(*(($1 + [24])))
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($1 + [72])))
	$global$0 = ($1 + [112])
	return $0
	
.LABEL $label$12
	CALL $80(($1 + [16]))
	
.LABEL $label$11
	$global$0 = ($1 + [112])
	(unreachable)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8392])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8456]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$1 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$1 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8456]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$1 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$1 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)7
	
.LOOP $label$19:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$19 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [120]) = $0
	if ( ((int_64)$2 <= (int_64)-4420674823215497217) ){ goto $label$25 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4420674823215497216) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$4 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [1]
	*($3 + [56]) = *($3 + [64])
	CALL $5(($3 + [120]), ($3 + [56]))
	goto $label$4 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-5003315098226151792) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)-5003134530255203328) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-4420684188858863984) ){ goto $label$4 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [8]) = *($3 + [112])
	CALL $7(($3 + [120]), ($3 + [8]))
	goto $label$4 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$4 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [48]) = *($3 + [72])
	CALL $9(($3 + [120]), ($3 + [48]))
	goto $label$4 
	
.LABEL $label$23
	*($3 + [92]) = [0]
	*($3 + [88]) = [4]
	*($3 + [32]) = *($3 + [88])
	CALL $7(($3 + [120]), ($3 + [32]))
	goto $label$4 
	
.LABEL $label$22
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [16]) = *($3 + [104])
	CALL $7(($3 + [120]), ($3 + [16]))
	goto $label$4 
	
.LABEL $label$21
	*($3 + [100]) = [0]
	*($3 + [96]) = [6]
	*($3 + [24]) = *($3 + [96])
	CALL $7(($3 + [120]), ($3 + [24]))
	goto $label$4 
	
.LABEL $label$20
	*($3 + [84]) = [0]
	*($3 + [80]) = [7]
	*($3 + [40]) = *($3 + [80])
	CALL $14(($3 + [120]), ($3 + [40]))
	
.LABEL $label$4
	CALL $90([0])
	$global$0 = ($3 + [128])
}

void .FUNC memory ()
{
}

int_64 .FUNC $1 (int_64 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$1 = ($global$0 - [144])
	$global$0 = $1
	$0 = ((int_64)((uint_64)$0 / (uint_64)(int_64)86400) + (int_64)1)
	$2 = ((uint_64)$0 / (uint_64)(int_64)1461)
	$3 = ((int_64)$2 << (int_64)2)
	$4 = ($1 + [96])
	$5 = (int_64)
	if ( ((uint_64)$5($0 - ((int_64)$2 * (int_64)1461))) >= (uint_64)(int_64)365) ){ goto $label$2 }
	$3 = ((int_64)$3 + (int_64)1970)
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_64)$5 > (uint_64)(int_64)729) ){ goto $label$3 }
	$5 = ((int_64)$5 + (int_64)-365)
	$3 = ((int_64)$3 + (int_64)1971)
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_64)$5 > (uint_64)(int_64)1094) ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)-730)
	$3 = ((int_64)$3 + (int_64)1972)
	goto $label$1 
	
.LABEL $label$4
	$5 = ((int_64)$5 + (int_64)-1095)
	$3 = ((int_64)$3 + (int_64)1973)
	$4 = ($1 + [48])
	
.LABEL $label$1
	$6 = [0]
	*((($1 + [96]) + [40])) = *([0] + [8248])
	*((($1 + [96]) + [32])) = *([0] + [8240])
	*((($1 + [96]) + [24])) = *([0] + [8232])
	*((($1 + [96]) + [16])) = *([0] + [8224])
	*($1 + [104]) = *([0] + [8216])
	*($1 + [96]) = *([0] + [8208])
	*((($1 + [48]) + [40])) = *([0] + [8296])
	*((($1 + [48]) + [32])) = *([0] + [8288])
	*((($1 + [48]) + [24])) = *([0] + [8280])
	*((($1 + [48]) + [16])) = *([0] + [8272])
	*($1 + [56]) = *([0] + [8264])
	*($1 + [48]) = *([0] + [8256])
	$2 = (int_64)0
	$0 = (int_64)0
	
.LOOP $label$7:
	$7 = $5
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$6 }
	$0 = ((int_64)$0 + (int_64)1)
	$6 = ($6 + [1])
	$8 = *($4)
	$4 = ($4 + [4])
	$9 = (CASTING int_64)(int_32 $8)
	$5 = (int_64)
	if ( ((int_64)$5($7 - $9)) > (int_64)0) ){ goto $label$7 }
	$2 = ( $9 ? $7 : (int_64)($5 == 0) )
	goto $label$5 
	
.LABEL $label$6
	$0 = (int_64)0
	
.LABEL $label$5
	*($1 + [104]) = [0]
	*($1 + [96]) = (int_64)0
	CALL $84(($1 + [96]), [20])
	
.LOOP $label$8:
	$5 = ((int_64)$0 / (int_64)10)
	CALL $86(($1 + [96]), *(((CASTING uint_32)(uint_64 (int_64))($0 - ((int_64)$5 * (int_64)10))) + [8192])))
	$7 = ((int_64)$0 + (int_64)9)
	$0 = $5
	if ( ((uint_64)$7 > (uint_64)(int_64)18) ){ goto $label$8 }
	$10 = (($1 + [96]) | [1])
	$8 = ($6 & [1])
	$6 = *($1 + [96])
	$12 = uint_32($6 >> [1])
	$11 = *($1 + [100])
	$4 = ( $11 ? $12 : $8 )
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = ( *(($1 + [104])) ? $10 : $8 )
	$4 = (($6 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = *($6)
	*($6) = *($4)
	*($4) = $8
	$4 = ($4 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $4) ){ goto $label$10 }
	$6 = *($1 + [96])
	$12 = uint_32($6 >> [1])
	$8 = ($6 & [1])
	$11 = *($1 + [100])
	
.LABEL $label$9
	if ( ((uint_32)( $11 ? $12 : $8 ) > (uint_32)[1]) ){ goto $label$16 }
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	$6 = CALL $94([8304])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($1 + [48]) = ($6 << [1])
	$8 = (($1 + [48]) | [1])
	$4 = $8
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($1 + [48]) = ($8 | [1])
	*($1 + [56]) = $4
	*($1 + [52]) = $6
	$8 = (($1 + [48]) | [1])
	
.LABEL $label$18
	CALL memcpy($4, [8304], $6)
	
.LABEL $label$17
	*(($4 + $6)) = [0]
	$6 = *($1 + [48])
	$4 = ($6 & [1])
	CALL $87(($1 + [96]), ( *($1 + [56]) ? $8 : $4 ), ( *($1 + [52]) ? uint_32($6 >> [1]) : $4 ))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$16
	*($1 + [56]) = [0]
	*($1 + [48]) = (int_64)0
	CALL $84(($1 + [48]), [20])
	
.LOOP $label$20:
	$0 = ((int_64)$2 / (int_64)10)
	CALL $86(($1 + [48]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$0 * (int_64)10))) + [8192])))
	$5 = ((int_64)$2 + (int_64)9)
	$2 = $0
	if ( ((uint_64)$5 > (uint_64)(int_64)18) ){ goto $label$20 }
	$11 = (($1 + [48]) | [1])
	$8 = ($6 & [1])
	$6 = *($1 + [48])
	$13 = uint_32($6 >> [1])
	$12 = *($1 + [52])
	$4 = ( $12 ? $13 : $8 )
	if ( ($4 == 0) ){ goto $label$21 }
	$6 = ( *(($1 + [56])) ? $11 : $8 )
	$4 = (($6 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$8 = *($6)
	*($6) = *($4)
	*($4) = $8
	$4 = ($4 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $4) ){ goto $label$22 }
	$6 = *($1 + [48])
	$13 = uint_32($6 >> [1])
	$8 = ($6 & [1])
	$12 = *($1 + [52])
	
.LABEL $label$21
	if ( ((uint_32)( $12 ? $13 : $8 ) > (uint_32)[1]) ){ goto $label$23 }
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$6 = CALL $94([8304])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$26 }
	*($1 + [32]) = ($6 << [1])
	$8 = (($1 + [32]) | [1])
	$4 = $8
	if ( $6 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$8 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($1 + [32]) = ($8 | [1])
	*($1 + [40]) = $4
	*($1 + [36]) = $6
	$8 = (($1 + [32]) | [1])
	
.LABEL $label$25
	CALL memcpy($4, [8304], $6)
	
.LABEL $label$24
	*(($4 + $6)) = [0]
	$6 = *($1 + [32])
	$4 = ($6 & [1])
	CALL $87(($1 + [48]), ( *($1 + [40]) ? $8 : $4 ), ( *($1 + [36]) ? uint_32($6 >> [1]) : $4 ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$23
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	CALL $84($1, [20])
	
.LOOP $label$27:
	$0 = ((int_64)$3 / (int_64)10)
	CALL $86($1, *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$0 * (int_64)10))) + [8192])))
	$2 = ((int_64)$3 + (int_64)9)
	$3 = $0
	if ( ((uint_64)$2 > (uint_64)(int_64)18) ){ goto $label$27 }
	$6 = ($6 & [1])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($4 == 0) ){ goto $label$28 }
	$6 = ( *(($1 + [8])) ? ($1 | [1]) : $6 )
	$4 = (($6 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$8 = *($6)
	*($6) = *($4)
	*($4) = $8
	$4 = ($4 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $4) ){ goto $label$29 }
	
.LABEL $label$28
	$6 = *($1 + [96])
	$4 = ($6 & [1])
	$6 = CALL $87($1, ( *((($1 + [96]) + [8])) ? $10 : $4 ), ( *($1 + [100]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($1 + [16]) + [8])) = *($4)
	*($1 + [16]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = *($1 + [48])
	$4 = ($6 & [1])
	$6 = CALL $87(($1 + [16]), ( *((($1 + [48]) + [8])) ? $11 : $4 ), ( *($1 + [52]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($1 + [32]) + [8])) = *($4)
	*($1 + [32]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($1 + [24]))
	
.LABEL $label$30
	if ( ((*($1) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$31
	$0 = CALL $91(( *($1 + [40]) ? (($1 + [32]) | [1]) : (*($1 + [32]) & [1]) ))
	if ( (*($1 + [32]) & [1]) ){ goto $label$33 }
	$6 = [1]
	if ( (*($1 + [48]) & [1]) ){ goto $label$32 }
	goto $label$13 
	
.LABEL $label$33
	CALL _ZdlPv(*(($1 + [40])))
	$6 = [1]
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($1 + [56])))
	if ( ((*($1 + [96]) & $6) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$15
	CALL $80(($1 + [48]))
	
.LABEL $label$14
	CALL $80(($1 + [32]))
	
.LABEL $label$13
	if ( (*($1 + [96]) & $6) ){ goto $label$11 }
	
.LABEL $label$12
	$global$0 = ($1 + [144])
	return $0
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [104])))
	$global$0 = ($1 + [144])
	(unreachable)
	(unreachable)
	return $0
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [8690])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8739])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8628])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [8628])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [8628])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $98($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $75($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $84($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $84($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $80($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8628])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8628])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [464])
	$global$0 = $2
	$3 = CALL $81(($2 + [208]), $1)
	CALL memcpy(($2 + [142]), ($1 + [12]), [66])
	*(($4 = (($2 + [104]) + [32]))) = *(($1 + [110]))
	*(($5 = (($2 + [104]) + [24]))) = *(($1 + [102]))
	*(($6 = (($2 + [104]) + [16]))) = *(($1 + [94]))
	*(($7 = (($2 + [104]) + [8]))) = *(($1 + [86]))
	*($2 + [104]) = *($1 + [78 align=1])
	*((($2 + [296]) + [32])) = *($4)
	*((($2 + [296]) + [24])) = *($5)
	*((($2 + [296]) + [16])) = *($6)
	*((($2 + [296]) + [8])) = *($7)
	*($2 + [296]) = *($2 + [104])
	CALL memcpy(($2 + [224]), ($2 + [142]), [66])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$4 = CALL $81(($2 + [448]), $3)
	CALL memcpy(($2 + [376]), ($2 + [224]), [66])
	*(($5 = (($2 + [336]) + [32]))) = *((($2 + [296]) + [32]))
	*(($6 = (($2 + [336]) + [24]))) = *((($2 + [296]) + [24]))
	*(($7 = (($2 + [336]) + [16]))) = *((($2 + [296]) + [16]))
	*(($8 = (($2 + [336]) + [8]))) = *((($2 + [296]) + [8]))
	*($2 + [336]) = *($2 + [296])
	CALL memcpy(($2 + [38]), ($2 + [376]), [66])
	*(($2 + [32])) = *($5)
	*(($2 + [24])) = *($6)
	*(($2 + [16])) = *($7)
	*(($2 + [8])) = *($8)
	*($2) = *($2 + [336])
	CALL void $0((int_32 $4), (int_32 ($2 + [38])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [448]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [464])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [464])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [288])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = CALL $81(($4 + [112]), $1)
	CALL memcpy(($4 + [46]), $2, [66])
	*(($2 = (($4 + [8]) + [32]))) = *(($3 + [32]))
	*(($6 = (($4 + [8]) + [24]))) = *(($3 + [24]))
	*(($7 = (($4 + [8]) + [16]))) = *(($3 + [16]))
	*(($8 = (($4 + [8]) + [8]))) = *(($3 + [8]))
	*($4 + [8]) = *($3)
	*((($4 + [200]) + [32])) = *($2)
	*((($4 + [200]) + [24])) = *($6)
	*((($4 + [200]) + [16])) = *($7)
	*((($4 + [200]) + [8])) = *($8)
	*($4 + [200]) = *($4 + [8])
	CALL memcpy(($4 + [128]), ($4 + [46]), [66])
	$3 = *($5)
	$2 = ($3 & [1])
	CALL sha256(( *($5 + [8]) ? ($5 + [1]) : $2 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $2 ), ($4 + [240]))
	CALL assert_recover_key(($4 + [240]), ($4 + [128]), [66], ($4 + [200]), [34])
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$1
	if ( (*($1) & [1]) ){ goto $label$3 }
	$5 = ($1 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($1 + [8])
	
.LABEL $label$2
	$9 = CALL $91($5)
	CALL eosio_assert(CALL $18($0, $9), [8506])
	*($4 + [200]) = $9
	*(($4 + [160])) = [0]
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	$9 = *($0)
	*($4 + [128]) = $9
	*($4 + [280]) = ($4 + [200])
	CALL $19(($4 + [240]), ($4 + [128]), $9, ($4 + [280]))
	$1 = *($4 + [152])
	if ( ($1 == 0) ){ goto $label$4 }
	$2 = ($4 + [156])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($4 + [152]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $1
	
.LABEL $label$5
	*($2) = $1
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$9 = CALL current_time()
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$10 = ((uint_64)$9 / (uint_64)(int_64)1000000)
	$5 = CALL $94([9232])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$12 }
	$9 = ((int_64)$10 & (int_64)4294967295)
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$15 }
	*($4 + [128]) = ($5 << [1])
	$3 = (($4 + [128]) | [1])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($1)
	*($4 + [128]) = ($1 | [1])
	*($4 + [136]) = $3
	*($4 + [132]) = $5
	
.LABEL $label$14
	CALL memcpy($3, [9232], $5)
	
.LABEL $label$13
	*(($3 + $5)) = [0]
	$11 = ((int_64)$9 + (int_64)-86400)
	$12 = CALL $1($11)
	if ( ((int_64)$12 == (int_64)CALL $1($9)) ){ goto $label$16 }
	CALL $23($0, $12, [8992], ($4 + [128]))
	
.LABEL $label$16
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($4 + [136]))
	
.LABEL $label$17
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$5 = CALL $94([9488])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$11 }
	$1 = (CASTING uint_32)(uint_64 $10)
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($4 + [128]) = ($5 << [1])
	$3 = (($4 + [128]) | [1])
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$2 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($4 + [128]) = ($2 | [1])
	*($4 + [136]) = $3
	*($4 + [132]) = $5
	
.LABEL $label$19
	CALL memcpy($3, [9488], $5)
	
.LABEL $label$18
	*(($3 + $5)) = [0]
	$10 = ((uint_64)((int_64)((uint_64)$11 / (uint_64)(int_64)86400) + (int_64)3) / (uint_64)(int_64)7)
	if ( ((int_64)$10 == (int_64)(CASTING uint_64)(uint_32 ((uint_32)((((uint_32)$1 / (uint_32)[86400]) + [3]) & [65535]) / (uint_32)[7]))) ){ goto $label$21 }
	CALL $23($0, $10, [9248], ($4 + [128]))
	
.LABEL $label$21
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($4 + [136]))
	
.LABEL $label$22
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$5 = CALL $94([9744])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$25 }
	*($4 + [128]) = ($5 << [1])
	$3 = (($4 + [128]) | [1])
	if ( $5 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$1 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($1)
	*($4 + [128]) = ($1 | [1])
	*($4 + [136]) = $3
	*($4 + [132]) = $5
	
.LABEL $label$24
	CALL memcpy($3, [9744], $5)
	
.LABEL $label$23
	*(($3 + $5)) = [0]
	$10 = CALL $2($11)
	if ( ((int_64)$10 != (int_64)CALL $2($9)) ){ goto $label$27 }
	if ( (*($4 + [128]) & [1]) ){ goto $label$26 }
	goto $label$9 
	
.LABEL $label$27
	CALL $23($0, $10, [9504], ($4 + [128]))
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$26
	CALL _ZdlPv(*($4 + [136]))
	$global$0 = ($4 + [288])
	return (unreachable)
	
.LABEL $label$12
	CALL $80(($4 + [128]))
	
.LABEL $label$11
	CALL $80(($4 + [128]))
	
.LABEL $label$10
	CALL $80(($4 + [128]))
	
.LABEL $label$9
	$global$0 = ($4 + [288])
	(unreachable)
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$4 = ($global$0 - [432])
	$global$0 = $4
	$5 = CALL $81(($4 + [240]), $1)
	CALL memcpy(($4 + [174]), $2, [66])
	*(($2 = (($4 + [136]) + [32]))) = *(($3 + [32]))
	*(($6 = (($4 + [136]) + [24]))) = *(($3 + [24]))
	*(($7 = (($4 + [136]) + [16]))) = *(($3 + [16]))
	*(($8 = (($4 + [136]) + [8]))) = *(($3 + [8]))
	*($4 + [136]) = *($3)
	*((($4 + [328]) + [32])) = *($2)
	*((($4 + [328]) + [24])) = *($6)
	*((($4 + [328]) + [16])) = *($7)
	*((($4 + [328]) + [8])) = *($8)
	*($4 + [328]) = *($4 + [136])
	CALL memcpy(($4 + [256]), ($4 + [174]), [66])
	$3 = *($5)
	$2 = ($3 & [1])
	CALL sha256(( *($5 + [8]) ? ($5 + [1]) : $2 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $2 ), ($4 + [368]))
	CALL assert_recover_key(($4 + [368]), ($4 + [256]), [66], ($4 + [328]), [34])
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$1
	$5 = [0]
	$9 = CALL $88($1, [64], [0])
	$2 = CALL $88($1, [124], [0])
	$3 = CALL $88($1, [44], [0])
	CALL eosio_assert(((((int_32)$3 != (int_32)[-1]) & ((int_32)$2 != (int_32)[-1])) & ((int_32)$9 != (int_32)[-1])), [8465])
	$6 = CALL $82(($4 + [328]), $1, [0], $3, $1)
	$3 = ($3 + [1])
	$7 = CALL $82(($4 + [368]), $1, $3, ($2 - $3), $1)
	$3 = ($2 + [1])
	$8 = CALL $82(($4 + [120]), $1, $3, ($9 - $3), $1)
	$9 = CALL $82(($4 + [104]), $1, ($9 + [1]), [-1], $1)
	$10 = CALL $91(( *($6 + [8]) ? ($6 + [1]) : (*($4 + [328]) & [1]) ))
	$11 = CALL $91(( *($7 + [8]) ? ($7 + [1]) : (*($4 + [368]) & [1]) ))
	$12 = CALL $91(( *($8 + [8]) ? ($8 + [1]) : (*($4 + [120]) & [1]) ))
	$1 = ( *($9 + [8]) ? ($9 + [1]) : (*($4 + [104]) & [1]) )
	
.LOOP $label$2:
	$3 = ($1 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *($3) ){ goto $label$2 }
	$13 = (CASTING uint_64)(uint_32 ($2 + [-1]))
	$14 = (int_64)0
	$15 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$3:
	$17 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$13) ){ goto $label$4 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$8 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$7
	$1 = ($1 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$3 }
	CALL eosio_assert(CALL $fimport$9($16), [8484])
	CALL require_auth($16)
	CALL eosio_assert(CALL $18($0, $10), [8506])
	*($4 + [424]) = $10
	$1 = [0]
	*(($4 + [288])) = [0]
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)-1
	*($4 + [280]) = (int_64)0
	$14 = *($0)
	*($4 + [256]) = $14
	*($4 + [416]) = ($4 + [424])
	CALL $19(($4 + [408]), ($4 + [256]), $14, ($4 + [416]))
	$2 = *($4 + [280])
	if ( ($2 == 0) ){ goto $label$9 }
	$18 = ($4 + [284])
	$5 = *($18)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($4 + [280]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $2
	
.LABEL $label$10
	*($18) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8690])
	$14 = (int_64)5459781
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$15 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$14 = $15
	$5 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$14 = $15
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$3 = ($1 + [1])
	$1 = $3
	if ( $5 ){ goto $label$18 }
	$5 = [1]
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	
.LABEL $label$14
	CALL eosio_assert($5, [8739])
	*(($4 + [80])) = [0]
	*($4 + [96]) = (int_64)1397703940
	*($4 + [88]) = $11
	*($4 + [72]) = (int_64)0
	$5 = CALL $94([8522])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$30 }
	*($4 + [72]) = ($5 << [1])
	$3 = (($4 + [72]) | [1])
	if ( $5 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$1 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($1)
	*($4 + [72]) = ($1 | [1])
	*($4 + [80]) = $3
	*($4 + [76]) = $5
	
.LABEL $label$29
	CALL memcpy($3, [8522], $5)
	
.LABEL $label$28
	$1 = [0]
	*(($3 + $5)) = [0]
	*((($4 + [24]) + [8])) = *((($4 + [88]) + [8]))
	*($4 + [24]) = *($4 + [88])
	CALL $20($0, $16, ($4 + [24]), ($4 + [72]))
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($4 + [80]))
	
.LABEL $label$31
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8690])
	$14 = (int_64)4343629
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$15 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$14 = $15
	$5 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$14 = $15
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$3 = ($1 + [1])
	$1 = $3
	if ( $5 ){ goto $label$36 }
	$5 = [1]
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$5 = [0]
	
.LABEL $label$32
	CALL eosio_assert($5, [8739])
	*(($4 + [48])) = [0]
	*($4 + [64]) = (int_64)1111969028
	*($4 + [56]) = $12
	*($4 + [40]) = (int_64)0
	$1 = CALL $94([8538])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$39 }
	*($4 + [40]) = ($1 << [1])
	$5 = (($4 + [40]) | [1])
	if ( $1 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$3 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($3)
	*($4 + [40]) = ($3 | [1])
	*($4 + [48]) = $5
	*($4 + [44]) = $1
	
.LABEL $label$38
	CALL memcpy($5, [8538], $1)
	
.LABEL $label$37
	*(($5 + $1)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	CALL $21($0, $16, ($4 + [8]), ($4 + [40]))
	if ( (*($4 + [40]) & [1]) ){ goto $label$41 }
	if ( (*($4 + [104]) & [1]) ){ goto $label$40 }
	goto $label$25 
	
.LABEL $label$41
	CALL _ZdlPv(*($4 + [48]))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$40
	CALL _ZdlPv(*(($9 + [8])))
	$1 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	CALL $80(($4 + [72]))
	
.LABEL $label$26
	CALL $80(($4 + [40]))
	
.LABEL $label$25
	$1 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	if ( (*($4 + [368]) & $1) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($4 + [368]) & $1) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($7 + [8])))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( (*($4 + [328]) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	$global$0 = ($4 + [432])
	return 
	
.LABEL $label$19
	CALL _ZdlPv(*(($6 + [8])))
	$global$0 = ($4 + [432])
	(unreachable)
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [320])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = CALL $81(($4 + [128]), $1)
	CALL memcpy(($4 + [62]), $2, [66])
	*(($2 = (($4 + [24]) + [32]))) = *(($3 + [32]))
	*(($6 = (($4 + [24]) + [24]))) = *(($3 + [24]))
	*(($7 = (($4 + [24]) + [16]))) = *(($3 + [16]))
	*(($8 = (($4 + [24]) + [8]))) = *(($3 + [8]))
	*($4 + [24]) = *($3)
	*((($4 + [216]) + [32])) = *($2)
	*((($4 + [216]) + [24])) = *($6)
	*((($4 + [216]) + [16])) = *($7)
	*((($4 + [216]) + [8])) = *($8)
	*($4 + [216]) = *($4 + [24])
	CALL memcpy(($4 + [144]), ($4 + [62]), [66])
	$3 = *($5)
	$2 = ($3 & [1])
	CALL sha256(( *($5 + [8]) ? ($5 + [1]) : $2 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $2 ), ($4 + [256]))
	CALL assert_recover_key(($4 + [256]), ($4 + [144]), [66], ($4 + [216]), [34])
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$1
	$5 = [0]
	$2 = CALL $88($1, [64], [0])
	$3 = CALL $88($1, [44], [0])
	CALL eosio_assert((((int_32)$3 != (int_32)[-1]) & ((int_32)$2 != (int_32)[-1])), [8465])
	$6 = CALL $82(($4 + [216]), $1, [0], $3, $1)
	$3 = ($3 + [1])
	$7 = CALL $82(($4 + [256]), $1, $3, ($2 - $3), $1)
	$8 = CALL $82(($4 + [8]), $1, ($2 + [1]), [-1], $1)
	$9 = CALL $91(( *($6 + [8]) ? ($6 + [1]) : (*($4 + [216]) & [1]) ))
	$10 = CALL $91(( *($7 + [8]) ? ($7 + [1]) : (*($4 + [256]) & [1]) ))
	$1 = ( *($8 + [8]) ? ($8 + [1]) : (*($4 + [8]) & [1]) )
	
.LOOP $label$2:
	$3 = ($1 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *($3) ){ goto $label$2 }
	$11 = (CASTING uint_64)(uint_32 ($2 + [-1]))
	$12 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$3:
	$15 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$4 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$8 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$7
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$3 }
	CALL eosio_assert(CALL $fimport$9($14), [8484])
	CALL eosio_assert(CALL $18($0, $9), [8506])
	*($4 + [312]) = $9
	*(($4 + [176])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)-1
	*($4 + [168]) = (int_64)0
	$12 = *($0)
	*($4 + [144]) = $12
	*($4 + [304]) = ($4 + [312])
	CALL $19(($4 + [296]), ($4 + [144]), $12, ($4 + [304]))
	$3 = *($4 + [168])
	if ( ($3 == 0) ){ goto $label$9 }
	$2 = ($4 + [172])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$12 }
	$1 = *(($4 + [168]))
	goto $label$10 
	
.LABEL $label$11
	$1 = $3
	
.LABEL $label$10
	*($2) = $3
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$12 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$13 = ((int_64)$12 & (int_64)4294967295)
	CALL $22($0, CALL $1($13), $14, $10)
	CALL $22($0, (CASTING uint_64)(uint_32 ((uint_32)((((uint_32)(CASTING uint_32)(uint_64 $12) / (uint_32)[86400]) + [3]) & [65535]) / (uint_32)[7])), $14, $10)
	CALL $22($0, CALL $2($13), $14, $10)
	if ( (*($4 + [8]) & [1]) ){ goto $label$18 }
	if ( (*($4 + [256]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($7 + [8])))
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( (*($4 + [216]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	$global$0 = ($4 + [320])
	return 
	
.LABEL $label$14
	CALL _ZdlPv(*(($6 + [8])))
	$global$0 = ($4 + [320])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8739])
	$7 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $5
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9782])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [9797])
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$4 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $24(($3 + [16]), $4) + [40]) == (int_32)($3 + [16])), [8554])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [9825])
	$1 = *($0)
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $25($3, ($3 + [16]), $1, ($3 + [8]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$13 }
	$2 = ($3 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($3 + [40]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $8
	
.LABEL $label$14
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$global$0 = ($3 + [64])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10515])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $35($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8628])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	$0 = CALL db_find_i64($4, (int_64)0, (int_64)-9025909311452217344, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $34(($2 + [8]), $0) + [16]) == (int_32)($2 + [8])), [8554])
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [32]))
	goto $label$1 
	
.LABEL $label$4
	$3 = [1]
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return $3
	
.LABEL $label$2
	$0 = $5
	
.LABEL $label$1
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($2 + [48])
	return [0]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8633])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	*($5) = *(*($3))
	*($5 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [8684])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [8684])
	CALL memcpy((($4 + [16]) | [8]), ($5 + [8]), [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-9025909311452217344, $2, $6, ($4 + [16]), [16])
	*($5 + [20]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $38(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $59 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = (int_64)1
	$0 = CALL db_find_i64($4, (int_64)1, (int_64)-9025909311452217344, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $34(($2 + [8]), $0) + [16]) == (int_32)($2 + [8])), [8554])
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [32]))
	goto $label$1 
	
.LABEL $label$4
	$3 = [1]
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return $3
	
.LABEL $label$2
	$0 = $5
	
.LABEL $label$1
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($2 + [48])
	return [0]
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [8962])
	$2 = *($0 + [4])
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3020371487072475632, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [8554])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $42($6, CALL $fimport$10(*($6), *($6 + [8]), (int_64)-3020371487072475632, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [8554])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [56])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	$3 = *($0)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [56]) = ($2 + [48])
	*($2 + [52]) = $2
	*($2 + [48]) = $2
	*($2 + [64]) = ($2 + [48])
	$4 = ($1 + [8])
	*($2 + [76]) = $4
	*($2 + [72]) = $1
	*($2 + [80]) = ($1 + [16])
	*($2 + [84]) = ($1 + [24])
	*($2 + [88]) = ($1 + [32])
	*($2 + [92]) = ($1 + [40])
	CALL $54(($2 + [72]), ($2 + [64]))
	$5 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($3 + [8]), (int_64)-3020371487072475632, *(*($0 + [8])), $5, $2, [48])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [72]) = *($4)
	*($1 + [56]) = CALL db_idx64_store($5, (int_64)-3020371487072475632, $6, $7, ($2 + [72]))
	$global$0 = ($2 + [96])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $89($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8605])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8628])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8628])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $89($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $89($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $29 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $35($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $36(($4 + [72]), ($4 + [64]))
	CALL $37(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $89(($4 + [8]))
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $66(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [8554])
	*($4 + [8]) = $2
	CALL eosio_assert([1], [8771])
	CALL $67(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $68(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [48]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	$1 = *(*($1 + [4]) + [4])
	*($0 + [8]) = *($1)
	*($0 + [16]) = *($1 + [16])
	*($0 + [24]) = *($1 + [24])
	*($0 + [32]) = *($1 + [32])
	*($0 + [40]) = *($1 + [40])
	$1 = *($2)
	*($3 + [56]) = ($3 + [48])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	*($3 + [64]) = ($3 + [48])
	*($3 + [76]) = ($0 + [8])
	*($3 + [72]) = $0
	*($3 + [80]) = ($0 + [16])
	*($3 + [84]) = ($0 + [24])
	*($3 + [88]) = ($0 + [32])
	*($3 + [92]) = ($0 + [40])
	CALL $58(($3 + [72]), ($3 + [64]))
	$4 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)-5069074825895811056, *(*($2 + [8])), $4, $3, [48])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$2:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8456]
	$8 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$8 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$3 }
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $5
	*($4 + [24]) = *($2)
	$9 = CALL $81((($4 + [8]) + [32]), $3)
	*($4 + [64]) = $8
	*($4 + [56]) = $5
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($4 + [56]) + [24])) = $2
	*(($4 + [76])) = $2
	*($4 + [72]) = $0
	*($4 + [84 align=4]) = (int_64)0
	$0 = *($9)
	$9 = ( *((($4 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [84])
	
.LOOP $label$9:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$9 }
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $35($9, $0)
	$9 = *(($4 + [88]))
	$0 = *(($4 + [84]))
	goto $label$10 
	
.LABEL $label$11
	$9 = [0]
	$0 = [0]
	
.LABEL $label$10
	*($4 + [116]) = $0
	*($4 + [112]) = $0
	*($4 + [120]) = $9
	*($4 + [96]) = ($4 + [112])
	*($4 + [104]) = ($4 + [8])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL $37(($4 + [112]), ($4 + [56]))
	$0 = *($4 + [112])
	CALL send_inline($0, (*($4 + [116]) - $0))
	$0 = *($4 + [112])
	if ( ($0 == 0) ){ goto $label$12 }
	*($4 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($4 + [84])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($4 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$2:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8759]
	$8 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8456]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$9 = ($9 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$9 }
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $5
	*($4 + [24]) = *($2)
	$9 = CALL $81((($4 + [8]) + [32]), $3)
	*($4 + [64]) = $11
	*($4 + [56]) = $8
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($4 + [56]) + [24])) = $2
	*(($4 + [76])) = $2
	*($4 + [72]) = $0
	*($4 + [84 align=4]) = (int_64)0
	$0 = *($9)
	$9 = ( *((($4 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [84])
	
.LOOP $label$15:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$17 }
	CALL $35($9, $0)
	$9 = *(($4 + [88]))
	$0 = *(($4 + [84]))
	goto $label$16 
	
.LABEL $label$17
	$9 = [0]
	$0 = [0]
	
.LABEL $label$16
	*($4 + [100]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = $9
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $36(($4 + [120]), ($4 + [112]))
	CALL $37(($4 + [96]), ($4 + [56]))
	$0 = *($4 + [96])
	CALL send_inline($0, (*($4 + [100]) - $0))
	$0 = *($4 + [96])
	if ( ($0 == 0) ){ goto $label$18 }
	*($4 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$18
	$0 = *($4 + [84])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($4 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$19
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL eosio_assert(CALL $59($0, $1), [9760])
	*((($4 + [104]) + [32])) = [0]
	*($4 + [112]) = $1
	*($4 + [120]) = (int_64)-1
	$5 = *($0)
	*($4 + [104]) = $5
	*($4 + [128]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $1, (int_64)-5069074825895811056, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $47(($4 + [104]), $6)
	$5 = *($7)
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$1 }
	
.LOOP $label$2:
	$6 = ($2 + ((int_32)(CASTING uint_32)(uint_64 $5) * (int_32)[24]))
	*(($8 = (($4 + [160]) + [16]))) = *(($6 + [16]))
	$9 = *(($6 + [8]))
	*((($4 + [160]) + [8])) = $9
	*($4 + [160]) = *($6)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8690])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $10
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$7 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	
.LABEL $label$3
	CALL eosio_assert($11, [8739])
	$5 = *($7 + [8])
	*(($6 = (($4 + [88]) + [8]))) = (int_64)1397703940
	*($4 + [88]) = $9
	$11 = CALL $81(($4 + [72]), $3)
	*((($4 + [24]) + [8])) = *($6)
	*($4 + [24]) = *($4 + [88])
	CALL $20($0, $5, ($4 + [24]), $11)
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*((($4 + [72]) + [8])))
	
.LABEL $label$8
	$9 = *($8)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8690])
	$5 = (int_64)4343629
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $10
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$5 = $10
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$13 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$11 = [0]
	
.LABEL $label$9
	CALL eosio_assert($11, [8739])
	$5 = *(($7 + [8]))
	*(($6 = (($4 + [56]) + [8]))) = (int_64)1111969028
	*($4 + [56]) = $9
	$11 = CALL $81(($4 + [40]), $3)
	*((($4 + [8]) + [8])) = *($6)
	*($4 + [8]) = *($4 + [56])
	CALL $21($0, $5, ($4 + [8]), $11)
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*((($4 + [40]) + [8])))
	
.LABEL $label$14
	$5 = *($0)
	*($4 + [200]) = ($4 + [160])
	CALL eosio_assert([1], [8771])
	CALL $60(($4 + [104]), $7, $5, ($4 + [200]))
	CALL eosio_assert([1], [8962])
	$6 = CALL db_next_i64(*($7 + [52]), ($4 + [160]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL $47(($4 + [104]), $6)
	$5 = *($7)
	if ( (uint_64)($5 <= (int_64)10) ){ goto $label$2 }
	
.LABEL $label$1
	*($4 + [200]) = $1
	*((($4 + [160]) + [32])) = [0]
	*($4 + [168]) = (int_64)1
	*($4 + [176]) = (int_64)-1
	*($4 + [184]) = (int_64)0
	$5 = *($0)
	*($4 + [160]) = $5
	*($4 + [152]) = ($4 + [200])
	CALL $61(($4 + [144]), ($4 + [160]), $5, ($4 + [152]))
	$12 = *($4 + [184])
	if ( ($12 == 0) ){ goto $label$15 }
	$7 = ($4 + [188])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$19 }
	CALL _ZdlPv($11)
	
.LABEL $label$19
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($4 + [184]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $12
	
.LABEL $label$16
	*($7) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$12 = *($4 + [128])
	if ( ($12 == 0) ){ goto $label$20 }
	$7 = ($4 + [132])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$24 }
	CALL _ZdlPv($11)
	
.LABEL $label$24
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($4 + [128]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $12
	
.LABEL $label$21
	*($7) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$global$0 = ($4 + [208])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [80]) = $3
	*($4 + [88]) = $2
	$5 = [0]
	*(($4 + [72])) = [0]
	*($4 + [48]) = $1
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	$6 = *($0)
	*($4 + [40]) = $6
	$7 = CALL db_find_i64($6, $1, (int_64)-3020371487072475632, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $42(($4 + [40]), $7)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($4 + [40])), [8554])
	$3 = *($4 + [80])
	
.LABEL $label$1
	*($4 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000) + (int_64)((int_64))((int_64)99999 - $3) * (int_64)10000000000000))
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_64)$3 <= (uint_64)*($5 + [16])) ){ goto $label$2 }
	$3 = *($0)
	*($4 + [20]) = ($4 + [80])
	*($4 + [16]) = ($4 + [32])
	CALL eosio_assert([1], [8771])
	CALL $43(($4 + [40]), $5, $3, ($4 + [16]))
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0)
	*($4 + [20]) = ($4 + [32])
	*($4 + [16]) = ($4 + [88])
	*($4 + [24]) = ($4 + [80])
	CALL $44(($4 + [8]), ($4 + [40]), $3, ($4 + [16]))
	
.LABEL $label$3
	CALL $45($0, $1)
	
.LABEL $label$2
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = ($4 + [68])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($4 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $7
	
.LABEL $label$6
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [96])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8633])
	$5 = CALL _Znwj([56])
	CALL $62($5)
	*($5 + [40]) = $1
	$6 = *($3)
	*($5 + [8]) = *($6 + [8])
	*(($5 + [24])) = *($6 + [8])
	*($5 + [16]) = *($6)
	*($5 + [32]) = *(*($3 + [4]))
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [32])
	CALL $63(($4 + [64]), ($4 + [56]))
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, $2, $7), $4, [40]
	*($5 + [44]) = $6)
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$1
	*($4 + [64]) = $5
	$7 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $7)
	*($4 + [40]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $64(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8605])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $62($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $65(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8806])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8852])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [10053])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10096])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [10115])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8903])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $63(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $81(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $81(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [8690])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8739])
	*($0 + [16]) = $1
	$5 = *($2)
	$8 = *(*($2 + [4]))
	*($0) = *($8)
	*(($7 = ($0 + [8]))) = *(($8 + [8]))
	CALL eosio_assert([1], [8684])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8684])
	CALL memcpy(($3 | [8]), $7, [8])
	$4 = (uint_64)*($7) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $4), $3, [16])
	if ( (uint_64)($4 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8633])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $69($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $70(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8628])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8628])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $89($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8806])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8852])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [10053])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10096])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [10115])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8903])
	CALL eosio_assert([1], [8684])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8684])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8605])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $95($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $71($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8633])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	*($5) = *(*($3))
	*($5 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [8684])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [8684])
	CALL memcpy((($4 + [16]) | [8]), ($5 + [8]), [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-9025909311452217344, $2, $6, ($4 + [16]), [16])
	*($5 + [20]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $38(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8806])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8852])
	$3 = *($3)
	*($1 + [24]) = *($3 + [8])
	*($1 + [32]) = *($3 + [16])
	$5 = *($1)
	CALL eosio_assert([1], [8903])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	*($4 + [92]) = ($1 + [40])
	CALL $58(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $62 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [8690])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8739])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8690])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8739])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8739])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8739])
	return $0
}

void .FUNC $89 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $92(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $83($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $85($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8554])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $66($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8554])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10276])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [10321])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10371])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $89($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [8690])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8739])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [8628])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $95($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10520])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $95($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8806])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8852])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [10424])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10472])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [10494])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8903])
	CALL eosio_assert([1], [8684])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8684])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8684])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8684])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8684])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $39(*($1), ($0 + [32]))
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8684])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8684])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $41(CALL $40($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [8554])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $24($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [8554])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$4 = *($2)
	$0 = CALL $72(($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [10234]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$4), [10258])
	if ( ((int_64)$4 != (int_64)*($0)) ){ goto $label$3 }
	CALL $73(($3 + [8]), $0)
	$5 = *($3 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($3) = $2
	CALL $74(($3 + [8]), $0, $1, $3)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($3 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8628])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8628])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $15(*($1), ($0 + [32]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $81(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $81(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}