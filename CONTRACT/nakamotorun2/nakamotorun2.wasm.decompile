(data (i32.const 4) "\e0j\00\00")
(data (i32.const 16) "invalid first pos\00")
(data (i32.const 48) "parse memo error\00")
(data (i32.const 80) "transfer\00")
(data (i32.const 96) "read\00")
(data (i32.const 112) "get\00")
(data (i32.const 128) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 192) "invalid symbol name\00")
(data (i32.const 224) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 288) "not owner\00")
(data (i32.const 304) "cannot pass end iterator to modify\00")
(data (i32.const 352) "cannot create objects in table of another contract\00")
(data (i32.const 416) "write\00")
(data (i32.const 432) "object passed to modify is not in multi_index\00")
(data (i32.const 480) "cannot modify objects in table of another contract\00")
(data (i32.const 544) "updater cannot change primary key when modifying an object\00")
(data (i32.const 608) "error reading iterator\00")
(data (i32.const 640) "next primary key in table is at autoincrement limit\00")
(data (i32.const 704) "attempt to add asset with different symbol\00")
(data (i32.const 752) "addition underflow\00")
(data (i32.const 784) "addition overflow\00")
(data (i32.const 816) "cannot pass end iterator to erase\00")
(data (i32.const 864) "cannot increment end iterator\00")
(data (i32.const 896) "The amount to claim must be greater than 0.\00")
(data (i32.const 944) "  mining\00")
(data (i32.const 960) "active\00")
(data (i32.const 976) "nakamotorun1\00")
(data (i32.const 992) "issue\00")
(data (i32.const 1008) "object passed to erase is not in multi_index\00")
(data (i32.const 1056) "cannot erase objects in table of another contract\00")
(data (i32.const 1120) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1184) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1248) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1296) "nakamotorun2\00")
(data (i32.const 1312) "attempt to subtract asset with different symbol\00")
(data (i32.const 1360) "subtraction underflow\00")
(data (i32.const 1392) "subtraction overflow\00")
(data (i32.const 1424) "fund unlock error\00")
(data (i32.const 1456) "   you win:::\00")
(data (i32.const 1472) "eosio.token\00")
(data (i32.const 1488) "nakamotorun3\00")
(data (i32.const 1504) "result\00")
(data (i32.const 1520) "dobet\00")
(data (i32.const 1536) "   champion:::\00")
(data (i32.const 1552) "   guanya:::\00")
(data (i32.const 1568) "divide by zero\00")
(data (i32.const 1584) "signed division overflow\00")
(data (i32.const 1616) "Bid for your ads here with RUN token!\00")
(data (i32.const 1664) "fund pool overdraw\00")
(data (i32.const 1696) "unable to find key\00")
(data (i32.const 1728) "random\00")
(data (i32.const 1744) "Time\'s up for betting.\00")
(data (i32.const 1776) "...\00")
(data (i32.const 1792) "gameresult\00")
(data (i32.const 1808) "eosio.ram\00")
(data (i32.const 1824) "auction\00")
(data (i32.const 1840) "game\00")
(data (i32.const 1856) "Inconsistent bet amount.\00")
(data (i32.const 1888) "must true eos.\00")
(data (i32.const 1904) "This round hasn\'t begun yet.\00")
(data (i32.const 1936) "This round has ended.\00")
(data (i32.const 1968) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2032) "You\'ve exceeded max bet amount allowed.\00")
(data (i32.const 2080) "|\00")
(data (i32.const 2096) "You\'ve already placed a bet for this round.\00")
(data (i32.const 2144) "referrer account does not exist\00")
(data (i32.const 2176) "referrer can not be self\00")
(data (i32.const 2208) "multiplication overflow\00")
(data (i32.const 2240) "multiplication underflow\00")
(data (i32.const 2272) "|   for referrer\00")
(data (i32.const 2304) "nakamotoruna\00")
(data (i32.const 2320) "|   for dev\00")
(data (i32.const 2336) "nakamotorun5\00")
(data (i32.const 2352) "|   for pool\00")
(data (i32.const 2368) "???\00")
(data (i32.const 2384) "The bid amount must be greater than the last bid.\00")
(data (i32.const 2448) "nakamotonull\00")
(data (i32.const 2464) "destroy\00")
(data (i32.const 10880) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$14 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$15 (param i32)))
(import "env" "is_account" (func $fimport$16 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$20 (param i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "printui" (func $fimport$22 (param i64)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$24 (param i64)))
(import "env" "require_auth2" (func $fimport$25 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$26 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$27 (param i32 i32)))
(import "env" "sha256" (func $fimport$28 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$29 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$30 (result i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13uint64_stringy" (func $5))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $7))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc" (func $8))
(export "_Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $10))
(export "_ZN12runrunrunrun5applyEyy" (func $11))
(export "_ZN12runrunrunrun10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $13))
(export "_ZN12runrunrunrun6revealERKy" (func $14))
(export "_ZN12runrunrunrun4initEv" (func $16))
(export "_ZN12runrunrunrun5dobetERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_" (func $18))
(export "_ZN12runrunrunrun5claimEy" (func $20))
(export "_ZN12runrunrunrun9setsloganEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $22))
(export "apply" (func $131))
(export "malloc" (func $132))
(export "free" (func $135))
(export "memchr" (func $152))
(export "memcmp" (func $153))
(export "strlen" (func $154))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $155 $20 $16 $14 $22 $18 $24)



void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$6 = *(*($0 + [4]))
	$7 = ($6 + [264])
	$5 = *($7)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = ($6 + [248])
	$3 = CALL db_lowerbound_i64(*($4), *(($6 + [256])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($4, $3)
	*($8 + [36]) = [0]
	*($8 + [32]) = $4
	$5 = *(*(CALL $40(($8 + [32])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [264])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [640])
	$5 = *($7)
	*($1 + [8]) = [1548892800]
	*($1) = $5
	CALL eosio_assert([1], [128])
	$4 = ($1 + [8])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [192])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-32])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-4])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $4
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [16])
	CALL $99(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $5, $6, [28])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $94 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$2 = [0]
	*(($0 + [16])) = [0]
	*(($3 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [128])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [192])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [128])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [192])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $25(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [96])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [16])))
	
.LABEL $label$11
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $137($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1472]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$6 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$1 }
	$8 = *($1)
	*(($11 + [56])) = [0]
	*($11 + [32]) = $8
	*($11 + [24]) = $9
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$6 = CALL $100(($11 + [24]), (int_64)5459781, [1696])
	*(($4 = (($11 + [8]) + [8]))) = *(($6 + [8]))
	*($11 + [8]) = *($6)
	$3 = *($11 + [48])
	if ( ($3 == 0) ){ goto $label$7 }
	$5 = ($11 + [52])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $137($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($11 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $137($6)
	
.LABEL $label$7
	CALL $57(($11 + [24]), $1)
	$8 = *($11 + [24])
	$10 = *($11 + [32])
	*($0) = *($11 + [8])
	$7 = *($4)
	*(($0 + [8])) = $7
	CALL eosio_assert(((int_64)$10 == (int_64)$7), [1312])
	$8 = (int_64)
	*($0) = $8(*($0) - $8))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1360])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1392])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1664])
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $137($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [224])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $87($1, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [224])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $92($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*(($4 = CALL $136([32])) + [8]) = (int_64)1398362884
	*($4) = (int_64)0
	CALL eosio_assert([1], [128])
	$5 = ($4 + [8])
	$6 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [192])
	*($4 + [16]) = $1
	$7 = *($3)
	*($4) = *($7)
	*(($4 + [12])) = *(($7 + [12]))
	*(($4 + [8])) = *(($7 + [8]))
	*(($4 + [4])) = *(($7 + [4]))
	CALL eosio_assert([1], [416])
	CALL memcpy(($9 + [16]), $4, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($9 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($9 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($9 + [8]) = $4
	*($9 + [16]) = (int_64)6820308914865700864
	$8 = *($4 + [20])
	*($9 + [4]) = $8
	$3 = ($1 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $8
	*($9 + [8]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $90(($1 + [24]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $4
	*($0) = $1
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $137($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $138 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [704])
	$5 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [784])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	*($6 + [48]) = ($6 + [28])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [56]) = ($6 + [40])
	*($6 + [68]) = ($1 + [8])
	*($6 + [64]) = $1
	*($6 + [72]) = ($1 + [16])
	CALL $99(($6 + [64]), ($6 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $6, [28])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$7 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [416])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [416])
	CALL memcpy(*($5), $4, [8])
	*($5) = (*($5) + [8])
	CALL $36($0, ($4 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$7 = *($5)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [256])
	*([0] + [4]) = $11
	$4 = [0]
	CALL memset(($11 + [112]), [0], [64])
	*((($11 + [112]) + [24])) = (int_64)1398362884
	*($11 + [128]) = (int_64)0
	CALL eosio_assert([1], [128])
	$2 = ($0 + [208])
	$6 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [192])
	*(($11 + [168])) = [0]
	*($11 + [160]) = (int_64)0
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$7 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$2), [224])
	if ( $4 ){ goto $label$6 }
	$4 = ($11 + [112])
	goto $label$6 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $29($2, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$2), [224])
	goto $label$6 
	
.LABEL $label$8
	$4 = ($11 + [112])
	
.LABEL $label$6
	CALL memcpy(($11 + [176]), $4, [48])
	$2 = (($11 + [176]) + [48])
	CALL $150($2, ($4 + [48]))
	if ( ((*($11 + [160]) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($11 + [168])))
	
.LABEL $label$9
	$9 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [960]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$15 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$10 }
	*($11 + [64]) = $7
	*($11 + [56]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1472]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$22 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [2304]
	$10 = (int_64)0
	
.LOOP $label$28:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$29 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$10 = ((int_64)$5 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$28 }
	$6 = *($1)
	CALL __multi3(($11 + [24]), $6, (int_64)$6 >> (int_64)63), (int_64)20, (int_64)0)
	$5 = *($1 + [8])
	$6 = *((($11 + [24]) + [8]))
	$8 = *($11 + [24])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [2208])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [2240])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	CALL $43(($11 + [40]), $2, [2320])
	*(($11 + [136])) = $5
	*(($11 + [148])) = *($11 + [44])
	*($11 + [120]) = $10
	$4 = (($11 + [40]) + [8])
	*(($11 + [152])) = *($4)
	*($11 + [112]) = *($0)
	*($11 + [128]) = ((int_64)$8 / (int_64)100)
	*($11 + [144]) = *($11 + [40])
	*($11 + [40]) = [0]
	*($11 + [44]) = [0]
	*($4) = [0]
	$4 = CALL $85(($11 + [72]), ($11 + [56]), $7, $9, ($11 + [112]))
	CALL $46(($11 + [240]), $4)
	$3 = *($11 + [240])
	CALL send_inline($3, (*($11 + [244]) - $3))
	$3 = *($11 + [240])
	if ( ($3 == 0) ){ goto $label$32 }
	*($11 + [244]) = $3
	CALL $137($3)
	
.LABEL $label$32
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$33 }
	*(($4 + [32])) = $3
	CALL $137($3)
	
.LABEL $label$33
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$34 }
	*(($4 + [20])) = $3
	CALL $137($3)
	
.LABEL $label$34
	if ( ((*(($11 + [144])) & [1]) == 0) ){ goto $label$35 }
	CALL $137(*(($11 + [152])))
	
.LABEL $label$35
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$36 }
	CALL $137(*(($11 + [48])))
	
.LABEL $label$36
	$9 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [960]
	$7 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$42 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$42
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$38
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$37 }
	*($11 + [64]) = $7
	*($11 + [56]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1472]
	$7 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$48 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$3 = ($3 + [165])
	goto $label$46 
	
.LABEL $label$48
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$44
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$43 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$9 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$54 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$3 = ($3 + [165])
	goto $label$52 
	
.LABEL $label$54
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$50
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$49 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [2336]
	$10 = (int_64)0
	
.LOOP $label$55:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$56 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$3 = ($3 + [165])
	goto $label$57 
	
.LABEL $label$58
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$56
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$10 = ((int_64)$5 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$55 }
	$6 = *($1)
	CALL __multi3(($11 + [8]), $6, (int_64)$6 >> (int_64)63), (int_64)80, (int_64)0)
	$5 = *(($1 + [8]))
	$6 = *((($11 + [8]) + [8]))
	$8 = *($11 + [8])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [2208])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [2240])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	CALL $43(($11 + [40]), $2, [2352])
	*(($11 + [136])) = $5
	*(($11 + [148])) = *($11 + [44])
	*($11 + [120]) = $10
	$4 = (($11 + [40]) + [8])
	*(($11 + [152])) = *($4)
	*($11 + [112]) = *($0)
	*($11 + [128]) = ((int_64)$8 / (int_64)100)
	*($11 + [144]) = *($11 + [40])
	*($11 + [40]) = [0]
	*($11 + [44]) = [0]
	*($4) = [0]
	$4 = CALL $85(($11 + [72]), ($11 + [56]), $7, $9, ($11 + [112]))
	CALL $46(($11 + [240]), $4)
	$3 = *($11 + [240])
	CALL send_inline($3, (*($11 + [244]) - $3))
	$3 = *($11 + [240])
	if ( ($3 == 0) ){ goto $label$59 }
	*($11 + [244]) = $3
	CALL $137($3)
	
.LABEL $label$59
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$60 }
	*(($4 + [32])) = $3
	CALL $137($3)
	
.LABEL $label$60
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$61 }
	*(($4 + [20])) = $3
	CALL $137($3)
	
.LABEL $label$61
	if ( ((*(($11 + [144])) & [1]) == 0) ){ goto $label$62 }
	CALL $137(*(($11 + [152])))
	
.LABEL $label$62
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$63 }
	CALL $137(*(($11 + [48])))
	
.LABEL $label$63
	if ( ((*(($11 + [224])) & [1]) == 0) ){ goto $label$64 }
	CALL $137(*(($11 + [232])))
	
.LABEL $label$64
	*([0] + [4]) = ($11 + [256])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [96])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $25(*($1), *($0 + [12]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [336])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	*($3 + [96]) = $0
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*(($3 + [128])) = [0]
	*($3 + [136]) = $0
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*(($3 + [168])) = [0]
	*($3 + [176]) = $0
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = [0]
	*(($3 + [204])) = [0]
	*(($3 + [208])) = [0]
	*($3 + [216]) = $0
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = [0]
	*(($3 + [244])) = [0]
	*(($3 + [248])) = [0]
	*($3 + [256]) = $0
	*(($3 + [264])) = $0
	*(($3 + [272])) = (int_64)-1
	*(($3 + [280])) = [0]
	*(($3 + [284])) = [0]
	*(($3 + [288])) = [0]
	*($3 + [296]) = $0
	*(($3 + [304])) = $0
	*(($3 + [312])) = (int_64)-1
	*(($3 + [320])) = [0]
	*(($3 + [324])) = [0]
	*(($3 + [328])) = [0]
	CALL _ZN12runrunrunrun5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $133([2472], $0)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $134($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10880])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10966]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10968])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10966]) = [1]
	$7 = ($7 << [16])
	*([0] + [10968]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10968])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10968]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10966]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10966]) = [1]
	$3 = ($3 << [16])
	*([0] + [10968]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10968])
	
.LABEL $label$8
	*([0] + [10968]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = (*([0] + [4]) - [128])
	*([0] + [4]) = $1
	$4 = [0]
	*((($1 = CALL memset($1, [0], [64])) + [24])) = (int_64)1398362884
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [128])
	$2 = ($0 + [208])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [192])
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$8 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$2), [224])
	if ( $4 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$4 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $29($2, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$2), [224])
	goto $label$6 
	
.LABEL $label$7
	$4 = $1
	
.LABEL $label$6
	CALL memcpy(($1 + [64]), $4, [48])
	CALL $150((($1 + [64]) + [48]), ($4 + [48]))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($1 + [56])))
	
.LABEL $label$9
	if ( ((uint_32)(*($1 + [72]) + [86400]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$10 }
	*($1 + [104]) = *($1 + [96])
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)1)
	CALL eosio_assert([1], [128])
	$3 = (int_64)5133650
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [192])
	*(($1 + [88])) = (int_64)1314214404
	*(($4 = ($1 + [72]))) = (*($4) + [86400])
	*($1 + [80]) = (int_64)0
	CALL $30($2, ($1 + [64]), *($0))
	
.LABEL $label$10
	if ( ((*(($1 + [112])) & [1]) == 0) ){ goto $label$16 }
	CALL $137(*(($1 + [120])))
	
.LABEL $label$16
	*([0] + [4]) = ($1 + [128])
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10972])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $137 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$3 = ($0 + [248])
	$11 = ($0 + [264])
	$4 = *($11)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($3), *(($0 + [256])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($3, $8)
	*($12 + [28]) = [0]
	*($12 + [24]) = $3
	$4 = *(*(CALL $40(($12 + [24])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [264])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [640])
	$4 = ((int_64)*($11) + (int_64)-1)
	$5 = *(($0 + [272]))
	$7 = *(($0 + [276]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$11 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$4:
	if ( ((int_64)*(*($11)) == (int_64)$4) ){ goto $label$3 }
	$7 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$6 }
	$11 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$3), [224])
	goto $label$5 
	
.LABEL $label$6
	$11 = CALL $39($3, CALL $fimport$6(*(($0 + [248])), *(($0 + [256])), (int_64)-3665743729458675712, $4))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$3), [224])
	
.LABEL $label$5
	*($12 + [72]) = $3
	*($12 + [76]) = $11
	if ( ((uint_32)(*($11 + [8]) + [86400]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$8 }
	$11 = *($12 + [76])
	*($12 + [24]) = $2
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [304])
	CALL $123($3, $11, (int_64)0, ($12 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$4 = *($0)
	*($12 + [24]) = $0
	*($12 + [32]) = $2
	*($12 + [28]) = ($12 + [72])
	CALL $124(($12 + [64]), $3, $4, ($12 + [24]))
	
.LABEL $label$7
	$11 = ($0 + [264])
	$4 = *($11)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$9 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	CALL $39($3, $8)
	*($12 + [28]) = [0]
	*($12 + [24]) = $3
	$4 = *(*(CALL $40(($12 + [24])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [264])) = $4
	
.LABEL $label$9
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [640])
	$4 = ((int_64)*($11) + (int_64)-1)
	*($12 + [64]) = $4
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = [0]
	$9 = *($0)
	*($12 + [24]) = $9
	$10 = *($1)
	*($12 + [32]) = $10
	*(($12 + [52])) = [0]
	*(($12 + [56])) = [0]
	$11 = CALL db_find_i64($9, $10, (int_64)3607749779137757184, $4)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$11 = CALL $41(($12 + [24]), $11)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($12 + [24])), [224])
	*($12 + [16]) = $2
	CALL eosio_assert([1], [304])
	CALL $125(($12 + [24]), $11, (int_64)0, ($12 + [16]))
	$7 = *($12 + [48])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = *($0)
	*($12 + [20]) = $2
	*($12 + [16]) = ($12 + [64])
	CALL $126(($12 + [8]), ($12 + [24]), $4, ($12 + [16]))
	$7 = *($12 + [48])
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$0 = ($12 + [52])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $137($8)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$16 }
	$11 = *(($12 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$11 = $7
	
.LABEL $label$14
	*($0) = $7
	CALL $137($11)
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [96])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $25(*($1), *($0 + [20]))
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $136([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [128])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [192])
	*($4 + [24]) = $1
	CALL $127(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [28])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $50(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $137($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [128])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [192])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [416])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [416])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$4 = *($1)
	$5 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [704])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [784])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	CALL eosio_assert([1], [416])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy(($7 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [416])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $7, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $136($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $143($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $138($0)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1056])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1120])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $137($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $137($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [608])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $136([40])
	$6 = CALL $49($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $50(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1248])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1184])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1184])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $39(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [416])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [416])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [416])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [416])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [416])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $48(CALL $47($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $136([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $28($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [416])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [416])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [416])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $36($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$9 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [960]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($10 + [48]) = $7
	*($10 + [40]) = $9
	$6 = (int_64)0
	$8 = (int_64)59
	$0 = [976]
	$7 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [992]
	$9 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$16 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	*(($10 + [20])) = *(($2 + [12]))
	*(($10 + [16])) = *(($2 + [8]))
	*(($10 + [12])) = *(($2 + [4]))
	*($10) = $1
	*($10 + [8]) = *($2)
	CALL $150(($10 + [24]), $3)
	$0 = CALL $45(($10 + [56]), ($10 + [40]), $7, $9, $10)
	CALL $46(($10 + [96]), $0)
	$4 = *($10 + [96])
	CALL send_inline($4, (*($10 + [100]) - $4))
	$4 = *($10 + [96])
	if ( ($4 == 0) ){ goto $label$17 }
	*($10 + [100]) = $4
	CALL $137($4)
	
.LABEL $label$17
	$4 = *($0 + [28])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($0 + [32])) = $4
	CALL $137($4)
	
.LABEL $label$18
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($0 + [20])) = $4
	CALL $137($4)
	
.LABEL $label$19
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL $137(*(($10 + [32])))
	
.LABEL $label$20
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $136([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [128])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [192])
	*($4 + [32]) = $1
	CALL $128(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $52(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $137($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [264])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [248])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [256])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($5, $6)
	*($10 + [36]) = [0]
	*($10 + [32]) = $5
	$7 = *(*(CALL $40(($10 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [264])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [640])
	*($1) = *($8)
	*($1 + [8]) = (*(*(*($3 + [4]) + [4]) + [8]) + [86400])
	$3 = *($3 + [8])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	$3 = $9
	$9 = ($3 + [-32])
	*([0] + [4]) = $9
	*($10 + [12]) = $9
	*($10 + [8]) = $9
	*($10 + [16]) = ($3 + [-4])
	*($10 + [24]) = ($10 + [8])
	*($10 + [36]) = ($1 + [8])
	*($10 + [32]) = $1
	*($10 + [40]) = ($1 + [16])
	CALL $99(($10 + [32]), ($10 + [24]))
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $7, $9, [28])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0) = (int_64)0
	$3 = [0]
	*($0 + [8]) = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$5 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $5 )
	if ( ($6 == 0) ){ goto $label$2 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$3:
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)*($2)) ){ goto $label$7 }
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$6 }
	CALL $150($3, $7)
	*($5) = (*($5) + [12])
	goto $label$5 
	
.LABEL $label$7
	CALL $145($7, int_32(($3 << [24]) >> [24]))
	goto $label$4 
	
.LABEL $label$6
	CALL $9($0, $7)
	
.LABEL $label$5
	if ( (*($7) & [1]) ){ goto $label$8 }
	*($7) = [0]
	goto $label$4 
	
.LABEL $label$8
	*(*(($7 + [8]))) = [0]
	*($7 + [4]) = [0]
	
.LABEL $label$4
	$1 = ($1 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$3 }
	$3 = *($7 + [4])
	$1 = *($7)
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	if ( (( $3 ? uint_32(($1 & [254]) >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$9 }
	$1 = ($0 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$10 }
	CALL $150($6, $7)
	*($1) = (*($1) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $9($0, $7)
	
.LABEL $label$9
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $136(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $150($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $137($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $136($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $143($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $138($0)
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [16])
	$2 = CALL $147($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $151($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [48])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $141($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $6($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $141($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN12runrunrunrun6revealERKy (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [272])
	*([0] + [4]) = $19
	$18 = (int_64)0
	$17 = (int_64)59
	$7 = [1296]
	$13 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$2 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$16 = ($16 + [165])
	goto $label$3 
	
.LABEL $label$4
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	$18 = (int_64)0
	$10 = (int_64)59
	$7 = [1728]
	$11 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$10 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$16 = ($16 + [165])
	goto $label$8 
	
.LABEL $label$10
	$17 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$11 = ((int_64)$17 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$5 }
	CALL require_auth2($13, $11)
	CALL memset(($19 + [128]), [0], [72])
	$7 = CALL $71(($19 + [128]))
	CALL $72(($19 + [200]), ($0 + [48]), $7)
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($7 + [24])))
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($19 + [208]) == (int_64)*($1)), [1744])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) > (uint_32)*($19 + [232])), [1776])
	$18 = (int_64)0
	$17 = (int_64)59
	$7 = [1296]
	$13 = (int_64)0
	
.LOOP $label$12:
	$10 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$13 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$16 = ($16 + [165])
	goto $label$14 
	
.LABEL $label$15
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$13
	$7 = ($7 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$12 }
	$13 = ((int_64)$17 & (int_64)7)
	$17 = CALL $104($0, $13, *($1))
	$18 = (uint_64)$17 >> (uint_64)(int_64)3
	if ( ((int_64)$18) != (int_64)$13) ){ goto $label$17 }
	$7 = ((int_64)$18 == (int_64)7)
	$17 = ( (int_64)7 ? ((int_64)$18 + (int_64)1) : $7 )
	$13 = ( (int_64)6 ? $18 : $7 )
	goto $label$16 
	
.LABEL $label$17
	$17 = $18
	
.LABEL $label$16
	*($19 + [120]) = [0]
	*($19 + [112]) = (int_64)0
	$18 = ((int_64)$17 + (int_64)1)
	$17 = $18
	
.LOOP $label$18:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$17 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [112]))
	$10 = ((uint_64)$17 / (uint_64)(int_64)10)
	if ( (*($19 + [112]) & [1]) ){ goto $label$20 }
	*($19 + [112]) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*((($19 + [112]) + [8]))) = [0]
	*($19 + [116]) = [0]
	
.LABEL $label$19
	CALL $141(($19 + [112]), [0])
	*((($19 + [112]) + [8])) = *((($19 + [128]) + [8]))
	*($19 + [112]) = *($19 + [128])
	$7 = ((uint_64)$17 > (uint_64)(int_64)9)
	$17 = $10
	if ( $7 ){ goto $label$18 }
	*($19 + [96]) = [0]
	*($19 + [88]) = (int_64)0
	$16 = (($19 + [88]) | [1])
	$17 = ((int_64)$13 + (int_64)1)
	$10 = $17
	
.LOOP $label$21:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$10 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [88]))
	$13 = ((uint_64)$10 / (uint_64)(int_64)10)
	if ( (*($19 + [88]) & [1]) ){ goto $label$23 }
	*($19 + [88]) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*((($19 + [88]) + [8]))) = [0]
	*($19 + [92]) = [0]
	
.LABEL $label$22
	CALL $141(($19 + [88]), [0])
	*((($19 + [88]) + [8])) = *((($19 + [128]) + [8]))
	*($19 + [88]) = *($19 + [128])
	$7 = ((uint_64)$10 > (uint_64)(int_64)9)
	$10 = $13
	if ( $7 ){ goto $label$21 }
	$7 = *($19 + [88])
	$6 = ($7 & [1])
	$8 = ($19 + [96])
	CALL $143(($19 + [112]), ( *($8) ? $16 : $6 ), ( *($19 + [92]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($19 + [88]) & [1]) == 0) ){ goto $label$24 }
	CALL $137(*($8))
	
.LABEL $label$24
	*($19 + [88]) = *($1)
	CALL $150($8, ($19 + [112]))
	$2 = *($0)
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [960]
	$12 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$30 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$16 = ($16 + [165])
	goto $label$28 
	
.LABEL $label$30
	$13 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$26
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$25 }
	$10 = (int_64)0
	$13 = (int_64)59
	$7 = [1488]
	$14 = (int_64)0
	
.LOOP $label$31:
	$11 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$32 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$16 = ($16 + [165])
	goto $label$33 
	
.LABEL $label$34
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$32
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$31 }
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [1792]
	$15 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$10 > (uint_64)(int_64)9) ){ goto $label$40 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$16 = ($16 + [165])
	goto $label$38 
	
.LABEL $label$40
	$13 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$36
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$35 }
	*(($16 = ($19 + [152]))) = [0]
	*($19 + [136]) = $15
	*($19 + [128]) = $14
	*($19 + [144]) = (int_64)0
	*(($7 = CALL $136([16]))) = $2
	*($7 + [8]) = $12
	$6 = ($7 + [16])
	*($16) = $6
	*(($19 + [148])) = $6
	*($19 + [144]) = $7
	CALL $105(($19 + [156]), ($19 + [88]))
	CALL $46(($19 + [64]), ($19 + [128]))
	$7 = *($19 + [64])
	CALL send_inline($7, (*($19 + [68]) - $7))
	$7 = *($19 + [64])
	if ( ($7 == 0) ){ goto $label$41 }
	*($19 + [68]) = $7
	CALL $137($7)
	
.LABEL $label$41
	$7 = *($19 + [156])
	if ( ($7 == 0) ){ goto $label$42 }
	*(($19 + [160])) = $7
	CALL $137($7)
	
.LABEL $label$42
	$7 = *($19 + [144])
	if ( ($7 == 0) ){ goto $label$43 }
	*(($19 + [148])) = $7
	CALL $137($7)
	
.LABEL $label$43
	*(($19 + [136])) = (int_64)0
	*(($19 + [144])) = (int_64)0
	*($19 + [128]) = (int_64)0
	$3 = ($0 + [288])
	$7 = *(($0 + [316]))
	if ( ((int_32)$7 == (int_32)*(($0 + [312]))) ){ goto $label$45 }
	$16 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$3), [224])
	goto $label$44 
	
.LABEL $label$45
	$16 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [296])), (int_64)7035937269232844800, (int_64)7035937269232844800)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$44 }
	$16 = CALL $106($3, $7)
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$3), [224])
	
.LABEL $label$44
	*((($19 + [64]) + [12])) = (int_64)0
	$7 = [0]
	*($19 + [72]) = [0]
	$9 = ( $16 ? ($19 + [128]) : $16 )
	*($19 + [64]) = *($9)
	$16 = (*(($9 + [12])) - *($9 + [8]))
	$5 = ((int_32)$16 / (int_32)[24])
	$4 = ($19 + [72])
	if ( ($16 == 0) ){ goto $label$47 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$46 }
	$7 = CALL $136($16)
	*(($6 = (($19 + [64]) + [12]))) = $7
	*(($19 + [80])) = ($7 + ((int_32)$5 * (int_32)[24]))
	*((($19 + [64]) + [8])) = $7
	$9 = *(($9 + [12]))
	$16 = *(($9 + [8]))
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$47 }
	
.LOOP $label$48:
	*($7) = *($16)
	CALL $150(($7 + [8]), ($16 + [8]))
	$7 = (*($6) + [24])
	*($6) = $7
	$16 = ($16 + [24])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$48 }
	
.LABEL $label$47
	$16 = *($4)
	if ( ((int_32)($7 - $16) != (int_32)[720]) ){ goto $label$50 }
	if ( ((int_32)($16 + [24]) == (int_32)$7) ){ goto $label$52 }
	$5 = ($7 + [-24])
	$7 = $16
	
.LOOP $label$53:
	$16 = ($7 + [24])
	*($7) = *($16)
	$6 = ($7 + [8])
	if ( (*($6) & [1]) ){ goto $label$55 }
	*($6) = [0]
	goto $label$54 
	
.LABEL $label$55
	*(*(($7 + [16]))) = [0]
	*(($7 + [12])) = [0]
	
.LABEL $label$54
	CALL $141($6, [0])
	$9 = ($7 + [32])
	$10 = *($9)
	*(($7 + [36])) = [0]
	*($9) = [0]
	$7 = ($7 + [40])
	*(($6 + [8])) = *($7)
	*($6) = $10
	*($7) = [0]
	$7 = $16
	if ( ((int_32)$5 != (int_32)$16) ){ goto $label$53 }
	$7 = *(($19 + [76]))
	if ( ((int_32)$7 == (int_32)$16) ){ goto $label$51 }
	
.LABEL $label$52
	
.LOOP $label$56:
	$6 = ($7 + [-24])
	if ( ((*(($7 + [-16])) & [1]) == 0) ){ goto $label$57 }
	CALL $137(*(($7 + [-8])))
	
.LABEL $label$57
	$7 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$56 }
	
.LABEL $label$51
	*(($19 + [76])) = $16
	goto $label$49 
	
.LABEL $label$50
	$16 = $7
	
.LABEL $label$49
	if ( ((int_32)$16 == (int_32)*(($19 + [80]))) ){ goto $label$59 }
	*($16) = *($19 + [88])
	CALL $150(($16 + [8]), $8)
	*(($7 = ($19 + [76]))) = (*($7) + [24])
	goto $label$58 
	
.LABEL $label$59
	CALL $107($4, ($19 + [88]))
	
.LABEL $label$58
	CALL $108($3, ($19 + [64]), *($0))
	CALL $109($0)
	*($19 + [56]) = [0]
	*($19 + [48]) = (int_64)0
	if ( ((uint_64)$18 >= (uint_64)$17) ){ goto $label$61 }
	*($19 + [40]) = [0]
	*($19 + [32]) = (int_64)0
	$6 = (($19 + [32]) | [1])
	$10 = $18
	
.LOOP $label$62:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$10 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [32]))
	$13 = ((uint_64)$10 / (uint_64)(int_64)10)
	if ( (*($19 + [32]) & [1]) ){ goto $label$64 }
	*($19 + [32]) = [0]
	goto $label$63 
	
.LABEL $label$64
	*(*((($19 + [32]) + [8]))) = [0]
	*($19 + [36]) = [0]
	
.LABEL $label$63
	CALL $141(($19 + [32]), [0])
	*((($19 + [32]) + [8])) = *((($19 + [128]) + [8]))
	*($19 + [32]) = *($19 + [128])
	$7 = ((uint_64)$10 > (uint_64)(int_64)9)
	$10 = $13
	if ( $7 ){ goto $label$62 }
	$7 = *($19 + [32])
	$9 = ($7 & [1])
	$16 = (($19 + [32]) + [8])
	CALL $143(($19 + [48]), ( *($16) ? $6 : $9 ), ( *($19 + [36]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$65 }
	CALL $137(*($16))
	
.LABEL $label$65
	*($19 + [40]) = [0]
	*($19 + [32]) = (int_64)0
	$6 = (($19 + [32]) | [1])
	
.LOOP $label$66:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$17 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [32]))
	$10 = ((uint_64)$17 / (uint_64)(int_64)10)
	if ( (*($19 + [32]) & [1]) ){ goto $label$68 }
	*($19 + [32]) = [0]
	goto $label$67 
	
.LABEL $label$68
	*(*($16)) = [0]
	*($19 + [36]) = [0]
	
.LABEL $label$67
	CALL $141(($19 + [32]), [0])
	*($16) = *((($19 + [128]) + [8]))
	*($19 + [32]) = *($19 + [128])
	$7 = ((uint_64)$17 > (uint_64)(int_64)9)
	$17 = $10
	if ( $7 ){ goto $label$66 }
	$7 = *($19 + [32])
	$16 = ($7 & [1])
	$9 = ($19 + [40])
	CALL $143(($19 + [48]), ( *($9) ? $6 : $16 ), ( *($19 + [36]) ? uint_32($7 >> [1]) : $16 ))
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$60 }
	CALL $137(*($9))
	goto $label$60 
	
.LABEL $label$61
	*($19 + [40]) = [0]
	*($19 + [32]) = (int_64)0
	$6 = (($19 + [32]) | [1])
	
.LOOP $label$69:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$17 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [32]))
	$10 = ((uint_64)$17 / (uint_64)(int_64)10)
	if ( (*($19 + [32]) & [1]) ){ goto $label$71 }
	*($19 + [32]) = [0]
	goto $label$70 
	
.LABEL $label$71
	*(*((($19 + [32]) + [8]))) = [0]
	*($19 + [36]) = [0]
	
.LABEL $label$70
	CALL $141(($19 + [32]), [0])
	*((($19 + [32]) + [8])) = *((($19 + [128]) + [8]))
	*($19 + [32]) = *($19 + [128])
	$7 = ((uint_64)$17 > (uint_64)(int_64)9)
	$17 = $10
	if ( $7 ){ goto $label$69 }
	$7 = *($19 + [32])
	$9 = ($7 & [1])
	$16 = (($19 + [32]) + [8])
	CALL $143(($19 + [48]), ( *($16) ? $6 : $9 ), ( *($19 + [36]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$72 }
	CALL $137(*($16))
	
.LABEL $label$72
	*($19 + [40]) = [0]
	*($19 + [32]) = (int_64)0
	$6 = (($19 + [32]) | [1])
	$17 = $18
	
.LOOP $label$73:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$17 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [32]))
	$10 = ((uint_64)$17 / (uint_64)(int_64)10)
	if ( (*($19 + [32]) & [1]) ){ goto $label$75 }
	*($19 + [32]) = [0]
	goto $label$74 
	
.LABEL $label$75
	*(*($16)) = [0]
	*($19 + [36]) = [0]
	
.LABEL $label$74
	CALL $141(($19 + [32]), [0])
	*($16) = *((($19 + [128]) + [8]))
	*($19 + [32]) = *($19 + [128])
	$7 = ((uint_64)$17 > (uint_64)(int_64)9)
	$17 = $10
	if ( $7 ){ goto $label$73 }
	$7 = *($19 + [32])
	$16 = ($7 & [1])
	$9 = ($19 + [40])
	CALL $143(($19 + [48]), ( *($9) ? $6 : $16 ), ( *($19 + [36]) ? uint_32($7 >> [1]) : $16 ))
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$60 }
	CALL $137(*($9))
	
.LABEL $label$60
	$12 = *($0)
	$17 = (int_64)0
	$13 = (int_64)59
	$7 = [960]
	$11 = (int_64)0
	
.LOOP $label$76:
	if ( ((uint_64)$17 > (uint_64)(int_64)5) ){ goto $label$81 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$16 = ($16 + [165])
	goto $label$79 
	
.LABEL $label$81
	$10 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$78
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$77
	$7 = ($7 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$76 }
	*($19 + [40]) = $11
	*($19 + [32]) = $12
	$17 = (int_64)0
	$13 = (int_64)59
	$7 = [1520]
	$11 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$17 > (uint_64)(int_64)4) ){ goto $label$87 }
	$16 = *($7)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$16 = ($16 + [165])
	goto $label$85 
	
.LABEL $label$87
	$10 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$83
	$7 = ($7 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$82 }
	*($19 + [24]) = $11
	*($19 + [16]) = [0]
	*($19 + [8]) = (int_64)0
	
.LOOP $label$88:
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$18 % (uint_64)(int_64)10))
	CALL $6(($19 + [128]), ( ($7 | [48]) ? ($7 + [55]) : ($7 <= [10]) ), ($19 + [8]))
	$17 = ((uint_64)$18 / (uint_64)(int_64)10)
	if ( (*($19 + [8]) & [1]) ){ goto $label$90 }
	*($19 + [8]) = [0]
	goto $label$89 
	
.LABEL $label$90
	*(*((($19 + [8]) + [8]))) = [0]
	*($19 + [12]) = [0]
	
.LABEL $label$89
	CALL $141(($19 + [8]), [0])
	*((($19 + [8]) + [8])) = *((($19 + [128]) + [8]))
	*($19 + [8]) = *($19 + [128])
	$7 = ((uint_64)$18 > (uint_64)(int_64)9)
	$18 = $17
	if ( $7 ){ goto $label$88 }
	*(($19 + [140])) = *($19 + [12])
	$7 = (($19 + [8]) + [8])
	*(($19 + [144])) = *($7)
	*($19 + [128]) = *($1)
	$16 = *($19 + [8])
	*($19 + [8]) = [0]
	*($19 + [136]) = $16
	*($19 + [12]) = [0]
	*($7) = [0]
	CALL $150(($19 + [148]), ($19 + [48]))
	CALL $62($0, ($19 + [32]), $0, ($19 + [24]), ($19 + [128]))
	if ( ((*($19 + [148]) & [1]) == 0) ){ goto $label$91 }
	CALL $137(*(($19 + [156])))
	
.LABEL $label$91
	if ( ((*((($19 + [128]) + [8])) & [1]) == 0) ){ goto $label$92 }
	CALL $137(*(($19 + [144])))
	
.LABEL $label$92
	if ( ((*($19 + [8]) & [1]) == 0) ){ goto $label$93 }
	CALL $137(*(($19 + [16])))
	
.LABEL $label$93
	if ( ((*($19 + [48]) & [1]) == 0) ){ goto $label$94 }
	CALL $137(*(($19 + [56])))
	
.LABEL $label$94
	$6 = *($19 + [72])
	if ( ($6 == 0) ){ goto $label$95 }
	$9 = ($19 + [76])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$97 }
	$16 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$98:
	if ( ((*($7) & [1]) == 0) ){ goto $label$99 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$99
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $16) != (int_32)[-16]) ){ goto $label$98 }
	$7 = *(($19 + [72]))
	goto $label$96 
	
.LABEL $label$97
	$7 = $6
	
.LABEL $label$96
	*($9) = $6
	CALL $137($7)
	
.LABEL $label$95
	if ( ((*(($19 + [96])) & [1]) == 0) ){ goto $label$100 }
	CALL $137(*(($19 + [104])))
	
.LABEL $label$100
	if ( ((*($19 + [112]) & [1]) == 0) ){ goto $label$101 }
	CALL $137(*(($19 + [120])))
	
.LABEL $label$101
	if ( ((*($19 + [216]) & [1]) == 0) ){ goto $label$102 }
	CALL $137(*(($19 + [224])))
	
.LABEL $label$102
	*([0] + [4]) = ($19 + [272])
	return (unreachable)
	
.LABEL $label$46
	CALL $149($4)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [96])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12runrunrunrun4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [240])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$5 = [0]
	CALL memset(($7 + [80]), [0], [72])
	$6 = CALL $71(($7 + [80]))
	$1 = ($0 + [48])
	CALL $72(($7 + [152]), $1, $6)
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $137(*(($6 + [24])))
	
.LABEL $label$1
	*($7 + [152]) = (int_64)0
	*($7 + [160]) = (int_64)0
	*($7 + [180]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($7 + [184]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [180])
	CALL $97(($7 + [80]), $0)
	$4 = *($7 + [80])
	$3 = *($7 + [88])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	*((($7 + [152]) + [48])) = $3
	*($7 + [192]) = ((int_64)$4 / (int_64)2)
	CALL eosio_assert([1], [128])
	$4 = (int_64)5459781
	
.LOOP $label$4:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$2
	CALL eosio_assert($2, [192])
	*(($7 + [216])) = (int_64)1397703940
	*($7 + [208]) = (int_64)0
	CALL $73($1, ($7 + [152]), *($0))
	$4 = *($0)
	*($7 + [72]) = $0
	*($7 + [8]) = $4
	CALL eosio_assert(((int_64)*($0 + [248]) == (int_64)CALL $fimport$3()), [352])
	$1 = ($0 + [248])
	*($7 + [80]) = $1
	*($7 + [84]) = ($7 + [72])
	*($7 + [88]) = ($7 + [8])
	*(($2 = CALL $136([48])) + [24]) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [128])
	$4 = (int_64)5462355
	
.LOOP $label$8:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($5, [192])
	*($2 + [32]) = $1
	CALL $98(($7 + [80]), $2)
	*($7 + [232]) = $2
	$4 = *($2)
	*($7 + [80]) = $4
	$5 = *($2 + [36])
	*($7 + [228]) = $5
	$1 = ($0 + [276])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [280]))) ){ goto $label$12 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($7 + [232]) = [0]
	*($6) = $2
	*($1) = ($6 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $52(($0 + [272]), ($7 + [232]), ($7 + [80]), ($7 + [228]))
	
.LABEL $label$11
	$5 = *($7 + [232])
	$6 = [0]
	*($7 + [232]) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	CALL $137($5)
	
.LABEL $label$13
	CALL memset(($7 + [8]), [0], [64])
	*((($7 + [8]) + [24])) = (int_64)1398362884
	*($7 + [24]) = (int_64)0
	CALL eosio_assert([1], [128])
	$2 = ($0 + [208])
	$4 = (int_64)5462355
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	
.LABEL $label$14
	CALL eosio_assert($5, [192])
	*(($7 + [64])) = [0]
	*($7 + [56]) = (int_64)0
	$6 = *(($0 + [236]))
	if ( ((int_32)$6 == (int_32)*(($0 + [232]))) ){ goto $label$20 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$2), [224])
	if ( $6 ){ goto $label$19 }
	$6 = ($7 + [8])
	goto $label$19 
	
.LABEL $label$20
	$6 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$6 = CALL $29($2, $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$2), [224])
	goto $label$19 
	
.LABEL $label$21
	$6 = ($7 + [8])
	
.LABEL $label$19
	CALL memcpy(($7 + [80]), $6, [48])
	$1 = (($7 + [80]) + [48])
	CALL $150($1, ($6 + [48]))
	if ( ((*($7 + [56]) & [1]) == 0) ){ goto $label$22 }
	CALL $137(*(($7 + [64])))
	
.LABEL $label$22
	*($7 + [88]) = [1548892800]
	*($7 + [80]) = (int_64)0
	CALL eosio_assert([1], [128])
	$4 = (int_64)5133650
	$6 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$5 = [0]
	
.LABEL $label$23
	CALL eosio_assert($5, [192])
	*(($7 + [104])) = (int_64)1314214404
	*($7 + [96]) = (int_64)0
	*($7 + [120]) = *($0)
	CALL $142($1, [1616])
	CALL $30($2, ($7 + [80]), *($0))
	if ( ((*(($7 + [128])) & [1]) == 0) ){ goto $label$28 }
	CALL $137(*(($7 + [136])))
	
.LABEL $label$28
	if ( ((*($7 + [168]) & [1]) == 0) ){ goto $label$29 }
	CALL $137(*(($7 + [176])))
	
.LABEL $label$29
	*([0] + [4]) = ($7 + [240])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_64 .FUNC _Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	if ( ($3 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$4 = (int_64)0
	
.LOOP $label$5:
	$2 = *($0)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$6 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$6
	$0 = ($0 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [8])
	$2 = *($1)
	$4 = (int_64)0
	$0 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*(($2 + $0)) < (int_32)[48]) ){ goto $label$8 }
	if ( ((int_32)*((*($1) + $0)) > (int_32)[57]) ){ goto $label$8 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)*((*($1) + $0))) + (int_64)-48)
	
.LABEL $label$8
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$7 }
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _ZN12runrunrunrun5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $12(($9 + [176]))
	$6 = *($9 + [184])
	*(($9 + [148])) = *(($9 + [204]))
	*(($4 = (($9 + [136]) + [8]))) = *(($9 + [200]))
	*($9 + [140]) = *(($9 + [196]))
	$8 = *($9 + [176])
	*($9 + [136]) = *($9 + [192])
	$5 = *($4)
	*((($9 + [224]) + [8])) = $5
	*(($4 = (($9 + [152]) + [8]))) = $5
	$5 = *($9 + [136])
	*($9 + [224]) = $5
	*($9 + [152]) = $5
	*($9 + [168]) = $1
	$3 = ($9 + [208])
	CALL $150(($9 + [120]), $3)
	*(($9 + [16])) = *($9 + [168])
	*(($9 + [8])) = *($4)
	*($9) = *($9 + [152])
	CALL _ZN12runrunrunrun10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $8, $6, $9, ($9 + [120]))
	if ( ((*($9 + [120]) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*($9 + [128]))
	
.LABEL $label$9
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($9 + [216])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)5552565056350191615) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4417036376032673792) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$7 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $21($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5552565056350191616) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)5606348217378668544) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [2]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $17($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$13
	*($9 + [116]) = [0]
	*($9 + [112]) = [3]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $15($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [84]) = [0]
	*($9 + [80]) = [4]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $23($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [100]) = [0]
	*($9 + [96]) = [5]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $19($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [76]) = [0]
	*($9 + [72]) = [6]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $21($0, ($9 + [64]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [240])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $129($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC _ZN12runrunrunrun10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [560])
	*([0] + [4]) = $18
	*($18 + [536]) = $1
	$15 = *($0)
	if ( ((int_64)$15 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$1 }
	$9 = [1]
	$14 = *($4)
	$11 = CALL strlen([1824])
	if ( ((int_32)$11 != (int_32)( *($4 + [4]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$7 }
	if ( (CALL $148($4, [0], [-1], [1824], $11) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151(($18 + [312]), $4, [0], [4], $4)
	$14 = *($18 + [312])
	$11 = CALL strlen([1840])
	if ( ((int_32)$11 != (int_32)( *($18 + [316]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$8 }
	$9 = ((int_32)CALL $148(($18 + [312]), [0], [-1], [1840], $11) != (int_32)[0])
	$14 = *($18 + [312])
	
.LABEL $label$8
	if ( (($14 & [1]) == 0) ){ goto $label$9 }
	CALL $137(*($18 + [320]))
	
.LABEL $label$9
	if ( $9 ){ goto $label$1 }
	*($18 + [312]) = [124]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($18 + [496]), $4, ($18 + [312]))
	CALL $150(($18 + [480]), (*($18 + [496]) + [12]))
	$4 = *($18 + [480])
	$11 = ($4 & [1])
	if ( $11 ){ goto $label$11 }
	$14 = uint_32($4 >> [1])
	if ( ($14 == 0) ){ goto $label$5 }
	$4 = (($18 + [480]) | [1])
	$10 = (int_64)0
	
.LOOP $label$12:
	$9 = *($4)
	if ( ((uint_32)(($9 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$13 }
	$10 = ((int_64)((int_64)((int_64)$10 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$13
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$14 = *($18 + [484])
	if ( ($14 == 0) ){ goto $label$4 }
	$4 = *(($18 + [488]))
	$10 = (int_64)0
	
.LOOP $label$14:
	$9 = *($4)
	if ( ((uint_32)(($9 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$10 = ((int_64)((int_64)((int_64)$10 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$15
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$14 }
	
.LABEL $label$10
	if ( $11 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$15 = *(($3 + [16]))
	*((($18 + [512]) + [16])) = $15
	$16 = *(($3 + [8]))
	*((($18 + [512]) + [8])) = $16
	$2 = *($3)
	*((($18 + [8]) + [16])) = $15
	*((($18 + [8]) + [8])) = $16
	*($18 + [512]) = $2
	*($18 + [8]) = $2
	CALL $118($0, $1, ($18 + [8]))
	goto $label$1 
	
.LABEL $label$5
	$10 = (int_64)0
	goto $label$2 
	
.LABEL $label$4
	$10 = (int_64)0
	
.LABEL $label$3
	CALL $137(*(($18 + [488])))
	
.LABEL $label$2
	$4 = *($18 + [496])
	*($18 + [312]) = [44]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($18 + [464]), ($4 + [24]), ($18 + [312]))
	$15 = (int_64)0
	$13 = (int_64)0
	$12 = (int_64)0
	$2 = (int_64)0
	$4 = *($18 + [464])
	if ( ((int_32)*($18 + [468]) == (int_32)$4) ){ goto $label$16 }
	$5 = (($18 + [448]) | [1])
	$2 = (int_64)0
	$11 = [0]
	$12 = (int_64)0
	$13 = (int_64)0
	
.LOOP $label$17:
	*($18 + [312]) = [58]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($18 + [432]), ($4 + ((int_32)$11 * (int_32)[12])), ($18 + [312]))
	CALL $150(($18 + [448]), (*($18 + [432]) + [12]))
	$4 = *($18 + [448])
	$6 = ($4 & [1])
	if ( $6 ){ goto $label$22 }
	$1 = (int_64)0
	$14 = uint_32($4 >> [1])
	if ( ($14 == 0) ){ goto $label$18 }
	$4 = $5
	
.LOOP $label$23:
	$9 = *($4)
	if ( ((uint_32)(($9 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$24 }
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$24
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$14 = *($18 + [452])
	if ( ($14 == 0) ){ goto $label$20 }
	$4 = *((($18 + [448]) + [8]))
	$1 = (int_64)0
	
.LOOP $label$25:
	$9 = *($4)
	if ( ((uint_32)(($9 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$26 }
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$26
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$25 }
	
.LABEL $label$21
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$1 = (int_64)0
	
.LABEL $label$19
	CALL $137(*((($18 + [448]) + [8])))
	
.LABEL $label$18
	$9 = *($18 + [432])
	if ( ($9 == 0) ){ goto $label$27 }
	$4 = *($18 + [436])
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$29 }
	$14 = ([0] - $9)
	$4 = ($4 + [-12])
	
.LOOP $label$30:
	if ( ((*($4) & [1]) == 0) ){ goto $label$31 }
	CALL $137(*(($4 + [8])))
	
.LABEL $label$31
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $14) != (int_32)[-12]) ){ goto $label$30 }
	$4 = *($18 + [432])
	goto $label$28 
	
.LABEL $label$29
	$4 = $9
	
.LABEL $label$28
	*($18 + [436]) = $9
	CALL $137($4)
	
.LABEL $label$27
	$13 = ( $1 ? $13 : ((int_64)$1 > (int_64)$13) )
	$12 = ((int_64)$1 + (int_64)$12)
	$2 = ((int_64)$1 + (int_64)$2)
	$4 = *($18 + [464])
	$11 = ($11 + [1])
	if ( ($11 <= ((int_32)(*($18 + [468]) - $4) / (int_32)[12])) ){ goto $label$17 }
	
.LABEL $label$16
	$4 = *($18 + [496])
	*($18 + [312]) = [44]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($18 + [416]), ($4 + [36]), ($18 + [312]))
	$4 = *($18 + [416])
	if ( ((int_32)*($18 + [420]) != (int_32)$4) ){ goto $label$33 }
	$17 = (int_64)0
	goto $label$32 
	
.LABEL $label$33
	$5 = (($18 + [400]) | [1])
	$17 = (int_64)0
	$11 = [0]
	$15 = (int_64)0
	
.LOOP $label$34:
	*($18 + [312]) = [58]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($18 + [384]), ($4 + ((int_32)$11 * (int_32)[12])), ($18 + [312]))
	CALL $150(($18 + [400]), (*($18 + [384]) + [12]))
	$4 = *($18 + [400])
	$6 = ($4 & [1])
	if ( $6 ){ goto $label$39 }
	$1 = (int_64)0
	$14 = uint_32($4 >> [1])
	if ( ($14 == 0) ){ goto $label$35 }
	$4 = $5
	
.LOOP $label$40:
	$9 = *($4)
	if ( ((uint_32)(($9 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$41 }
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$41
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$14 = *($18 + [404])
	if ( ($14 == 0) ){ goto $label$37 }
	$4 = *((($18 + [400]) + [8]))
	$1 = (int_64)0
	
.LOOP $label$42:
	$9 = *($4)
	if ( ((uint_32)(($9 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$43 }
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$43
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$42 }
	
.LABEL $label$38
	if ( $6 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$1 = (int_64)0
	
.LABEL $label$36
	CALL $137(*((($18 + [400]) + [8])))
	
.LABEL $label$35
	$9 = *($18 + [384])
	if ( ($9 == 0) ){ goto $label$44 }
	$4 = *($18 + [388])
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$46 }
	$14 = ([0] - $9)
	$4 = ($4 + [-12])
	
.LOOP $label$47:
	if ( ((*($4) & [1]) == 0) ){ goto $label$48 }
	CALL $137(*(($4 + [8])))
	
.LABEL $label$48
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $14) != (int_32)[-12]) ){ goto $label$47 }
	$4 = *($18 + [384])
	goto $label$45 
	
.LABEL $label$46
	$4 = $9
	
.LABEL $label$45
	*($18 + [388]) = $9
	CALL $137($4)
	
.LABEL $label$44
	$15 = ( $1 ? $15 : ((int_64)$1 > (int_64)$15) )
	$17 = ((int_64)$1 + (int_64)$17)
	$2 = ((int_64)$1 + (int_64)$2)
	$4 = *($18 + [416])
	$11 = ($11 + [1])
	if ( ($11 <= ((int_32)(*($18 + [420]) - $4) / (int_32)[12])) ){ goto $label$34 }
	
.LABEL $label$32
	CALL $57(($18 + [312]), $0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($18 + [320])), [704])
	$1 = ((int_64)*($18 + [312]) + (int_64)*($3))
	*($18 + [312]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($18 + [312]) < (int_64)4611686018427387904), [784])
	CALL $58(($0 + [8]), ($18 + [312]), *($0))
	CALL eosio_assert(((float_64)((float_64)(CASTING float_64)(int_64 $2) * (float_64)(float_64)1e4) == (float_64)(CASTING float_64)(int_64 *($3))), [1856])
	$7 = ((int_64)$15 * (int_64)25)
	$8 = *($3 + [16])
	$1 = (int_64)0
	$15 = (int_64)59
	$4 = [1472]
	$16 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$54 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$14 = ($14 + [165])
	goto $label$52 
	
.LABEL $label$54
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$50
	$4 = ($4 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$2 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$49 }
	$1 = ((int_64)$13 * (int_64)7)
	if ( ((int_64)$8 != (int_64)$16) ){ goto $label$56 }
	$4 = [1]
	if ( ((int_64)*(($3 + [8])) == (int_64)1397703940) ){ goto $label$55 }
	
.LABEL $label$56
	$4 = [0]
	
.LABEL $label$55
	$1 = ((int_64)$7 + (int_64)$1)
	CALL eosio_assert($4, [1888])
	CALL memset(($18 + [240]), [0], [72])
	$4 = CALL $71(($18 + [240]))
	$14 = ($0 + [48])
	CALL $72(($18 + [312]), $14, $4)
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$57 }
	CALL $137(*(($4 + [24])))
	
.LABEL $label$57
	CALL eosio_assert(((int_64)*($18 + [320]) == (int_64)$10), [1744])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) > (uint_32)*($18 + [340])), [1904])
	CALL eosio_assert(((uint_32)*($18 + [344]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [1936])
	*($18 + [368]) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 $1) * (float_64)(float_64)1e4) + (float_64)(CASTING float_64)(int_64 *($18 + [368]))))
	CALL eosio_assert(((int_64)*((($18 + [312]) + [48])) == (int_64)*(($18 + [376]))), [1968])
	CALL eosio_assert(((int_64)*($18 + [352]) >= (int_64)*($18 + [368])), [2032])
	CALL $73($14, ($18 + [312]), *($0))
	*($18 + [224]) = (int_64)0
	*($18 + [232]) = [0]
	$14 = *($4 + [24])
	$9 = ($14 & [1])
	$4 = *($18 + [496])
	CALL $143(($18 + [224]), ( *(($4 + [32])) ? ($4 + [25]) : $9 ), ( *(($4 + [28])) ? uint_32($14 >> [1]) : $9 ))
	CALL $144(($18 + [224]), [2080])
	$14 = *($4 + [36])
	$9 = ($14 & [1])
	$4 = *($18 + [496])
	CALL $143(($18 + [224]), ( *(($4 + [44])) ? ($4 + [37]) : $9 ), ( *(($4 + [40])) ? uint_32($14 >> [1]) : $9 ))
	*(($14 = (($18 + [184]) + [32]))) = [0]
	$1 = *($0)
	*($18 + [184]) = $1
	*($18 + [192]) = $10
	*($18 + [200]) = (int_64)-1
	*($18 + [208]) = (int_64)0
	$4 = CALL db_find_i64($1, $10, (int_64)4229553099840057344, *($18 + [536]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$59 }
	CALL eosio_assert(((int_32)*(CALL $54(($18 + [184]), $4) + [56]) == (int_32)($18 + [184])), [224])
	CALL eosio_assert([0], [2096])
	goto $label$58 
	
.LABEL $label$59
	$1 = *($0)
	*($18 + [108]) = $3
	*($18 + [104]) = ($18 + [224])
	*($18 + [112]) = ($18 + [536])
	*($18 + [64]) = $1
	CALL eosio_assert(((int_64)*($18 + [184]) == (int_64)CALL $fimport$3()), [352])
	*($18 + [244]) = ($18 + [104])
	*($18 + [240]) = ($18 + [184])
	*($18 + [248]) = ($18 + [64])
	$4 = CALL $136([72])
	CALL $94($4)
	*($4 + [56]) = ($18 + [184])
	CALL $119(($18 + [240]), $4)
	*($18 + [168]) = $4
	$1 = *($4)
	*($18 + [240]) = $1
	$11 = *($4 + [60])
	*($18 + [48]) = $11
	$9 = *((($18 + [184]) + [28]))
	if ( ((uint_32)$9 >= (uint_32)*($14)) ){ goto $label$61 }
	*($9 + [8]) = $1
	*($9 + [16]) = $11
	*($18 + [168]) = [0]
	*($9) = $4
	*(($18 + [212])) = ($9 + [24])
	goto $label$60 
	
.LABEL $label$61
	CALL $96(($18 + [208]), ($18 + [168]), ($18 + [240]), ($18 + [48]))
	
.LABEL $label$60
	$4 = *($18 + [168])
	*($18 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$58 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$62 }
	CALL $137(*(($4 + [16])))
	
.LABEL $label$62
	CALL $137($4)
	
.LABEL $label$58
	CALL $120($0, ($18 + [536]), $3)
	CALL $121($0)
	*($18 + [176]) = (int_64)1397703940
	$1 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)1e4) * (float_64)(float_64)0.125) + (float_64)((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $17) * (float_64)(float_64)1e4) * (float_64)(float_64)3) / (float_64)(float_64)28)))
	*($18 + [168]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [128])
	$1 = (uint_64)*($18 + [176]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	
.LOOP $label$67:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$67 }
	
.LABEL $label$66
	$14 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	$14 = [0]
	
.LABEL $label$63
	CALL eosio_assert($14, [192])
	if ( ((uint_32)((int_32)(*($18 + [500]) - *($18 + [496])) / (int_32)[12]) <= (uint_32)[4]) ){ goto $label$68 }
	CALL memset(($18 + [104]), [0], [64])
	*(($4 = (($18 + [104]) + [24]))) = (int_64)1398362884
	*($18 + [120]) = (int_64)0
	CALL eosio_assert([1], [128])
	$9 = ($0 + [208])
	$1 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$72 }
	
.LOOP $label$73:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$73 }
	
.LABEL $label$72
	$14 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$14 = [0]
	
.LABEL $label$69
	CALL eosio_assert($14, [192])
	*(($18 + [160])) = [0]
	*($18 + [152]) = (int_64)0
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$75 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$9), [224])
	if ( $4 ){ goto $label$74 }
	$4 = ($18 + [104])
	goto $label$74 
	
.LABEL $label$75
	$4 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$76 }
	$4 = CALL $29($9, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$9), [224])
	goto $label$74 
	
.LABEL $label$76
	$4 = ($18 + [104])
	
.LABEL $label$74
	CALL memcpy(($18 + [240]), $4, [48])
	$6 = (($18 + [240]) + [48])
	CALL $150($6, ($4 + [48]))
	if ( ((*($18 + [152]) & [1]) == 0) ){ goto $label$77 }
	CALL $137(*(($18 + [160])))
	
.LABEL $label$77
	$4 = *($18 + [496])
	if ( (*($4 + [48]) & [1]) ){ goto $label$79 }
	$4 = (($4 + [48]) + [1])
	goto $label$78 
	
.LABEL $label$79
	$4 = *(($4 + [56]))
	
.LABEL $label$78
	$14 = [-1]
	
.LOOP $label$80:
	$9 = ($4 + $14)
	$11 = ($14 + [1])
	$14 = $11
	if ( *(($9 + [1])) ){ goto $label$80 }
	$13 = (CASTING uint_64)(uint_32 $11)
	$1 = (int_64)0
	$2 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$81:
	$15 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$13) ){ goto $label$82 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$14 = ($14 + [165])
	goto $label$83 
	
.LABEL $label$84
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$86 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$85 
	
.LABEL $label$86
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$85
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$81 }
	CALL eosio_assert(CALL $fimport$16($16), [2144])
	CALL eosio_assert(((int_64)$16 != (int_64)*($18 + [536])), [2176])
	$12 = *($0)
	$1 = (int_64)0
	$15 = (int_64)59
	$4 = [960]
	$13 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$92 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$14 = ($14 + [165])
	goto $label$90 
	
.LABEL $label$92
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$88
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$2 | (int_64)$13)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$87 }
	*($18 + [56]) = $13
	*($18 + [48]) = $12
	$1 = (int_64)0
	$15 = (int_64)59
	$4 = [1472]
	$13 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$98 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$14 = ($14 + [165])
	goto $label$96 
	
.LABEL $label$98
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$94
	$4 = ($4 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$13 = ((int_64)$2 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$93 }
	$1 = (int_64)0
	$15 = (int_64)59
	$4 = [80]
	$12 = (int_64)0
	
.LOOP $label$99:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$104 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$14 = ($14 + [165])
	goto $label$102 
	
.LABEL $label$104
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$103
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$101
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$100
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$2 | (int_64)$12)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$99 }
	$15 = *(($3 + [8]))
	$1 = ((int_64)((int_64)$1 >> (int_64)63) << (int_64)3) | (int_64)(uint_64)$1 >> (uint_64)(int_64)61
	$1 = *($3)
	$2 = ((int_64)$1 << (int_64)3)
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$1)) < (int_64)0) : (int_64)($1 == 0) ), [2208])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [2240])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	CALL $43(($18 + [32]), $6, [2272])
	*(($18 + [128])) = $15
	*(($18 + [140])) = *($18 + [36])
	*($18 + [112]) = $16
	$4 = (($18 + [32]) + [8])
	*(($18 + [144])) = *($4)
	*($18 + [104]) = *($0)
	*($18 + [120]) = ((int_64)$2 / (int_64)100)
	*($18 + [136]) = *($18 + [32])
	*($18 + [32]) = [0]
	*($18 + [36]) = [0]
	*($4) = [0]
	$4 = CALL $85(($18 + [64]), ($18 + [48]), $13, $12, ($18 + [104]))
	CALL $46(($18 + [544]), $4)
	$14 = *($18 + [544])
	CALL send_inline($14, (*($18 + [548]) - $14))
	$14 = *($18 + [544])
	if ( ($14 == 0) ){ goto $label$105 }
	*($18 + [548]) = $14
	CALL $137($14)
	
.LABEL $label$105
	$14 = *($4 + [28])
	if ( ($14 == 0) ){ goto $label$106 }
	*(($4 + [32])) = $14
	CALL $137($14)
	
.LABEL $label$106
	$14 = *($4 + [16])
	if ( ($14 == 0) ){ goto $label$107 }
	*(($4 + [20])) = $14
	CALL $137($14)
	
.LABEL $label$107
	if ( ((*(($18 + [136])) & [1]) == 0) ){ goto $label$108 }
	CALL $137(*(($18 + [144])))
	
.LABEL $label$108
	if ( ((*($18 + [32]) & [1]) == 0) ){ goto $label$109 }
	CALL $137(*(($18 + [40])))
	
.LABEL $label$109
	$15 = *(($3 + [8]))
	$1 = ((int_64)((int_64)$1 >> (int_64)63) << (int_64)3) | (int_64)(uint_64)$1 >> (uint_64)(int_64)61
	$1 = *($3)
	$2 = ((int_64)$1 << (int_64)3)
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$1)) < (int_64)0) : (int_64)($1 == 0) ), [2208])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [2240])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	CALL eosio_assert(((int_64)$15 == (int_64)*((($18 + [168]) + [8]))), [1312])
	$1 = (int_64)
	*($18 + [168]) = $1(*($18 + [168]) - ((int_64)$2 / (int_64)100)))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1360])
	CALL eosio_assert(((int_64)*($18 + [168]) < (int_64)4611686018427387904), [1392])
	if ( ((*(($18 + [288])) & [1]) == 0) ){ goto $label$68 }
	CALL $137(*(($18 + [296])))
	
.LABEL $label$68
	CALL $122($0, ($18 + [168]))
	$9 = *($18 + [208])
	if ( ($9 == 0) ){ goto $label$110 }
	$11 = ($18 + [212])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$112 }
	
.LOOP $label$113:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$114 }
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$115 }
	CALL $137(*(($14 + [16])))
	
.LABEL $label$115
	CALL $137($14)
	
.LABEL $label$114
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$113 }
	$4 = *(($18 + [208]))
	goto $label$111 
	
.LABEL $label$112
	$4 = $9
	
.LABEL $label$111
	*($11) = $9
	CALL $137($4)
	
.LABEL $label$110
	if ( ((*($18 + [224]) & [1]) == 0) ){ goto $label$116 }
	CALL $137(*(($18 + [232])))
	
.LABEL $label$116
	if ( ((*($18 + [328]) & [1]) == 0) ){ goto $label$117 }
	CALL $137(*(($18 + [336])))
	
.LABEL $label$117
	$9 = *($18 + [416])
	if ( ($9 == 0) ){ goto $label$118 }
	$4 = *($18 + [420])
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$120 }
	$14 = ([0] - $9)
	$4 = ($4 + [-12])
	
.LOOP $label$121:
	if ( ((*($4) & [1]) == 0) ){ goto $label$122 }
	CALL $137(*(($4 + [8])))
	
.LABEL $label$122
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $14) != (int_32)[-12]) ){ goto $label$121 }
	$4 = *($18 + [416])
	goto $label$119 
	
.LABEL $label$120
	$4 = $9
	
.LABEL $label$119
	*($18 + [420]) = $9
	CALL $137($4)
	
.LABEL $label$118
	$9 = *($18 + [464])
	if ( ($9 == 0) ){ goto $label$123 }
	$4 = *($18 + [468])
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$125 }
	$14 = ([0] - $9)
	$4 = ($4 + [-12])
	
.LOOP $label$126:
	if ( ((*($4) & [1]) == 0) ){ goto $label$127 }
	CALL $137(*(($4 + [8])))
	
.LABEL $label$127
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $14) != (int_32)[-12]) ){ goto $label$126 }
	$4 = *($18 + [464])
	goto $label$124 
	
.LABEL $label$125
	$4 = $9
	
.LABEL $label$124
	*($18 + [468]) = $9
	CALL $137($4)
	
.LABEL $label$123
	$9 = *($18 + [496])
	if ( ($9 == 0) ){ goto $label$1 }
	$4 = *($18 + [500])
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$129 }
	$14 = ([0] - $9)
	$4 = ($4 + [-12])
	
.LOOP $label$130:
	if ( ((*($4) & [1]) == 0) ){ goto $label$131 }
	CALL $137(*(($4 + [8])))
	
.LABEL $label$131
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $14) != (int_32)[-12]) ){ goto $label$130 }
	$4 = *($18 + [496])
	goto $label$128 
	
.LABEL $label$129
	$4 = $9
	
.LABEL $label$128
	*($18 + [500]) = $9
	CALL $137($4)
	
.LABEL $label$1
	*([0] + [4]) = ($18 + [560])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [64])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	$5 = ($1 + [16])
	CALL $139($5, ($3 + [16]))
	$4 = CALL memcpy(($1 + [28]), ($3 + [28]), [44])
	CALL eosio_assert([1], [544])
	$3 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [56])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $3)
	*($9 + [24]) = ($9 + [8])
	*($9 + [40]) = $5
	*($9 + [44]) = $4
	*($9 + [32]) = $1
	*($9 + [36]) = ($1 + [8])
	*($9 + [48]) = ($1 + [32])
	*($9 + [52]) = ($1 + [40])
	*($9 + [56]) = ($1 + [56])
	CALL $79(($9 + [32]), ($9 + [24]))
	CALL db_update_i64(*($1 + [76]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$5 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [64])
}

void .FUNC _ZN12runrunrunrun5dobetERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [224])
	*([0] + [4]) = $23
	$20 = (int_64)0
	$22 = (int_64)59
	$18 = [1296]
	$21 = (int_64)0
	
.LOOP $label$1:
	$19 = (int_64)0
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$2 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$13 = ($13 + [165])
	goto $label$3 
	
.LABEL $label$4
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$2
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$19 | (int_64)$21)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$1 }
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [960]
	$16 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$10 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$13 = ($13 + [165])
	goto $label$8 
	
.LABEL $label$10
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$6
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$16 = ((int_64)$22 | (int_64)$16)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$5 }
	CALL require_auth2($21, $16)
	CALL prints([1536])
	$18 = *($2)
	$13 = ($18 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $13 ), ( *($2 + [4]) ? uint_32($18 >> [1]) : $13 ))
	CALL prints([1552])
	$18 = *($3)
	$13 = ($18 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $13 ), ( *($3 + [4]) ? uint_32($18 >> [1]) : $13 ))
	CALL memset(($23 + [96]), [0], [64])
	*((($23 + [96]) + [24])) = (int_64)1398362884
	*($23 + [112]) = (int_64)0
	CALL eosio_assert([1], [128])
	$9 = ($0 + [208])
	$20 = (int_64)5462355
	$18 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$13 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$13 = [0]
	
.LABEL $label$11
	CALL eosio_assert($13, [192])
	*(($23 + [152])) = [0]
	*($23 + [144]) = (int_64)0
	$18 = *(($0 + [236]))
	if ( ((int_32)$18 == (int_32)*(($0 + [232]))) ){ goto $label$17 }
	$18 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [64]) == (int_32)$9), [224])
	if ( $18 ){ goto $label$16 }
	$18 = ($23 + [96])
	goto $label$16 
	
.LABEL $label$17
	$18 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$18 }
	$18 = CALL $29($9, $18)
	CALL eosio_assert(((int_32)*($18 + [64]) == (int_32)$9), [224])
	goto $label$16 
	
.LABEL $label$18
	$18 = ($23 + [96])
	
.LABEL $label$16
	CALL memcpy(($23 + [160]), $18, [48])
	$4 = (($23 + [160]) + [48])
	CALL $150($4, ($18 + [48]))
	if ( ((*($23 + [144]) & [1]) == 0) ){ goto $label$19 }
	CALL $137(*(($23 + [152])))
	
.LABEL $label$19
	*($23 + [72]) = (int_64)-1
	*($23 + [80]) = [0]
	$20 = *($0)
	*($23 + [56]) = $20
	$22 = *($1)
	*($23 + [64]) = $22
	*((($23 + [56]) + [28])) = [0]
	*((($23 + [56]) + [32])) = [0]
	$18 = CALL db_lowerbound_i64($20, $22, (int_64)4229553099840057344, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$20 }
	$5 = ($0 + [8])
	$8 = (($23 + [96]) + [32])
	$7 = ($23 + [112])
	$6 = (($23 + [96]) + [48])
	$15 = (($23 + [96]) + [28])
	$20 = (int_64)1
	$17 = (int_64)0
	
.LOOP $label$21:
	$16 = $20
	$9 = CALL $54(($23 + [56]), $18)
	$10 = ($9 + [8])
	CALL $150(($23 + [40]), $10)
	*($23 + [32]) = CALL $55($0, $2, $3, ($23 + [40]))
	*($23 + [96]) = ($23 + [32])
	CALL eosio_assert([1], [304])
	CALL $56(($23 + [56]), $9, ($23 + [96]))
	CALL $57(($23 + [96]), $0)
	$14 = (($23 + [96]) + [8])
	CALL eosio_assert(((int_64)*(($9 + [32])) == (int_64)*($14)), [1312])
	$20 = (int_64)
	*($23 + [96]) = $20(*($23 + [96]) - *($9 + [24])))
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [1360])
	CALL eosio_assert(((int_64)*($23 + [96]) < (int_64)4611686018427387904), [1392])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($23 + [96]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1424])
	CALL $58($5, ($23 + [96]), *($0))
	CALL prints([1456])
	CALL printui(*($23 + [32]))
	$11 = ($9 + [24])
	if ( ((int_64)*($23 + [32]) == (int_64)0) ){ goto $label$23 }
	$12 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [960]
	$21 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$29 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$13 = ($13 + [165])
	goto $label$27 
	
.LABEL $label$29
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$25
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$24 }
	*((($23 + [16]) + [8])) = $21
	*($23 + [16]) = $12
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [1472]
	$21 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$20 > (uint_64)(int_64)10) ){ goto $label$35 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$13 = ($13 + [165])
	goto $label$33 
	
.LABEL $label$35
	$22 = (int_64)0
	if ( ((int_64)$20 == (int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$31
	$18 = ($18 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)1)
	if ( ((int_64)$20 != (int_64)13) ){ goto $label$30 }
	*($23 + [8]) = $21
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [80]
	$21 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$41 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$13 = ($13 + [165])
	goto $label$39 
	
.LABEL $label$41
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$37
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$36 }
	*($23) = $21
	*($14) = *($9)
	*(($7 + [12])) = *(($9 + [52]))
	*(($7 + [8])) = *(($9 + [48]))
	*(($7 + [4])) = *(($9 + [44]))
	*($7) = *($9 + [40])
	*($23 + [96]) = $12
	CALL $150($8, $4)
	CALL $59($0, ($23 + [16]), ($23 + [8]), $23, ($23 + [96]))
	$18 = ($9 + [40])
	if ( ((*($8) & [1]) == 0) ){ goto $label$22 }
	CALL $137(*((($23 + [96]) + [40])))
	goto $label$22 
	
.LABEL $label$23
	$18 = ($9 + [40])
	
.LABEL $label$22
	*($14) = *($9)
	*($23 + [96]) = *($1)
	CALL $150($7, $10)
	*($15) = *($9 + [20])
	*(($8 + [12])) = *(($11 + [12]))
	*(($8 + [8])) = *(($11 + [8]))
	*(($8 + [4])) = *(($11 + [4]))
	*($8) = *($11)
	*($6) = *($18)
	*(($6 + [8])) = *(($18 + [8]))
	$12 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [960]
	$21 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$47 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$13 = ($13 + [165])
	goto $label$45 
	
.LABEL $label$47
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$43
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$42 }
	*((($23 + [16]) + [8])) = $21
	*($23 + [16]) = $12
	$20 = (int_64)0
	$22 = (int_64)59
	$18 = [1488]
	$21 = (int_64)0
	
.LOOP $label$48:
	$19 = (int_64)0
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$49 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$13 = ($13 + [165])
	goto $label$50 
	
.LABEL $label$51
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$49
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$19 | (int_64)$21)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$48 }
	*($23 + [8]) = $21
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [1504]
	$21 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$57 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$13 = ($13 + [165])
	goto $label$55 
	
.LABEL $label$57
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$53
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$52 }
	*($23) = $21
	CALL $60($0, ($23 + [16]), ($23 + [8]), $23, ($23 + [96]))
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [864])
	$18 = CALL db_next_i64(*($9 + [60]), ($23 + [16]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$58 }
	CALL $54(($23 + [56]), $18)
	
.LABEL $label$58
	CALL $61(($23 + [56]), $9)
	if ( ((*($7) & [1]) == 0) ){ goto $label$59 }
	CALL $137(*((($23 + [96]) + [24])))
	
.LABEL $label$59
	if ( ((*($23 + [40]) & [1]) == 0) ){ goto $label$60 }
	CALL $137(*((($23 + [40]) + [8])))
	
.LABEL $label$60
	if ( ((int_64)$17 > (int_64)9) ){ goto $label$61 }
	$20 = ((int_64)$16 + (int_64)1)
	$17 = $16
	$18 = CALL db_lowerbound_i64(*($23 + [56]), *((($23 + [56]) + [8])), (int_64)4229553099840057344, (int_64)0)
	if ( ((int_32)$18 >= (int_32)[0]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$61
	$16 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [960]
	$21 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$67 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$13 = ($13 + [165])
	goto $label$65 
	
.LABEL $label$67
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$63
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$62 }
	*($23 + [24]) = $21
	*($23 + [16]) = $16
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [1520]
	$21 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$20 > (uint_64)(int_64)4) ){ goto $label$73 }
	$13 = *($18)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$13 = ($13 + [165])
	goto $label$71 
	
.LABEL $label$73
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$69
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$68 }
	*($23 + [40]) = $21
	*($23 + [96]) = *($1)
	CALL $150(($23 + [104]), $2)
	CALL $150(($23 + [116]), $3)
	CALL $62($0, ($23 + [16]), $0, ($23 + [40]), ($23 + [96]))
	if ( ((*($23 + [116]) & [1]) == 0) ){ goto $label$74 }
	CALL $137(*(($23 + [124])))
	
.LABEL $label$74
	if ( ((*($23 + [104]) & [1]) == 0) ){ goto $label$20 }
	CALL $137(*(($23 + [112])))
	
.LABEL $label$20
	$9 = *($23 + [80])
	if ( ($9 == 0) ){ goto $label$75 }
	$0 = ($23 + [84])
	$18 = *($0)
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$77 }
	
.LOOP $label$78:
	$18 = ($18 + [-24])
	$13 = *($18)
	*($18) = [0]
	if ( ($13 == 0) ){ goto $label$79 }
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$80 }
	CALL $137(*(($13 + [16])))
	
.LABEL $label$80
	CALL $137($13)
	
.LABEL $label$79
	if ( ((int_32)$9 != (int_32)$18) ){ goto $label$78 }
	$18 = *(($23 + [80]))
	goto $label$76 
	
.LABEL $label$77
	$18 = $9
	
.LABEL $label$76
	*($0) = $9
	CALL $137($18)
	
.LABEL $label$75
	if ( ((*(($23 + [208])) & [1]) == 0) ){ goto $label$81 }
	CALL $137(*(($23 + [216])))
	
.LABEL $label$81
	*([0] + [4]) = ($23 + [224])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [96])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $25(($2 + [48]), ($2 + [8]))
	CALL $25(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $53(($2 + [48]), $2)
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [224])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $87($0, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [224])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [304])
	CALL $88($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $89($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $84(($6 + [52]), $1, $2, $3, $4)
	*($6 + [36]) = [1]
	$5 = CALL $64($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $65(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $137($0)
	
.LABEL $label$1
	CALL $66(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $137($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $137($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $150(($4 + [24]), ($1 + [8]))
	CALL $150(($4 + [8]), ($1 + [20]))
	*($4 + [40]) = $2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($4 + [40])), (int_32 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $1))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($4 + [16]))
	
.LABEL $label$2
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($4 + [32]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [48])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [608])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $136([72])
	CALL $94($6)
	*($6 + [56]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [20])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [40])
	CALL $95(($8 + [40]), ($8 + [32]))
	*($6 + [60]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $96(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($4 + [16])))
	
.LABEL $label$10
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [56])))
	
.LABEL $label$11
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $137($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$3 = *($1)
	$4 = *(*($2))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [128])
	$6 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [192])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = $4
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [544])
	$2 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [44])
	$6 = (CASTING uint_64)(uint_32 $7)
	$5 = ($1 + [8])
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	if ( ($2 <= [513]) ){ goto $label$8 }
	$7 = CALL malloc($2)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$7
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $2)
	*($8 + [16]) = $8
	*($8 + [28]) = $5
	*($8 + [24]) = $1
	*($8 + [32]) = ($1 + [20])
	*($8 + [36]) = ($1 + [24])
	*($8 + [40]) = ($1 + [40])
	CALL $93(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($1 + [60]), (int_64)0, $7, $2)
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($5 + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [128])
	$3 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [192])
	CALL $91($0, ($1 + [8]), *($1), $5)
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [112])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $117($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$5 = (([0] - $3) - $4)
	$4 = ($7 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $5) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$5 = ($0 + [4])
	
.LOOP $label$8:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($5)) > (uint_32)[7]), [96])
	CALL memcpy($4, *($5), [8])
	*($5) = (*($5) + [8])
	CALL $25($0, ($4 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($6 - $4) / (int_32)[24])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $4) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $136(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$7 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($4) = [0]
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $149($0)
	
.LABEL $label$2
	$2 = ($7 + ((int_32)$6 * (int_32)[24]))
	$7 = ($7 + ((int_32)$5 * (int_32)[24]))
	$6 = $7
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-24])
	
.LOOP $label$11:
	*(($7 + [-24])) = *($1)
	$4 = ($1 + [12])
	*(($7 + [-12])) = *($4)
	$5 = ($1 + [8])
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*($4) = [0]
	*(($1 + [16])) = [0]
	$7 = ($7 + [-24])
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$6 = ($4 + [-16])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $137(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $1) != (int_32)[-16]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $137($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	CALL $139(($6 + [8]), ($1 + [8]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	CALL $150(($1 + [8]), ($7 + [8]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $137($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $136($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	CALL $150(($6 + [8]), ($1 + [8]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $149($0)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [20]))
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$7 = *(*($0 + [4]))
	*($1) = *($7)
	$6 = [8]
	$3 = ($1 + [8])
	$2 = *($0)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$1 }
	CALL $114($3, *($7 + [8]), *(($7 + [12])))
	
.LABEL $label$1
	$7 = *($3)
	$4 = *(($1 + [12]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($4 - $7) / (int_32)[24]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [8])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$7 }
	$7 = CALL malloc($6)
	goto $label$6 
	
.LABEL $label$7
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$6
	*($9) = $7
	*($9 + [8]) = ($7 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [416])
	CALL memcpy($7, $1, [8])
	*($9 + [4]) = ($7 + [8])
	CALL $115($9, $3)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)7035937269232844800, *(*($0 + [8])), (int_64)7035937269232844800, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)7035937269232844800) ){ goto $label$9 }
	*(($2 + [16])) = (int_64)7035937269232844801
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $136(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [12])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($2 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $137($1)
	
.LABEL $label$11
	CALL $137($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $137($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$7 = *($3)
	*($1) = *($7)
	$3 = [8]
	$4 = ($1 + [8])
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$1 }
	CALL $114($4, *($7 + [8]), *(($7 + [12])))
	
.LABEL $label$1
	CALL eosio_assert([1], [544])
	$7 = *($4)
	$5 = *(($1 + [12]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($5 - $7) / (int_32)[24]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = *($7 + [8])
	$6 = ( *(($7 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$3 = (($6 + $3) + [8])
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$7 }
	$7 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$7 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$6
	*($9) = $7
	*($9 + [8]) = ($7 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [416])
	CALL memcpy($7, $1, [8])
	*($9 + [4]) = ($7 + [8])
	CALL $115($9, $4)
	CALL db_update_i64(*($1 + [28]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7035937269232844800) ){ goto $label$9 }
	*(($0 + [16])) = (int_64)7035937269232844801
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $136([40])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = $1
	CALL $112(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)7035937269232844800
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)7035937269232844800
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $113(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [12])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-16])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-16]) ){ goto $label$7 }
	$1 = *(($0 + [8]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $137($1)
	
.LABEL $label$4
	CALL $137($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $140($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $118 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [224])
	*([0] + [4]) = $13
	$12 = *($2 + [16])
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [976]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$12 == (int_64)$8), [2368])
	$5 = *($2 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)1314214404), [2368])
	CALL memset(($13 + [80]), [0], [64])
	*((($13 + [80]) + [24])) = (int_64)1398362884
	*($13 + [96]) = (int_64)0
	CALL eosio_assert([1], [128])
	$6 = ($0 + [208])
	$10 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$3 = [0]
	
.LABEL $label$5
	CALL eosio_assert($3, [192])
	*(($13 + [136])) = [0]
	*($13 + [128]) = (int_64)0
	$7 = *(($0 + [236]))
	if ( ((int_32)$7 == (int_32)*(($0 + [232]))) ){ goto $label$11 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [224])
	if ( $7 ){ goto $label$10 }
	$7 = ($13 + [80])
	goto $label$10 
	
.LABEL $label$11
	$7 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $29($6, $7)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [224])
	goto $label$10 
	
.LABEL $label$12
	$7 = ($13 + [80])
	
.LABEL $label$10
	CALL memcpy(($13 + [144]), $7, [48])
	CALL $150((($13 + [144]) + [48]), ($7 + [48]))
	if ( ((*($13 + [128]) & [1]) == 0) ){ goto $label$13 }
	CALL $137(*(($13 + [136])))
	
.LABEL $label$13
	$4 = *($2)
	CALL eosio_assert(((int_64)$4 > (int_64)*($13 + [160])), [2384])
	*(($13 + [172])) = *(($2 + [12]))
	*(($13 + [168])) = *(($2 + [8]))
	*(($13 + [164])) = *(($2 + [4]))
	*($13 + [176]) = $1
	*($13 + [160]) = *($2)
	CALL $30($6, ($13 + [144]), *($0))
	$1 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [960]
	$8 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$19 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$11 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$14 }
	*($13 + [32]) = $8
	*($13 + [24]) = $1
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [976]
	$8 = (int_64)0
	
.LOOP $label$20:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$21 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$3 = ($3 + [165])
	goto $label$22 
	
.LABEL $label$23
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$21
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$20 }
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [80]
	$1 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$29 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$25
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$1 = ((int_64)$11 | (int_64)$1)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$24 }
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [2448]
	$12 = (int_64)0
	
.LOOP $label$30:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$31 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$31
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$30 }
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [128])
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$3 = [0]
	
.LABEL $label$34
	CALL eosio_assert($3, [192])
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$7 = CALL strlen([2464])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$42 }
	*($13 + [8]) = ($7 << [1])
	$3 = (($13 + [8]) | [1])
	if ( $7 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$2 = (($7 + [16]) & [-16])
	$3 = CALL $136($2)
	*($13 + [8]) = ($2 | [1])
	*($13 + [16]) = $3
	*($13 + [12]) = $7
	
.LABEL $label$41
	CALL memcpy($3, [2464], $7)
	
.LABEL $label$40
	*(($3 + $7)) = [0]
	*(($13 + [104])) = $5
	*(($13 + [116])) = *($13 + [12])
	*($13 + [88]) = $12
	$7 = ($13 + [16])
	*(($13 + [120])) = *($7)
	*($13 + [80]) = *($0)
	*($13 + [96]) = $4
	*($13 + [112]) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*($7) = [0]
	$7 = CALL $85(($13 + [40]), ($13 + [24]), $8, $1, ($13 + [80]))
	CALL $46(($13 + [208]), $7)
	$3 = *($13 + [208])
	CALL send_inline($3, (*($13 + [212]) - $3))
	$3 = *($13 + [208])
	if ( ($3 == 0) ){ goto $label$43 }
	*($13 + [212]) = $3
	CALL $137($3)
	
.LABEL $label$43
	$3 = *($7 + [28])
	if ( ($3 == 0) ){ goto $label$44 }
	*(($7 + [32])) = $3
	CALL $137($3)
	
.LABEL $label$44
	$3 = *($7 + [16])
	if ( ($3 == 0) ){ goto $label$45 }
	*(($7 + [20])) = $3
	CALL $137($3)
	
.LABEL $label$45
	if ( ((*(($13 + [112])) & [1]) == 0) ){ goto $label$46 }
	CALL $137(*(($13 + [120])))
	
.LABEL $label$46
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$47 }
	CALL $137(*(($13 + [16])))
	
.LABEL $label$47
	if ( ((*(($13 + [192])) & [1]) == 0) ){ goto $label$48 }
	CALL $137(*(($13 + [200])))
	
.LABEL $label$48
	*([0] + [4]) = ($13 + [224])
	return (unreachable)
	
.LABEL $label$39
	CALL $138(($13 + [8]))
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = ($1 + [8])
	CALL $139($4, *($3))
	*($1 + [20]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = *($3 + [4])
	*($1 + [24]) = *($7)
	*(($1 + [32])) = *(($7 + [8]))
	CALL eosio_assert([1], [128])
	$6 = ($1 + [24])
	$5 = ($1 + [20])
	$8 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [192])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	*($1) = *(*($3 + [8]))
	$7 = *(($1 + [8]))
	$9 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [44])
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ($7 <= [513]) ){ goto $label$8 }
	$9 = CALL malloc($7)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$7
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	*($10 + [16]) = $10
	*($10 + [28]) = $4
	*($10 + [24]) = $1
	*($10 + [32]) = $5
	*($10 + [36]) = $6
	*($10 + [40]) = ($1 + [40])
	CALL $93(($10 + [24]), ($10 + [16]))
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)4229553099840057344, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $136($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $136($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $155 ()
{
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*(($7 = $8) + [44]) = $1
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [608])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($7 + [12]) = ($7 + [32])
	*($7 + [16]) = ($7 + [44])
	*($7 + [8]) = $0
	$4 = CALL $136([80])
	$5 = CALL $37($4, $0, ($7 + [8]))
	*($7 + [24]) = $4
	*($7 + [8]) = (int_64)3932090329724878848
	$1 = *($4 + [68])
	*($7 + [4]) = $1
	$3 = ($0 + [28])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = (int_64)3932090329724878848
	*($6 + [16]) = $1
	*($7 + [24]) = [0]
	*($6) = $4
	*($3) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($7 + [24]), ($7 + [8]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($4 + [56])))
	
.LABEL $label$10
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $136($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $149($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $137($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_64 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [160])
	*([0] + [4]) = $16
	*($16 + [128]) = [124]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($16 + [144]), $3, ($16 + [128]))
	$3 = *($16 + [144])
	*($16 + [112]) = [44]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($16 + [128]), $3, ($16 + [112]))
	$6 = (int_64)0
	$3 = *($16 + [128])
	if ( ((int_32)*($16 + [132]) == (int_32)$3) ){ goto $label$1 }
	$5 = ($1 + [1])
	$9 = (($16 + [80]) | [1])
	$4 = (($16 + [112]) | [1])
	$6 = (int_64)0
	$11 = ($1 + [4])
	$12 = [0]
	
.LOOP $label$2:
	*($16 + [48]) = [58]
	$10 = ((int_32)$12 * (int_32)[12])
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($16 + [96]), ($3 + $10), ($16 + [48]))
	CALL $150(($16 + [112]), *($16 + [96]))
	$13 = *($16 + [96])
	if ( ($13 == 0) ){ goto $label$3 }
	$3 = *($16 + [100])
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$5 }
	$7 = ([0] - $13)
	$3 = ($3 + [-12])
	
.LOOP $label$6:
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$7
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $7) != (int_32)[-12]) ){ goto $label$6 }
	$3 = *($16 + [96])
	goto $label$4 
	
.LABEL $label$5
	$3 = $13
	
.LABEL $label$4
	*($16 + [100]) = $13
	CALL $137($3)
	
.LABEL $label$3
	$15 = [1]
	$3 = ($3 & [1])
	$3 = *($1)
	$7 = ($3 & [1])
	$3 = *($16 + [112])
	$8 = uint_32($3 >> [1])
	$13 = ( *($16 + [116]) ? $8 : $7 )
	if ( ((int_32)$13 != (int_32)( *($11) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$8 }
	$3 = ( *(($1 + [8])) ? $5 : $3 )
	if ( $7 ){ goto $label$10 }
	if ( ($13 == 0) ){ goto $label$9 }
	$13 = ([0] - $8)
	$7 = $4
	
.LOOP $label$11:
	if ( ((int_32)*($7) != (int_32)*($3)) ){ goto $label$8 }
	$3 = ($3 + [1])
	$7 = ($7 + [1])
	$13 = ($13 + [1])
	if ( $13 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ($13 == 0) ){ goto $label$9 }
	if ( CALL memcmp(( *((($16 + [112]) + [8])) ? $4 : $7 ), $3, $13) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = *($16 + [128])
	*($16 + [48]) = [58]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($16 + [64]), ($3 + $10), ($16 + [48]))
	CALL $150(($16 + [80]), (*($16 + [64]) + [12]))
	$3 = *($16 + [80])
	$15 = ($3 & [1])
	if ( $15 ){ goto $label$16 }
	$14 = (int_64)0
	$7 = uint_32($3 >> [1])
	if ( ($7 == 0) ){ goto $label$12 }
	$3 = $9
	
.LOOP $label$17:
	$13 = *($3)
	if ( ((uint_32)(($13 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$18
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = *($16 + [84])
	if ( ($7 == 0) ){ goto $label$14 }
	$3 = *((($16 + [80]) + [8]))
	$14 = (int_64)0
	
.LOOP $label$19:
	$13 = *($3)
	if ( ((uint_32)(($13 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$20 }
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$20
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$19 }
	
.LABEL $label$15
	if ( $15 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$14 = (int_64)0
	
.LABEL $label$13
	CALL $137(*((($16 + [80]) + [8])))
	
.LABEL $label$12
	$13 = *($16 + [64])
	if ( ($13 == 0) ){ goto $label$21 }
	$3 = *($16 + [68])
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$23 }
	$7 = ([0] - $13)
	$3 = ($3 + [-12])
	
.LOOP $label$24:
	if ( ((*($3) & [1]) == 0) ){ goto $label$25 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$25
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $7) != (int_32)[-12]) ){ goto $label$24 }
	$3 = *($16 + [64])
	goto $label$22 
	
.LABEL $label$23
	$3 = $13
	
.LABEL $label$22
	*($16 + [68]) = $13
	CALL $137($3)
	
.LABEL $label$21
	$6 = ((int_64)((int_64)$14 * (int_64)7) + (int_64)$6)
	$15 = [0]
	
.LABEL $label$8
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$26 }
	CALL $137(*((($16 + [112]) + [8])))
	
.LABEL $label$26
	if ( ($15 == 0) ){ goto $label$1 }
	$3 = *($16 + [128])
	$12 = ($12 + [1])
	if ( ($12 <= ((int_32)(*($16 + [132]) - $3) / (int_32)[12])) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($16 + [144])
	*($16 + [48]) = [44]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($16 + [112]), ($3 + [12]), ($16 + [48]))
	$7 = *($16 + [112])
	if ( ((int_32)*($16 + [116]) == (int_32)$7) ){ goto $label$27 }
	$11 = ($2 + [1])
	$4 = (($16 + [16]) | [1])
	$5 = (($16 + [48]) | [1])
	$8 = ($2 + [4])
	$12 = [0]
	
.LOOP $label$28:
	*($16 + [31]) = [58]
	$1 = ((int_32)$12 * (int_32)[12])
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($16 + [32]), ($7 + $1), ($16 + [31]))
	CALL $150(($16 + [48]), *($16 + [32]))
	$13 = *($16 + [32])
	if ( ($13 == 0) ){ goto $label$29 }
	$3 = *($16 + [36])
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$31 }
	$7 = ([0] - $13)
	$3 = ($3 + [-12])
	
.LOOP $label$32:
	if ( ((*($3) & [1]) == 0) ){ goto $label$33 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$33
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $7) != (int_32)[-12]) ){ goto $label$32 }
	$3 = *($16 + [32])
	goto $label$30 
	
.LABEL $label$31
	$3 = $13
	
.LABEL $label$30
	*($16 + [36]) = $13
	CALL $137($3)
	
.LABEL $label$29
	$15 = [1]
	$3 = ($3 & [1])
	$3 = *($2)
	$7 = ($3 & [1])
	$3 = *($16 + [48])
	$10 = uint_32($3 >> [1])
	$13 = ( *($16 + [52]) ? $10 : $7 )
	if ( ((int_32)$13 != (int_32)( *($8) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$34 }
	$3 = ( *(($2 + [8])) ? $11 : $3 )
	if ( $7 ){ goto $label$36 }
	if ( ($13 == 0) ){ goto $label$35 }
	$13 = ([0] - $10)
	$7 = $5
	
.LOOP $label$37:
	if ( ((int_32)*($7) != (int_32)*($3)) ){ goto $label$34 }
	$3 = ($3 + [1])
	$7 = ($7 + [1])
	$13 = ($13 + [1])
	if ( $13 ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	if ( ($13 == 0) ){ goto $label$35 }
	if ( CALL memcmp(( *((($16 + [48]) + [8])) ? $5 : $7 ), $3, $13) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = *($16 + [112])
	*($16 + [31]) = [58]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc($16, ($3 + $1), ($16 + [31]))
	CALL $150(($16 + [16]), (*($16) + [12]))
	$3 = *($16 + [16])
	$15 = ($3 & [1])
	if ( $15 ){ goto $label$42 }
	$14 = (int_64)0
	$7 = uint_32($3 >> [1])
	if ( ($7 == 0) ){ goto $label$38 }
	$3 = $4
	
.LOOP $label$43:
	$13 = *($3)
	if ( ((uint_32)(($13 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$44 }
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$44
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$7 = *($16 + [20])
	if ( ($7 == 0) ){ goto $label$40 }
	$3 = *((($16 + [16]) + [8]))
	$14 = (int_64)0
	
.LOOP $label$45:
	$13 = *($3)
	if ( ((uint_32)(($13 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$46 }
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$46
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$45 }
	
.LABEL $label$41
	if ( $15 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$14 = (int_64)0
	
.LABEL $label$39
	CALL $137(*((($16 + [16]) + [8])))
	
.LABEL $label$38
	$13 = *($16)
	if ( ($13 == 0) ){ goto $label$47 }
	$3 = *($16 + [4])
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$49 }
	$7 = ([0] - $13)
	$3 = ($3 + [-12])
	
.LOOP $label$50:
	if ( ((*($3) & [1]) == 0) ){ goto $label$51 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$51
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $7) != (int_32)[-12]) ){ goto $label$50 }
	$3 = *($16)
	goto $label$48 
	
.LABEL $label$49
	$3 = $13
	
.LABEL $label$48
	*($16 + [4]) = $13
	CALL $137($3)
	
.LABEL $label$47
	$6 = ((int_64)((int_64)$14 * (int_64)25) + (int_64)$6)
	$15 = [0]
	
.LABEL $label$34
	if ( ((*($16 + [48]) & [1]) == 0) ){ goto $label$52 }
	CALL $137(*((($16 + [48]) + [8])))
	
.LABEL $label$52
	if ( ($15 == 0) ){ goto $label$53 }
	$7 = *($16 + [112])
	$12 = ($12 + [1])
	if ( ($12 <= ((int_32)(*($16 + [116]) - $7) / (int_32)[12])) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$53
	$7 = *($16 + [112])
	
.LABEL $label$27
	$14 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $6) * (float_64)(float_64)1e4))
	if ( ($7 == 0) ){ goto $label$54 }
	$3 = *($16 + [116])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$56 }
	$13 = ([0] - $7)
	$3 = ($3 + [-12])
	
.LOOP $label$57:
	if ( ((*($3) & [1]) == 0) ){ goto $label$58 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$58
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $13) != (int_32)[-12]) ){ goto $label$57 }
	$3 = *($16 + [112])
	goto $label$55 
	
.LABEL $label$56
	$3 = $7
	
.LABEL $label$55
	*($16 + [116]) = $7
	CALL $137($3)
	
.LABEL $label$54
	$13 = *($16 + [128])
	if ( ($13 == 0) ){ goto $label$59 }
	$3 = *($16 + [132])
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$61 }
	$7 = ([0] - $13)
	$3 = ($3 + [-12])
	
.LOOP $label$62:
	if ( ((*($3) & [1]) == 0) ){ goto $label$63 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$63
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $7) != (int_32)[-12]) ){ goto $label$62 }
	$3 = *($16 + [128])
	goto $label$60 
	
.LABEL $label$61
	$3 = $13
	
.LABEL $label$60
	*($16 + [132]) = $13
	CALL $137($3)
	
.LABEL $label$59
	$13 = *($16 + [144])
	if ( ($13 == 0) ){ goto $label$64 }
	$3 = *($16 + [148])
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$66 }
	$7 = ([0] - $13)
	$3 = ($3 + [-12])
	
.LOOP $label$67:
	if ( ((*($3) & [1]) == 0) ){ goto $label$68 }
	CALL $137(*(($3 + [8])))
	
.LABEL $label$68
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $7) != (int_32)[-12]) ){ goto $label$67 }
	$3 = *($16 + [144])
	goto $label$65 
	
.LABEL $label$66
	$3 = $13
	
.LABEL $label$65
	*($16 + [148]) = $13
	CALL $137($3)
	
.LABEL $label$64
	*([0] + [4]) = ($16 + [160])
	return $14
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $7) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $7) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $136(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	CALL $150(($7 + [8]), ($1 + [8]))
	$2 = ($5 + ((int_32)$6 * (int_32)[24]))
	$3 = ($7 + [24])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$6 }
	$4 = ([0] - $6)
	$6 = ($1 + [-24])
	
.LOOP $label$7:
	*(($7 + [-24])) = *($6)
	$1 = ($6 + [12])
	*(($7 + [-12])) = *($1)
	$5 = ($6 + [8])
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*($1) = [0]
	*(($6 + [16])) = [0]
	$7 = ($7 + [-24])
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$7 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $6
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	$7 = ([0] - $1)
	$6 = ($6 + [-16])
	
.LOOP $label$9:
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($6 + [8])))
	
.LABEL $label$10
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $7) != (int_32)[-16]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $137($1)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	CALL db_get_i64($1, $5, $4)
	*($7 + [36]) = $5
	*($7 + [32]) = $5
	$6 = ($5 + $4)
	*($7 + [40]) = $6
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($5)
	$6 = *(($7 + [40]))
	$5 = *($7 + [36])
	
.LABEL $label$7
	*(($4 = CALL $136([40])) + [16]) = [0]
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [24]) = $0
	CALL eosio_assert(((uint_32)($6 - $5) > (uint_32)[7]), [96])
	CALL memcpy($4, $5, [8])
	*($7 + [36]) = ($5 + [8])
	CALL $116(($7 + [32]), ($4 + [8]))
	*($4 + [28]) = $1
	*($7 + [24]) = $4
	*($7 + [16]) = (int_64)7035937269232844800
	$6 = *($4 + [28])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = (int_64)7035937269232844800
	*($5 + [16]) = $6
	*($7 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $113(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$1 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [12])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$12 }
	$6 = ([0] - $3)
	$5 = ($5 + [-16])
	
.LOOP $label$13:
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL $137(*(($5 + [8])))
	
.LABEL $label$14
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$13 }
	$5 = *(($1 + [8]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $137($5)
	
.LABEL $label$10
	CALL $137($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $4
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [96])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12runrunrunrun5claimEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [192])
	*([0] + [4]) = $20
	CALL require_auth($1)
	$19 = [0]
	CALL memset(($20 + [56]), [0], [64])
	*((($20 + [56]) + [24])) = (int_64)1398362884
	*($20 + [72]) = (int_64)0
	CALL eosio_assert([1], [128])
	$17 = ($0 + [208])
	$18 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [192])
	*(($20 + [112])) = [0]
	*($20 + [104]) = (int_64)0
	$19 = *(($0 + [236]))
	if ( ((int_32)$19 == (int_32)*(($0 + [232]))) ){ goto $label$7 }
	$19 = *(($19 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [64]) == (int_32)$17), [224])
	if ( $19 ){ goto $label$6 }
	$19 = ($20 + [56])
	goto $label$6 
	
.LABEL $label$7
	$19 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$8 }
	$19 = CALL $29($17, $19)
	CALL eosio_assert(((int_32)*($19 + [64]) == (int_32)$17), [224])
	goto $label$6 
	
.LABEL $label$8
	$19 = ($20 + [56])
	
.LABEL $label$6
	CALL memcpy(($20 + [120]), $19, [48])
	$2 = (($20 + [120]) + [48])
	CALL $150($2, ($19 + [48]))
	if ( ((*($20 + [104]) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($20 + [112])))
	
.LABEL $label$9
	$19 = [0]
	*(($20 + [88])) = [0]
	*($20 + [64]) = $1
	*($20 + [80]) = (int_64)0
	*($20 + [56]) = *($0)
	$3 = ($0 + [248])
	*($20 + [72]) = (int_64)-1
	$10 = ($0 + [264])
	$18 = *($10)
	if ( ((int_64)$18 != (int_64)-1) ){ goto $label$10 }
	$18 = (int_64)0
	$17 = CALL db_lowerbound_i64(*($3), *(($0 + [256])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$11 }
	CALL $39($3, $17)
	*($20 + [188]) = [0]
	*($20 + [184]) = $3
	$18 = *(*(CALL $40(($20 + [184])) + [4]))
	$18 = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*(($0 + [264])) = $18
	
.LABEL $label$10
	CALL eosio_assert((uint_64)($18 <= (int_64)-2), [640])
	$18 = *($10)
	CALL eosio_assert([1], [128])
	$11 = ((int_64)$18 + (int_64)-1)
	$18 = (int_64)5133650
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$10 = [1]
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [192])
	$5 = (int_64)0
	$12 = (($20 + [56]) + [8])
	$19 = CALL db_lowerbound_i64(*($20 + [56]), *($12), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$17 }
	$4 = ((int_64)1314214404 == (int_64)1314214404)
	$13 = ($0 + [272])
	$14 = ($0 + [276])
	$15 = ($0 + [256])
	$16 = ($0 + [248])
	$5 = (int_64)0
	
.LOOP $label$18:
	$6 = CALL $41(($20 + [56]), $19)
	$18 = *($6)
	if ( ((int_64)$18 == (int_64)$11) ){ goto $label$17 }
	$7 = *($6 + [8])
	$8 = *($13)
	$17 = *($14)
	if ( ((int_32)$17 == (int_32)$8) ){ goto $label$19 }
	$19 = ($17 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$20:
	if ( ((int_64)*(*($19)) == (int_64)$18) ){ goto $label$19 }
	$17 = $19
	$10 = ($19 + [-24])
	$19 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((int_32)$17 == (int_32)$8) ){ goto $label$22 }
	$19 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [32]) == (int_32)$3), [224])
	goto $label$21 
	
.LABEL $label$22
	$19 = CALL $39($3, CALL $fimport$6(*($16), *($15), (int_64)-3665743729458675712, $18))
	CALL eosio_assert(((int_32)*($19 + [32]) == (int_32)$3), [224])
	
.LABEL $label$21
	$7 = ((int_64)((int_64)$7 * (int_64)21000000) / (int_64)*($19 + [16]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [128])
	$18 = (int_64)5133650
	$19 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$10 = [1]
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$10 = [0]
	
.LABEL $label$23
	CALL eosio_assert($10, [192])
	CALL eosio_assert($4, [704])
	$5 = ((int_64)$7 + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [784])
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [864])
	$19 = CALL db_next_i64(*($6 + [28]), ($20 + [184]))
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$28 }
	CALL $41(($20 + [56]), $19)
	
.LABEL $label$28
	CALL $42(($20 + [56]), $6)
	$19 = CALL db_lowerbound_i64(*($20 + [56]), *($12), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$19 > (int_32)[-1]) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert(((int_64)$5 > (int_64)0), [896])
	*($20 + [48]) = (int_64)1314214404
	*($20 + [40]) = $5
	CALL $43(($20 + [24]), $2, [944])
	*((($20 + [8]) + [8])) = *($20 + [48])
	*($20 + [8]) = *($20 + [40])
	CALL $44($0, $1, ($20 + [8]), ($20 + [24]))
	if ( ((*($20 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL $137(*($20 + [32]))
	
.LABEL $label$29
	$17 = *($20 + [80])
	if ( ($17 == 0) ){ goto $label$30 }
	$9 = ($20 + [84])
	$19 = *($9)
	if ( ((int_32)$19 == (int_32)$17) ){ goto $label$32 }
	
.LOOP $label$33:
	$19 = ($19 + [-24])
	$10 = *($19)
	*($19) = [0]
	if ( ($10 == 0) ){ goto $label$34 }
	CALL $137($10)
	
.LABEL $label$34
	if ( ((int_32)$17 != (int_32)$19) ){ goto $label$33 }
	$19 = *(($20 + [80]))
	goto $label$31 
	
.LABEL $label$32
	$19 = $17
	
.LABEL $label$31
	*($9) = $17
	CALL $137($19)
	
.LABEL $label$30
	if ( ((*(($20 + [168])) & [1]) == 0) ){ goto $label$35 }
	CALL $137(*(($20 + [176])))
	
.LABEL $label$35
	*([0] + [4]) = ($20 + [192])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [96])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $25(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $26(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $137(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC _ZN12runrunrunrun9setsloganEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	CALL require_auth($1)
	$6 = [0]
	*((($3 = CALL memset($3, [0], [64])) + [24])) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [128])
	$4 = ($0 + [208])
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [192])
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	$6 = *(($0 + [236]))
	if ( ((int_32)$6 == (int_32)*(($0 + [232]))) ){ goto $label$8 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [224])
	if ( $6 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $29($4, $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [224])
	goto $label$6 
	
.LABEL $label$7
	$6 = $3
	
.LABEL $label$6
	CALL memcpy(($3 + [64]), $6, [48])
	$7 = (($3 + [64]) + [48])
	CALL $150($7, ($6 + [48]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($3 + [56])))
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*($3 + [104]) == (int_64)$1), [288])
	CALL $139($7, $2)
	CALL $30($4, ($3 + [64]), *($0))
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($3 + [120])))
	
.LABEL $label$10
	*([0] + [4]) = ($3 + [128])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $27($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $141($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $136($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $141($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $137($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $138($7)
	return (unreachable)
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [112])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $28($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [96])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $150($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $150(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = (*([0] + [4]) - [144])
	*([0] + [4]) = $1
	$5 = [0]
	$6 = CALL $71($1)
	$2 = ($0 + [48])
	$1 = CALL memset($1, [0], [72])
	CALL $72(($1 + [72]), $2, $6)
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $137(*(($6 + [24])))
	
.LABEL $label$1
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)1)
	CALL $97($1, $0)
	$4 = *($1)
	$3 = *($1 + [8])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	*((($1 + [72]) + [48])) = $3
	*($1 + [112]) = ((int_64)$4 / (int_64)2)
	CALL eosio_assert([1], [128])
	$4 = (int_64)5459781
	
.LOOP $label$3:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($6, [192])
	*(($1 + [136])) = (int_64)1397703940
	*($1 + [128]) = (int_64)0
	$5 = *($1 + [104])
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)($5 + [181])) ){ goto $label$7 }
	*($1 + [100]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [10])
	$5 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	goto $label$6 
	
.LABEL $label$7
	*($1 + [100]) = ($5 + [10])
	
.LABEL $label$6
	*(($1 + [104])) = ($5 + [180])
	CALL $73($2, ($1 + [72]), *($0))
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($1 + [96])))
	
.LABEL $label$8
	*([0] + [4]) = ($1 + [144])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10856])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10664]
	$1 = (((int_32)$2 * (int_32)[12]) + [10664])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [416])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [416])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [416])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $48(CALL $47($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [416])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [416])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [416])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [224])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035937269232844800, (int_64)7035937269232844800)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $106($0, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [224])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [304])
	CALL $110($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $111($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $67($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $28($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $68($4, $1)
	CALL $70(CALL $69(CALL $69($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_64 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*([0] + [4]) - [144])
	*([0] + [4]) = $1
	$3 = CALL $71($1)
	$2 = ($0 + [48])
	$1 = CALL memset($1, [0], [72])
	CALL $72(($1 + [72]), $2, $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $137(*(($3 + [24])))
	
.LABEL $label$1
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)1)
	CALL $73($2, ($1 + [72]), *($0))
	$4 = *($1 + [72])
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*(($1 + [96])))
	
.LABEL $label$2
	*([0] + [4]) = ($1 + [144])
	return $4
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $137($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $137($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $137($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $137($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $137($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $137($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $137($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $137($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1056])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1120])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($4 + [16])))
	
.LABEL $label$7
	CALL $137($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($4 + [16])))
	
.LABEL $label$10
	CALL $137($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $82(($6 + [52]), $1, $2, $3, $4)
	*($6 + [36]) = [1]
	$5 = CALL $64($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $65(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $137($0)
	
.LABEL $label$1
	CALL $66(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $136(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $136([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $81(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $137($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $137($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $137($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $63(($6 + [52]), $1, $2, $3, $4)
	*($6 + [36]) = [1]
	$5 = CALL $64($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $65(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $137($0)
	
.LABEL $label$1
	CALL $66(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [608])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $136([32])
	$6 = CALL $102($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $103(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $100 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [224])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $101($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [224])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $137($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [128])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [192])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $5)
	$4 = (CASTING uint_64)(uint_32 $5)
	$2 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $28($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($6) = $3
	*($6 + [8]) = $5
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [416])
	CALL memcpy($3, $1, [8])
	*($6 + [4]) = ($3 + [8])
	CALL $36($6, $2)
	*([0] + [4]) = ($6 + [16])
}

int_64 .FUNC $104 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$3 = (CASTING int_64)(int_32 ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$29()))
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1808]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($10 + [40]) = ((int_64)((int_64)((int_64)((int_64)$2 + (int_64)$1) + (int_64)$3) + (int_64)$8) + (int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL sha256(($10 + [40]), [4], $10)
	$7 = *($10 + [1 align=1])
	$9 = *($10 + [2 align=2])
	$6 = *($10 + [16])
	$8 = *($10 + [24])
	*([0] + [4]) = ($10 + [48])
	return ((int_64)((int_64)$8 + (int_64)((int_64)$6 + (int_64)((int_64)$9 + (int_64)((int_64)$7 + (int_64)$2)))) & (int_64)63)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*(($4 = CALL $136([32])) + [8]) = (int_64)1398362884
	*($4) = (int_64)0
	CALL eosio_assert([1], [128])
	$5 = ($4 + [8])
	$6 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [192])
	*($4 + [16]) = $1
	$7 = *($3)
	*($4) = *($7)
	*(($4 + [12])) = *(($7 + [12]))
	*(($4 + [8])) = *(($7 + [8]))
	*(($4 + [4])) = *(($7 + [4]))
	CALL eosio_assert([1], [416])
	CALL memcpy(($9 + [16]), $4, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($9 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($9 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($9 + [8]) = $4
	*($9 + [16]) = (int_64)6820308914865700864
	$8 = *($4 + [20])
	*($9 + [4]) = $8
	$3 = ($1 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $8
	*($9 + [8]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $90(($1 + [24]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $4
	*($0) = $1
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $137($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [544])
	CALL eosio_assert([1], [416])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy(($5 | [8]), $4, [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $136([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [128])
	$10 = ($5 + [8])
	$8 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [192])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [96])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [96])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	*($9 + [16]) = (int_64)6820308914865700864
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = (int_64)6820308914865700864
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $90($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $137($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), ($0 + [32]))
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $136([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $28($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $86(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $136(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $85($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $137($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $137($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $137($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $7 ? $10 : ($10 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $136(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	*(($10 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $136([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	*(($6 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$2 = *($4 + [16])
	$1 = ( *(($4 + [20])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [52])
	$9 = (CASTING uint_64)(uint_32 $1)
	$3 = ($4 + [16])
	$5 = ($7 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $28($1, $2)
	$8 = *($6)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($11 + [4]) = $2
	*($11) = $2
	*($11 + [8]) = $8
	*($11 + [16]) = $11
	*($11 + [32]) = $3
	*($11 + [24]) = $4
	*($11 + [28]) = ($4 + [8])
	*($11 + [36]) = ($4 + [28])
	*($11 + [40]) = ($4 + [32])
	*($11 + [44]) = ($4 + [48])
	$3 = ($10 + [40])
	CALL $83(($11 + [24]), ($11 + [16]))
	$2 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	$7 = ([0] - $2)
	$2 = ($4 + [-20])
	
.LOOP $label$10:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($4 = ($10 + [-24]))) = (int_64)0
	*(($1 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($4) = *($8)
	*(($10 + [-20])) = *($2)
	$4 = ($2 + [4])
	*($1) = *($4)
	*($4) = [0]
	*(($4 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($1 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($4) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$4 = ($2 + [16])
	*($1) = *($4)
	*($4) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $7) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $10
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	$4 = ([0] - $1)
	$10 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($10 + [16])) = $2
	CALL $137($2)
	
.LABEL $label$13
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [4])) = $2
	CALL $137($2)
	
.LABEL $label$14
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $137($1)
	
.LABEL $label$15
	*([0] + [4]) = ($11 + [48])
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ([-8] - $6)
	$4 = (CASTING uint_64)(uint_32 $6)
	$2 = ($1 + [8])
	
.LOOP $label$1:
	$5 = ($5 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$6 = *($1 + [20])
	$6 = ( *(($1 + [24])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($5 - $6)
	$4 = (CASTING uint_64)(uint_32 $6)
	$3 = ($1 + [20])
	
.LOOP $label$2:
	$5 = ($5 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	$6 = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $28($0, ([0] - $5))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	*($7) = $5
	*($7 + [8]) = $6
	CALL eosio_assert(((int_32)($6 - $5) > (int_32)[7]), [416])
	CALL memcpy($5, $1, [8])
	*($7 + [4]) = ($5 + [8])
	CALL $36($7, $2)
	CALL $36($7, $3)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $25(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [96])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $149 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $146($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	return CALL $143($0, $1, CALL $154($1))
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $136($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $137($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $136(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $137($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $136($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $137($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $140($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $140($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$1), [224])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $74($1, $3)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$1), [224])
	
.LABEL $label$2
	$2 = $3
	
.LABEL $label$1
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	CALL $150(($0 + [16]), ($2 + [16]))
	CALL memcpy(($0 + [28]), ($2 + [28]), [44])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$0), [224])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $74($0, $3)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$0), [224])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [304])
	CALL $75($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $76($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [416])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [416])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $48($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$2 = [0]
	*(($0 + [24])) = [0]
	*(($3 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [128])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [192])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [128])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [192])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $136([88])
	CALL $71($3)
	*($3 + [72]) = $1
	CALL $77(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)7235159537265672192
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)7235159537265672192
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $78(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $137(*(($1 + [24])))
	
.LABEL $label$4
	CALL $137($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [64])
	$9 = $8
	*([0] + [4]) = $8
	$3 = *($0)
	$6 = *(*($0 + [4]))
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	$4 = ($1 + [16])
	CALL $139($4, ($6 + [16]))
	$2 = CALL memcpy(($1 + [28]), ($6 + [28]), [44])
	$6 = *($1 + [16])
	$5 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [56])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $6)
	*($9 + [24]) = ($9 + [8])
	*($9 + [36]) = ($1 + [8])
	*($9 + [32]) = $1
	*($9 + [40]) = $4
	*($9 + [44]) = $2
	*($9 + [48]) = ($1 + [32])
	*($9 + [52]) = ($1 + [40])
	*($9 + [56]) = ($1 + [56])
	CALL $79(($9 + [32]), ($9 + [24]))
	*($1 + [76]) = CALL db_store_i64(*($3 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), (int_64)7235159537265672192, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$5 }
	*(($3 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [608])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$5 = CALL $136([88])
	CALL $71($5)
	*($5 + [72]) = $0
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($5 + [8])
	*($7 + [32]) = $5
	*($7 + [40]) = ($5 + [16])
	*($7 + [44]) = ($5 + [28])
	*($7 + [48]) = ($5 + [32])
	*($7 + [52]) = ($5 + [40])
	*($7 + [56]) = ($5 + [56])
	CALL $80(($7 + [32]), ($7 + [24]))
	*($5 + [76]) = $1
	*($7 + [24]) = $5
	*($7 + [32]) = (int_64)7235159537265672192
	$6 = *($5 + [76])
	*($7 + [4]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $78(($0 + [24]), ($7 + [24]), ($7 + [32]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($4 + [24])))
	
.LABEL $label$10
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [608])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $136([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [128])
	$3 = ($4 + [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [192])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = $3
	CALL $51(($8 + [32]), ($8 + [24]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $52($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $137($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [416])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [416])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [128])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [192])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [64]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [16])
	*($6 + [20]) = ($0 + [32])
	*($6 + [24]) = ($0 + [40])
	*($6 + [28]) = ($0 + [48])
	CALL $38(($6 + [8]), $6)
	*($0 + [68]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [32])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $136(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [24])))
	
.LABEL $label$11
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $137($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [416])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [416])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [352])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $136([80])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [128])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [192])
	*($4 + [56]) = [0]
	*($4 + [48 align=4]) = (int_64)0
	*($4 + [64]) = $1
	CALL $33(($7 + [16]), $4)
	*($7 + [32]) = $4
	*($7 + [16]) = (int_64)3932090329724878848
	$6 = *($4 + [68])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = (int_64)3932090329724878848
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $34(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($3 + [56])))
	
.LABEL $label$9
	CALL $137($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	$8 = $7
	*([0] + [4]) = $7
	$3 = *($0)
	$5 = *(*($0 + [4]))
	$2 = CALL memcpy($1, $5, [48])
	$4 = ($2 + [48])
	CALL $139($4, ($5 + [48]))
	$1 = *($2 + [48])
	$5 = ( *(($2 + [52])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($5 + [44])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $1)
	*($8 + [16]) = $8
	*($8 + [28]) = ($2 + [8])
	*($8 + [24]) = $2
	*($8 + [32]) = ($2 + [16])
	*($8 + [36]) = ($2 + [32])
	*($8 + [40]) = ($2 + [40])
	*($8 + [44]) = $4
	CALL $35(($8 + [24]), ($8 + [16]))
	*($2 + [68]) = CALL db_store_i64(*($3 + [8]), (int_64)3932090329724878848, *(*($0 + [8])), (int_64)3932090329724878848, $7, $1)
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)3932090329724878848) ){ goto $label$5 }
	*(($3 + [16])) = (int_64)3932090329724878849
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$0), [224])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $29($0, $3)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$0), [224])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [304])
	CALL $31($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $32($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [480])
	$5 = *($3)
	$3 = CALL memcpy($1, $5, [48])
	$4 = ($3 + [48])
	CALL $139($4, ($5 + [48]))
	CALL eosio_assert([1], [544])
	$1 = *($3 + [48])
	$5 = ( *(($3 + [52])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($5 + [44])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $1)
	*($8 + [16]) = $8
	*($8 + [44]) = $4
	*($8 + [24]) = $3
	*($8 + [28]) = ($3 + [8])
	*($8 + [32]) = ($3 + [16])
	*($8 + [36]) = ($3 + [32])
	*($8 + [40]) = ($3 + [40])
	CALL $35(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($3 + [68]), $2, $7, $1)
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3932090329724878848) ){ goto $label$5 }
	*(($0 + [16])) = (int_64)3932090329724878849
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [128])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [192])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $130(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$4 = *($4 + [4])
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	CALL eosio_assert([1], [416])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [416])
	CALL memcpy(($6 + [16]), $5, [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $3, $6, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}