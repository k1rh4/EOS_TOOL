(data (i32.const 8192) "onerror action\'s are only valid from the \"EOS\" system account\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8298) "eosio.token\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8396) "luckgamecoin\00")
(data (i32.const 8409) "string is too long to be a valid name\00")
(data (i32.const 8447) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8514) "character is not in allowed character set for names\00")
(data (i32.const 8566) "deposit\00")
(data (i32.const 8574) "read_transaction failed\00")
(data (i32.const 8598) "wrong transaction\00")
(data (i32.const 8616) "Invalid transfer amount.\00")
(data (i32.const 8641) "Transfer amount not positive\00")
(data (i32.const 8670) "Maintaining ...\00")
(data (i32.const 8686) "Amount Too Small!\00")
(data (i32.const 8704) "Amount Too Large!\00")
(data (i32.const 8722) "Maintaining\00%llu\00")
(data (i32.const 8739) "Memo cannot be empty.\00")
(data (i32.const 8761) ",\00")
(data (i32.const 8763) "Roll type cannot be empty!\00")
(data (i32.const 8790) "Roll border cannot be empty!\00")
(data (i32.const 8819) "luckgameteam\00")
(data (i32.const 8832) "Inviter can\'t be self\00")
(data (i32.const 8854) "Bet amount must between %f and %f\00")
(data (i32.const 8888) "Roll border must between 2 to 97\00")
(data (i32.const 8921) "get\00")
(data (i32.const 8925) "read\00")
(data (i32.const 8930) "EOS\00")
(data (i32.const 8934) "LK\00")
(data (i32.const 8937) "Token do not be supported, or symbol not match with the code!\00")
(data (i32.const 8999) "string is too long to be a valid symbol_code\00")
(data (i32.const 9044) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9097) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9148) "error reading iterator\00")
(data (i32.const 9171) "unable to find key\00")
(data (i32.const 9190) "cannot create objects in table of another contract\00")
(data (i32.const 9241) "write\00")
(data (i32.const 9247) "cannot pass end iterator to modify\00")
(data (i32.const 9282) "object passed to modify is not in multi_index\00")
(data (i32.const 9328) "cannot modify objects in table of another contract\00")
(data (i32.const 9379) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9438) "Symbol Not Support!\00")
(data (i32.const 9458) "Random value \00")
(data (i32.const 9472) "Wrong transaction\00")
(data (i32.const 9490) "Network Error Token Refund\00")
(data (i32.const 9517) "Can not find global id\00")
(data (i32.const 9540) "1,1,%s,%lld,%lld\00")
(data (i32.const 9557) "luckgameplay\00")
(data (i32.const 9570) "Referral reward, Player: %s ![https://luckgame.one]\00")
(data (i32.const 9622) "%lld LK token for player [https://luckgame.one]\00")
(data (i32.const 9670) "Result:%lld, Your bet:%lld-%lld, [https://luckgame.one] \00")
(data (i32.const 9727) "cannot pass end iterator to erase\00")
(data (i32.const 9761) "cannot increment end iterator\00")
(data (i32.const 9791) "object passed to erase is not in multi_index\00")
(data (i32.const 9836) "cannot erase objects in table of another contract\00")
(data (i32.const 9886) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9939) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9988) "invalid symbol name\00")
(data (i32.const 10008) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 10052) "H\'\00\00")
(data (i32.const 10056) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10089) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18576) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$1 (param i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "transaction_size" (func $fimport$4 (result i32)))
(import "env" "read_transaction" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$9 (param i32 i64 i32 i32 i32)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "require_recipient" (func $fimport$11 (param i64)))
(import "env" "__ashlti3" (func $fimport$12 (param i32 i64 i64 i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$16 (result i64)))
(import "env" "abort" (func $fimport$17))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$21 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$22 (result i32)))
(import "env" "printhex" (func $fimport$23 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$27 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$47 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$48 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$49 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$50 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$51 (param i32 i32 i32)))
(import "env" "sha1" (func $fimport$52 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$53 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$54 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$55 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$56 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $113))
(export "_Znwj" (func $111))
(export "_Znaj" (func $112))
(export "_ZdaPv" (func $114))
(export "_ZnwjSt11align_val_t" (func $115))
(export "_ZnajSt11align_val_t" (func $116))
(export "_ZdlPvSt11align_val_t" (func $117))
(export "_ZdaPvSt11align_val_t" (func $118))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $3 $5 $7 $8 $10 $12 $14 $16 $18 $20 $133 $136)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18656))
(global $global$2 i32 (i32.const 18656))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $108(*($0 + [4]), $1)
	$6 = *($1 + [48])
	$5 = *(($1 + [52]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$9 = [48]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$9 = (($7 & [-16]) + $9)
	
.LABEL $label$2
	$5 = ($9 + [53])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$9 = CALL $144($5)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$3
	*($3 + [4]) = $9
	*($3) = $9
	*($3 + [8]) = ($9 + $5)
	CALL $104($3, $1)
	$8 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $8, $9, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $147($9)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([128])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [80]) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [116]) = $1
	*(($3 + [104])) = (int_64)0
	*(($3 + [96])) = (int_64)0
	*(($3 + [88])) = (int_64)0
	CALL $98(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [120])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	CALL eosio_assert([1], [9241])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9241])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9241])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)105
	*($0 + [8]) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [9241])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [9241])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9148])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [80]) = (int_64)0
	*($5 + [112]) = [0]
	*($5 + [116]) = $0
	*(($5 + [104])) = (int_64)0
	*(($5 + [96])) = (int_64)0
	*(($5 + [88])) = (int_64)0
	CALL $100(($3 + [32]), $5)
	*($5 + [120]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $99(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [48])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [52])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	$6 = *($1)
	CALL $103($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9379])
	$8 = *($1 + [48])
	$7 = *(($1 + [52]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [4]))
	$3 = [48]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = (($9 & [-16]) + $3)
	
.LABEL $label$2
	$7 = ($3 + [53])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $144($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $104($5, $1)
	CALL db_update_i64(*(($1 + [120])), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $147($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $142(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10148])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $142(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $130 ()
{
	return [10152]
}

void .FUNC $131 (int_32 $0)
{
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [11] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $134($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $134($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $134($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $134($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18576]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $134($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $134($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $134($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $132([12], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $86($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $122($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8925])
	CALL memcpy(($0 + [24]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [224])
	$global$0 = $2
	*(($3 = (($2 + [96]) + [8]))) = *(($1 + [24]))
	*($2 + [80]) = (int_64)0
	$4 = [0]
	*($2 + [88]) = [0]
	*($2 + [96]) = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($7 == 0) ){ goto $label$6 }
	$4 = int_32($7 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$7 = CALL _Znwj($7)
	*(($2 + [88])) = ($7 + ($4 << [4]))
	*($2 + [80]) = $7
	*($2 + [84]) = $7
	$8 = *(($1 + [32]))
	$4 = (*(($1 + [36])) - $8)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($7, $8, $4)
	$4 = ($7 + $4)
	*($2 + [84]) = $4
	goto $label$4 
	
.LABEL $label$6
	$7 = [0]
	$9 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$4 = $7
	
.LABEL $label$4
	$9 = $7
	$8 = $7
	
.LABEL $label$3
	*(($10 = (($2 + [48]) + [24]))) = *(($1 + [72]))
	*(($11 = (($2 + [48]) + [16]))) = *(($1 + [64]))
	*($2 + [48]) = *($1 + [48])
	*($2 + [56]) = *(($1 + [56]))
	$12 = *($1 + [80])
	$13 = *($1 + [88])
	$14 = *($1 + [96])
	*((($2 + [128]) + [24])) = *($10)
	*((($2 + [128]) + [16])) = *($11)
	*((($2 + [112]) + [8])) = *($3)
	*($2 + [136]) = *($2 + [56])
	*($2 + [128]) = *($2 + [48])
	*($2 + [112]) = *($2 + [96])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$3 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($3) + $1))
	
.LABEL $label$7
	*(($10 = (($2 + [208]) + [8]))) = *((($2 + [112]) + [8]))
	*($2 + [208]) = *($2 + [112])
	*($2 + [192]) = (int_64)0
	*($2 + [200]) = [0]
	$0 = ($4 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	$8 = int_32($0 >> [4])
	if ( ((uint_32)$8 >= (uint_32)[268435456]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [200])) = ($0 + ($8 << [4]))
	*($2 + [192]) = $0
	*($2 + [196]) = $0
	$4 = ($4 - $9)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $7, $4)
	*($2 + [196]) = ($0 + $4)
	
.LABEL $label$8
	$15 = *((($2 + [128]) + [24]))
	*((($2 + [160]) + [24])) = $15
	$16 = *((($2 + [128]) + [16]))
	*((($2 + [160]) + [16])) = $16
	*((($2 + [32]) + [8])) = *($10)
	*(($2 + [16])) = $16
	*(($2 + [24])) = $15
	$15 = *($2 + [136])
	*($2 + [168]) = $15
	$16 = *($2 + [128])
	*($2 + [160]) = $16
	*($2 + [32]) = *($2 + [208])
	*($2) = $16
	*($2 + [8]) = $15
	CALL void $3((int_32 $6), (int_64 $5), (int_64 ($2 + [32])), (int_32 ($2 + [192])), (int_32 $2), (int_32 ($12 & [255])), (int_32 $13), (int_64 $14), (int_64 $1))
	$1 = *($2 + [192])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [196]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$2
	CALL $129(($2 + [80]))
	
.LABEL $label$1
	CALL $129(($2 + [192]))
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	CALL eosio_assert([1], [9241])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $90($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	CALL eosio_assert([1], [9241])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = CALL $141([8930])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8999])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8929]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9044])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*($1 + [32]) = [8298]
	*($1 + [36]) = CALL $141([8298])
	*($1 + [8]) = *($1 + [32])
	*($1 + [64]) = *(CALL $2(($1 + [40]), ($1 + [8])))
	*($1 + [72]) = $3
	$3 = *($0)
	*($1 + [60]) = ($1 + [64])
	*($1 + [56]) = ($1 + [72])
	$5 = ($0 + [216])
	CALL $88(($1 + [48]), $5, $3, ($1 + [56]))
	$2 = CALL $141([8934])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8999])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (int_64)0
	
.LOOP $label$11:
	$4 = *(($2 + [8933]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9044])
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$8
	$3 = (int_64)0
	
.LABEL $label$7
	*($1 + [16]) = [8396]
	*($1 + [20]) = CALL $141([8396])
	*($1) = *($1 + [16])
	*($1 + [64]) = *(CALL $2(($1 + [24]), $1))
	*($1 + [72]) = $3
	$3 = *($0)
	*($1 + [60]) = ($1 + [64])
	*($1 + [56]) = ($1 + [72])
	CALL $88(($1 + [48]), $5, $3, ($1 + [56]))
	$global$0 = ($1 + [80])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $101(*($1), ($0 + [32]))
	*($2) = $0
	CALL $110($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [32]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $89(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	$2 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$1 = CALL $141([8930])
	if ( ($1 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8999])
	goto $label$4 
	
.LABEL $label$5
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$4 = *(($1 + [8929]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9044])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = CALL $141([8934])
	if ( ($1 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8999])
	goto $label$9 
	
.LABEL $label$10
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (int_64)0
	
.LOOP $label$11:
	$4 = *(($1 + [8933]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9044])
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$11 }
	CALL eosio_assert(((int_64)$2 == (int_64)$3), [9438])
	return 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$2 == (int_64)0), [9438])
	return 
	
.LABEL $label$1
	CALL eosio_assert([1], [9438])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $91($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $128 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $124(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $137(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8734], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $124(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $124(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($1 + [8])
	$4 = *($3)
	*((($2 + [32]) + [8])) = $4
	$5 = *($1)
	*((($2 + [8]) + [8])) = $4
	*($2 + [8]) = $5
	*($2 + [32]) = $5
	CALL $45($0, ($2 + [8]))
	$6 = ($0 + [216])
	$5 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$8 = *(($0 + [244]))
	$7 = *(($0 + [240]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$3 = ($8 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$4 }
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$6), [9097])
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($6), *(($0 + [224])), (int_64)-3665743317141815296, $5)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $30($6, $3)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$6), [9097])
	
.LABEL $label$2
	*($2 + [24]) = $1
	CALL eosio_assert([1], [9247])
	CALL $46($6, $9, (int_64)0, ($2 + [24]))
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8925])
	CALL memcpy(($4 + [464]), $2, [8])
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8925])
	CALL memcpy(($4 + [48]), ($2 + [8]), [8])
	*($4 + [472]) = *($4 + [48])
	$3 = ($2 + $7)
	*((($4 + [16]) + [8])) = $3
	*($4 + [36]) = ($2 + [16])
	*($4 + [32]) = $2
	*($4 + [40]) = $3
	*($4 + [16]) = *($4 + [32])
	$8 = CALL $22(($4 + [48]), $0, $1, ($4 + [16]))
	*(($3 = (($4 + [480]) + [8]))) = *($4 + [472])
	*($4 + [480]) = *($4 + [464])
	*((($4 + [496]) + [8])) = *($3)
	*($4 + [496]) = *($4 + [480])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$0 = *((($4 + [496]) + [8]))
	*((($4 + [512]) + [8])) = $0
	*(($4 + [8])) = $0
	$0 = *($4 + [496])
	*($4) = $0
	*($4 + [512]) = $0
	CALL void $3((int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $24($8)
	$global$0 = ($4 + [528])
	return [1]
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $22(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $24($8)
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [176])
	$3 = (int_64)100
	$4 = ($0 + [204])
	$5 = ($0 + [200])
	$6 = ($0 + [184])
	
.LOOP $label$1:
	$8 = *($4)
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$6:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$5 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [9097])
	goto $label$3 
	
.LABEL $label$4
	$9 = CALL db_find_i64(*($2), *($6), (int_64)7235159550150574080, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $32($2, $9)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [9097])
	
.LABEL $label$3
	CALL eosio_assert([1], [9727])
	CALL eosio_assert([1], [9761])
	$9 = CALL db_next_i64(*($10 + [20]), ($1 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	CALL $32($2, $9)
	
.LABEL $label$7
	CALL $62($2, $10)
	
.LABEL $label$2
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)121) ){ goto $label$1 }
	$4 = ($0 + [216])
	$8 = *(($0 + [244]))
	$7 = *(($0 + [240]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$12:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)5459781) ){ goto $label$11 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [9097])
	goto $label$9 
	
.LABEL $label$10
	$9 = CALL db_find_i64(*($4), *(($0 + [224])), (int_64)-3665743317141815296, (int_64)5459781)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $30($4, $9)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [9097])
	
.LABEL $label$9
	CALL eosio_assert([1], [9727])
	CALL eosio_assert([1], [9761])
	$9 = CALL db_next_i64(*($10 + [84]), ($1 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	CALL $30($4, $9)
	
.LABEL $label$13
	CALL $63($4, $10)
	
.LABEL $label$8
	$8 = *(($0 + [244]))
	$7 = *(($0 + [240]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$18:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)5525068) ){ goto $label$17 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [9097])
	goto $label$15 
	
.LABEL $label$16
	$9 = CALL db_find_i64(*(($0 + [216])), *(($0 + [224])), (int_64)-3665743317141815296, (int_64)5525068)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $30($4, $9)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [9097])
	
.LABEL $label$15
	CALL eosio_assert([1], [9727])
	CALL eosio_assert([1], [9761])
	$9 = CALL db_next_i64(*($10 + [84]), ($1 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	CALL $30($4, $9)
	
.LABEL $label$19
	CALL $63($4, $10)
	
.LABEL $label$14
	$3 = *(($0 + [176]))
	$11 = *(($0 + [184]))
	*($1 + [32]) = [0]
	*($1 + [24]) = (int_64)0
	$9 = CALL db_lowerbound_i64($3, $11, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$21 }
	$9 = CALL $32($2, $9)
	$10 = (($1 + [24]) + [8])
	$8 = *($1 + [28])
	if ( ((int_32)$8 != (int_32)*($10)) ){ goto $label$22 }
	$12 = [3]
	goto $label$20 
	
.LABEL $label$22
	$12 = [0]
	goto $label$20 
	
.LABEL $label$21
	$12 = [4]
	
.LABEL $label$20
	
.LOOP $label$23:
	goto $label$92 
	
.LABEL $label$93
	$9 = CALL $32($2, $9)
	$8 = *($1 + [28])
	if ( ((int_32)$8 == (int_32)*($10)) ){ goto $label$52 }
	$12 = [0]
	goto $label$23 
	
.LABEL $label$92
	*($8) = *($9)
	*($1 + [28]) = ($8 + [8])
	goto $label$51 
	
.LABEL $label$91
	CALL $64(($1 + [24]), $9)
	$12 = [1]
	goto $label$23 
	
.LABEL $label$90
	CALL eosio_assert([1], [9761])
	$9 = CALL db_next_i64(*($9 + [20]), ($1 + [8]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$50 }
	$12 = [4]
	goto $label$23 
	
.LABEL $label$89
	$9 = *($1 + [24])
	if ( ((int_32)*($1 + [28]) == (int_32)$9) ){ goto $label$49 }
	$12 = [5]
	goto $label$23 
	
.LABEL $label$88
	$11 = (int_64)0
	$5 = ($0 + [204])
	$6 = ($0 + [200])
	$13 = ($0 + [184])
	$14 = ($0 + [176])
	$12 = [6]
	goto $label$23 
	
.LABEL $label$87
	$3 = *(($9 + ((CASTING uint_32)(uint_64 $11) << [3])))
	$8 = *($5)
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$45 }
	$12 = [7]
	goto $label$23 
	
.LABEL $label$86
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$44 }
	$12 = [8]
	goto $label$23 
	
.LABEL $label$85
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$84
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$43 }
	$12 = [38]
	goto $label$23 
	
.LABEL $label$83
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [9097])
	goto $label$41 
	
.LABEL $label$82
	$10 = [0]
	$9 = CALL db_find_i64(*($14), *($13), (int_64)7235159550150574080, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$42 }
	$12 = [10]
	goto $label$23 
	
.LABEL $label$81
	$10 = CALL $32($2, $9)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [9097])
	$12 = [11]
	goto $label$23 
	
.LABEL $label$80
	$9 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($9, [9727])
	CALL eosio_assert($9, [9761])
	$9 = CALL db_next_i64(*($10 + [20]), ($1 + [8]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$40 }
	$12 = [12]
	goto $label$23 
	
.LABEL $label$79
	CALL $32($2, $9)
	$12 = [13]
	goto $label$23 
	
.LABEL $label$78
	CALL $62($2, $10)
	$9 = *($1 + [24])
	$11 = ((int_64)$11 + (int_64)1)
	if ( (uint_64)($11 <= (CASTING uint_64)(uint_32 int_32((*($1 + [28]) - $9) >> [3]))) ){ goto $label$48 }
	$12 = [14]
	goto $label$23 
	
.LABEL $label$77
	$3 = *(($0 + [216]))
	$11 = *(($0 + [224]))
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$9 = CALL db_lowerbound_i64($3, $11, (int_64)-3665743317141815296, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$39 }
	$12 = [15]
	goto $label$23 
	
.LABEL $label$76
	$9 = CALL $30($4, $9)
	$10 = (($1 + [8]) + [8])
	$8 = *($1 + [12])
	if ( ((int_32)$8 != (int_32)*($10)) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$75
	$9 = CALL $30($4, $9)
	$8 = *($1 + [12])
	if ( ((int_32)$8 == (int_32)*($10)) ){ goto $label$54 }
	$12 = [16]
	goto $label$23 
	
.LABEL $label$74
	*($8) = *($9)
	*($1 + [12]) = ($8 + [8])
	goto $label$53 
	
.LABEL $label$73
	CALL $64(($1 + [8]), $9)
	$12 = [17]
	goto $label$23 
	
.LABEL $label$72
	CALL eosio_assert([1], [9761])
	$9 = CALL db_next_i64(*($9 + [84]), ($1 + [40]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$36 }
	$12 = [20]
	goto $label$23 
	
.LABEL $label$71
	$9 = *($1 + [8])
	if ( ((int_32)*($1 + [12]) == (int_32)$9) ){ goto $label$35 }
	$12 = [21]
	goto $label$23 
	
.LABEL $label$70
	$11 = (int_64)0
	$2 = ($0 + [244])
	$5 = ($0 + [240])
	$6 = ($0 + [224])
	$0 = ($0 + [216])
	$12 = [22]
	goto $label$23 
	
.LABEL $label$69
	$3 = *(($9 + ((CASTING uint_32)(uint_64 $11) << [3])))
	$8 = *($2)
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$31 }
	$12 = [23]
	goto $label$23 
	
.LABEL $label$68
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$30 }
	$12 = [24]
	goto $label$23 
	
.LABEL $label$67
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$66
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$29 }
	$12 = [36]
	goto $label$23 
	
.LABEL $label$65
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [9097])
	goto $label$27 
	
.LABEL $label$64
	$10 = [0]
	$9 = CALL db_find_i64(*($0), *($6), (int_64)-3665743317141815296, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$28 }
	$12 = [26]
	goto $label$23 
	
.LABEL $label$63
	$10 = CALL $30($4, $9)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [9097])
	$12 = [27]
	goto $label$23 
	
.LABEL $label$62
	$9 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($9, [9727])
	CALL eosio_assert($9, [9761])
	$9 = CALL db_next_i64(*($10 + [84]), ($1 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$26 }
	$12 = [28]
	goto $label$23 
	
.LABEL $label$61
	CALL $30($4, $9)
	$12 = [29]
	goto $label$23 
	
.LABEL $label$60
	CALL $63($4, $10)
	$9 = *($1 + [8])
	$11 = ((int_64)$11 + (int_64)1)
	if ( (uint_64)($11 <= (CASTING uint_64)(uint_32 int_32((*($1 + [12]) - $9) >> [3]))) ){ goto $label$34 }
	$12 = [30]
	goto $label$23 
	
.LABEL $label$59
	if ( ($9 == 0) ){ goto $label$25 }
	$12 = [31]
	goto $label$23 
	
.LABEL $label$58
	*($1 + [12]) = $9
	CALL _ZdlPv($9)
	$12 = [32]
	goto $label$23 
	
.LABEL $label$57
	$9 = *($1 + [24])
	if ( ($9 == 0) ){ goto $label$24 }
	$12 = [33]
	goto $label$23 
	
.LABEL $label$56
	*($1 + [28]) = $9
	CALL _ZdlPv($9)
	$12 = [34]
	goto $label$23 
	
.LABEL $label$55
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$54
	$12 = [19]
	goto $label$23 
	
.LABEL $label$53
	$12 = [17]
	goto $label$23 
	
.LABEL $label$52
	$12 = [3]
	goto $label$23 
	
.LABEL $label$51
	$12 = [1]
	goto $label$23 
	
.LABEL $label$50
	$12 = [2]
	goto $label$23 
	
.LABEL $label$49
	$12 = [14]
	goto $label$23 
	
.LABEL $label$48
	$12 = [6]
	goto $label$23 
	
.LABEL $label$47
	$12 = [9]
	goto $label$23 
	
.LABEL $label$46
	$12 = [7]
	goto $label$23 
	
.LABEL $label$45
	$12 = [9]
	goto $label$23 
	
.LABEL $label$44
	$12 = [37]
	goto $label$23 
	
.LABEL $label$43
	$12 = [9]
	goto $label$23 
	
.LABEL $label$42
	$12 = [11]
	goto $label$23 
	
.LABEL $label$41
	$12 = [11]
	goto $label$23 
	
.LABEL $label$40
	$12 = [13]
	goto $label$23 
	
.LABEL $label$39
	$12 = [20]
	goto $label$23 
	
.LABEL $label$38
	$12 = [19]
	goto $label$23 
	
.LABEL $label$37
	$12 = [16]
	goto $label$23 
	
.LABEL $label$36
	$12 = [18]
	goto $label$23 
	
.LABEL $label$35
	$12 = [30]
	goto $label$23 
	
.LABEL $label$34
	$12 = [22]
	goto $label$23 
	
.LABEL $label$33
	$12 = [25]
	goto $label$23 
	
.LABEL $label$32
	$12 = [23]
	goto $label$23 
	
.LABEL $label$31
	$12 = [25]
	goto $label$23 
	
.LABEL $label$30
	$12 = [35]
	goto $label$23 
	
.LABEL $label$29
	$12 = [25]
	goto $label$23 
	
.LABEL $label$28
	$12 = [27]
	goto $label$23 
	
.LABEL $label$27
	$12 = [27]
	goto $label$23 
	
.LABEL $label$26
	$12 = [29]
	goto $label$23 
	
.LABEL $label$25
	$12 = [32]
	goto $label$23 
	
.LABEL $label$24
	$12 = [34]
	goto $label$23 
	$12
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [544])
	$global$0 = $3
	*(($4 = $3) + [536]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [512])) = (int_64)0
	*(($4 + [528])) = [0]
	*($4 + [496]) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [476]) = $2
	*($4 + [472]) = $2
	*($4 + [480]) = ($2 + $5)
	*($4 + [24]) = ($4 + [472])
	*($4 + [48]) = ($4 + [488])
	CALL $21(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [480])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [472])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $22(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [536])
	CALL $23(($4 + [24]), ($4 + [488]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $147($2)
	
.LABEL $label$4
	CALL $24($3)
	if ( ((*($4 + [520]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [528])))
	
.LABEL $label$5
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [176])
	CALL $38($1, $2, *($0), ($1 + [8]))
	CALL $39($1, $2, *($0), ($1 + [8]))
	CALL $40($0)
	$global$0 = ($1 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8409])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8514])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8447])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8514])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$5 = ($global$0 - [480])
	$global$0 = $5
	*(($6 = $5) + [456]) = $1
	if ( ((int_64)$1 == (int_64)-3642362729221250176) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$1 }
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$1 }
	$9 = *($4)
	$8 = CALL $141([8566])
	if ( ((int_32)$8 != (int_32)( *($4 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$2 }
	if ( (CALL $127($4, [0], [-1], [8566], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = *($0 + [8])
	$10 = $5
	$9 = CALL transaction_size()
	$5 = ($5 - (($9 + [15]) & [-16]))
	$global$0 = $5
	$8 = CALL read_transaction($5, $9)
	CALL eosio_assert(((int_32)$9 == (int_32)$8), [8574])
	$2 = CALL current_time()
	*(($6 + [420])) = (int_64)0
	*(($6 + [436])) = (int_64)0
	*(($6 + [444])) = (int_64)0
	$9 = [0]
	*($6 + [404]) = [0]
	*($6 + [408]) = [0]
	*($6 + [412 align=4]) = (int_64)0
	*($6 + [428 align=4]) = (int_64)0
	*($6 + [392]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [164]) = $5
	*($6 + [160]) = $5
	*($6 + [168]) = ($5 + $8)
	CALL $25(($6 + [160]), ($6 + [392]))
	CALL $27(CALL $26(CALL $26(($6 + [160]), (($6 + [392]) + [24])), ($6 + [428])), ($6 + [440]))
	$11 = CALL $28(($6 + [352]), *($6 + [428]))
	CALL eosio_assert((((int_64)*($11 + [8]) == (int_64)-3617168760277827584) & ((int_64)$1 == (int_64)*($11))), [8598])
	CALL $29($0, $3)
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $2
	$9 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$1 = $2
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $9 ){ goto $label$7 }
	$9 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	
.LABEL $label$3
	CALL eosio_assert($9, [8616])
	$2 = *($3)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [8641])
	$12 = ($0 + [216])
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$9 = *(($0 + [244]))
	$13 = *(($0 + [240]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$5 = ($9 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$10 }
	$9 = $5
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$12), [9097])
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	$5 = CALL db_find_i64(*($12), *(($0 + [224])), (int_64)-3665743317141815296, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $30($12, $5)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$12), [9097])
	
.LABEL $label$8
	$7 = *($8 + [8])
	$14 = *($0)
	*(($6 + [192])) = [0]
	*($6 + [168]) = $14
	*($6 + [160]) = $7
	*($6 + [176]) = (int_64)-1
	*($6 + [184]) = (int_64)0
	$1 = *(CALL $31(($6 + [160]), $1, [9171]))
	$13 = *($6 + [184])
	if ( ($13 == 0) ){ goto $label$12 }
	$12 = ($6 + [188])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	CALL _ZdlPv($9)
	
.LABEL $label$16
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($6 + [184]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $13
	
.LABEL $label$13
	*($12) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$5 = *($4)
	$9 = CALL $141([8566])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$18 }
	if ( (CALL $127($4, [0], [-1], [8566], $9) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$15 = ($0 + [176])
	$9 = *(($0 + [204]))
	$12 = *(($0 + [200]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$21 }
	
.LOOP $label$23:
	$5 = ($9 + [-24])
	$13 = *($5)
	if ( ((int_64)*($13) == (int_64)105) ){ goto $label$22 }
	$9 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$15), [9097])
	if ( $13 ){ goto $label$20 }
	$5 = [0]
	goto $label$19 
	
.LABEL $label$21
	$5 = [0]
	$9 = CALL db_find_i64(*($15), *(($0 + [184])), (int_64)7235159550150574080, (int_64)105)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	$13 = CALL $32($15, $9)
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$15), [9097])
	
.LABEL $label$20
	$5 = ((int_64)*($13 + [8]) != (int_64)0)
	
.LABEL $label$19
	CALL eosio_assert($5, [8670])
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [8686])
	CALL eosio_assert(((int_64)*($3) < (int_64)10000001), [8704])
	CALL eosio_assert(((uint_64)$1 >= (uint_64)*($8 + [32])), [8722])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$25 }
	$5 = uint_32($5 >> [1])
	goto $label$24 
	
.LABEL $label$25
	$5 = *(($4 + [4]))
	
.LABEL $label$24
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8739])
	*($6 + [344]) = [0]
	*($6 + [336]) = (int_64)0
	*(($6 + [168])) = [0]
	*($6 + [160]) = (int_64)0
	$5 = CALL $141([8761])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$31 }
	*($6 + [160]) = ($5 << [1])
	$9 = (($6 + [160]) | [1])
	if ( $5 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$13 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($13)
	*($6 + [160]) = ($13 | [1])
	*($6 + [168]) = $9
	*($6 + [164]) = $5
	
.LABEL $label$30
	CALL memcpy($9, [8761], $5)
	
.LABEL $label$29
	*(($9 + $5)) = [0]
	CALL $33($0, ($6 + [336]), $4, ($6 + [160]))
	if ( ((*($6 + [160]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($6 + [168]))
	
.LABEL $label$32
	$5 = *($6 + [336])
	$9 = *($5)
	if ( ($9 & [1]) ){ goto $label$34 }
	$5 = uint_32($9 >> [1])
	goto $label$33 
	
.LABEL $label$34
	$5 = *($5 + [4])
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8763])
	$5 = *($6 + [336])
	$9 = *($5 + [12])
	if ( ($9 & [1]) ){ goto $label$36 }
	$5 = uint_32($9 >> [1])
	goto $label$35 
	
.LABEL $label$36
	$5 = *(($5 + [16]))
	
.LABEL $label$35
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8790])
	$5 = *($6 + [336])
	if ( (*($5) & [1]) ){ goto $label$38 }
	$5 = ($5 + [1])
	goto $label$37 
	
.LABEL $label$38
	$5 = *($5 + [8])
	
.LABEL $label$37
	*($6 + [335]) = CALL $138($5)
	$5 = *($6 + [336])
	if ( (*($5 + [12]) & [1]) ){ goto $label$40 }
	$5 = (($5 + [12]) + [1])
	goto $label$39 
	
.LABEL $label$40
	$5 = *(($5 + [20]))
	
.LABEL $label$39
	*($6 + [320]) = (CASTING int_64)(int_32 CALL $138($5))
	*($6 + [312]) = (int_64)0
	$5 = *($6 + [336])
	$13 = *($5 + [24])
	$9 = ($13 & [1])
	if ( $9 ){ goto $label$42 }
	if ( (uint_32($13 >> [1]) == 0) ){ goto $label$41 }
	goto $label$27 
	
.LABEL $label$42
	if ( *(($5 + [28])) ){ goto $label$27 }
	
.LABEL $label$41
	*($6 + [304]) = [8819]
	*($6 + [308]) = CALL $141([8819])
	*($6 + [16]) = *($6 + [304])
	$7 = *(CALL $2(($6 + [160]), ($6 + [16])))
	goto $label$26 
	
.LABEL $label$28
	CALL $119(($6 + [160]))
	
.LABEL $label$27
	if ( $9 ){ goto $label$44 }
	$5 = (($5 + [24]) + [1])
	goto $label$43 
	
.LABEL $label$44
	$5 = *(($5 + [32]))
	
.LABEL $label$43
	*($6 + [296]) = $5
	*($6 + [300]) = CALL $141($5)
	*($6 + [24]) = *($6 + [296])
	$7 = *(CALL $2(($6 + [160]), ($6 + [24])))
	
.LABEL $label$26
	*($6 + [312]) = $7
	CALL eosio_assert(((int_64)*($6 + [456]) != (int_64)$7), [8832])
	$14 = *($6 + [320])
	$7 = $14
	$5 = *($6 + [335])
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$45 }
	if ( ((int_32)$5 != (int_32)[2]) ){ goto $label$46 }
	$7 = (int_64))((int_64)99 - $14)
	goto $label$45 
	
.LABEL $label$46
	$7 = (int_64)0
	
.LABEL $label$45
	*($6) = (PROMOTE float_64)(float_32 (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_64 *($8 + [64])) / (float_64)(float_64)1e4)))
	$7 = ((int_64)((int_64)$2 * (int_64)98) / (int_64)((int_64)$7 & (int_64)255))
	*($6 + [8]) = (PROMOTE float_64)(float_32 (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$1 * (int_64)$2) / (int_64)$7)) / (float_64)(float_64)1e4)))
	CALL $135(($6 + [160]), [8854], $6)
	CALL eosio_assert((((int_64)$7 <= (int_64)$1) & ((uint_64)$2 >= (uint_64)*($8 + [64]))), ($6 + [160]))
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)-2) <= (int_64)96), [8888])
	$1 = *($0)
	*($6 + [116]) = $0
	*($6 + [96]) = ($6 + [456])
	*($6 + [104]) = ($6 + [335])
	*($6 + [108]) = ($6 + [320])
	*($6 + [112]) = ($6 + [312])
	*($6 + [100]) = $3
	CALL $34(($6 + [48]), ($0 + [136]), $1, ($6 + [96]))
	$1 = CALL current_time()
	*(($6 + [124])) = (int_64)0
	*(($6 + [140])) = (int_64)0
	*(($6 + [148])) = (int_64)0
	*($6 + [108]) = [0]
	*($6 + [112]) = [0]
	*($6 + [116 align=4]) = (int_64)0
	*($6 + [132 align=4]) = (int_64)0
	*($6 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [64])) = *(($3 + [8]))
	*($6 + [48]) = *($6 + [456])
	*($6 + [56]) = *($3)
	*($6 + [72]) = *($6 + [335])
	*($6 + [80]) = *($6 + [320])
	*($6 + [88]) = *($6 + [312])
	*($6 + [40]) = (int_64)3617214756542218240
	*($6 + [32]) = *($0)
	*($6 + [464]) = (int_64)-4157529991795441664
	CALL $35(($6 + [132]), ($6 + [32]), $0, ($6 + [464]), ($6 + [48]))
	$1 = *($0)
	$2 = *($6 + [456])
	*($6 + [116]) = [1]
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = $2
	CALL $36(($6 + [464]), ($6 + [96]))
	$5 = *($6 + [464])
	CALL send_deferred(($6 + [32]), $1, $5, (*($6 + [468]) - $5), [1])
	$5 = *($6 + [464])
	if ( ($5 == 0) ){ goto $label$47 }
	*($6 + [468]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$47
	CALL $37(($6 + [96]))
	$0 = *($6 + [336])
	if ( ($0 == 0) ){ goto $label$17 }
	$9 = *($6 + [340])
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$49 }
	
.LOOP $label$50:
	$5 = ($9 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$51
	$9 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$50 }
	$5 = *($6 + [336])
	goto $label$48 
	
.LABEL $label$49
	$5 = $0
	
.LABEL $label$48
	*($6 + [340]) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($11 + [28])
	if ( ($5 == 0) ){ goto $label$52 }
	*(($11 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$52
	$5 = *($11 + [16])
	if ( ($5 == 0) ){ goto $label$53 }
	*(($11 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$53
	CALL $37(($6 + [392]))
	$10
	
.LABEL $label$1
	$global$0 = ($6 + [480])
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert([1], [8192])
	
.LABEL $label$1
	*($3 + [192]) = [8298]
	*($3 + [196]) = CALL $141([8298])
	*($3 + [88]) = *($3 + [192])
	CALL $2(($3 + [200]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($3 + [176]) = [8396]
	*($3 + [180]) = CALL $141([8396])
	*($3 + [80]) = *($3 + [176])
	CALL $2(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)-8173745138715779792) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3) = *($3 + [168])
	CALL $4($0, $1, $3)
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $131([0])
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$2
	if ( ((int_64)$2 <= (int_64)-4417247484950609921) ){ goto $label$15 }
	if ( ((int_64)$2 <= (int_64)-4157529991795441665) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-2688959074178957312) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [2]
	*($3 + [8]) = *($3 + [160])
	CALL $6($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)-4817983931993292801) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4863887597560135680) ){ goto $label$7 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [3]
	*($3 + [72]) = *($3 + [96])
	CALL $6($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4417085847014850560) ){ goto $label$7 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [32]) = *($3 + [136])
	CALL $9($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4817983931993292800) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4417357895863107584) ){ goto $label$7 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [16]) = *($3 + [152])
	CALL $11($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	*($3 + [116]) = [0]
	*($3 + [112]) = [6]
	*($3 + [56]) = *($3 + [112])
	CALL $13($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [48]) = *($3 + [120])
	CALL $15($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [40]) = *($3 + [128])
	CALL $17($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [24]) = *($3 + [144])
	CALL $19($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [108]) = [0]
	*($3 + [104]) = [10]
	*($3 + [64]) = *($3 + [104])
	CALL $13($1, $1, ($3 + [64]))
	
.LABEL $label$7
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = ((uint_64)$3 % (uint_64)(int_64)100)
	$1 = CALL $141([9458])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [16]) = ($1 << [1])
	$4 = (($2 + [16]) | [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [16]) = ($5 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $1
	
.LABEL $label$3
	CALL memcpy($4, [9458], $1)
	
.LABEL $label$2
	*(($4 + $1)) = [0]
	CALL $128($2, $3)
	$1 = *($2)
	$4 = ($1 & [1])
	$1 = CALL $126(($2 + [16]), ( *($2 + [8]) ? ($2 | [1]) : $4 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $4 ))
	$4 = ($1 + [8])
	*((($2 + [32]) + [8])) = *($4)
	*($2 + [32]) = *($1)
	*($1) = (int_64)0
	*($4) = [0]
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$5
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$6
	CALL eosio_assert([0], ( *($2 + [40]) ? (($2 + [32]) | [1]) : (*($2 + [32]) & [1]) ))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$7
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $119(($2 + [16]))
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [624])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$8 = [0]
	$9 = CALL action_data_size()
	if ( ($9 == 0) ){ goto $label$1 }
	if ( ($9 <= [513]) ){ goto $label$3 }
	$8 = CALL $144($9)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($3 - (($9 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$2
	CALL read_action_data($8, $9)
	
.LABEL $label$1
	$10 = (int_64)0
	*(($4 + [520])) = (int_64)0
	$2 = [16]
	*((($4 + [496]) + [16])) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [496]) = (int_64)0
	CALL eosio_assert(((uint_32)$9 > (uint_32)[31]), [8925])
	CALL memcpy(($4 + [80]), $8, [32])
	$11 = ($8 + [32])
	$12 = ($8 + $9)
	$13 = ($4 + [592])
	$14 = (int_64)0
	
.LOOP $label$5:
	$3 = (($4 + [80]) + $7)
	if ( ($2 <= [2]) ){ goto $label$6 }
	$10 = ((int_64)$10 | (int_64)*($3))
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)(uint_64)$10 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$10 = ((int_64)$10 << (int_64)8)
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$2 == (int_32)[1]), [10008])
	*($13 + [8]) = $14
	*($13) = ((int_64)$10 | (int_64)*($3))
	$2 = [16]
	$13 = ($13 + [16])
	$10 = (int_64)0
	$14 = (int_64)0
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$7 }
	if ( ($2 <= [2]) ){ goto $label$8 }
	CALL __ashlti3(($4 + [48]), $10, $14, (($2 << [3]) + [-8]))
	$14 = *(($4 + [56]))
	$10 = *($4 + [48])
	
.LABEL $label$8
	*($13) = $10
	*($13 + [8]) = $14
	
.LABEL $label$7
	*(($2 = (($4 + [496]) + [24]))) = *((($4 + [592]) + [24]))
	*(($7 = (($4 + [496]) + [16]))) = *((($4 + [592]) + [16]))
	*($4 + [504]) = *($4 + [600])
	*($4 + [496]) = *($4 + [592])
	*(($4 + [40])) = $12
	*($4 + [68]) = $11
	*($4 + [64]) = $8
	*($4 + [72]) = $12
	*($4 + [32]) = *($4 + [64])
	$3 = CALL $22(($4 + [80]), $0, $1, ($4 + [32]))
	*(($13 = (($4 + [528]) + [24]))) = *($2)
	*(($2 = (($4 + [528]) + [16]))) = *($7)
	*($4 + [536]) = *($4 + [504])
	*($4 + [528]) = *($4 + [496])
	*((($4 + [560]) + [24])) = *($13)
	*((($4 + [560]) + [16])) = *($2)
	*($4 + [568]) = *($4 + [536])
	*($4 + [560]) = *($4 + [528])
	$2 = (($4 + [80]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$9 }
	$6 = *((*($2) + $6))
	
.LABEL $label$9
	$10 = *((($4 + [560]) + [24]))
	*((($4 + [592]) + [24])) = $10
	$14 = *((($4 + [560]) + [16]))
	*((($4 + [592]) + [16])) = $14
	*(($4 + [16])) = $14
	*(($4 + [24])) = $10
	$10 = *($4 + [568])
	*($4 + [600]) = $10
	$14 = *($4 + [560])
	*($4) = $14
	*($4 + [592]) = $14
	*($4 + [8]) = $10
	CALL void $2((int_32 $4), (int_32 $6))
	if ( ($9 <= [513]) ){ goto $label$10 }
	CALL $147($8)
	
.LABEL $label$10
	CALL $24($3)
	$global$0 = ($4 + [624])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [608])
	$global$0 = $3
	*(($4 = $3) + [600]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [504])) = (int_64)0
	*(($4 + [520])) = [0]
	*(($4 + [552])) = (int_64)0
	*(($4 + [544])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [528]) = (int_64)0
	*($4 + [560]) = [0]
	*($4 + [568]) = (int_64)0
	*($4 + [576]) = (int_64)0
	*($4 + [468]) = $2
	*($4 + [464]) = $2
	*($4 + [472]) = ($2 + $5)
	*($4 + [24]) = ($4 + [464])
	*($4 + [48]) = ($4 + [480])
	CALL $47(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [472])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [464])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $22(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [600])
	CALL $48(($4 + [24]), ($4 + [480]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $147($2)
	
.LABEL $label$4
	CALL $24($3)
	$2 = *(($4 + [512]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [516])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [608])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [15]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [176])
	$5 = *(($0 + [204]))
	$4 = *(($0 + [200]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)105) ){ goto $label$4 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$3), [9097])
	goto $label$2 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($3), *(($0 + [184])), (int_64)7235159550150574080, (int_64)105)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32($3, $1)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$3), [9097])
	
.LABEL $label$2
	*($2) = ($2 + [15])
	CALL eosio_assert([1], [9247])
	CALL $41($3, $6, (int_64)0, $2)
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$1
	$7 = *($0)
	*($2 + [8]) = ($2 + [15])
	CALL $42($2, $3, $7, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8925])
	CALL memcpy(($4 + [32]), $2, [1])
	$8 = *($4 + [32])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [1])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$9 = CALL $22(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $147($2)
	
.LABEL $label$5
	CALL $24($9)
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	$6 = ($global$0 - [144])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = CALL current_time()
	*(($6 + [92])) = (int_64)0
	*(($6 + [108])) = (int_64)0
	*(($6 + [116])) = (int_64)0
	*($6 + [76]) = [0]
	*($6 + [80]) = [0]
	*($6 + [84 align=4]) = (int_64)0
	*($6 + [100 align=4]) = (int_64)0
	*($6 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [32])) = *(($2 + [8]))
	*($6 + [16]) = $1
	*($6 + [40]) = $3
	*($6 + [48]) = $4
	*($6 + [56]) = $5
	*($6 + [24]) = *($2)
	*($6 + [8]) = (int_64)3617214756542218240
	*($6) = *($0)
	*($6 + [128]) = (int_64)-4817983931993292800
	CALL $35(($6 + [100]), $6, $0, ($6 + [128]), ($6 + [16]))
	$5 = *($0)
	*($6 + [84]) = [1]
	*($6 + [8]) = (int_64)0
	*($6) = $1
	CALL $36(($6 + [128]), ($6 + [64]))
	$0 = *($6 + [128])
	CALL send_deferred($6, $5, $0, (*($6 + [132]) - $0), [1])
	$0 = *($6 + [128])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [132]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $37(($6 + [64]))
	$global$0 = ($6 + [144])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [496]))) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [504]) = [0]
	*($4 + [512]) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [468]) = $2
	*($4 + [464]) = $2
	*($4 + [472]) = ($2 + $7)
	*($4 + [560]) = ($4 + [464])
	*($4 + [48]) = ($4 + [480])
	CALL $49(($4 + [48]), ($4 + [560]))
	$8 = *($4 + [472])
	*((($4 + [32]) + [8])) = $8
	*((($4 + [16]) + [8])) = $8
	$9 = *($4 + [464])
	*($4 + [16]) = $9
	*($4 + [32]) = $9
	$8 = CALL $22(($4 + [48]), $0, $1, ($4 + [16]))
	*(($10 = (($4 + [528]) + [8]))) = *($3)
	*($4 + [528]) = *($4 + [488])
	$0 = *($4 + [480])
	$11 = *($4 + [504])
	$1 = *($4 + [512])
	$9 = *($4 + [520])
	*((($4 + [544]) + [8])) = *($10)
	*($4 + [544]) = *($4 + [528])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [544]) + [8]))
	*((($4 + [560]) + [8])) = $12
	*(($4 + [8])) = $12
	$12 = *($4 + [544])
	*($4) = $12
	*($4 + [560]) = $12
	CALL void $3((int_32 $0), (int_64 $4), (int_32 ($11 & [255])), (int_32 $1), (int_64 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $147($2)
	
.LABEL $label$5
	CALL $24($8)
	$global$0 = ($4 + [576])
	return [1]
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9148])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8925])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8925])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [176])
	$6 = *(($0 + [204]))
	$5 = *(($0 + [200]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9097])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [184])), (int_64)7235159550150574080, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $32($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9097])
	
.LABEL $label$2
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [9247])
	CALL $43($4, $8, (int_64)0, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $44($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8925])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8925])
	CALL memcpy((($4 + [448]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $22(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [456])
	$1 = *($4 + [448])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $24($8)
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$11 = ($global$0 - [144])
	$global$0 = $11
	*($11 + [128]) = $3
	*($11 + [136]) = $2
	*($11 + [120]) = $10
	*($11 + [112]) = $1
	*($11 + [111]) = $6
	*($11 + [96]) = $7
	*($11 + [88]) = $8
	*($11 + [80]) = *($4)
	$12 = ($0 + [216])
	$8 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$6 = *(($0 + [244]))
	$10 = *(($0 + [240]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$4 = ($6 + [-24])
	$13 = *($4)
	if ( ((int_64)*($13) == (int_64)$8) ){ goto $label$3 }
	$6 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($13 + [80]) == (int_32)$12), [9097])
	*($11 + [76]) = $13
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($12), *(($0 + [224])), (int_64)-3665743317141815296, $8)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $30($12, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$12), [9097])
	*($11 + [76]) = $4
	goto $label$1 
	
.LABEL $label$5
	*($11 + [76]) = [0]
	
.LABEL $label$1
	*($11 + [72]) = $12
	$14 = ($0 + [176])
	$6 = *(($0 + [204]))
	$13 = *(($0 + [200]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($6 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)102) ){ goto $label$8 }
	$6 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$14), [9097])
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	$4 = CALL db_find_i64(*($14), *(($0 + [184])), (int_64)7235159550150574080, (int_64)102)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $32($14, $4)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$14), [9097])
	
.LABEL $label$6
	$8 = ((int_64)((uint_64)*($10 + [8]) % (uint_64)(int_64)40) + (int_64)1)
	*($11 + [64]) = $8
	$15 = ($0 + [96])
	$6 = *(($0 + [124]))
	$12 = *(($0 + [120]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$15:
	$4 = ($6 + [-24])
	$13 = *($4)
	if ( ((int_64)*($13) == (int_64)$8) ){ goto $label$14 }
	$6 = $4
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*($13 + [116]) == (int_32)$15), [9097])
	if ( $13 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = CALL db_find_i64(*($15), *(($0 + [104])), (int_64)4229865212519383040, $8)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$13 = CALL $92($15, $4)
	CALL eosio_assert(((int_32)*($13 + [116]) == (int_32)$15), [9097])
	
.LABEL $label$12
	*($11 + [8]) = $0
	*($11 + [32]) = $5
	*($11 + [48]) = $9
	*($11 + [12]) = ($11 + [112])
	*($11 + [16]) = ($11 + [72])
	*($11 + [20]) = ($11 + [136])
	*($11 + [24]) = ($11 + [128])
	*($11 + [28]) = ($11 + [80])
	*($11 + [36]) = ($11 + [111])
	*($11 + [40]) = ($11 + [96])
	*($11 + [44]) = ($11 + [88])
	*($11 + [52]) = ($11 + [120])
	CALL eosio_assert([1], [9247])
	CALL $93($15, $13, (int_64)0, ($11 + [8]))
	goto $label$10 
	
.LABEL $label$11
	$8 = *($0)
	*($11 + [8]) = $0
	*($11 + [36]) = $5
	*($11 + [52]) = $9
	*($11 + [12]) = ($11 + [64])
	*($11 + [16]) = ($11 + [112])
	*($11 + [20]) = ($11 + [72])
	*($11 + [24]) = ($11 + [136])
	*($11 + [28]) = ($11 + [128])
	*($11 + [32]) = ($11 + [80])
	*($11 + [40]) = ($11 + [111])
	*($11 + [44]) = ($11 + [96])
	*($11 + [48]) = ($11 + [88])
	*($11 + [56]) = ($11 + [120])
	CALL $94($11, $15, $8, ($11 + [8]))
	
.LABEL $label$10
	*($11 + [8]) = ($11 + [64])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9247])
	CALL $95($14, $10, (int_64)0, ($11 + [8]))
	$global$0 = ($11 + [144])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $89(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9148])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = $0
	CALL $96(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [9791])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9836])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9886])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $52($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $55(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

int_64 .FUNC $54 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$3 = ($global$0 - [288])
	$global$0 = $3
	$4 = (int_64)0
	*(($5 = (($3 + [96]) + [24]))) = (int_64)0
	*(($6 = (($3 + [96]) + [16]))) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [192]) = $2
	*($3 + [200]) = CALL tapos_block_num()
	*($3 + [204]) = CALL tapos_block_prefix()
	*($3 + [208]) = CALL current_time()
	CALL $148(($3 + [224]), ($3 + [192]), [24])
	$7 = (($3 + [224]) + [24])
	*($5) = *($7)
	$8 = (($3 + [224]) + [16])
	*($6) = *($8)
	*($3 + [104]) = *($3 + [232])
	*($3 + [96]) = *($3 + [224])
	$9 = CALL read_transaction([0], [0])
	$10 = CALL $144($9)
	CALL read_transaction($10, $9)
	*(($11 = (($3 + [64]) + [24]))) = (int_64)0
	*(($12 = (($3 + [64]) + [16]))) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	CALL $148(($3 + [224]), $10, $9)
	*($11) = *($7)
	*($12) = *($8)
	*($3 + [72]) = *($3 + [232])
	*($3 + [64]) = *($3 + [224])
	CALL printhex(($3 + [64]), [32])
	*(($9 = (($3 + [32]) + [24]))) = *($5)
	*(($5 = (($3 + [32]) + [16]))) = *($6)
	*(($6 = ($3 + [16]))) = *($12)
	*(($12 = ($3 + [24]))) = *($11)
	*($3 + [40]) = *($3 + [104])
	*($3 + [32]) = *($3 + [96])
	*($3) = *($3 + [64])
	*($3 + [8]) = *($3 + [72])
	*(($11 = (($3 + [160]) + [24]))) = *($12)
	*(($12 = (($3 + [160]) + [16]))) = *($6)
	$2 = *($5)
	*((($3 + [128]) + [16])) = $2
	$13 = *($9)
	*((($3 + [128]) + [24])) = $13
	$14 = *($3 + [32])
	*($0 + [256]) = $14
	$15 = *($3 + [40])
	*(($5 = ($0 + [264]))) = $15
	*(($6 = ($0 + [272]))) = $2
	*(($9 = ($0 + [280]))) = $13
	*($3 + [168]) = *($3 + [8])
	*($3 + [160]) = *($3)
	*($3 + [128]) = $14
	*($3 + [136]) = $15
	*(($10 = ($0 + [312]))) = *($11)
	*(($11 = ($0 + [304]))) = *($12)
	*(($12 = ($0 + [296]))) = *($3 + [168])
	*(($16 = ($0 + [288]))) = *($3 + [160])
	*($7) = *($9)
	*($8) = *($6)
	*(($17 = ($3 + [264]))) = *($12)
	*(($18 = ($3 + [272]))) = *($11)
	*(($19 = ($3 + [280]))) = *($10)
	*($3 + [232]) = *($5)
	*($3 + [224]) = *($0 + [256])
	*($3 + [256]) = *($16)
	CALL $148(($3 + [192]), ($3 + [224]), [64])
	$20 = (($3 + [192]) + [24])
	*(($6 = ($0 + [344]))) = *($20)
	$21 = (($3 + [192]) + [16])
	*(($9 = ($0 + [336]))) = *($21)
	*(($11 = ($0 + [328]))) = *($3 + [200])
	*(($12 = ($0 + [320]))) = *($3 + [192])
	*(($10 = ($0 + [376]))) = *($6)
	*(($16 = ($0 + [368]))) = *($9)
	*(($22 = ($0 + [360]))) = *($11)
	*(($5 = ($0 + [352]))) = *($12)
	*($7) = *($6)
	*($8) = *($9)
	*($17) = *($22)
	*($18) = *($16)
	*($19) = *($10)
	*($3 + [232]) = *($11)
	*($3 + [224]) = *($12)
	*($3 + [256]) = *($5)
	CALL $148(($3 + [192]), ($3 + [224]), [64])
	*($10) = *($20)
	*($16) = *($21)
	*($22) = *($3 + [200])
	*($5) = *($3 + [192])
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$4 = ((uint_64)*($5 + [8]) % (uint_64)$1)
	
.LABEL $label$1
	$1 = *($5)
	*($0 + [384]) = $1
	$2 = *(($5 + [24]))
	*($7) = $2
	$13 = *(($5 + [16]))
	*($8) = $13
	$14 = *(($5 + [8]))
	*(($0 + [392])) = $14
	*(($0 + [400])) = $13
	*(($0 + [408])) = $2
	*($3 + [224]) = $1
	*($3 + [232]) = $14
	$global$0 = ($3 + [288])
	return $4
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([88])
	CALL $66($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	CALL eosio_assert([1], [9241])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $147($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $52(($7 + [28]), [41])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $79(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $147($0)
	
.LABEL $label$1
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8925])
	CALL memcpy(($2 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$5 = (int_64)0
	$4 = [16]
	$6 = [0]
	$7 = ($2 + [16])
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (($2 + [48]) + $6)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$5 = ((int_64)$5 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [10008])
	*($7 + [8]) = $8
	*($7) = ((int_64)$5 | (int_64)*($9))
	$4 = [16]
	$7 = ($7 + [16])
	$5 = (int_64)0
	$8 = (int_64)0
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($3 + [48])
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($2, $5, $8, (($4 << [3]) + [-8]))
	$8 = *(($2 + [8]))
	$5 = *($2)
	
.LABEL $label$5
	*($7) = $5
	*($7 + [8]) = $8
	
.LABEL $label$4
	*($6) = *($2 + [16])
	*(($6 + [8])) = *($2 + [24])
	*(($6 + [24])) = *((($2 + [16]) + [24]))
	*(($6 + [16])) = *((($2 + [16]) + [16]))
	$6 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8925])
	CALL memcpy(($6 + [80]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($6 + [88]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($6 + [96]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [80])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $144($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10148])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $144($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $119 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [8])
	*($2 + [32]) = [8298]
	*($2 + [36]) = CALL $141([8298])
	*($2 + [8]) = *($2 + [32])
	if ( ((int_64)$3 != (int_64)*(CALL $2(($2 + [40]), ($2 + [8])))) ){ goto $label$2 }
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$0 = CALL $141([8930])
	if ( ($0 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8999])
	goto $label$4 
	
.LABEL $label$5
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($0 + [8929]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9044])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$6 }
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	*($2 + [16]) = [8396]
	*($2 + [20]) = CALL $141([8396])
	*($2) = *($2 + [16])
	if ( ((int_64)$3 != (int_64)*(CALL $2(($2 + [24]), $2))) ){ goto $label$12 }
	$3 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$0 = CALL $141([8934])
	if ( ($0 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [8999])
	goto $label$10 
	
.LABEL $label$12
	CALL eosio_assert([0], [8937])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$11
	if ( ($0 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = (int_64)0
	
.LOOP $label$13:
	$6 = *(($0 + [8933]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9044])
	
.LABEL $label$14
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$13 }
	goto $label$8 
	
.LABEL $label$9
	$5 = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$3 == (int_64)$5), [8937])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL eosio_assert([1], [8937])
	$global$0 = ($2 + [48])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $129(($0 + [16]))
	
.LABEL $label$1
	CALL $129(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $97(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [9241])
	CALL memcpy(*($0 + [4]), $2, [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9241])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9241])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9241])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	float_64 $24
	$6 = ($global$0 - [672])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = ($0 + [216])
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$10 = *(($0 + [244]))
	$9 = *(($0 + [240]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$8) ){ goto $label$3 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)$7), [9097])
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	$11 = CALL db_find_i64(*($7), *(($0 + [224])), (int_64)-3665743317141815296, $8)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $30($7, $11)
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)$7), [9097])
	
.LABEL $label$1
	$13 = ($0 + [136])
	$10 = *(($0 + [164]))
	$14 = *(($0 + [160]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$6 }
	
.LOOP $label$8:
	$11 = ($10 + [-24])
	$9 = *($11)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$7 }
	$10 = $11
	if ( ((int_32)$14 != (int_32)$11) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$13), [9097])
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	$11 = CALL db_find_i64(*($13), *(($0 + [144])), (int_64)4982871653160583168, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $50($13, $11)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$13), [9097])
	
.LABEL $label$5
	$14 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($14, [9472])
	if ( (uint_64)((int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($9 + [64])) <= (int_64)3) ){ goto $label$26 }
	CALL $135(($6 + [512]), [9490], [0])
	$8 = CALL current_time()
	*(($6 + [476])) = (int_64)0
	*(($6 + [492])) = (int_64)0
	*(($6 + [500])) = (int_64)0
	*($6 + [460]) = [0]
	*($6 + [464]) = [0]
	*($6 + [468 align=4]) = (int_64)0
	*($6 + [484 align=4]) = (int_64)0
	*($6 + [448]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [392])) = [0]
	*($6 + [384]) = (int_64)0
	$11 = CALL $141(($6 + [512]))
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$25 }
	*($6 + [384]) = ($11 << [1])
	$10 = (($6 + [384]) | [1])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	CALL eosio_assert($14, [9727])
	CALL eosio_assert($14, [9761])
	$11 = CALL db_next_i64(*($9 + [76]), ($6 + [512]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$27 }
	CALL $50($13, $11)
	
.LABEL $label$27
	CALL $51($13, $9)
	$13 = ($0 + [176])
	$10 = *(($0 + [204]))
	$9 = *(($0 + [200]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$28:
	$11 = ($10 + [-24])
	$14 = *($11)
	if ( ((int_64)*($14) == (int_64)101) ){ goto $label$22 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$28 }
	goto $label$21 
	
.LABEL $label$25
	$3 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($3)
	*($6 + [384]) = ($3 | [1])
	*($6 + [392]) = $10
	*($6 + [388]) = $11
	
.LABEL $label$24
	CALL memcpy($10, ($6 + [512]), $11)
	
.LABEL $label$23
	*(($10 + $11)) = [0]
	*((($6 + [400]) + [24])) = *(($2 + [8]))
	$3 = (($6 + [384]) + [8])
	*((($6 + [400]) + [40])) = *($3)
	*($6 + [408]) = $1
	$8 = *($0)
	*($6 + [400]) = $8
	*($6 + [416]) = *($2)
	*($6 + [432]) = *($6 + [384])
	$10 = *((($6 + [448]) + [40]))
	$11 = *(($6 + [492]))
	*($6 + [392]) = (int_64)3617214756542218240
	*($6 + [384]) = $8
	*($6 + [224]) = (int_64)-3617168760277827584
	$12 = ($12 + [8])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$29 }
	$8 = *($12)
	*($10 + [8]) = (int_64)-3617168760277827584
	*($10) = $8
	*($10 + [16 align=4]) = (int_64)0
	*(($12 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$2 = ($11 + [16])
	*($12) = $2
	*(($11 + [8])) = *($3)
	*($11) = *($6 + [384])
	*(($10 + [20])) = $2
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($6 + [432])
	$12 = ( *((($6 + [400]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($12 + [32])
	$8 = (CASTING uint_64)(uint_32 $12)
	$12 = ($10 + [28])
	
.LOOP $label$30:
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$30 }
	if ( ($11 == 0) ){ goto $label$19 }
	CALL $52($12, $11)
	$12 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$18 
	
.LABEL $label$29
	CALL $53(($6 + [484]), ($6 + [384]), $12, ($6 + [224]), ($6 + [400]))
	goto $label$17 
	
.LABEL $label$22
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$13), [9097])
	goto $label$20 
	
.LABEL $label$21
	$14 = [0]
	$11 = CALL db_find_i64(*($13), *(($0 + [184])), (int_64)7235159550150574080, (int_64)101)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$20 }
	$14 = CALL $32($13, $11)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$13), [9097])
	
.LABEL $label$20
	$15 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($15, [9517])
	*($6 + [376]) = ((int_64)*($14 + [8]) + (int_64)1)
	$16 = *($2)
	$17 = $4
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$31 }
	if ( ((int_32)$3 != (int_32)[2]) ){ goto $label$32 }
	$17 = (int_64))((int_64)99 - $4)
	goto $label$31 
	
.LABEL $label$32
	$17 = (int_64)0
	
.LABEL $label$31
	$18 = *($12 + [8])
	$19 = *($0)
	*(($6 + [544])) = [0]
	*($6 + [520]) = $19
	*($6 + [512]) = $18
	*($6 + [528]) = (int_64)-1
	*($6 + [536]) = (int_64)0
	$16 = ((int_64)((int_64)$16 * (int_64)98) / (int_64)((int_64)$17 & (int_64)255))
	$8 = *(CALL $31(($6 + [512]), $8, [9171]))
	$9 = *($6 + [536])
	if ( ($9 == 0) ){ goto $label$33 }
	$20 = ($6 + [540])
	$11 = *($20)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$35 }
	
.LOOP $label$36:
	$11 = ($11 + [-24])
	$10 = *($11)
	*($11) = [0]
	if ( ($10 == 0) ){ goto $label$37 }
	CALL _ZdlPv($10)
	
.LABEL $label$37
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$36 }
	$11 = *(($6 + [536]))
	goto $label$34 
	
.LABEL $label$35
	$11 = $9
	
.LABEL $label$34
	*($20) = $9
	CALL _ZdlPv($11)
	
.LABEL $label$33
	$19 = ((int_64)$8 / (int_64)10)
	$18 = ((int_64)((int_64)$8 * (int_64)30) / (int_64)100)
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$39 }
	if ( ((int_64)$16 <= (int_64)$18) ){ goto $label$38 }
	$8 = (int_64)0
	$10 = ((int_32)$3 == (int_32)[2])
	
.LOOP $label$40:
	$17 = CALL $54($0, (int_64)100, $8)
	$11 = ($10 & ((uint_64)$17 > (uint_64)$4))
	if ( (uint_64)($17 <= $4) ){ goto $label$41 }
	if ( ($11 == 0) ){ goto $label$12 }
	
.LABEL $label$41
	$8 = ((int_64)$8 + (int_64)1)
	goto $label$40 
	
.LABEL $label$39
	$10 = ((int_32)$3 == (int_32)[2])
	$8 = (int_64)0
	
.LOOP $label$42:
	$17 = CALL $54($0, (int_64)100, $8)
	$11 = ($10 & ((uint_64)$17 > (uint_64)$4))
	if ( ((int_64)$16 <= (int_64)$18) ){ goto $label$44 }
	if ( $11 ){ goto $label$43 }
	goto $label$13 
	
.LABEL $label$44
	if ( ((int_64)$16 <= (int_64)$19) ){ goto $label$45 }
	if ( ((uint_64)$8 > (uint_64)(int_64)1) ){ goto $label$11 }
	if ( (((int_32)$11 ^ (int_32)[1]) == 0) ){ goto $label$43 }
	goto $label$14 
	
.LABEL $label$45
	if ( (((int_64)((int_64)((int_64)$17 & (int_64)3) | (int_64)$8) != (int_64)0) | ((int_32)$11 ^ (int_32)[1])) ){ goto $label$15 }
	
.LABEL $label$43
	$8 = ((int_64)$8 + (int_64)1)
	goto $label$42 
	
.LABEL $label$38
	$10 = ((int_64)$16 <= (int_64)$19)
	$9 = ((int_32)$3 == (int_32)[2])
	$8 = (int_64)0
	$11 = [1]
	$17 = CALL $54($0, (int_64)100, (int_64)0)
	if ( (uint_64)($17 <= $4) ){ goto $label$10 }
	$21 = [215]
	goto $label$9 
	
.LABEL $label$19
	$12 = [0]
	$11 = [0]
	
.LABEL $label$18
	*($6 + [260]) = $11
	*($6 + [256]) = $11
	*($6 + [264]) = $12
	*($6 + [656]) = ($6 + [256])
	*($6 + [192]) = ($6 + [400])
	CALL $55(($6 + [192]), ($6 + [656]))
	*(($11 = (($6 + [448]) + [40]))) = (*($11) + [40])
	
.LABEL $label$17
	*(($6 + [468])) = [0]
	*($6 + [392]) = (int_64)0
	*($6 + [384]) = $1
	$8 = *($0)
	CALL $36(($6 + [256]), ($6 + [448]))
	$11 = *($6 + [256])
	CALL send_deferred(($6 + [384]), $8, $11, (*($6 + [260]) - $11), [0])
	$11 = *($6 + [256])
	if ( ($11 == 0) ){ goto $label$46 }
	*($6 + [260]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$46
	CALL eosio_assert($14, [9727])
	CALL eosio_assert($14, [9761])
	$11 = CALL db_next_i64(*($9 + [76]), ($6 + [384]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$47 }
	CALL $50($13, $11)
	
.LABEL $label$47
	CALL $51($13, $9)
	if ( ((*(($6 + [432])) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($6 + [440])))
	
.LABEL $label$48
	CALL $37(($6 + [448]))
	$global$0 = ($6 + [672])
	return (unreachable)
	
.LABEL $label$16
	CALL $119(($6 + [384]))
	
.LABEL $label$15
	$21 = [1]
	goto $label$9 
	
.LABEL $label$14
	$21 = [1]
	goto $label$9 
	
.LABEL $label$13
	$21 = [1]
	goto $label$9 
	
.LABEL $label$12
	$21 = [1]
	goto $label$9 
	
.LABEL $label$11
	$21 = [1]
	goto $label$9 
	
.LABEL $label$10
	$21 = [218]
	
.LABEL $label$9
	
.LOOP $label$49:
	goto $label$420 
	
.LABEL $label$425
	$11 = ($9 & ((uint_64)$17 > (uint_64)$4))
	if ( $10 ){ goto $label$204 }
	goto $label$205 
	
.LABEL $label$424
	$11 = [1]
	$8 = ((int_64)$8 + (int_64)1)
	$17 = CALL $54($0, (int_64)100, $8)
	if ( ((uint_64)$17 >= (uint_64)$4) ){ goto $label$206 }
	$21 = [218]
	goto $label$49 
	
.LABEL $label$423
	if ( $10 ){ goto $label$202 }
	$21 = [216]
	goto $label$49 
	
.LABEL $label$422
	if ( ((uint_64)$8 > (uint_64)(int_64)1) ){ goto $label$199 }
	$21 = [217]
	goto $label$49 
	
.LABEL $label$421
	if ( (((int_32)$11 ^ (int_32)[1]) == 0) ){ goto $label$200 }
	goto $label$201 
	
.LABEL $label$420
	if ( ((((int_64)((int_64)((int_64)$17 & (int_64)3) | (int_64)$8) != (int_64)0) | ((int_32)$11 ^ (int_32)[1])) == 0) ){ goto $label$203 }
	$21 = [1]
	goto $label$49 
	
.LABEL $label$419
	*($6 + [512]) = ($6 + [376])
	CALL eosio_assert($15, [9247])
	CALL $56($13, $14, (int_64)0, ($6 + [512]))
	*($6 + [368]) = [0]
	*($6 + [360]) = (int_64)0
	*($6 + [392]) = (int_64)0
	*($6 + [384]) = (int_64)0
	$19 = *(($2 + [8]))
	CALL eosio_assert([1], [9939])
	$8 = (uint_64)$19 >> (uint_64)(int_64)8)
	$11 = [0]
	$21 = [2]
	goto $label$49 
	
.LABEL $label$418
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$193 }
	$21 = [208]
	goto $label$49 
	
.LABEL $label$417
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$21 = [209]
	goto $label$49 
	
.LABEL $label$416
	$8 = $18
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$196 }
	goto $label$195 
	
.LABEL $label$415
	$8 = $18
	$21 = [211]
	goto $label$49 
	
.LABEL $label$414
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$194 }
	$21 = [212]
	goto $label$49 
	
.LABEL $label$413
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$50 }
	$21 = [213]
	goto $label$49 
	
.LABEL $label$412
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$198 }
	goto $label$197 
	
.LABEL $label$411
	$10 = [0]
	$21 = [4]
	goto $label$49 
	
.LABEL $label$410
	CALL eosio_assert($10, [9988])
	*(($6 + [392])) = $19
	*($6 + [384]) = (int_64)0
	$18 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$192 }
	$21 = [207]
	goto $label$49 
	
.LABEL $label$409
	if ( (uint_64)($17 <= $4) ){ goto $label$191 }
	$21 = [5]
	goto $label$49 
	
.LABEL $label$408
	$16 = ( ( $16 ? (int_64)0 : ((uint_64)$17 > (uint_64)$4) ) ? (int_64)0 : ((int_32)$3 == (int_32)[2]) )
	$21 = [6]
	goto $label$49 
	
.LABEL $label$407
	*($6 + [384]) = $16
	$11 = *($6 + [364])
	if ( ((int_32)$11 == (int_32)*((($6 + [360]) + [8]))) ){ goto $label$190 }
	$21 = [7]
	goto $label$49 
	
.LABEL $label$406
	*($11) = *($6 + [384])
	*(($11 + [8])) = *((($6 + [384]) + [8]))
	$11 = ($11 + [16])
	*($6 + [364]) = $11
	goto $label$189 
	
.LABEL $label$405
	CALL $57(($6 + [360]), ($6 + [384]))
	$11 = *($6 + [364])
	$21 = [8]
	goto $label$49 
	
.LABEL $label$404
	*(($10 = (($6 + [344]) + [8]))) = *(($2 + [8]))
	*($6 + [328]) = (int_64)0
	*($6 + [336]) = [0]
	*($6 + [344]) = *($2)
	$19 = *($6 + [376])
	$11 = ($11 - *($6 + [360]))
	if ( ($11 == 0) ){ goto $label$188 }
	$21 = [9]
	goto $label$49 
	
.LABEL $label$403
	$9 = int_32($11 >> [4])
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$187 }
	$21 = [10]
	goto $label$49 
	
.LABEL $label$402
	$11 = CALL _Znwj($11)
	*(($6 + [336])) = ($11 + ($9 << [4]))
	*($6 + [328]) = $11
	*($6 + [332]) = $11
	$14 = *($6 + [360])
	$9 = (*($6 + [364]) - $14)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$186 }
	$21 = [204]
	goto $label$49 
	
.LABEL $label$401
	CALL memcpy($11, $14, $9)
	*($6 + [332]) = (*($6 + [332]) + $9)
	$21 = [11]
	goto $label$49 
	
.LABEL $label$400
	$22 = *(($0 + [408]))
	*((($6 + [288]) + [24])) = $22
	$23 = *(($0 + [400]))
	*((($6 + [288]) + [16])) = $23
	$8 = *(($0 + [392]))
	$16 = *($0 + [384])
	*((($6 + [152]) + [8])) = *($10)
	*((($6 + [112]) + [16])) = $23
	*((($6 + [112]) + [24])) = $22
	*($6 + [288]) = $16
	*($6 + [296]) = $8
	*($6 + [152]) = *($6 + [344])
	*($6 + [112]) = $16
	*($6 + [120]) = $8
	CALL $58($0, $19, $1, $5, ($6 + [152]), ($6 + [328]), $3, $4, $17, ($6 + [112]), (CASTING uint_32)(uint_64 $18))
	$11 = *($6 + [328])
	if ( ($11 == 0) ){ goto $label$185 }
	$21 = [12]
	goto $label$49 
	
.LABEL $label$399
	*($6 + [332]) = $11
	CALL _ZdlPv($11)
	$21 = [13]
	goto $label$49 
	
.LABEL $label$398
	*($6 + [512]) = $2
	$15 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($15, [9247])
	$8 = (int_64)0
	CALL $59($7, $12, (int_64)0, ($6 + [512]))
	$18 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$11 = CALL $141([8930])
	if ( ($11 <= [8]) ){ goto $label$184 }
	$21 = [203]
	goto $label$49 
	
.LABEL $label$397
	CALL eosio_assert([0], [8999])
	goto $label$182 
	
.LABEL $label$396
	if ( ($11 == 0) ){ goto $label$183 }
	$21 = [15]
	goto $label$49 
	
.LABEL $label$395
	$8 = (int_64)0
	$21 = [16]
	goto $label$49 
	
.LABEL $label$394
	$10 = *(($11 + [8929]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$180 }
	$21 = [202]
	goto $label$49 
	
.LABEL $label$393
	CALL eosio_assert([0], [9044])
	$21 = [17]
	goto $label$49 
	
.LABEL $label$392
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$181 }
	$21 = [18]
	goto $label$49 
	
.LABEL $label$391
	$16 = ((int_64)$1 * (int_64)10000)
	if ( ((int_64)$18 != (int_64)$8) ){ goto $label$179 }
	$21 = [161]
	goto $label$49 
	
.LABEL $label$390
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$78 }
	$21 = [162]
	goto $label$49 
	
.LABEL $label$389
	$10 = [0]
	$9 = *([0] + [10052])
	$8 = $1
	$21 = [163]
	goto $label$49 
	
.LABEL $label$388
	*((($6 + [512]) + ($11 = $10))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$11 == (int_32)[12]) )))))
	$10 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[11]) ){ goto $label$76 }
	$21 = [164]
	goto $label$49 
	
.LABEL $label$387
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$77 }
	$21 = [165]
	goto $label$49 
	
.LABEL $label$386
	*(($6 + [456])) = [0]
	*($6 + [448]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$75 }
	$21 = [200]
	goto $label$49 
	
.LABEL $label$385
	*($6 + [448]) = ($10 << [1])
	$9 = (($6 + [448]) | [1])
	goto $label$74 
	
.LABEL $label$384
	*(($6 + [456])) = [0]
	*($6 + [448]) = (int_64)0
	*($6 + [448]) = [0]
	$10 = (($6 + [448]) | [1])
	$9 = $10
	goto $label$72 
	
.LABEL $label$383
	$14 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($14)
	*($6 + [448]) = ($14 | [1])
	*($6 + [456]) = $9
	*($6 + [452]) = $10
	$21 = [167]
	goto $label$49 
	
.LABEL $label$382
	$14 = ($11 + [1])
	$11 = [0]
	$21 = [168]
	goto $label$49 
	
.LABEL $label$381
	*(($9 + $11)) = *((($6 + [512]) + $11))
	$11 = ($11 + [1])
	if ( ((int_32)$14 != (int_32)$11) ){ goto $label$73 }
	$21 = [169]
	goto $label$49 
	
.LABEL $label$380
	$9 = ($9 + $10)
	$10 = (($6 + [448]) | [1])
	$21 = [170]
	goto $label$49 
	
.LABEL $label$379
	$11 = [0]
	*($9) = [0]
	$8 = *($2)
	*(($6 + [96])) = *($6 + [384])
	*($6 + [88]) = $8
	*($6 + [80]) = ( *($6 + [456]) ? $10 : (*($6 + [448]) & [1]) )
	CALL $135(($6 + [512]), [9540], ($6 + [80]))
	if ( ((*($6 + [448]) & [1]) == 0) ){ goto $label$71 }
	$21 = [171]
	goto $label$49 
	
.LABEL $label$378
	CALL _ZdlPv(*(($6 + [456])))
	$21 = [172]
	goto $label$49 
	
.LABEL $label$377
	$19 = *(($2 + [8]))
	$22 = ((int_64)*($2) / (int_64)50)
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9939])
	$8 = (uint_64)$19 >> (uint_64)(int_64)8)
	$21 = [173]
	goto $label$49 
	
.LABEL $label$376
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$21 = [194]
	goto $label$49 
	
.LABEL $label$375
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$21 = [195]
	goto $label$49 
	
.LABEL $label$374
	$8 = $18
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$373
	$8 = $18
	$21 = [197]
	goto $label$49 
	
.LABEL $label$372
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$66 }
	$21 = [198]
	goto $label$49 
	
.LABEL $label$371
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$52 }
	$21 = [199]
	goto $label$49 
	
.LABEL $label$370
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$369
	$10 = [0]
	$21 = [175]
	goto $label$49 
	
.LABEL $label$368
	CALL eosio_assert($10, [9988])
	$8 = CALL current_time()
	*(($6 + [476])) = (int_64)0
	*(($6 + [492])) = (int_64)0
	*(($6 + [500])) = (int_64)0
	*($6 + [460]) = [0]
	*($6 + [464]) = [0]
	*($6 + [468 align=4]) = (int_64)0
	*($6 + [484 align=4]) = (int_64)0
	*($6 + [448]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [280]) = [9557]
	*($6 + [284]) = CALL $141([9557])
	*($6 + [72]) = *($6 + [280])
	$9 = CALL $2(($6 + [224]), ($6 + [72]))
	*(($6 + [264])) = [0]
	*($6 + [256]) = (int_64)0
	$11 = CALL $141(($6 + [512]))
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$64 }
	$21 = [176]
	goto $label$49 
	
.LABEL $label$367
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$63 }
	$21 = [192]
	goto $label$49 
	
.LABEL $label$366
	*($6 + [256]) = ($11 << [1])
	$10 = (($6 + [256]) | [1])
	if ( $11 ){ goto $label$61 }
	goto $label$62 
	
.LABEL $label$365
	$14 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($14)
	*($6 + [256]) = ($14 | [1])
	*($6 + [264]) = $10
	*($6 + [260]) = $11
	$21 = [178]
	goto $label$49 
	
.LABEL $label$364
	CALL memcpy($10, ($6 + [512]), $11)
	$21 = [179]
	goto $label$49 
	
.LABEL $label$363
	*(($10 + $11)) = [0]
	*((($6 + [400]) + [24])) = $19
	$14 = (($6 + [256]) + [8])
	*((($6 + [400]) + [40])) = *($14)
	*($6 + [416]) = $22
	$8 = *($0)
	*($6 + [400]) = $8
	*($6 + [408]) = *($9)
	*($6 + [432]) = *($6 + [256])
	*($6 + [264]) = (int_64)3617214756542218240
	*($6 + [256]) = $8
	*($6 + [248]) = [8298]
	*($6 + [252]) = CALL $141([8298])
	*($6 + [64]) = *($6 + [248])
	$11 = CALL $2(($6 + [192]), ($6 + [64]))
	*($6 + [656]) = (int_64)-3617168760277827584
	$10 = *((($6 + [448]) + [40]))
	if ( ((uint_32)$10 >= (uint_32)*(($6 + [492]))) ){ goto $label$60 }
	$21 = [186]
	goto $label$49 
	
.LABEL $label$362
	*($10 + [8]) = (int_64)-3617168760277827584
	*($10 + [16 align=4]) = (int_64)0
	*($10) = *($11)
	*(($9 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$20 = ($11 + [16])
	*($9) = $20
	*(($11 + [8])) = *($14)
	*($11) = *($6 + [256])
	*(($10 + [20])) = $20
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($6 + [432])
	$9 = ( *((($6 + [400]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($10 + [28])
	$21 = [187]
	goto $label$49 
	
.LABEL $label$361
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$56 }
	$21 = [188]
	goto $label$49 
	
.LABEL $label$360
	if ( ($11 == 0) ){ goto $label$55 }
	$21 = [189]
	goto $label$49 
	
.LABEL $label$359
	CALL $52($9, $11)
	$9 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$54 
	
.LABEL $label$358
	CALL $60(($6 + [484]), ($6 + [256]), $11, ($6 + [656]), ($6 + [400]))
	goto $label$59 
	
.LABEL $label$357
	$9 = [0]
	$11 = [0]
	$21 = [190]
	goto $label$49 
	
.LABEL $label$356
	*($6 + [228]) = $11
	*($6 + [224]) = $11
	*($6 + [232]) = $9
	*($6 + [168]) = ($6 + [224])
	*($6 + [184]) = ($6 + [400])
	CALL $55(($6 + [184]), ($6 + [168]))
	*(($11 = (($6 + [448]) + [40]))) = (*($11) + [40])
	$21 = [181]
	goto $label$49 
	
.LABEL $label$355
	*(($6 + [468])) = [0]
	*($6 + [264]) = (int_64)0
	*($6 + [256]) = $16
	$8 = *($0)
	CALL $36(($6 + [224]), ($6 + [448]))
	$11 = *($6 + [224])
	CALL send_deferred(($6 + [256]), $8, $11, (*($6 + [228]) - $11), [0])
	$11 = *($6 + [224])
	if ( ($11 == 0) ){ goto $label$58 }
	$21 = [182]
	goto $label$49 
	
.LABEL $label$354
	*($6 + [228]) = $11
	CALL _ZdlPv($11)
	$21 = [183]
	goto $label$49 
	
.LABEL $label$353
	if ( ((*(($6 + [432])) & [1]) == 0) ){ goto $label$57 }
	$21 = [184]
	goto $label$49 
	
.LABEL $label$352
	CALL _ZdlPv(*(($6 + [440])))
	$21 = [185]
	goto $label$49 
	
.LABEL $label$351
	$16 = ((int_64)$16 | (int_64)1)
	CALL $37(($6 + [448]))
	$21 = [19]
	goto $label$49 
	
.LABEL $label$350
	*($6 + [240]) = [8819]
	*($6 + [244]) = CALL $141([8819])
	*($6 + [56]) = *($6 + [240])
	if ( ((int_64)*(CALL $2(($6 + [512]), ($6 + [56]))) == (int_64)$5) ){ goto $label$178 }
	$21 = [20]
	goto $label$49 
	
.LABEL $label$349
	if ( (CALL is_account($5) == 0) ){ goto $label$177 }
	$21 = [117]
	goto $label$49 
	
.LABEL $label$348
	$19 = *(($2 + [8]))
	$24 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$107 }
	$21 = [160]
	goto $label$49 
	
.LABEL $label$347
	$22 = (int_64)-9223372036854775808
	goto $label$106 
	
.LABEL $label$346
	$22 = (Rounds 0)($24)
	$21 = [119]
	goto $label$49 
	
.LABEL $label$345
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9939])
	$8 = (uint_64)$19 >> (uint_64)(int_64)8)
	$11 = [0]
	$21 = [120]
	goto $label$49 
	
.LABEL $label$344
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$100 }
	$21 = [154]
	goto $label$49 
	
.LABEL $label$343
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$80 }
	$21 = [155]
	goto $label$49 
	
.LABEL $label$342
	$8 = $18
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$341
	$8 = $18
	$21 = [157]
	goto $label$49 
	
.LABEL $label$340
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$21 = [158]
	goto $label$49 
	
.LABEL $label$339
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$79 }
	$21 = [159]
	goto $label$49 
	
.LABEL $label$338
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$337
	$10 = [0]
	$21 = [122]
	goto $label$49 
	
.LABEL $label$336
	CALL eosio_assert($10, [9988])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$99 }
	$21 = [123]
	goto $label$49 
	
.LABEL $label$335
	$10 = [0]
	$9 = *([0] + [10052])
	$8 = $1
	$21 = [124]
	goto $label$49 
	
.LABEL $label$334
	*((($6 + [512]) + ($11 = $10))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$11 == (int_32)[12]) )))))
	$10 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[11]) ){ goto $label$97 }
	$21 = [125]
	goto $label$49 
	
.LABEL $label$333
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$98 }
	$21 = [126]
	goto $label$49 
	
.LABEL $label$332
	*(($6 + [456])) = [0]
	*($6 + [448]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$96 }
	$21 = [152]
	goto $label$49 
	
.LABEL $label$331
	*($6 + [448]) = ($10 << [1])
	$9 = (($6 + [448]) | [1])
	goto $label$95 
	
.LABEL $label$330
	*(($6 + [456])) = [0]
	*($6 + [448]) = (int_64)0
	*($6 + [448]) = [0]
	$11 = (($6 + [448]) | [1])
	$10 = $11
	goto $label$93 
	
.LABEL $label$329
	$14 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($14)
	*($6 + [448]) = ($14 | [1])
	*($6 + [456]) = $9
	*($6 + [452]) = $10
	$21 = [128]
	goto $label$49 
	
.LABEL $label$328
	$14 = ($11 + [1])
	$11 = [0]
	$21 = [129]
	goto $label$49 
	
.LABEL $label$327
	*(($9 + $11)) = *((($6 + [512]) + $11))
	$11 = ($11 + [1])
	if ( ((int_32)$14 != (int_32)$11) ){ goto $label$94 }
	$21 = [130]
	goto $label$49 
	
.LABEL $label$326
	$10 = ($9 + $10)
	$11 = (($6 + [448]) | [1])
	$21 = [131]
	goto $label$49 
	
.LABEL $label$325
	*($10) = [0]
	*($6 + [48]) = ( *($6 + [456]) ? $11 : (*($6 + [448]) & [1]) )
	CALL $135(($6 + [512]), [9570], ($6 + [48]))
	if ( ((*($6 + [448]) & [1]) == 0) ){ goto $label$92 }
	$21 = [132]
	goto $label$49 
	
.LABEL $label$324
	CALL _ZdlPv(*(($6 + [456])))
	$21 = [133]
	goto $label$49 
	
.LABEL $label$323
	$8 = CALL current_time()
	*(($6 + [476])) = (int_64)0
	*(($6 + [492])) = (int_64)0
	*(($6 + [500])) = (int_64)0
	*($6 + [460]) = [0]
	*($6 + [464]) = [0]
	*($6 + [468 align=4]) = (int_64)0
	*($6 + [484 align=4]) = (int_64)0
	*($6 + [448]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [264])) = [0]
	*($6 + [256]) = (int_64)0
	$11 = CALL $141(($6 + [512]))
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$91 }
	$21 = [134]
	goto $label$49 
	
.LABEL $label$322
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$90 }
	$21 = [150]
	goto $label$49 
	
.LABEL $label$321
	*($6 + [256]) = ($11 << [1])
	$10 = (($6 + [256]) | [1])
	if ( $11 ){ goto $label$88 }
	goto $label$89 
	
.LABEL $label$320
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($6 + [256]) = ($9 | [1])
	*($6 + [264]) = $10
	*($6 + [260]) = $11
	$21 = [136]
	goto $label$49 
	
.LABEL $label$319
	CALL memcpy($10, ($6 + [512]), $11)
	$21 = [137]
	goto $label$49 
	
.LABEL $label$318
	*(($10 + $11)) = [0]
	*((($6 + [400]) + [24])) = $19
	$14 = (($6 + [256]) + [8])
	*((($6 + [400]) + [40])) = *($14)
	*($6 + [408]) = $5
	*($6 + [416]) = $22
	$8 = *($0)
	*($6 + [400]) = $8
	*($6 + [432]) = *($6 + [256])
	$10 = *((($6 + [448]) + [40]))
	$11 = *(($6 + [492]))
	*($6 + [264]) = (int_64)3617214756542218240
	*($6 + [256]) = $8
	*($6 + [192]) = (int_64)-3617168760277827584
	$9 = ($12 + [8])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$87 }
	$21 = [144]
	goto $label$49 
	
.LABEL $label$317
	$8 = *($9)
	*($10 + [8]) = (int_64)-3617168760277827584
	*($10) = $8
	*($10 + [16 align=4]) = (int_64)0
	*(($9 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$20 = ($11 + [16])
	*($9) = $20
	*(($11 + [8])) = *($14)
	*($11) = *($6 + [256])
	*(($10 + [20])) = $20
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($6 + [432])
	$9 = ( *((($6 + [400]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($10 + [28])
	$21 = [145]
	goto $label$49 
	
.LABEL $label$316
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$83 }
	$21 = [146]
	goto $label$49 
	
.LABEL $label$315
	if ( ($11 == 0) ){ goto $label$82 }
	$21 = [147]
	goto $label$49 
	
.LABEL $label$314
	CALL $52($9, $11)
	$9 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$81 
	
.LABEL $label$313
	CALL $53(($6 + [484]), ($6 + [256]), $9, ($6 + [192]), ($6 + [400]))
	goto $label$86 
	
.LABEL $label$312
	$9 = [0]
	$11 = [0]
	$21 = [148]
	goto $label$49 
	
.LABEL $label$311
	*($6 + [228]) = $11
	*($6 + [224]) = $11
	*($6 + [232]) = $9
	*($6 + [184]) = ($6 + [224])
	*($6 + [656]) = ($6 + [400])
	CALL $55(($6 + [656]), ($6 + [184]))
	*(($11 = (($6 + [448]) + [40]))) = (*($11) + [40])
	$21 = [139]
	goto $label$49 
	
.LABEL $label$310
	*(($6 + [468])) = [0]
	*($6 + [264]) = (int_64)0
	*($6 + [256]) = $16
	$8 = *($0)
	CALL $36(($6 + [224]), ($6 + [448]))
	$11 = *($6 + [224])
	CALL send_deferred(($6 + [256]), $8, $11, (*($6 + [228]) - $11), [0])
	$11 = *($6 + [224])
	if ( ($11 == 0) ){ goto $label$85 }
	$21 = [140]
	goto $label$49 
	
.LABEL $label$309
	*($6 + [228]) = $11
	CALL _ZdlPv($11)
	$21 = [141]
	goto $label$49 
	
.LABEL $label$308
	if ( ((*(($6 + [432])) & [1]) == 0) ){ goto $label$84 }
	$21 = [142]
	goto $label$49 
	
.LABEL $label$307
	CALL _ZdlPv(*(($6 + [440])))
	$21 = [143]
	goto $label$49 
	
.LABEL $label$306
	$16 = ((int_64)$16 + (int_64)1)
	CALL $37(($6 + [448]))
	$21 = [21]
	goto $label$49 
	
.LABEL $label$305
	$18 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$11 = CALL $141([8930])
	if ( ($11 <= [8]) ){ goto $label$176 }
	$21 = [116]
	goto $label$49 
	
.LABEL $label$304
	CALL eosio_assert([0], [8999])
	goto $label$174 
	
.LABEL $label$303
	if ( ($11 == 0) ){ goto $label$175 }
	$21 = [23]
	goto $label$49 
	
.LABEL $label$302
	$8 = (int_64)0
	$21 = [24]
	goto $label$49 
	
.LABEL $label$301
	$10 = *(($11 + [8929]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$172 }
	$21 = [114]
	goto $label$49 
	
.LABEL $label$300
	CALL eosio_assert([0], [9044])
	$21 = [25]
	goto $label$49 
	
.LABEL $label$299
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$173 }
	$21 = [26]
	goto $label$49 
	
.LABEL $label$298
	if ( ((int_64)$18 != (int_64)$8) ){ goto $label$171 }
	$21 = [50]
	goto $label$49 
	
.LABEL $label$297
	$10 = *(($0 + [204]))
	$14 = *(($0 + [200]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$151 }
	$21 = [51]
	goto $label$49 
	
.LABEL $label$296
	$21 = [52]
	goto $label$49 
	
.LABEL $label$295
	$11 = ($10 + [-24])
	$9 = *($11)
	if ( ((int_64)*($9) == (int_64)117) ){ goto $label$148 }
	$21 = [53]
	goto $label$49 
	
.LABEL $label$294
	$10 = $11
	if ( ((int_32)$14 != (int_32)$11) ){ goto $label$149 }
	goto $label$150 
	
.LABEL $label$293
	if ( ((int_64)$18 == (int_64)0) ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$292
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$147 }
	$21 = [113]
	goto $label$49 
	
.LABEL $label$291
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$13), [9097])
	if ( $9 ){ goto $label$144 }
	goto $label$145 
	
.LABEL $label$290
	$11 = CALL db_find_i64(*(($0 + [176])), *(($0 + [184])), (int_64)7235159550150574080, (int_64)117)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$146 }
	$21 = [55]
	goto $label$49 
	
.LABEL $label$289
	$9 = CALL $32($13, $11)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$13), [9097])
	$21 = [56]
	goto $label$49 
	
.LABEL $label$288
	$19 = ((int_64)*($2) * (int_64)*($9 + [8]))
	if ( ((int_64)($19 == 0) == 0) ){ goto $label$165 }
	goto $label$166 
	
.LABEL $label$287
	$19 = ((int_64)*($2) * (int_64)100)
	if ( (int_64)($19 == 0) ){ goto $label$167 }
	$21 = [57]
	goto $label$49 
	
.LABEL $label$286
	$11 = CALL $141([8934])
	if ( ($11 <= [8]) ){ goto $label$143 }
	$21 = [110]
	goto $label$49 
	
.LABEL $label$285
	CALL eosio_assert([0], [8999])
	goto $label$141 
	
.LABEL $label$284
	if ( ($11 == 0) ){ goto $label$142 }
	$21 = [59]
	goto $label$49 
	
.LABEL $label$283
	$8 = (int_64)0
	$21 = [60]
	goto $label$49 
	
.LABEL $label$282
	$10 = *(($11 + [8933]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$139 }
	$21 = [108]
	goto $label$49 
	
.LABEL $label$281
	CALL eosio_assert([0], [9044])
	$21 = [61]
	goto $label$49 
	
.LABEL $label$280
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$140 }
	$21 = [62]
	goto $label$49 
	
.LABEL $label$279
	$5 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	*($6 + [264]) = $5
	*($6 + [256]) = $19
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9939])
	$8 = ((int_64)$8 & (int_64)72057594037927935)
	$11 = [0]
	$21 = [63]
	goto $label$49 
	
.LABEL $label$278
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$132 }
	$21 = [102]
	goto $label$49 
	
.LABEL $label$277
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$109 }
	$21 = [103]
	goto $label$49 
	
.LABEL $label$276
	$8 = $18
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$275
	$8 = $18
	$21 = [105]
	goto $label$49 
	
.LABEL $label$274
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$133 }
	$21 = [106]
	goto $label$49 
	
.LABEL $label$273
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$108 }
	$21 = [107]
	goto $label$49 
	
.LABEL $label$272
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$137 }
	goto $label$136 
	
.LABEL $label$271
	$10 = [0]
	$21 = [65]
	goto $label$49 
	
.LABEL $label$270
	CALL eosio_assert($10, [9988])
	*($6 + [208]) = [8396]
	*($6 + [212]) = CALL $141([8396])
	*($6 + [40]) = *($6 + [208])
	$9 = CALL $2(($6 + [216]), ($6 + [40]))
	$18 = *($0)
	$11 = CALL $141([8934])
	if ( ($11 <= [8]) ){ goto $label$131 }
	$21 = [101]
	goto $label$49 
	
.LABEL $label$269
	CALL eosio_assert([0], [8999])
	goto $label$129 
	
.LABEL $label$268
	if ( ($11 == 0) ){ goto $label$130 }
	$21 = [67]
	goto $label$49 
	
.LABEL $label$267
	$8 = (int_64)0
	$21 = [68]
	goto $label$49 
	
.LABEL $label$266
	$10 = *(($11 + [8933]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$127 }
	$21 = [99]
	goto $label$49 
	
.LABEL $label$265
	CALL eosio_assert([0], [9044])
	$21 = [69]
	goto $label$49 
	
.LABEL $label$264
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$128 }
	$21 = [70]
	goto $label$49 
	
.LABEL $label$263
	$22 = *($9)
	*(($6 + [544])) = [0]
	*($6 + [520]) = $18
	*($6 + [512]) = $22
	*($6 + [528]) = (int_64)-1
	*($6 + [536]) = (int_64)0
	$11 = CALL $31(($6 + [512]), ((int_64)$8 & (int_64)72057594037927935), [9171])
	*((($6 + [224]) + [8])) = *(($11 + [8]))
	*($6 + [224]) = *($11)
	$9 = *($6 + [536])
	if ( ($9 == 0) ){ goto $label$125 }
	$21 = [71]
	goto $label$49 
	
.LABEL $label$262
	$14 = ($6 + [540])
	$11 = *($14)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$124 }
	$21 = [72]
	goto $label$49 
	
.LABEL $label$261
	$21 = [73]
	goto $label$49 
	
.LABEL $label$260
	$11 = ($11 + [-24])
	$10 = *($11)
	*($11) = [0]
	if ( ($10 == 0) ){ goto $label$122 }
	$21 = [74]
	goto $label$49 
	
.LABEL $label$259
	CALL _ZdlPv($10)
	$21 = [75]
	goto $label$49 
	
.LABEL $label$258
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$123 }
	$21 = [76]
	goto $label$49 
	
.LABEL $label$257
	$11 = *(($6 + [536]))
	goto $label$121 
	
.LABEL $label$256
	$11 = $9
	$21 = [77]
	goto $label$49 
	
.LABEL $label$255
	*($14) = $9
	CALL _ZdlPv($11)
	$21 = [78]
	goto $label$49 
	
.LABEL $label$254
	CALL eosio_assert(((int_64)$5 == (int_64)*($6 + [232])), [10089])
	$11 = ( ($6 + [224]) ? ($6 + [256]) : ((int_64)$19 > (int_64)*($6 + [224])) )
	*((($6 + [256]) + [8])) = *(($11 + [8]))
	$8 = *($11)
	*($6 + [256]) = $8
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$170 }
	$21 = [79]
	goto $label$49 
	
.LABEL $label$253
	*($6 + [32]) = $8
	CALL $135(($6 + [512]), [9622], ($6 + [32]))
	$8 = CALL current_time()
	*(($6 + [476])) = (int_64)0
	*(($6 + [492])) = (int_64)0
	*(($6 + [500])) = (int_64)0
	*($6 + [460]) = [0]
	*($6 + [464]) = [0]
	*($6 + [468 align=4]) = (int_64)0
	*($6 + [484 align=4]) = (int_64)0
	*($6 + [448]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [200])) = [0]
	*($6 + [192]) = (int_64)0
	$11 = CALL $141(($6 + [512]))
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$120 }
	$21 = [80]
	goto $label$49 
	
.LABEL $label$252
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$119 }
	$21 = [96]
	goto $label$49 
	
.LABEL $label$251
	*($6 + [192]) = ($11 << [1])
	$10 = (($6 + [192]) | [1])
	if ( $11 ){ goto $label$117 }
	goto $label$118 
	
.LABEL $label$250
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($6 + [192]) = ($9 | [1])
	*($6 + [200]) = $10
	*($6 + [196]) = $11
	$21 = [82]
	goto $label$49 
	
.LABEL $label$249
	CALL memcpy($10, ($6 + [512]), $11)
	$21 = [83]
	goto $label$49 
	
.LABEL $label$248
	*(($10 + $11)) = [0]
	*((($6 + [400]) + [24])) = *((($6 + [256]) + [8]))
	$9 = (($6 + [192]) + [8])
	*((($6 + [400]) + [40])) = *($9)
	*($6 + [408]) = $1
	$8 = *($0)
	*($6 + [400]) = $8
	*($6 + [416]) = *($6 + [256])
	*($6 + [432]) = *($6 + [192])
	*($6 + [200]) = (int_64)3617214756542218240
	*($6 + [192]) = $8
	*($6 + [176]) = [8396]
	*($6 + [180]) = CALL $141([8396])
	*($6 + [24]) = *($6 + [176])
	$11 = CALL $2(($6 + [184]), ($6 + [24]))
	*($6 + [168]) = (int_64)-3617168760277827584
	$10 = *((($6 + [448]) + [40]))
	if ( ((uint_32)$10 >= (uint_32)*(($6 + [492]))) ){ goto $label$116 }
	$21 = [90]
	goto $label$49 
	
.LABEL $label$247
	*($10 + [8]) = (int_64)-3617168760277827584
	*($10 + [16 align=4]) = (int_64)0
	*($10) = *($11)
	*(($14 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$2 = ($11 + [16])
	*($14) = $2
	*(($11 + [8])) = *($9)
	*($11) = *($6 + [192])
	*(($10 + [20])) = $2
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($6 + [432])
	$9 = ( *((($6 + [400]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($10 + [28])
	$21 = [91]
	goto $label$49 
	
.LABEL $label$246
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$112 }
	$21 = [92]
	goto $label$49 
	
.LABEL $label$245
	if ( ($11 == 0) ){ goto $label$111 }
	$21 = [93]
	goto $label$49 
	
.LABEL $label$244
	CALL $52($9, $11)
	$9 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$110 
	
.LABEL $label$243
	CALL $60(($6 + [484]), ($6 + [192]), $11, ($6 + [168]), ($6 + [400]))
	goto $label$115 
	
.LABEL $label$242
	$8 = (int_64)0
	goto $label$138 
	
.LABEL $label$241
	$8 = (int_64)0
	goto $label$126 
	
.LABEL $label$240
	$9 = [0]
	$11 = [0]
	$21 = [94]
	goto $label$49 
	
.LABEL $label$239
	*($6 + [660]) = $11
	*($6 + [656]) = $11
	*($6 + [664]) = $9
	*($6 + [640]) = ($6 + [656])
	*($6 + [648]) = ($6 + [400])
	CALL $55(($6 + [648]), ($6 + [640]))
	*(($11 = (($6 + [448]) + [40]))) = (*($11) + [40])
	$21 = [85]
	goto $label$49 
	
.LABEL $label$238
	*(($6 + [468])) = [0]
	*($6 + [200]) = (int_64)0
	*($6 + [192]) = $16
	$8 = *($0)
	CALL $36(($6 + [656]), ($6 + [448]))
	$11 = *($6 + [656])
	CALL send_deferred(($6 + [192]), $8, $11, (*($6 + [660]) - $11), [0])
	$11 = *($6 + [656])
	if ( ($11 == 0) ){ goto $label$114 }
	$21 = [86]
	goto $label$49 
	
.LABEL $label$237
	*($6 + [660]) = $11
	CALL _ZdlPv($11)
	$21 = [87]
	goto $label$49 
	
.LABEL $label$236
	if ( ((*(($6 + [432])) & [1]) == 0) ){ goto $label$113 }
	$21 = [88]
	goto $label$49 
	
.LABEL $label$235
	CALL _ZdlPv(*(($6 + [440])))
	$21 = [89]
	goto $label$49 
	
.LABEL $label$234
	$16 = ((int_64)$16 + (int_64)1)
	CALL $37(($6 + [448]))
	$21 = [27]
	goto $label$49 
	
.LABEL $label$233
	if ( ((int_64)*($6 + [384]) < (int_64)1) ){ goto $label$164 }
	$21 = [31]
	goto $label$49 
	
.LABEL $label$232
	*(($6 + [16])) = $4
	*($6 + [8]) = $3
	*($6) = $17
	CALL $135(($6 + [512]), [9670], $6)
	$8 = CALL current_time()
	*(($6 + [476])) = (int_64)0
	*(($6 + [492])) = (int_64)0
	*(($6 + [500])) = (int_64)0
	*($6 + [460]) = [0]
	*($6 + [464]) = [0]
	*($6 + [468 align=4]) = (int_64)0
	*($6 + [484 align=4]) = (int_64)0
	*($6 + [448]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [264])) = [0]
	*($6 + [256]) = (int_64)0
	$11 = CALL $141(($6 + [512]))
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$162 }
	$21 = [32]
	goto $label$49 
	
.LABEL $label$231
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$161 }
	$21 = [48]
	goto $label$49 
	
.LABEL $label$230
	*($6 + [256]) = ($11 << [1])
	$10 = (($6 + [256]) | [1])
	if ( $11 ){ goto $label$159 }
	goto $label$160 
	
.LABEL $label$229
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($6 + [256]) = ($9 | [1])
	*($6 + [264]) = $10
	*($6 + [260]) = $11
	$21 = [34]
	goto $label$49 
	
.LABEL $label$228
	CALL memcpy($10, ($6 + [512]), $11)
	$21 = [35]
	goto $label$49 
	
.LABEL $label$227
	*(($10 + $11)) = [0]
	*((($6 + [400]) + [24])) = *((($6 + [384]) + [8]))
	$14 = (($6 + [256]) + [8])
	*((($6 + [400]) + [40])) = *($14)
	*($6 + [408]) = $1
	$8 = *($0)
	*($6 + [400]) = $8
	*($6 + [416]) = *($6 + [384])
	*($6 + [432]) = *($6 + [256])
	$10 = *((($6 + [448]) + [40]))
	$11 = *(($6 + [492]))
	*($6 + [264]) = (int_64)3617214756542218240
	*($6 + [256]) = $8
	*($6 + [192]) = (int_64)-3617168760277827584
	$9 = ($12 + [8])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$158 }
	$21 = [42]
	goto $label$49 
	
.LABEL $label$226
	$8 = *($9)
	*($10 + [8]) = (int_64)-3617168760277827584
	*($10) = $8
	*($10 + [16 align=4]) = (int_64)0
	*(($9 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$2 = ($11 + [16])
	*($9) = $2
	*(($11 + [8])) = *($14)
	*($11) = *($6 + [256])
	*(($10 + [20])) = $2
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($6 + [432])
	$9 = ( *((($6 + [400]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($10 + [28])
	$21 = [43]
	goto $label$49 
	
.LABEL $label$225
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$154 }
	$21 = [44]
	goto $label$49 
	
.LABEL $label$224
	if ( ($11 == 0) ){ goto $label$153 }
	$21 = [45]
	goto $label$49 
	
.LABEL $label$223
	CALL $52($9, $11)
	$9 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$152 
	
.LABEL $label$222
	CALL $53(($6 + [484]), ($6 + [256]), $9, ($6 + [192]), ($6 + [400]))
	goto $label$157 
	
.LABEL $label$221
	$9 = [0]
	$11 = [0]
	$21 = [46]
	goto $label$49 
	
.LABEL $label$220
	*($6 + [228]) = $11
	*($6 + [224]) = $11
	*($6 + [232]) = $9
	*($6 + [184]) = ($6 + [224])
	*($6 + [656]) = ($6 + [400])
	CALL $55(($6 + [656]), ($6 + [184]))
	*(($11 = (($6 + [448]) + [40]))) = (*($11) + [40])
	$21 = [37]
	goto $label$49 
	
.LABEL $label$219
	*(($6 + [468])) = [0]
	*($6 + [264]) = (int_64)0
	*($6 + [256]) = $16
	$8 = *($0)
	CALL $36(($6 + [224]), ($6 + [448]))
	$11 = *($6 + [224])
	CALL send_deferred(($6 + [256]), $8, $11, (*($6 + [228]) - $11), [0])
	$11 = *($6 + [224])
	if ( ($11 == 0) ){ goto $label$156 }
	$21 = [38]
	goto $label$49 
	
.LABEL $label$218
	*($6 + [228]) = $11
	CALL _ZdlPv($11)
	$21 = [39]
	goto $label$49 
	
.LABEL $label$217
	*($6 + [256]) = ($6 + [384])
	CALL eosio_assert($15, [9247])
	CALL $61($7, $12, (int_64)0, ($6 + [256]))
	if ( ((*(($6 + [432])) & [1]) == 0) ){ goto $label$155 }
	$21 = [40]
	goto $label$49 
	
.LABEL $label$216
	CALL _ZdlPv(*(($6 + [440])))
	$21 = [41]
	goto $label$49 
	
.LABEL $label$215
	CALL $37(($6 + [448]))
	$21 = [28]
	goto $label$49 
	
.LABEL $label$214
	$11 = *($6 + [360])
	if ( ($11 == 0) ){ goto $label$163 }
	$21 = [29]
	goto $label$49 
	
.LABEL $label$213
	*($6 + [364]) = $11
	CALL _ZdlPv($11)
	$21 = [30]
	goto $label$49 
	
.LABEL $label$212
	$global$0 = ($6 + [672])
	return (unreachable)
	
.LABEL $label$211
	CALL $129(($6 + [328]))
	
.LABEL $label$210
	CALL $119(($6 + [256]))
	
.LABEL $label$209
	CALL $119(($6 + [256]))
	
.LABEL $label$208
	CALL $119(($6 + [256]))
	
.LABEL $label$207
	CALL $119(($6 + [192]))
	
.LABEL $label$206
	$21 = [215]
	goto $label$49 
	
.LABEL $label$205
	$21 = [216]
	goto $label$49 
	
.LABEL $label$204
	$21 = [0]
	goto $label$49 
	
.LABEL $label$203
	$21 = [214]
	goto $label$49 
	
.LABEL $label$202
	$21 = [0]
	goto $label$49 
	
.LABEL $label$201
	$21 = [1]
	goto $label$49 
	
.LABEL $label$200
	$21 = [214]
	goto $label$49 
	
.LABEL $label$199
	$21 = [1]
	goto $label$49 
	
.LABEL $label$198
	$21 = [2]
	goto $label$49 
	
.LABEL $label$197
	$21 = [4]
	goto $label$49 
	
.LABEL $label$196
	$21 = [2]
	goto $label$49 
	
.LABEL $label$195
	$21 = [4]
	goto $label$49 
	
.LABEL $label$194
	$21 = [3]
	goto $label$49 
	
.LABEL $label$193
	$21 = [3]
	goto $label$49 
	
.LABEL $label$192
	$21 = [5]
	goto $label$49 
	
.LABEL $label$191
	$21 = [6]
	goto $label$49 
	
.LABEL $label$190
	$21 = [206]
	goto $label$49 
	
.LABEL $label$189
	$21 = [8]
	goto $label$49 
	
.LABEL $label$188
	$21 = [11]
	goto $label$49 
	
.LABEL $label$187
	$21 = [205]
	goto $label$49 
	
.LABEL $label$186
	$21 = [11]
	goto $label$49 
	
.LABEL $label$185
	$21 = [13]
	goto $label$49 
	
.LABEL $label$184
	$21 = [14]
	goto $label$49 
	
.LABEL $label$183
	$21 = [18]
	goto $label$49 
	
.LABEL $label$182
	$21 = [15]
	goto $label$49 
	
.LABEL $label$181
	$21 = [16]
	goto $label$49 
	
.LABEL $label$180
	$21 = [17]
	goto $label$49 
	
.LABEL $label$179
	$21 = [19]
	goto $label$49 
	
.LABEL $label$178
	$21 = [21]
	goto $label$49 
	
.LABEL $label$177
	$21 = [21]
	goto $label$49 
	
.LABEL $label$176
	$21 = [22]
	goto $label$49 
	
.LABEL $label$175
	$21 = [115]
	goto $label$49 
	
.LABEL $label$174
	$21 = [23]
	goto $label$49 
	
.LABEL $label$173
	$21 = [24]
	goto $label$49 
	
.LABEL $label$172
	$21 = [25]
	goto $label$49 
	
.LABEL $label$171
	$21 = [27]
	goto $label$49 
	
.LABEL $label$170
	$21 = [27]
	goto $label$49 
	
.LABEL $label$169
	$21 = [50]
	goto $label$49 
	
.LABEL $label$168
	$21 = [27]
	goto $label$49 
	
.LABEL $label$167
	$21 = [27]
	goto $label$49 
	
.LABEL $label$166
	$21 = [27]
	goto $label$49 
	
.LABEL $label$165
	$21 = [57]
	goto $label$49 
	
.LABEL $label$164
	$21 = [28]
	goto $label$49 
	
.LABEL $label$163
	$21 = [30]
	goto $label$49 
	
.LABEL $label$162
	$21 = [49]
	goto $label$49 
	
.LABEL $label$161
	$21 = [33]
	goto $label$49 
	
.LABEL $label$160
	$21 = [35]
	goto $label$49 
	
.LABEL $label$159
	$21 = [34]
	goto $label$49 
	
.LABEL $label$158
	$21 = [36]
	goto $label$49 
	
.LABEL $label$157
	$21 = [37]
	goto $label$49 
	
.LABEL $label$156
	$21 = [39]
	goto $label$49 
	
.LABEL $label$155
	$21 = [41]
	goto $label$49 
	
.LABEL $label$154
	$21 = [43]
	goto $label$49 
	
.LABEL $label$153
	$21 = [47]
	goto $label$49 
	
.LABEL $label$152
	$21 = [46]
	goto $label$49 
	
.LABEL $label$151
	$21 = [54]
	goto $label$49 
	
.LABEL $label$150
	$21 = [54]
	goto $label$49 
	
.LABEL $label$149
	$21 = [52]
	goto $label$49 
	
.LABEL $label$148
	$21 = [112]
	goto $label$49 
	
.LABEL $label$147
	$21 = [54]
	goto $label$49 
	
.LABEL $label$146
	$21 = [111]
	goto $label$49 
	
.LABEL $label$145
	$21 = [111]
	goto $label$49 
	
.LABEL $label$144
	$21 = [56]
	goto $label$49 
	
.LABEL $label$143
	$21 = [58]
	goto $label$49 
	
.LABEL $label$142
	$21 = [109]
	goto $label$49 
	
.LABEL $label$141
	$21 = [59]
	goto $label$49 
	
.LABEL $label$140
	$21 = [60]
	goto $label$49 
	
.LABEL $label$139
	$21 = [61]
	goto $label$49 
	
.LABEL $label$138
	$21 = [62]
	goto $label$49 
	
.LABEL $label$137
	$21 = [63]
	goto $label$49 
	
.LABEL $label$136
	$21 = [65]
	goto $label$49 
	
.LABEL $label$135
	$21 = [63]
	goto $label$49 
	
.LABEL $label$134
	$21 = [65]
	goto $label$49 
	
.LABEL $label$133
	$21 = [64]
	goto $label$49 
	
.LABEL $label$132
	$21 = [64]
	goto $label$49 
	
.LABEL $label$131
	$21 = [66]
	goto $label$49 
	
.LABEL $label$130
	$21 = [100]
	goto $label$49 
	
.LABEL $label$129
	$21 = [67]
	goto $label$49 
	
.LABEL $label$128
	$21 = [68]
	goto $label$49 
	
.LABEL $label$127
	$21 = [69]
	goto $label$49 
	
.LABEL $label$126
	$21 = [70]
	goto $label$49 
	
.LABEL $label$125
	$21 = [78]
	goto $label$49 
	
.LABEL $label$124
	$21 = [98]
	goto $label$49 
	
.LABEL $label$123
	$21 = [73]
	goto $label$49 
	
.LABEL $label$122
	$21 = [75]
	goto $label$49 
	
.LABEL $label$121
	$21 = [77]
	goto $label$49 
	
.LABEL $label$120
	$21 = [97]
	goto $label$49 
	
.LABEL $label$119
	$21 = [81]
	goto $label$49 
	
.LABEL $label$118
	$21 = [83]
	goto $label$49 
	
.LABEL $label$117
	$21 = [82]
	goto $label$49 
	
.LABEL $label$116
	$21 = [84]
	goto $label$49 
	
.LABEL $label$115
	$21 = [85]
	goto $label$49 
	
.LABEL $label$114
	$21 = [87]
	goto $label$49 
	
.LABEL $label$113
	$21 = [89]
	goto $label$49 
	
.LABEL $label$112
	$21 = [91]
	goto $label$49 
	
.LABEL $label$111
	$21 = [95]
	goto $label$49 
	
.LABEL $label$110
	$21 = [94]
	goto $label$49 
	
.LABEL $label$109
	$21 = [104]
	goto $label$49 
	
.LABEL $label$108
	$21 = [105]
	goto $label$49 
	
.LABEL $label$107
	$21 = [118]
	goto $label$49 
	
.LABEL $label$106
	$21 = [119]
	goto $label$49 
	
.LABEL $label$105
	$21 = [120]
	goto $label$49 
	
.LABEL $label$104
	$21 = [122]
	goto $label$49 
	
.LABEL $label$103
	$21 = [120]
	goto $label$49 
	
.LABEL $label$102
	$21 = [122]
	goto $label$49 
	
.LABEL $label$101
	$21 = [121]
	goto $label$49 
	
.LABEL $label$100
	$21 = [121]
	goto $label$49 
	
.LABEL $label$99
	$21 = [153]
	goto $label$49 
	
.LABEL $label$98
	$21 = [124]
	goto $label$49 
	
.LABEL $label$97
	$21 = [126]
	goto $label$49 
	
.LABEL $label$96
	$21 = [127]
	goto $label$49 
	
.LABEL $label$95
	$21 = [128]
	goto $label$49 
	
.LABEL $label$94
	$21 = [129]
	goto $label$49 
	
.LABEL $label$93
	$21 = [131]
	goto $label$49 
	
.LABEL $label$92
	$21 = [133]
	goto $label$49 
	
.LABEL $label$91
	$21 = [151]
	goto $label$49 
	
.LABEL $label$90
	$21 = [135]
	goto $label$49 
	
.LABEL $label$89
	$21 = [137]
	goto $label$49 
	
.LABEL $label$88
	$21 = [136]
	goto $label$49 
	
.LABEL $label$87
	$21 = [138]
	goto $label$49 
	
.LABEL $label$86
	$21 = [139]
	goto $label$49 
	
.LABEL $label$85
	$21 = [141]
	goto $label$49 
	
.LABEL $label$84
	$21 = [143]
	goto $label$49 
	
.LABEL $label$83
	$21 = [145]
	goto $label$49 
	
.LABEL $label$82
	$21 = [149]
	goto $label$49 
	
.LABEL $label$81
	$21 = [148]
	goto $label$49 
	
.LABEL $label$80
	$21 = [156]
	goto $label$49 
	
.LABEL $label$79
	$21 = [157]
	goto $label$49 
	
.LABEL $label$78
	$21 = [201]
	goto $label$49 
	
.LABEL $label$77
	$21 = [163]
	goto $label$49 
	
.LABEL $label$76
	$21 = [165]
	goto $label$49 
	
.LABEL $label$75
	$21 = [166]
	goto $label$49 
	
.LABEL $label$74
	$21 = [167]
	goto $label$49 
	
.LABEL $label$73
	$21 = [168]
	goto $label$49 
	
.LABEL $label$72
	$21 = [170]
	goto $label$49 
	
.LABEL $label$71
	$21 = [172]
	goto $label$49 
	
.LABEL $label$70
	$21 = [173]
	goto $label$49 
	
.LABEL $label$69
	$21 = [175]
	goto $label$49 
	
.LABEL $label$68
	$21 = [173]
	goto $label$49 
	
.LABEL $label$67
	$21 = [175]
	goto $label$49 
	
.LABEL $label$66
	$21 = [174]
	goto $label$49 
	
.LABEL $label$65
	$21 = [174]
	goto $label$49 
	
.LABEL $label$64
	$21 = [193]
	goto $label$49 
	
.LABEL $label$63
	$21 = [177]
	goto $label$49 
	
.LABEL $label$62
	$21 = [179]
	goto $label$49 
	
.LABEL $label$61
	$21 = [178]
	goto $label$49 
	
.LABEL $label$60
	$21 = [180]
	goto $label$49 
	
.LABEL $label$59
	$21 = [181]
	goto $label$49 
	
.LABEL $label$58
	$21 = [183]
	goto $label$49 
	
.LABEL $label$57
	$21 = [185]
	goto $label$49 
	
.LABEL $label$56
	$21 = [187]
	goto $label$49 
	
.LABEL $label$55
	$21 = [191]
	goto $label$49 
	
.LABEL $label$54
	$21 = [190]
	goto $label$49 
	
.LABEL $label$53
	$21 = [196]
	goto $label$49 
	
.LABEL $label$52
	$21 = [197]
	goto $label$49 
	
.LABEL $label$51
	$21 = [210]
	goto $label$49 
	
.LABEL $label$50
	$21 = [211]
	goto $label$49 
	$21
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $120(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $120(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [192])
	$global$0 = $4
	$6 = ($3 + [8])
	*(($5 = (($4 + [128]) + [8]))) = *($6)
	*($4 + [128]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$5 = *($5)
	*(($7 = (($4 + [176]) + [8]))) = $5
	$2 = *($4 + [128])
	*($0 + [16]) = $2
	*(($0 + [24])) = $5
	*($4 + [176]) = $2
	*($4 + [112]) = [8298]
	*($4 + [116]) = CALL $141([8298])
	*($4 + [24]) = *($4 + [112])
	$5 = CALL $2(($4 + [120]), ($4 + [24]))
	*($4 + [96]) = [8298]
	*($4 + [100]) = CALL $141([8298])
	*($4 + [16]) = *($4 + [96])
	$8 = CALL $2(($4 + [104]), ($4 + [16]))
	*(($9 = (($4 + [80]) + [8]))) = *($6)
	*($4 + [80]) = *($3)
	$2 = *($8)
	$10 = *($5)
	$9 = *($9)
	*(($8 = (($4 + [144]) + [8]))) = $9
	*(($5 = (($4 + [160]) + [8]))) = $9
	$11 = *($4 + [80])
	*($4 + [160]) = $11
	*($4 + [144]) = $11
	*($0 + [32]) = $10
	*(($0 + [40])) = $2
	$9 = *($5)
	*($7) = $9
	$2 = *($4 + [160])
	*(($0 + [48])) = $2
	*(($0 + [56])) = $9
	*($4 + [176]) = $2
	*($4 + [64]) = [8396]
	*($4 + [68]) = CALL $141([8396])
	*($4 + [8]) = *($4 + [64])
	$9 = CALL $2(($4 + [72]), ($4 + [8]))
	*($4 + [48]) = [8396]
	*($4 + [52]) = CALL $141([8396])
	*($4) = *($4 + [48])
	$12 = CALL $2(($4 + [56]), $4)
	*(($13 = (($4 + [32]) + [8]))) = *($6)
	*($4 + [32]) = *($3)
	$2 = *($12)
	$10 = *($9)
	$3 = *($13)
	*($8) = $3
	*($5) = $3
	$11 = *($4 + [32])
	*($4 + [160]) = $11
	*($4 + [144]) = $11
	*($0 + [64]) = $10
	*(($0 + [72])) = $2
	$3 = *($5)
	*($7) = $3
	$2 = *($4 + [160])
	*(($0 + [80])) = $2
	*(($0 + [88])) = $3
	*($4 + [176]) = $2
	*(($0 + [104])) = $1
	*($0 + [96]) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = [0]
	*($0 + [136]) = $1
	*(($0 + [144])) = $1
	*(($0 + [152])) = (int_64)-1
	*(($0 + [160])) = (int_64)0
	*(($0 + [168])) = [0]
	*($0 + [176]) = $1
	*(($0 + [184])) = $1
	*(($0 + [192])) = (int_64)-1
	*(($0 + [200])) = (int_64)0
	*(($0 + [208])) = [0]
	*($0 + [216]) = $1
	*(($0 + [224])) = $1
	*(($0 + [232])) = (int_64)-1
	*(($0 + [248])) = [0]
	*(($0 + [240])) = (int_64)0
	*(($0 + [280])) = (int_64)0
	*(($0 + [272])) = (int_64)0
	*(($0 + [264])) = (int_64)0
	*($0 + [256]) = (int_64)0
	*(($0 + [312])) = (int_64)0
	*(($0 + [304])) = (int_64)0
	*(($0 + [296])) = (int_64)0
	*(($0 + [288])) = (int_64)0
	*(($0 + [344])) = (int_64)0
	*(($0 + [336])) = (int_64)0
	*(($0 + [328])) = (int_64)0
	*(($0 + [320])) = (int_64)0
	*(($0 + [376])) = (int_64)0
	*(($0 + [368])) = (int_64)0
	*(($0 + [360])) = (int_64)0
	*(($0 + [352])) = (int_64)0
	*(($0 + [408])) = (int_64)0
	*(($0 + [400])) = (int_64)0
	*(($0 + [392])) = (int_64)0
	*($0 + [384]) = (int_64)0
	$global$0 = ($4 + [192])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8925])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8925])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8925])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [8921])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [8925])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [8921])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [240]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [244])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [240]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [200]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [204])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [200]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [160]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [164])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [160]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$2 = *(($0 + [120]))
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = ($0 + [124])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	$1 = *($4 + [48])
	if ( ($1 == 0) ){ goto $label$21 }
	*(($4 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [120]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $2
	
.LABEL $label$17
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8921])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $68($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [8925])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $69($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8921])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $70($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [8925])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $69(CALL $71($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $69($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $123($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $123($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $119($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $132([12], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8921])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $52($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8925])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *(*($0 + [20]))
	$4 = *(*($0 + [16]))
	*($2 + [32]) = (int_64)0
	$5 = *(*(*($0 + [12]) + [4]) + [8])
	$6 = [0]
	*($2 + [40]) = [0]
	$7 = *(*($0 + [24]))
	$8 = *(*($0 + [8]))
	$9 = *(*($0 + [4]))
	$10 = *($0 + [28])
	$11 = (*($10 + [4]) - *($10))
	if ( ($11 == 0) ){ goto $label$4 }
	$12 = int_32($11 >> [4])
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = CALL _Znwj($11)
	*(($2 + [40])) = ($6 + ($12 << [4]))
	*($2 + [36]) = $6
	*($2 + [32]) = $6
	$11 = *($10)
	$10 = (*(($10 + [4])) - $11)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $11, $10)
	$13 = ($6 + $10)
	*($2 + [36]) = $13
	goto $label$2 
	
.LABEL $label$4
	$13 = [0]
	goto $label$2 
	
.LABEL $label$3
	$13 = $6
	
.LABEL $label$2
	$10 = *($0 + [44])
	*(($11 = ($2 + [16]))) = *(($10 + [16]))
	*(($12 = ($2 + [24]))) = *(($10 + [24]))
	*($2) = *($10)
	*($2 + [8]) = *(($10 + [8]))
	$14 = *(*($0 + [40]))
	$15 = *(*($0 + [36]))
	$10 = *(*($0 + [32]))
	$0 = *(*($0 + [48]))
	*($1) = $9
	*($1 + [8]) = $8
	*($1 + [16]) = $5
	*($1 + [24]) = $4
	*($1 + [32]) = $3
	*($1 + [40]) = $7
	*(($16 = (($2 + [48]) + [24]))) = *($12)
	*(($12 = (($2 + [48]) + [16]))) = *($11)
	*($2 + [56]) = *($2 + [8])
	*($2 + [48]) = *($2)
	$11 = ($1 + [48])
	if ( ((int_32)$11 == (int_32)($2 + [32])) ){ goto $label$5 }
	CALL $105($11, $6, $13)
	$6 = *($2 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $15
	*($1 + [60]) = $10
	*($1 + [72]) = $14
	*($1 + [80]) = *($2 + [48])
	*($1 + [112]) = $0
	*(($1 + [88])) = *($2 + [56])
	*(($1 + [96])) = *($12)
	*(($1 + [104])) = *($16)
	if ( ($6 == 0) ){ goto $label$6 }
	*($2 + [36]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $129(($2 + [32]))
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [72]) = $1
	*(($4 = ($0 + [24]))) = (int_64)0
	$1 = *($2 + [4])
	$5 = *($1)
	*($0) = *($5)
	*($0 + [8]) = *($5)
	$5 = *($2)
	$6 = *($1 + [20])
	$7 = *($1 + [4])
	*($4) = *(($7 + [8]))
	*($0 + [16]) = *($7)
	*($0 + [32]) = *(*($1 + [8]))
	*($0 + [40]) = *(*($1 + [12]))
	*($0 + [48]) = *(*($1 + [16]))
	*($0 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($0 + [56]) = *($6 + [8])
	*($3 + [88]) = ($3 + [72])
	*($3 + [84]) = $3
	*($3 + [80]) = $3
	CALL $78(($3 + [80]), $0)
	$8 = *($0)
	*($0 + [76]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871653160583168, *(*($2 + [8])), $8, $3, [72])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9282])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9328])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9379])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $89(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $52($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $55(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9791])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9836])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9886])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9791])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9836])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9886])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [8921])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $102($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [4]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$4 = *($8)
	
.LOOP $label$6:
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8925])
	CALL memcpy($3, *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$4 = (*($8) + [8])
	*($8) = $4
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8925])
	$3 = [16]
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$5 = CALL $101($0, ($1 + [48]))
	CALL eosio_assert(((int_32)*($5 + [8]) != (int_32)*($5 + [4])), [8925])
	CALL memcpy(($1 + [60]), *($5 + [4]), [1])
	$0 = (*($5 + [4]) + [1])
	*($5 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($5 + [8]) - $0) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [64]), *($5 + [4]), [8])
	$0 = (*($5 + [4]) + [8])
	*($5 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($5 + [8]) - $0) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [72]), *($5 + [4]), [8])
	$0 = (*($5 + [4]) + [8])
	*($5 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($5 + [8]) - $0) > (uint_32)[31]), [8925])
	CALL memcpy(($2 + [48]), *($5 + [4]), [32])
	*($5 + [4]) = (*($5 + [4]) + [32])
	$6 = (int_64)0
	$0 = [0]
	$7 = ($2 + [16])
	$8 = (int_64)0
	
.LOOP $label$2:
	$4 = (($2 + [48]) + $0)
	if ( ($3 <= [2]) ){ goto $label$3 }
	$6 = ((int_64)$6 | (int_64)*($4))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$3 == (int_32)[1]), [10008])
	*($7 + [8]) = $8
	*($7) = ((int_64)$6 | (int_64)*($4))
	$3 = [16]
	$7 = ($7 + [16])
	$6 = (int_64)0
	$8 = (int_64)0
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$0 = ($1 + [80])
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$4 }
	if ( ($3 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($2, $6, $8, (($3 << [3]) + [-8]))
	$8 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$5
	*($7) = $6
	*($7 + [8]) = $8
	
.LABEL $label$4
	*($0) = *($2 + [16])
	*(($0 + [8])) = *($2 + [24])
	*(($0 + [24])) = *((($2 + [16]) + [24]))
	*(($0 + [16])) = *((($2 + [16]) + [16]))
	$3 = ($5 + [4])
	CALL eosio_assert(((uint_32)(*(($5 + [8])) - *($3)) > (uint_32)[3]), [8925])
	CALL memcpy(($1 + [112]), *($3), [4])
	*($3) = (*($3) + [4])
	$global$0 = ($2 + [80])
	return $5
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *(*($0 + [16]))
	$4 = *(*($0 + [12]))
	*($2 + [32]) = (int_64)0
	$5 = *(*(*($0 + [8]) + [4]) + [8])
	$6 = [0]
	*($2 + [40]) = [0]
	$7 = *($1)
	$8 = *(*($0 + [20]))
	$9 = *(*($0 + [4]))
	$10 = *($0 + [24])
	$11 = (*($10 + [4]) - *($10))
	if ( ($11 == 0) ){ goto $label$4 }
	$12 = int_32($11 >> [4])
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = CALL _Znwj($11)
	*(($2 + [40])) = ($6 + ($12 << [4]))
	*($2 + [36]) = $6
	*($2 + [32]) = $6
	$11 = *($10)
	$10 = (*(($10 + [4])) - $11)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $11, $10)
	$13 = ($6 + $10)
	*($2 + [36]) = $13
	goto $label$2 
	
.LABEL $label$4
	$13 = [0]
	goto $label$2 
	
.LABEL $label$3
	$13 = $6
	
.LABEL $label$2
	$10 = *($0 + [40])
	*(($11 = ($2 + [16]))) = *(($10 + [16]))
	*(($12 = ($2 + [24]))) = *(($10 + [24]))
	*($2) = *($10)
	*($2 + [8]) = *(($10 + [8]))
	$14 = *(*($0 + [36]))
	$15 = *(*($0 + [32]))
	$10 = *(*($0 + [28]))
	$0 = *(*($0 + [44]))
	*($1) = $7
	*($1 + [8]) = $9
	*($1 + [16]) = $5
	*($1 + [24]) = $4
	*($1 + [32]) = $3
	*($1 + [40]) = $8
	*(($16 = (($2 + [48]) + [24]))) = *($12)
	*(($12 = (($2 + [48]) + [16]))) = *($11)
	*($2 + [56]) = *($2 + [8])
	*($2 + [48]) = *($2)
	$11 = ($1 + [48])
	if ( ((int_32)$11 == (int_32)($2 + [32])) ){ goto $label$5 }
	CALL $105($11, $6, $13)
	$6 = *($2 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $15
	*($1 + [60]) = $10
	*($1 + [72]) = $14
	*($1 + [80]) = *($2 + [48])
	*($1 + [112]) = $0
	*(($1 + [88])) = *($2 + [56])
	*(($1 + [96])) = *($12)
	*(($1 + [104])) = *($16)
	if ( ($6 == 0) ){ goto $label$6 }
	*($2 + [36]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $129(($2 + [32]))
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [4])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = [268435455]
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [4])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [4]) << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $129($0)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $106($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $107($0, ($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*(($5 = CALL _Znwj([96])) + [80]) = $1
	*($5 + [8]) = (int_64)0
	*($5) = *(*($3))
	$6 = *(*($3 + [4]))
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = (int_64)1000
	*($5 + [8]) = $6
	$6 = CALL current_time()
	*($5 + [56]) = (int_64)0
	*($5 + [48]) = $6
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $89(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3665743317141815296, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $74(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)102
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [9241])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)101
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [9241])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9241])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9241])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9241])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9241])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9241])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9241])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9241])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9241])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $84($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9241])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9241])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9241])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $84(CALL $85($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9241])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9241])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9241])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9241])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [8254])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $146($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8310])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $144 (int_32 $0)
{
	return CALL $145([10168], $0)
}

void .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18552])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18360]
	$3 = (((int_32)$1 * (int_32)[12]) + [18360])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $146 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10160]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10164])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10160]) = [1]
	$2 = ($2 << [16])
	*([0] + [10164]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10164])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10164]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10160]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10160]) = [1]
	$3 = ($3 << [16])
	*([0] + [10164]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10164])
	
.LABEL $label$10
	*([0] + [10164]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $144($1)
	
.LABEL $label$2
	*(CALL $130()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $144(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $147($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $130())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $143($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8925])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8925])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8921])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $72($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8925])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8925])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9190])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $87($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $80($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $52($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $81($2, $1)
	CALL $83(CALL $82(CALL $82($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9241])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9241])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9148])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8925])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8925])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ($3 + [1])
	$6 = ($2 + [1])
	$8 = ($7 & [1])
	$7 = *($2)
	$9 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )
	$10 = [0]
	$11 = ($7 & [1])
	$7 = *($3)
	$7 = ( *($3 + [4]) ? uint_32($7 >> [1]) : $11 )
	if ( ($7 == 0) ){ goto $label$2 }
	$12 = [0]
	if ( ((int_32)$9 < (int_32)$7) ){ goto $label$1 }
	$13 = ( *($2 + [8]) ? $6 : $8 )
	$14 = ($13 + $9)
	$15 = ( *($3 + [8]) ? $5 : $11 )
	$11 = *($15)
	$10 = $9
	$8 = $13
	
.LOOP $label$3:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL $139($8, $11, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL $140($10, $15, $7) == 0) ){ goto $label$4 }
	$8 = ($10 + [1])
	$10 = ($14 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$1 }
	$10 = ($10 - $13)
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$16 = ($1 + [8])
	$13 = ($1 + [4])
	$12 = [0]
	
.LOOP $label$5:
	$8 = CALL $121($4, $2, $12, ($10 - $12), $2)
	$7 = *($13)
	if ( ((uint_32)$7 >= (uint_32)*($16)) ){ goto $label$7 }
	*($7) = *($4)
	$7 = ($4 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($13) = (*($13) + [12])
	*($4) = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	CALL $65($1, $8)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$6
	$14 = ($7 & [1])
	$7 = *($3)
	$7 = ( *(($3 + [4])) ? uint_32($7 >> [1]) : $14 )
	$12 = ($7 + $10)
	$8 = ($7 & [1])
	$7 = *($2)
	$11 = ( *(($2 + [4])) ? uint_32($7 >> [1]) : $8 )
	if ( ($11 <= $12) ){ goto $label$1 }
	$10 = $12
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = ($17 + $12)
	$17 = ( *(($2 + [8])) ? $6 : $8 )
	$15 = ($17 + $11)
	$10 = ($15 - $8)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$14 = ( *(($3 + [8])) ? $5 : $14 )
	$11 = *($14)
	
.LOOP $label$9:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL $139($8, $11, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL $140($10, $14, $7) == 0) ){ goto $label$10 }
	$8 = ($10 + [1])
	$10 = ($15 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$1 }
	$10 = ($10 - $17)
	
.LABEL $label$8
	if ( ((int_32)$10 != (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$1
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	$7 = CALL $121($4, $2, $12, [-1], $2)
	$10 = *($1 + [4])
	if ( ((uint_32)$10 >= (uint_32)*($1 + [8])) ){ goto $label$12 }
	*($10) = *($4)
	*(($10 + [8])) = *(($4 + [8]))
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*(($7 = ($1 + [4]))) = (*($7) + [12])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$12
	CALL $65($1, $7)
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$11
	$global$0 = ($4 + [16])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9148])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [80]) = $0
	*($5 + [8]) = (int_64)0
	CALL $73(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $75($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9097])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $129 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $140(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}