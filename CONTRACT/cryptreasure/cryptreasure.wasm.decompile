(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "0123456789abcdef\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8331) "invalid sha256\00")
(data (i32.const 8346) "invalid first pos\00")
(data (i32.const 8364) "parse memo error\00")
(data (i32.const 8381) "eosio.token\00stoull\00")
(data (i32.const 8400) "transfer\00")
(data (i32.const 8409) "referrer does not exist\00")
(data (i32.const 8433) "referrer can not be this contract\00")
(data (i32.const 8467) "referrer can not be self\00%d\00")
(data (i32.const 8495) "self already a referrer\00%u\00")
(data (i32.const 8522) "treasuredler\00")
(data (i32.const 8535) "active\00")
(data (i32.const 8542) "openreceipt\00%lld\00")
(data (i32.const 8559) "Transfer bonus\00%llu\00")
(data (i32.const 8579) "dice:\00")
(data (i32.const 8585) "cell index error\00")
(data (i32.const 8602) "bidreceipt\00")
(data (i32.const 8613) "ctreasurelog\00")
(data (i32.const 8626) "result\00")
(data (i32.const 8633) "revlreceipt\00")
(data (i32.const 8645) "string is too long to be a valid name\00")
(data (i32.const 8683) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8750) "character is not in allowed character set for names\00")
(data (i32.const 8803) "EOS\00: no conversion\00")
(data (i32.const 8823) "object passed to iterator_to is not in multi_index\00: out of range\00")
(data (i32.const 8889) "error reading iterator\00")
(data (i32.const 8912) "get\00")
(data (i32.const 8916) "read\00")
(data (i32.const 8921) "string is too long to be a valid symbol_code\00")
(data (i32.const 8966) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9019) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9068) "invalid symbol name\00")
(data (i32.const 9088) "cannot pass end iterator to modify\00")
(data (i32.const 9123) "object passed to modify is not in multi_index\00")
(data (i32.const 9169) "cannot modify objects in table of another contract\00")
(data (i32.const 9220) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9279) "write\00")
(data (i32.const 9285) "cannot create objects in table of another contract\00")
(data (i32.const 9336) "unable to find key\00")
(data (i32.const 9355) "already has referrer\00")
(data (i32.const 9376) "must in idle state\00")
(data (i32.const 9395) "wrong round number\00")
(data (i32.const 9414) "singleton does not exist\00")
(data (i32.const 9439) "treasureext1\00")
(data (i32.const 9452) "open\00")
(data (i32.const 9457) "Game is maintenancing\00")
(data (i32.const 9479) "referrer is not a valid account\00")
(data (i32.const 9511) "invalid memo\00")
(data (i32.const 9524) "no roll under\00")
(data (i32.const 9538) "no roll times\00")
(data (i32.const 9552) "no random seed\00")
(data (i32.const 9567) "no referrer\00")
(data (i32.const 9579) "roll times error\00")
(data (i32.const 9596) "only EOS token allowed\00")
(data (i32.const 9619) "quantity invalid\00")
(data (i32.const 9636) "transfer quantity must be greater than 0.1\00")
(data (i32.const 9679) "wrong amount\00")
(data (i32.const 9692) "roll under overflow, must be greater than 2 and less than 96\00")
(data (i32.const 9753) "offered overflow, expected earning is greater than the maximum bonus\00")
(data (i32.const 9822) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9881) "divide by zero\00")
(data (i32.const 9896) "signed division overflow\00")
(data (i32.const 9921) "fund pool overdraw\00")
(data (i32.const 9940) "attempt to subtract asset with different symbol\00")
(data (i32.const 9988) "subtraction underflow\00")
(data (i32.const 10010) "subtraction overflow\00")
(data (i32.const 10031) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10083) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10137) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10185) "dice bet fee, id: \00")
(data (i32.const 10204) "treasurefee1\00")
(data (i32.const 10217) "multiplication overflow\00")
(data (i32.const 10241) "multiplication underflow\00")
(data (i32.const 10266) "attempt to add asset with different symbol\00")
(data (i32.const 10309) "addition underflow\00")
(data (i32.const 10328) "addition overflow\00")
(data (i32.const 10346) "must in bidding state\00")
(data (i32.const 10368) "must in bidding time\00")
(data (i32.const 10389) "no round index\00")
(data (i32.const 10404) "no cell index\00")
(data (i32.const 10418) "no cell level\00")
(data (i32.const 10432) "no user seed\00")
(data (i32.const 10445) "player same as last!\00")
(data (i32.const 10466) "cell level wrong!\00")
(data (i32.const 10484) "transfer quantity error\00")
(data (i32.const 10508) "cell level error\00")
(data (i32.const 10525) "cell fee for cell: \00")
(data (i32.const 10545) "CryptoTreasure mining bonus\00")
(data (i32.const 10573) "treasureuctt\00")
(data (i32.const 10586) "minertrans\00")
(data (i32.const 10597) "cell occupyed by: \00")
(data (i32.const 10616) ", reward: \00")
(data (i32.const 10627) ", cell id: \00")
(data (i32.const 10640) "\94)\00\00")
(data (i32.const 10644) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10677) "cell bonus\00")
(data (i32.const 10688) "cell player: \00")
(data (i32.const 10702) " get bonus, your reward: \00")
(data (i32.const 10728) ", id: \00")
(data (i32.const 10735) "reftrans\00")
(data (i32.const 10744) "must in reveal state\00")
(data (i32.const 10765) "\06\05\n\01\04\08\07\0b\0c\03\t\02")
(data (i32.const 10777) "winner fee for cell: \00")
(data (i32.const 10799) "bonus lv 1 for cell: \00")
(data (i32.const 10821) "error for random range\00")
(data (i32.const 10848) "\00\00\00\00\00\00\18@\00\00\00\00\00\00\1c@\00\00\00\00\00\00W@\n\d7\a3p=\n\1c@\00\00\00\00\00\00 @\00\00\00\00\00\00\14@\85\ebQ\b8\1e\05 @\00\00\00\00\00\00\"@\00\00\00\00\00\00\00@\85\ebQ\b8\1e\05\"@\00\00\00\00\00\00$@\00\00\00\00\00\00\e0?\85\ebQ\b8\1e\05$@\00\00\00\00\00\00.@\b8\1e\85\ebQ\b8\de?\85\ebQ\b8\1e\05.@\00\00\00\00\00\004@{\14\aeG\e1z\84?\c3\f5(\\\8f\024@\00\00\00\00\00\008@{\14\aeG\e1z\84?")
(data (i32.const 11024) "333333\d3?\00\00\00\00\00\00\e0?\00\00\00\00\00\00W@R\b8\1e\85\ebQ\e0?ffffff\e6?\00\00\00\00\00\00\08@\b8\1e\85\ebQ\b8\e6?\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f0?)\\\8f\c2\f5(\f0?\9a\99\99\99\99\99\f1?\00\00\00\00\00\00\f0?\c3\f5(\\\8f\c2\f1?333333\f3?\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\\f3?\cd\cc\cc\cc\cc\cc\f4?{\14\aeG\e1z\ec?\f6(\\\8f\c2\f5\f4?ffffff\f6?\00\00\00\00\00\00\e0?\8f\c2\f5(\\\8f\f6?333333\fb?\00\00\00\00\00\00\e0?\\\8f\c2\f5(\\\fb?\00\00\00\00\00\00\00@\9a\99\99\99\99\99\b9?\14\aeG\e1z\14\00@\00\00\00\00\00\00\14@{\14\aeG\e1z\84?")
(data (i32.const 11264) "333333\d3?\d7\a3p=\n\d7\d3?\00\00\00\00\00\c0R@{\14\aeG\e1z\d4?\9a\99\99\99\99\99\d9?\00\00\00\00\00\007@=\n\d7\a3p=\da?\00\00\00\00\00\00\e0?\00\00\00\00\00\00\f0?R\b8\1e\85\ebQ\e0?333333\e3?\9a\99\99\99\99\99\d9?\85\ebQ\b8\1e\85\e3?ffffff\e6?\9a\99\99\99\99\99\b9?\b8\1e\85\ebQ\b8\e6?\9a\99\99\99\99\99\e9?\9a\99\99\99\99\99\b9?\ecQ\b8\1e\85\eb\e9?\cd\cc\cc\cc\cc\cc\ec?\9a\99\99\99\99\99\b9?\1f\85\ebQ\b8\1e\ed?\00\00\00\00\00\00\f0?\9a\99\99\99\99\99\b9?)\\\8f\c2\f5(\f0?\00\00\00\00\00\00\f8?\9a\99\99\99\99\99\b9?)\\\8f\c2\f5(\f8?\00\00\00\00\00\00\00@\9a\99\99\99\99\99\b9?")
(data (i32.const 11504) "\9a\99\99\99\99\99\b9?\9a\99\99\99\99\99\c9?\00\00\00\00\00@P@\e1z\14\aeG\e1\ca?333333\d3?\00\00\00\00\00\009@\d7\a3p=\n\d7\d3?\9a\99\99\99\99\99\d9?\00\00\00\00\00\00\00@=\n\d7\a3p=\da?\00\00\00\00\00\00\e0?\00\00\00\00\00\00\00@R\b8\1e\85\ebQ\e0?333333\e3?\00\00\00\00\00\00\00@\85\ebQ\b8\1e\85\e3?ffffff\e6?\00\00\00\00\00\00\f0?\b8\1e\85\ebQ\b8\e6?\9a\99\99\99\99\99\e9?\00\00\00\00\00\00\f0?\ecQ\b8\1e\85\eb\e9?\cd\cc\cc\cc\cc\cc\ec?\00\00\00\00\00\00\e0?\1f\85\ebQ\b8\1e\ed?\00\00\00\00\00\00\f0?\00\00\00\00\00\00\e0?)\\\8f\c2\f5(\f0?333333\f3?\00\00\00\00\00\00\e0?\\\8f\c2\f5(\\\f3?\00\00\00\00\00\00\f8?\00\00\00\00\00\00\e0?")
(data (i32.const 11776) "\9a\99\99\99\99\99\a9?\9a\99\99\99\99\99\b9?\00\00\00\00\00\00T@)\\\8f\c2\f5(\bc?\9a\99\99\99\99\99\c9?\00\00\00\00\00\003@\e1z\14\aeG\e1\ca?333333\d3?\9a\99\99\99\99\99\b9?\d7\a3p=\n\d7\d3?\9a\99\99\99\99\99\d9?\9a\99\99\99\99\99\b9?=\n\d7\a3p=\da?\00\00\00\00\00\00\e0?\9a\99\99\99\99\99\b9?R\b8\1e\85\ebQ\e0?333333\e3?\9a\99\99\99\99\99\b9?\85\ebQ\b8\1e\85\e3?ffffff\e6?\9a\99\99\99\99\99\b9?\b8\1e\85\ebQ\b8\e6?\9a\99\99\99\99\99\e9?\9a\99\99\99\99\99\b9?\ecQ\b8\1e\85\eb\e9?\cd\cc\cc\cc\cc\cc\ec?\9a\99\99\99\99\99\b9?\1f\85\ebQ\b8\1e\ed?\00\00\00\00\00\00\f0?\9a\99\99\99\99\99\b9?)\\\8f\c2\f5(\f0?333333\f3?\9a\99\99\99\99\99\b9?\\\8f\c2\f5(\\\f3?\00\00\00\00\00\00\f8?\9a\99\99\99\99\99\b9?")
(data (i32.const 12064) "{\14\aeG\e1z\84?{\14\aeG\e1z\94?\00\00\00\00\00\00I@\b8\1e\85\ebQ\b8\9e?{\14\aeG\e1z\a4?\00\00\00\00\00\00D@\9a\99\99\99\99\99\a9?\9a\99\99\99\99\99\a9?\00\00\00\00\00\00\14@\b8\1e\85\ebQ\b8\ae?\9a\99\99\99\99\99\b9?\00\00\00\00\00\00\f0?)\\\8f\c2\f5(\bc?\9a\99\99\99\99\99\c9?\00\00\00\00\00\00\f0?\e1z\14\aeG\e1\ca?333333\d3?\00\00\00\00\00\00\e0?\d7\a3p=\n\d7\d3?\9a\99\99\99\99\99\d9?\00\00\00\00\00\00\e0?=\n\d7\a3p=\da?\00\00\00\00\00\00\e0?\00\00\00\00\00\00\e0?R\b8\1e\85\ebQ\e0?ffffff\e6?\00\00\00\00\00\00\e0?\b8\1e\85\ebQ\b8\e6?\00\00\00\00\00\00\f0?\00\00\00\00\00\00\e0?)\\\8f\c2\f5(\f0?333333\f3?\00\00\00\00\00\00\e0?")
(data (i32.const 12328) "error multiply\00")
(data (i32.const 12343) "game reward: \00")
(data (i32.const 12357) " cell id: \00")
(data (i32.const 12368) "open bonus\00")
(data (i32.const 12379) "reveal\00")
(data (i32.const 12386) "treasurefee3\00")
(data (i32.const 12399) "buyback bonus\00")
(data (i32.const 12413) "treasurefee2\00")
(data (i32.const 12426) "share bonus\00")
(data (i32.const 12438) "CryptoTreasure bonus, id: \00")
(data (i32.const 12465) "CryptoTreasure refer bonus, id: \00")
(data (i32.const 12498) "Crypto Dice bonus, id: \00")
(data (i32.const 12522) "cannot increment end iterator\00")
(data (i32.const 12552) "cannot pass end iterator to erase\00")
(data (i32.const 12586) "object passed to erase is not in multi_index\00")
(data (i32.const 12631) "cannot erase objects in table of another contract\00")
(data (i32.const 12681) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12734) "fund unlock error\00")
(data (i32.const 21168) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 21248) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$1 (param i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "__multi3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$14 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$15 (result i32)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$19 (result i64)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$26 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$29 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$30 (param i32)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$42 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$43 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$46 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$48 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$49 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$50 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_ZdlPv" (func $179))
(export "_Znwj" (func $177))
(export "_Znaj" (func $178))
(export "_ZdaPv" (func $180))
(export "_ZnwjSt11align_val_t" (func $181))
(export "_ZnajSt11align_val_t" (func $182))
(export "_ZdlPvSt11align_val_t" (func $183))
(export "_ZdaPvSt11align_val_t" (func $184))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $5 $7 $9 $11 $13 $14 $16 $214 $216)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 21505))
(global $global$2 i32 (i32.const 21505))


void .FUNC $220 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [12]
	$4 = ($1 + [12])
	$6 = *($1 + [12])
	$5 = *(($1 + [16]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$2
	$6 = ($1 + [36])
	$7 = ($1 + [24])
	$9 = *($1 + [24])
	$5 = *(($1 + [28]))
	$10 = ($5 - $9)
	$8 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($10 + $3) : ((int_32)$9 == (int_32)$5) )
	$9 = *($1 + [36])
	$5 = *(($1 + [40]))
	$10 = ($5 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($10 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$3 = (($10 & [-16]) + $3)
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $33($0, $3)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$3 = [0]
	
.LABEL $label$6
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9279])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[3]), [9279])
	CALL memcpy(($3 + [8]), ($1 + [8]), [4])
	*($2 + [4]) = ($3 + [12])
	CALL $175($2, $4)
	CALL $169($2, $7)
	CALL $176($2, $6)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $230($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [488]))) = (int_64)0
	*(($4 + [504])) = [0]
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [452]) = $2
	*($4 + [448]) = $2
	*($4 + [456]) = ($2 + $7)
	*($4 + [544]) = ($4 + [448])
	*($4 + [40]) = ($4 + [464])
	CALL $17(($4 + [40]), ($4 + [544]))
	$8 = *($4 + [456])
	*((($4 + [24]) + [8])) = $8
	*((($4 + [8]) + [8])) = $8
	$9 = *($4 + [448])
	*($4 + [8]) = $9
	*($4 + [24]) = $9
	$10 = CALL $18(($4 + [40]), $0, $1, ($4 + [8]))
	*(($8 = (($4 + [528]) + [8]))) = *($3)
	*($4 + [528]) = *($4 + [480])
	$0 = *($4 + [472])
	$1 = *($4 + [464])
	$3 = CALL $186(($4 + [512]), ($4 + [496]))
	*((($4 + [544]) + [8])) = *($8)
	*($4 + [568]) = $1
	*($4 + [560]) = $0
	*($4 + [544]) = *($4 + [528])
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [568])), (int_32 ($4 + [560])), (int_32 ($4 + [544])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [512]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $233($2)
	
.LABEL $label$6
	CALL $19($10)
	if ( ((*($4 + [496]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [504])))
	
.LABEL $label$7
	$global$0 = ($4 + [576])
	return [1]
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $230($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12752])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $230($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [7]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9279])
	CALL memcpy(*($3 + [4]), ($2 + [7]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$4 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($3 + [4]), $4, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$4 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($3 + [4]), $4, [8])
	$5 = (*($3 + [4]) + [8])
	*($3 + [4]) = $5
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($3 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($4 + [52])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [56])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$5 = *(($0 + [112]))
	if ( ($5 == 0) ){ goto $label$7 }
	$1 = ($0 + [116])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [112]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $5
	
.LABEL $label$8
	*($1) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$5 = *(($0 + [72]))
	if ( ($5 == 0) ){ goto $label$12 }
	$1 = ($0 + [76])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [72]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $5
	
.LABEL $label$13
	*($1) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$5 = *(($0 + [32]))
	if ( ($5 == 0) ){ goto $label$17 }
	$1 = ($0 + [36])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $5
	
.LABEL $label$18
	*($1) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$17
	return $0
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $173($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $189($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $189($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $185($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [8522]
	*($2 + [20]) = CALL $227([8522])
	*($2 + [8]) = *($2 + [16])
	CALL require_auth(*(CALL $4(($2 + [24]), ($2 + [8]))))
	CALL $53(($0 + [216]), $1)
	$global$0 = ($2 + [32])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8645])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8750])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8683])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8750])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $221 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $219($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [320])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$2 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$2 }
	$8 = *($4)
	$7 = CALL $227([8559])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$3 }
	if ( (CALL $197($4, [0], [-1], [8559], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert(((int_32)CALL $20($0) ^ (int_32)[1]), [9457])
	*(($5 + [272])) = [0]
	*($5 + [264]) = (int_64)0
	$8 = CALL $227([8579])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$6 }
	*($5 + [264]) = ($8 << [1])
	$7 = (($5 + [264]) | [1])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [264]) = ($9 | [1])
	*($5 + [272]) = $7
	*($5 + [268]) = $8
	
.LABEL $label$5
	CALL memcpy($7, [8579], $8)
	
.LABEL $label$4
	*(($7 + $8)) = [0]
	$9 = ($8 & [1])
	$8 = *($5 + [264])
	$12 = uint_32($8 >> [1])
	$11 = *($5 + [268])
	$8 = ( $11 ? $12 : $9 )
	$10 = ($8 & [1])
	$8 = *($4)
	$7 = ( *(($4 + [4])) ? uint_32($8 >> [1]) : $10 )
	if ( ((uint_32)$7 <= (uint_32)$8) ){ goto $label$9 }
	if ( ($8 == 0) ){ goto $label$10 }
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$9 }
	$13 = ( *($4 + [8]) ? ($4 + [1]) : $10 )
	$12 = ($13 + $7)
	$10 = ( *($5 + [272]) ? (($5 + [264]) | [1]) : $9 )
	$11 = *($10)
	$9 = $13
	
.LOOP $label$11:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$9 }
	$7 = CALL $225($9, $11, $7)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( (CALL $226($7, $10, $8) == 0) ){ goto $label$12 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$9 }
	if ( ((int_32)$7 != (int_32)$13) ){ goto $label$9 }
	$8 = *($5 + [264])
	$12 = uint_32($8 >> [1])
	$9 = ($8 & [1])
	$11 = *($5 + [268])
	
.LABEL $label$10
	$4 = CALL $187(($5 + [304]), $4, ( $11 ? $12 : $9 ), [-1], $4)
	CALL $21(($5 + [160]), ($0 + [216]), $1, $2, $3, $4)
	$6 = *($0)
	*($5 + [112]) = [8535]
	*($5 + [116]) = CALL $227([8535])
	*($5 + [8]) = *($5 + [112])
	*($5 + [56]) = *(CALL $4(($5 + [48]), ($5 + [8])))
	*($5 + [48]) = $6
	*((($0 = CALL _Znwj([16])) + [8])) = *($5 + [56])
	*($0) = *($5 + [48])
	$1 = ($0 + [16])
	*($5 + [116]) = $1
	*($5 + [112]) = $0
	*($5 + [120]) = $1
	CALL $22($6, (int_64)5445040692004221440, ($5 + [112]), ($5 + [160]))
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$13 }
	*($5 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((*($5 + [304]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [8]))
	if ( (*($5 + [264]) & [1]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	$8 = ($0 + [72])
	$2 = *(($0 + [100]))
	if ( ((int_32)$2 == (int_32)*(($0 + [96]))) ){ goto $label$15 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$8), [8823])
	goto $label$14 
	
.LABEL $label$15
	$2 = [0]
	$7 = CALL db_find_i64(*($8), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$2 = CALL $23($8, $7)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$8), [8823])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	$8 = *($2 + [8])
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)[1]), [10346])
	CALL eosio_assert(((uint_32)($8 + [21000]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000))), [10368])
	$4 = CALL $186(($5 + [88]), $4)
	CALL $24($0, $4, ($5 + [152]), ($5 + [151]), ($5 + [104]), ($5 + [112]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$16
	CALL $25($0, ($5 + [152]))
	CALL eosio_assert((((*($5 + [151]) + [-1]) & [255]) <= [12]), [8585])
	$2 = ((*($5 + [151]) + [-1]) & [255])
	CALL eosio_assert(($2 <= [12]), [8585])
	$8 = ($0 + [32])
	CALL $26(($5 + [160]), $8)
	$4 = *($5 + [160])
	$6 = *(($4 + ((int_32)$2 * (int_32)[96])) + [8])
	if ( ($4 == 0) ){ goto $label$17 }
	*($5 + [164]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	CALL eosio_assert(((int_64)*($1) != (int_64)$6), [10445])
	$2 = ((*($5 + [151]) + [-1]) & [255])
	CALL eosio_assert(($2 <= [12]), [8585])
	CALL $26(($5 + [160]), $8)
	$4 = *($5 + [160])
	$6 = *(($4 + ((int_32)$2 * (int_32)[96])) + [16])
	if ( ($4 == 0) ){ goto $label$18 }
	*($5 + [164]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)*($5 + [104]) == (int_64)$6), [10466])
	CALL $27($0, $3, ($5 + [151]))
	CALL $28($0, ($5 + [151]), $3)
	$6 = *($3)
	CALL __multi3(($5 + [16]), $6, (int_64)$6 >> (int_64)63), (int_64)5, (int_64)0)
	$14 = *($3 + [8])
	$6 = *((($5 + [16]) + [8]))
	$15 = *($5 + [16])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [10241])
	*($5 + [168]) = $14
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($5 + [160]) = ((int_64)$15 / (int_64)1000)
	CALL $29($0, $1, ($5 + [160]))
	CALL $30($0, ($5 + [151]), $1)
	CALL $31($0, ($5 + [151]))
	CALL $32($0, ($5 + [151]), $1, ($5 + [112]))
	*((($5 + [160]) + [24])) = *($3 + [8])
	*($5 + [160]) = *($5 + [152])
	*($5 + [168]) = *($5 + [151])
	*($5 + [176]) = *($3)
	*($5 + [192]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = *($0)
	*($5 + [304]) = [8535]
	*($5 + [308]) = CALL $227([8535])
	*($5 + [40]) = *($5 + [304])
	$15 = *(CALL $4(($5 + [48]), ($5 + [40])))
	$14 = *($0)
	*($5 + [304]) = [8602]
	*($5 + [308]) = CALL $227([8602])
	*($5 + [32]) = *($5 + [304])
	*($5 + [56]) = *(CALL $4(($5 + [48]), ($5 + [32])))
	*($5 + [48]) = $14
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = $15
	*(($5 + [84])) = [0]
	$1 = ($0 + [16])
	*((($5 + [48]) + [24])) = $1
	*(($5 + [68])) = $1
	*($5 + [64]) = $0
	*($5 + [76 align=4]) = (int_64)0
	CALL $33(($5 + [76]), [29])
	$0 = *((($5 + [48]) + [32]))
	$1 = *($5 + [76])
	*($5 + [284]) = $1
	*($5 + [280]) = $1
	*($5 + [288]) = $0
	*($5 + [296]) = ($5 + [280])
	*($5 + [308]) = (($5 + [160]) + [8])
	*($5 + [312]) = (($5 + [160]) + [16])
	*($5 + [316]) = (($5 + [160]) + [32])
	*($5 + [304]) = ($5 + [160])
	CALL $34(($5 + [304]), ($5 + [296]))
	CALL $35(($5 + [304]), ($5 + [48]))
	$0 = *($5 + [304])
	CALL send_inline($0, (*($5 + [308]) - $0))
	$0 = *($5 + [304])
	if ( ($0 == 0) ){ goto $label$19 }
	*($5 + [308]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$19
	$0 = *($5 + [76])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($5 + [80])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	$0 = *($5 + [64])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($5 + [68])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [272]))
	
.LABEL $label$2
	$global$0 = ($5 + [320])
	return (unreachable)
	
.LABEL $label$1
	CALL $185(($5 + [264]))
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [9279])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [9279])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)5445034375704815888, *(*($2 + [8])), (int_64)5445034375704815888, $3, [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)5445034375704815888) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)5445034375704815889
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	*($3 + [128]) = [8381]
	*($3 + [132]) = CALL $227([8381])
	*($3 + [64]) = *($3 + [128])
	CALL $4(($3 + [136]), ($3 + [64]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$3 }
	*($3 + [128]) = [8400]
	*($3 + [132]) = CALL $227([8400])
	*($3 + [56]) = *($3 + [128])
	CALL $4(($3 + [136]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3) = *($3 + [120])
	CALL $6($0, (int_64)6138663591592764928, $3)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $212([0])
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$1
	if ( ((int_64)$2 > (int_64)-4417057971914494465) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4992623619369435136) ){ goto $label$4 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [32]) = *($3 + [88])
	CALL $8($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4149687614183047168) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4157529679091318784) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417057971914494464) ){ goto $label$4 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [8]) = *($3 + [112])
	CALL $10($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3 + [16]) = *($3 + [104])
	CALL $12($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [24]) = *($3 + [96])
	CALL $12($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [76]) = [0]
	*($3 + [72]) = [6]
	*($3 + [48]) = *($3 + [72])
	CALL $15($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = [7]
	*($3 + [40]) = *($3 + [80])
	CALL $15($1, $1, ($3 + [40]))
	
.LABEL $label$4
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [72])
	$3 = *(($0 + [208]))
	$4 = *($0 + [200])
	$5 = *(($0 + [100]))
	if ( ((int_32)$5 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$2), [8823])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $23($2, $6)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$2), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9414])
	$7 = *($5 + [56])
	CALL eosio_assert(((int_64)*(($5 + [64])) == (int_64)$3), [9940])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - $7)) > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10010])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$5 }
	$6 = ((int_64)$4 < (int_64)2305843009213693952)
	CALL eosio_assert($6, [10217])
	CALL eosio_assert([1], [10241])
	*($1 + [64]) = $3
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	$4 = ((int_64)((int_64)$4 << (int_64)1) / (int_64)5)
	*($1 + [56]) = $4
	*($1 + [24]) = [12386]
	*($1 + [28]) = CALL $227([12386])
	*($1 + [16]) = *($1 + [24])
	*($1 + [24]) = *(CALL $4(($1 + [40]), ($1 + [16])))
	*(($1 + [48])) = [0]
	*($1 + [40]) = (int_64)0
	$5 = CALL $227([12399])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($1 + [40]) = ($5 << [1])
	$2 = (($1 + [40]) | [1])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($8)
	*($1 + [40]) = ($8 | [1])
	*($1 + [48]) = $2
	*($1 + [44]) = $5
	
.LABEL $label$7
	CALL memcpy($2, [12399], $5)
	
.LABEL $label$6
	*(($2 + $5)) = [0]
	CALL $73($0, ($1 + [24]), ($1 + [56]), ($1 + [40]))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($1 + [48]))
	
.LABEL $label$9
	CALL eosio_assert($6, [10217])
	CALL eosio_assert([1], [10241])
	*($1 + [48]) = $3
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($1 + [40]) = $4
	*($1 + [72]) = [12413]
	*($1 + [76]) = CALL $227([12413])
	*($1 + [8]) = *($1 + [72])
	*($1 + [72]) = *(CALL $4(($1 + [24]), ($1 + [8])))
	*(($1 + [32])) = [0]
	*($1 + [24]) = (int_64)0
	$5 = CALL $227([12426])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*($1 + [24]) = ($5 << [1])
	$2 = (($1 + [24]) | [1])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($1 + [24]) = ($6 | [1])
	*($1 + [32]) = $2
	*($1 + [28]) = $5
	
.LABEL $label$11
	CALL memcpy($2, [12426], $5)
	
.LABEL $label$10
	*(($2 + $5)) = [0]
	CALL $73($0, ($1 + [72]), ($1 + [40]), ($1 + [24]))
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($1 + [32]))
	
.LABEL $label$5
	$global$0 = ($1 + [80])
	return (unreachable)
	
.LABEL $label$4
	CALL $185(($1 + [40]))
	
.LABEL $label$3
	CALL $185(($1 + [24]))
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	int_64 $24
	$4 = ($global$0 - [240])
	$global$0 = $4
	$5 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = $5
	$6 = [8]
	*(($7 = (($4 + [224]) + [8]))) = *([0] + [10773 align=1])
	*($4 + [224]) = *([0] + [10765 align=1])
	$8 = ($0 + [192])
	$9 = [6]
	$10 = ($4 + [233])
	$11 = ($4 + [234])
	$12 = ($4 + [235])
	
.LOOP $label$2:
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [224]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [225])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [225]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [226])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [226]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [227])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [227]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [228])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [228]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [229])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [229]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [230])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [230]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($4 + [231])
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($4 + [231]) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($7)
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($7) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($10)
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($10) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($11)
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($11) = *($13)
	*($13) = $9
	*($8) = ((uint_64)((int_64)$5 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$9 = *($12)
	CALL eosio_assert([1], [10821])
	$5 = *($8)
	$13 = (($4 + [224]) + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)12)))
	*($12) = *($13)
	*($13) = $9
	if ( ($6 == 0) ){ goto $label$1 }
	$6 = ($6 + [-1])
	$9 = *($4 + [224])
	goto $label$2 
	
.LABEL $label$1
	CALL $26(($4 + [208]), ($0 + [32]))
	$14 = *(($0 + [208]))
	$15 = (($4 + [72]) | [1])
	$16 = (($4 + [88]) | [1])
	$17 = (($4 + [104]) | [1])
	$18 = (($4 + [136]) | [1])
	$19 = *($0 + [200])
	$8 = *($4 + [208])
	$20 = ($1 + [4])
	$11 = [0]
	
.LOOP $label$5:
	$21 = ((int_32)$11 * (int_32)[96])
	$7 = ($8 + $21)
	$22 = *($7 + [16])
	$23 = (($4 + [224]) + $11)
	*($4 + [207]) = *($23)
	$8 = CALL $227([8803])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8921])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($8 + [8802]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)0
	
.LABEL $label$6
	$9 = ($7 + [8])
	*(($12 = (($4 + [184]) + [8]))) = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	*($4 + [184]) = (int_64)0
	CALL eosio_assert([1], [9019])
	$5 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$24 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$5 = $24
	$10 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$5 = $24
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$7 = ($8 + [1])
	$8 = $7
	if ( $6 ){ goto $label$20 }
	$10 = [1]
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert($10, [9068])
	$8 = CALL $227([8803])
	if ( ($8 <= [8]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert([0], [9068])
	$8 = CALL $227([8803])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( $8 ){ goto $label$13 }
	$5 = (int_64)0
	goto $label$12 
	
.LABEL $label$14
	CALL eosio_assert([0], [8921])
	
.LABEL $label$13
	$5 = (int_64)0
	
.LOOP $label$21:
	$6 = *(($8 + [8802]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$22
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	
.LABEL $label$12
	*(($13 = (($4 + [168]) + [8]))) = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	*($4 + [168]) = (int_64)0
	CALL eosio_assert([1], [9019])
	$5 = (uint_64)*($13) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$24 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$5 = $24
	$10 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$5 = $24
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$7 = ($8 + [1])
	$8 = $7
	if ( $6 ){ goto $label$32 }
	$10 = [1]
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$10 = [0]
	
.LABEL $label$28
	CALL eosio_assert($10, [9068])
	if ( (int_64)($22 == 0) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert([0], [9068])
	if ( (int_64)($22 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (int_64)(*($9) == 0) ){ goto $label$25 }
	$5 = CALL $77($0, ($4 + [207]))
	$8 = (*($4 + [208]) + $21)
	$24 = *($8 + [24])
	CALL __multi3(($4 + [56]), $24, (int_64)$24 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	$24 = *(($8 + [32]))
	$5 = *((($4 + [56]) + [8]))
	$22 = *($4 + [56])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [10241])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($12) = $24
	*($4 + [184]) = ((int_64)$22 / (int_64)100)
	CALL eosio_assert(((int_64)$14 == (int_64)$24), [9822])
	if ( ((int_64)$19 >= (int_64)*($4 + [184])) ){ goto $label$43 }
	if ( ((int_64)$19 < (int_64)1) ){ goto $label$42 }
	*($12) = $14
	*($4 + [184]) = $19
	$8 = CALL $227([8803])
	if ( ($8 <= [8]) ){ goto $label$41 }
	CALL eosio_assert([0], [8921])
	goto $label$40 
	
.LABEL $label$43
	CALL eosio_assert(((int_64)*($12) == (int_64)$14), [9940])
	$19 = (int_64)
	CALL eosio_assert(((int_64)$19($19 - *($4 + [184]))) > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)$19 < (int_64)4611686018427387904), [10010])
	$5 = *($4 + [184])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$25 }
	goto $label$33 
	
.LABEL $label$42
	$8 = CALL $227([8803])
	if ( ($8 <= [8]) ){ goto $label$39 }
	CALL eosio_assert([0], [8921])
	goto $label$38 
	
.LABEL $label$41
	if ( ($8 == 0) ){ goto $label$37 }
	
.LABEL $label$40
	$24 = (int_64)0
	
.LOOP $label$44:
	$6 = *(($8 + [8802]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$45
	$24 = ((int_64)((int_64)$24 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$44 }
	goto $label$34 
	
.LABEL $label$39
	if ( ($8 == 0) ){ goto $label$36 }
	
.LABEL $label$38
	$24 = (int_64)0
	
.LOOP $label$46:
	$6 = *(($8 + [8802]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$47 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$47
	$24 = ((int_64)((int_64)$24 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$46 }
	goto $label$35 
	
.LABEL $label$37
	$24 = (int_64)0
	goto $label$34 
	
.LABEL $label$36
	$24 = (int_64)0
	
.LABEL $label$35
	CALL eosio_assert([1], [9019])
	$5 = ((int_64)$24 & (int_64)72057594037927935)
	$22 = ((int_64)((int_64)$24 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$24 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$5 = $24
	$6 = [1]
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$51
	$5 = $24
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$7 = ($8 + [1])
	$8 = $7
	if ( $6 ){ goto $label$52 }
	$6 = [1]
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$6 = [0]
	
.LABEL $label$48
	CALL eosio_assert($6, [9068])
	*($12) = $22
	*($4 + [184]) = (int_64)0
	if ( ((int_32)*($4 + [207]) == (int_32)[1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$34
	CALL eosio_assert([1], [9019])
	$5 = ((int_64)$24 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$24 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$24 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$56 }
	$5 = $24
	$6 = [1]
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$56
	$5 = $24
	
.LOOP $label$57:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$54 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$7 = ($8 + [1])
	$8 = $7
	if ( $6 ){ goto $label$57 }
	$6 = [1]
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$6 = [0]
	
.LABEL $label$53
	CALL eosio_assert($6, [9068])
	$19 = (int_64)0
	$5 = *($4 + [184])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$25 }
	
.LABEL $label$33
	if ( ((int_32)*($4 + [207]) != (int_32)[1]) ){ goto $label$61 }
	CALL __multi3(($4 + [40]), $5, (int_64)$5 >> (int_64)63), (int_64)50, (int_64)0)
	$22 = *($12)
	$5 = *((($4 + [40]) + [8]))
	$24 = *($4 + [40])
	CALL eosio_assert(( (uint_64)($24 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$24 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [10241])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($13) = $22
	*($4 + [168]) = ((int_64)$24 / (int_64)1000)
	$5 = *($4 + [184])
	CALL __multi3(($4 + [24]), $5, (int_64)$5 >> (int_64)63), (int_64)5, (int_64)0)
	$22 = *($12)
	$5 = *((($4 + [24]) + [8]))
	$24 = *($4 + [24])
	CALL eosio_assert(( (uint_64)($24 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$24 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [10241])
	*(($8 = (($4 + [152]) + [8]))) = $22
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($4 + [152]) = ((int_64)$24 / (int_64)100)
	CALL eosio_assert(((int_64)*($13) == (int_64)*($12)), [9940])
	$5 = (int_64)
	*($4 + [184]) = $5(*($4 + [184]) - *($4 + [168])))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)*($4 + [184]) < (int_64)4611686018427387904), [10010])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($12)), [9940])
	$5 = (int_64)
	*($4 + [184]) = $5(*($4 + [184]) - *($4 + [152])))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)*($4 + [184]) < (int_64)4611686018427387904), [10010])
	$6 = ($11 + [1])
	CALL $78(($4 + [104]), $0, ($4 + [184]), $6)
	CALL $73($0, $9, ($4 + [184]), ($4 + [104]))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*((($4 + [104]) + [8])))
	
.LABEL $label$62
	*(($10 = (($4 + [136]) + [8]))) = [0]
	*($4 + [136]) = (int_64)0
	$8 = CALL $227([10777])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$60 }
	*($4 + [136]) = ($8 << [1])
	$7 = $18
	if ( $8 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	CALL $78(($4 + [152]), $0, ($4 + [184]), ($11 + [1]))
	CALL $73($0, $9, ($4 + [184]), ($4 + [152]))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*((($4 + [152]) + [8])))
	if ( ((int_32)*($4 + [207]) == (int_32)[1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$60
	$13 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($13)
	*($10) = $7
	*($4 + [136]) = ($13 | [1])
	*($4 + [140]) = $8
	
.LABEL $label$59
	CALL memcpy($7, [10777], $8)
	
.LABEL $label$58
	*(($7 + $8)) = [0]
	CALL $203(($4 + [104]), $6)
	$7 = *($4 + [104])
	$13 = ($7 & [1])
	$8 = (($4 + [104]) + [8])
	CALL $194(($4 + [136]), ( *($8) ? $17 : $13 ), ( *($4 + [108]) ? uint_32($7 >> [1]) : $13 ))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$63
	*($4 + [120]) = [10204]
	*($4 + [124]) = CALL $227([10204])
	*($4 + [16]) = *($4 + [120])
	CALL $4(($4 + [104]), ($4 + [16]))
	*($4 + [104]) = *($4 + [104])
	CALL $73($0, ($4 + [104]), ($4 + [152]), ($4 + [136]))
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$5 = *($4 + [184])
	CALL __multi3($4, $5, (int_64)$5 >> (int_64)63), (int_64)25, (int_64)0)
	$22 = *($12)
	$5 = *(($4 + [8]))
	$24 = *($4)
	CALL eosio_assert(( (uint_64)($24 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$24 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [10241])
	*($8) = $22
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($4 + [104]) = ((int_64)$24 / (int_64)10000)
	CALL $75($0, $9, ($4 + [104]), ($4 + [120]), [0])
	*(($13 = (($4 + [88]) + [8]))) = [0]
	*($4 + [88]) = (int_64)0
	$8 = CALL $227([10799])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$66 }
	*($4 + [88]) = ($8 << [1])
	$7 = $16
	if ( $8 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$21 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($21)
	*($13) = $7
	*($4 + [88]) = ($21 | [1])
	*($4 + [92]) = $8
	
.LABEL $label$65
	CALL memcpy($7, [10799], $8)
	
.LABEL $label$64
	*(($7 + $8)) = [0]
	CALL $203(($4 + [72]), $6)
	$8 = *($4 + [72])
	$6 = ($8 & [1])
	$7 = (($4 + [72]) + [8])
	CALL $194(($4 + [88]), ( *($7) ? $15 : $6 ), ( *($4 + [76]) ? uint_32($8 >> [1]) : $6 ))
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$67
	CALL $76($0, ($4 + [120]), ($4 + [88]))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$68
	$8 = *($4 + [120])
	if ( ($8 == 0) ){ goto $label$69 }
	*($4 + [124]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$69
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$25
	if ( ((int_32)*($4 + [207]) != (int_32)[1]) ){ goto $label$23 }
	
.LABEL $label$24
	*($4 + [152]) = ($11 + [1])
	CALL $79($0, ($4 + [152]), ($4 + [168]))
	
.LABEL $label$23
	$8 = *($20)
	if ( ((int_32)$8 == (int_32)*(($1 + [8]))) ){ goto $label$71 }
	*($20) = ($8 + [8])
	*($8) = *($9)
	goto $label$70 
	
.LABEL $label$71
	CALL $80($1, $9)
	
.LABEL $label$70
	$8 = ($2 + [4])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$73 }
	*($6) = *($23)
	*($8) = (*($8) + [1])
	goto $label$72 
	
.LABEL $label$73
	CALL $81($2, $23)
	
.LABEL $label$72
	$8 = ($3 + [4])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)*(($3 + [8]))) ){ goto $label$75 }
	*($6) = *($4 + [184])
	*(($6 + [8])) = *($12)
	*($8) = (*($8) + [16])
	$8 = *($4 + [208])
	$11 = ($11 + [1])
	if ( ($11 <= [12]) ){ goto $label$5 }
	goto $label$74 
	
.LABEL $label$75
	CALL $82($3, ($4 + [184]))
	$8 = *($4 + [208])
	$11 = ($11 + [1])
	if ( ($11 <= [12]) ){ goto $label$5 }
	
.LABEL $label$74
	if ( ($8 == 0) ){ goto $label$76 }
	*($4 + [212]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$76
	$global$0 = ($4 + [240])
	return (unreachable)
	
.LABEL $label$4
	CALL $185(($4 + [136]))
	
.LABEL $label$3
	CALL $185(($4 + [88]))
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	*($2 + [32]) = [8535]
	*($2 + [36]) = CALL $227([8535])
	*($2 + [24]) = *($2 + [32])
	*($2 + [64]) = *(CALL $4(($2 + [56]), ($2 + [24])))
	*($2 + [56]) = $3
	*($2 + [72]) = [9439]
	*($2 + [76]) = CALL $227([9439])
	*($2 + [16]) = *($2 + [72])
	*($2 + [48]) = *(CALL $4(($2 + [32]), ($2 + [16])))
	*($2 + [72]) = [9452]
	*($2 + [76]) = CALL $227([9452])
	*($2 + [8]) = *($2 + [72])
	*($2 + [72]) = *(CALL $4(($2 + [32]), ($2 + [8])))
	$3 = CALL current_time()
	*($2 + [32]) = *($1)
	*($2 + [40]) = ((uint_64)$3 / (uint_64)(int_64)1000000)
	CALL $64($0, ($2 + [56]), ($2 + [48]), ($2 + [72]), ($2 + [32]))
	$global$0 = ($2 + [80])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [8823])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $23($0, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [8823])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9088])
	CALL $101($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $102($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = [8381]
	*($2 + [20]) = CALL $227([8381])
	*($2 + [8]) = *($2 + [16])
	$3 = *(CALL $4(($2 + [24]), ($2 + [8])))
	$4 = *($1)
	$1 = CALL $227([8803])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8921])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($1 + [8802]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($2 + [56])) = [0]
	*($2 + [32]) = $4
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$1 = CALL $63(($2 + [24]), $5, [9336])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$0 = *($2 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = ($2 + [52])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$10 }
	$1 = *(($2 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

void .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = ($0 + [32])
	CALL $26(($1 + [16]), $2)
	$3 = [0]
	
.LOOP $label$1:
	*($1 + [32]) = [8802]
	*($1 + [36]) = CALL $227([8802])
	*($1 + [8]) = *($1 + [32])
	CALL $4(($1 + [40]), ($1 + [8]))
	*((*($1 + [16]) + ($5 = ((int_32)$3 * (int_32)[96]))) + [8]) = *($1 + [40])
	*((*($1 + [16]) + $5) + [16]) = (int_64)0
	$6 = CALL $227([8803])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8921])
	goto $label$3 
	
.LABEL $label$4
	if ( $6 ){ goto $label$3 }
	$4 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($6 + [8802]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	
.LABEL $label$2
	CALL eosio_assert([1], [9019])
	$8 = ((int_64)$4 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $4
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9068])
	*(($6 = (*($1 + [16]) + $5)) + [24]) = (int_64)0
	*(($6 + [32])) = $9
	*((*($1 + [16]) + $5) + [80]) = [0]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$1 }
	CALL $62($2, ($1 + [16]), *($0))
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$12 }
	*($1 + [20]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($1 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	CALL $26($2, ($0 + [32]))
	$1 = [0]
	$4 = *($2)
	
.LOOP $label$1:
	$5 = ($4 + $1)
	if ( (int_64)(*(($5 + [16])) == 0) ){ goto $label$2 }
	$3 = ((int_64)*(($5 + [48])) ^ (int_64)$3)
	
.LABEL $label$2
	$1 = ($1 + [96])
	if ( ((int_32)$1 != (int_32)[1152]) ){ goto $label$1 }
	*($0 + [192]) = ((int_64)((int_64)((int_64)CALL current_time() * (int_64)$3) * (int_64)(CASTING int_64)(int_32 CALL $fimport$14())) * (int_64)(CASTING int_64)(int_32 CALL $fimport$15()))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$3 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $193($3, *((uint_32($5 >> [4]) + [8223])))
	CALL $193($3, *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$5 = ($3 + [8])
	$4 = ( *($5) ? ($3 | [1]) : (*($3) & [1]) )
	CALL assert_sha256($4, CALL $227($4), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
}

void .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($0 + [72])
	$2 = *(($0 + [100]))
	if ( ((int_32)$2 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$1), [8823])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$0 = CALL db_find_i64(*($1), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $23($1, $0)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$1), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	CALL eosio_assert(((*($2 + [8]) + [21000]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000))), [10744])
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($0 + [72])
	$2 = *(($0 + [100]))
	if ( ((int_32)$2 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$1), [8823])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$0 = CALL db_find_i64(*($1), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $23($1, $0)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$1), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	return *($2 + [8])
}

int_64 .FUNC $222 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $221($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $211()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $221($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [21249]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $220($0, (int_64)0)
	*(CALL $211()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $221($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $221($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $221($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $221($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [21249])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $221($0)
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $221($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $221($0)
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $221($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [21249]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $220($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [21249]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [21249]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $221($0) + [21249]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $211()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $211()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $211()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $233 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [21156])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [20964]
	$3 = (((int_32)$1 * (int_32)[12]) + [20964])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $226 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $209($0)
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $209($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8912])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $166($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [8916])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8916])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $165(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [52])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [56])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	$6 = *($0)
	*(($1 + [24])) = *(($5 + [32]))
	*($1 + [16]) = *($5 + [24])
	$5 = *($4 + [4])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	*($1 + [48]) = *(*($4) + [40])
	$4 = *($4 + [8])
	$7 = ($1 + [52])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $167($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	$8 = ($1 + [48])
	$9 = ($1 + [32])
	$10 = ($1 + [16])
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$11 = ($1 + [64])
	$12 = *($1 + [52])
	$5 = *(($1 + [56]))
	$13 = ($5 - $12)
	$14 = (CASTING uint_64)(uint_32 $13)
	$4 = [49]
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$2 }
	$5 = (( $4 ? ($13 + $4) : ((int_32)$12 == (int_32)$5) ) + [8])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$4 = CALL $230($5)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $10
	*($3 + [44]) = $9
	*($3 + [48]) = $8
	*($3 + [52]) = $7
	*($3 + [56]) = $11
	CALL $168(($3 + [32]), ($3 + [24]))
	$14 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($6 + [8]), (int_64)5445040700864229376, *(*($0 + [8])), $14, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$14 >= (uint_64)*($6 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $233($4)
	if ( (uint_64)($14 <= *($6 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $144(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $68($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [52 align=4]) = (int_64)0
	*($3 + [60]) = [0]
	*($3 + [72]) = $1
	CALL $162(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $163(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [52])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [56])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $230 (int_32 $0)
{
	return CALL $231([12772], $0)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9279])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $169(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	if ( ($3 == 0) ){ goto $label$1 }
	$global$0 = ($1 + [80])
	return 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $23($2, $3) + [80]) == (int_32)$2), [8823])
	$global$0 = ($1 + [80])
	return 
	
.LABEL $label$1
	$4 = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [32])) = (int_64)0
	*(($1 + [24])) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = [0]
	*($1) = (int_64)1
	*($1 + [48]) = [0]
	*($1 + [16]) = [0]
	$3 = CALL $227([8803])
	if ( ($3 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8921])
	goto $label$4 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = (int_64)0
	
.LOOP $label$6:
	$5 = *(($3 + [8802]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$3
	*(($1 + [64])) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	*($1 + [56]) = (int_64)0
	CALL eosio_assert([1], [9019])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$4 = $6
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [9068])
	*($1 + [72]) = (int_64)0
	CALL $42($2, $1, *($0))
	$global$0 = ($1 + [80])
}

void .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = ($0 + [112])
	$3 = *(($0 + [140]))
	if ( ((int_32)$3 == (int_32)*(($0 + [136]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$2), [8823])
	if ( ($3 == 0) ){ goto $label$1 }
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)-7954134664302947328, (int_64)-7954134664302947328)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $55($2, $3) + [32]) == (int_32)$2), [8823])
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$1
	*($1 + [4]) = [0]
	*($1) = [0]
	$3 = CALL $227([8803])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8921])
	goto $label$5 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$5 = *(($3 + [8802]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$4 = (int_64)0
	
.LABEL $label$3
	*(($1 + [16])) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [9019])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$4 = $6
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$13 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$5 = [0]
	
.LABEL $label$9
	CALL eosio_assert($5, [9068])
	*($1 + [24]) = (int_64)0
	CALL $56($2, $1, *($0))
	$global$0 = ($1 + [32])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $83(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $84($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $23($2, $4)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9414])
	*(($3 = CALL memcpy($1, $3, [80])) + [48]) = [0]
	*($3) = ((int_64)*($3) + (int_64)1)
	CALL $42($2, $3, *($0))
	$global$0 = ($3 + [80])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [9279])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)5445031905265188864, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [48])
	$5 = ($0 + [8])
	$3 = CALL $87($5, $3)
	$6 = ($2 + [8])
	$7 = [1]
	
.LOOP $label$2:
	$8 = *(($3 + [32]))
	$9 = *($3 + [24])
	CALL $88($0, $3, $1)
	CALL $71($2, $0)
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [9940])
	$8 = (int_64)
	*($2) = $8(*($2) - $9))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [10010])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($2) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12734])
	CALL $72($4, $2, *($0))
	$10 = [0]
	$11 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($11, [12552])
	CALL eosio_assert($11, [12522])
	$11 = CALL db_next_i64(*($3 + [92]), $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $87($5, $11)
	
.LABEL $label$3
	CALL $89($5, $3)
	if ( ($10 == 0) ){ goto $label$1 }
	$11 = ($7 <= [10])
	$7 = ($7 + [1])
	$3 = $10
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [12586])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [12631])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [12681])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [20]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5001621369012617216, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [4])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [8])
	*($3 + [44]) = ($5 + [24])
	CALL $106(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)-7954134664302947328
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-7954134664302947328
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $107(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [8823])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7954134664302947328, (int_64)-7954134664302947328)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $55($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [8823])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9088])
	CALL $90($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $91($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$1 = ($global$0 - [144])
	$global$0 = $1
	$2 = ($0 + [32])
	$3 = *(($0 + [60]))
	if ( ((int_32)$3 == (int_32)*(($0 + [56]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [12]) == (int_32)$2), [8823])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)7339899822381465600, (int_64)7339899822381465600)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $60($2, $3) + [12]) == (int_32)$2), [8823])
	$global$0 = ($1 + [144])
	return 
	
.LABEL $label$2
	*($1 + [120]) = [0]
	*($1 + [112]) = (int_64)0
	$4 = ($1 + [64])
	$5 = (($1 + [16]) + [16])
	$6 = (($1 + [16]) + [24])
	$7 = ($1 + [48])
	$8 = ($1 + [96])
	$9 = (int_64)0
	
.LOOP $label$4:
	$9 = ((int_64)$9 + (int_64)1)
	*($1 + [16]) = $9
	*($1 + [128]) = [8802]
	*($1 + [132]) = CALL $227([8802])
	*($1 + [8]) = *($1 + [128])
	CALL $4(($1 + [136]), ($1 + [8]))
	$10 = *($1 + [136])
	*($5) = (int_64)0
	*($1 + [24]) = $10
	$3 = CALL $227([8803])
	if ( ($3 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8921])
	goto $label$6 
	
.LABEL $label$7
	if ( $3 ){ goto $label$6 }
	$10 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$10 = (int_64)0
	
.LOOP $label$8:
	$11 = *(($3 + [8802]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$8 }
	
.LABEL $label$5
	*($6) = (int_64)0
	*($7) = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9019])
	$10 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$10 = $12
	$11 = [1]
	$13 = $3
	$3 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$10 = $12
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$13 = ($3 + [1])
	$3 = $13
	if ( $11 ){ goto $label$14 }
	$11 = [1]
	$3 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$11 = [0]
	
.LABEL $label$10
	CALL eosio_assert($11, [9068])
	*(($4 + [24])) = (int_64)0
	*(($4 + [16])) = (int_64)0
	*(($4 + [8])) = (int_64)0
	*($4) = (int_64)0
	*($8) = [0]
	$3 = *($1 + [116])
	if ( ((uint_32)$3 >= (uint_32)*((($1 + [112]) + [8]))) ){ goto $label$16 }
	*($1 + [116]) = (CALL memcpy($3, ($1 + [16]), [96]) + [96])
	if ( ((int_64)$9 != (int_64)12) ){ goto $label$4 }
	goto $label$15 
	
.LABEL $label$16
	CALL $61(($1 + [112]), ($1 + [16]))
	if ( ((int_64)$9 != (int_64)12) ){ goto $label$4 }
	
.LABEL $label$15
	CALL $62($2, ($1 + [112]), *($0))
	$3 = *($1 + [112])
	if ( ($3 == 0) ){ goto $label$1 }
	*($1 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($1 + [144])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8912])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $33($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8916])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $153(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $84($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $33(($6 + [28]), [13])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9279])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[0]), [9279])
	CALL memcpy(($2 + [8]), ($4 + [8]), [1])
	CALL eosio_assert(((int_32)($1 + [-9]) > (int_32)[3]), [9279])
	CALL memcpy(($2 + [9]), ($4 + [12]), [4])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$4 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$11 = ($4 - $7)
	$8 = [0]
	
.LOOP $label$7:
	$2 = ($7 + $8)
	*((($4 = ($6 + $8)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($1 = ($4 + [-24]))) = (int_64)0
	*(($5 = ($4 + [-16]))) = [0]
	$3 = ($2 + [-24])
	*($1) = *($3)
	$1 = ($2 + [-16])
	*($5) = *($1)
	*($1) = [0]
	*(($1 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$5 = ($2 + [-12])
	*($1) = *($5)
	*($3) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-40])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$7 }
	$6 = ($6 + $8)
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($4 + [-40])
	$8 = *(($4 + [-24]))
	if ( ($8 == 0) ){ goto $label$11 }
	*(($4 + [-20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($1)
	$4 = *($1 + [4])
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3) + [24])
	
.LABEL $label$2
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ([0] - ($4 + $3))
	$7 = (CASTING uint_64)(uint_32 $4)
	$5 = ($1 + [12])
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $33($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	CALL $151($2, $1)
	CALL $136($2, $5)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [16]))
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = ($0 + [128])
	$6 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)5445040700864229376, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $158($5, $6)
	CALL eosio_assert([1], [12522])
	$6 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL $158($5, $6)
	$6 = [0]
	$7 = CALL db_lowerbound_i64(*(($0 + [128])), *(($0 + [136])), (int_64)5445040700864229376, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $158($5, $7)
	
.LABEL $label$2
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [12552])
	CALL eosio_assert($7, [12522])
	$7 = CALL db_next_i64(*($6 + [76]), ($4 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	CALL $158($5, $7)
	
.LABEL $label$3
	CALL $159($5, $6)
	
.LABEL $label$1
	$8 = *($0)
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = $2
	CALL $160(($4 + [8]), $5, $8, ($4 + [16]))
	$global$0 = ($4 + [32])
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	*((($4 + [104]) + [8])) = *(($2 + [8]))
	*($4 + [104]) = *($2)
	$5 = *($1)
	*((($4 + [88]) + [8])) = [0]
	*($4 + [88]) = (int_64)0
	$2 = CALL $227([12498])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($4 + [88]) = ($2 << [1])
	$1 = (($4 + [88]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($6)
	*($4 + [88]) = ($6 | [1])
	*($4 + [96]) = $1
	*($4 + [92]) = $2
	
.LABEL $label$4
	CALL memcpy($1, [12498], $2)
	
.LABEL $label$3
	*(($1 + $2)) = [0]
	CALL $205(($4 + [24]), *($3))
	$2 = *($4 + [24])
	$1 = ($2 & [1])
	CALL $194(($4 + [88]), ( *($4 + [32]) ? (($4 + [24]) | [1]) : $1 ), ( *($4 + [28]) ? uint_32($2 >> [1]) : $1 ))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$6
	$7 = *($0)
	*($4 + [72]) = [8535]
	*($4 + [76]) = CALL $227([8535])
	*($4 + [16]) = *($4 + [72])
	*($4 + [80]) = *(CALL $4(($4 + [24]), ($4 + [16])))
	*($4 + [72]) = $7
	*($4 + [120]) = [10573]
	*($4 + [124]) = CALL $227([10573])
	*($4 + [8]) = *($4 + [120])
	*($4 + [64]) = *(CALL $4(($4 + [24]), ($4 + [8])))
	*($4 + [120]) = [10586]
	*($4 + [124]) = CALL $227([10586])
	*($4) = *($4 + [120])
	*($4 + [120]) = *(CALL $4(($4 + [24]), $4))
	*(($4 + [40])) = *(($4 + [112]))
	*($4 + [24]) = $5
	*($4 + [32]) = *($4 + [104])
	CALL $186(($4 + [48]), ($4 + [88]))
	CALL $161($0, ($4 + [72]), ($4 + [64]), ($4 + [120]), ($4 + [24]))
	if ( (*($4 + [48]) & [1]) ){ goto $label$8 }
	if ( (*($4 + [88]) & [1]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [56])))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [96]))
	$global$0 = ($4 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $185(($4 + [88]))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = *($3 + [8])
	*($4 + [24]) = $5
	$6 = ((float_64)((float_64)(float_64)98 / (float_64)((float_64)(CASTING float_64)(uint_32 *($2)) + (float_64)(float_64)-1)) * (float_64)(CASTING float_64)(int_64 *($3)))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$7 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$7 = (Rounds 0)($6)
	
.LABEL $label$1
	*($4 + [16]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9019])
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $9
	$2 = [1]
	$10 = $3
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$8 = $9
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$10 = ($3 + [1])
	$3 = $10
	if ( $2 ){ goto $label$7 }
	$2 = [1]
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	
.LABEL $label$3
	CALL eosio_assert($2, [9068])
	CALL $119(($4 + [32]), $1)
	*(($3 = ($4 + [8]))) = *((($4 + [32]) + [8]))
	*($4) = *($4 + [32])
	CALL eosio_assert([1], [9881])
	$8 = *($4)
	CALL eosio_assert([1], [9896])
	$8 = ((int_64)$8 / (int_64)100)
	*($4) = $8
	CALL eosio_assert(((int_64)*($3) == (int_64)$5), [9822])
	$3 = ( $4 ? ($4 + [16]) : ((int_64)$8 < (int_64)$7) )
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($4 + [48])
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($2)
	CALL __multi3($5, $6, (int_64)$6 >> (int_64)63), (int_64)5, (int_64)0)
	$7 = *($2 + [8])
	$6 = *(($5 + [8]))
	$8 = *($5)
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [10241])
	*($5 + [24]) = $7
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	$6 = ((int_64)$8 / (int_64)1000)
	*($5 + [16]) = $6
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)[30]) ){ goto $label$3 }
	if ( ((int_32)$2 == (int_32)[10]) ){ goto $label$2 }
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$1 }
	$7 = ((int_64)$6 * (int_64)5)
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [10217])
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [10241])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	CALL eosio_assert([1], [10266])
	$6 = ((int_64)$6 + (int_64)((int_64)$8 / (int_64)200000))
	*($5 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10309])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [10328])
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [10217])
	CALL eosio_assert([1], [10241])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	CALL eosio_assert([1], [10266])
	$6 = ((int_64)$6 + (int_64)((int_64)$8 / (int_64)50000))
	*($5 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10309])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [10328])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([1], [10217])
	CALL eosio_assert([1], [10241])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	CALL eosio_assert([1], [10266])
	$6 = ((int_64)$6 + (int_64)((int_64)$8 / (int_64)100000))
	*($5 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10309])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [10328])
	
.LABEL $label$1
	CALL $157($0, $1, ($5 + [16]), $4)
	$global$0 = ($5 + [32])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [72]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [52])
	*($3 + [56]) = ($5 + [64])
	CALL $164(($3 + [32]), ($3 + [24]))
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $163(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [52])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [56])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [12586])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [12631])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [12681])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [52])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [52])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $233($0)
	
.LABEL $label$1
}

int_32 .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $220($3, (int_64)0)
	$4 = CALL $222($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $233($0)
	
.LABEL $label$1
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [10217])
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [10241])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*(($3 + [128])) = [0]
	*($3 + [120]) = (int_64)0
	$5 = ((int_64)((int_64)$5 << (int_64)1) / (int_64)1000)
	$1 = CALL $227([10185])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [120]) = ($1 << [1])
	$6 = (($3 + [120]) | [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($1 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [120]) = ($7 | [1])
	*($3 + [128]) = $6
	*($3 + [124]) = $1
	
.LABEL $label$4
	CALL memcpy($6, [10185], $1)
	
.LABEL $label$3
	*(($6 + $1)) = [0]
	CALL $205(($3 + [40]), *($2))
	$1 = *($3 + [40])
	$6 = ($1 & [1])
	CALL $194(($3 + [120]), ( *($3 + [48]) ? (($3 + [40]) | [1]) : $6 ), ( *($3 + [44]) ? uint_32($1 >> [1]) : $6 ))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$6
	$8 = *($0)
	*($3 + [104]) = [8535]
	*($3 + [108]) = CALL $227([8535])
	*($3 + [32]) = *($3 + [104])
	*($3 + [112]) = *(CALL $4(($3 + [40]), ($3 + [32])))
	*($3 + [104]) = $8
	*($3 + [136]) = [8381]
	*($3 + [140]) = CALL $227([8381])
	*($3 + [24]) = *($3 + [136])
	*($3 + [96]) = *(CALL $4(($3 + [40]), ($3 + [24])))
	*($3 + [136]) = [8400]
	*($3 + [140]) = CALL $227([8400])
	*($3 + [16]) = *($3 + [136])
	*($3 + [88]) = *(CALL $4(($3 + [40]), ($3 + [16])))
	*($3 + [136]) = [10204]
	*($3 + [140]) = CALL $227([10204])
	*($3 + [8]) = *($3 + [136])
	$8 = *(CALL $4(($3 + [40]), ($3 + [8])))
	*(($3 + [64])) = $4
	*($3 + [48]) = $8
	*($3 + [56]) = $5
	*($3 + [40]) = *($0)
	CALL $186(($3 + [72]), ($3 + [120]))
	CALL $123($0, ($3 + [104]), ($3 + [96]), ($3 + [88]), ($3 + [40]))
	if ( (*($3 + [72]) & [1]) ){ goto $label$8 }
	if ( (*($3 + [120]) & [1]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [80])))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [128]))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $185(($3 + [120]))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
}

int_64 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [24])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [16])), (int_64)5445031905265188864, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $87($4, $5)
	*($1 + [12]) = [0]
	*($1 + [8]) = $4
	$3 = *(*(CALL $120(($1 + [8])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $3
	
.LABEL $label$1
	$4 = ($0 + [88])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [10031])
	*($1 + [8]) = *($2)
	$2 = *(($0 + [116]))
	if ( ((int_32)$2 == (int_32)*(($0 + [112]))) ){ goto $label$4 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$4), [8823])
	if ( $2 ){ goto $label$3 }
	$2 = ($1 + [8])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)5445034771337199616, (int_64)5445034771337199616)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $121($4, $2)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$4), [8823])
	goto $label$3 
	
.LABEL $label$5
	$2 = ($1 + [8])
	
.LABEL $label$3
	*($1 + [8]) = ((int_64)*($2) + (int_64)1)
	CALL $122($4, ($1 + [8]), *($0))
	$3 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $3
}

int_32 .FUNC $225 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$7 = uint_32($7 >> [1])
	$8 = ($1 + [1])
	$9 = ($8 + $7)
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($1 + [4])
	$8 = *($1 + [8])
	$9 = ($8 + $7)
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $210(*($8)) ){ goto $label$4 }
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$8 = $9
	$7 = [1]
	$10 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$7 = ($8 + [1])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $210(*($7)) == 0) ){ goto $label$10 }
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($8) = *($7)
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($1 + $7)
	$7 = ($9 + uint_32($10 >> $7))
	goto $label$1 
	
.LABEL $label$2
	$9 = *($1 + [8])
	$7 = ($9 + *($1 + [4]))
	
.LABEL $label$1
	CALL $195($1, ($8 - $9), ($7 - $8))
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$13 }
	$8 = ($1 + [1])
	$10 = [0]
	$7 = [0]
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($1 + [8])
	$10 = [0]
	$7 = [0]
	$9 = *($1 + [4])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = [0]
	
.LOOP $label$14:
	$7 = ($7 + ((int_32)*($8) == (int_32)[45]))
	$8 = ($8 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$14 }
	$7 = ((int_32)$7 == (int_32)[3])
	
.LABEL $label$11
	CALL eosio_assert($7, [9511])
	*($6 + [72]) = $10
	*($6 + [64]) = (int_64)0
	*($6 + [76]) = [45]
	*($6 + [16]) = $10
	*($6 + [63]) = [1]
	$8 = CALL $2($1, ($6 + [64]), ($6 + [76]), ($6 + [16]), ($6 + [63]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [9524])
	*($2) = CALL $198(($6 + [64]), $10, [10])
	*($6 + [76]) = ($8 + [1])
	*($6 + [16]) = [45]
	*($6 + [63]) = [1]
	$8 = CALL $2($1, ($6 + [64]), ($6 + [16]), ($6 + [76]), ($6 + [63]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [9538])
	*($3) = CALL $198(($6 + [64]), $10, [10])
	*($6 + [76]) = ($8 + [1])
	*($6 + [16]) = [45]
	*($6 + [63]) = [1]
	$8 = CALL $2($1, ($6 + [64]), ($6 + [16]), ($6 + [76]), ($6 + [63]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [9552])
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == (int_32)[64]), [8331])
	CALL $1(($6 + [64]), ($6 + [16]), [32])
	*(($4 + [24])) = *((($6 + [16]) + [24]))
	*(($4 + [16])) = *((($6 + [16]) + [16]))
	*(($4 + [8])) = *($6 + [24])
	*($4) = *($6 + [16])
	$8 = ($8 + [1])
	*($6 + [76]) = $8
	CALL $187(($6 + [16]), $1, $8, [-1], $1)
	if ( (*($6 + [64]) & [1]) ){ goto $label$16 }
	*($6 + [64]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($6 + [64]) + [8]))) = [0]
	*($6 + [68]) = [0]
	
.LABEL $label$15
	CALL $189(($6 + [64]), [0])
	*(($8 = (($6 + [64]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [64]) = *($6 + [16])
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [9567])
	$7 = ( *($8) ? (($6 + [64]) | [1]) : (*($6 + [64]) & [1]) )
	*($6 + [8]) = $7
	*($6 + [12]) = CALL $227($7)
	*($6) = *($6 + [8])
	*($5) = *(CALL $4(($6 + [16]), $6))
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$17
	$global$0 = ($6 + [80])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $112(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $84($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	float_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert((((*($1) + [-2]) & [255]) <= [95]), [9692])
	$4 = ((float_64)((float_64)(float_64)98 / (float_64)((float_64)(CASTING float_64)(uint_32 *($1)) + (float_64)(float_64)-1)) * (float_64)(CASTING float_64)(int_64 *($2)))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$5 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	$6 = *($2 + [8])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9019])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $8
	$1 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$7 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $1 ){ goto $label$7 }
	$1 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	
.LABEL $label$3
	CALL eosio_assert($1, [9068])
	CALL $119($3, $0)
	$7 = *($3)
	$8 = *($3 + [8])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [9822])
	CALL eosio_assert(((int_64)((int_64)$7 / (int_64)100) >= (int_64)$5), [9753])
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = CALL $227([8803])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8921])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8802]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$4), [9596])
	$5 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$4 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9619])
	$4 = ((int_64)*($1) / (int_64)*($2))
	CALL eosio_assert(((uint_64)$4 > (uint_64)(int_64)999), [9636])
	CALL eosio_assert(((int_64)((int_64)$4 * (int_64)*($2)) == (int_64)*($1)), [9679])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[96])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[44739243]) ){ goto $label$2 }
	$6 = [44739242]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[96])
	if ( ((uint_32)$7 > (uint_32)[22369620]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[96]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$2 = ($2 - $3)
	$4 = CALL memcpy(($5 + ((int_32)$4 * (int_32)[96])), $1, [96])
	$1 = ($4 + ((int_32)((int_32)$2 / (int_32)[-96]) * (int_32)[96]))
	$6 = ($5 + ((int_32)$6 * (int_32)[96]))
	$5 = ($4 + [96])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([24])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [12]) = $0
	CALL $94(($3 + [32]), $5)
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7339899822381465600
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7339899822381465600
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $95(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$10 }
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $63 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8823])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $108($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8823])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [8823])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7339899822381465600, (int_64)7339899822381465600)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $60($0, $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [8823])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9088])
	CALL $92($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $93($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_32 .FUNC $227 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $228 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $211())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $229($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $230($1)
	
.LABEL $label$2
	*(CALL $211()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $230(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $233($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [12586])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [12631])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [12681])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [92])))
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [192])
	$global$0 = $3
	$4 = *($0 + [184])
	$5 = *($2)
	$6 = *($1 + [48 align=1])
	*($0 + [184]) = ((int_64)((int_64)((int_64)CALL current_time() * (int_64)(CASTING int_64)(int_32 CALL $fimport$14())) * (int_64)((int_64)$6 ^ (int_64)((int_64)$5 ^ (int_64)$4))) * (int_64)(CASTING int_64)(int_32 CALL $fimport$15()))
	*((($3 + [168]) + [8])) = *(($1 + [32]))
	*($3 + [168]) = *($1 + [24])
	$4 = (int_64)0
	$5 = *($1 + [41])
	CALL eosio_assert(((int_64)$5 != (int_64)0), [9881])
	$6 = *($3 + [168])
	CALL eosio_assert([1], [9896])
	*($3 + [168]) = ((int_64)$6 / (int_64)$5)
	$2 = CALL $227([8803])
	if ( ($2 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8921])
	goto $label$2 
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = (int_64)0
	
.LOOP $label$4:
	$7 = *(($2 + [8802]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$5
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$4 }
	
.LABEL $label$1
	$8 = ($1 + [41])
	$9 = ($1 + [24])
	*($3 + [152]) = (int_64)0
	*($3 + [160]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9019])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $5
	$7 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9068])
	$2 = [0]
	*($3 + [144]) = [0]
	*($3 + [136]) = (int_64)0
	if ( (*($8) == 0) ){ goto $label$11 }
	$11 = ($1 + [40])
	$7 = ($0 + [184])
	
.LOOP $label$12:
	$4 = ((uint_64)((int_64)*($7) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($7) = $4
	$10 = ((CASTING uint_32)(uint_64 ((uint_64)$4 % (uint_64)(int_64)100)) + [1])
	*($3 + [104]) = $10
	if ( ((uint_32)$10 >= (uint_32)*($11)) ){ goto $label$13 }
	CALL $154(($3 + [48]), $0, $11, ($3 + [168]))
	CALL eosio_assert(((int_64)*((($3 + [48]) + [8])) == (int_64)*((($3 + [152]) + [8]))), [10266])
	$4 = ((int_64)*($3 + [152]) + (int_64)*($3 + [48]))
	*($3 + [152]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10309])
	CALL eosio_assert(((int_64)*($3 + [152]) < (int_64)4611686018427387904), [10328])
	
.LABEL $label$13
	$10 = *($3 + [140])
	if ( ((int_32)$10 == (int_32)*((($3 + [136]) + [8]))) ){ goto $label$15 }
	*($10) = *($3 + [104])
	*($3 + [140]) = (*($3 + [140]) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $81(($3 + [136]), ($3 + [104]))
	
.LABEL $label$14
	$2 = ($2 + [1])
	if ( (($2 & [255]) <= *($8)) ){ goto $label$12 }
	
.LABEL $label$11
	$10 = ($1 + [8])
	CALL $155($0, $10, $9, $8, $1)
	CALL $156($0, $1, ($3 + [136]), ($3 + [152]))
	if ( ((int_64)*($3 + [152]) <= (int_64)0) ){ goto $label$18 }
	*((($3 + [120]) + [8])) = [0]
	*($3 + [120]) = (int_64)0
	$2 = CALL $227([12438])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($3 + [120]) = ($2 << [1])
	$7 = (($3 + [120]) | [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$11 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($3 + [120]) = ($11 | [1])
	*($3 + [128]) = $7
	*($3 + [124]) = $2
	
.LABEL $label$20
	CALL memcpy($7, [12438], $2)
	
.LABEL $label$19
	*(($7 + $2)) = [0]
	CALL $205(($3 + [48]), *($1))
	$2 = *($3 + [48])
	$7 = ($2 & [1])
	CALL $194(($3 + [120]), ( *($3 + [56]) ? (($3 + [48]) | [1]) : $7 ), ( *($3 + [52]) ? uint_32($2 >> [1]) : $7 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$22
	$4 = *($0)
	*($3 + [104]) = [8535]
	*($3 + [108]) = CALL $227([8535])
	*($3 + [40]) = *($3 + [104])
	*($3 + [112]) = *(CALL $4(($3 + [48]), ($3 + [40])))
	*($3 + [104]) = $4
	*($3 + [184]) = [8381]
	*($3 + [188]) = CALL $227([8381])
	*($3 + [32]) = *($3 + [184])
	*($3 + [96]) = *(CALL $4(($3 + [48]), ($3 + [32])))
	*($3 + [184]) = [8400]
	*($3 + [188]) = CALL $227([8400])
	*($3 + [24]) = *($3 + [184])
	*($3 + [184]) = *(CALL $4(($3 + [48]), ($3 + [24])))
	*(($3 + [72])) = *(($3 + [160]))
	*($3 + [48]) = *($0)
	*($3 + [56]) = *($10)
	*($3 + [64]) = *($3 + [152])
	CALL $186(($3 + [80]), ($3 + [120]))
	CALL $123($0, ($3 + [104]), ($3 + [96]), ($3 + [184]), ($3 + [48]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$23
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($3 + [128]))
	
.LABEL $label$18
	if ( ((int_64)*($1 + [16]) == (int_64)*($0)) ){ goto $label$24 }
	*(($3 + [128])) = [0]
	*($3 + [120]) = (int_64)0
	$2 = CALL $227([12465])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$27 }
	*($3 + [120]) = ($2 << [1])
	$7 = (($3 + [120]) | [1])
	if ( $2 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$10 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($3 + [120]) = ($10 | [1])
	*($3 + [128]) = $7
	*($3 + [124]) = $2
	
.LABEL $label$26
	CALL memcpy($7, [12465], $2)
	
.LABEL $label$25
	*(($7 + $2)) = [0]
	CALL $205(($3 + [48]), *($1))
	$2 = *($3 + [48])
	$7 = ($2 & [1])
	CALL $194(($3 + [120]), ( *($3 + [56]) ? (($3 + [48]) | [1]) : $7 ), ( *($3 + [52]) ? uint_32($2 >> [1]) : $7 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$28
	$4 = *($0)
	*($3 + [104]) = [8535]
	*($3 + [108]) = CALL $227([8535])
	*($3 + [16]) = *($3 + [104])
	*($3 + [112]) = *(CALL $4(($3 + [48]), ($3 + [16])))
	*($3 + [104]) = $4
	*($3 + [184]) = [8381]
	*($3 + [188]) = CALL $227([8381])
	*($3 + [8]) = *($3 + [184])
	*($3 + [96]) = *(CALL $4(($3 + [48]), ($3 + [8])))
	*($3 + [184]) = [8400]
	*($3 + [188]) = CALL $227([8400])
	*($3) = *($3 + [184])
	*($3 + [184]) = *(CALL $4(($3 + [48]), $3))
	$4 = *(($1 + [32]))
	$5 = *($1 + [24])
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*(($3 + [72])) = $4
	*($3 + [64]) = ((int_64)$5 / (int_64)1000)
	*($3 + [48]) = *($0)
	*($3 + [56]) = *(($1 + [16]))
	CALL $186((($3 + [48]) + [32]), ($3 + [120]))
	CALL $123($0, ($3 + [104]), ($3 + [96]), ($3 + [184]), ($3 + [48]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$29
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($3 + [128]))
	
.LABEL $label$24
	$2 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$30 }
	*($3 + [140]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$30
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$17
	CALL $185(($3 + [120]))
	
.LABEL $label$16
	CALL $185(($3 + [120]))
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [41])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [80])
	CALL $132(($3 + [32]), ($3 + [24]))
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $133(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $113($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $33($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $114($2, $1)
	CALL $116(CALL $115(CALL $115($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $23($2, $4)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9414])
	*(($3 = CALL memcpy($1, $3, [80])) + [72]) = ((int_64)*($3 + [72]) + (int_64)1)
	CALL $42($2, $3, *($0))
	$5 = *($3 + [72])
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $174(($6 + [28]), $4)
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $209($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $209($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $150(($6 + [28]), $4)
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $149(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $84($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

int_64 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [152])
	$3 = *($1)
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$3 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$2), [8823])
	if ( ($6 == 0) ){ goto $label$1 }
	return *($6 + [8])
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($2), *(($0 + [160])), (int_64)-5001621369012617216, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $37($2, $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$2), [8823])
	return *($1 + [8])
	
.LABEL $label$5
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [24])
	$10 = (CASTING uint_64)(uint_32 $1)
	$3 = ($4 + [24])
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$9 = ($7 + [32])
	$1 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $33($1, $2)
	$9 = *($9)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [8]) = $2
	*($5 + [16]) = $9
	$9 = ($9 - $2)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [9279])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[7]), [9279])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($9 + [-16]) > (int_32)[7]), [9279])
	CALL memcpy(($2 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($2 + [24])
	CALL $136(($5 + [8]), $3)
	$12 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $227([10688])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$3
	CALL memcpy($7, [10688], $6)
	
.LABEL $label$2
	$8 = [0]
	*(($7 + $6)) = [0]
	$9 = *($3)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$8 }
	$7 = *([0] + [10640])
	
.LOOP $label$10:
	*((($5 + [16]) + ($6 = $8))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$9 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$7 }
	*($5) = ($8 << [1])
	$7 = ($5 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*($5) = [0]
	$6 = ($5 | [1])
	$8 = $6
	goto $label$5 
	
.LABEL $label$7
	$3 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $7
	*($5 + [4]) = $8
	
.LABEL $label$6
	$3 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$11:
	*(($7 + $6)) = *((($5 + [16]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$11 }
	$8 = ($7 + $8)
	$6 = ($5 | [1])
	
.LABEL $label$5
	*($8) = [0]
	$8 = *($5)
	$7 = ($8 & [1])
	CALL $194($0, ( *($5 + [8]) ? $6 : $7 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $7 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$12
	CALL $192($0, [10702])
	CALL $204(($5 + [16]), *($2))
	$6 = *($5 + [16])
	$8 = ($6 & [1])
	CALL $194($0, ( *($5 + [24]) ? (($5 + [16]) | [1]) : $8 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$13
	CALL $192($0, [10728])
	CALL $203(($5 + [16]), $4)
	$6 = *($5 + [16])
	$8 = ($6 & [1])
	CALL $194($0, ( *($5 + [24]) ? (($5 + [16]) | [1]) : $8 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $185($0)
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($4 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [9279])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [9279])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)5445034375704815888, *(*($2 + [8])), (int_64)5445034375704815888, $3, [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)5445034375704815888) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)5445034375704815889
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $141($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)5445034375704815888
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)5445034375704815888
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $128(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $144(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $84($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $134(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $84($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [8823])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5445034375704815888, (int_64)5445034375704815888)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $125($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [8823])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9088])
	CALL $139($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $140($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	if ( (int_64)(*($1) == 0) ){ goto $label$1 }
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = *($0)
	*($4 + [88]) = [8535]
	*($4 + [92]) = CALL $227([8535])
	*($4 + [24]) = *($4 + [88])
	*($4 + [96]) = *(CALL $4(($4 + [32]), ($4 + [24])))
	*($4 + [88]) = $5
	*($4 + [104]) = [8381]
	*($4 + [108]) = CALL $227([8381])
	*($4 + [16]) = *($4 + [104])
	*($4 + [80]) = *(CALL $4(($4 + [32]), ($4 + [16])))
	*($4 + [104]) = [8400]
	*($4 + [108]) = CALL $227([8400])
	*($4 + [8]) = *($4 + [104])
	*($4 + [104]) = *(CALL $4(($4 + [32]), ($4 + [8])))
	*(($4 + [56])) = *(($2 + [8]))
	*($4 + [32]) = *($0)
	*($4 + [40]) = *($1)
	*($4 + [48]) = *($2)
	CALL $186(($4 + [64]), $3)
	CALL $142($0, ($4 + [88]), ($4 + [80]), ($4 + [104]), ($4 + [32]))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($0 + [208]))), [9940])
	$5 = (int_64)
	*($0 + [200]) = $5(*($0 + [200]) - *($2)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)*($0 + [200]) < (int_64)4611686018427387904), [10010])
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([112])
	CALL $137($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $133(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL $227([8803])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8921])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8802]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*($2) = (int_64)0
	*($2 + [8]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9019])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9068])
	CALL $124($0, ($1 + [48]), *($1), $2)
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [80])
	$global$0 = $3
	if ( ((int_32)*($1) == (int_32)*($1 + [4])) ){ goto $label$2 }
	$4 = *($0)
	*($3 + [56]) = [8535]
	*($3 + [60]) = CALL $227([8535])
	*($3 + [16]) = *($3 + [56])
	*($3 + [64]) = *(CALL $4(($3 + [24]), ($3 + [16])))
	*($3 + [56]) = $4
	*($3 + [72]) = [10573]
	*($3 + [76]) = CALL $227([10573])
	*($3 + [8]) = *($3 + [72])
	*($3 + [48]) = *(CALL $4(($3 + [24]), ($3 + [8])))
	*($3 + [72]) = [10735]
	*($3 + [76]) = CALL $227([10735])
	*($3) = *($3 + [72])
	*($3 + [72]) = *(CALL $4(($3 + [24]), $3))
	*($3 + [32]) = [0]
	*($3 + [24]) = (int_64)0
	$5 = (*(($1 + [4])) - *($1))
	$6 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($3 + [32])) = ($5 + ((int_32)$6 * (int_32)[24]))
	*($3 + [24]) = $5
	*($3 + [28]) = $5
	$6 = *($1)
	$1 = (*(($1 + [4])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $6, $1)
	*($3 + [28]) = (*($3 + [28]) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$3
	CALL $186(($3 + [36]), $2)
	CALL $148($0, ($3 + [56]), ($3 + [48]), ($3 + [72]), ($3 + [24]))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$4
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$2 }
	*($3 + [28]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $209(($3 + [24]))
}

int_64 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_64 $2
	float_64 $3
	int_64 $4
	$2 = (int_64)0
	$1 = (*($1) + [-1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$30
	$2 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = ((uint_64)((int_64)$2 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$1 = [0]
	$2 = ((uint_64)$2 % (uint_64)(int_64)100000)
	if ( (uint_64)($2 <= (int_64)80000) ){ goto $label$31 }
	$1 = [1]
	if ( ((uint_64)$2 <= (uint_64)(int_64)98999) ){ goto $label$31 }
	$1 = [2]
	if ( (uint_64)($2 <= (int_64)99100) ){ goto $label$31 }
	$1 = [3]
	if ( (uint_64)($2 <= (int_64)99200) ){ goto $label$31 }
	$1 = [4]
	if ( (uint_64)($2 <= (int_64)99300) ){ goto $label$31 }
	$1 = [5]
	if ( (uint_64)($2 <= (int_64)99400) ){ goto $label$31 }
	$1 = [6]
	if ( (uint_64)($2 <= (int_64)99500) ){ goto $label$31 }
	$1 = [7]
	if ( (uint_64)($2 <= (int_64)99600) ){ goto $label$31 }
	$1 = [8]
	if ( (uint_64)($2 <= (int_64)99700) ){ goto $label$31 }
	$1 = [9]
	if ( (uint_64)($2 <= (int_64)99800) ){ goto $label$31 }
	$1 = ( [10] ? [11] : (uint_64)($2 <= (int_64)99900) )
	
.LABEL $label$31
	$1 = ((int_32)$1 * (int_32)[24])
	$3 = ((float_64)*(($1 + [11776])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$28 }
	$2 = (int_64)0
	goto $label$27 
	
.LABEL $label$29
	$2 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = ((uint_64)((int_64)$2 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$1 = [0]
	$2 = ((uint_64)$2 % (uint_64)(int_64)100000)
	if ( (uint_64)($2 <= (int_64)50000) ){ goto $label$32 }
	$1 = [1]
	if ( ((uint_64)$2 <= (uint_64)(int_64)89999) ){ goto $label$32 }
	$1 = [2]
	if ( (uint_64)($2 <= (int_64)95000) ){ goto $label$32 }
	$1 = [3]
	if ( (uint_64)($2 <= (int_64)96000) ){ goto $label$32 }
	$1 = [4]
	if ( (uint_64)($2 <= (int_64)97000) ){ goto $label$32 }
	$1 = [5]
	if ( (uint_64)($2 <= (int_64)97500) ){ goto $label$32 }
	$1 = [6]
	if ( (uint_64)($2 <= (int_64)98000) ){ goto $label$32 }
	$1 = [7]
	if ( (uint_64)($2 <= (int_64)98500) ){ goto $label$32 }
	$1 = [8]
	if ( (uint_64)($2 <= (int_64)99000) ){ goto $label$32 }
	$1 = ( [9] ? [10] : (uint_64)($2 <= (int_64)99500) )
	
.LABEL $label$32
	$1 = ((int_32)$1 * (int_32)[24])
	$3 = ((float_64)*(($1 + [12064])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$26 }
	$2 = (int_64)0
	goto $label$25 
	
.LABEL $label$28
	$2 = (Rounds 0)($3)
	
.LABEL $label$27
	$3 = ((float_64)*(($1 + [11784])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$24 }
	$4 = (int_64)0
	goto $label$23 
	
.LABEL $label$26
	$2 = (Rounds 0)($3)
	
.LABEL $label$25
	$3 = ((float_64)*(($1 + [12072])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$22 }
	$4 = (int_64)0
	goto $label$21 
	
.LABEL $label$24
	$4 = (Rounds 0)($3)
	
.LABEL $label$23
	$0 = ($0 + [192])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$2), [10821])
	goto $label$2 
	
.LABEL $label$22
	$4 = (Rounds 0)($3)
	
.LABEL $label$21
	$0 = ($0 + [192])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$2), [10821])
	goto $label$2 
	
.LABEL $label$20
	$2 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = ((uint_64)((int_64)$2 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$1 = [0]
	$2 = ((uint_64)$2 % (uint_64)(int_64)100000)
	if ( (uint_64)($2 <= (int_64)75000) ){ goto $label$33 }
	$1 = [1]
	if ( ((uint_64)$2 <= (uint_64)(int_64)97999) ){ goto $label$33 }
	$1 = [2]
	if ( (uint_64)($2 <= (int_64)99000) ){ goto $label$33 }
	$1 = [3]
	if ( (uint_64)($2 <= (int_64)99400) ){ goto $label$33 }
	$1 = [4]
	if ( (uint_64)($2 <= (int_64)99500) ){ goto $label$33 }
	$1 = [5]
	if ( (uint_64)($2 <= (int_64)99600) ){ goto $label$33 }
	$1 = [6]
	if ( (uint_64)($2 <= (int_64)99700) ){ goto $label$33 }
	$1 = [7]
	if ( (uint_64)($2 <= (int_64)99800) ){ goto $label$33 }
	$1 = ( [8] ? [9] : (uint_64)($2 <= (int_64)99900) )
	
.LABEL $label$33
	$1 = ((int_32)$1 * (int_32)[24])
	$3 = ((float_64)*(($1 + [11264])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$16 }
	$2 = (int_64)0
	goto $label$15 
	
.LABEL $label$19
	$2 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = ((uint_64)((int_64)$2 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$1 = [0]
	$2 = ((uint_64)$2 % (uint_64)(int_64)100000)
	if ( (uint_64)($2 <= (int_64)92000) ){ goto $label$34 }
	$1 = [1]
	if ( ((uint_64)$2 <= (uint_64)(int_64)96999) ){ goto $label$34 }
	$1 = [2]
	if ( (uint_64)($2 <= (int_64)99000) ){ goto $label$34 }
	$1 = [3]
	if ( (uint_64)($2 <= (int_64)99500) ){ goto $label$34 }
	$1 = [4]
	if ( (uint_64)($2 <= (int_64)99980) ){ goto $label$34 }
	$1 = ( [5] ? [6] : (uint_64)($2 <= (int_64)99990) )
	
.LABEL $label$34
	$1 = ((int_32)$1 * (int_32)[24])
	$3 = ((float_64)*(($1 + [10848])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$14 }
	$2 = (int_64)0
	goto $label$13 
	
.LABEL $label$18
	$2 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = ((uint_64)((int_64)$2 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$1 = [0]
	$2 = ((uint_64)$2 % (uint_64)(int_64)100000)
	if ( (uint_64)($2 <= (int_64)92000) ){ goto $label$35 }
	$1 = [1]
	if ( ((uint_64)$2 <= (uint_64)(int_64)94999) ){ goto $label$35 }
	$1 = [2]
	if ( (uint_64)($2 <= (int_64)96000) ){ goto $label$35 }
	$1 = [3]
	if ( (uint_64)($2 <= (int_64)97000) ){ goto $label$35 }
	$1 = [4]
	if ( (uint_64)($2 <= (int_64)98000) ){ goto $label$35 }
	$1 = [5]
	if ( (uint_64)($2 <= (int_64)98890) ){ goto $label$35 }
	$1 = [6]
	if ( (uint_64)($2 <= (int_64)99390) ){ goto $label$35 }
	$1 = [7]
	if ( (uint_64)($2 <= (int_64)99890) ){ goto $label$35 }
	$1 = ( [8] ? [9] : (uint_64)($2 <= (int_64)99990) )
	
.LABEL $label$35
	$1 = ((int_32)$1 * (int_32)[24])
	$3 = ((float_64)*(($1 + [11024])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$12 }
	$2 = (int_64)0
	goto $label$11 
	
.LABEL $label$17
	$2 = ((uint_64)((int_64)*($0 + [192]) * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	*($0 + [192]) = ((uint_64)((int_64)$2 * (int_64)2862933555777941757) % (uint_64)(int_64)9223372036854775807)
	$1 = [0]
	$2 = ((uint_64)$2 % (uint_64)(int_64)100000)
	if ( (uint_64)($2 <= (int_64)65000) ){ goto $label$36 }
	$1 = [1]
	if ( ((uint_64)$2 <= (uint_64)(int_64)89999) ){ goto $label$36 }
	$1 = [2]
	if ( (uint_64)($2 <= (int_64)92000) ){ goto $label$36 }
	$1 = [3]
	if ( (uint_64)($2 <= (int_64)94000) ){ goto $label$36 }
	$1 = [4]
	if ( (uint_64)($2 <= (int_64)96000) ){ goto $label$36 }
	$1 = [5]
	if ( (uint_64)($2 <= (int_64)97000) ){ goto $label$36 }
	$1 = [6]
	if ( (uint_64)($2 <= (int_64)98000) ){ goto $label$36 }
	$1 = [7]
	if ( (uint_64)($2 <= (int_64)98500) ){ goto $label$36 }
	$1 = [8]
	if ( (uint_64)($2 <= (int_64)99000) ){ goto $label$36 }
	$1 = ( [9] ? [10] : (uint_64)($2 <= (int_64)99500) )
	
.LABEL $label$36
	$1 = ((int_32)$1 * (int_32)[24])
	$3 = ((float_64)*(($1 + [11504])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$10 }
	$2 = (int_64)0
	goto $label$9 
	
.LABEL $label$16
	$2 = (Rounds 0)($3)
	
.LABEL $label$15
	$3 = ((float_64)*(($1 + [11272])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$38 }
	$4 = (int_64)0
	goto $label$37 
	
.LABEL $label$38
	$4 = (Rounds 0)($3)
	
.LABEL $label$37
	$0 = ($0 + [192])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$2), [10821])
	goto $label$2 
	
.LABEL $label$14
	$2 = (Rounds 0)($3)
	
.LABEL $label$13
	$3 = ((float_64)*(($1 + [10856])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$4 = (int_64)0
	goto $label$7 
	
.LABEL $label$12
	$2 = (Rounds 0)($3)
	
.LABEL $label$11
	$3 = ((float_64)*(($1 + [11032])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$4 = (int_64)0
	goto $label$5 
	
.LABEL $label$10
	$2 = (Rounds 0)($3)
	
.LABEL $label$9
	$3 = ((float_64)*(($1 + [11512])) * (float_64)(float_64)100)
	if ( (((float_64)$3 < (float_64)(float_64)18446744073709551615) & ((float_64)$3 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$4 = (int_64)0
	goto $label$3 
	
.LABEL $label$8
	$4 = (Rounds 0)($3)
	
.LABEL $label$7
	$0 = ($0 + [192])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$2), [10821])
	goto $label$2 
	
.LABEL $label$6
	$4 = (Rounds 0)($3)
	
.LABEL $label$5
	$0 = ($0 + [192])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$2), [10821])
	goto $label$2 
	
.LABEL $label$4
	$4 = (Rounds 0)($3)
	
.LABEL $label$3
	$0 = ($0 + [192])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$2), [10821])
	
.LABEL $label$2
	$2 = ((int_64)((uint_64)*($0) % (uint_64)((int_64))((int_64)1 - $2) + (int_64)$4)) + (int_64)$2)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$2 != (int_64)0), [12328])
	$1
	return $2
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $227([10597])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$3
	CALL memcpy($7, [10597], $6)
	
.LABEL $label$2
	$8 = [0]
	*(($7 + $6)) = [0]
	$9 = *($3)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$8 }
	$7 = *([0] + [10640])
	
.LOOP $label$10:
	*((($5 + [16]) + ($6 = $8))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$9 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$7 }
	*($5) = ($8 << [1])
	$7 = ($5 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*($5) = [0]
	$6 = ($5 | [1])
	$8 = $6
	goto $label$5 
	
.LABEL $label$7
	$3 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $7
	*($5 + [4]) = $8
	
.LABEL $label$6
	$3 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$11:
	*(($7 + $6)) = *((($5 + [16]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$11 }
	$8 = ($7 + $8)
	$6 = ($5 | [1])
	
.LABEL $label$5
	*($8) = [0]
	$8 = *($5)
	$7 = ($8 & [1])
	CALL $194($0, ( *($5 + [8]) ? $6 : $7 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $7 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$12
	CALL $192($0, [10616])
	CALL $204(($5 + [16]), *($2))
	$6 = *($5 + [16])
	$8 = ($6 & [1])
	CALL $194($0, ( *($5 + [24]) ? (($5 + [16]) | [1]) : $8 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$13
	CALL $192($0, [10627])
	CALL $202(($5 + [16]), *($4))
	$6 = *($5 + [16])
	$8 = ($6 & [1])
	CALL $194($0, ( *($5 + [24]) ? (($5 + [16]) | [1]) : $8 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $185($0)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	*(($5 + [128])) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [104]) = [0]
	*($5 + [96]) = (int_64)0
	$6 = CALL $145($0, $1)
	*($5 + [88]) = $6
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$8 }
	CALL $80(($5 + [96]), ($5 + [88]))
	*($5 + [112]) = (int_64)100
	$6 = *($5 + [88])
	$7 = ($0 + [152])
	$9 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$9:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$6) ){ goto $label$7 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	*($3 + [4]) = *($3)
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$7), [8823])
	if ( ($11 == 0) ){ goto $label$4 }
	$6 = *($11 + [8])
	*($5 + [40]) = $6
	if ( ((int_64)($6 == 0) == 0) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$10 = CALL db_find_i64(*($7), *(($0 + [160])), (int_64)-5001621369012617216, $6)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $37($7, $10)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$7), [8823])
	$6 = *($10 + [8])
	*($5 + [40]) = $6
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	
.LABEL $label$5
	$10 = *($5 + [100])
	if ( ((int_32)$10 == (int_32)*((($5 + [96]) + [8]))) ){ goto $label$3 }
	*($10) = $6
	*($5 + [100]) = ($10 + [8])
	goto $label$2 
	
.LABEL $label$4
	*($5 + [40]) = (int_64)0
	goto $label$1 
	
.LABEL $label$3
	CALL $80(($5 + [96]), ($5 + [40]))
	
.LABEL $label$2
	*($5 + [120]) = (int_64)30
	*($5 + [112]) = (int_64)70
	$6 = *($5 + [40])
	$9 = *(($0 + [180]))
	$11 = *(($0 + [176]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$16:
	$10 = ($9 + [-24])
	$8 = *($10)
	if ( ((int_64)*($8) == (int_64)$6) ){ goto $label$15 }
	$9 = $10
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$7), [8823])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$10 = CALL db_find_i64(*(($0 + [152])), *(($0 + [160])), (int_64)-5001621369012617216, $6)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $37($7, $10)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$7), [8823])
	
.LABEL $label$13
	$6 = *($8 + [8])
	*($5 + [64]) = $6
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	$10 = *($5 + [100])
	if ( ((int_32)$10 == (int_32)*((($5 + [96]) + [8]))) ){ goto $label$11 }
	*($10) = $6
	*($5 + [100]) = ($10 + [8])
	goto $label$10 
	
.LABEL $label$12
	*($5 + [64]) = (int_64)0
	goto $label$1 
	
.LABEL $label$11
	CALL $80(($5 + [96]), ($5 + [64]))
	
.LABEL $label$10
	*($5 + [112]) = (int_64)20
	*($5 + [120]) = (int_64)30
	
.LABEL $label$1
	*($3 + [4]) = *($3)
	$10 = *($5 + [96])
	$8 = *($5 + [100])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$17 }
	$7 = (($5 + [40]) + [8])
	if ( ($4 == 0) ){ goto $label$18 }
	$9 = [0]
	$4 = ($3 + [4])
	$11 = [0]
	
.LOOP $label$19:
	$6 = *(($10 + $9))
	*($5 + [80]) = $6
	if ( (int_64)($6 == 0) ){ goto $label$20 }
	$6 = *((($5 + [112]) + $9))
	if ( (int_64)($6 == 0) ){ goto $label$20 }
	$12 = *($2)
	CALL __multi3(($5 + [8]), $12, (int_64)$12 >> (int_64)63), $6, (int_64)$6 >> (int_64)63))
	$13 = *(($2 + [8]))
	$6 = *((($5 + [8]) + [8]))
	$12 = *($5 + [8])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [10241])
	*(($10 = (($5 + [64]) + [8]))) = $13
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($5 + [64]) = ((int_64)$12 / (int_64)100)
	*($7) = *($5 + [64])
	*(($7 + [8])) = *($10)
	*($5 + [40]) = *($5 + [80])
	$10 = *($4)
	if ( ((uint_32)$10 >= (uint_32)*(($3 + [8]))) ){ goto $label$22 }
	*($10) = *($5 + [40])
	*(($10 + [16])) = *((($5 + [40]) + [16]))
	*(($10 + [8])) = *($7)
	*($4) = (*($4) + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $146($3, ($5 + [40]))
	
.LABEL $label$21
	CALL $147(($5 + [40]), $0, ($5 + [64]), $1, ($11 + [1]))
	CALL $73($0, ($5 + [80]), ($5 + [64]), ($5 + [40]))
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$23
	$8 = *($5 + [100])
	
.LABEL $label$20
	$9 = ($9 + [8])
	$10 = *($5 + [96])
	$11 = ($11 + [1])
	if ( ($11 <= int_32(($8 - $10) >> [3])) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = [0]
	$0 = ($3 + [4])
	$11 = [0]
	
.LOOP $label$24:
	$6 = *(($10 + $9))
	*($5 + [80]) = $6
	if ( (int_64)($6 == 0) ){ goto $label$25 }
	$6 = *((($5 + [112]) + $9))
	if ( (int_64)($6 == 0) ){ goto $label$25 }
	$12 = *($2)
	CALL __multi3(($5 + [24]), $12, (int_64)$12 >> (int_64)63), $6, (int_64)$6 >> (int_64)63))
	$13 = *(($2 + [8]))
	$6 = *((($5 + [24]) + [8]))
	$12 = *($5 + [24])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [10241])
	*(($10 = (($5 + [64]) + [8]))) = $13
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($5 + [64]) = ((int_64)$12 / (int_64)100)
	*($7) = *($5 + [64])
	*(($7 + [8])) = *($10)
	*($5 + [40]) = *($5 + [80])
	$10 = *($0)
	if ( ((uint_32)$10 >= (uint_32)*(($3 + [8]))) ){ goto $label$27 }
	*($10) = *($5 + [40])
	*(($10 + [16])) = *((($5 + [40]) + [16]))
	*(($10 + [8])) = *($7)
	*($0) = (*($0) + [24])
	goto $label$26 
	
.LABEL $label$27
	CALL $146($3, ($5 + [40]))
	
.LABEL $label$26
	$8 = *($5 + [100])
	
.LABEL $label$25
	$9 = ($9 + [8])
	$10 = *($5 + [96])
	$11 = ($11 + [1])
	if ( ($11 <= int_32(($8 - $10) >> [3])) ){ goto $label$24 }
	
.LABEL $label$17
	if ( ($10 == 0) ){ goto $label$28 }
	*($5 + [100]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$28
	$global$0 = ($5 + [144])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $227([12343])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [12343], $5)
	
.LABEL $label$2
	*(($6 + $5)) = [0]
	CALL $204($4, *($2))
	$6 = *($4)
	$2 = ($6 & [1])
	$5 = ($4 | [1])
	CALL $194($0, ( *($4 + [8]) ? $5 : $2 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $2 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$5
	CALL $192($0, [12357])
	CALL $203($4, $3)
	$6 = *($4)
	$2 = ($6 & [1])
	CALL $194($0, ( *($4 + [8]) ? $5 : $2 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $2 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$6
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $185($0)
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = ($0 + [72])
	$5 = *(($0 + [100]))
	if ( ((int_32)$5 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [8823])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $23($4, $6)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9414])
	$7 = *($5)
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$4 }
	*(($3 + [64])) = [0]
	*($3 + [56]) = (int_64)0
	$5 = CALL $227([12368])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$7 }
	*($3 + [56]) = ($5 << [1])
	$4 = (($3 + [56]) | [1])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($3 + [56]) = ($6 | [1])
	*($3 + [64]) = $4
	*($3 + [60]) = $5
	
.LABEL $label$6
	CALL memcpy($4, [12368], $5)
	
.LABEL $label$5
	*(($4 + $5)) = [0]
	*($3 + [72]) = [9439]
	*($3 + [76]) = CALL $227([9439])
	*($3 + [24]) = *($3 + [72])
	*($3 + [32]) = *(CALL $4(($3 + [32]), ($3 + [24])))
	CALL $73($0, ($3 + [32]), $2, ($3 + [56]))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($3 + [64]))
	
.LABEL $label$4
	$8 = *($0)
	*($3 + [32]) = [8535]
	*($3 + [36]) = CALL $227([8535])
	*($3 + [16]) = *($3 + [32])
	*($3 + [64]) = *(CALL $4(($3 + [56]), ($3 + [16])))
	*($3 + [56]) = $8
	*($3 + [72]) = [9439]
	*($3 + [76]) = CALL $227([9439])
	*($3 + [8]) = *($3 + [72])
	*($3 + [48]) = *(CALL $4(($3 + [32]), ($3 + [8])))
	*($3 + [72]) = [12379]
	*($3 + [76]) = CALL $227([12379])
	*($3) = *($3 + [72])
	*($3 + [72]) = *(CALL $4(($3 + [32]), $3))
	$8 = CALL current_time()
	*($3 + [32]) = $7
	*($3 + [40]) = *($1)
	*($3 + [44]) = ((uint_64)$8 / (uint_64)(int_64)1000000)
	CALL $152($0, ($3 + [56]), ($3 + [48]), ($3 + [72]), ($3 + [32]))
	$global$0 = ($3 + [80])
	return (unreachable)
	
.LABEL $label$3
	CALL $185(($3 + [56]))
}

int_64 .FUNC $223 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $220($3, (int_64)0)
	$4 = CALL $222($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $99($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$5 = [0]
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[96]))
	$10 = $9
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)($8 + [-96]) / (uint_32)[96]) * (int_32)[76]) + $5) + [76])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$11 = CALL $230($5)
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [4])) - *($1)) / (int_32)[96]))
	goto $label$4 
	
.LABEL $label$5
	$11 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$4
	*($3 + [4]) = $11
	*($3) = $11
	$8 = ($11 + $5)
	*($3 + [8]) = $8
	$2 = $11
	
.LOOP $label$6:
	$6 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$7 = ((int_64)$9) != (int_64)0
	*($3 + [24]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($8 - $2) > (int_32)[0]), [9279])
	CALL memcpy($2, ($3 + [24]), [1])
	$2 = ($2 + [1])
	*($3 + [4]) = $2
	if ( $7 ){ goto $label$6 }
	$6 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$7 }
	$7 = ($3 + [36])
	$8 = ($3 + [44])
	
.LOOP $label$8:
	*($3 + [16]) = $3
	*($3 + [24]) = $2
	*((($3 + [24]) + [8])) = ($2 + [16])
	*($7) = ($2 + [24])
	*((($3 + [24]) + [16])) = ($2 + [48])
	*($8) = ($2 + [80])
	*($3 + [28]) = ($2 + [8])
	CALL $100(($3 + [24]), ($3 + [16]))
	$2 = ($2 + [96])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)7339899822381465600, *(*($0 + [8])), (int_64)7339899822381465600, $11, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)7339899822381465600) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $233($11)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)7339899822381465600) ){ goto $label$9 }
	
.LABEL $label$10
	*(($4 + [16])) = (int_64)7339899822381465601
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [48])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[96])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[96])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[44739243]) ){ goto $label$1 }
	$6 = [44739242]
	$2 = ((int_32)$5 / (int_32)[96])
	if ( ((uint_32)$2 > (uint_32)[22369620]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[96])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[96]) * (int_32)[96]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[96])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[96])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[96])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[96]) * (int_32)[96]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[96]))
	return (unreachable)
	
.LABEL $label$1
	CALL $209($0)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [8912])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$8 = *($1)
	$3 = *($1 + [4])
	$7 = ((int_32)($3 - $8) / (int_32)[96])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$4 }
	CALL $96($1, ($4 - $7))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($8 + ((int_32)$4 * (int_32)[96]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [20])
	$7 = ($2 + [28])
	
.LOOP $label$6:
	*($2) = $0
	*($2 + [8]) = $8
	*((($2 + [8]) + [8])) = ($8 + [16])
	*($4) = ($8 + [24])
	*((($2 + [8]) + [16])) = ($8 + [48])
	*($7) = ($8 + [80])
	*($2 + [12]) = ($8 + [8])
	CALL $97(($2 + [8]), $2)
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$11 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[96]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[96])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[44739243]) ){ goto $label$3 }
	$3 = [44739242]
	$2 = ((int_32)($2 - $4) / (int_32)[96])
	if ( ((uint_32)$2 > (uint_32)[22369620]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[96]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*(($3 = CALL memset($3, [0], [96])) + [24]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = (*($0) + [96])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $209($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[96]))
	$5 = ($2 + ((int_32)$5 * (int_32)[96]))
	$3 = $5
	
.LOOP $label$8:
	*((($3 = CALL memset($3, [0], [96])) + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = ($3 + [96])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[96]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 + ((int_32)((int_32)$3 / (int_32)[-96]) * (int_32)[96]))
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8916])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8916])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [9169])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [24]))) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9220])
	*($4 + [48]) = ($4 + [29])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [4])
	*($4 + [64]) = $1
	*($4 + [72]) = $6
	*($4 + [76]) = $5
	CALL $170(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*(($1 + [36])), $2, $4, [29])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7954134664302947328) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-7954134664302947327
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*(($6 = ($5 + [24]))) = *(($3 + [24]))
	*($4 + [48]) = ($4 + [29])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [4])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [8])
	*($4 + [76]) = $6
	CALL $170(($4 + [64]), ($4 + [56]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-7954134664302947328, $2, (int_64)-7954134664302947328, $4, [29])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-7954134664302947328) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-7954134664302947327
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4) = (int_64)-7954134664302947328
	*($4 + [40]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-7954134664302947328
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $107(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [9123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [9169])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $99($1, *($3), *($3 + [4]))
	
.LABEL $label$1
	CALL eosio_assert([1], [9220])
	$3 = [0]
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[96]))
	$10 = $9
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$3 = ((((int_32)((uint_32)($8 + [-96]) / (uint_32)[96]) * (int_32)[76]) + $3) + [76])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$11 = CALL $230($3)
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [4])) - *($1)) / (int_32)[96]))
	goto $label$4 
	
.LABEL $label$5
	$11 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$4
	*($5 + [4]) = $11
	*($5) = $11
	$8 = ($11 + $3)
	*($5 + [8]) = $8
	$4 = $11
	
.LOOP $label$6:
	$6 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$7 = ((int_64)$9) != (int_64)0
	*($5 + [24]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($8 - $4) > (int_32)[0]), [9279])
	CALL memcpy($4, ($5 + [24]), [1])
	$4 = ($4 + [1])
	*($5 + [4]) = $4
	if ( $7 ){ goto $label$6 }
	$6 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	$7 = ($5 + [36])
	$8 = ($5 + [44])
	
.LOOP $label$8:
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	*((($5 + [24]) + [8])) = ($4 + [16])
	*($7) = ($4 + [24])
	*((($5 + [24]) + [16])) = ($4 + [48])
	*($8) = ($4 + [80])
	*($5 + [28]) = ($4 + [8])
	CALL $100(($5 + [24]), ($5 + [16]))
	$4 = ($4 + [96])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	CALL db_update_i64(*(($1 + [16])), $2, $11, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)7339899822381465600) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $233($11)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7339899822381465600) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = (int_64)7339899822381465601
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $98(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7339899822381465600
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7339899822381465600
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $95(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9279])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9279])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9279])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [9169])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9220])
	CALL eosio_assert([1], [9279])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($5)
	CALL eosio_assert([1], [9279])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)5445034375704815888) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)5445034375704815889
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9279])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)5445034771337199616, $2, (int_64)5445034771337199616, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)5445034771337199616) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)5445034771337199617
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)5445034771337199616
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)5445034771337199616
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $131(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8916])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8916])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8916])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $33($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $135(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $136(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9279])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9279])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [88]) = $1
	*(($4 = ($0 + [32]))) = (int_64)0
	$5 = *($2 + [4])
	$1 = *($5)
	*($0) = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [16])
	$6 = *($2)
	*($4) = *(($1 + [32]))
	*($0 + [24]) = *($1 + [24])
	$1 = *($5)
	*($0 + [40]) = *($1 + [40])
	*($0 + [41]) = *($1 + [41])
	*(($0 + [64])) = *(($1 + [64]))
	*($0 + [48]) = *($1 + [48])
	*(($0 + [72])) = *(($1 + [72]))
	*(($0 + [56])) = *(($1 + [56]))
	*($0 + [80]) = *(*($5) + [80])
	*($3 + [96]) = ($3 + [82])
	*($3 + [92]) = $3
	*($3 + [88]) = $3
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($0 + [8])
	*($3 + [112]) = $0
	*($3 + [120]) = ($0 + [16])
	*($3 + [124]) = ($0 + [24])
	*($3 + [128]) = ($0 + [40])
	*($3 + [132]) = ($0 + [41])
	*($3 + [136]) = ($0 + [48])
	*($3 + [140]) = ($0 + [80])
	CALL $138(($3 + [112]), ($3 + [104]))
	$7 = *($0)
	*($0 + [92]) = CALL db_store_i64(*($6 + [8]), (int_64)5445031905265188864, *(*($2 + [8])), $7, $3, [82])
	if ( (uint_64)($7 <= *($6 + [16])) ){ goto $label$1 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $0
}

int_32 .FUNC $213 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [8] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $215($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $215($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $215($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $215($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [21168]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $215($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $215($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $215($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $208 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $209 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $190(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $217(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8492], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $190(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $190(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $190(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $217(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8519], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $190(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $190(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $200 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $206($1, $0, [8807])
	CALL $208()
	(unreachable)
}

int_64 .FUNC $201 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $227([8393])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8393], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $211())
	*(CALL $211()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $223($4, ($3 + [12]), $2)
	$0 = CALL $211()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $199($3)
	
.LABEL $label$1
	CALL $200($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $206 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $227($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $188($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $207 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $204 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $190(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $217(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8554], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $190(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $190(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $205 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $190(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $217(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8574], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $190(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $190(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $228(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [12752])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $228(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [9169])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9220])
	CALL eosio_assert([1], [9279])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)5445034771337199616) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)5445034771337199617
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [544])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $230($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [448]) + [24]))) = (int_64)0
	*(($8 = (($4 + [448]) + [16]))) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[31]), [8916])
	CALL memcpy(($4 + [448]), $2, [32])
	$9 = ($2 + $7)
	*(($4 + [16])) = $9
	*($4 + [28]) = ($2 + [32])
	*($4 + [24]) = $2
	*($4 + [32]) = $9
	*($4 + [8]) = *($4 + [24])
	$9 = CALL $18(($4 + [40]), $0, $1, ($4 + [8]))
	*(($10 = (($4 + [480]) + [24]))) = *($3)
	*(($3 = (($4 + [480]) + [16]))) = *($8)
	*($4 + [488]) = *($4 + [456])
	*($4 + [480]) = *($4 + [448])
	*((($4 + [512]) + [24])) = *($10)
	*((($4 + [512]) + [16])) = *($3)
	*($4 + [520]) = *($4 + [488])
	*($4 + [512]) = *($4 + [480])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [512])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $233($2)
	
.LABEL $label$6
	CALL $19($9)
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($1))
	CALL eosio_assert(CALL $fimport$10(*($2)), [8409])
	CALL eosio_assert(((int_64)*($2) != (int_64)*($0)), [8433])
	CALL eosio_assert(((int_64)*($2) != (int_64)*($1)), [8467])
	$4 = ($0 + [152])
	*($3) = $4
	CALL $36(($3 + [8]), $3, $1)
	$5 = *($3 + [12])
	if ( ($5 == 0) ){ goto $label$2 }
	$5 = ((int_64)*($1) != (int_64)*($5 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [8495])
	$6 = *($1)
	$8 = *(($0 + [180]))
	$7 = *(($0 + [176]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($8 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$5 }
	$8 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$4), [8823])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$5 = CALL db_find_i64(*(($0 + [152])), *(($0 + [160])), (int_64)-5001621369012617216, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $37($4, $5)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$4), [8823])
	
.LABEL $label$3
	CALL eosio_assert(($9 == 0), [9355])
	$6 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = $1
	CALL $38($3, $4, $6, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $134(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $68($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $85(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $86(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8823])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5445034771337199616, (int_64)5445034771337199616)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $121($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8823])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9088])
	CALL $129($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $130($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8916])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)5445034771337199616
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)5445034771337199616
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $131(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [92]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10137])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5445031905265188864)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10083])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10083])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $87(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8346])
	$2 = CALL $196($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $187($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8364])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $189($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $127($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)5445034375704815888
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)5445034375704815888
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $128(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8916])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8916])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)5445034375704815888
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)5445034375704815888
	*($7 + [16]) = $1
	*($3 + [16]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $128(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [8823])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5445034375704815888, (int_64)5445034375704815888)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $125($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [8823])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $126($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($1 + [40]) = [8522]
	*($1 + [44]) = CALL $227([8522])
	*($1) = *($1 + [40])
	CALL require_auth(*(CALL $4(($1 + [8]), $1)))
	$2 = ($0 + [112])
	$3 = *(($0 + [140]))
	if ( ((int_32)$3 == (int_32)*(($0 + [136]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$2), [8823])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)-7954134664302947328, (int_64)-7954134664302947328)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $55($2, $4)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$2), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9414])
	*((($1 + [8]) + [24])) = *(($3 + [24]))
	*((($1 + [8]) + [16])) = *(($3 + [16]))
	*((($1 + [8]) + [8])) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	*($1 + [8]) = [0]
	CALL $56($2, ($1 + [8]), *($0))
	$global$0 = ($1 + [48])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $230($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $18(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $233($2)
	
.LABEL $label$6
	CALL $19($8)
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-5001621369012617216, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [152])
	$4 = CALL $37($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [12552])
	CALL eosio_assert([1], [12522])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [20]), $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $37($3, $5)
	
.LABEL $label$3
	CALL $54($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [112])
	$2 = *(($0 + [140]))
	if ( ((int_32)$2 == (int_32)*(($0 + [136]))) ){ goto $label$5 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [8823])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$3 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-7954134664302947328, (int_64)-7954134664302947328)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $55($4, $3)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [8823])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	*(($3 = ($1 + [16]))) = *(($2 + [16]))
	*(($5 = ($1 + [8]))) = *(($2 + [8]))
	*($1) = *($2)
	*($1) = [1]
	$6 = CALL current_time()
	*($5) = *($0 + [200])
	*($3) = *(($0 + [208]))
	*($1 + [24]) = (int_64)0
	*($1 + [4]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	CALL $56($4, $1, *($0))
	$global$0 = ($1 + [32])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $172(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $230($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8916])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8916])
	CALL memcpy((($4 + [448]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [16])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $18(($4 + [40]), $0, $1, ($4 + [8]))
	$0 = *($4 + [448])
	*($4 + [464]) = *($4 + [456])
	*($4 + [472]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [472])), (int_32 ($4 + [464])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $233($2)
	
.LABEL $label$6
	CALL $19($8)
	$global$0 = ($4 + [480])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [24]) = [8522]
	*($3 + [28]) = CALL $227([8522])
	*($3 + [16]) = *($3 + [24])
	CALL require_auth(*(CALL $4(($3 + [64]), ($3 + [16]))))
	CALL $39($0)
	CALL $25($0, $1)
	CALL $40($0)
	$4 = ($0 + [72])
	$5 = *(($0 + [100]))
	if ( ((int_32)$5 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [8823])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $23($4, $6)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9414])
	CALL memcpy(($3 + [64]), $5, [80])
	$7 = CALL current_time()
	$6 = ($2 + [8])
	*(($5 = (($3 + [64]) + [24]))) = *($6)
	$9 = ($2 + [16])
	*(($8 = (($3 + [64]) + [32]))) = *($9)
	$11 = ($2 + [24])
	*(($10 = (($3 + [64]) + [40]))) = *($11)
	*($3 + [112]) = [1]
	*($3 + [80]) = *($2)
	*($3 + [72]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	CALL $41(($3 + [24]), $0)
	*(($3 + [128])) = *((($3 + [24]) + [8]))
	*($3 + [120]) = *($3 + [24])
	CALL $42($4, ($3 + [64]), *($0))
	CALL $43($0, $1)
	*($5) = *($6)
	*($8) = *($9)
	*($10) = *($11)
	*($3 + [64]) = *($1)
	*($3 + [80]) = *($2)
	*($3 + [112]) = CALL $44($0)
	$7 = *($0)
	*($3 + [144]) = [8535]
	*($3 + [148]) = CALL $227([8535])
	*($3 + [8]) = *($3 + [144])
	$12 = *(CALL $4(($3 + [24]), ($3 + [8])))
	$13 = *($0)
	*($3 + [144]) = [8542]
	*($3 + [148]) = CALL $227([8542])
	*($3) = *($3 + [144])
	*($3 + [32]) = *(CALL $4(($3 + [24]), $3))
	*($3 + [24]) = $13
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = $12
	*(($3 + [60])) = [0]
	$2 = ($0 + [16])
	*((($3 + [24]) + [24])) = $2
	*(($3 + [44])) = $2
	*($3 + [40]) = $0
	*($3 + [52 align=4]) = (int_64)0
	CALL $33(($3 + [52]), [44])
	$0 = *($3 + [52])
	$2 = (*((($3 + [24]) + [32])) - $0)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [9279])
	CALL memcpy($0, ($3 + [64]), [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[31]), [9279])
	CALL memcpy(($0 + [8]), (($3 + [64]) + [16]), [32])
	CALL eosio_assert(((int_32)($2 + [-40]) > (int_32)[3]), [9279])
	CALL memcpy(($0 + [40]), ($3 + [112]), [4])
	CALL $35(($3 + [144]), ($3 + [24]))
	$0 = *($3 + [144])
	CALL send_inline($0, (*($3 + [148]) - $0))
	$0 = *($3 + [144])
	if ( ($0 == 0) ){ goto $label$3 }
	*($3 + [148]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($3 + [52])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($3 + [56])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($3 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($3 + [160])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $230($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [448]) + [40]))) = (int_64)0
	*(($8 = (($4 + [448]) + [32]))) = (int_64)0
	*(($9 = (($4 + [448]) + [24]))) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8916])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [8916])
	CALL memcpy((($4 + [448]) + [16]), ($2 + [8]), [32])
	$10 = ($2 + $7)
	*((($4 + [8]) + [8])) = $10
	*($4 + [28]) = ($2 + [40])
	*($4 + [24]) = $2
	*($4 + [32]) = $10
	*($4 + [8]) = *($4 + [24])
	$10 = CALL $18(($4 + [40]), $0, $1, ($4 + [8]))
	*(($11 = (($4 + [496]) + [16]))) = *($8)
	*(($8 = (($4 + [496]) + [24]))) = *($3)
	*($4 + [496]) = *($4 + [464])
	*($4 + [504]) = *($9)
	$0 = *($4 + [448])
	*((($4 + [528]) + [24])) = *($8)
	*((($4 + [528]) + [16])) = *($11)
	*($4 + [568]) = $0
	*($4 + [536]) = *($4 + [504])
	*($4 + [528]) = *($4 + [496])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [568])), (int_32 ($4 + [528])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $233($2)
	
.LABEL $label$6
	CALL $19($10)
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [272])
	$global$0 = $3
	*($3 + [96]) = [8522]
	*($3 + [100]) = CALL $227([8522])
	*($3 + [48]) = *($3 + [96])
	CALL require_auth(*(CALL $4(($3 + [144]), ($3 + [48]))))
	CALL $45($0)
	CALL $25($0, $1)
	$4 = ($0 + [72])
	$5 = *(($0 + [100]))
	if ( ((int_32)$5 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [8823])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $23($4, $6)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9414])
	CALL memcpy(($3 + [144]), $5, [80])
	$5 = (($3 + [144]) + [16])
	CALL $46($0, $2, $5)
	CALL $47($0, $2)
	*($3 + [96]) = *($1)
	$7 = CALL current_time()
	*((($3 + [96]) + [20])) = (int_64)0
	*((($3 + [96]) + [28])) = (int_64)0
	*(($3 + [140])) = [0]
	*($3 + [108 align=4]) = (int_64)0
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [104]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	CALL $48($0, ($3 + [108]), (($3 + [96]) + [24]), (($3 + [96]) + [36]))
	CALL $49($0)
	$7 = *($0)
	*($3 + [56]) = [8535]
	*($3 + [60]) = CALL $227([8535])
	*($3 + [40]) = *($3 + [56])
	*($3 + [152]) = *(CALL $4(($3 + [144]), ($3 + [40])))
	*($3 + [144]) = $7
	*($3 + [256]) = [8613]
	*($3 + [260]) = CALL $227([8613])
	*($3 + [32]) = *($3 + [256])
	*($3 + [232]) = *(CALL $4(($3 + [56]), ($3 + [32])))
	*($3 + [256]) = [8626]
	*($3 + [260]) = CALL $227([8626])
	*($3 + [24]) = *($3 + [256])
	*($3 + [56]) = *(CALL $4(($3 + [56]), ($3 + [24])))
	CALL $50($0, ($3 + [144]), ($3 + [232]), ($3 + [56]), ($3 + [96]))
	CALL $51($0)
	*((($3 + [144]) + [24])) = *(($2 + [8]))
	*((($3 + [144]) + [32])) = *(($2 + [16]))
	*(($3 + [184])) = *(($2 + [24]))
	*($3 + [144]) = *($1)
	*($3 + [160]) = *($2)
	*($3 + [192]) = CALL $44($0)
	*($3 + [196]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = *($0)
	*($3 + [256]) = [8535]
	*($3 + [260]) = CALL $227([8535])
	*($3 + [16]) = *($3 + [256])
	$8 = *(CALL $4(($3 + [56]), ($3 + [16])))
	$9 = *($0)
	*($3 + [256]) = [8633]
	*($3 + [260]) = CALL $227([8633])
	*($3 + [8]) = *($3 + [256])
	*($3 + [64]) = *(CALL $4(($3 + [56]), ($3 + [8])))
	*($3 + [56]) = $9
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = $8
	*((($3 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($3 + [56]) + [24])) = $2
	*((($3 + [56]) + [20])) = $2
	*($3 + [72]) = $0
	*($3 + [84 align=4]) = (int_64)0
	CALL $33((($3 + [56]) + [28]), [48])
	$0 = *((($3 + [56]) + [32]))
	$2 = *($3 + [84])
	*($3 + [236]) = $2
	*($3 + [232]) = $2
	*($3 + [240]) = $0
	*($3 + [248]) = ($3 + [232])
	*($3 + [260]) = $5
	*($3 + [264]) = (($3 + [144]) + [48])
	*($3 + [268]) = ($3 + [196])
	*($3 + [256]) = ($3 + [144])
	CALL $52(($3 + [256]), ($3 + [248]))
	CALL $35(($3 + [256]), ($3 + [56]))
	$0 = *($3 + [256])
	CALL send_inline($0, (*($3 + [260]) - $0))
	$0 = *($3 + [256])
	if ( ($0 == 0) ){ goto $label$3 }
	*($3 + [260]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($3 + [84])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($3 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = *($3 + [72])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($3 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$0 = *($3 + [132])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($3 + [136])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$0 = *($3 + [120])
	if ( ($0 == 0) ){ goto $label$7 }
	*(($3 + [124])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$0 = *($3 + [108])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($3 + [112])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($3 + [272])
}

void .FUNC $185 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	$6 = ($3 + [8])
	*(($5 = (($4 + [32]) + [8]))) = *($6)
	*($4 + [32]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$5 = *($5)
	*(($7 = ($4 + [8]))) = $5
	$2 = *($4 + [32])
	*($0 + [16]) = $2
	*(($0 + [24])) = $5
	*($4) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [184])) = [0]
	*(($0 + [176])) = (int_64)0
	*(($0 + [188])) = [0]
	*($0 + [200]) = (int_64)0
	*(($5 = ($0 + [208]))) = (int_64)0
	*(($8 = (($4 + [16]) + [8]))) = *($6)
	*($4 + [16]) = *($3)
	*($0 + [216]) = $1
	*(($0 + [224])) = $1
	*(($0 + [232])) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = [0]
	*(($0 + [264])) = $1
	*(($0 + [272])) = $1
	*(($0 + [280])) = (int_64)-1
	*(($0 + [288])) = (int_64)0
	*(($0 + [296])) = [0]
	*(($0 + [304])) = $1
	*(($0 + [312])) = $1
	*(($0 + [320])) = (int_64)-1
	*($7) = *($8)
	*($4) = *($4 + [16])
	*(($0 + [336])) = [0]
	*(($0 + [328])) = (int_64)0
	*(($0 + [344])) = $1
	*(($0 + [352])) = $1
	*(($0 + [360])) = (int_64)-1
	*(($0 + [368])) = (int_64)0
	*(($0 + [376])) = [0]
	*(($0 + [392])) = *($7)
	*(($0 + [384])) = *($4)
	CALL $57($0)
	CALL $58($0)
	CALL $59($0)
	CALL $41($4, $0)
	*($5) = *($7)
	*($0 + [200]) = *($4)
	$global$0 = ($4 + [48])
	return $0
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $171(($0 + [216]))
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$2 = *(($0 + [56]))
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = ($0 + [60])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$21 }
	*($4 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $2
	
.LABEL $label$17
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $218 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9279])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $117($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9279])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9279])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9279])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9279])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9279])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $117(CALL $118($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $33(($6 + [28]), [12])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9279])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[3]), [9279])
	CALL memcpy(($2 + [8]), ($4 + [8]), [4])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($0)
	CALL eosio_assert([1], [9279])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9279])
	$4 = ($1 + [8])
	CALL memcpy(($2 | [8]), $4, [8])
	$5 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($3 + [8]), (int_64)-5001621369012617216, *(*($0 + [8])), $5, $2, [16])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [24]) = *($4)
	*($1 + [24]) = CALL db_idx64_store($5, (int_64)-5001621369012617216, $6, $7, ($2 + [24]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9279])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9279])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [8]) = [8381]
	*($2 + [12]) = CALL $227([8381])
	*($2) = *($2 + [8])
	$3 = *(CALL $4(($2 + [24]), $2))
	$4 = *($1)
	$5 = CALL $227([8803])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8921])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8802]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	*(($2 + [56])) = [0]
	*($2 + [32]) = $4
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$5 = CALL $63(($2 + [24]), $6, [9336])
	*(($8 = (($2 + [8]) + [8]))) = *(($5 + [8]))
	*($2 + [8]) = *($5)
	$9 = *($2 + [48])
	if ( ($9 == 0) ){ goto $label$7 }
	$10 = ($2 + [52])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($2 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $9
	
.LABEL $label$8
	*($10) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$7
	CALL $71(($2 + [24]), $1)
	$6 = *($2 + [24])
	$3 = *($2 + [32])
	*($0) = *($2 + [8])
	$4 = *($8)
	*(($0 + [8])) = $4
	CALL eosio_assert(((int_64)$3 == (int_64)$4), [9940])
	$6 = (int_64)
	*($0) = $6(*($0) - $6))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [10010])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9921])
	$global$0 = ($2 + [64])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*((($3 + [104]) + [8])) = *(($2 + [8]))
	*($3 + [104]) = *($2)
	$4 = *($1)
	*((($3 + [88]) + [8])) = [0]
	*($3 + [88]) = (int_64)0
	$2 = CALL $227([10545])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [88]) = ($2 << [1])
	$1 = (($3 + [88]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($5)
	*($3 + [88]) = ($5 | [1])
	*($3 + [96]) = $1
	*($3 + [92]) = $2
	
.LABEL $label$4
	CALL memcpy($1, [10545], $2)
	
.LABEL $label$3
	*(($1 + $2)) = [0]
	$6 = *($0)
	*($3 + [72]) = [8535]
	*($3 + [76]) = CALL $227([8535])
	*($3 + [16]) = *($3 + [72])
	*($3 + [80]) = *(CALL $4(($3 + [24]), ($3 + [16])))
	*($3 + [72]) = $6
	*($3 + [120]) = [10573]
	*($3 + [124]) = CALL $227([10573])
	*($3 + [8]) = *($3 + [120])
	*($3 + [64]) = *(CALL $4(($3 + [24]), ($3 + [8])))
	*($3 + [120]) = [10586]
	*($3 + [124]) = CALL $227([10586])
	*($3) = *($3 + [120])
	*($3 + [120]) = *(CALL $4(($3 + [24]), $3))
	*(($3 + [40])) = *(($3 + [112]))
	*($3 + [24]) = $4
	*($3 + [32]) = *($3 + [104])
	CALL $186(($3 + [48]), ($3 + [88]))
	CALL $143($0, ($3 + [72]), ($3 + [64]), ($3 + [120]), ($3 + [24]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$7 }
	if ( (*($3 + [88]) & [1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [56])))
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [96]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $185(($3 + [88]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = ((*($1) + [-1]) & [255])
	CALL eosio_assert(($4 <= [12]), [8585])
	CALL $26(($3 + [40]), ($0 + [32]))
	$5 = *($3 + [40])
	$4 = ($5 + ((int_32)$4 * (int_32)[96]))
	$6 = *($4 + [24])
	$7 = *($4 + [16])
	$8 = *(($4 + [32]))
	if ( ($5 == 0) ){ goto $label$1 }
	*($3 + [44]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$9 = *($2 + [8])
	$10 = *($2)
	if ( (int_64)($7 == 0) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$8 == (int_64)$9), [9940])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - $6)) > (int_64)-4611686018427387904), [9988])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [10010])
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$10 < (int_64)2305843009213693952), [10217])
	CALL eosio_assert(((int_64)$10 > (int_64)-2305843009213693952), [10241])
	*($3 + [48]) = $9
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($3 + [40]) = ((int_64)((int_64)$10 << (int_64)1) / (int_64)100)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$5 = CALL $227([10525])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$6 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($3 + [24]) = ($4 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$5
	CALL memcpy($2, [10525], $5)
	
.LABEL $label$4
	*(($2 + $5)) = [0]
	CALL $202(($3 + [8]), *($1))
	$5 = *($3 + [8])
	$2 = ($5 & [1])
	CALL $194(($3 + [24]), ( *($3 + [16]) ? (($3 + [8]) | [1]) : $2 ), ( *($3 + [12]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	*($3 + [56]) = [10204]
	*($3 + [60]) = CALL $227([10204])
	*($3) = *($3 + [56])
	*($3 + [8]) = *(CALL $4(($3 + [8]), $3))
	CALL $73($0, ($3 + [8]), ($3 + [40]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$8
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$3
	CALL $185(($3 + [24]))
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [24]) = (int_64)0
	$5 = CALL $186(($6 + [8]), $5)
	CALL $65($1, $5, ($6 + [71]), ($6 + [70]), ($6 + [32]), ($6 + [24]))
	$7 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$1
	$5 = *($6 + [70])
	if ( ((uint_32)$5 > (uint_32)[30]) ){ goto $label$3 }
	if ( (([1] << $5) & [1073742882]) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [9579])
	CALL $66($1, $4, ($6 + [70]))
	CALL $67($1, ($6 + [71]), $4)
	CALL eosio_assert(((int_64)*($6 + [24]) != (int_64)*($2)), [8467])
	CALL eosio_assert(CALL $fimport$10(*($6 + [24])), [9479])
	*($0) = CALL $68($1)
	*($0 + [8]) = *($2)
	*($0 + [16]) = *($6 + [24])
	*($0 + [24]) = *($4)
	$2 = ($4 + [8])
	*(($0 + [32])) = *($2)
	*($0 + [40]) = *($6 + [71])
	*($0 + [41]) = *($6 + [70])
	*($0 + [48]) = *($6 + [32])
	*(($0 + [56])) = *($6 + [40])
	*(($0 + [64])) = *(($6 + [48]))
	*(($0 + [72])) = *(($6 + [56]))
	*($0 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $69($1, $4, $0)
	$8 = *($1)
	*($6 + [88]) = $0
	CALL $70(($6 + [72]), ($1 + [8]), $8, ($6 + [88]))
	CALL $71(($6 + [72]), $1)
	CALL eosio_assert(((int_64)*($2) == (int_64)*($6 + [80])), [10266])
	$8 = ((int_64)*($6 + [72]) + (int_64)*($4))
	*($6 + [72]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10309])
	CALL eosio_assert(((int_64)*($6 + [72]) < (int_64)4611686018427387904), [10328])
	CALL $72(($1 + [48]), ($6 + [72]), *($1))
	$global$0 = ($6 + [96])
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($0 + [112])
	$2 = *(($0 + [140]))
	if ( ((int_32)$2 == (int_32)*(($0 + [136]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$1), [8823])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$0 = CALL db_find_i64(*($1), *(($0 + [120])), (int_64)-7954134664302947328, (int_64)-7954134664302947328)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $55($1, $0)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$1), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	return ((int_32)*($2) != (int_32)[0])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [64]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	CALL $103(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $104(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $22 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [8])) = $5
	*($4) = $7
	*($4 + [4]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [4]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [36])) = $6
	*((($4 + [16]) + [24])) = $5
	*(($4 + [8])) = [0]
	*(($4 + [52])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $7
	*($4) = (int_64)0
	*($4 + [44 align=4]) = (int_64)0
	CALL $33(($4 + [44]), [82])
	$7 = *(($4 + [48]))
	$2 = *($4 + [44])
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = $7
	*($4 + [72]) = ($4 + [56])
	*($4 + [80]) = $3
	*($4 + [84]) = ($3 + [8])
	*($4 + [88]) = ($3 + [16])
	*($4 + [92]) = ($3 + [24])
	*($4 + [96]) = ($3 + [40])
	*($4 + [100]) = ($3 + [41])
	*($4 + [104]) = ($3 + [48])
	*($4 + [108]) = ($3 + [80])
	CALL $138(($4 + [80]), ($4 + [72]))
	CALL $35(($4 + [80]), ($4 + [16]))
	$3 = *($4 + [80])
	CALL send_inline($3, (*($4 + [84]) - $3))
	$3 = *($4 + [80])
	if ( ($3 == 0) ){ goto $label$4 }
	*($4 + [84]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($4 + [44])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($4 + [48])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [36])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$7 }
	*($4 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($4 + [112])
	return (unreachable)
	
.LABEL $label$1
	CALL $209($4)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$0 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $23($2, $0)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9414])
	CALL eosio_assert(((int_64)*($1) == (int_64)*($3)), [9395])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [64])
	$global$0 = $6
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$7 = uint_32($7 >> [1])
	$8 = ($1 + [1])
	$9 = ($8 + $7)
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($1 + [4])
	$8 = *($1 + [8])
	$9 = ($8 + $7)
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $210(*($8)) ){ goto $label$4 }
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$8 = $9
	$7 = [1]
	$10 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$7 = ($8 + [1])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $210(*($7)) == 0) ){ goto $label$10 }
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($8) = *($7)
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($1 + $7)
	$7 = ($9 + uint_32($10 >> $7))
	goto $label$1 
	
.LABEL $label$2
	$9 = *($1 + [8])
	$7 = ($9 + *($1 + [4]))
	
.LABEL $label$1
	CALL $195($1, ($8 - $9), ($7 - $8))
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$13 }
	$8 = ($1 + [1])
	$10 = [0]
	$7 = [0]
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($1 + [8])
	$10 = [0]
	$7 = [0]
	$9 = *($1 + [4])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = [0]
	
.LOOP $label$14:
	$7 = ($7 + ((int_32)*($8) == (int_32)[45]))
	$8 = ($8 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$14 }
	$7 = ((int_32)$7 == (int_32)[3])
	
.LABEL $label$11
	CALL eosio_assert($7, [9511])
	*($6 + [56]) = $10
	*($6 + [48]) = (int_64)0
	*($6 + [60]) = [45]
	*($6) = $10
	*($6 + [47]) = [1]
	$8 = CALL $2($1, ($6 + [48]), ($6 + [60]), $6, ($6 + [47]))
	$7 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [10389])
	*($2) = CALL $201(($6 + [48]), $10, [10])
	*($6 + [60]) = ($8 + [1])
	*($6) = [45]
	*($6 + [47]) = [1]
	$8 = CALL $2($1, ($6 + [48]), $6, ($6 + [60]), ($6 + [47]))
	$7 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [10404])
	*($3) = CALL $198(($6 + [48]), $10, [10])
	*($6 + [60]) = ($8 + [1])
	*($6) = [45]
	*($6 + [47]) = [1]
	$8 = CALL $2($1, ($6 + [48]), $6, ($6 + [60]), ($6 + [47]))
	$7 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [10418])
	*($4) = CALL $201(($6 + [48]), $10, [10])
	$8 = ($8 + [1])
	*($6 + [60]) = $8
	CALL $187($6, $1, $8, [-1], $1)
	if ( (*($6 + [48]) & [1]) ){ goto $label$16 }
	*($6 + [48]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($6 + [56]))) = [0]
	*($6 + [52]) = [0]
	
.LABEL $label$15
	CALL $189(($6 + [48]), [0])
	*(($7 = (($6 + [48]) + [8]))) = *(($6 + [8]))
	*($6 + [48]) = *($6)
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [10432])
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[64]), [8331])
	CALL $1(($6 + [48]), $6, [32])
	*(($5 + [24])) = *(($6 + [24]))
	*(($5 + [16])) = *(($6 + [16]))
	*(($5 + [8])) = *($6 + [8])
	*($5) = *($6)
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$17
	$global$0 = ($6 + [64])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = CALL $227([8803])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8921])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8802]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$5), [9596])
	$6 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$5 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $7
	$6 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9619])
	$6 = ((*($2) + [-1]) & [255])
	CALL eosio_assert(($6 <= [12]), [8585])
	CALL $26($3, ($0 + [32]))
	$4 = *($3)
	$5 = *(($4 + ((int_32)$6 * (int_32)[96])) + [16])
	if ( ($4 == 0) ){ goto $label$12 }
	*($3 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL eosio_assert((uint_64)($5 <= (int_64)65536), [10508])
	$7 = (int_64)10000
	if ( (int_64)($5 == 0) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ((uint_64)((int_64)$7 * (int_64)130) / (uint_64)(int_64)100)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($1) == (int_64)$7), [10484])
	$global$0 = ($3 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$1), [8823])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7339899822381465600, (int_64)7339899822381465600)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $60($1, $3)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$1), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = (*($2 + [4]) - *($2))
	$3 = ((int_32)$1 / (int_32)[96])
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[44739243]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($4 = ($0 + [4]))) = $1
	*(($0 + [8])) = ($1 + ((int_32)$3 * (int_32)[96]))
	*($0) = $1
	$0 = *($2)
	$2 = (*(($2 + [4])) - $0)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($1, $0, $2)
	*($4) = (*($4) + ((int_32)((uint_32)$2 / (uint_32)[96]) * (int_32)[96]))
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $209($0)
}

int_32 .FUNC $232 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12764]) == 0) ){ goto $label$2 }
	$2 = *([0] + [12768])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [12764]) = [1]
	$2 = ($2 << [16])
	*([0] + [12768]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12768])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [12768]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [12764]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [12764]) = [1]
	$3 = ($3 << [16])
	*([0] + [12768]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12768])
	
.LABEL $label$10
	*([0] + [12768]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [9169])
	$1 = CALL memcpy($1, *($3), [80])
	CALL eosio_assert([1], [9220])
	*($4 + [88]) = ($4 + [69])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [56])
	*($4 + [124]) = ($1 + [72])
	CALL $105(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [69])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9279])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8916])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8916])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8916])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*(($5 = CALL _Znwj([96])) + [64]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = $1
	$5 = CALL memcpy($5, *($3), [80])
	*($4 + [88]) = ($4 + [69])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($5 + [8])
	*($4 + [104]) = $5
	*($4 + [112]) = ($5 + [16])
	*($4 + [116]) = ($5 + [48])
	*($4 + [120]) = ($5 + [56])
	*($4 + [124]) = ($5 + [72])
	CALL $105(($4 + [104]), ($4 + [96]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, $4, [69])
	*($5 + [84]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [104]) = $5
	*($4) = (int_64)7235159537265672192
	*($4 + [80]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [104]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $104(($1 + [24]), ($4 + [104]), $4, ($4 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9279])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9279])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8916])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [7]) != (int_32)[0])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8916])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8916])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8916])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $209($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8916])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8916])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $109(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $212 (int_32 $0)
{
}

int_32 .FUNC $231 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $232($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8245])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $219 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $218($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [9285])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = $1
	CALL $111(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $110(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($0 + [72])
	$2 = *(($0 + [100]))
	if ( ((int_32)$2 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$1), [8823])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$0 = CALL db_find_i64(*($1), *(($0 + [80])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $23($1, $0)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$1), [8823])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9414])
	CALL eosio_assert((*($2 + [48]) == 0), [9376])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5001621369012617216, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [8823])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $37($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)-5001621369012617216, $6))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [8823])
	
.LABEL $label$2
	*(($4 + [24])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8889])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $230($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8916])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8916])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $233($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9279])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9279])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9279])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $33($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9279])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9279])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $117(CALL $118($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = ((*($1) + [-1]) & [255])
	CALL eosio_assert(($5 <= [12]), [8585])
	$6 = ($0 + [32])
	CALL $26($4, $6)
	*(($7 = (*($4) + ((int_32)$5 * (int_32)[96]))) + [8]) = *($2)
	*($7 + [16]) = ((int_64)*($7 + [16]) + (int_64)1)
	$7 = ((*($1) + [-1]) & [255])
	CALL eosio_assert(($7 <= [12]), [8585])
	CALL $26(($4 + [16]), $6)
	$1 = *($4 + [16])
	$8 = *(($1 + ((int_32)$7 * (int_32)[96])) + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	*($4 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)65536), [10508])
	$9 = (int_64)10000
	if ( (int_64)($8 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = ((uint_64)((int_64)$9 * (int_64)130) / (uint_64)(int_64)100)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$2
	$1 = CALL $227([8803])
	if ( ($1 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8921])
	goto $label$6 
	
.LABEL $label$7
	if ( ($1 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$10 = (int_64)0
	
.LOOP $label$8:
	$7 = *(($1 + [8802]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$5
	$10 = (int_64)0
	
.LABEL $label$4
	CALL eosio_assert([1], [9019])
	$8 = ((int_64)$10 & (int_64)72057594037927935)
	$11 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	$1 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$8 = $10
	$7 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$8 = $10
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$2 = ($1 + [1])
	$1 = $2
	if ( $7 ){ goto $label$14 }
	$7 = [1]
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [9068])
	*(($1 = (*($4) + ($7 = ((int_32)$5 * (int_32)[96])))) + [24]) = $9
	*(($1 + [32])) = $11
	*(($1 = (*($4) + $7)) + [48]) = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	*(($1 + [64])) = *(($3 + [16]))
	*(($1 + [72])) = *(($3 + [24]))
	$8 = CALL current_time()
	*((*($4) + $7) + [80]) = ((uint_64)$8 / (uint_64)(int_64)1000000)
	CALL $62($6, $4, *($0))
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$15 }
	*($4 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($4 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $209($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = ((*($1) + [-1]) & [255])
	CALL eosio_assert(($4 <= [12]), [8585])
	CALL $26(($3 + [40]), ($0 + [32]))
	$5 = *($3 + [40])
	$4 = ($5 + ((int_32)$4 * (int_32)[96]))
	$6 = *($4 + [24])
	$7 = *($4 + [8])
	$8 = *(($4 + [32]))
	if ( ($5 == 0) ){ goto $label$1 }
	*($3 + [44]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	*($3 + [56]) = $7
	if ( (int_64)($7 == 0) ){ goto $label$2 }
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$7 = $9
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$7 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $4 ){ goto $label$6 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $227([8803])
	if ( ($5 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8921])
	goto $label$9 
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$9 = (int_64)0
	
.LOOP $label$11:
	$4 = *(($5 + [8802]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$8
	$9 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert([1], [9019])
	$7 = ((int_64)$9 & (int_64)72057594037927935)
	$11 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$7 = $9
	$4 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$7 = $9
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $4 ){ goto $label$17 }
	$4 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	CALL eosio_assert($4, [9068])
	CALL eosio_assert(((int_64)$8 == (int_64)$11), [9822])
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$2 }
	CALL __multi3(($3 + [8]), $6, (int_64)$6 >> (int_64)63), (int_64)103, (int_64)0)
	$7 = *(($3 + [16]))
	$9 = *($3 + [8])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [10217])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [10241])
	*($3 + [48]) = $8
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($3 + [40]) = ((int_64)$9 / (int_64)100)
	CALL $74(($3 + [24]), $0, ($3 + [40]), $2, $1)
	CALL $73($0, ($3 + [56]), ($3 + [40]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ((*($1) + [-1]) & [255])
	CALL eosio_assert(($3 <= [12]), [8585])
	CALL $26(($2 + [32]), ($0 + [32]))
	$1 = *($2 + [32])
	CALL memcpy(($2 + [48]), ($1 + ((int_32)$3 * (int_32)[96])), [96])
	if ( ($1 == 0) ){ goto $label$1 }
	*($2 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	if ( (int_64)(*($2 + [56]) == 0) ){ goto $label$3 }
	$4 = *($2 + [72])
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$5 = (($2 + [48]) | [8])
	$6 = *(($2 + [80]))
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $8
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $3 ){ goto $label$7 }
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	$1 = CALL $227([8803])
	if ( ($1 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [8921])
	goto $label$10 
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = (int_64)0
	
.LOOP $label$12:
	$3 = *(($1 + [8802]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$9
	$8 = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert([1], [9019])
	$7 = ((int_64)$8 & (int_64)72057594037927935)
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	$1 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$7 = $8
	$3 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$7 = $8
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $3 ){ goto $label$18 }
	$3 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$3 = [0]
	
.LABEL $label$14
	CALL eosio_assert($3, [9068])
	CALL eosio_assert(((int_64)$6 == (int_64)$10), [9822])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$4 < (int_64)2305843009213693952), [10217])
	CALL eosio_assert([1], [10241])
	*($2 + [40]) = $6
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($2 + [32]) = ((int_64)((int_64)$4 << (int_64)1) / (int_64)1000)
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $75($0, $5, ($2 + [32]), ($2 + [16]), [0])
	$1 = *($2 + [16])
	if ( ((int_32)*($2 + [20]) == (int_32)$1) ){ goto $label$19 }
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10217])
	CALL eosio_assert([1], [10241])
	*($2 + [8]) = $6
	CALL eosio_assert([1], [9881])
	CALL eosio_assert([1], [9896])
	*($2) = ((uint_64)$4 / (uint_64)(int_64)1000)
	CALL $29($0, $5, $2)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = CALL $227([10677])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*($2) = ($1 << [1])
	$3 = ($2 | [1])
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$9 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $3
	*($2 + [4]) = $1
	
.LABEL $label$21
	CALL memcpy($3, [10677], $1)
	
.LABEL $label$20
	*(($3 + $1)) = [0]
	CALL $76($0, ($2 + [16]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$23
	$1 = *($2 + [16])
	
.LABEL $label$19
	if ( ($1 == 0) ){ goto $label$3 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $185($2)
}

int_32 .FUNC $215 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $214 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $217 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $213([9], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $216 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $211 ()
{
	return [12756]
}

int_32 .FUNC $210 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $227([8240])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8240], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $211())
	*(CALL $211()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $224($4, ($3 + [12]), $2)
	$5 = CALL $211()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $199($3)
	
.LABEL $label$1
	CALL $200($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $199 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $206($1, $0, [8874])
	CALL $207()
	(unreachable)
}

int_32 .FUNC $196 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $225(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $197 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $226(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $194 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $188($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $227($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $188($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $191($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $191($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $191 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}