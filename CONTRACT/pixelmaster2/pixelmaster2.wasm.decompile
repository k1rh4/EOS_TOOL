(data (i32.const 8192) "Balance too small for withdrawal\00")
(data (i32.const 8225) "Not enogh quota.\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8328) "Contract withdrawal quota exceeded\00")
(data (i32.const 8363) "pixelmaster2\00")
(data (i32.const 8376) "no canvas exists\00")
(data (i32.const 8393) "eosio.token\00")
(data (i32.const 8405) "transfer\00")
(data (i32.const 8414) "eosotcbackup\00")
(data (i32.const 8427) "dacincubator\00")
(data (i32.const 8440) "sell fee\00")
(data (i32.const 8449) "canvas still has time left\00")
(data (i32.const 8476) "account already exist\00")
(data (i32.const 8498) "already initialized\00")
(data (i32.const 8518) "unknown account\00")
(data (i32.const 8534) "no withdraw guard exists\00")
(data (i32.const 8559) "Withdraw from EOS Pixels\00")
(data (i32.const 8584) "must sell with PXL token\00")
(data (i32.const 8609) "must pay with EOS token\00")
(data (i32.const 8633) "game will be start after 21:00.\00")
(data (i32.const 8665) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8714) "invalid symbol name\00")
(data (i32.const 8734) "write\00")
(data (i32.const 8740) "attempt to subtract asset with different symbol\00")
(data (i32.const 8788) "subtraction underflow\00")
(data (i32.const 8810) "subtraction overflow\00")
(data (i32.const 8832) "cannot pass end iterator to modify\00")
(data (i32.const 8867) "object passed to modify is not in multi_index\00")
(data (i32.const 8913) "cannot modify objects in table of another contract\00")
(data (i32.const 8964) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9023) "get\00")
(data (i32.const 9027) "read\00")
(data (i32.const 9032) "error reading iterator\00")
(data (i32.const 9055) "cannot pass end iterator to erase\00")
(data (i32.const 9089) "cannot increment end iterator\00")
(data (i32.const 9119) "object passed to erase is not in multi_index\00")
(data (i32.const 9164) "cannot erase objects in table of another contract\00")
(data (i32.const 9214) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9267) "cannot create objects in table of another contract\00")
(data (i32.const 9318) "object passed to iterator_to is not in multi_index\00")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "require_auth2" (func $fimport$1 (param i64 i64)))
(import "env" "__multi3" (func $fimport$2 (param i32 i64 i64 i64 i64)))
(import "env" "__floatuntidf" (func $fimport$3 (param i64 i64) (result f64)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "__fixunsdfti" (func $fimport$5 (param i32 f64)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__udivti3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$18 (param i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $47))
(export "_Znwj" (func $58))
(export "_ZdlPv" (func $60))
(export "_Znaj" (func $59))
(export "_ZdaPv" (func $61))
(export "_ZnwjSt11align_val_t" (func $62))
(export "_ZnajSt11align_val_t" (func $63))
(export "_ZdlPvSt11align_val_t" (func $64))
(export "_ZdaPvSt11align_val_t" (func $65))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $28 $6 $30 $13 $10 $1 $37 $27 $22 $31 $26)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17788))
(global $global$2 i32 (i32.const 17788))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $19($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8734])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8734])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $49(CALL $48($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $71(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9372])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $71(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $68($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17776])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17584]
	$3 = (((int_32)$1 * (int_32)[12]) + [17584])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $73($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8665])
	$5 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8714])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	CALL $45($2, $0)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL $76($4)
	
.LABEL $label$8
	$global$0 = ($2 + [16])
}

int_32 .FUNC $73 (int_32 $0)
{
	return CALL $74([9392], $0)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [88])
	$5 = *(($0 + [116]))
	$4 = *(($0 + [112]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [9318])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $8($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [9318])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [8476])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$9()), [9267])
	*(($6 = CALL _Znwj([80])) + [64]) = $3
	*($6) = $1
	CALL eosio_assert([1], [8734])
	CALL memcpy(($2 + [16]), $6, [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy((($2 + [16]) | [8]), ($6 + [16]), [16])
	CALL eosio_assert([1], [8734])
	CALL memcpy(($2 + [40]), ($6 + [32]), [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy((($2 + [16]) + [32]), ($6 + [48]), [16])
	$8 = *($6)
	$7 = CALL db_store_i64(*(($0 + [96])), (int_64)3607749778735104000, $1, $8, ($2 + [16]), [48])
	*($6 + [68]) = $7
	$5 = ($0 + [104])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $7
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [120]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [112]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	float_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = (float_64)0.2
	$4 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ((uint_32)$4 > (uint_32)[1541073599]) ){ goto $label$1 }
	$3 = (float_64)0.5
	if ( ($4 <= [1538395201]) ){ goto $label$1 }
	$3 = ((float_64)((float_64)(float_64))((float_64)1541073600 - (CASTING float_64)(uint_32 $4)) * (float_64)(float_64)0.3) / (float_64)(float_64)2678400)
	
.LABEL $label$1
	$3 = ((float_64)$3 * (float_64)(CASTING float_64)(int_64 *($1)))
	if ( ((float_64)(float_64)|$3| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$5 = (Rounds 0)($3)
	
.LABEL $label$2
	$6 = *($1 + [8])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8665])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = $8
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$8 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	
.LABEL $label$4
	CALL eosio_assert($9, [8714])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$10 }
	$8 = *($0)
	$7 = (int_64)6
	
.LOOP $label$11:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$11 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $8
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [8427]
	$11 = (int_64)0
	
.LOOP $label$12:
	$12 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$13 }
	$9 = *($4)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$9 = ($9 + [-91])
	goto $label$14 
	
.LABEL $label$15
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$12 }
	$7 = (int_64)0
	$12 = (int_64)59
	$4 = [8405]
	$13 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$21 }
	$9 = *($4)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$9 = ($9 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$13 = ((int_64)$8 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$16 }
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [8414]
	$14 = (int_64)0
	
.LOOP $label$22:
	$12 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$23 }
	$9 = *($4)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$9 = ($9 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$22 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL $70([8440])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$28 }
	*($2 + [8]) = ($4 << [1])
	$9 = (($2 + [8]) | [1])
	if ( $4 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$10 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($2 + [8]) = ($10 | [1])
	*($2 + [16]) = $9
	*($2 + [12]) = $4
	
.LABEL $label$27
	CALL memcpy($9, [8440], $4)
	
.LABEL $label$26
	*(($9 + $4)) = [0]
	*(($2 + [48])) = $6
	$4 = ($2 + [16])
	*(($2 + [64])) = *($4)
	*($4) = [0]
	*($2 + [32]) = $14
	*($2 + [40]) = $5
	*($2 + [24]) = *($0)
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$4 = CALL $17(($2 + [88]), ($2 + [72]), $11, $13, ($2 + [24]))
	CALL $18(($2 + [128]), $4)
	$9 = *($2 + [128])
	CALL send_inline($9, (*($2 + [132]) - $9))
	$9 = *($2 + [128])
	if ( ($9 == 0) ){ goto $label$29 }
	*($2 + [132]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$29
	$9 = *($4 + [28])
	if ( ($9 == 0) ){ goto $label$30 }
	*(($4 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$30
	$9 = *($4 + [16])
	if ( ($9 == 0) ){ goto $label$31 }
	*(($4 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$31
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$32
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$33
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [8]))), [8740])
	$7 = (int_64)
	*($1) = $7(*($1) - $5))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8788])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [8810])
	
.LABEL $label$10
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$9
	CALL $66(($2 + [8]))
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8734])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8734])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8734])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$1 = ($global$0 - [112])
	$global$0 = $1
	$2 = ($0 + [48])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2($2, $4)
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [8376])
	$5 = *($3)
	CALL eosio_assert(((*($3 + [12]) + *($3 + [8])) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$0() / (uint_64)(int_64)1000000))), [8449])
	CALL eosio_assert($4, [9055])
	CALL eosio_assert($4, [9089])
	$4 = CALL db_next_i64(*($3 + [84]), ($1 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($2, $4)
	
.LABEL $label$2
	CALL $12($2, $3)
	$6 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$9()), [9267])
	*(($3 = CALL _Znwj([96])) + [80]) = $2
	*($3) = ((int_64)$5 + (int_64)1)
	$5 = CALL current_time()
	*($3 + [12]) = [86400]
	*($3 + [8]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*($1 + [104]) = (($1 + [16]) + [80])
	*($1 + [100]) = ($1 + [16])
	*($1 + [96]) = ($1 + [16])
	CALL $23(($1 + [96]), $3)
	$5 = *($3)
	$4 = CALL db_store_i64(*(($0 + [56])), (int_64)4730947164245590016, $6, $5, ($1 + [16]), [80])
	*($3 + [84]) = $4
	$2 = ($0 + [64])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($1 + [96]) = $3
	$5 = *($3)
	*($1 + [16]) = $5
	*($1 + [12]) = $4
	$7 = ($0 + [76])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [80]))) ){ goto $label$6 }
	*($2 + [8]) = $5
	*($2 + [16]) = $4
	*($1 + [96]) = [0]
	*($2) = $3
	*($7) = ($2 + [24])
	$0 = *($1 + [96])
	*($1 + [96]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $24(($0 + [72]), ($1 + [96]), ($1 + [16]), ($1 + [12]))
	$0 = *($1 + [96])
	*($1 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [112])
}

void .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [96])
	$global$0 = $1
	$2 = ($0 + [48])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2($2, $4)
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [8376])
	CALL eosio_assert($4, [8832])
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [8867])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$9()), [8913])
	$5 = *($3)
	*($3 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($3)), [8964])
	*($1 + [88]) = ($1 + [80])
	*($1 + [84]) = $1
	*($1 + [80]) = $1
	CALL $23(($1 + [80]), $3)
	CALL db_update_i64(*($3 + [84]), (int_64)0, $1, [80])
	$3 = ($0 + [64])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($1 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8363]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$8 = ($0 + [48])
	$5 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $2($8, $9)
	
.LABEL $label$5
	$9 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($9, [8376])
	CALL eosio_assert($9, [8832])
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$8), [8867])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$9()), [8913])
	*($5 + [12]) = $1
	$3 = *($5)
	CALL eosio_assert([1], [8964])
	*($2 + [88]) = ($2 + [80])
	*($2 + [84]) = $2
	*($2 + [80]) = $2
	CALL $23(($2 + [80]), $5)
	CALL db_update_i64(*($5 + [84]), (int_64)0, $2, [80])
	$5 = ($0 + [64])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$6 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($2 + [96])
}

void .FUNC $26 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$1 = (int_64)0
	$2 = (int_64)59
	$3 = [8363]
	$4 = (int_64)0
	
.LOOP $label$1:
	$5 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$4 = ((int_64)$5 | (int_64)$4)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($4)
	CALL $25($0)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $75($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8242])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8734])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8734])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8734])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8734])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8734])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $69 ()
{
	return [9376]
}

void .FUNC $68 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $73($5)
	CALL read_action_data($2, $5)
	CALL $76($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $73($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[1]), [9027])
	CALL memcpy(($3 + [8]), $6, [2])
	CALL eosio_assert(((int_32)($1 & [-2]) != (int_32)[2]), [9027])
	CALL memcpy((($3 + [8]) | [2]), ($6 + [2]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $76($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = *($3 + [10])
	$2 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [65535])), (int_32 ($6 & [65535])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9027])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $76($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [136]) = (int_64)1398362884
	*($3 + [128]) = (int_64)0
	CALL eosio_assert([1], [8665])
	$4 = [0]
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8714])
	$7 = ($0 + [8])
	$4 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-7949128890230767616, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $32($7, $8)
	
.LABEL $label$6
	*($3 + [28]) = $2
	*($3 + [24]) = ($3 + [128])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8832])
	CALL $46($7, $4, (int_64)0, ($3 + [24]))
	if ( ((int_64)*($3 + [128]) < (int_64)1) ){ goto $label$8 }
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$9:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$9 }
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = $6
	$5 = (int_64)0
	$9 = (int_64)59
	$4 = [8393]
	$10 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$15 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$7 = ($7 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$6 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$6 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$10 }
	$5 = (int_64)0
	$9 = (int_64)59
	$4 = [8405]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$21 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$6 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$6 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$16 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $70([8831])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$24 }
	*($3 + [8]) = ($4 << [1])
	$7 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$8 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($3 + [8]) = ($8 | [1])
	*($3 + [16]) = $7
	*($3 + [12]) = $4
	
.LABEL $label$23
	CALL memcpy($7, [8831], $4)
	
.LABEL $label$22
	*(($7 + $4)) = [0]
	*(($3 + [48])) = *((($3 + [128]) + [8]))
	$4 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = *($0)
	*($3 + [40]) = *($3 + [128])
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$4 = CALL $17(($3 + [88]), ($3 + [72]), $10, $11, ($3 + [24]))
	CALL $18(($3 + [144]), $4)
	$7 = *($3 + [144])
	CALL send_inline($7, (*($3 + [148]) - $7))
	$7 = *($3 + [144])
	if ( ($7 == 0) ){ goto $label$25 }
	*($3 + [148]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$25
	$7 = *($4 + [28])
	if ( ($7 == 0) ){ goto $label$26 }
	*(($4 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$26
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$27 }
	*(($4 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$28
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$8
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$7
	CALL $66(($3 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = [0]
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = (int_64)0
	*(($3 + [88])) = [0]
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [144])) = $0
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	*($3 + [56]) = $0
	*($3 + [96]) = $0
	*($3 + [136]) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	CALL $38(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8867])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8913])
	$6 = (int_64)
	*($1 + [8]) = $6(*($1 + [8]) - *(*($3 + [4]))))
	$7 = (CASTING float_64)(int_64 $6)
	$7 = ((float_64)((float_64)((float_64)((float_64)$7 * (float_64)$7) * (float_64)(float_64)0.5) / (float_64)(float_64)1e10) / (float_64)(float_64)1e4)
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($7)
	
.LABEL $label$1
	$8 = *($1 + [24])
	*($1 + [24]) = $6
	$9 = *(($1 + [32]))
	$10 = *($1)
	$11 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$11($8 - $6)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8665])
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$13 = [1]
	$14 = $12
	$12 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$13 = ((int_32)$12 < (int_32)[6])
	$14 = ($12 + [1])
	$12 = $14
	if ( $13 ){ goto $label$7 }
	$13 = [1]
	$12 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	
.LABEL $label$3
	CALL eosio_assert($13, [8714])
	*(($12 = *($3)) + [8]) = $9
	*($12) = $11
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [8964])
	$13 = $4
	$12 = ($13 + [-48])
	$global$0 = $12
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = $13
	CALL $35($5, $1)
	CALL db_update_i64(*($1 + [52]), $2, $12, [48])
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $50($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9027])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $73($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [9027])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $76($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $73($1)
	
.LABEL $label$2
	*(CALL $69()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $73(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $76($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9023])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $19($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9027])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9384]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9388])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9384]) = [1]
	$2 = ($2 << [16])
	*([0] + [9388]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9388])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9388]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9384]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9384]) = [1]
	$3 = ($3 << [16])
	*([0] + [9388]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9388])
	
.LABEL $label$10
	*([0] + [9388]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $76($0)
	
.LABEL $label$1
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $69())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $72($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $73($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	CALL $57(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9119])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [9164])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9214])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8363]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	CALL $7(($0 + [88]), $1)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $8($0, $3)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9055])
	CALL eosio_assert($5, [9089])
	$5 = [0]
	$6 = CALL db_next_i64(*($3 + [68]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $8($0, $6)
	
.LABEL $label$3
	CALL $9($0, $3)
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = $5
	$4 = ($4 + [1])
	if ( (($4 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $73($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	$2 = ($4 + $5)
	*($3 + [40]) = $2
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$6 }
	CALL $76($4)
	$2 = *(($3 + [40]))
	$4 = *($3 + [36])
	
.LABEL $label$6
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)($2 - $4) > (uint_32)[7]), [9027])
	CALL memcpy($5, $4, [8])
	*($3 + [36]) = ($4 + [8])
	CALL $55(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$7
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9119])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [9164])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9214])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $73($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([96])) + [80]) = $0
	CALL $54(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-6072355467529551872, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $4($0, $3)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9055])
	CALL eosio_assert($5, [9089])
	$5 = [0]
	$6 = CALL db_next_i64(*($3 + [24]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $4($0, $6)
	
.LABEL $label$3
	CALL $5($0, $3)
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = $5
	$4 = ($4 + [1])
	if ( (($4 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8363]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $2(($0 + [48]), $9)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8376])
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	*($3 + [16]) = *($6)
	CALL $3(($3 + [8]), $1)
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	$10 = ($3 + [36])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$10 }
	$0 = *($9 + [8])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($9 + [12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	CALL _ZdlPv($9)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($10) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9032])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $73($4)
	CALL db_get_i64($1, $2, $4)
	CALL $76($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9027])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9027])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $19($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $20(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8363]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	CALL $11(($0 + [48]), $1)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2($0, $3)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9055])
	CALL eosio_assert($5, [9089])
	$5 = [0]
	$6 = CALL db_next_i64(*($3 + [84]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $2($0, $6)
	
.LABEL $label$3
	CALL $12($0, $3)
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = $5
	$4 = ($4 + [1])
	if ( (($4 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9119])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [9164])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9214])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [8363]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($5)
	$7 = ($0 + [128])
	$8 = ($0 + [136])
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *($8), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL $14($7, $4)
	CALL eosio_assert([1], [8832])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [8867])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$9()), [8913])
	*($4 + [8]) = (int_64)10000000
	$2 = *($4)
	CALL eosio_assert([1], [8964])
	CALL eosio_assert([1], [8734])
	CALL memcpy($1, $4, [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy(($1 | [8]), ($4 + [8]), [8])
	CALL db_update_i64(*($4 + [20]), (int_64)0, $1, [16])
	$4 = ($0 + [144])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$6
	$3 = *($0)
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$9()), [9267])
	*(($4 = CALL _Znwj([32])) + [16]) = $7
	*($4 + [8]) = (int_64)10000000
	*($4) = (int_64)0
	CALL eosio_assert([1], [8734])
	CALL memcpy($1, $4, [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy(($1 | [8]), ($4 + [8]), [8])
	$2 = *($4)
	$8 = CALL db_store_i64(*($8), (int_64)7389690656689487872, $3, $2, $1, [16])
	*($4 + [20]) = $8
	$7 = ($0 + [144])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($1 + [24]) = $4
	$2 = *($4)
	*($1) = $2
	*($1 + [20]) = $8
	$9 = ($0 + [156])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [160]))) ){ goto $label$9 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($1 + [24]) = [0]
	*($7) = $4
	*($9) = ($7 + [24])
	$4 = *($1 + [24])
	*($1 + [24]) = [0]
	if ( $4 ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	CALL $15(($0 + [152]), ($1 + [24]), $1, ($1 + [20]))
	$4 = *($1 + [24])
	*($1 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($1 + [32])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	int_64 $13
	int_64 $14
	float_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth($1)
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($0 + [48]), $4)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8376])
	$5 = ($0 + [88])
	$6 = *(($3 + [40]))
	$7 = *($3 + [32])
	$9 = *(($0 + [116]))
	$8 = *(($0 + [112]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$3 = ($9 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$4 }
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$5), [9318])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = CALL db_find_i64(*($5), *(($0 + [96])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $8($5, $3)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$5), [9318])
	
.LABEL $label$2
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [8518])
	$9 = ($0 + [128])
	$3 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $14($9, $10)
	
.LABEL $label$6
	$10 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($10, [8534])
	CALL __multi3(($2 + [24]), $7, $6, *($4 + [32]), (int_64)0)
	$11 = *(($4 + [56]))
	$6 = *($4 + [48])
	$7 = *($2 + [24])
	$12 = ((float_64)CALL __floatuntidf((int_64))($7 - $6), (int_64))((int_64))(*((($2 + [24]) + [8])) - $11) - (CASTING uint_64)(uint_32 (uint_64)($7 <= $6))
	if ( ((float_64)(float_64)|$12) / (float_64)(float_64)1e16))| < (float_64)(float_64)9223372036854775808) ){ goto $label$8 }
	$13 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$8
	$13 = (Rounds 0)($12)
	
.LABEL $label$7
	$7 = *(($4 + [24]))
	$14 = *($4 + [16])
	$15 = ((float_64)CALL __floatuntidf($14, $7) / (float_64)(float_64)1e16)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$10 }
	$16 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$10
	$16 = (Rounds 0)($15)
	
.LABEL $label$9
	$17 = *($3 + [8])
	$16 = ((int_64)$13 + (int_64)$16)
	CALL eosio_assert(((int_64)$16 > (int_64)0), [8192])
	CALL eosio_assert(((int_64)$16 < (int_64)10000000), [8225])
	CALL eosio_assert(((uint_64)$17 >= (uint_64)$16), [8328])
	CALL eosio_assert($10, [8832])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$9), [8867])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$9()), [8913])
	*($3 + [8]) = (int_64))($17 - $16)
	$18 = *($3)
	CALL eosio_assert([1], [8964])
	CALL eosio_assert([1], [8734])
	CALL memcpy(($2 + [128]), $3, [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy((($2 + [128]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), (int_64)0, ($2 + [128]), [16])
	CALL __fixunsdfti(($2 + [40]), ((float_64)(Rounds 0)($15) * (float_64)(float_64)1e16))
	CALL __fixunsdfti(($2 + [8]), ((float_64)(Rounds 0)($12) * (float_64)(float_64)1e16))
	$7 = ( $14 ? $13 : $3 )
	$13 = *($2 + [40])
	$3 = ( ((uint_64)$14 > (uint_64)$13) ? ((uint_64)$7 > (uint_64)$17) : ((int_64)$7 == (int_64)$17) )
	$17 = *((($2 + [40]) + [8]))
	$17 = (int_64))((int_64))(( $7 ? $17 : $3 ) - $17) - (CASTING uint_64)(uint_32 (uint_64)($7 <= $13)))
	$7 = (int_64))($7 - $13)
	$13 = ((int_64)$6 + (int_64)*($2 + [8]))
	$6 = ((int_64)((int_64)$11 + (int_64)*((($2 + [8]) + [8]))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($13 <= $6)))
	$3 = ($0 + [144])
	if ( (uint_64)($18 <= *($3)) ){ goto $label$11 }
	*($3) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	CALL eosio_assert($8, [8832])
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$5), [8867])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$9()), [8913])
	*(($4 + [24])) = $17
	*($4 + [16]) = $7
	*(($4 + [56])) = $6
	*($4 + [48]) = $13
	$6 = *($4)
	CALL eosio_assert([1], [8964])
	CALL eosio_assert([1], [8734])
	CALL memcpy(($2 + [128]), $4, [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy((($2 + [128]) | [8]), ($4 + [16]), [16])
	CALL eosio_assert([1], [8734])
	CALL memcpy((($2 + [128]) + [24]), ($4 + [32]), [8])
	CALL eosio_assert([1], [8734])
	CALL memcpy((($2 + [128]) + [32]), ($4 + [48]), [16])
	CALL db_update_i64(*($4 + [68]), (int_64)0, ($2 + [128]), [48])
	$3 = ($0 + [104])
	if ( (uint_64)($6 <= *($3)) ){ goto $label$12 }
	*($3) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8665])
	$6 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$6 = $7
	$4 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$6 = $7
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $4 ){ goto $label$17 }
	$4 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	CALL eosio_assert($4, [8714])
	$7 = *($0)
	$6 = (int_64)6
	
.LOOP $label$18:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$18 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $7
	$6 = (int_64)0
	$17 = (int_64)59
	$3 = [8393]
	$13 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$24 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$4 = ($4 + [-91])
	goto $label$22 
	
.LABEL $label$24
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$20
	$3 = ($3 + [1])
	$17 = ((int_64)$17 + (int_64)4294967291)
	$13 = ((int_64)$7 | (int_64)$13)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$19 }
	$6 = (int_64)0
	$17 = (int_64)59
	$3 = [8405]
	$14 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$30 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$4 = ($4 + [-91])
	goto $label$28 
	
.LABEL $label$30
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$26
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$14 = ((int_64)$7 | (int_64)$14)
	$17 = ((int_64)$17 + (int_64)4294967291)
	if ( ((int_64)$17 != (int_64)55834574842) ){ goto $label$25 }
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$3 = CALL $70([8559])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$35 }
	*($2 + [56]) = ($3 << [1])
	$4 = (($2 + [56]) | [1])
	if ( $3 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$9 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($2 + [56]) = ($9 | [1])
	*($2 + [64]) = $4
	*($2 + [60]) = $3
	
.LABEL $label$34
	CALL memcpy($4, [8559], $3)
	
.LABEL $label$33
	*(($4 + $3)) = [0]
	*(($2 + [152])) = (int_64)1397703940
	$3 = ($2 + [64])
	*(($2 + [168])) = *($3)
	*($3) = [0]
	*($2 + [136]) = $1
	*($2 + [144]) = $16
	*($2 + [128]) = *($0)
	*($2 + [160]) = *($2 + [56])
	*($2 + [56]) = (int_64)0
	$3 = CALL $17(($2 + [88]), ($2 + [72]), $13, $14, ($2 + [128]))
	CALL $18(($2 + [176]), $3)
	$4 = *($2 + [176])
	CALL send_inline($4, (*($2 + [180]) - $4))
	$4 = *($2 + [176])
	if ( ($4 == 0) ){ goto $label$36 }
	*($2 + [180]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$37 }
	*(($3 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$38 }
	*(($3 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	if ( (*(($2 + [160])) & [1]) ){ goto $label$40 }
	if ( (*($2 + [56]) & [1]) ){ goto $label$39 }
	goto $label$31 
	
.LABEL $label$40
	CALL _ZdlPv(*(($2 + [168])))
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$39
	CALL _ZdlPv(*(($2 + [64])))
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$32
	CALL $66(($2 + [56]))
	
.LABEL $label$31
	$global$0 = ($2 + [192])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8665])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8714])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [8665])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8714])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8714])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8714])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8734])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9032])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $73($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([64])
	$4 = CALL $34($5)
	*($5 + [48]) = $0
	CALL $52(($3 + [32]), $4)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9119])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [9164])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9214])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$1 = ($global$0 - [112])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [48])
	$3 = [0]
	$4 = ($0 + [56])
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *($4), (int_64)4730947164245590016, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($2, $5)
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8498])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$9()), [9267])
	*(($3 = CALL _Znwj([96])) + [80]) = $2
	*($3) = (int_64)0
	$7 = CALL current_time()
	*($3 + [12]) = [86400]
	*($3 + [8]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	*($1 + [104]) = (($1 + [16]) + [80])
	*($1 + [100]) = ($1 + [16])
	*($1 + [96]) = ($1 + [16])
	CALL $23(($1 + [96]), $3)
	$7 = *($3)
	$4 = CALL db_store_i64(*($4), (int_64)4730947164245590016, $6, $7, ($1 + [16]), [80])
	*($3 + [84]) = $4
	$2 = ($0 + [64])
	if ( (uint_64)($7 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($1 + [96]) = $3
	$7 = *($3)
	*($1 + [16]) = $7
	*($1 + [12]) = $4
	$5 = ($0 + [76])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [80]))) ){ goto $label$6 }
	*($2 + [8]) = $7
	*($2 + [16]) = $4
	*($1 + [96]) = [0]
	*($2) = $3
	*($5) = ($2 + [24])
	$0 = *($1 + [96])
	*($1 + [96]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $24(($0 + [72]), ($1 + [96]), ($1 + [16]), ($1 + [12]))
	$0 = *($1 + [96])
	*($1 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [112])
}

void .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$3 = ($0 + [16])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *($3), (int_64)-7949128890230767616, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $32($2, $4)
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($2), *($3), (int_64)-7949128890230767616, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $32($2, $5)
	
.LABEL $label$3
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [9055])
	CALL eosio_assert($5, [9089])
	$5 = CALL db_next_i64(*($4 + [52]), ($1 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $32($2, $5)
	
.LABEL $label$4
	CALL $33($2, $4)
	$4 = CALL db_lowerbound_i64(*($2), *($3), (int_64)-7949128890230767616, (int_64)0)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($2), *($3), (int_64)-7949128890230767616, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $32($2, $4)
	$global$0 = ($1 + [80])
	return 
	
.LABEL $label$5
	$6 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$9()), [9267])
	$4 = CALL _Znwj([64])
	$3 = CALL $34($4)
	*($4 + [48]) = $2
	*($4 + [16]) = (int_64)1280856068
	*($4 + [8]) = (int_64)200000000000
	*($4 + [24]) = (int_64)200000000
	*($4 + [32]) = (int_64)1397703940
	*($4 + [40]) = (int_64)0
	*($1 + [72]) = (($1 + [16]) + [48])
	*($1 + [68]) = ($1 + [16])
	*($1 + [64]) = ($1 + [16])
	CALL $35(($1 + [64]), $3)
	$7 = *($4)
	$3 = CALL db_store_i64(*(($0 + [16])), (int_64)-7949128890230767616, $6, $7, ($1 + [16]), [48])
	*($4 + [52]) = $3
	$2 = ($0 + [24])
	if ( (uint_64)($7 <= *($2)) ){ goto $label$6 }
	*($2) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($1 + [64]) = $4
	$7 = *($4)
	*($1 + [16]) = $7
	*($1 + [12]) = $3
	$5 = ($0 + [36])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [40]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $3
	*($1 + [64]) = [0]
	*($2) = $4
	*($5) = ($2 + [24])
	$2 = *($1 + [64])
	*($1 + [64]) = [0]
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $36(($0 + [32]), ($1 + [64]), ($1 + [16]), ($1 + [12]))
	$2 = *($1 + [64])
	*($1 + [64]) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($1 + [80])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $73($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9372])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $73($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $76($0)
	
.LABEL $label$1
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $51($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $67($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $67($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $66($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8427]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$13 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8405]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$19 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$9 = ($9 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$13 }
	CALL $39(($3 + [224]))
	$6 = ($3 + [248])
	CALL eosio_assert(((int_64)*($6) == (int_64)1280856068), [8584])
	if ( ((int_64)*($3 + [232]) != (int_64)*($0)) ){ goto $label$20 }
	*(($9 = (($3 + [208]) + [8]))) = *($6)
	*($3 + [208]) = *($3 + [240])
	CALL $21($0, ($3 + [208]))
	$4 = *($9)
	*((($3 + [192]) + [8])) = $4
	*(($3 + [8])) = $4
	$4 = *($3 + [208])
	*($3 + [192]) = $4
	*($3) = $4
	CALL $40($0, *($3 + [224]), $3)
	
.LABEL $label$20
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [264])))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$13
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8393]
	$7 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$26 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$9 = ($9 + [-91])
	goto $label$24 
	
.LABEL $label$26
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$21 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$27 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8405]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$33 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$9 = ($9 + [-91])
	goto $label$31 
	
.LABEL $label$33
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$29
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$28 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$27 }
	CALL $39(($3 + [224]))
	CALL eosio_assert(((int_64)*(($3 + [248])) == (int_64)1397703940), [8609])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$0() / (uint_64)(int_64)1000000)) > (uint_32)[1538312399]), [8633])
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [264])))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$27
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)4923678631116275711) ){ goto $label$36 }
	if ( ((int_64)$2 > (int_64)6111947644295184383) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)4923678631116275712) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)4923678858908299264) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5031766155850039296) ){ goto $label$12 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [1]
	*($3 + [56]) = *($3 + [144])
	CALL $41($0, ($3 + [56]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$36
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)4849591924454588416) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4923678597644681216) ){ goto $label$12 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [80]) = *($3 + [120])
	CALL $42($0, ($3 + [80]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)6111947644295184384) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)8421046307438723072) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$12 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [3]
	*($3 + [16]) = *($3 + [184])
	CALL $43($0, ($3 + [16]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)-5001399799015014400) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4994301928733573120) ){ goto $label$12 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3 + [96]) = *($3 + [104])
	CALL $43($0, ($3 + [96]))
	
.LABEL $label$12
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$11
	*($3 + [116]) = [0]
	*($3 + [112]) = [5]
	*($3 + [88]) = *($3 + [112])
	CALL $42($0, ($3 + [88]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$10
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [72]) = *($3 + [128])
	CALL $42($0, ($3 + [72]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$9
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [64]) = *($3 + [136])
	CALL $41($0, ($3 + [64]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [8]
	*($3 + [40]) = *($3 + [160])
	CALL $44($0, ($3 + [40]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$7
	*($3 + [156]) = [0]
	*($3 + [152]) = [9]
	*($3 + [48]) = *($3 + [152])
	CALL $43($0, ($3 + [48]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$6
	*($3 + [180]) = [0]
	*($3 + [176]) = [10]
	*($3 + [24]) = *($3 + [176])
	CALL $43($0, ($3 + [24]))
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$5
	*($3 + [172]) = [0]
	*($3 + [168]) = [11]
	*($3 + [32]) = *($3 + [168])
	CALL $43($0, ($3 + [32]))
	$global$0 = ($3 + [272])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9027])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8734])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8734])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9027])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9027])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9027])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [9027])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [9027])
	CALL memcpy(($1 + [48]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [9027])
	CALL memcpy(($1 + [64]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9023])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $56($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [9027])
	CALL memcpy($2, *($7), [4])
	$6 = (*($7) + [4])
	*($7) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [9027])
	CALL memcpy(($2 + [4]), *($7), [1])
	$6 = (*($7) + [1])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9027])
	CALL memcpy(($2 + [8]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$4 }
	$3 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$3 = int_32($2 >> [3])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [16])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $68($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [4]))
	$5 = ($2 + ($5 << [4]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [4]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9027])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [9027])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9027])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [9027])
	CALL memcpy(($1 + [48]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}