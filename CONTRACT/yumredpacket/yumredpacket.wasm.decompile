(data (i32.const 4) "\d0s\00\00")
(data (i32.const 16) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 80) "cannot create objects in table of another contract\00")
(data (i32.const 144) "cannot pass end iterator to modify\00")
(data (i32.const 192) "object passed to modify is not in multi_index\00")
(data (i32.const 240) "cannot modify objects in table of another contract\00")
(data (i32.const 304) "attempt to add asset with different symbol\00")
(data (i32.const 352) "addition underflow\00")
(data (i32.const 384) "addition overflow\00")
(data (i32.const 416) "updater cannot change primary key when modifying an object\00")
(data (i32.const 480) "write\00")
(data (i32.const 496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 560) "invalid symbol name\00")
(data (i32.const 592) "error reading iterator\00")
(data (i32.const 624) "read\00")
(data (i32.const 640) "Room Exists.\00")
(data (i32.const 656) "next primary key in table is at autoincrement limit\00")
(data (i32.const 720) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 784) "cannot decrement iterator at beginning of table\00")
(data (i32.const 832) "get\00")
(data (i32.const 848) "Account Not Found.\00")
(data (i32.const 880) "Room Not Found.\00")
(data (i32.const 896) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 960) "Insufficient Balance.\00")
(data (i32.const 992) "You\'ve Already grabbed\00")
(data (i32.const 1024) "attempt to subtract asset with different symbol\00")
(data (i32.const 1072) "subtraction underflow\00")
(data (i32.const 1104) "subtraction overflow\00")
(data (i32.const 1136) "multiplication overflow or underflow\00")
(data (i32.const 1184) "multiplication underflow\00")
(data (i32.const 1216) "multiplication overflow\00")
(data (i32.const 1248) "YUM.Games RedPacket Room Awards! ( http://yum.games/ ) \00")
(data (i32.const 1312) "yumgamegroup\00")
(data (i32.const 1328) "Red Packet -- Room: \00")
(data (i32.const 1360) " Round: \00")
(data (i32.const 1376) "active\00")
(data (i32.const 1392) "openall\00")
(data (i32.const 1400) "\80\05\00\00")
(data (i32.const 1408) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1456) "eosio.token\00")
(data (i32.const 1472) "transfer\00")
(data (i32.const 1488) "Already Opened\00")
(data (i32.const 1504) "Record Not Found\00")
(data (i32.const 1536) "YUM.Games RedPacket Best Lucky Bonus! ( http://yum.games/ ) \00")
(data (i32.const 1600) "YUM.Games RedPacket Bonus! ( http://yum.games/ ) \00")
(data (i32.const 1664) "YUM.Games RedPacket Referrer Bonus ( http://yum.games/ )\00")
(data (i32.const 1728) "player not found\00")
(data (i32.const 1760) "cannot pass end iterator to erase\00")
(data (i32.const 1808) "cannot increment end iterator\00")
(data (i32.const 1840) "object passed to erase is not in multi_index\00")
(data (i32.const 1888) "cannot erase objects in table of another contract\00")
(data (i32.const 1952) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2016) "yumgamespool\00")
(data (i32.const 2032) "onredpacket\00")
(data (i32.const 2048) "Insufficient Amount.\00")
(data (i32.const 2080) "YUM.Games RedPacket Withdraw. ( http://yum.games/ )\00")
(data (i32.const 2144) "Room not found\00")
(data (i32.const 2160) "Room is Empty\00")
(data (i32.const 2176) "Invalid\00")
(data (i32.const 2192) "yumredpacket\00")
(data (i32.const 10608) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10704) "%llu\00")
(data (i32.const 10720) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 11184) "0123456789ABCDEF")
(data (i32.const 11200) "-+   0X0x\00")
(data (i32.const 11216) "(null)\00")
(data (i32.const 11232) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 11264) "inf\00")
(data (i32.const 11280) "INF\00")
(data (i32.const 11296) "nan\00")
(data (i32.const 11312) "NAN\00")
(data (i32.const 11328) ".\00")
(data (i32.const 11344) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 11440) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "db_end_i64" (func $fimport$15 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$23 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$24 (param i32 i32)))
(import "env" "is_account" (func $fimport$25 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$30 (param i64)))
(import "env" "require_auth2" (func $fimport$31 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$32 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$33 (param i32 i32)))
(import "env" "sha256" (func $fimport$34 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$35 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$36 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN9RedPacket7depositE13transfer_args" (func $5))
(export "_ZN9RedPacket7newroomEybN5eosio5assetE" (func $12))
(export "_ZN9RedPacket4grabEyyy" (func $41))
(export "_ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $46))
(export "_ZN9RedPacket4randEy" (func $72))
(export "_ZN9RedPacket7openallEy" (func $73))
(export "_ZN9RedPacket4mineEyN5eosio5assetEb" (func $75))
(export "_ZN9RedPacket8delentryEyy" (func $80))
(export "_ZN9RedPacket4drawEyN5eosio5assetE" (func $81))
(export "_ZN9RedPacket6cancelEy" (func $82))
(export "apply" (func $84))
(export "malloc" (func $97))
(export "free" (func $100))
(export "_ZNSt3__19to_stringEy" (func $110))
(export "snprintf" (func $116))
(export "vsnprintf" (func $117))
(export "__errno_location" (func $119))
(export "vfprintf" (func $120))
(export "__lockfile" (func $122))
(export "__unlockfile" (func $123))
(export "__fwritex" (func $124))
(export "strerror" (func $126))
(export "strnlen" (func $127))
(export "wctomb" (func $128))
(export "__signbitl" (func $129))
(export "__fpclassifyl" (func $130))
(export "frexpl" (func $131))
(export "wcrtomb" (func $132))
(export "memchr" (func $133))
(export "__lctrans" (func $134))
(export "__lctrans_impl" (func $135))
(export "__mo_lookup" (func $136))
(export "strcmp" (func $137))
(export "__towrite" (func $138))
(export "memcmp" (func $139))
(export "strlen" (func $140))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $141 $82 $41 $12 $73 $80 $81 $118)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $99($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10608])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10694]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10696])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10694]) = [1]
	$7 = ($7 << [16])
	*([0] + [10696]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10696])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10696]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10694]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10694]) = [1]
	$3 = ($3 << [16])
	*([0] + [10696]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10696])
	
.LABEL $label$8
	*([0] + [10696]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [624])
	CALL memcpy(($4 + [15]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($0 + [8]) = ((int_32)*($4 + [15]) != (int_32)[0])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $96(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [624])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $38(*($1), *($0 + [12]))
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $98([2208], $0)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [624])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [624])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [252])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $102($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [248]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $102($4)
	
.LABEL $label$1
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [212])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $102($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [208]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $102($4)
	
.LABEL $label$6
	CALL $92(($0 + [168]))
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $102($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $102($4)
	
.LABEL $label$11
	$1 = *(($0 + [88]))
	if ( ($1 == 0) ){ goto $label$16 }
	$3 = ($0 + [92])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $102($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($0 + [88]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $1
	
.LABEL $label$17
	*($3) = $1
	CALL $102($4)
	
.LABEL $label$16
	CALL $93(($0 + [48]))
	return $0
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*(($2 + [80])))
	
.LABEL $label$6
	$3 = *($2 + [60])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [64])) = $3
	CALL $102($3)
	
.LABEL $label$7
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [24])) = $3
	CALL $102($3)
	
.LABEL $label$8
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [12])) = $3
	CALL $102($3)
	
.LABEL $label$9
	CALL $102($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $102($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [52])) = $3
	CALL $102($3)
	
.LABEL $label$6
	$3 = *($2 + [36])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [40])) = $3
	CALL $102($3)
	
.LABEL $label$7
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [28])) = $3
	CALL $102($3)
	
.LABEL $label$8
	CALL $102($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $102($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $101($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [10720]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $125(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [11200]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [11232]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [11238] ? [11233] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [11202] ? [11200] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [11235]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $119()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [11200]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [11200]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [11184])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [11200])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [11216] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [11200]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [11296] ? [11312] : $30 ) ? ( [11264] ? [11280] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [11200]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [11201]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [11200] ? [11205] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11184])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11184])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [11184])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([11328], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([11328], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([11328], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $125(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $125(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $125(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $125(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $125(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $125(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $125(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $125(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $125(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $121([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $121($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $121($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $39($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $104($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $101($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $104($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $102($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $103($7)
	return (unreachable)
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [11344])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [11440]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [11440]
	return .LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [240])
	$3 = *($1)
	CALL $64(($1 + [8]), [0], [0])
	CALL $64(($1 + [20]), [0], [0])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [416])
	*(($6 = $5)) = [0]
	CALL $32($6, $1)
	$4 = *($6)
	if ( ($4 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($4)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $4)
	CALL $33($6, $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$8 = *($0 + [4])
	$6 = *($8)
	$4 = ($6 + [40])
	$7 = *($4)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($6 + [24])
	$3 = CALL db_lowerbound_i64(*($5), *(($6 + [32])), (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $20($5, $3)
	*($9 + [4]) = [0]
	*($9) = $5
	$7 = *(*(CALL $21($9) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [40])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [656])
	*($1) = *($4)
	*($1 + [8]) = *(*(*($8 + [4]) + [4]))
	*($1 + [16]) = *((*(*($8 + [8])) + ((CASTING uint_32)(uint_64 ((uint_64)*(*($8 + [12])) / (uint_64)(int_64)50)) << [3])))
	*($1 + [80]) = ((uint_64)*(*($8 + [12])) / (uint_64)(int_64)50)
	$6 = *($8 + [8])
	$4 = ($1 + [24])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$3 }
	CALL $64($4, *($6), *($6 + [4]))
	
.LABEL $label$3
	$6 = *($8 + [16])
	$4 = ($1 + [36])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$4 }
	CALL $64($4, *($6), *($6 + [4]))
	
.LABEL $label$4
	$4 = *(*($8 + [20]))
	$6 = CALL $101([40])
	CALL memcpy($6, $4, [40])
	$4 = ($6 + [40])
	$5 = *($1 + [48])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($1 + [52])) = $5
	CALL $102($5)
	*(($5 = ($1 + [56]))) = [0]
	*(($1 + [48])) = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$5 = ($1 + [56])
	
.LABEL $label$5
	*($5) = $4
	*(($1 + [52])) = $4
	*(($1 + [48])) = $6
	*($1 + [72]) = *(*(*(($8 + [4])) + [4]) + [32])
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = [24]
	$4 = *(($1 + [24]))
	$6 = *(($1 + [28]))
	$5 = ($6 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$8 }
	$8 = (($5 & [-8]) + $8)
	
.LABEL $label$8
	$4 = *(($1 + [36]))
	$6 = *(($1 + [40]))
	$5 = ($6 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$10 }
	$8 = (($5 & [-8]) + $8)
	
.LABEL $label$10
	$4 = *(($1 + [48]))
	$6 = *(($1 + [52]))
	$5 = ($6 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$11:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$12 }
	$8 = (($5 & [-8]) + $8)
	
.LABEL $label$12
	$6 = ($8 + [24])
	if ( ($6 <= [513]) ){ goto $label$14 }
	$8 = CALL malloc($6)
	goto $label$13 
	
.LABEL $label$14
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$13
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $65($9, $1)
	$7 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($2 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$15 }
	CALL free($8)
	
.LABEL $label$15
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$16 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)6121367345093935104, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $68($6, $4)
	*($7 + [4]) = [0]
	*($7) = $6
	$5 = *(*(CALL $69($7) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [656])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*(*($3 + [8]) + [4]) + [32])
	*($1 + [32]) = [0]
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = $8
	$6 = ($8 + [-48])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($8 + [-15])
	CALL $70($7, $1)
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)6121367345093935104, *(*($0 + [8])), $5, $6, [33])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN9RedPacket4grabEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [336])
	*([0] + [4]) = $16
	*($16 + [312]) = $1
	*($16 + [304]) = $2
	*($16 + [296]) = $3
	CALL require_auth($2)
	$8 = *(($0 + [88]))
	$12 = *(($0 + [92]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$1 }
	$15 = ($12 + [-24])
	$13 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($15)) == (int_64)$2) ){ goto $label$1 }
	$12 = $15
	$9 = ($15 + [-24])
	$15 = $9
	if ( ((int_32)($9 + $13) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [64])
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$4), [16])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$15 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)4152997948076064768, $2)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $6($4, $15)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$4), [16])
	
.LABEL $label$3
	$5 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($5, [848])
	$7 = *(($0 + [168]))
	$13 = *(($0 + [172]))
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$5 }
	$15 = ($13 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$5 }
	$13 = $15
	$9 = ($15 + [-24])
	$15 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [144])
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$8 }
	$13 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [84]) == (int_32)$6), [16])
	*($16 + [292]) = $13
	*($16 + [288]) = $6
	$8 = (($16 + [288]) | [4])
	goto $label$7 
	
.LABEL $label$8
	$15 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$9 }
	$13 = CALL $13($6, $15)
	CALL eosio_assert(((int_32)*($13 + [84]) == (int_32)$6), [16])
	*($16 + [292]) = $13
	*($16 + [288]) = $6
	$8 = (($16 + [288]) | [4])
	goto $label$7 
	
.LABEL $label$9
	$13 = [0]
	*($16 + [292]) = [0]
	*($16 + [288]) = $6
	$8 = (($16 + [288]) | [4])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [880])
	$7 = ($12 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($13 + [48]))), [896])
	CALL eosio_assert(((int_64)*($12 + [8]) >= (int_64)*($13 + [40])), [960])
	$11 = ($13 + [12])
	$9 = *($11)
	$15 = *($13 + [8])
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( ((int_64)*($15) == (int_64)$2) ){ goto $label$10 }
	$15 = ($15 + [8])
	if ( ((int_32)$9 != (int_32)$15) ){ goto $label$11 }
	$15 = $9
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$15 == (int_32)*($11)), [992])
	$1 = *($0)
	CALL eosio_assert($5, [144])
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$4), [192])
	CALL eosio_assert(((int_64)*(($0 + [64])) == (int_64)CALL $fimport$13()), [240])
	$2 = *($12)
	$15 = ($13 + [48])
	CALL eosio_assert(((int_64)*($15) == (int_64)*(($12 + [32]))), [304])
	$3 = ((int_64)*($12 + [24]) + (int_64)*($13 + [40]))
	*($12 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($12 + [24]) < (int_64)4611686018427387904), [384])
	CALL eosio_assert(((int_64)*($15) == (int_64)*($7)), [1024])
	$3 = (int_64)
	*($12 + [8]) = $3(*($12 + [8]) - *($13 + [40])))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1072])
	CALL eosio_assert(((int_64)*($12 + [8]) < (int_64)4611686018427387904), [1104])
	CALL eosio_assert(((int_64)$2 == (int_64)*($12)), [416])
	*($16 + [256]) = (($16 + [48]) + [40])
	*($16 + [252]) = ($16 + [48])
	*($16 + [248]) = ($16 + [48])
	CALL $10(($16 + [248]), $12)
	CALL db_update_i64(*($12 + [44]), $1, ($16 + [48]), [40])
	$15 = ($0 + [80])
	if ( (uint_64)($2 <= *($15)) ){ goto $label$12 }
	*($15) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($16 + [264]) = (int_64)-1
	*($16 + [272]) = [0]
	$1 = *($16 + [304])
	$2 = *($0)
	*($16 + [248]) = $2
	*($16 + [256]) = $1
	*(($12 = ($16 + [276]))) = [0]
	*(($13 = (($16 + [248]) + [32]))) = [0]
	*($16 + [36]) = ($16 + [312])
	*($16 + [32]) = ($16 + [248])
	*($16 + [40]) = ($16 + [288])
	*($16 + [320]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$13()), [80])
	*($16 + [52]) = ($16 + [32])
	*($16 + [48]) = ($16 + [248])
	*($16 + [56]) = ($16 + [320])
	*(($15 = CALL $101([56])) + [40]) = ($16 + [248])
	CALL $42(($16 + [48]), $15)
	*($16 + [232]) = $15
	$2 = *($15)
	*($16 + [48]) = $2
	$4 = *($15 + [44])
	*($16 + [216]) = $4
	$9 = *($12)
	if ( ((uint_32)$9 >= (uint_32)*($13)) ){ goto $label$14 }
	*($9 + [8]) = $2
	*($9 + [16]) = $4
	*($16 + [232]) = [0]
	*($9) = $15
	*($12) = ($9 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $43(($16 + [272]), ($16 + [232]), ($16 + [48]), ($16 + [216]))
	
.LABEL $label$13
	$15 = *($16 + [232])
	*($16 + [232]) = [0]
	if ( ($15 == 0) ){ goto $label$15 }
	CALL $102($15)
	
.LABEL $label$15
	*($16 + [232]) = (int_64)0
	*($16 + [240]) = [0]
	$9 = *($8)
	$15 = (*(($9 + [12])) - *($9 + [8]))
	$12 = int_32($15 >> [3])
	if ( ($12 == 0) ){ goto $label$20 }
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$18 }
	$15 = CALL $101($15)
	$12 = ($15 + ($12 << [3]))
	*(($13 = (($16 + [232]) + [8]))) = $12
	*($16 + [232]) = $15
	*($16 + [236]) = $15
	$4 = *(($9 + [8]))
	$9 = (*(($9 + [12])) - $4)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$21 }
	CALL memcpy($15, $4, $9)
	$15 = (*($16 + [236]) + $9)
	*($16 + [236]) = $15
	$12 = *($13)
	
.LABEL $label$21
	if ( ((int_32)$15 == (int_32)$12) ){ goto $label$20 }
	*($15) = *($16 + [304])
	*($16 + [236]) = ($15 + [8])
	goto $label$19 
	
.LABEL $label$20
	CALL $44(($16 + [232]), ($16 + [304]))
	
.LABEL $label$19
	*($16 + [216]) = (int_64)0
	*($16 + [224]) = [0]
	$9 = *($8)
	$15 = (*(($9 + [24])) - *($9 + [20]))
	$12 = int_32($15 >> [3])
	if ( ($12 == 0) ){ goto $label$23 }
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$17 }
	$15 = CALL $101($15)
	$12 = ($15 + ($12 << [3]))
	*(($13 = ($16 + [224]))) = $12
	*($16 + [216]) = $15
	*($16 + [220]) = $15
	$4 = *(($9 + [20]))
	$9 = (*(($9 + [24])) - $4)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$24 }
	CALL memcpy($15, $4, $9)
	$15 = (*($16 + [220]) + $9)
	*($16 + [220]) = $15
	$12 = *($13)
	
.LABEL $label$24
	if ( ((int_32)$15 == (int_32)$12) ){ goto $label$23 }
	*($15) = *($16 + [296])
	*($16 + [220]) = ($15 + [8])
	goto $label$22 
	
.LABEL $label$23
	CALL $44(($16 + [216]), ($16 + [296]))
	
.LABEL $label$22
	if ( ((uint_64)(CASTING uint_64)(uint_32 int_32((*($16 + [236]) - *($16 + [232])) >> [3])) >= (uint_64)*($0 + [8])) ){ goto $label$26 }
	$15 = *($16 + [292])
	$2 = *($0)
	*($16 + [52]) = ($16 + [216])
	*($16 + [48]) = ($16 + [232])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [144])
	CALL $45($6, $15, $2, ($16 + [48]))
	goto $label$25 
	
.LABEL $label$26
	*($16 + [32]) = ((int_64)((int_64)CALL current_time() + (int_64)(CASTING int_64)(int_32 CALL $fimport$35())) + (int_64)(CASTING int_64)(int_32 CALL $fimport$36()))
	CALL sha256(($16 + [32]), [8], ($16 + [48]))
	$2 = ((uint_64)((int_64)*($16 + [48]) | (int_64)((int_64)*($16 + [49]) << (int_64)32)) % (uint_64)(int_64)250)
	*($16 + [208]) = $2
	*($16 + [204]) = (($0 + ((int_32)(CASTING uint_32)(uint_64 $2) * (int_32)[40])) + [264])
	$15 = *($8)
	$1 = *(($15 + [48]))
	$3 = *($15)
	$2 = *($15 + [40])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1216])
	*($16 + [192]) = $1
	*((($16 + [168]) + [8])) = [0]
	*($16 + [184]) = ((int_64)$2 / (int_64)50)
	*($16 + [172]) = [0]
	*($16 + [168]) = [0]
	$15 = CALL strlen([1248])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$29 }
	*($16 + [168]) = ($15 << [1])
	$9 = (($16 + [168]) | [1])
	if ( $15 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$12 = (($15 + [16]) & [-16])
	$9 = CALL $101($12)
	*($16 + [168]) = ($12 | [1])
	*($16 + [176]) = $9
	*($16 + [172]) = $15
	
.LABEL $label$28
	CALL memcpy($9, [1248], $15)
	
.LABEL $label$27
	*(($9 + $15)) = [0]
	*((($16 + [16]) + [8])) = *((($16 + [184]) + [8]))
	*($16 + [16]) = *($16 + [184])
	CALL _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $3, ($16 + [16]), ($16 + [168]))
	if ( ((*($16 + [168]) & [1]) == 0) ){ goto $label$30 }
	CALL $102(*($16 + [176]))
	
.LABEL $label$30
	$2 = (int_64)0
	$1 = (int_64)59
	$15 = [1312]
	$14 = (int_64)0
	
.LOOP $label$31:
	$3 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$32 }
	$9 = *($15)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$9 = ($9 + [165])
	goto $label$33 
	
.LABEL $label$34
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$3 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$32
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$3 | (int_64)$14)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$31 }
	$15 = *($8)
	$1 = *(($15 + [48]))
	$2 = *($15 + [40])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1216])
	*($16 + [152]) = ((int_64)((int_64)$2 * (int_64)136) / (int_64)10000)
	*($16 + [160]) = $1
	*($16 + [128]) = *(*($8))
	CALL $47(($16 + [320]), ($16 + [128]))
	$15 = CALL $108(($16 + [320]), [0], [1328])
	$9 = ($15 + [8])
	*((($16 + [32]) + [8])) = *($9)
	*($16 + [32]) = *($15)
	*($15) = [0]
	*(($15 + [4])) = [0]
	*($9) = [0]
	$15 = CALL $107(($16 + [32]), [1360])
	$9 = ($15 + [8])
	*((($16 + [48]) + [8])) = *($9)
	*($16 + [48]) = *($15)
	*($15) = [0]
	*(($15 + [4])) = [0]
	*($9) = [0]
	CALL _ZNSt3__19to_stringEy(($16 + [112]), *(*($8) + [32]))
	$15 = *($16 + [112])
	$9 = ($15 & [1])
	$15 = CALL $105(($16 + [48]), ( *($16 + [120]) ? (($16 + [112]) | [1]) : $9 ), ( *($16 + [116]) ? uint_32($15 >> [1]) : $9 ))
	$9 = ($15 + [8])
	*((($16 + [136]) + [8])) = *($9)
	*($16 + [136]) = *($15)
	*($15) = [0]
	*(($15 + [4])) = [0]
	*($9) = [0]
	*(($16 + [8])) = *($16 + [160])
	*($16) = *($16 + [152])
	CALL _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $14, $16, ($16 + [136]))
	if ( ((*($16 + [136]) & [1]) == 0) ){ goto $label$35 }
	CALL $102(*($16 + [144]))
	
.LABEL $label$35
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$36 }
	CALL $102(*(($16 + [120])))
	
.LABEL $label$36
	if ( ((*($16 + [48]) & [1]) == 0) ){ goto $label$37 }
	CALL $102(*($16 + [56]))
	
.LABEL $label$37
	if ( ((*($16 + [32]) & [1]) == 0) ){ goto $label$38 }
	CALL $102(*($16 + [40]))
	
.LABEL $label$38
	if ( ((*($16 + [320]) & [1]) == 0) ){ goto $label$39 }
	CALL $102(*($16 + [328]))
	
.LABEL $label$39
	$2 = *($0)
	*($16 + [48]) = $0
	*($16 + [52]) = ($16 + [288])
	*($16 + [56]) = ($16 + [232])
	*($16 + [60]) = ($16 + [208])
	*($16 + [64]) = ($16 + [216])
	*($16 + [68]) = ($16 + [204])
	*($16 + [320]) = $2
	CALL eosio_assert(((int_64)*($0 + [24]) == (int_64)CALL $fimport$13()), [80])
	$15 = ($0 + [24])
	*($16 + [32]) = $15
	*($16 + [36]) = ($16 + [48])
	*($16 + [40]) = ($16 + [320])
	*(($12 = CALL $101([104])) + [24 align=4]) = (int_64)0
	*($12 + [32 align=4]) = (int_64)0
	*($12 + [40 align=4]) = (int_64)0
	*($12 + [48 align=4]) = (int_64)0
	*($12 + [56]) = [0]
	*($12 + [88]) = $15
	CALL $48(($16 + [32]), $12)
	*($16 + [112]) = $12
	$2 = *($12)
	*($16 + [32]) = $2
	$9 = *($12 + [92])
	*($16 + [128]) = $9
	$13 = ($0 + [52])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [56]))) ){ goto $label$41 }
	*($15 + [8]) = $2
	*($15 + [16]) = $9
	*($16 + [112]) = [0]
	*($15) = $12
	*($13) = ($15 + [24])
	goto $label$40 
	
.LABEL $label$41
	CALL $23(($0 + [48]), ($16 + [112]), ($16 + [32]), ($16 + [128]))
	
.LABEL $label$40
	$15 = *($16 + [112])
	*($16 + [112]) = [0]
	if ( ($15 == 0) ){ goto $label$42 }
	$9 = *($15 + [48])
	if ( ($9 == 0) ){ goto $label$43 }
	*(($15 + [52])) = $9
	CALL $102($9)
	
.LABEL $label$43
	$9 = *($15 + [36])
	if ( ($9 == 0) ){ goto $label$44 }
	*(($15 + [40])) = $9
	CALL $102($9)
	
.LABEL $label$44
	$9 = *($15 + [24])
	if ( ($9 == 0) ){ goto $label$45 }
	*(($15 + [28])) = $9
	CALL $102($9)
	
.LABEL $label$45
	CALL $102($15)
	
.LABEL $label$42
	$2 = *($0)
	$15 = *($16 + [292])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [144])
	CALL $49($6, $15, $2)
	$2 = CALL current_time()
	*(($16 + [76])) = [0]
	*(($16 + [80])) = [0]
	*($16 + [60]) = [0]
	*($16 + [64]) = [0]
	*($16 + [68]) = [0]
	*($16 + [72]) = [0]
	*($16 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [84]) = [0]
	*(($16 + [88])) = [0]
	*(($16 + [92])) = [0]
	*($16 + [96]) = [0]
	*(($16 + [100])) = [0]
	*(($16 + [104])) = [0]
	*($16 + [112]) = *($12)
	$13 = ($16 + [84])
	$10 = *($0)
	$2 = (int_64)0
	$3 = (int_64)59
	$15 = [1376]
	$14 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$51 }
	$9 = *($15)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$9 = ($9 + [165])
	goto $label$49 
	
.LABEL $label$51
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$47
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$1 | (int_64)$14)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$46 }
	*($16 + [40]) = $14
	*($16 + [32]) = $10
	$2 = (int_64)0
	$3 = (int_64)59
	$15 = [1392]
	$14 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$2 > (uint_64)(int_64)6) ){ goto $label$57 }
	$9 = *($15)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$9 = ($9 + [165])
	goto $label$55 
	
.LABEL $label$57
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$53
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$1 | (int_64)$14)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$52 }
	*($16 + [320]) = $14
	CALL $50($13, ($16 + [32]), $0, ($16 + [320]), ($16 + [112]))
	$2 = *($0)
	$1 = *($12)
	*(($16 + [68])) = [1]
	*($16 + [40]) = (int_64)0
	*($16 + [32]) = $1
	CALL $51(($16 + [320]), ($16 + [48]))
	$15 = *($16 + [320])
	CALL send_deferred(($16 + [32]), $2, $15, (*($16 + [324]) - $15), [0])
	$15 = *($16 + [320])
	if ( ($15 == 0) ){ goto $label$58 }
	*($16 + [324]) = $15
	CALL $102($15)
	
.LABEL $label$58
	CALL $52(($16 + [48]))
	
.LABEL $label$25
	CALL $53($0, *($16 + [312]))
	CALL $16($0, [0])
	$15 = *($16 + [216])
	if ( ($15 == 0) ){ goto $label$59 }
	*($16 + [220]) = $15
	CALL $102($15)
	
.LABEL $label$59
	$15 = *($16 + [232])
	if ( ($15 == 0) ){ goto $label$60 }
	*($16 + [236]) = $15
	CALL $102($15)
	
.LABEL $label$60
	$9 = *($16 + [272])
	if ( ($9 == 0) ){ goto $label$61 }
	$12 = ($16 + [276])
	$15 = *($12)
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$63 }
	
.LOOP $label$64:
	$15 = ($15 + [-24])
	$0 = *($15)
	*($15) = [0]
	if ( ($0 == 0) ){ goto $label$65 }
	CALL $102($0)
	
.LABEL $label$65
	if ( ((int_32)$9 != (int_32)$15) ){ goto $label$64 }
	$15 = *(($16 + [272]))
	goto $label$62 
	
.LABEL $label$63
	$15 = $9
	
.LABEL $label$62
	*($12) = $9
	CALL $102($15)
	
.LABEL $label$61
	*([0] + [4]) = ($16 + [336])
	return (unreachable)
	
.LABEL $label$18
	CALL $113(($16 + [232]))
	
.LABEL $label$17
	CALL $113(($16 + [216]))
	
.LABEL $label$16
	CALL $103(($16 + [168]))
	(unreachable)
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $101($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $102($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $101([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1400]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $115($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $104($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$4 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1376]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1456]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1472]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$18 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	*((($12 + [8]) + [28])) = *(($2 + [12]))
	*((($12 + [8]) + [24])) = *(($2 + [8]))
	*((($12 + [8]) + [20])) = *(($2 + [4]))
	*($12 + [16]) = $1
	*($12 + [8]) = $4
	*($12 + [24]) = *($2)
	CALL $114((($12 + [8]) + [32]), $3)
	*($12 + [64]) = $11
	*($12 + [56]) = $10
	*(($0 = CALL $101([16]))) = $4
	*($0 + [8]) = $8
	*((($12 + [56]) + [32])) = [0]
	$5 = ($0 + [16])
	*((($12 + [56]) + [24])) = $5
	*((($12 + [56]) + [20])) = $5
	*($12 + [72]) = $0
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$0 = *($12 + [40])
	$5 = ( *((($12 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($5 + [32])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = (($12 + [56]) + [28])
	
.LOOP $label$19:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$19 }
	if ( ($0 == 0) ){ goto $label$21 }
	CALL $40($5, $0)
	$5 = *(($12 + [88]))
	$0 = *(($12 + [84]))
	goto $label$20 
	
.LABEL $label$21
	$5 = [0]
	$0 = [0]
	
.LABEL $label$20
	*($12 + [100]) = $0
	*($12 + [96]) = $0
	*($12 + [104]) = $5
	*($12 + [112]) = ($12 + [96])
	*($12 + [120]) = ($12 + [8])
	CALL $66(($12 + [120]), ($12 + [112]))
	CALL $67(($12 + [96]), ($12 + [56]))
	$0 = *($12 + [96])
	CALL send_inline($0, (*($12 + [100]) - $0))
	$0 = *($12 + [96])
	if ( ($0 == 0) ){ goto $label$22 }
	*($12 + [100]) = $0
	CALL $102($0)
	
.LABEL $label$22
	$0 = *($12 + [84])
	if ( ($0 == 0) ){ goto $label$23 }
	*(($12 + [88])) = $0
	CALL $102($0)
	
.LABEL $label$23
	$0 = *($12 + [72])
	if ( ($0 == 0) ){ goto $label$24 }
	*(($12 + [76])) = $0
	CALL $102($0)
	
.LABEL $label$24
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$25 }
	CALL $102(*(($12 + [48])))
	
.LABEL $label$25
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [240])
	$4 = *($1)
	$6 = *($3)
	$5 = ($1 + [8])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	CALL $64($5, *($6), *($6 + [4]))
	
.LABEL $label$1
	$3 = *($3 + [4])
	$6 = ($1 + [20])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$2 }
	CALL $64($6, *($3), *($3 + [4]))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [416])
	*($7) = [0]
	CALL $32($7, $1)
	$6 = *($7)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($3 + $6)
	CALL $33($7, $1)
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $101(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $102($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$4 = *($4)
	*($1 + [8]) = *($4 + [16])
	*(($1 + [16])) = *(($4 + [24]))
	CALL eosio_assert([1], [496])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($5 + [-8])
	CALL $10($6, $1)
	$3 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4152997948076064768, *(*($0 + [8])), $3, $4, [40])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $101([56])
	$4 = CALL $7($6)
	*($6 + [40]) = $0
	CALL $11(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $7 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [560])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN9RedPacket7depositE13transfer_args (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$2 = *($1)
	$3 = *(($0 + [88]))
	$8 = *(($0 + [92]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [64])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [16])
	$9 = *($0)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)4152997948076064768, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $6($5, $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [16])
	$9 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [144])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [192])
	CALL eosio_assert(((int_64)*(($0 + [64])) == (int_64)CALL $fimport$13()), [240])
	$2 = *($7)
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)*(($7 + [16]))), [304])
	$6 = ((int_64)*($7 + [8]) + (int_64)*($1 + [16]))
	*($7 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [384])
	CALL eosio_assert(((int_64)$2 == (int_64)*($7)), [416])
	*($10 + [72]) = (($10 + [16]) + [40])
	*($10 + [68]) = ($10 + [16])
	*($10 + [64]) = ($10 + [16])
	CALL $10(($10 + [64]), $7)
	CALL db_update_i64(*($7 + [44]), $9, ($10 + [16]), [40])
	$7 = ($0 + [80])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$9 = *($0)
	
.LABEL $label$4
	*($10) = $1
	*($10 + [64]) = $9
	CALL eosio_assert(((int_64)*(($0 + [64])) == (int_64)CALL $fimport$13()), [80])
	*($10 + [16]) = $5
	*($10 + [20]) = $10
	*($10 + [24]) = ($10 + [64])
	$7 = CALL $101([56])
	CALL $7($7)
	*($7 + [40]) = $5
	CALL $8(($10 + [16]), $7)
	*($10 + [8]) = $7
	$2 = *($7)
	*($10 + [16]) = $2
	$8 = *($7 + [44])
	*($10 + [4]) = $8
	$4 = ($0 + [92])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [96]))) ){ goto $label$9 }
	*($5 + [8]) = $2
	*($5 + [16]) = $8
	*($10 + [8]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [88]), ($10 + [8]), ($10 + [16]), ($10 + [4]))
	
.LABEL $label$8
	$7 = *($10 + [8])
	*($10 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $102($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$6 = *($0 + [4])
	*($1) = *(*($6))
	*($1 + [32]) = (int_64)1
	$2 = *($0)
	*($1 + [56]) = *(*($6 + [4]))
	$6 = *($6 + [8])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	*(($6 = $5)) = [0]
	CALL $32($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $33($6, $1)
	$4 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($2 + [8]), (int_64)-4816269947984412672, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $101(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $31(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [15]) = $1
	$1 = ($0 + [184])
	$4 = CALL db_lowerbound_i64(*($0 + [184]), *(($0 + [192])), (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($1, $4)
	goto $label$1 
	
.LABEL $label$2
	$3 = *($0)
	*($5 + [24]) = $0
	CALL $18(($5 + [16]), $1, $3, ($5 + [24]))
	
.LABEL $label$1
	$4 = [0]
	$2 = CALL db_lowerbound_i64(*(($0 + [184])), *(($0 + [192])), (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $17($1, $2)
	
.LABEL $label$3
	$3 = *($0)
	*($5 + [20]) = $0
	*($5 + [16]) = ($5 + [15])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [144])
	CALL $19($1, $4, $3, ($5 + [16]))
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $101([48])) + [32]) = $0
	CALL $30(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $28(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN9RedPacket7newroomEybN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [16]) = $1
	*($8 + [15]) = $2
	CALL require_auth(*($0))
	$4 = *(($0 + [168]))
	$7 = *(($0 + [172]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [144])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [84]) == (int_32)$5), [16])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$6 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $13($5, $6)
	CALL eosio_assert(((int_32)*($2 + [84]) == (int_32)$5), [16])
	
.LABEL $label$3
	CALL eosio_assert(($2 == 0), [640])
	$1 = *($0)
	*($8 + [8]) = $3
	*($8 + [4]) = ($8 + [15])
	*($8) = ($8 + [16])
	*($8 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [144])) == (int_64)CALL $fimport$13()), [80])
	*($8 + [32]) = $5
	*($8 + [36]) = $8
	*($8 + [40]) = ($8 + [56])
	*(($6 = CALL $101([96])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (int_64)5462355
	$2 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	CALL eosio_assert($7, [560])
	*($6 + [60 align=4]) = (int_64)0
	*($6 + [68 align=4]) = (int_64)0
	*($6 + [76 align=4]) = (int_64)0
	*($6 + [84]) = $5
	CALL $14(($8 + [32]), $6)
	*($8 + [48]) = $6
	$1 = *($6)
	*($8 + [32]) = $1
	$7 = *($6 + [88])
	*($8 + [28]) = $7
	$5 = ($0 + [172])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [176]))) ){ goto $label$11 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($8 + [48]) = [0]
	*($2) = $6
	*($5) = ($2 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $15(($0 + [168]), ($8 + [48]), ($8 + [32]), ($8 + [28]))
	
.LABEL $label$10
	$2 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$13 }
	CALL $102(*(($2 + [80])))
	
.LABEL $label$13
	$6 = *($2 + [60])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($2 + [64])) = $6
	CALL $102($6)
	
.LABEL $label$14
	$6 = *($2 + [20])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($2 + [24])) = $6
	CALL $102($6)
	
.LABEL $label$15
	$6 = *($2 + [8])
	if ( ($6 == 0) ){ goto $label$16 }
	*(($2 + [12])) = $6
	CALL $102($6)
	
.LABEL $label$16
	CALL $102($2)
	
.LABEL $label$12
	CALL $16($0, [1])
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $101([96])
	$4 = CALL $36($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$1 = *($6 + [88])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $6
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$6 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((*($6 + [72]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($6 + [80])))
	
.LABEL $label$10
	$7 = *($6 + [60])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($6 + [64])) = $7
	CALL $102($7)
	
.LABEL $label$11
	$7 = *($6 + [20])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($6 + [24])) = $7
	CALL $102($7)
	
.LABEL $label$12
	$7 = *($6 + [8])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($6 + [12])) = $7
	CALL $102($7)
	
.LABEL $label$13
	CALL $102($6)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN9RedPacket4mineEyN5eosio5assetEb (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$4 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1376]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$9 = (int_64)59
	$0 = [2016]
	$10 = (int_64)0
	
.LOOP $label$7:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [2032]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$11 = ((int_64)$9 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$11 }
	*((($12 + [8]) + [20])) = *(($2 + [12]))
	*((($12 + [8]) + [16])) = *(($2 + [8]))
	*((($12 + [8]) + [12])) = *(($2 + [4]))
	*($12 + [8]) = $1
	*($12 + [16]) = *($2)
	*($12 + [32]) = $3
	*($12 + [40]) = $10
	*($12 + [48]) = $11
	*(($0 = CALL $101([16]))) = $4
	*($0 + [8]) = $8
	*(($5 = ($12 + [72]))) = [0]
	$2 = ($0 + [16])
	*(($12 + [64])) = $2
	*((($12 + [40]) + [20])) = $2
	*($12 + [56]) = $0
	*($12 + [68]) = [0]
	*(($12 + [76])) = [0]
	CALL $40(($12 + [68]), [25])
	$0 = *($5)
	$5 = *($12 + [68])
	*($12 + [84]) = $5
	*($12 + [80]) = $5
	*($12 + [88]) = $0
	*($12 + [96]) = ($12 + [80])
	*($12 + [104]) = ($12 + [8])
	CALL $79(($12 + [104]), ($12 + [96]))
	CALL $67(($12 + [80]), ($12 + [40]))
	$0 = *($12 + [80])
	CALL send_inline($0, (*($12 + [84]) - $0))
	$0 = *($12 + [80])
	if ( ($0 == 0) ){ goto $label$17 }
	*($12 + [84]) = $0
	CALL $102($0)
	
.LABEL $label$17
	$0 = *($12 + [68])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($12 + [72])) = $0
	CALL $102($0)
	
.LABEL $label$18
	$0 = *($12 + [56])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($12 + [60])) = $0
	CALL $102($0)
	
.LABEL $label$19
	*([0] + [4]) = ($12 + [112])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [80])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $101([48])) + [32]) = $1
	CALL $27(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $28(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $102($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [240])
	$7 = *($3 + [4])
	$4 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$1 }
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	
.LABEL $label$1
	$3 = ($7 + [40])
	$8 = *($3)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$2 }
	$8 = (int_64)0
	$5 = ($7 + [24])
	$6 = CALL db_lowerbound_i64(*($5), *(($7 + [32])), (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $20($5, $6)
	*($9 + [12]) = [0]
	*($9 + [8]) = $5
	$8 = *(*(CALL $21(($9 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*(($7 + [40])) = $8
	
.LABEL $label$2
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [656])
	*($1 + [24]) = *($3)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [416])
	$7 = $10
	$3 = ($7 + [-32])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [480])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($7 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($7 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($7 + [-8]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $3, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [480])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [480])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [480])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [480])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $101(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $101([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $40(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [480])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $102($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $102($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $102($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $58($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $40($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $59($4, $1)
	CALL $61(CALL $60(CALL $60($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $102($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $102($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $102($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $102($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $102($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $102($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $102($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $102($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = $1
	$2 = *(($0 + [248]))
	$6 = *(($0 + [252]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [224])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$7 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$5), [16])
	$1 = *($0)
	if ( $4 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)-4816269514841391104, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $54($5, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$5), [16])
	$1 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [144])
	CALL $56($5, $4, $1, ($7 + [8]))
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0)
	
.LABEL $label$4
	*($7 + [16]) = ($7 + [24])
	CALL $55(($7 + [8]), $5, $1, ($7 + [16]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $101([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [624])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [624])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [480])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [240])
	$4 = *($1)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [416])
	CALL eosio_assert([1], [480])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [7]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $101($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $101($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $102($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [10704], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $111(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $111(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $112($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC __errno_location ()
{
	return [13244]
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4157502641443700736)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [720])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [720])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $17(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [80])
	*(($4 = CALL $101([32])) + [16]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [480])
	CALL memcpy(($8 + [16]), $4, [8])
	CALL eosio_assert([1], [480])
	CALL memcpy((($8 + [16]) | [8]), ($4 + [8]), [8])
	$5 = *($4)
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4816269514841391104, $2, $5, ($8 + [16]), [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [20])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $102($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	return CALL $105($0, $1, CALL $140($1))
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $101($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $102($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [92]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5003134530400288768)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [720])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [720])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $20(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $101([104])) + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [56]) = [0]
	*($6 + [88]) = $0
	CALL $22(($8 + [32]), $6)
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [52])) = $7
	CALL $102($7)
	
.LABEL $label$10
	$7 = *($4 + [36])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [40])) = $7
	CALL $102($7)
	
.LABEL $label$11
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [28])) = $7
	CALL $102($7)
	
.LABEL $label$12
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $101(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $24(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $25(CALL $25(CALL $25($0, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [832])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $26($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [624])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [52])) = $3
	CALL $102($3)
	
.LABEL $label$4
	$3 = *($2 + [36])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [40])) = $3
	CALL $102($3)
	
.LABEL $label$5
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [28])) = $3
	CALL $102($3)
	
.LABEL $label$6
	CALL $102($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $102($2)
	
.LABEL $label$7
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [16])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$8 = *(*($0 + [4]))
	$6 = ($8 + [200])
	$5 = *($6)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$3 = ($8 + [184])
	$4 = CALL db_lowerbound_i64(*($3), *(($8 + [192])), (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($3, $4)
	*($9 + [12]) = [0]
	*($9 + [8]) = $3
	$5 = *(*(CALL $29(($9 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [200])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [656])
	$5 = *($6)
	*($1 + [8]) = (int_64)0
	*($1) = $5
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$7 = $7
	$8 = ($7 + [-32])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [480])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($7 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($7 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($7 + [-8]), ($1 + [24]), [8])
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-4157502641443700736, *(*($0 + [8])), $5, $8, [32])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $101(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $102($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $106($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6121367345093935104)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [720])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [720])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $68(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $101([56])) + [40]) = $0
	CALL $71(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $109($0, $1, $2, CALL $140($2))
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $34(CALL $34(CALL $34($0, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $102($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $101($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $113($0)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $40($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [480])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [480])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $62(CALL $63($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $35(*($1), ($0 + [32]))
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [480])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $62($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [480])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [480])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $62(CALL $63($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [480])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [480])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [480])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10700])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10592])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10400]
	$1 = (((int_32)$2 * (int_32)[12]) + [10400])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $103 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $102 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $106($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $101(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $102($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [624])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [560])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [624])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [624])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [624])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [624])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [624])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [624])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*((($9 + [16]) + [24])) = (int_64)1398362884
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	*($9 + [32]) = (int_64)0
	CALL eosio_assert([1], [496])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [560])
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = ($9 + [16])
	CALL $94(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($9 + [60])) = *(($9 + [44]))
	$7 = *((($9 + [16]) + [8]))
	*(($1 = (($9 + [48]) + [8]))) = *(($9 + [40]))
	$6 = *($9 + [16])
	*($9 + [48]) = *($9 + [32])
	*($9 + [52]) = *(($9 + [36]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*(($9 + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9) = $4
	CALL void $1((int_32 $6), (int_64 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 $9), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $95($0, $2, $1)
	*([0] + [4]) = $3
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [10464])
	*([0] + [4]) = $9
	*($9 + [208]) = (int_64)5
	*($9 + [200]) = $0
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [2192]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*(($9 + [232])) = $0
	*(($9 + [240])) = (int_64)-1
	$7 = (int_64)0
	*(($9 + [248])) = (int_64)0
	*(($9 + [256])) = [0]
	*($9 + [224]) = $0
	*($9 + [216]) = $5
	*($9 + [264]) = $0
	*(($9 + [272])) = $0
	*(($9 + [280])) = (int_64)-1
	*(($9 + [288])) = [0]
	*(($9 + [292])) = [0]
	*(($9 + [296])) = [0]
	*($9 + [304]) = $0
	*(($9 + [312])) = $0
	*(($9 + [320])) = (int_64)-1
	*(($9 + [328])) = [0]
	*(($9 + [332])) = [0]
	*(($9 + [336])) = [0]
	*($9 + [344]) = $0
	*(($9 + [352])) = $0
	*(($9 + [360])) = (int_64)-1
	*(($9 + [368])) = [0]
	*(($9 + [372])) = [0]
	*(($9 + [376])) = [0]
	*($9 + [384]) = $0
	*(($9 + [392])) = $0
	*(($9 + [400])) = (int_64)-1
	*((($9 + [200]) + [208])) = [0]
	*(($9 + [412])) = [0]
	*(($9 + [416])) = [0]
	*($9 + [424]) = $0
	*(($9 + [432])) = $0
	*(($9 + [440])) = (int_64)-1
	*(($9 + [448])) = [0]
	*(($9 + [452])) = [0]
	*(($9 + [456])) = [0]
	*($9 + [464]) = (int_64)181
	*(($9 + [472])) = (int_64)3309
	*(($9 + [480])) = (int_64)2564
	*(($9 + [488])) = (int_64)1279
	*(($9 + [496])) = (int_64)2167
	*(($9 + [504])) = (int_64)980
	*(($9 + [512])) = (int_64)1090
	*(($9 + [520])) = (int_64)3927
	*(($9 + [528])) = (int_64)2218
	*(($9 + [536])) = (int_64)1285
	*(($9 + [544])) = (int_64)400
	*(($9 + [552])) = (int_64)1094
	*(($9 + [560])) = (int_64)2147
	*(($9 + [568])) = (int_64)2534
	*(($9 + [576])) = (int_64)3325
	*(($9 + [584])) = (int_64)1251
	*(($9 + [592])) = (int_64)2521
	*(($9 + [600])) = (int_64)1766
	*(($9 + [608])) = (int_64)1756
	*(($9 + [616])) = (int_64)2206
	*(($9 + [624])) = (int_64)743
	*(($9 + [632])) = (int_64)3698
	*(($9 + [640])) = (int_64)951
	*(($9 + [648])) = (int_64)1643
	*(($9 + [656])) = (int_64)2465
	*(($9 + [664])) = (int_64)626
	*(($9 + [672])) = (int_64)2666
	*(($9 + [680])) = (int_64)1215
	*(($9 + [688])) = (int_64)2200
	*(($9 + [696])) = (int_64)2793
	*(($9 + [704])) = (int_64)387
	*(($9 + [712])) = (int_64)2878
	*(($9 + [720])) = (int_64)2744
	*(($9 + [728])) = (int_64)945
	*(($9 + [736])) = (int_64)2546
	*(($9 + [744])) = (int_64)807
	*(($9 + [752])) = (int_64)1506
	*(($9 + [760])) = (int_64)1939
	*(($9 + [768])) = (int_64)1330
	*(($9 + [776])) = (int_64)3918
	*(($9 + [784])) = (int_64)563
	*(($9 + [792])) = (int_64)1165
	*(($9 + [800])) = (int_64)2229
	*(($9 + [808])) = (int_64)3856
	*(($9 + [816])) = (int_64)1687
	*(($9 + [824])) = (int_64)218
	*(($9 + [832])) = (int_64)2886
	*(($9 + [840])) = (int_64)2660
	*(($9 + [848])) = (int_64)1002
	*(($9 + [856])) = (int_64)2734
	*(($9 + [864])) = (int_64)643
	*(($9 + [872])) = (int_64)4162
	*(($9 + [880])) = (int_64)652
	*(($9 + [888])) = (int_64)1151
	*(($9 + [896])) = (int_64)2892
	*(($9 + [904])) = (int_64)332
	*(($9 + [912])) = (int_64)2243
	*(($9 + [920])) = (int_64)1842
	*(($9 + [928])) = (int_64)2664
	*(($9 + [936])) = (int_64)2419
	*(($9 + [944])) = (int_64)928
	*(($9 + [952])) = (int_64)2096
	*(($9 + [960])) = (int_64)2656
	*(($9 + [968])) = (int_64)2073
	*(($9 + [976])) = (int_64)1747
	*(($9 + [984])) = (int_64)800
	*(($9 + [992])) = (int_64)2422
	*(($9 + [1000])) = (int_64)1757
	*(($9 + [1008])) = (int_64)1816
	*(($9 + [1016])) = (int_64)2705
	*(($9 + [1024])) = (int_64)112
	*(($9 + [1032])) = (int_64)2098
	*(($9 + [1040])) = (int_64)2249
	*(($9 + [1048])) = (int_64)2090
	*(($9 + [1056])) = (int_64)2951
	*(($9 + [1064])) = (int_64)360
	*(($9 + [1072])) = (int_64)1640
	*(($9 + [1080])) = (int_64)1246
	*(($9 + [1088])) = (int_64)2982
	*(($9 + [1096])) = (int_64)3272
	*(($9 + [1104])) = (int_64)1228
	*(($9 + [1112])) = (int_64)1536
	*(($9 + [1120])) = (int_64)1746
	*(($9 + [1128])) = (int_64)3099
	*(($9 + [1136])) = (int_64)1891
	*(($9 + [1144])) = (int_64)1024
	*(($9 + [1152])) = (int_64)1627
	*(($9 + [1160])) = (int_64)1738
	*(($9 + [1168])) = (int_64)2848
	*(($9 + [1176])) = (int_64)2263
	*(($9 + [1184])) = (int_64)678
	*(($9 + [1192])) = (int_64)3507
	*(($9 + [1200])) = (int_64)950
	*(($9 + [1208])) = (int_64)2859
	*(($9 + [1216])) = (int_64)1506
	*(($9 + [1224])) = (int_64)931
	*(($9 + [1232])) = (int_64)2586
	*(($9 + [1240])) = (int_64)1918
	*(($9 + [1248])) = (int_64)1680
	*(($9 + [1256])) = (int_64)2385
	*(($9 + [1264])) = (int_64)294
	*(($9 + [1272])) = (int_64)1897
	*(($9 + [1280])) = (int_64)2589
	*(($9 + [1288])) = (int_64)2374
	*(($9 + [1296])) = (int_64)2346
	*(($9 + [1304])) = (int_64)704
	*(($9 + [1312])) = (int_64)1100
	*(($9 + [1320])) = (int_64)2703
	*(($9 + [1328])) = (int_64)2242
	*(($9 + [1336])) = (int_64)2751
	*(($9 + [1344])) = (int_64)455
	*(($9 + [1352])) = (int_64)2464
	*(($9 + [1360])) = (int_64)1257
	*(($9 + [1368])) = (int_64)3658
	*(($9 + [1376])) = (int_64)1666
	*(($9 + [1384])) = (int_64)784
	*(($9 + [1392])) = (int_64)1948
	*(($9 + [1400])) = (int_64)2807
	*(($9 + [1408])) = (int_64)2753
	*(($9 + [1416])) = (int_64)1208
	*(($9 + [1424])) = (int_64)926
	*(($9 + [1432])) = (int_64)1668
	*(($9 + [1440])) = (int_64)2152
	*(($9 + [1448])) = (int_64)2310
	*(($9 + [1456])) = (int_64)2444
	*(($9 + [1464])) = (int_64)685
	*(($9 + [1472])) = (int_64)2045
	*(($9 + [1480])) = (int_64)2604
	*(($9 + [1488])) = (int_64)1986
	*(($9 + [1496])) = (int_64)2180
	*(($9 + [1504])) = (int_64)418
	*(($9 + [1512])) = (int_64)1311
	*(($9 + [1520])) = (int_64)3521
	*(($9 + [1528])) = (int_64)1070
	*(($9 + [1536])) = (int_64)3180
	*(($9 + [1544])) = (int_64)1117
	*(($9 + [1552])) = (int_64)1677
	*(($9 + [1560])) = (int_64)1261
	*(($9 + [1568])) = (int_64)2983
	*(($9 + [1576])) = (int_64)2462
	*(($9 + [1584])) = (int_64)407
	*(($9 + [1592])) = (int_64)3188
	*(($9 + [1600])) = (int_64)2428
	*(($9 + [1608])) = (int_64)2855
	*(($9 + [1616])) = (int_64)622
	*(($9 + [1624])) = (int_64)893
	*(($9 + [1632])) = (int_64)2622
	*(($9 + [1640])) = (int_64)1884
	*(($9 + [1648])) = (int_64)1527
	*(($9 + [1656])) = (int_64)2574
	*(($9 + [1664])) = (int_64)817
	*(($9 + [1672])) = (int_64)1884
	*(($9 + [1680])) = (int_64)2448
	*(($9 + [1688])) = (int_64)2652
	*(($9 + [1696])) = (int_64)1699
	*(($9 + [1704])) = (int_64)740
	*(($9 + [1712])) = (int_64)2533
	*(($9 + [1720])) = (int_64)1578
	*(($9 + [1728])) = (int_64)1860
	*(($9 + [1736])) = (int_64)2789
	*(($9 + [1744])) = (int_64)438
	*(($9 + [1752])) = (int_64)3362
	*(($9 + [1760])) = (int_64)1038
	*(($9 + [1768])) = (int_64)1300
	*(($9 + [1776])) = (int_64)3362
	*(($9 + [1784])) = (int_64)142
	*(($9 + [1792])) = (int_64)2902
	*(($9 + [1800])) = (int_64)2207
	*(($9 + [1808])) = (int_64)2605
	*(($9 + [1816])) = (int_64)1644
	*(($9 + [1824])) = (int_64)572
	*(($9 + [1832])) = (int_64)2479
	*(($9 + [1840])) = (int_64)1689
	*(($9 + [1848])) = (int_64)3658
	*(($9 + [1856])) = (int_64)1102
	*(($9 + [1864])) = (int_64)783
	*(($9 + [1872])) = (int_64)2551
	*(($9 + [1880])) = (int_64)2604
	*(($9 + [1888])) = (int_64)1432
	*(($9 + [1896])) = (int_64)2130
	*(($9 + [1904])) = (int_64)722
	*(($9 + [1912])) = (int_64)1725
	*(($9 + [1920])) = (int_64)2812
	*(($9 + [1928])) = (int_64)1330
	*(($9 + [1936])) = (int_64)2911
	*(($9 + [1944])) = (int_64)1678
	*(($9 + [1952])) = (int_64)1810
	*(($9 + [1960])) = (int_64)2050
	*(($9 + [1968])) = (int_64)2243
	*(($9 + [1976])) = (int_64)1719
	*(($9 + [1984])) = (int_64)304
	*(($9 + [1992])) = (int_64)1892
	*(($9 + [2000])) = (int_64)2449
	*(($9 + [2008])) = (int_64)2523
	*(($9 + [2016])) = (int_64)2332
	*(($9 + [2024])) = (int_64)1256
	*(($9 + [2032])) = (int_64)2029
	*(($9 + [2040])) = (int_64)2215
	*(($9 + [2048])) = (int_64)2231
	*(($9 + [2056])) = (int_64)1769
	*(($9 + [2064])) = (int_64)1272
	*(($9 + [2072])) = (int_64)2229
	*(($9 + [2080])) = (int_64)2868
	*(($9 + [2088])) = (int_64)1422
	*(($9 + [2096])) = (int_64)1709
	*(($9 + [2104])) = (int_64)413
	*(($9 + [2112])) = (int_64)628
	*(($9 + [2120])) = (int_64)1177
	*(($9 + [2128])) = (int_64)3300
	*(($9 + [2136])) = (int_64)3982
	*(($9 + [2144])) = (int_64)1051
	*(($9 + [2152])) = (int_64)1816
	*(($9 + [2160])) = (int_64)2619
	*(($9 + [2168])) = (int_64)2773
	*(($9 + [2176])) = (int_64)1241
	*(($9 + [2184])) = (int_64)635
	*(($9 + [2192])) = (int_64)1754
	*(($9 + [2200])) = (int_64)2696
	*(($9 + [2208])) = (int_64)1704
	*(($9 + [2216])) = (int_64)2711
	*(($9 + [2224])) = (int_64)503
	*(($9 + [2232])) = (int_64)2223
	*(($9 + [2240])) = (int_64)1646
	*(($9 + [2248])) = (int_64)4355
	*(($9 + [2256])) = (int_64)773
	*(($9 + [2264])) = (int_64)232
	*(($9 + [2272])) = (int_64)3634
	*(($9 + [2280])) = (int_64)488
	*(($9 + [2288])) = (int_64)3221
	*(($9 + [2296])) = (int_64)1925
	*(($9 + [2304])) = (int_64)689
	*(($9 + [2312])) = (int_64)2066
	*(($9 + [2320])) = (int_64)1830
	*(($9 + [2328])) = (int_64)3197
	*(($9 + [2336])) = (int_64)1718
	*(($9 + [2344])) = (int_64)1398
	*(($9 + [2352])) = (int_64)1878
	*(($9 + [2360])) = (int_64)2127
	*(($9 + [2368])) = (int_64)1619
	*(($9 + [2376])) = (int_64)2478
	*(($9 + [2384])) = (int_64)309
	*(($9 + [2392])) = (int_64)1881
	*(($9 + [2400])) = (int_64)2509
	*(($9 + [2408])) = (int_64)1919
	*(($9 + [2416])) = (int_64)2882
	*(($9 + [2424])) = (int_64)202
	*(($9 + [2432])) = (int_64)2403
	*(($9 + [2440])) = (int_64)1800
	*(($9 + [2448])) = (int_64)4762
	*(($9 + [2456])) = (int_64)333
	*(($9 + [2464])) = (int_64)2564
	*(($9 + [2472])) = (int_64)763
	*(($9 + [2480])) = (int_64)2043
	*(($9 + [2488])) = (int_64)1935
	*(($9 + [2496])) = (int_64)2195
	*(($9 + [2504])) = (int_64)2445
	*(($9 + [2512])) = (int_64)608
	*(($9 + [2520])) = (int_64)1937
	*(($9 + [2528])) = (int_64)2142
	*(($9 + [2536])) = (int_64)2368
	*(($9 + [2544])) = (int_64)1783
	*(($9 + [2552])) = (int_64)800
	*(($9 + [2560])) = (int_64)1497
	*(($9 + [2568])) = (int_64)2369
	*(($9 + [2576])) = (int_64)3051
	*(($9 + [2584])) = (int_64)1781
	*(($9 + [2592])) = (int_64)1066
	*(($9 + [2600])) = (int_64)1993
	*(($9 + [2608])) = (int_64)2372
	*(($9 + [2616])) = (int_64)2288
	*(($9 + [2624])) = (int_64)3039
	*(($9 + [2632])) = (int_64)1028
	*(($9 + [2640])) = (int_64)1192
	*(($9 + [2648])) = (int_64)1710
	*(($9 + [2656])) = (int_64)2531
	*(($9 + [2664])) = (int_64)3002
	*(($9 + [2672])) = (int_64)1279
	*(($9 + [2680])) = (int_64)1346
	*(($9 + [2688])) = (int_64)2266
	*(($9 + [2696])) = (int_64)1607
	*(($9 + [2704])) = (int_64)2645
	*(($9 + [2712])) = (int_64)1558
	*(($9 + [2720])) = (int_64)1633
	*(($9 + [2728])) = (int_64)1698
	*(($9 + [2736])) = (int_64)1966
	*(($9 + [2744])) = (int_64)2586
	*(($9 + [2752])) = (int_64)488
	*(($9 + [2760])) = (int_64)2932
	*(($9 + [2768])) = (int_64)2586
	*(($9 + [2776])) = (int_64)908
	*(($9 + [2784])) = (int_64)2431
	*(($9 + [2792])) = (int_64)735
	*(($9 + [2800])) = (int_64)2012
	*(($9 + [2808])) = (int_64)1688
	*(($9 + [2816])) = (int_64)2634
	*(($9 + [2824])) = (int_64)3135
	*(($9 + [2832])) = (int_64)497
	*(($9 + [2840])) = (int_64)1741
	*(($9 + [2848])) = (int_64)2613
	*(($9 + [2856])) = (int_64)1514
	*(($9 + [2864])) = (int_64)4700
	*(($9 + [2872])) = (int_64)377
	*(($9 + [2880])) = (int_64)1366
	*(($9 + [2888])) = (int_64)2126
	*(($9 + [2896])) = (int_64)931
	*(($9 + [2904])) = (int_64)2781
	*(($9 + [2912])) = (int_64)1190
	*(($9 + [2920])) = (int_64)1734
	*(($9 + [2928])) = (int_64)2065
	*(($9 + [2936])) = (int_64)1730
	*(($9 + [2944])) = (int_64)4291
	*(($9 + [2952])) = (int_64)186
	*(($9 + [2960])) = (int_64)322
	*(($9 + [2968])) = (int_64)3173
	*(($9 + [2976])) = (int_64)1528
	*(($9 + [2984])) = (int_64)3545
	*(($9 + [2992])) = (int_64)349
	*(($9 + [3000])) = (int_64)2047
	*(($9 + [3008])) = (int_64)1906
	*(($9 + [3016])) = (int_64)1653
	*(($9 + [3024])) = (int_64)592
	*(($9 + [3032])) = (int_64)234
	*(($9 + [3040])) = (int_64)2776
	*(($9 + [3048])) = (int_64)3466
	*(($9 + [3056])) = (int_64)2432
	*(($9 + [3064])) = (int_64)1839
	*(($9 + [3072])) = (int_64)849
	*(($9 + [3080])) = (int_64)2569
	*(($9 + [3088])) = (int_64)1472
	*(($9 + [3096])) = (int_64)2771
	*(($9 + [3104])) = (int_64)2558
	*(($9 + [3112])) = (int_64)414
	*(($9 + [3120])) = (int_64)1532
	*(($9 + [3128])) = (int_64)2559
	*(($9 + [3136])) = (int_64)2437
	*(($9 + [3144])) = (int_64)1986
	*(($9 + [3152])) = (int_64)785
	*(($9 + [3160])) = (int_64)2596
	*(($9 + [3168])) = (int_64)3013
	*(($9 + [3176])) = (int_64)1120
	*(($9 + [3184])) = (int_64)2052
	*(($9 + [3192])) = (int_64)195
	*(($9 + [3200])) = (int_64)2795
	*(($9 + [3208])) = (int_64)1615
	*(($9 + [3216])) = (int_64)2843
	*(($9 + [3224])) = (int_64)931
	*(($9 + [3232])) = (int_64)611
	*(($9 + [3240])) = (int_64)2874
	*(($9 + [3248])) = (int_64)2717
	*(($9 + [3256])) = (int_64)2367
	*(($9 + [3264])) = (int_64)962
	*(($9 + [3272])) = (int_64)697
	*(($9 + [3280])) = (int_64)2618
	*(($9 + [3288])) = (int_64)2416
	*(($9 + [3296])) = (int_64)2807
	*(($9 + [3304])) = (int_64)2173
	*(($9 + [3312])) = (int_64)211
	*(($9 + [3320])) = (int_64)2140
	*(($9 + [3328])) = (int_64)1467
	*(($9 + [3336])) = (int_64)3509
	*(($9 + [3344])) = (int_64)2421
	*(($9 + [3352])) = (int_64)495
	*(($9 + [3360])) = (int_64)2802
	*(($9 + [3368])) = (int_64)988
	*(($9 + [3376])) = (int_64)2794
	*(($9 + [3384])) = (int_64)999
	*(($9 + [3392])) = (int_64)144
	*(($9 + [3400])) = (int_64)5304
	*(($9 + [3408])) = (int_64)550
	*(($9 + [3416])) = (int_64)2503
	*(($9 + [3424])) = (int_64)3249
	*(($9 + [3432])) = (int_64)156
	*(($9 + [3440])) = (int_64)1300
	*(($9 + [3448])) = (int_64)2866
	*(($9 + [3456])) = (int_64)1929
	*(($9 + [3464])) = (int_64)2765
	*(($9 + [3472])) = (int_64)686
	*(($9 + [3480])) = (int_64)2514
	*(($9 + [3488])) = (int_64)2523
	*(($9 + [3496])) = (int_64)1012
	*(($9 + [3504])) = (int_64)2534
	*(($9 + [3512])) = (int_64)537
	*(($9 + [3520])) = (int_64)2668
	*(($9 + [3528])) = (int_64)1016
	*(($9 + [3536])) = (int_64)2745
	*(($9 + [3544])) = (int_64)1972
	*(($9 + [3552])) = (int_64)1208
	*(($9 + [3560])) = (int_64)2000
	*(($9 + [3568])) = (int_64)2069
	*(($9 + [3576])) = (int_64)2251
	*(($9 + [3584])) = (int_64)3415
	*(($9 + [3592])) = (int_64)383
	*(($9 + [3600])) = (int_64)2688
	*(($9 + [3608])) = (int_64)981
	*(($9 + [3616])) = (int_64)2033
	*(($9 + [3624])) = (int_64)645
	*(($9 + [3632])) = (int_64)113
	*(($9 + [3640])) = (int_64)221
	*(($9 + [3648])) = (int_64)6272
	*(($9 + [3656])) = (int_64)2249
	*(($9 + [3664])) = (int_64)935
	*(($9 + [3672])) = (int_64)931
	*(($9 + [3680])) = (int_64)2216
	*(($9 + [3688])) = (int_64)2688
	*(($9 + [3696])) = (int_64)2730
	*(($9 + [3704])) = (int_64)2498
	*(($9 + [3712])) = (int_64)842
	*(($9 + [3720])) = (int_64)1971
	*(($9 + [3728])) = (int_64)3009
	*(($9 + [3736])) = (int_64)1180
	*(($9 + [3744])) = (int_64)2911
	*(($9 + [3752])) = (int_64)199
	*(($9 + [3760])) = (int_64)2676
	*(($9 + [3768])) = (int_64)788
	*(($9 + [3776])) = (int_64)2926
	*(($9 + [3784])) = (int_64)1211
	*(($9 + [3792])) = (int_64)755
	*(($9 + [3800])) = (int_64)3781
	*(($9 + [3808])) = (int_64)1951
	*(($9 + [3816])) = (int_64)1802
	*(($9 + [3824])) = (int_64)2526
	*(($9 + [3832])) = (int_64)972
	*(($9 + [3840])) = (int_64)1803
	*(($9 + [3848])) = (int_64)2694
	*(($9 + [3856])) = (int_64)1505
	*(($9 + [3864])) = (int_64)3466
	*(($9 + [3872])) = (int_64)138
	*(($9 + [3880])) = (int_64)950
	*(($9 + [3888])) = (int_64)2541
	*(($9 + [3896])) = (int_64)2405
	*(($9 + [3904])) = (int_64)2366
	*(($9 + [3912])) = (int_64)1289
	*(($9 + [3920])) = (int_64)2188
	*(($9 + [3928])) = (int_64)1834
	*(($9 + [3936])) = (int_64)1823
	*(($9 + [3944])) = (int_64)1820
	*(($9 + [3952])) = (int_64)1064
	*(($9 + [3960])) = (int_64)2314
	*(($9 + [3968])) = (int_64)2633
	*(($9 + [3976])) = (int_64)1669
	*(($9 + [3984])) = (int_64)1237
	*(($9 + [3992])) = (int_64)397
	*(($9 + [4000])) = (int_64)2945
	*(($9 + [4008])) = (int_64)3417
	*(($9 + [4016])) = (int_64)1504
	*(($9 + [4024])) = (int_64)1608
	*(($9 + [4032])) = (int_64)1289
	*(($9 + [4040])) = (int_64)2530
	*(($9 + [4048])) = (int_64)1739
	*(($9 + [4056])) = (int_64)2334
	*(($9 + [4064])) = (int_64)2788
	*(($9 + [4072])) = (int_64)1136
	*(($9 + [4080])) = (int_64)1138
	*(($9 + [4088])) = (int_64)1402
	*(($9 + [4096])) = (int_64)3036
	*(($9 + [4104])) = (int_64)2574
	*(($9 + [4112])) = (int_64)492
	*(($9 + [4120])) = (int_64)1440
	*(($9 + [4128])) = (int_64)865
	*(($9 + [4136])) = (int_64)4129
	*(($9 + [4144])) = (int_64)1378
	*(($9 + [4152])) = (int_64)461
	*(($9 + [4160])) = (int_64)3464
	*(($9 + [4168])) = (int_64)717
	*(($9 + [4176])) = (int_64)3480
	*(($9 + [4184])) = (int_64)3041
	*(($9 + [4192])) = (int_64)719
	*(($9 + [4200])) = (int_64)1766
	*(($9 + [4208])) = (int_64)2213
	*(($9 + [4216])) = (int_64)1761
	*(($9 + [4224])) = (int_64)3215
	*(($9 + [4232])) = (int_64)720
	*(($9 + [4240])) = (int_64)1405
	*(($9 + [4248])) = (int_64)1910
	*(($9 + [4256])) = (int_64)2250
	*(($9 + [4264])) = (int_64)984
	*(($9 + [4272])) = (int_64)970
	*(($9 + [4280])) = (int_64)1513
	*(($9 + [4288])) = (int_64)2418
	*(($9 + [4296])) = (int_64)3615
	*(($9 + [4304])) = (int_64)1732
	*(($9 + [4312])) = (int_64)1308
	*(($9 + [4320])) = (int_64)2429
	*(($9 + [4328])) = (int_64)2251
	*(($9 + [4336])) = (int_64)1780
	*(($9 + [4344])) = (int_64)1442
	*(($9 + [4352])) = (int_64)682
	*(($9 + [4360])) = (int_64)2888
	*(($9 + [4368])) = (int_64)3641
	*(($9 + [4376])) = (int_64)847
	*(($9 + [4384])) = (int_64)2391
	*(($9 + [4392])) = (int_64)741
	*(($9 + [4400])) = (int_64)2476
	*(($9 + [4408])) = (int_64)1214
	*(($9 + [4416])) = (int_64)2678
	*(($9 + [4424])) = (int_64)2430
	*(($9 + [4432])) = (int_64)1178
	*(($9 + [4440])) = (int_64)1846
	*(($9 + [4448])) = (int_64)2373
	*(($9 + [4456])) = (int_64)1673
	*(($9 + [4464])) = (int_64)1510
	*(($9 + [4472])) = (int_64)2730
	*(($9 + [4480])) = (int_64)474
	*(($9 + [4488])) = (int_64)2432
	*(($9 + [4496])) = (int_64)2354
	*(($9 + [4504])) = (int_64)3657
	*(($9 + [4512])) = (int_64)1100
	*(($9 + [4520])) = (int_64)156
	*(($9 + [4528])) = (int_64)641
	*(($9 + [4536])) = (int_64)3946
	*(($9 + [4544])) = (int_64)1358
	*(($9 + [4552])) = (int_64)1510
	*(($9 + [4560])) = (int_64)963
	*(($9 + [4568])) = (int_64)2989
	*(($9 + [4576])) = (int_64)2680
	*(($9 + [4584])) = (int_64)2081
	*(($9 + [4592])) = (int_64)2094
	*(($9 + [4600])) = (int_64)1257
	*(($9 + [4608])) = (int_64)2313
	*(($9 + [4616])) = (int_64)1755
	*(($9 + [4624])) = (int_64)2071
	*(($9 + [4632])) = (int_64)2112
	*(($9 + [4640])) = (int_64)568
	*(($9 + [4648])) = (int_64)2409
	*(($9 + [4656])) = (int_64)2340
	*(($9 + [4664])) = (int_64)2743
	*(($9 + [4672])) = (int_64)1410
	*(($9 + [4680])) = (int_64)1053
	*(($9 + [4688])) = (int_64)2563
	*(($9 + [4696])) = (int_64)1731
	*(($9 + [4704])) = (int_64)2048
	*(($9 + [4712])) = (int_64)1881
	*(($9 + [4720])) = (int_64)456
	*(($9 + [4728])) = (int_64)2681
	*(($9 + [4736])) = (int_64)2434
	*(($9 + [4744])) = (int_64)2474
	*(($9 + [4752])) = (int_64)3822
	*(($9 + [4760])) = (int_64)462
	*(($9 + [4768])) = (int_64)1773
	*(($9 + [4776])) = (int_64)969
	*(($9 + [4784])) = (int_64)2561
	*(($9 + [4792])) = (int_64)2813
	*(($9 + [4800])) = (int_64)1058
	*(($9 + [4808])) = (int_64)1766
	*(($9 + [4816])) = (int_64)1302
	*(($9 + [4824])) = (int_64)1015
	*(($9 + [4832])) = (int_64)1046
	*(($9 + [4840])) = (int_64)189
	*(($9 + [4848])) = (int_64)6574
	*(($9 + [4856])) = (int_64)676
	*(($9 + [4864])) = (int_64)650
	*(($9 + [4872])) = (int_64)2500
	*(($9 + [4880])) = (int_64)164
	*(($9 + [4888])) = (int_64)2711
	*(($9 + [4896])) = (int_64)3475
	*(($9 + [4904])) = (int_64)2548
	*(($9 + [4912])) = (int_64)2645
	*(($9 + [4920])) = (int_64)263
	*(($9 + [4928])) = (int_64)2517
	*(($9 + [4936])) = (int_64)1527
	*(($9 + [4944])) = (int_64)1228
	*(($9 + [4952])) = (int_64)2883
	*(($9 + [4960])) = (int_64)1197
	*(($9 + [4968])) = (int_64)2764
	*(($9 + [4976])) = (int_64)1428
	*(($9 + [4984])) = (int_64)3023
	*(($9 + [4992])) = (int_64)3622
	*(($9 + [5000])) = (int_64)417
	*(($9 + [5008])) = (int_64)874
	*(($9 + [5016])) = (int_64)1564
	*(($9 + [5024])) = (int_64)2503
	*(($9 + [5032])) = (int_64)1897
	*(($9 + [5040])) = (int_64)554
	*(($9 + [5048])) = (int_64)2300
	*(($9 + [5056])) = (int_64)2246
	*(($9 + [5064])) = (int_64)2300
	*(($9 + [5072])) = (int_64)1417
	*(($9 + [5080])) = (int_64)1037
	*(($9 + [5088])) = (int_64)1893
	*(($9 + [5096])) = (int_64)2853
	*(($9 + [5104])) = (int_64)2641
	*(($9 + [5112])) = (int_64)3165
	*(($9 + [5120])) = (int_64)133
	*(($9 + [5128])) = (int_64)455
	*(($9 + [5136])) = (int_64)3106
	*(($9 + [5144])) = (int_64)2387
	*(($9 + [5152])) = (int_64)2196
	*(($9 + [5160])) = (int_64)915
	*(($9 + [5168])) = (int_64)2719
	*(($9 + [5176])) = (int_64)1283
	*(($9 + [5184])) = (int_64)1382
	*(($9 + [5192])) = (int_64)2660
	*(($9 + [5200])) = (int_64)1212
	*(($9 + [5208])) = (int_64)2208
	*(($9 + [5216])) = (int_64)2038
	*(($9 + [5224])) = (int_64)2829
	*(($9 + [5232])) = (int_64)2781
	*(($9 + [5240])) = (int_64)540
	*(($9 + [5248])) = (int_64)2503
	*(($9 + [5256])) = (int_64)847
	*(($9 + [5264])) = (int_64)2603
	*(($9 + [5272])) = (int_64)798
	*(($9 + [5280])) = (int_64)729
	*(($9 + [5288])) = (int_64)1957
	*(($9 + [5296])) = (int_64)3413
	*(($9 + [5304])) = (int_64)1846
	*(($9 + [5312])) = (int_64)3216
	*(($9 + [5320])) = (int_64)1082
	*(($9 + [5328])) = (int_64)2102
	*(($9 + [5336])) = (int_64)1254
	*(($9 + [5344])) = (int_64)2835
	*(($9 + [5352])) = (int_64)3429
	*(($9 + [5360])) = (int_64)886
	*(($9 + [5368])) = (int_64)1110
	*(($9 + [5376])) = (int_64)1240
	*(($9 + [5384])) = (int_64)2435
	*(($9 + [5392])) = (int_64)968
	*(($9 + [5400])) = (int_64)371
	*(($9 + [5408])) = (int_64)2903
	*(($9 + [5416])) = (int_64)2823
	*(($9 + [5424])) = (int_64)4290
	*(($9 + [5432])) = (int_64)1206
	*(($9 + [5440])) = (int_64)553
	*(($9 + [5448])) = (int_64)570
	*(($9 + [5456])) = (int_64)2881
	*(($9 + [5464])) = (int_64)993
	*(($9 + [5472])) = (int_64)1351
	*(($9 + [5480])) = (int_64)795
	*(($9 + [5488])) = (int_64)1486
	*(($9 + [5496])) = (int_64)4875
	*(($9 + [5504])) = (int_64)1046
	*(($9 + [5512])) = (int_64)1857
	*(($9 + [5520])) = (int_64)589
	*(($9 + [5528])) = (int_64)719
	*(($9 + [5536])) = (int_64)5289
	*(($9 + [5544])) = (int_64)1615
	*(($9 + [5552])) = (int_64)2034
	*(($9 + [5560])) = (int_64)1449
	*(($9 + [5568])) = (int_64)2247
	*(($9 + [5576])) = (int_64)2155
	*(($9 + [5584])) = (int_64)2332
	*(($9 + [5592])) = (int_64)613
	*(($9 + [5600])) = (int_64)505
	*(($9 + [5608])) = (int_64)5306
	*(($9 + [5616])) = (int_64)744
	*(($9 + [5624])) = (int_64)4733
	*(($9 + [5632])) = (int_64)391
	*(($9 + [5640])) = (int_64)227
	*(($9 + [5648])) = (int_64)3178
	*(($9 + [5656])) = (int_64)971
	*(($9 + [5664])) = (int_64)2745
	*(($9 + [5672])) = (int_64)2969
	*(($9 + [5680])) = (int_64)1178
	*(($9 + [5688])) = (int_64)1218
	*(($9 + [5696])) = (int_64)1390
	*(($9 + [5704])) = (int_64)966
	*(($9 + [5712])) = (int_64)3103
	*(($9 + [5720])) = (int_64)433
	*(($9 + [5728])) = (int_64)2137
	*(($9 + [5736])) = (int_64)2861
	*(($9 + [5744])) = (int_64)612
	*(($9 + [5752])) = (int_64)3169
	*(($9 + [5760])) = (int_64)590
	*(($9 + [5768])) = (int_64)3982
	*(($9 + [5776])) = (int_64)1147
	*(($9 + [5784])) = (int_64)3042
	*(($9 + [5792])) = (int_64)2962
	*(($9 + [5800])) = (int_64)183
	*(($9 + [5808])) = (int_64)868
	*(($9 + [5816])) = (int_64)2445
	*(($9 + [5824])) = (int_64)2089
	*(($9 + [5832])) = (int_64)2594
	*(($9 + [5840])) = (int_64)753
	*(($9 + [5848])) = (int_64)1825
	*(($9 + [5856])) = (int_64)2239
	*(($9 + [5864])) = (int_64)668
	*(($9 + [5872])) = (int_64)1757
	*(($9 + [5880])) = (int_64)192
	*(($9 + [5888])) = (int_64)3223
	*(($9 + [5896])) = (int_64)3660
	*(($9 + [5904])) = (int_64)2111
	*(($9 + [5912])) = (int_64)2450
	*(($9 + [5920])) = (int_64)776
	*(($9 + [5928])) = (int_64)1885
	*(($9 + [5936])) = (int_64)2278
	*(($9 + [5944])) = (int_64)2803
	*(($9 + [5952])) = (int_64)2843
	*(($9 + [5960])) = (int_64)999
	*(($9 + [5968])) = (int_64)1171
	*(($9 + [5976])) = (int_64)1684
	*(($9 + [5984])) = (int_64)2453
	*(($9 + [5992])) = (int_64)2292
	*(($9 + [6000])) = (int_64)760
	*(($9 + [6008])) = (int_64)1929
	*(($9 + [6016])) = (int_64)2066
	*(($9 + [6024])) = (int_64)1717
	*(($9 + [6032])) = (int_64)2661
	*(($9 + [6040])) = (int_64)569
	*(($9 + [6048])) = (int_64)2612
	*(($9 + [6056])) = (int_64)1941
	*(($9 + [6064])) = (int_64)2028
	*(($9 + [6072])) = (int_64)1281
	*(($9 + [6080])) = (int_64)659
	*(($9 + [6088])) = (int_64)2928
	*(($9 + [6096])) = (int_64)2604
	*(($9 + [6104])) = (int_64)641
	*(($9 + [6112])) = (int_64)3533
	*(($9 + [6120])) = (int_64)223
	*(($9 + [6128])) = (int_64)2413
	*(($9 + [6136])) = (int_64)2690
	*(($9 + [6144])) = (int_64)2622
	*(($9 + [6152])) = (int_64)1820
	*(($9 + [6160])) = (int_64)681
	*(($9 + [6168])) = (int_64)2033
	*(($9 + [6176])) = (int_64)2344
	*(($9 + [6184])) = (int_64)2709
	*(($9 + [6192])) = (int_64)2808
	*(($9 + [6200])) = (int_64)593
	*(($9 + [6208])) = (int_64)673
	*(($9 + [6216])) = (int_64)2717
	*(($9 + [6224])) = (int_64)2189
	*(($9 + [6232])) = (int_64)2956
	*(($9 + [6240])) = (int_64)509
	*(($9 + [6248])) = (int_64)936
	*(($9 + [6256])) = (int_64)2910
	*(($9 + [6264])) = (int_64)1984
	*(($9 + [6272])) = (int_64)2037
	*(($9 + [6280])) = (int_64)1227
	*(($9 + [6288])) = (int_64)2274
	*(($9 + [6296])) = (int_64)1978
	*(($9 + [6304])) = (int_64)2915
	*(($9 + [6312])) = (int_64)3217
	*(($9 + [6320])) = (int_64)343
	*(($9 + [6328])) = (int_64)875
	*(($9 + [6336])) = (int_64)2150
	*(($9 + [6344])) = (int_64)2174
	*(($9 + [6352])) = (int_64)2310
	*(($9 + [6360])) = (int_64)666
	*(($9 + [6368])) = (int_64)2156
	*(($9 + [6376])) = (int_64)2194
	*(($9 + [6384])) = (int_64)2967
	*(($9 + [6392])) = (int_64)1633
	*(($9 + [6400])) = (int_64)323
	*(($9 + [6408])) = (int_64)2630
	*(($9 + [6416])) = (int_64)1947
	*(($9 + [6424])) = (int_64)1912
	*(($9 + [6432])) = (int_64)3059
	*(($9 + [6440])) = (int_64)451
	*(($9 + [6448])) = (int_64)989
	*(($9 + [6456])) = (int_64)3089
	*(($9 + [6464])) = (int_64)1169
	*(($9 + [6472])) = (int_64)1553
	*(($9 + [6480])) = (int_64)2869
	*(($9 + [6488])) = (int_64)988
	*(($9 + [6496])) = (int_64)2921
	*(($9 + [6504])) = (int_64)2094
	*(($9 + [6512])) = (int_64)2431
	*(($9 + [6520])) = (int_64)1486
	*(($9 + [6528])) = (int_64)954
	*(($9 + [6536])) = (int_64)2535
	*(($9 + [6544])) = (int_64)1684
	*(($9 + [6552])) = (int_64)2580
	*(($9 + [6560])) = (int_64)2623
	*(($9 + [6568])) = (int_64)287
	*(($9 + [6576])) = (int_64)2326
	*(($9 + [6584])) = (int_64)1522
	*(($9 + [6592])) = (int_64)1757
	*(($9 + [6600])) = (int_64)1539
	*(($9 + [6608])) = (int_64)836
	*(($9 + [6616])) = (int_64)3846
	*(($9 + [6624])) = (int_64)2924
	*(($9 + [6632])) = (int_64)2671
	*(($9 + [6640])) = (int_64)1435
	*(($9 + [6648])) = (int_64)976
	*(($9 + [6656])) = (int_64)1494
	*(($9 + [6664])) = (int_64)3536
	*(($9 + [6672])) = (int_64)693
	*(($9 + [6680])) = (int_64)1535
	*(($9 + [6688])) = (int_64)541
	*(($9 + [6696])) = (int_64)3195
	*(($9 + [6704])) = (int_64)2808
	*(($9 + [6712])) = (int_64)2137
	*(($9 + [6720])) = (int_64)3161
	*(($9 + [6728])) = (int_64)601
	*(($9 + [6736])) = (int_64)793
	*(($9 + [6744])) = (int_64)951
	*(($9 + [6752])) = (int_64)1702
	*(($9 + [6760])) = (int_64)3806
	*(($9 + [6768])) = (int_64)669
	*(($9 + [6776])) = (int_64)2372
	*(($9 + [6784])) = (int_64)2106
	*(($9 + [6792])) = (int_64)2811
	*(($9 + [6800])) = (int_64)1366
	*(($9 + [6808])) = (int_64)481
	*(($9 + [6816])) = (int_64)2736
	*(($9 + [6824])) = (int_64)1567
	*(($9 + [6832])) = (int_64)2115
	*(($9 + [6840])) = (int_64)2091
	*(($9 + [6848])) = (int_64)827
	*(($9 + [6856])) = (int_64)2900
	*(($9 + [6864])) = (int_64)1897
	*(($9 + [6872])) = (int_64)1707
	*(($9 + [6880])) = (int_64)3386
	*(($9 + [6888])) = (int_64)389
	*(($9 + [6896])) = (int_64)2121
	*(($9 + [6904])) = (int_64)2393
	*(($9 + [6912])) = (int_64)2091
	*(($9 + [6920])) = (int_64)1780
	*(($9 + [6928])) = (int_64)1048
	*(($9 + [6936])) = (int_64)2188
	*(($9 + [6944])) = (int_64)1698
	*(($9 + [6952])) = (int_64)3099
	*(($9 + [6960])) = (int_64)979
	*(($9 + [6968])) = (int_64)578
	*(($9 + [6976])) = (int_64)3146
	*(($9 + [6984])) = (int_64)2653
	*(($9 + [6992])) = (int_64)3316
	*(($9 + [7000])) = (int_64)1437
	*(($9 + [7008])) = (int_64)242
	*(($9 + [7016])) = (int_64)1852
	*(($9 + [7024])) = (int_64)1083
	*(($9 + [7032])) = (int_64)2909
	*(($9 + [7040])) = (int_64)2129
	*(($9 + [7048])) = (int_64)566
	*(($9 + [7056])) = (int_64)2813
	*(($9 + [7064])) = (int_64)2618
	*(($9 + [7072])) = (int_64)1746
	*(($9 + [7080])) = (int_64)971
	*(($9 + [7088])) = (int_64)946
	*(($9 + [7096])) = (int_64)3219
	*(($9 + [7104])) = (int_64)2721
	*(($9 + [7112])) = (int_64)867
	*(($9 + [7120])) = (int_64)3543
	*(($9 + [7128])) = (int_64)695
	*(($9 + [7136])) = (int_64)1674
	*(($9 + [7144])) = (int_64)2596
	*(($9 + [7152])) = (int_64)2956
	*(($9 + [7160])) = (int_64)464
	*(($9 + [7168])) = (int_64)253
	*(($9 + [7176])) = (int_64)3231
	*(($9 + [7184])) = (int_64)1007
	*(($9 + [7192])) = (int_64)2844
	*(($9 + [7200])) = (int_64)1895
	*(($9 + [7208])) = (int_64)862
	*(($9 + [7216])) = (int_64)2892
	*(($9 + [7224])) = (int_64)1257
	*(($9 + [7232])) = (int_64)1079
	*(($9 + [7240])) = (int_64)1274
	*(($9 + [7248])) = (int_64)987
	*(($9 + [7256])) = (int_64)4903
	*(($9 + [7264])) = (int_64)1731
	*(($9 + [7272])) = (int_64)1444
	*(($9 + [7280])) = (int_64)2660
	*(($9 + [7288])) = (int_64)992
	*(($9 + [7296])) = (int_64)2673
	*(($9 + [7304])) = (int_64)1670
	*(($9 + [7312])) = (int_64)954
	*(($9 + [7320])) = (int_64)3182
	*(($9 + [7328])) = (int_64)301
	*(($9 + [7336])) = (int_64)3393
	*(($9 + [7344])) = (int_64)3351
	*(($9 + [7352])) = (int_64)3148
	*(($9 + [7360])) = (int_64)1027
	*(($9 + [7368])) = (int_64)183
	*(($9 + [7376])) = (int_64)1791
	*(($9 + [7384])) = (int_64)3624
	*(($9 + [7392])) = (int_64)966
	*(($9 + [7400])) = (int_64)2666
	*(($9 + [7408])) = (int_64)152
	*(($9 + [7416])) = (int_64)2092
	*(($9 + [7424])) = (int_64)1238
	*(($9 + [7432])) = (int_64)1265
	*(($9 + [7440])) = (int_64)5048
	*(($9 + [7448])) = (int_64)505
	*(($9 + [7456])) = (int_64)1444
	*(($9 + [7464])) = (int_64)1404
	*(($9 + [7472])) = (int_64)2920
	*(($9 + [7480])) = (int_64)2875
	*(($9 + [7488])) = (int_64)349
	*(($9 + [7496])) = (int_64)1952
	*(($9 + [7504])) = (int_64)3273
	*(($9 + [7512])) = (int_64)1284
	*(($9 + [7520])) = (int_64)871
	*(($9 + [7528])) = (int_64)795
	*(($9 + [7536])) = (int_64)3277
	*(($9 + [7544])) = (int_64)2115
	*(($9 + [7552])) = (int_64)1914
	*(($9 + [7560])) = (int_64)1722
	*(($9 + [7568])) = (int_64)1675
	*(($9 + [7576])) = (int_64)2074
	*(($9 + [7584])) = (int_64)3509
	*(($9 + [7592])) = (int_64)1200
	*(($9 + [7600])) = (int_64)2249
	*(($9 + [7608])) = (int_64)165
	*(($9 + [7616])) = (int_64)2377
	*(($9 + [7624])) = (int_64)2375
	*(($9 + [7632])) = (int_64)2045
	*(($9 + [7640])) = (int_64)1951
	*(($9 + [7648])) = (int_64)1254
	*(($9 + [7656])) = (int_64)1875
	*(($9 + [7664])) = (int_64)3932
	*(($9 + [7672])) = (int_64)2809
	*(($9 + [7680])) = (int_64)1295
	*(($9 + [7688])) = (int_64)296
	*(($9 + [7696])) = (int_64)1168
	*(($9 + [7704])) = (int_64)2931
	*(($9 + [7712])) = (int_64)2005
	*(($9 + [7720])) = (int_64)1227
	*(($9 + [7728])) = (int_64)1106
	*(($9 + [7736])) = (int_64)2231
	*(($9 + [7744])) = (int_64)2280
	*(($9 + [7752])) = (int_64)2026
	*(($9 + [7760])) = (int_64)2264
	*(($9 + [7768])) = (int_64)447
	*(($9 + [7776])) = (int_64)2483
	*(($9 + [7784])) = (int_64)1657
	*(($9 + [7792])) = (int_64)1267
	*(($9 + [7800])) = (int_64)3868
	*(($9 + [7808])) = (int_64)1212
	*(($9 + [7816])) = (int_64)1496
	*(($9 + [7824])) = (int_64)1371
	*(($9 + [7832])) = (int_64)1452
	*(($9 + [7840])) = (int_64)3455
	*(($9 + [7848])) = (int_64)1240
	*(($9 + [7856])) = (int_64)1982
	*(($9 + [7864])) = (int_64)2645
	*(($9 + [7872])) = (int_64)1651
	*(($9 + [7880])) = (int_64)1865
	*(($9 + [7888])) = (int_64)300
	*(($9 + [7896])) = (int_64)3039
	*(($9 + [7904])) = (int_64)1634
	*(($9 + [7912])) = (int_64)2606
	*(($9 + [7920])) = (int_64)1717
	*(($9 + [7928])) = (int_64)1567
	*(($9 + [7936])) = (int_64)1976
	*(($9 + [7944])) = (int_64)1193
	*(($9 + [7952])) = (int_64)3502
	*(($9 + [7960])) = (int_64)3255
	*(($9 + [7968])) = (int_64)530
	*(($9 + [7976])) = (int_64)1020
	*(($9 + [7984])) = (int_64)2407
	*(($9 + [7992])) = (int_64)2621
	*(($9 + [8000])) = (int_64)1418
	*(($9 + [8008])) = (int_64)525
	*(($9 + [8016])) = (int_64)2529
	*(($9 + [8024])) = (int_64)2343
	*(($9 + [8032])) = (int_64)1338
	*(($9 + [8040])) = (int_64)2764
	*(($9 + [8048])) = (int_64)855
	*(($9 + [8056])) = (int_64)2200
	*(($9 + [8064])) = (int_64)1946
	*(($9 + [8072])) = (int_64)1107
	*(($9 + [8080])) = (int_64)2932
	*(($9 + [8088])) = (int_64)478
	*(($9 + [8096])) = (int_64)3037
	*(($9 + [8104])) = (int_64)2136
	*(($9 + [8112])) = (int_64)1955
	*(($9 + [8120])) = (int_64)1397
	*(($9 + [8128])) = (int_64)1296
	*(($9 + [8136])) = (int_64)2716
	*(($9 + [8144])) = (int_64)863
	*(($9 + [8152])) = (int_64)2851
	*(($9 + [8160])) = (int_64)3325
	*(($9 + [8168])) = (int_64)300
	*(($9 + [8176])) = (int_64)2161
	*(($9 + [8184])) = (int_64)1237
	*(($9 + [8192])) = (int_64)3071
	*(($9 + [8200])) = (int_64)2812
	*(($9 + [8208])) = (int_64)818
	*(($9 + [8216])) = (int_64)1562
	*(($9 + [8224])) = (int_64)611
	*(($9 + [8232])) = (int_64)4021
	*(($9 + [8240])) = (int_64)3002
	*(($9 + [8248])) = (int_64)192
	*(($9 + [8256])) = (int_64)1674
	*(($9 + [8264])) = (int_64)320
	*(($9 + [8272])) = (int_64)1787
	*(($9 + [8280])) = (int_64)3957
	*(($9 + [8288])) = (int_64)288
	*(($9 + [8296])) = (int_64)3148
	*(($9 + [8304])) = (int_64)4275
	*(($9 + [8312])) = (int_64)525
	*(($9 + [8320])) = (int_64)3478
	*(($9 + [8328])) = (int_64)437
	*(($9 + [8336])) = (int_64)785
	*(($9 + [8344])) = (int_64)3036
	*(($9 + [8352])) = (int_64)1540
	*(($9 + [8360])) = (int_64)1697
	*(($9 + [8368])) = (int_64)451
	*(($9 + [8376])) = (int_64)2776
	*(($9 + [8384])) = (int_64)2178
	*(($9 + [8392])) = (int_64)1782
	*(($9 + [8400])) = (int_64)2633
	*(($9 + [8408])) = (int_64)918
	*(($9 + [8416])) = (int_64)1989
	*(($9 + [8424])) = (int_64)3573
	*(($9 + [8432])) = (int_64)1457
	*(($9 + [8440])) = (int_64)2261
	*(($9 + [8448])) = (int_64)423
	*(($9 + [8456])) = (int_64)1786
	*(($9 + [8464])) = (int_64)2783
	*(($9 + [8472])) = (int_64)3110
	*(($9 + [8480])) = (int_64)3059
	*(($9 + [8488])) = (int_64)408
	*(($9 + [8496])) = (int_64)140
	*(($9 + [8504])) = (int_64)2371
	*(($9 + [8512])) = (int_64)2509
	*(($9 + [8520])) = (int_64)1999
	*(($9 + [8528])) = (int_64)2228
	*(($9 + [8536])) = (int_64)393
	*(($9 + [8544])) = (int_64)2164
	*(($9 + [8552])) = (int_64)2139
	*(($9 + [8560])) = (int_64)3082
	*(($9 + [8568])) = (int_64)1958
	*(($9 + [8576])) = (int_64)157
	*(($9 + [8584])) = (int_64)753
	*(($9 + [8592])) = (int_64)3010
	*(($9 + [8600])) = (int_64)1805
	*(($9 + [8608])) = (int_64)3582
	*(($9 + [8616])) = (int_64)350
	*(($9 + [8624])) = (int_64)840
	*(($9 + [8632])) = (int_64)3070
	*(($9 + [8640])) = (int_64)2904
	*(($9 + [8648])) = (int_64)2081
	*(($9 + [8656])) = (int_64)605
	*(($9 + [8664])) = (int_64)2276
	*(($9 + [8672])) = (int_64)3951
	*(($9 + [8680])) = (int_64)1469
	*(($9 + [8688])) = (int_64)1607
	*(($9 + [8696])) = (int_64)197
	*(($9 + [8704])) = (int_64)1934
	*(($9 + [8712])) = (int_64)2398
	*(($9 + [8720])) = (int_64)1917
	*(($9 + [8728])) = (int_64)1944
	*(($9 + [8736])) = (int_64)1307
	*(($9 + [8744])) = (int_64)2489
	*(($9 + [8752])) = (int_64)1512
	*(($9 + [8760])) = (int_64)2684
	*(($9 + [8768])) = (int_64)2264
	*(($9 + [8776])) = (int_64)551
	*(($9 + [8784])) = (int_64)3203
	*(($9 + [8792])) = (int_64)1897
	*(($9 + [8800])) = (int_64)2717
	*(($9 + [8808])) = (int_64)1411
	*(($9 + [8816])) = (int_64)272
	*(($9 + [8824])) = (int_64)557
	*(($9 + [8832])) = (int_64)4867
	*(($9 + [8840])) = (int_64)1339
	*(($9 + [8848])) = (int_64)2593
	*(($9 + [8856])) = (int_64)144
	*(($9 + [8864])) = (int_64)4065
	*(($9 + [8872])) = (int_64)1043
	*(($9 + [8880])) = (int_64)1216
	*(($9 + [8888])) = (int_64)2625
	*(($9 + [8896])) = (int_64)551
	*(($9 + [8904])) = (int_64)3684
	*(($9 + [8912])) = (int_64)990
	*(($9 + [8920])) = (int_64)2671
	*(($9 + [8928])) = (int_64)1995
	*(($9 + [8936])) = (int_64)160
	*(($9 + [8944])) = (int_64)915
	*(($9 + [8952])) = (int_64)2722
	*(($9 + [8960])) = (int_64)2803
	*(($9 + [8968])) = (int_64)2665
	*(($9 + [8976])) = (int_64)395
	*(($9 + [8984])) = (int_64)2374
	*(($9 + [8992])) = (int_64)1184
	*(($9 + [9000])) = (int_64)2926
	*(($9 + [9008])) = (int_64)2627
	*(($9 + [9016])) = (int_64)389
	*(($9 + [9024])) = (int_64)2382
	*(($9 + [9032])) = (int_64)1847
	*(($9 + [9040])) = (int_64)1986
	*(($9 + [9048])) = (int_64)2155
	*(($9 + [9056])) = (int_64)1130
	*(($9 + [9064])) = (int_64)2271
	*(($9 + [9072])) = (int_64)1475
	*(($9 + [9080])) = (int_64)1200
	*(($9 + [9088])) = (int_64)4432
	*(($9 + [9096])) = (int_64)122
	*(($9 + [9104])) = (int_64)2276
	*(($9 + [9112])) = (int_64)1767
	*(($9 + [9120])) = (int_64)1679
	*(($9 + [9128])) = (int_64)2684
	*(($9 + [9136])) = (int_64)1094
	*(($9 + [9144])) = (int_64)1786
	*(($9 + [9152])) = (int_64)2242
	*(($9 + [9160])) = (int_64)2751
	*(($9 + [9168])) = (int_64)2237
	*(($9 + [9176])) = (int_64)484
	*(($9 + [9184])) = (int_64)3096
	*(($9 + [9192])) = (int_64)2568
	*(($9 + [9200])) = (int_64)1667
	*(($9 + [9208])) = (int_64)1934
	*(($9 + [9216])) = (int_64)235
	*(($9 + [9224])) = (int_64)2641
	*(($9 + [9232])) = (int_64)2234
	*(($9 + [9240])) = (int_64)3231
	*(($9 + [9248])) = (int_64)1083
	*(($9 + [9256])) = (int_64)311
	*(($9 + [9264])) = (int_64)1851
	*(($9 + [9272])) = (int_64)1727
	*(($9 + [9280])) = (int_64)4813
	*(($9 + [9288])) = (int_64)670
	*(($9 + [9296])) = (int_64)439
	*(($9 + [9304])) = (int_64)2338
	*(($9 + [9312])) = (int_64)1836
	*(($9 + [9320])) = (int_64)1977
	*(($9 + [9328])) = (int_64)2267
	*(($9 + [9336])) = (int_64)1082
	*(($9 + [9344])) = (int_64)2439
	*(($9 + [9352])) = (int_64)2764
	*(($9 + [9360])) = (int_64)2621
	*(($9 + [9368])) = (int_64)1530
	*(($9 + [9376])) = (int_64)146
	*(($9 + [9384])) = (int_64)2920
	*(($9 + [9392])) = (int_64)848
	*(($9 + [9400])) = (int_64)2469
	*(($9 + [9408])) = (int_64)2692
	*(($9 + [9416])) = (int_64)571
	*(($9 + [9424])) = (int_64)3050
	*(($9 + [9432])) = (int_64)860
	*(($9 + [9440])) = (int_64)2943
	*(($9 + [9448])) = (int_64)2307
	*(($9 + [9456])) = (int_64)340
	*(($9 + [9464])) = (int_64)2171
	*(($9 + [9472])) = (int_64)3383
	*(($9 + [9480])) = (int_64)1702
	*(($9 + [9488])) = (int_64)1399
	*(($9 + [9496])) = (int_64)845
	*(($9 + [9504])) = (int_64)3097
	*(($9 + [9512])) = (int_64)1539
	*(($9 + [9520])) = (int_64)3245
	*(($9 + [9528])) = (int_64)859
	*(($9 + [9536])) = (int_64)760
	*(($9 + [9544])) = (int_64)2741
	*(($9 + [9552])) = (int_64)1723
	*(($9 + [9560])) = (int_64)2087
	*(($9 + [9568])) = (int_64)2367
	*(($9 + [9576])) = (int_64)582
	*(($9 + [9584])) = (int_64)2764
	*(($9 + [9592])) = (int_64)2080
	*(($9 + [9600])) = (int_64)1604
	*(($9 + [9608])) = (int_64)1822
	*(($9 + [9616])) = (int_64)1230
	*(($9 + [9624])) = (int_64)2063
	*(($9 + [9632])) = (int_64)2811
	*(($9 + [9640])) = (int_64)2001
	*(($9 + [9648])) = (int_64)1863
	*(($9 + [9656])) = (int_64)762
	*(($9 + [9664])) = (int_64)3032
	*(($9 + [9672])) = (int_64)2224
	*(($9 + [9680])) = (int_64)2284
	*(($9 + [9688])) = (int_64)1114
	*(($9 + [9696])) = (int_64)846
	*(($9 + [9704])) = (int_64)1141
	*(($9 + [9712])) = (int_64)3379
	*(($9 + [9720])) = (int_64)1899
	*(($9 + [9728])) = (int_64)2525
	*(($9 + [9736])) = (int_64)556
	*(($9 + [9744])) = (int_64)3076
	*(($9 + [9752])) = (int_64)933
	*(($9 + [9760])) = (int_64)2194
	*(($9 + [9768])) = (int_64)2363
	*(($9 + [9776])) = (int_64)934
	*(($9 + [9784])) = (int_64)1247
	*(($9 + [9792])) = (int_64)2309
	*(($9 + [9800])) = (int_64)1782
	*(($9 + [9808])) = (int_64)3370
	*(($9 + [9816])) = (int_64)792
	*(($9 + [9824])) = (int_64)3669
	*(($9 + [9832])) = (int_64)518
	*(($9 + [9840])) = (int_64)1017
	*(($9 + [9848])) = (int_64)4009
	*(($9 + [9856])) = (int_64)287
	*(($9 + [9864])) = (int_64)1043
	*(($9 + [9872])) = (int_64)1092
	*(($9 + [9880])) = (int_64)4630
	*(($9 + [9888])) = (int_64)2449
	*(($9 + [9896])) = (int_64)286
	*(($9 + [9904])) = (int_64)5749
	*(($9 + [9912])) = (int_64)902
	*(($9 + [9920])) = (int_64)1379
	*(($9 + [9928])) = (int_64)1026
	*(($9 + [9936])) = (int_64)444
	*(($9 + [9944])) = (int_64)1660
	*(($9 + [9952])) = (int_64)3338
	*(($9 + [9960])) = (int_64)801
	*(($9 + [9968])) = (int_64)3128
	*(($9 + [9976])) = (int_64)573
	*(($9 + [9984])) = (int_64)1924
	*(($9 + [9992])) = (int_64)2254
	*(($9 + [10000])) = (int_64)1784
	*(($9 + [10008])) = (int_64)2601
	*(($9 + [10016])) = (int_64)937
	*(($9 + [10024])) = (int_64)2706
	*(($9 + [10032])) = (int_64)2555
	*(($9 + [10040])) = (int_64)2297
	*(($9 + [10048])) = (int_64)1397
	*(($9 + [10056])) = (int_64)545
	*(($9 + [10064])) = (int_64)1696
	*(($9 + [10072])) = (int_64)2826
	*(($9 + [10080])) = (int_64)1720
	*(($9 + [10088])) = (int_64)2826
	*(($9 + [10096])) = (int_64)432
	*(($9 + [10104])) = (int_64)873
	*(($9 + [10112])) = (int_64)2865
	*(($9 + [10120])) = (int_64)2280
	*(($9 + [10128])) = (int_64)2835
	*(($9 + [10136])) = (int_64)647
	*(($9 + [10144])) = (int_64)1895
	*(($9 + [10152])) = (int_64)2182
	*(($9 + [10160])) = (int_64)2452
	*(($9 + [10168])) = (int_64)2079
	*(($9 + [10176])) = (int_64)892
	*(($9 + [10184])) = (int_64)821
	*(($9 + [10192])) = (int_64)1946
	*(($9 + [10200])) = (int_64)2747
	*(($9 + [10208])) = (int_64)3580
	*(($9 + [10216])) = (int_64)406
	*(($9 + [10224])) = (int_64)1328
	*(($9 + [10232])) = (int_64)2497
	*(($9 + [10240])) = (int_64)1963
	*(($9 + [10248])) = (int_64)2465
	*(($9 + [10256])) = (int_64)1247
	*(($9 + [10264])) = (int_64)2765
	*(($9 + [10272])) = (int_64)2592
	*(($9 + [10280])) = (int_64)1246
	*(($9 + [10288])) = (int_64)2615
	*(($9 + [10296])) = (int_64)282
	*(($9 + [10304])) = (int_64)2509
	*(($9 + [10312])) = (int_64)3547
	*(($9 + [10320])) = (int_64)1853
	*(($9 + [10328])) = (int_64)1383
	*(($9 + [10336])) = (int_64)208
	*(($9 + [10344])) = (int_64)2615
	*(($9 + [10352])) = (int_64)1478
	*(($9 + [10360])) = (int_64)1865
	*(($9 + [10368])) = (int_64)2115
	*(($9 + [10376])) = (int_64)1427
	*(($9 + [10384])) = (int_64)1885
	*(($9 + [10392])) = (int_64)2109
	*(($9 + [10400])) = (int_64)2525
	*(($9 + [10408])) = (int_64)2172
	*(($9 + [10416])) = (int_64)809
	*(($9 + [10424])) = (int_64)1830
	*(($9 + [10432])) = (int_64)4996
	*(($9 + [10440])) = (int_64)1147
	*(($9 + [10448])) = (int_64)1160
	*(($9 + [10456])) = (int_64)367
	$6 = (int_64)59
	$4 = [1456]
	$5 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$10 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$3 = ($3 + [165])
	goto $label$8 
	
.LABEL $label$10
	$8 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$5 = ((int_64)$8 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$5 }
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$11 }
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [1472]
	$5 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$13
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$8 | (int_64)$5)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$12 }
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$11 }
	CALL $85(($9 + [152]))
	if ( ((int_64)*($9 + [160]) != (int_64)$0) ){ goto $label$18 }
	$4 = (($9 + [152]) + [24])
	if ( ((int_64)*($4) != (int_64)1397703940) ){ goto $label$18 }
	*((($9 + [104]) + [24])) = *($4)
	*((($9 + [104]) + [16])) = *((($9 + [152]) + [16]))
	*((($9 + [104]) + [8])) = *((($9 + [152]) + [8]))
	*($9 + [104]) = *($9 + [152])
	CALL $114((($9 + [104]) + [32]), (($9 + [152]) + [32]))
	CALL _ZN9RedPacket7depositE13transfer_args(($9 + [200]), ($9 + [104]))
	if ( ((*($9 + [136]) & [1]) == 0) ){ goto $label$18 }
	CALL $102(*(($9 + [144])))
	
.LABEL $label$18
	if ( ((*($9 + [184]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($9 + [192])))
	
.LABEL $label$11
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)5378047714602778623) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-7297667227497529344) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-6533259308153438208) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)4730614985703555072) ){ goto $label$19 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $89(($9 + [200]), ($9 + [48]))
	goto $label$19 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)5378047714602778624) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)5606348217378668544) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)7335361038382006272) ){ goto $label$19 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [2]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $87(($9 + [200]), ($9 + [16]))
	goto $label$19 
	
.LABEL $label$23
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $86(($9 + [200]), ($9 + [8]))
	goto $label$19 
	
.LABEL $label$22
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $89(($9 + [200]), ($9 + [32]))
	goto $label$19 
	
.LABEL $label$21
	*($9 + [68]) = [0]
	*($9 + [64]) = [5]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $90(($9 + [200]), ($9 + [40]))
	goto $label$19 
	
.LABEL $label$20
	*($9 + [84]) = [0]
	*($9 + [80]) = [6]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $88(($9 + [200]), ($9 + [24]))
	
.LABEL $label$19
	CALL $91(($9 + [200]))
	*([0] + [4]) = ($9 + [10464])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	$6 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [240])
	$3 = *($1)
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [12])) = $4
	CALL $102($4)
	*(($4 = ($1 + [16]))) = [0]
	*(($1 + [8])) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [16])
	
.LABEL $label$1
	*($4) = [0]
	*(($1 + [8])) = (int_64)0
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [24])) = $4
	CALL $102($4)
	*(($4 = ($1 + [28]))) = [0]
	*(($1 + [20])) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$4 = ($1 + [28])
	
.LABEL $label$3
	*($4) = [0]
	*(($1 + [20])) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [416])
	*($6) = [0]
	CALL $32($6, $1)
	$4 = *($6)
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $4)
	CALL $33($6, $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$7 }
	CALL free($5)
	
.LABEL $label$7
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN9RedPacket6cancelEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [128])
	*([0] + [4]) = $27
	CALL require_auth(*($0))
	$24 = *(($0 + [168]))
	$9 = *(($0 + [172]))
	if ( ((int_32)$9 == (int_32)$24) ){ goto $label$1 }
	$26 = ($9 + [-24])
	$23 = ([0] - $24)
	
.LOOP $label$2:
	if ( ((int_64)*(*($26)) == (int_64)$1) ){ goto $label$1 }
	$9 = $26
	$10 = ($26 + [-24])
	$26 = $10
	if ( ((int_32)($10 + $23) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [144])
	if ( ((int_32)$9 == (int_32)$24) ){ goto $label$4 }
	$23 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [84]) == (int_32)$2), [16])
	goto $label$3 
	
.LABEL $label$4
	$23 = [0]
	$26 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$3 }
	$23 = CALL $13($2, $26)
	CALL eosio_assert(((int_32)*($23 + [84]) == (int_32)$2), [16])
	
.LABEL $label$3
	$3 = ((int_32)$23 != (int_32)[0])
	CALL eosio_assert($3, [2144])
	$26 = ($23 + [12])
	CALL eosio_assert(((int_32)*($26) != (int_32)*($23 + [8])), [2160])
	*($27 + [56]) = [0]
	*($27 + [48]) = (int_64)0
	$26 = (*($26) - *($23 + [8]))
	$10 = int_32($26 >> [3])
	if ( ($10 == 0) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[536870912]) ){ goto $label$5 }
	$26 = CALL $101($26)
	*((($27 + [48]) + [8])) = ($26 + ($10 << [3]))
	*($27 + [48]) = $26
	*($27 + [52]) = $26
	$9 = *(($23 + [8]))
	$10 = (*(($23 + [12])) - $9)
	if ( ((int_32)$10 <= (int_32)[0]) ){ goto $label$6 }
	CALL memcpy($26, $9, $10)
	*($27 + [52]) = ($26 + $10)
	if ( ($10 == 0) ){ goto $label$6 }
	$4 = ($0 + [64])
	$5 = (($27 + [64]) + [40])
	$11 = ($27 + [32])
	$12 = (($27 + [8]) + [8])
	$13 = (($27 + [8]) + [16])
	$15 = ($27 + [36])
	$16 = (($27 + [8]) + [32])
	$17 = ($0 + [88])
	$18 = ($0 + [92])
	$19 = ($0 + [72])
	$20 = ($23 + [48])
	$22 = ($0 + [80])
	$24 = [0]
	
.LOOP $label$7:
	*($11) = [0]
	$10 = ($24 << [3])
	$6 = *(($26 + $10))
	*($12) = $6
	*($13) = (int_64)-1
	$14 = *($0)
	*($27 + [8]) = $14
	*($15) = [0]
	*($16) = [0]
	$26 = CALL db_lowerbound_i64($14, $6, (int_64)6121367345093935104, (int_64)0)
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$8 }
	$26 = CALL $68(($27 + [8]), $26)
	
.LOOP $label$10:
	if ( ((int_64)*($26 + [8]) != (int_64)$1) ){ goto $label$11 }
	if ( ((int_64)*($26 + [16]) == (int_64)*(($23 + [32]))) ){ goto $label$9 }
	
.LABEL $label$11
	CALL eosio_assert([1], [1808])
	$26 = CALL db_next_i64(*($26 + [44]), ($27 + [64]))
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$8 }
	$26 = CALL $68(($27 + [8]), $26)
	goto $label$10 
	
.LABEL $label$9
	$6 = *((*($27 + [48]) + $10))
	$7 = *($17)
	$25 = *($18)
	if ( ((int_32)$25 == (int_32)$7) ){ goto $label$12 }
	$10 = ($25 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$13:
	if ( ((int_64)*(*($10)) == (int_64)$6) ){ goto $label$12 }
	$25 = $10
	$9 = ($10 + [-24])
	$10 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$25 == (int_32)$7) ){ goto $label$15 }
	$10 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$4), [16])
	goto $label$14 
	
.LABEL $label$15
	$10 = [0]
	$9 = CALL db_find_i64(*($4), *($19), (int_64)4152997948076064768, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $6($4, $9)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$4), [16])
	
.LABEL $label$14
	$25 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($25, [2176])
	$8 = ($10 + [32])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($20)), [896])
	$9 = ($23 + [40])
	CALL eosio_assert(((int_64)*($10 + [24]) >= (int_64)*($9)), [2176])
	$14 = *($0)
	CALL eosio_assert($25, [144])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$4), [192])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$13()), [240])
	$6 = *($10)
	CALL eosio_assert(((int_64)*($20) == (int_64)*($8)), [1024])
	$21 = (int_64)
	*($10 + [24]) = $21(*($10 + [24]) - *($9)))
	CALL eosio_assert(((int_64)$21 > (int_64)-4611686018427387904), [1072])
	CALL eosio_assert(((int_64)*($10 + [24]) < (int_64)4611686018427387904), [1104])
	CALL eosio_assert(((int_64)*($20) == (int_64)*(($10 + [16]))), [304])
	$21 = ((int_64)*($10 + [8]) + (int_64)*($9))
	*($10 + [8]) = $21
	CALL eosio_assert(((int_64)$21 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [384])
	CALL eosio_assert(((int_64)$6 == (int_64)*($10)), [416])
	*((($27 + [112]) + [8])) = $5
	*($27 + [116]) = ($27 + [64])
	*($27 + [112]) = ($27 + [64])
	CALL $10(($27 + [112]), $10)
	CALL db_update_i64(*($10 + [44]), $14, ($27 + [64]), [40])
	if ( (uint_64)($6 <= *($22)) ){ goto $label$16 }
	*($22) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	CALL eosio_assert([1], [1760])
	CALL eosio_assert([1], [1808])
	$10 = CALL db_next_i64(*($26 + [44]), ($27 + [64]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	CALL $68(($27 + [8]), $10)
	
.LABEL $label$17
	CALL $78(($27 + [8]), $26)
	
.LABEL $label$8
	$9 = *($11)
	if ( ($9 == 0) ){ goto $label$18 }
	$26 = *($15)
	if ( ((int_32)$26 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$21:
	$26 = ($26 + [-24])
	$10 = *($26)
	*($26) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL $102($10)
	
.LABEL $label$22
	if ( ((int_32)$9 != (int_32)$26) ){ goto $label$21 }
	$26 = *($11)
	goto $label$19 
	
.LABEL $label$20
	$26 = $9
	
.LABEL $label$19
	*($15) = $9
	CALL $102($26)
	
.LABEL $label$18
	$26 = *($27 + [48])
	$24 = ($24 + [1])
	if ( ($24 <= int_32((*($27 + [52]) - $26) >> [3])) ){ goto $label$7 }
	
.LABEL $label$6
	$1 = *($0)
	CALL eosio_assert($3, [144])
	CALL $83($2, $23, $1)
	$26 = *($27 + [48])
	if ( ($26 == 0) ){ goto $label$23 }
	*($27 + [52]) = $26
	CALL $102($26)
	
.LABEL $label$23
	*([0] + [4]) = ($27 + [128])
	return (unreachable)
	
.LABEL $label$5
	CALL $113(($27 + [48]))
}

void .FUNC _ZN9RedPacket4drawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$3 = *(($0 + [88]))
	$11 = *(($0 + [92]))
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [64])
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$4 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$5), [16])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)4152997948076064768, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $6($5, $11)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$5), [16])
	
.LABEL $label$3
	$11 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($11, [848])
	$7 = *($2 + [8])
	$4 = ($10 + [16])
	CALL eosio_assert(((int_64)*($4) == (int_64)$7), [896])
	$8 = *($2)
	CALL eosio_assert(((int_64)*($10 + [8]) >= (int_64)$8), [2048])
	$9 = *($0)
	CALL eosio_assert($11, [144])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$5), [192])
	CALL eosio_assert(((int_64)*(($0 + [64])) == (int_64)CALL $fimport$13()), [240])
	$6 = *($10)
	CALL eosio_assert(((int_64)$7 == (int_64)*($4)), [1024])
	$7 = (int_64)
	*($10 + [8]) = $7(*($10 + [8]) - $8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1072])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [1104])
	CALL eosio_assert(((int_64)$6 == (int_64)*($10)), [416])
	*($12 + [104]) = (($12 + [48]) + [40])
	*($12 + [100]) = ($12 + [48])
	*($12 + [96]) = ($12 + [48])
	CALL $10(($12 + [96]), $10)
	CALL db_update_i64(*($10 + [44]), $9, ($12 + [48]), [40])
	$10 = ($0 + [80])
	if ( (uint_64)($6 <= *($10)) ){ goto $label$5 }
	*($10) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*((($12 + [32]) + [8])) = *(($2 + [8]))
	*((($12 + [16]) + [8])) = [0]
	*($12 + [32]) = *($2)
	*($12 + [16]) = (int_64)0
	$10 = CALL strlen([2080])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$9 }
	*($12 + [16]) = ($10 << [1])
	$5 = (($12 + [16]) | [1])
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = (($10 + [16]) & [-16])
	$5 = CALL $101($11)
	*($12 + [16]) = ($11 | [1])
	*($12 + [24]) = $5
	*($12 + [20]) = $10
	
.LABEL $label$8
	CALL memcpy($5, [2080], $10)
	
.LABEL $label$7
	*(($5 + $10)) = [0]
	*(($12 + [8])) = *((($12 + [32]) + [8]))
	*($12) = *($12 + [32])
	CALL _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, $12, ($12 + [16]))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*($12 + [24]))
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [112])
	return (unreachable)
	
.LABEL $label$6
	CALL $103(($12 + [16]))
}

void .FUNC _ZN9RedPacket8delentryEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$5 = *($0)
	*($7) = $5
	*($7 + [8]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)6121367345093935104, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $68($7, $0)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)$7), [16])
	CALL eosio_assert([1], [1760])
	CALL eosio_assert([1], [1808])
	$4 = CALL db_next_i64(*($0 + [44]), ($7 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $68($7, $4)
	
.LABEL $label$2
	CALL $78($7, $0)
	
.LABEL $label$1
	$3 = *($7 + [24])
	if ( ($3 == 0) ){ goto $label$3 }
	$6 = ($7 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $102($4)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $102($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $141 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC _ZN9RedPacket4randEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	*($4 + [40]) = ((int_64)((int_64)CALL current_time() + (int_64)(CASTING int_64)(int_32 CALL $fimport$35())) + (int_64)(CASTING int_64)(int_32 CALL $fimport$36()))
	CALL sha256(($4 + [40]), [8], $4)
	$2 = *($4 + [1])
	$3 = *($4)
	*([0] + [4]) = ($4 + [48])
	return (CASTING uint_32)(uint_64 ((uint_64)((int_64)$3 | (int_64)((int_64)$2 << (int_64)32)) % (uint_64)$1))
}

void .FUNC _ZN9RedPacket7openallEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [288])
	*([0] + [4]) = $22
	CALL require_auth(*($0))
	$12 = *(($0 + [128]))
	$14 = *(($0 + [132]))
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$1 }
	$21 = ($14 + [-24])
	$13 = ([0] - $12)
	
.LOOP $label$2:
	if ( ((int_64)*(*($21)) == (int_64)$1) ){ goto $label$1 }
	$14 = $21
	$15 = ($21 + [-24])
	$21 = $15
	if ( ((int_32)($15 + $13) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [104])
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$4 }
	$21 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [8]) == (int_32)$2), [16])
	goto $label$3 
	
.LABEL $label$4
	$21 = [0]
	$15 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-6533249713733369856, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$21 = CALL $74($2, $15)
	CALL eosio_assert(((int_32)*($21 + [8]) == (int_32)$2), [16])
	
.LABEL $label$3
	CALL eosio_assert(((uint_64)$1 > (uint_64)(int_64)268), [1488])
	CALL eosio_assert(($21 == 0), [1488])
	$12 = *(($0 + [48]))
	$14 = *(($0 + [52]))
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$5 }
	$21 = ($14 + [-24])
	$13 = ([0] - $12)
	
.LOOP $label$6:
	if ( ((int_64)*(*($21)) == (int_64)$1) ){ goto $label$5 }
	$14 = $21
	$15 = ($21 + [-24])
	$21 = $15
	if ( ((int_32)($15 + $13) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$15 = ($0 + [24])
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$8 }
	$21 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [88]) == (int_32)$15), [16])
	goto $label$7 
	
.LABEL $label$8
	$21 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)-5003134530400288768, $1)
	if ( ((int_32)$21 <= (int_32)[-1]) ){ goto $label$9 }
	$21 = CALL $20($15, $21)
	CALL eosio_assert(((int_32)*($21 + [88]) == (int_32)$15), [16])
	goto $label$7 
	
.LABEL $label$9
	$21 = [0]
	
.LABEL $label$7
	*($22 + [268]) = $21
	*($22 + [264]) = $15
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [1504])
	$11 = *($21 + [8])
	$8 = *(($0 + [168]))
	$13 = *(($0 + [172]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$10 }
	$15 = ($13 + [-24])
	$12 = ([0] - $8)
	
.LOOP $label$11:
	if ( ((int_64)*(*($15)) == (int_64)$11) ){ goto $label$10 }
	$13 = $15
	$14 = ($15 + [-24])
	$15 = $14
	if ( ((int_32)($14 + $12) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$14 = ($0 + [144])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$13 }
	$15 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [84]) == (int_32)$14), [16])
	*($22 + [260]) = $15
	*($22 + [256]) = $14
	$3 = (($22 + [256]) | [4])
	goto $label$12 
	
.LABEL $label$13
	$15 = CALL $13($14, CALL $fimport$16(*(($0 + [144])), *(($0 + [152])), (int_64)-4816269947984412672, $11))
	CALL eosio_assert(((int_32)*($15 + [84]) == (int_32)$14), [16])
	*($22 + [260]) = $15
	*($22 + [256]) = $14
	$3 = (($22 + [256]) | [4])
	
.LABEL $label$12
	$4 = *(($15 + [48]))
	$11 = *($15 + [40])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1216])
	*($22 + [272]) = [0]
	$8 = ($0 + [64])
	$5 = ((int_64)((int_64)$11 * (int_64)95) / (int_64)100)
	$9 = (($22 + [176]) | [1])
	$7 = (($22 + [128]) | [1])
	$6 = (($22 + [224]) | [1])
	$17 = (($22 + [208]) + [12])
	$18 = ($0 + [88])
	$19 = ($0 + [92])
	$20 = ($0 + [72])
	$15 = [0]
	
.LOOP $label$14:
	$14 = ($15 << [3])
	$10 = *((*($21 + [24]) + $14))
	$11 = *((*($21 + [48]) + $14))
	$16 = *($21 + [80])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1216])
	$11 = ((int_64)$11 * (int_64)$5)
	if ( ((int_64)$16 != (int_64)(CASTING int_64)(int_32 $15)) ){ goto $label$26 }
	*(($14 = (($22 + [240]) + [8]))) = $4
	*(($13 = (($22 + [224]) + [8]))) = [0]
	*($22 + [240]) = ((int_64)$11 / (int_64)9500)
	*($22 + [228]) = [0]
	*($22 + [224]) = [0]
	$21 = CALL strlen([1536])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$25 }
	*($22 + [224]) = ($21 << [1])
	$15 = $6
	if ( $21 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	*(($14 = (($22 + [192]) + [8]))) = $4
	*(($13 = (($22 + [176]) + [8]))) = [0]
	*($22 + [192]) = ((int_64)$11 / (int_64)9500)
	*($22 + [180]) = [0]
	*($22 + [176]) = [0]
	$21 = CALL strlen([1600])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$22 }
	*($22 + [176]) = ($21 << [1])
	$15 = $9
	if ( $21 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$25
	$12 = (($21 + [16]) & [-16])
	$15 = CALL $101($12)
	*($13) = $15
	*($22 + [224]) = ($12 | [1])
	*($22 + [228]) = $21
	
.LABEL $label$24
	CALL memcpy($15, [1536], $21)
	
.LABEL $label$23
	*(($15 + $21)) = [0]
	*((($22 + [32]) + [8])) = *($14)
	*($22 + [32]) = *($22 + [240])
	CALL _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $10, ($22 + [32]), ($22 + [224]))
	if ( ((*($22 + [224]) & [1]) == 0) ){ goto $label$27 }
	CALL $102(*($13))
	
.LABEL $label$27
	$21 = *($3)
	*($17) = *(($21 + [52]))
	*(($15 = (($22 + [208]) + [8]))) = *(($21 + [48]))
	$14 = *($22 + [272])
	*($22 + [208]) = *($21 + [40])
	*($22 + [212]) = *(($21 + [44]))
	$11 = *((*(*($22 + [268]) + [24]) + ($14 << [3])))
	*((($22 + [16]) + [8])) = *($15)
	*($22 + [16]) = *($22 + [208])
	CALL _ZN9RedPacket4mineEyN5eosio5assetEb($0, $11, ($22 + [16]), [1])
	goto $label$19 
	
.LABEL $label$22
	$12 = (($21 + [16]) & [-16])
	$15 = CALL $101($12)
	*($13) = $15
	*($22 + [176]) = ($12 | [1])
	*($22 + [180]) = $21
	
.LABEL $label$21
	CALL memcpy($15, [1600], $21)
	
.LABEL $label$20
	*(($15 + $21)) = [0]
	*((($22 + [64]) + [8])) = *($14)
	*($22 + [64]) = *($22 + [192])
	CALL _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $10, ($22 + [64]), ($22 + [176]))
	if ( ((*($22 + [176]) & [1]) == 0) ){ goto $label$28 }
	CALL $102(*($13))
	
.LABEL $label$28
	$21 = *($3)
	*((($22 + [160]) + [12])) = *(($21 + [52]))
	*(($15 = (($22 + [160]) + [8]))) = *(($21 + [48]))
	$14 = *($22 + [272])
	*($22 + [160]) = *($21 + [40])
	*($22 + [164]) = *(($21 + [44]))
	$11 = *((*(*($22 + [268]) + [24]) + ($14 << [3])))
	*((($22 + [48]) + [8])) = *($15)
	*($22 + [48]) = *($22 + [160])
	CALL _ZN9RedPacket4mineEyN5eosio5assetEb($0, $11, ($22 + [48]), [0])
	
.LABEL $label$19
	if ( (CALL is_account(*((*(*($22 + [268]) + [36]) + (*($22 + [272]) << [3])))) == 0) ){ goto $label$29 }
	$15 = (*($22 + [272]) << [3])
	$21 = *($22 + [268])
	$11 = *((*($21 + [36]) + $15))
	if ( ((int_64)$11 == (int_64)*((*($21 + [24]) + $15))) ){ goto $label$29 }
	$16 = *((*($21 + [48]) + $15))
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1216])
	*(($14 = (($22 + [144]) + [8]))) = $4
	*(($13 = (($22 + [128]) + [8]))) = [0]
	*($22 + [144]) = ((int_64)((int_64)$16 * (int_64)$5) / (int_64)950000)
	*($22 + [132]) = [0]
	*($22 + [128]) = [0]
	$21 = CALL strlen([1664])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$32 }
	*($22 + [128]) = ($21 << [1])
	$15 = $7
	if ( $21 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$12 = (($21 + [16]) & [-16])
	$15 = CALL $101($12)
	*($13) = $15
	*($22 + [128]) = ($12 | [1])
	*($22 + [132]) = $21
	
.LABEL $label$31
	CALL memcpy($15, [1664], $21)
	
.LABEL $label$30
	*(($15 + $21)) = [0]
	*(($22 + [8])) = *($14)
	*($22) = *($22 + [144])
	CALL _ZN9RedPacket4sendEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $11, $22, ($22 + [128]))
	if ( ((*($22 + [128]) & [1]) == 0) ){ goto $label$29 }
	CALL $102(*($13))
	
.LABEL $label$29
	$11 = *((*(*($22 + [268]) + [24]) + (*($22 + [272]) << [3])))
	$12 = *($18)
	$14 = *($19)
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$15 }
	$21 = ($14 + [-24])
	$13 = ([0] - $12)
	
.LOOP $label$33:
	if ( ((int_64)*(*($21)) == (int_64)$11) ){ goto $label$15 }
	$14 = $21
	$15 = ($21 + [-24])
	$21 = $15
	if ( ((int_32)($15 + $13) != (int_32)[-24]) ){ goto $label$33 }
	goto $label$15 
	
.LABEL $label$18
	CALL $103(($22 + [224]))
	
.LABEL $label$17
	CALL $103(($22 + [176]))
	
.LABEL $label$16
	CALL $103(($22 + [128]))
	
.LABEL $label$15
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$35 }
	$21 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [40]) == (int_32)$8), [16])
	goto $label$34 
	
.LABEL $label$35
	$21 = [0]
	$15 = CALL db_find_i64(*($8), *($20), (int_64)4152997948076064768, $11)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$34 }
	$21 = CALL $6($8, $15)
	CALL eosio_assert(((int_32)*($21 + [40]) == (int_32)$8), [16])
	
.LABEL $label$34
	$15 = ((int_32)$21 != (int_32)[0])
	CALL eosio_assert($15, [1728])
	$11 = *($0)
	*((($22 + [80]) + [8])) = ($22 + [256])
	*($22 + [84]) = ($22 + [264])
	*($22 + [80]) = ($22 + [272])
	CALL eosio_assert($15, [144])
	CALL $76($8, $21, $11, ($22 + [80]))
	$15 = (*($22 + [272]) + [1])
	*($22 + [272]) = $15
	if ( ((int_32)$15 > (int_32)[4]) ){ goto $label$36 }
	$21 = *($22 + [268])
	goto $label$14 
	
.LABEL $label$36
	$3 = ($22 + [88])
	$18 = ($22 + [96])
	$12 = ($22 + [104])
	$8 = ($22 + [108])
	$19 = ($22 + [112])
	$13 = [0]
	
.LOOP $label$37:
	$11 = *((*(*($22 + [268]) + [24]) + ($13 << [3])))
	*($3) = $11
	*($18) = (int_64)-1
	$16 = *($0)
	*($22 + [80]) = $16
	*($12) = [0]
	*($8) = [0]
	*($19) = [0]
	$21 = CALL db_lowerbound_i64($16, $11, (int_64)6121367345093935104, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$38 }
	$21 = CALL $68(($22 + [80]), $21)
	
.LOOP $label$40:
	$15 = *($22 + [268])
	if ( ((int_64)*($21 + [8]) != (int_64)*($15 + [8])) ){ goto $label$41 }
	if ( ((int_64)*($21 + [16]) == (int_64)*($15 + [72])) ){ goto $label$39 }
	
.LABEL $label$41
	CALL eosio_assert([1], [1808])
	$21 = CALL db_next_i64(*($21 + [44]), ($22 + [272]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$38 }
	$21 = CALL $68(($22 + [80]), $21)
	goto $label$40 
	
.LABEL $label$39
	CALL eosio_assert([1], [1760])
	CALL eosio_assert([1], [1808])
	$15 = CALL db_next_i64(*($21 + [44]), ($22 + [272]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$42 }
	CALL $68(($22 + [80]), $15)
	
.LABEL $label$42
	CALL $78(($22 + [80]), $21)
	
.LABEL $label$38
	$14 = *($12)
	if ( ($14 == 0) ){ goto $label$43 }
	$21 = *($8)
	if ( ((int_32)$21 == (int_32)$14) ){ goto $label$45 }
	
.LOOP $label$46:
	$21 = ($21 + [-24])
	$15 = *($21)
	*($21) = [0]
	if ( ($15 == 0) ){ goto $label$47 }
	CALL $102($15)
	
.LABEL $label$47
	if ( ((int_32)$14 != (int_32)$21) ){ goto $label$46 }
	$21 = *($12)
	goto $label$44 
	
.LABEL $label$45
	$21 = $14
	
.LABEL $label$44
	*($8) = $14
	CALL $102($21)
	
.LABEL $label$43
	$13 = ($13 + [1])
	if ( ((int_32)$13 != (int_32)[5]) ){ goto $label$37 }
	$16 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [104])) == (int_64)CALL $fimport$13()), [80])
	*(($21 = CALL $101([24])) + [8]) = $2
	*($21) = $1
	CALL eosio_assert([1], [480])
	CALL memcpy(($22 + [80]), $21, [8])
	$11 = *($21)
	$14 = CALL db_store_i64(*(($0 + [112])), (int_64)-6533249713733369856, $16, $11, ($22 + [80]), [8])
	*($21 + [12]) = $14
	$15 = ($0 + [120])
	if ( (uint_64)($11 <= *($15)) ){ goto $label$48 }
	*($15) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$48
	*($22 + [272]) = $21
	$11 = *($21)
	*($22 + [80]) = $11
	*($22 + [284]) = $14
	$13 = ($0 + [132])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [136]))) ){ goto $label$50 }
	*($15 + [8]) = $11
	*($15 + [16]) = $14
	*($22 + [272]) = [0]
	*($15) = $21
	*($13) = ($15 + [24])
	goto $label$49 
	
.LABEL $label$50
	CALL $77(($0 + [128]), ($22 + [272]), ($22 + [80]), ($22 + [284]))
	
.LABEL $label$49
	$21 = *($22 + [272])
	*($22 + [272]) = [0]
	if ( ($21 == 0) ){ goto $label$51 }
	CALL $102($21)
	
.LABEL $label$51
	*([0] + [4]) = ($22 + [288])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [480])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [624])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [32]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [240])
	$5 = *(*($3 + [8]) + [4])
	$6 = *(($5 + [48]))
	$4 = *($1)
	if ( ((int_64)*(*($3)) != (int_64)*(*(*($3 + [4]) + [4]) + [80])) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [32]))), [1024])
	$6 = (int_64)
	*($1 + [24]) = $6(*($1 + [24]) - *(($5 + [40]))))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1072])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1104])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [16]))), [304])
	$6 = ((int_64)*($1 + [8]) + (int_64)*(($5 + [40])))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [384])
	$3 = *(*(($3 + [8])) + [4])
	CALL eosio_assert(((int_64)*(($3 + [48])) == (int_64)*(($1 + [32]))), [1024])
	$6 = (int_64)
	*($1 + [24]) = $6(*($1 + [24]) - *($3 + [40])))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1072])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1104])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [416])
	$8 = $8
	$3 = ($8 + [-48])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($8 + [-8])
	CALL $10($7, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $101([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [624])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [832])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $40($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [624])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [60 align=4]) = (int_64)0
	*(($0 + [68])) = (int_64)0
	*(($0 + [76])) = (int_64)0
	*($0 + [84]) = $1
	CALL $37(*($2 + [4]), $0)
	*($0 + [88]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $25(CALL $25($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [624])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [56]) = ((int_32)*($3 + [15]) != (int_32)[0])
	$0 = CALL $38(CALL $25($0, ($1 + [60])), ($1 + [72]))
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1840])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1888])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1952])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $102($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $102($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *($0 + [24])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [480])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [8])
	*($0) = $6
	$3 = *($1 + [8])
	$2 = *(($1 + [12]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$2
	*($0) = $6
	$3 = *($1 + [20])
	$2 = *(($1 + [24]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	$6 = ($6 + [25])
	*($0) = $6
	$3 = *($1 + [60])
	$2 = *(($1 + [64]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$6
	*($0) = $6
	$2 = *($1 + [72])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [76])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $6
	$1 = *(($1 + [72]))
	$1 = ( *(($1 + [76])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$8 }
	*($0) = ($1 + $6)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $34(CALL $34($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [56])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [480])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $35(CALL $34($0, ($1 + [60])), ($1 + [72]))
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*(($2 + [80])))
	
.LABEL $label$4
	$3 = *($2 + [60])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [64])) = $3
	CALL $102($3)
	
.LABEL $label$5
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [24])) = $3
	CALL $102($3)
	
.LABEL $label$6
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [12])) = $3
	CALL $102($3)
	
.LABEL $label$7
	CALL $102($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $102($2)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}