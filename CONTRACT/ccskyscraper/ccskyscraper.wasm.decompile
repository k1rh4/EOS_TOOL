(data (i32.const 8192) "eosio.token\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8248) "string is too long to be a valid name\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8372) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8439) "character is not in allowed character set for names\00")
(data (i32.const 8491) "caller isn\'t the eosio.token\00")
(data (i32.const 8520) "EOS\00")
(data (i32.const 8524) "just allow eos\00")
(data (i32.const 8539) ";\00")
(data (i32.const 8541) "action\00")
(data (i32.const 8548) "memo params is less 2\00")
(data (i32.const 8570) "CCSKY\00")
(data (i32.const 8576) "buyLayer\00")
(data (i32.const 8585) "_\00")
(data (i32.const 8587) "active\00")
(data (i32.const 8594) "buylayertx\00")
(data (i32.const 8605) "buyPredict\00")
(data (i32.const 8616) "memo params is less 3\00")
(data (i32.const 8638) "buyoptx\00")
(data (i32.const 8646) "editPlayerName\00")
(data (i32.const 8661) "edit name price not enough\00")
(data (i32.const 8688) "editpn\00")
(data (i32.const 8695) " this action no logic func.\00")
(data (i32.const 8723) "string is too long to be a valid symbol_code\00")
(data (i32.const 8768) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8821) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8870) "invalid symbol name\00")
(data (i32.const 8890) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8941) "error reading iterator\00")
(data (i32.const 8964) "get\00")
(data (i32.const 8968) "read\00")
(data (i32.const 8976) "\14#\00\00")
(data (i32.const 8980) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9013) "write\00")
(data (i32.const 9019) "get unit price precision error\00")
(data (i32.const 9050) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9109) "buy num is error\00")
(data (i32.const 9126) "game not init\00")
(data (i32.const 9140) "this player don\'t play the game\00")
(data (i32.const 9172) "eos not enough by valuta\00")
(data (i32.const 9197) "eos not enough\00")
(data (i32.const 9212) "eos too mach\00")
(data (i32.const 9225) "cannot create objects in table of another contract\00")
(data (i32.const 9276) "attempt to subtract asset with different symbol\00")
(data (i32.const 9324) "subtraction underflow\00")
(data (i32.const 9346) "subtraction overflow\00")
(data (i32.const 9367) "divide by zero\00")
(data (i32.const 9382) "signed division overflow\00")
(data (i32.const 9407) "cannot pass end iterator to modify\00")
(data (i32.const 9442) "object passed to modify is not in multi_index\00")
(data (i32.const 9488) "cannot modify objects in table of another contract\00")
(data (i32.const 9539) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9598) "attempt to add asset with different symbol\00")
(data (i32.const 9641) "addition underflow\00")
(data (i32.const 9660) "addition overflow\00")
(data (i32.const 9678) "multiplication overflow\00")
(data (i32.const 9702) "multiplication underflow\00")
(data (i32.const 9728) "developer prize\00")
(data (i32.const 9744) "cannot pass end iterator to erase\00")
(data (i32.const 9778) "cannot increment end iterator\00")
(data (i32.const 9808) "object passed to erase is not in multi_index\00")
(data (i32.const 9853) "cannot erase objects in table of another contract\00")
(data (i32.const 9903) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9956) "00000000000000000000\00")
(data (i32.const 9977) "transfer\00")
(data (i32.const 9986) "someone\00")
(data (i32.const 9994) "withdraw\00")
(data (i32.const 10003) "there is no building.\00")
(data (i32.const 10025) "this is not winner.\00")
(data (i32.const 10045) "Building has edit.\00")
(data (i32.const 10064) "A\00")
(data (i32.const 10066) "B\00")
(data (i32.const 10068) "C\00")
(data (i32.const 10070) "D\00")
(data (i32.const 10072) "buy predict type is error\00")
(data (i32.const 10098) "name has been used\00")
(data (i32.const 10117) "player has edited name\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$7 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "transaction_size" (func $fimport$11 (result i32)))
(import "env" "read_transaction" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$13 (result i32)))
(import "env" "tapos_block_num" (func $fimport$14 (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$16 (result i64)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$23 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "db_idx64_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$46 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$47 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$48 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$49 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$50 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$51 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$52 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$53 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$54 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$55 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$56 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $203))
(export "_Znwj" (func $201))
(export "_Znaj" (func $202))
(export "_ZdaPv" (func $204))
(export "_ZnwjSt11align_val_t" (func $205))
(export "_ZnajSt11align_val_t" (func $206))
(export "_ZdlPvSt11align_val_t" (func $207))
(export "_ZdaPvSt11align_val_t" (func $208))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $15 $17)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18556))
(global $global$2 i32 (i32.const 18556))


void .FUNC $220 (int_32 $0)
{
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [6])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[67108864]) ){ goto $label$3 }
	$6 = [67108863]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$6 = int_32($7 >> [5])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [6]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $218($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [6])))) = *($1)
	*(($4 + [56])) = *(($1 + [56]))
	*(($4 + [48])) = *(($1 + [48]))
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [6]))
	$4 = ($4 + [64])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8968])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	CALL $26(($4 + [56]), (($4 + [72]) + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[7]), [8968])
	CALL memcpy((($4 + [72]) + [24]), *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [24])
	CALL $31(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	CALL $186($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [64]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$0 = CALL $26($0, ($1 + [68]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [64])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $40($0, ($1 + [68]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($1 + [8]) = *(*($0))
	$3 = *(*($0 + [4]) + [4])
	$4 = *($3 + [16])
	CALL __multi3($2, $4, (int_64)$4 >> (int_64)63), (int_64)10, (int_64)0)
	$5 = *(($3 + [24]))
	$4 = *(($2 + [8]))
	$6 = *($2)
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*(($1 + [24])) = $5
	*($1 + [16]) = ((int_64)$6 / (int_64)100)
	$5 = *(*($0 + [8]))
	CALL eosio_assert([1], [8821])
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8870])
	*(($1 + [40])) = $5
	*($1 + [32]) = (int_64)0
	$5 = *(*(($0 + [8])))
	CALL eosio_assert([1], [8821])
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8870])
	*(($1 + [56])) = $5
	*($1 + [48]) = (int_64)0
	$5 = *(*(($0 + [8])))
	CALL eosio_assert([1], [8821])
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [8870])
	*(($1 + [72])) = $5
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)300)
	$4 = CALL current_time()
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($1 + [128]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = [0]
	*($1 + [104]) = ((int_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)65100)
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = *(($2 + [8]))
	*((($4 + [16]) + [8])) = $5
	$6 = *($2)
	*(($4 + [8])) = $5
	*($4) = $6
	*($4 + [16]) = $6
	CALL $35($0, $1, $4, $3)
	$global$0 = ($4 + [32])
}

void .FUNC $178 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [56])
	$9 = *(($6 + [64]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [64])) = $9
	*($1 + [56]) = $7
	*($1 + [72]) = ((int_64)*(*(*($3) + [4]) + [72]) + (int_64)1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $133(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8968])
	CALL memcpy(($4 + [72]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8968])
	CALL memcpy((($4 + [72]) + [8]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	CALL $26(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [24])
	CALL $27(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $221 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = [0]
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$6 = *($0)
	*($4 + [40]) = $6
	*($4 + [48]) = $3
	$7 = CALL db_find_i64($6, $3, (int_64)7760153368969871360, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $32(($4 + [40]), $7)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($4 + [40])), [8890])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10003])
	
.LABEL $label$1
	CALL require_auth(*($5 + [8]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$6 }
	$8 = [0]
	$9 = *([0] + [8976])
	
.LOOP $label$8:
	*((($4 + [80]) + ($7 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$8 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$7 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($4 + [24]) = ($8 << [1])
	$9 = (($4 + [24]) | [1])
	goto $label$4 
	
.LABEL $label$6
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	*($4 + [24]) = [0]
	$7 = (($4 + [24]) | [1])
	goto $label$3 
	
.LABEL $label$5
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($4 + [24]) = ($10 | [1])
	*($4 + [32]) = $9
	*($4 + [28]) = $8
	
.LABEL $label$4
	$10 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$9:
	*(($9 + $7)) = *((($4 + [80]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$9 }
	$7 = ($9 + $8)
	
.LABEL $label$3
	$8 = [0]
	*($7) = [0]
	$1 = *(($5 + [8]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$13 }
	$9 = *([0] + [8976])
	
.LOOP $label$15:
	*((($4 + [80]) + ($7 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$8 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$14 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$15 }
	
.LABEL $label$14
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [8]) = ($8 << [1])
	$9 = (($4 + [8]) | [1])
	goto $label$11 
	
.LABEL $label$13
	*((($4 + [8]) + [8])) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [8]) = [0]
	$7 = (($4 + [8]) | [1])
	goto $label$10 
	
.LABEL $label$12
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($4 + [8]) = ($10 | [1])
	*($4 + [16]) = $9
	*($4 + [12]) = $8
	
.LABEL $label$11
	$10 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$16:
	*(($9 + $7)) = *((($4 + [80]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$16 }
	$7 = ($9 + $8)
	
.LABEL $label$10
	*($7) = [0]
	$11 = ($7 <= $8)
	$10 = ($8 & [1])
	$8 = *($4 + [24])
	$8 = ( *($4 + [28]) ? uint_32($8 >> [1]) : $10 )
	$9 = ($7 & [1])
	$7 = *($4 + [8])
	$7 = ( *($4 + [12]) ? uint_32($7 >> [1]) : $9 )
	$12 = ( $7 ? $8 : $11 )
	if ( ($12 == 0) ){ goto $label$23 }
	$9 = CALL $222(( *($4 + [32]) ? (($4 + [24]) | [1]) : $10 ), ( *(($4 + [16])) ? (($4 + [8]) | [1]) : $9 ), $12)
	if ( ($9 == 0) ){ goto $label$23 }
	$7 = [1]
	if ( (*($4 + [8]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$9 = ( [-1] ? $11 : ($8 <= $7) )
	$7 = [1]
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($4 + [16])))
	if ( ((*($4 + [24]) & $7) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( (*($4 + [24]) & $7) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ($9 == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	CALL _ZdlPv(*($4 + [32]))
	if ( ($9 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert([0], [10025])
	
.LABEL $label$17
	if ( (*($5 + [64]) == 0) ){ goto $label$24 }
	CALL eosio_assert([0], [10045])
	
.LABEL $label$24
	$1 = *($0)
	*($4 + [80]) = $2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9407])
	CALL $33(($4 + [40]), $5, $1, ($4 + [80]))
	$9 = *($4 + [64])
	if ( ($9 == 0) ){ goto $label$25 }
	$10 = ($4 + [68])
	$7 = *($10)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$27 }
	
.LOOP $label$28:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	if ( ((*($8 + [68]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($8 + [76])))
	
.LABEL $label$30
	CALL _ZdlPv($8)
	
.LABEL $label$29
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$28 }
	$7 = *(($4 + [64]))
	goto $label$26 
	
.LABEL $label$27
	$7 = $9
	
.LABEL $label$26
	*($10) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$25
	$global$0 = ($4 + [96])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $148(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $149(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$7 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$0 = *($7 + [8])
	if ( ($0 == 0) ){ goto $label$4 }
	$5 = ($7 + [12])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$8
	if ( ((*(($3 + [-72])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [-64])))
	
.LABEL $label$9
	$1 = ($3 + [-136])
	if ( ((*(($3 + [-112])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [-104])))
	
.LABEL $label$10
	$3 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$3 = *(($7 + [8]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($3)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$2 }
	$7 = ($3 + [1])
	$8 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($3 + [8])
	$8 = *($3 + [4])
	
.LABEL $label$1
	if ( ((int_32)*((($7 + $8) + [-1])) != (int_32)[95]) ){ goto $label$16 }
	*($4 + [96]) = [0]
	*($4 + [88]) = (int_64)0
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$7 = CALL $223([8585])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$15 }
	*($4 + [128]) = ($7 << [1])
	$8 = (($4 + [128]) | [1])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$9 = *($0)
	if ( $6 ){ goto $label$18 }
	$7 = uint_32($5 >> [1])
	$8 = ($3 + [1])
	goto $label$17 
	
.LABEL $label$18
	$7 = *($3 + [4])
	$8 = *($3 + [8])
	
.LABEL $label$17
	*($4 + [84]) = $7
	*($4 + [80]) = $8
	*($4 + [24]) = *($4 + [80])
	$7 = CALL $2(($4 + [128]), ($4 + [24]))
	*(($4 + [120])) = [0]
	*($4 + [88]) = $9
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	*($4 + [124]) = [0]
	*($4 + [96]) = *($7)
	*($4 + [72]) = ($4 + [88])
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$20 }
	$7 = uint_32($7 >> [1])
	$8 = ($3 + [1])
	goto $label$19 
	
.LABEL $label$20
	$7 = *($3 + [4])
	$8 = *($3 + [8])
	
.LABEL $label$19
	*($4 + [68]) = $7
	*($4 + [64]) = $8
	*($4 + [16]) = *($4 + [64])
	$8 = CALL $2(($4 + [48]), ($4 + [16]))
	CALL $25(($4 + [128]), ($4 + [72]), $8)
	$7 = *($4 + [132])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((int_64)*($8) != (int_64)*($7)) ){ goto $label$8 }
	$9 = *($7 + [8])
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$12 }
	$8 = [0]
	$5 = *([0] + [8976])
	
.LOOP $label$22:
	*((($4 + [128]) + ($7 = $8))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$8 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$21 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$11 }
	*($4 + [48]) = ($8 << [1])
	$5 = (($4 + [48]) | [1])
	goto $label$10 
	
.LABEL $label$15
	$5 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($5)
	*($4 + [128]) = ($5 | [1])
	*($4 + [136]) = $8
	*($4 + [132]) = $7
	
.LABEL $label$14
	CALL memcpy($8, [8585], $7)
	
.LABEL $label$13
	*(($8 + $7)) = [0]
	CALL $20($0, $3, ($4 + [88]), ($4 + [128]))
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($4 + [136]))
	
.LABEL $label$23
	CALL $212($3, *($4 + [88]))
	$5 = *($4 + [88])
	if ( ($5 == 0) ){ goto $label$7 }
	$8 = *($4 + [92])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$25 }
	
.LOOP $label$26:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$27
	$8 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$26 }
	$7 = *($4 + [88])
	goto $label$24 
	
.LABEL $label$25
	$7 = $5
	
.LABEL $label$24
	*($4 + [92]) = $5
	CALL _ZdlPv($7)
	$7 = [1]
	$8 = *($3)
	if ( (($8 & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	*($4 + [48]) = [0]
	$7 = (($4 + [48]) | [1])
	goto $label$9 
	
.LABEL $label$11
	$6 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($4 + [48]) = ($6 | [1])
	*($4 + [56]) = $5
	*($4 + [52]) = $8
	
.LABEL $label$10
	$6 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$28:
	*(($5 + $7)) = *((($4 + [128]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$28 }
	$7 = ($5 + $8)
	
.LABEL $label$9
	*($7) = [0]
	if ( (*($3) & [1]) ){ goto $label$30 }
	*($3) = [0]
	goto $label$29 
	
.LABEL $label$30
	*(*($3 + [8])) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$29
	CALL $214($3, [0])
	*(($3 + [8])) = *((($4 + [48]) + [8]))
	*($3) = *($4 + [48])
	
.LABEL $label$8
	$5 = *($4 + [112])
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($4 + [116])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$32 }
	
.LOOP $label$33:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$34 }
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($8 + [24])))
	
.LABEL $label$35
	CALL _ZdlPv($8)
	
.LABEL $label$34
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$33 }
	$7 = *(($4 + [112]))
	goto $label$31 
	
.LABEL $label$32
	$7 = $5
	
.LABEL $label$31
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = [1]
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = uint_32($8 >> $7)
	$7 = ($3 + $7)
	goto $label$4 
	
.LABEL $label$5
	$8 = *($3 + [4])
	$7 = *($3 + [8])
	
.LABEL $label$4
	*($4 + [36]) = $8
	*($4 + [32]) = $7
	*($4 + [8]) = *($4 + [32])
	CALL $28($0, $1, $2, *(CALL $2(($4 + [40]), ($4 + [8]))))
	$global$0 = ($4 + [144])
	return (unreachable)
	
.LABEL $label$3
	CALL $209(($4 + [128]))
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1 + [8]) = (int_64)1
	*($1) = (int_64)0
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [24])) = $2
	*($1 + [16]) = (int_64)0
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [8870])
	*(($1 + [56])) = $2
	*($1 + [48]) = (int_64)0
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $5
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [8870])
	*(($1 + [72])) = $2
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = (int_64)0
	$4 = *($0 + [4])
	*($1 + [96]) = *($4)
	*($1 + [144]) = [0]
	$3 = *($4)
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($1 + [128]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [104]) = ((int_64)$3 + (int_64)64800)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [176])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [148]) = $1
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	$1 = *($2)
	CALL $189(*($2 + [4]), $0)
	*($3 + [160]) = ($3 + [145])
	*($3 + [156]) = $3
	*($3 + [152]) = $3
	CALL $163(($3 + [152]), $0)
	$4 = *($0)
	*($0 + [152]) = CALL db_store_i64(*($1 + [8]), (int_64)7035924439720001536, *(*($2 + [8])), $4, $3, [145])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($3 + [168]) = *($0 + [8])
	*($0 + [156]) = CALL db_idx64_store($4, (int_64)7035924439720001536, $5, $6, ($3 + [168]))
	$global$0 = ($3 + [176])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([184])
	CALL $105($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [172])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([184])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = $0
	CALL $107(($3 + [32]), $5)
	*($5 + [172]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8964])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $23($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8968])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([40])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8968])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8968])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [36]) = ($2 + [16])
	CALL $26(($3 + [32]), ($5 + [16]))
	*($5 + [36]) = [-1]
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9013])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9013])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [116 align=4]) = (int_64)0
	*($5 + [124]) = [0]
	*($5 + [132]) = $0
	CALL $103(($3 + [32]), $5)
	*($5 + [136]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $104(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [116]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [124])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([160])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [148]) = $0
	CALL $101(($3 + [32]), $5)
	*($5 + [156]) = [-1]
	*($5 + [152]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9013])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9013])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9013])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9013])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9013])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $222 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $226 (int_32 $0)
{
	return CALL $227([10160], $0)
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *(*($0))
	*($1) = $3
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [8976])
	
.LOOP $label$6:
	*((($2 + [19]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	*($2) = [0]
	$6 = ($2 | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($2 + [19]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	*($6) = [0]
	$6 = ($1 + [8])
	if ( (*($1 + [8]) & [1]) ){ goto $label$9 }
	*($6) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [16]))) = [0]
	*(($1 + [12])) = [0]
	
.LABEL $label$8
	CALL $214($6, [0])
	*(($6 + [8])) = *(($2 + [8]))
	*($6) = *($2)
	$8 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$3 = $9
	$4 = [1]
	$5 = $6
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$3 = $9
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$5 = ($6 + [1])
	$6 = $5
	if ( $4 ){ goto $label$14 }
	$4 = [1]
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	CALL eosio_assert($4, [8870])
	*(($1 + [32])) = $8
	*($1 + [24]) = (int_64)0
	$8 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$3 = $9
	$4 = [1]
	$5 = $6
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$3 = $9
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$5 = ($6 + [1])
	$6 = $5
	if ( $4 ){ goto $label$19 }
	$4 = [1]
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	CALL eosio_assert($4, [8870])
	*(($1 + [48])) = $8
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = (int_64)0
	*($1 + [104]) = (int_64)0
	*($1 + [112]) = [0]
	CALL $215(($1 + [116]), [9727])
	*($1 + [128]) = [0]
	$global$0 = ($2 + [32])
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [16])) = $2
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [8870])
	*(($1 + [64])) = $2
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = (int_64)0
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $167(*($0 + [4]), $1)
	$5 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [98])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *($1 + [116])
	$6 = ( *(($1 + [120])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL $226($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $118($3, $1)
	$7 = *($1)
	*($1 + [136]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [144])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = *(*($0) + [4])
	$3 = *($2 + [16])
	$5 = *(($2 + [24]))
	$4 = *($0 + [4])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$5), [9598])
	$3 = ((int_64)$3 + (int_64)*($4))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9660])
	*(($1 + [24])) = $5
	*($1 + [16]) = $3
	$2 = *(*($0) + [4])
	$5 = *($2 + [32])
	$3 = *(($2 + [40]))
	$4 = *($0 + [8])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$3), [9598])
	$5 = ((int_64)$5 + (int_64)*($4))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9660])
	$2 = *($0 + [12])
	$6 = *($2)
	$7 = *($2 + [8])
	$4 = *($0 + [4])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$7), [9276])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($4))) > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9346])
	CALL eosio_assert(((int_64)$7 == (int_64)$3), [9276])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($5 - $6)) > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9346])
	*(($1 + [40])) = $3
	*($1 + [32]) = $5
	$2 = *(*($0) + [4])
	$3 = *($2 + [48])
	$5 = *(($2 + [56]))
	$4 = *($0 + [16])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$5), [9598])
	$3 = ((int_64)$3 + (int_64)*($4))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9660])
	*(($1 + [56])) = $5
	*($1 + [48]) = $3
	$2 = *(*($0) + [4])
	$3 = *($2 + [64])
	$5 = *(($2 + [72]))
	$4 = *($0 + [20])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$5), [9598])
	$3 = ((int_64)$3 + (int_64)*($4))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9660])
	*(($1 + [72])) = $5
	*($1 + [64]) = $3
	*($1 + [136]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [144]) = *(*($0 + [24]))
	$8 = *($0 + [20])
	$6 = *(*($0 + [12]) + [8])
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$4 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8870])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$6), [9050])
	if ( ((int_64)*($8) < (int_64)1) ){ goto $label$7 }
	$2 = *($0 + [28])
	*($1 + [96]) = *($2)
	*(($1 + [104])) = *(($2 + [8]))
	goto $label$6 
	
.LABEL $label$7
	$6 = *(*(($0 + [12])) + [8])
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $5
	$4 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$3 = $5
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $4 ){ goto $label$12 }
	$4 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$8
	CALL eosio_assert($4, [8870])
	*(($1 + [104])) = $6
	*($1 + [96]) = (int_64)0
	
.LABEL $label$6
	$2 = *($0 + [32])
	*($1 + [112]) = *($2)
	*(($1 + [120])) = *(($2 + [8]))
	*($1 + [128]) = *(*($0 + [36]))
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [32])
	$9 = *(($6 + [40]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [40])) = $9
	*($1 + [32]) = $7
	$6 = *(*($3) + [4])
	$7 = *($6 + [80])
	$9 = *(($6 + [88]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [88])) = $9
	*($1 + [80]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [184]) = ($4 + [168])
	*($4 + [180]) = $4
	*($4 + [176]) = $4
	CALL $109(($4 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $4, [168])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL sha512($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[64]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [8204])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[64]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [80])
}

void .FUNC $169 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [76])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1 + [8]) = *($5 + [136])
	*($1) = *($5 + [8])
	$6 = *($0)
	*(($1 + [24])) = *(($5 + [24]))
	*($1 + [16]) = *($5 + [16])
	$5 = *($4 + [4])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	*($1 + [48]) = *(*(*($4) + [4]) + [88])
	$7 = CALL current_time()
	*($1 + [64]) = [0]
	*($1 + [56]) = ((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $215(($1 + [68]), [9986])
	$5 = *($1 + [68])
	$4 = ( *(($1 + [72])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [65])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $226($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	CALL $171($3, $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($6 + [8]), (int_64)7760153368969871360, *(*($0 + [8])), $7, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($4)
	if ( (uint_64)($7 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *($1 + [8])) >> [6]))
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[0]), [9013])
	CALL memcpy(*($5), ($2 + [15]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$1 }
	$3 = *(($1 + [12]))
	$5 = *(($1 + [8]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $176($0, $5)
	$5 = ($5 + [64])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*(($5 + [132])) == (int_32)$1), [8890])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $47($1, $5)
	CALL eosio_assert(((int_32)*($5 + [132]) == (int_32)$1), [8890])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [80]) = $0
	CALL $113(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $112(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $50 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$9 = ($global$0 - [176])
	$global$0 = $9
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	*((($9 + [136]) + [32])) = [0]
	*($9 + [152]) = (int_64)-1
	*($9 + [160]) = (int_64)0
	$10 = *($0)
	*($9 + [136]) = $10
	*($9 + [144]) = $1
	*((($9 + [96]) + [32])) = [0]
	*($9 + [104]) = $2
	*($9 + [96]) = $10
	*($9 + [112]) = (int_64)-1
	*($9 + [120]) = (int_64)0
	*($9 + [72]) = $2
	$11 = CALL db_find_i64($10, $1, (int_64)-7948560026672185344, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $59(($9 + [136]), $11)
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)($9 + [136])), [8890])
	*($9 + [92]) = $11
	*($9 + [88]) = ($9 + [136])
	$12 = (($9 + [88]) | [4])
	goto $label$2 
	
.LABEL $label$3
	*($9 + [92]) = [0]
	*($9 + [88]) = ($9 + [136])
	$1 = *($0)
	*($9 + [44]) = $4
	*($9 + [40]) = ($9 + [72])
	CALL $60(($9 + [56]), ($9 + [136]), $1, ($9 + [40]))
	*($9 + [88]) = *($9 + [56])
	$12 = (($9 + [88]) | [4])
	
.LABEL $label$2
	*($9 + [72]) = $2
	$14 = *(($9 + [124]))
	$13 = *(($9 + [120]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$5 }
	
.LOOP $label$7:
	$11 = ($14 + [-24])
	$15 = *($11)
	if ( ((int_64)*($15) == (int_64)$2) ){ goto $label$6 }
	$14 = $11
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($15 + [80]) == (int_32)($9 + [96])), [8890])
	goto $label$4 
	
.LABEL $label$5
	$11 = CALL db_find_i64(*($9 + [96]), *(($9 + [104])), (int_64)-7948565157351784448, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$15 = CALL $61(($9 + [96]), $11)
	CALL eosio_assert(((int_32)*($15 + [80]) == (int_32)($9 + [96])), [8890])
	goto $label$4 
	
.LABEL $label$8
	$1 = *($0)
	*($9 + [44]) = $4
	*($9 + [40]) = ($9 + [72])
	CALL $62(($9 + [56]), ($9 + [96]), $1, ($9 + [40]))
	$15 = *($9 + [60])
	
.LABEL $label$4
	$16 = *($12)
	$1 = *($16 + [72])
	$1 = *($15 + [8])
	CALL __multi3(($9 + [24]), $1, (int_64)$1 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$10 = *(($15 + [16]))
	$1 = *(($9 + [32]))
	$17 = *($9 + [24])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9702])
	*($9 + [80]) = $10
	CALL eosio_assert(((int_64)$10 == (int_64)*(($16 + [16]))), [9276])
	$1 = (int_64)
	*($9 + [72]) = $1($17 - *($16 + [8])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9346])
	*($9 + [56]) = (int_64)0
	$1 = *($4)
	*($9 + [64]) = $1
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$1 = $10
	$14 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$1 = $10
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $14 ){ goto $label$13 }
	$14 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$14 = [0]
	
.LABEL $label$9
	CALL eosio_assert($14, [8870])
	$1 = *($15 + [40])
	if ( ((uint_64)$1 > (uint_64)(int_64)3) ){ goto $label$14 }
	goto $label$19 
	
.LABEL $label$19
	$14 = ($16 + [40])
	$11 = ($15 + [48])
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$18
	$14 = ($16 + [48])
	$11 = ($15 + [56])
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$14 = ($16 + [56])
	$11 = ($15 + [64])
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$14 = ($16 + [64])
	$11 = ($15 + [72])
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = *($11)
	if ( (int_64)($3 == 0) ){ goto $label$14 }
	$1 = *($14)
	$1 = *($15 + [24])
	CALL __multi3(($9 + [8]), $1, (int_64)$1 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$1 = *(($15 + [32]))
	$17 = *((($9 + [8]) + [8]))
	$10 = *($9 + [8])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$17 < (int_64)0) : (int_64)($17 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$17 > (int_64)-1) : ((int_64)$17 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert((((int_64)$3 != (int_64)-1) | ((int_64)$10 != (int_64)-9223372036854775808)), [9382])
	*(($11 = (($9 + [56]) + [8]))) = $1
	$14 = *($12)
	$17 = *(($14 + [32]))
	$10 = ((int_64)$10 / (int_64)$3)
	*($9 + [56]) = $10
	CALL eosio_assert(((int_64)$17 == (int_64)$1), [9276])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - *($14 + [24]))) > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [9346])
	*($11) = $1
	*($9 + [56]) = $10
	
.LABEL $label$14
	$11 = *($9 + [92])
	$1 = *($0)
	*($9 + [44]) = ($9 + [72])
	*($9 + [40]) = ($9 + [88])
	*($9 + [48]) = ($9 + [56])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9407])
	CALL $63(($9 + [136]), $11, $1, ($9 + [40]))
	$1 = *($0)
	$11 = *($5 + [4])
	*($9 + [40]) = $5
	*($9 + [44]) = ($9 + [72])
	*($9 + [48]) = ($9 + [56])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9407])
	CALL $64($6, $11, $1, ($9 + [40]))
	if ( ((int_64)*(*($7 + [4]) + [8]) != (int_64)$2) ){ goto $label$20 }
	$1 = *($0)
	$11 = *($7 + [4])
	*($9 + [40]) = $7
	*($9 + [44]) = ($9 + [72])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9407])
	CALL $65($8, $11, $1, ($9 + [40]))
	
.LABEL $label$20
	$13 = *($9 + [120])
	if ( ($13 == 0) ){ goto $label$21 }
	$15 = ($9 + [124])
	$11 = *($15)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$23 }
	
.LOOP $label$24:
	$11 = ($11 + [-24])
	$14 = *($11)
	*($11) = [0]
	if ( ($14 == 0) ){ goto $label$25 }
	CALL _ZdlPv($14)
	
.LABEL $label$25
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$24 }
	$11 = *(($9 + [120]))
	goto $label$22 
	
.LABEL $label$23
	$11 = $13
	
.LABEL $label$22
	*($15) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$21
	$13 = *($9 + [160])
	if ( ($13 == 0) ){ goto $label$1 }
	$15 = ($9 + [164])
	$11 = *($15)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$27 }
	
.LOOP $label$28:
	$11 = ($11 + [-24])
	$14 = *($11)
	*($11) = [0]
	if ( ($14 == 0) ){ goto $label$29 }
	CALL _ZdlPv($14)
	
.LABEL $label$29
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$28 }
	$11 = *(($9 + [160]))
	goto $label$26 
	
.LABEL $label$27
	$11 = $13
	
.LABEL $label$26
	*($15) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$1
	$global$0 = ($9 + [176])
	(CASTING uint_32)(uint_64 $1)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	CALL $119($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [152]) = $2
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	*(($4 + [144])) = [0]
	*($4 + [120]) = $1
	*($4 + [128]) = (int_64)-1
	*($4 + [112]) = *($0)
	*($4 + [136]) = (int_64)0
	CALL $53(($4 + [104]), $0, $1, $3, ($4 + [112]))
	$3 = *($4 + [108])
	if ( ((int_64)*($3 + [56]) != (int_64)0) ){ goto $label$2 }
	if ( ((int_64)*($3 + [64]) != (int_64)0) ){ goto $label$2 }
	if ( *($3 + [112]) ){ goto $label$2 }
	*((($4 + [64]) + [32])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	$1 = *($0)
	*($4 + [64]) = $1
	$2 = *($4 + [152])
	*($4 + [72]) = $2
	$3 = CALL db_find_i64($1, $2, (int_64)-6030912142679474176, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $47(($4 + [64]), $3) + [132]) == (int_32)($4 + [64])), [8890])
	$3 = *($4 + [108])
	$2 = *($0)
	*($4 + [16]) = ($4 + [152])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9407])
	CALL $66(($4 + [112]), $3, $2, ($4 + [16]))
	$2 = *($4 + [152])
	*($4 + [60]) = [0]
	$5 = ($4 + [24])
	$6 = (($4 + [16]) + [16])
	$7 = ($4 + [40])
	$8 = (($4 + [16]) + [32])
	$9 = ($4 + [44])
	
.LOOP $label$4:
	*($5) = $2
	*($6) = (int_64)-1
	*($7) = (int_64)0
	*($8) = [0]
	$1 = *($0)
	*($4 + [16]) = $1
	$3 = CALL db_find_i64($1, $2, (int_64)-6030912142679474176, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL $47(($4 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [132]) == (int_32)($4 + [16])), [8890])
	*($4 + [12]) = $3
	*($4 + [8]) = ($4 + [16])
	$2 = *($0)
	*($4 + [4]) = ($4 + [8])
	*($4) = ($4 + [60])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9407])
	CALL $67(($4 + [16]), $3, $2, $4)
	$2 = *(*($4 + [12]) + [56])
	$10 = [1]
	$11 = *($7)
	if ( ($11 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	*($4 + [12]) = [0]
	*($4 + [8]) = ($4 + [16])
	$11 = *($7)
	if ( ($11 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$9 }
	
.LOOP $label$10:
	$12 = ($12 + [-24])
	$3 = *($12)
	*($12) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$12
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$10 }
	$3 = *($7)
	goto $label$8 
	
.LABEL $label$9
	$3 = $11
	
.LABEL $label$8
	*($9) = $11
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ($10 == 0) ){ goto $label$3 }
	$3 = *($4 + [60])
	*($4 + [60]) = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[5]) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = *($4 + [88])
	if ( ($11 == 0) ){ goto $label$2 }
	$0 = ($4 + [92])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$15 }
	
.LOOP $label$16:
	$12 = ($12 + [-24])
	$3 = *($12)
	*($12) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$18
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($3)
	
.LABEL $label$17
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$16 }
	$3 = *(($4 + [88]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $11
	
.LABEL $label$14
	*($0) = $11
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$11 = *($4 + [136])
	if ( ($11 == 0) ){ goto $label$1 }
	$0 = ($4 + [140])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$12 = ($12 + [-24])
	$3 = *($12)
	*($12) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$24
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$25
	CALL _ZdlPv($3)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$22 }
	$3 = *(($4 + [136]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $11
	
.LABEL $label$20
	*($0) = $11
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [56]) = $2
	CALL $58($0, $4, $2)
	if ( *($0 + [4]) ){ goto $label$1 }
	$2 = *($1)
	*($5 + [52]) = $3
	*($5 + [48]) = ($5 + [56])
	CALL $89(($5 + [8]), $4, $2, ($5 + [48]))
	*($0) = *($5 + [8])
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($1)
	*($5 + [8]) = $2
	*($5 + [16]) = *($5 + [56])
	*($5 + [52]) = $3
	*($5 + [48]) = ($5 + [56])
	CALL $90($5, ($5 + [8]), $2, ($5 + [48]))
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($5 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_64 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$3 = ($global$0 - [288])
	$global$0 = $3
	$4 = [0]
	$5 = *($0)
	$6 = *($1 + [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $91($2, $6, $5, ($3 + [248]))
	*(($3 + [280])) = [0]
	*($3 + [264]) = (int_64)-1
	*($3 + [272]) = (int_64)0
	$7 = *($0)
	*($3 + [248]) = $7
	$5 = *(*($1 + [4]) + [136])
	*($3 + [256]) = $5
	$6 = [0]
	$8 = CALL db_find_i64($7, $5, (int_64)-6030912142679474176, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $47(($3 + [248]), $8)
	CALL eosio_assert(((int_32)*($6 + [132]) == (int_32)($3 + [248])), [8890])
	
.LABEL $label$1
	*($3 + [244]) = $6
	*($3 + [240]) = ($3 + [248])
	*($3 + [224]) = (int_64)0
	*($3 + [232]) = *((*(($1 + [4])) + [24]))
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)*($3 + [232]) >> (uint_64)(int_64)8)
	
.LOOP $label$4:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8870])
	$4 = ($1 + [4])
	$8 = *($4)
	$5 = *($8 + [16])
	CALL __multi3(($3 + [32]), $5, (int_64)$5 >> (int_64)63), (int_64)50, (int_64)0)
	$10 = *(($8 + [24]))
	$5 = *(($3 + [40]))
	$7 = *($3 + [32])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [9702])
	*($3 + [216]) = $10
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*($3 + [208]) = ((int_64)$7 / (int_64)100)
	$4 = *($4)
	$5 = *($4 + [88])
	*(($3 + [200])) = [0]
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	*($3 + [168]) = *($0)
	*($3 + [176]) = *($4 + [8])
	*($3 + [152]) = (int_64)0
	*($3 + [160]) = *(($4 + [24]))
	CALL eosio_assert([1], [8821])
	$10 = ( (int_64)9 ? ((int_64)$5 + (int_64)-1) : ((uint_64)$5 > (uint_64)(int_64)9) )
	$5 = (uint_64)*($3 + [160]) >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $7
	$9 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $4 ){ goto $label$10 }
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($9, [8870])
	if ( (int_64)($10 == 0) ){ goto $label$11 }
	$6 = *(($1 + [4]))
	$5 = *($6 + [16])
	CALL __multi3(($3 + [16]), $5, (int_64)$5 >> (int_64)63), (int_64)38, (int_64)0)
	$11 = *(($6 + [24]))
	$5 = *((($3 + [16]) + [8]))
	$7 = *($3 + [16])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*((($3 + [152]) + [8])) = $11
	*($3 + [152]) = ((int_64)((int_64)$7 / (int_64)100) / (int_64)$10)
	
.LABEL $label$11
	$5 = *(*(($1 + [4])) + [8])
	$4 = *(($3 + [196]))
	$8 = *(($3 + [192]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$16:
	$6 = ($4 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$5) ){ goto $label$15 }
	$4 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)($3 + [168])), [8890])
	if ( $12 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$6 = CALL db_find_i64(*($3 + [168]), *(($3 + [176])), (int_64)-8524862449301209088, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$12 = CALL $92(($3 + [168]), $6)
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)($3 + [168])), [8890])
	
.LABEL $label$13
	$13 = *(($12 + [12]))
	$8 = *($12 + [8])
	if ( ((int_32)$8 == (int_32)$13) ){ goto $label$17 }
	$14 = ($1 + [4])
	$15 = (($3 + [112]) + [16])
	$16 = ($3 + [144])
	$17 = ($3 + [140])
	
.LOOP $label$18:
	$5 = *($8)
	if ( (int_64)($5 == 0) ){ goto $label$19 }
	if ( ((int_64)*($8 + [8]) == (int_64)*(*($14) + [88])) ){ goto $label$19 }
	if ( ((int_64)$5 != (int_64)*(*($3 + [244]))) ){ goto $label$20 }
	$5 = *($3 + [152])
	$7 = *((($3 + [152]) + [8]))
	$6 = (($3 + [224]) + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)$7), [9598])
	$5 = ((int_64)$5 + (int_64)*($3 + [224]))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9660])
	*($6) = $7
	*($3 + [224]) = $5
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	*((($3 + [112]) + [8])) = $5
	*($15) = (int_64)-1
	*(($18 = (($3 + [112]) + [24]))) = (int_64)0
	*($16) = [0]
	$7 = *($0)
	*($3 + [112]) = $7
	$6 = CALL db_find_i64($7, $5, (int_64)-6030912142679474176, *($8))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$22 }
	$6 = CALL $47(($3 + [112]), $6)
	CALL eosio_assert(((int_32)*($6 + [132]) == (int_32)($3 + [112])), [8890])
	*($3 + [52]) = $6
	*($3 + [48]) = ($3 + [112])
	$5 = *($0)
	*($3 + [108]) = ($3 + [152])
	*($3 + [104]) = ($3 + [48])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $93(($3 + [112]), $6, $5, ($3 + [104]))
	$9 = *($18)
	if ( ($9 == 0) ){ goto $label$19 }
	goto $label$21 
	
.LABEL $label$22
	*($3 + [52]) = [0]
	*($3 + [48]) = ($3 + [112])
	$9 = *($18)
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$21
	$4 = *($17)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$27
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$28
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$25 }
	$6 = *($18)
	goto $label$23 
	
.LABEL $label$24
	$6 = $9
	
.LABEL $label$23
	*($17) = $9
	CALL _ZdlPv($6)
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert([1], [9744])
	CALL eosio_assert([1], [9778])
	$6 = CALL db_next_i64(*($12 + [24]), ($3 + [112]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	CALL $92(($3 + [168]), $6)
	
.LABEL $label$29
	CALL $94(($3 + [168]), $12)
	
.LABEL $label$12
	$6 = *($3 + [244])
	$5 = *($0)
	*($3 + [116]) = ($3 + [208])
	*($3 + [112]) = ($3 + [240])
	*($3 + [120]) = ($3 + [224])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $95(($3 + [248]), $6, $5, ($3 + [112]))
	$6 = *(($1 + [4]))
	$7 = *(($6 + [24]))
	$5 = *($6 + [16])
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [9678])
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*(($3 + [80])) = [0]
	*($3 + [96]) = $7
	*($3 + [88]) = ((int_64)((int_64)$5 << (int_64)1) / (int_64)100)
	*($3 + [72]) = (int_64)0
	$6 = CALL $223([9728])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$33 }
	*($3 + [72]) = ($6 << [1])
	$4 = (($3 + [72]) | [1])
	if ( $6 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$8 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($3 + [72]) = ($8 | [1])
	*($3 + [80]) = $4
	*($3 + [76]) = $6
	
.LABEL $label$32
	CALL memcpy($4, [9728], $6)
	
.LABEL $label$31
	*(($4 + $6)) = [0]
	*(($3 + [8])) = *((($3 + [88]) + [8]))
	*($3) = *($3 + [88])
	CALL $79($0, (int_64)-1190221485383887568, $3, ($3 + [72]))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($3 + [80]))
	
.LABEL $label$34
	*(($3 + [144])) = [0]
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$7 = *($0)
	*($3 + [112]) = $7
	$5 = *(*(($1 + [4])) + [8])
	*($3 + [120]) = $5
	$6 = CALL db_find_i64($7, $5, (int_64)7760153368969871360, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$36 }
	CALL eosio_assert(((int_32)*(CALL $32(($3 + [112]), $6) + [80]) == (int_32)($3 + [112])), [8890])
	goto $label$35 
	
.LABEL $label$36
	$5 = *($0)
	*($3 + [48]) = $1
	*($3 + [52]) = ($3 + [208])
	CALL $96(($3 + [104]), ($3 + [112]), $5, ($3 + [48]))
	
.LABEL $label$35
	$6 = ($1 + [4])
	$4 = *($6)
	*($3 + [104]) = ((int_64)*($4 + [8]) + (int_64)1)
	*($3 + [64]) = *(($4 + [24]))
	$6 = *($6)
	$5 = *($0)
	*($3 + [52]) = $1
	*($3 + [48]) = ($3 + [104])
	*($3 + [56]) = ($3 + [64])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $97($2, $6, $5, ($3 + [48]))
	$5 = *($3 + [104])
	$8 = *($3 + [136])
	if ( ($8 == 0) ){ goto $label$37 }
	$9 = ($3 + [140])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$41 }
	if ( ((*($4 + [68]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($4 + [76])))
	
.LABEL $label$42
	CALL _ZdlPv($4)
	
.LABEL $label$41
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($3 + [136]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $8
	
.LABEL $label$38
	*($9) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$37
	$9 = *($3 + [192])
	if ( ($9 == 0) ){ goto $label$43 }
	$12 = ($3 + [196])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$45 }
	
.LOOP $label$46:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$47 }
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$48 }
	*(($4 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$48
	CALL _ZdlPv($4)
	
.LABEL $label$47
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$46 }
	$6 = *(($3 + [192]))
	goto $label$44 
	
.LABEL $label$45
	$6 = $9
	
.LABEL $label$44
	*($12) = $9
	CALL _ZdlPv($6)
	
.LABEL $label$43
	$8 = *($3 + [272])
	if ( ($8 == 0) ){ goto $label$49 }
	$9 = ($3 + [276])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$51 }
	
.LOOP $label$52:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$53 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$54
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$55
	CALL _ZdlPv($6)
	
.LABEL $label$53
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$52 }
	$6 = *(($3 + [272]))
	goto $label$50 
	
.LABEL $label$51
	$6 = $8
	
.LABEL $label$50
	*($9) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$49
	$global$0 = ($3 + [288])
	return $5
	
.LABEL $label$30
	CALL $209(($3 + [72]))
	return (unreachable)
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	$4 = ($global$0 - [1760])
	$global$0 = $4
	*(($5 = $4) + [1752]) = $1
	$6 = [0]
	*(($5 + [1744])) = [0]
	*($5 + [1728]) = (int_64)-1
	*($5 + [1748]) = [0]
	$7 = *($0)
	*($5 + [1712]) = $7
	*($5 + [1720]) = $7
	*($5 + [1736]) = (int_64)0
	$8 = CALL db_find_i64($7, $7, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $46(($5 + [1712]), $8)
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)($5 + [1712])), [8890])
	*($5 + [1704]) = ($5 + [1712])
	$1 = *($5 + [1752])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [1704]) = ($5 + [1712])
	
.LABEL $label$1
	*($5 + [1708]) = $6
	*((($5 + [1664]) + [32])) = [0]
	*($5 + [1672]) = $1
	*($5 + [1680]) = (int_64)-1
	*($5 + [1688]) = (int_64)0
	$7 = *($0)
	*($5 + [1664]) = $7
	*((($5 + [1624]) + [32])) = [0]
	*($5 + [1632]) = $1
	*($5 + [1624]) = $7
	*($5 + [1640]) = (int_64)-1
	*($5 + [1648]) = (int_64)0
	*((($5 + [1584]) + [32])) = [0]
	*($5 + [1592]) = $1
	*($5 + [1584]) = $7
	*($5 + [1600]) = (int_64)-1
	*($5 + [1608]) = (int_64)0
	*((($5 + [1544]) + [32])) = [0]
	*($5 + [1544]) = $7
	*($5 + [1560]) = (int_64)-1
	*($5 + [1568]) = (int_64)0
	$1 = *($6 + [8])
	*($5 + [1552]) = $1
	*($5 + [1248]) = $1
	$9 = ($2 + [8])
	$6 = CALL db_find_i64($7, $1, (int_64)-7948565157351784448, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $61(($5 + [1544]), $6)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)($5 + [1544])), [8890])
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0)
	*($5 + [564]) = $9
	*($5 + [560]) = ($5 + [1248])
	CALL $62(($5 + [1184]), ($5 + [1544]), $1, ($5 + [560]))
	$10 = *($5 + [1188])
	
.LABEL $label$3
	$1 = *(*($5 + [1708]) + [8])
	*($5 + [1248]) = $1
	$8 = *(($5 + [1612]))
	$11 = *(($5 + [1608]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($8 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$7 }
	$8 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)($5 + [1584])), [8890])
	*($5 + [1540]) = $12
	*($5 + [1536]) = ($5 + [1584])
	$13 = (($5 + [1536]) | [4])
	goto $label$5 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*($5 + [1584]), *(($5 + [1592])), (int_64)-7948560026672185344, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $59(($5 + [1584]), $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($5 + [1584])), [8890])
	*($5 + [1540]) = $6
	*($5 + [1536]) = ($5 + [1584])
	$13 = (($5 + [1536]) | [4])
	goto $label$5 
	
.LABEL $label$9
	*($5 + [1540]) = [0]
	*($5 + [1536]) = ($5 + [1584])
	$1 = *($0)
	*($5 + [564]) = $9
	*($5 + [560]) = ($5 + [1248])
	CALL $60(($5 + [1184]), ($5 + [1584]), $1, ($5 + [560]))
	*($5 + [1536]) = *($5 + [1184])
	$13 = (($5 + [1536]) | [4])
	
.LABEL $label$5
	$1 = *($5 + [1752])
	*($5 + [1248]) = $1
	$8 = *(($5 + [1652]))
	$11 = *(($5 + [1648]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$13:
	$6 = ($8 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$12 }
	$8 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($12 + [168]) == (int_32)($5 + [1624])), [8890])
	*($5 + [1532]) = $12
	*($5 + [1528]) = ($5 + [1624])
	$6 = (($5 + [1528]) | [4])
	goto $label$10 
	
.LABEL $label$11
	$6 = CALL db_find_i64(*($5 + [1624]), *(($5 + [1632])), (int_64)7035936280380030976, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $48(($5 + [1624]), $6)
	CALL eosio_assert(((int_32)*($6 + [168]) == (int_32)($5 + [1624])), [8890])
	*($5 + [1532]) = $6
	*($5 + [1528]) = ($5 + [1624])
	$6 = (($5 + [1528]) | [4])
	goto $label$10 
	
.LABEL $label$14
	*($5 + [1532]) = [0]
	*($5 + [1528]) = ($5 + [1624])
	$1 = *($0)
	*($5 + [564]) = $9
	*($5 + [560]) = ($5 + [1248])
	CALL $49(($5 + [1184]), ($5 + [1624]), $1, ($5 + [560]))
	*($5 + [1528]) = *($5 + [1184])
	$6 = (($5 + [1528]) | [4])
	
.LABEL $label$10
	CALL $53(($5 + [1520]), $0, *($5 + [1752]), $9, ($5 + [1664]))
	$1 = *(*($5 + [1708]) + [8])
	if ( ((int_64)*(*($6) + [8]) == (int_64)$1) ){ goto $label$15 }
	CALL $68($0, $1, *($5 + [1752]), $9, ($5 + [1528]), ($5 + [1520]), ($5 + [1624]), ($5 + [1664]))
	
.LABEL $label$15
	$1 = *($9)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$18 }
	$7 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$17 }
	$1 = (int_64)1
	goto $label$16 
	
.LABEL $label$18
	CALL eosio_assert([0], [9019])
	$7 = (int_64)-1
	
.LABEL $label$17
	$1 = (int_64)1
	
.LOOP $label$19:
	$1 = ((int_64)$1 * (int_64)10)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$19 }
	
.LABEL $label$16
	$14 = *($2 + [8])
	$15 = ((int_64)$1 * (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8821])
	$12 = ($2 + [8])
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$1 = $7
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$24 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$8 = [0]
	
.LABEL $label$20
	CALL eosio_assert($8, [8870])
	CALL eosio_assert(((int_64)$15 != (int_64)0), [9367])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$14), [9050])
	$1 = ((int_64)*($2) / (int_64)$15)
	$1 = ( $3 ? $1 : (uint_64)(((int_64)$3 + (int_64)-1) <= $1) )
	*($5 + [1512]) = $1
	if ( (int_64)($1 == 0) ){ goto $label$25 }
	*((($5 + [1496]) + [8])) = [0]
	*($5 + [1496]) = (int_64)0
	$6 = CALL $223([9727])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$31 }
	*($5 + [1496]) = ($6 << [1])
	$8 = (($5 + [1496]) | [1])
	if ( $6 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [1496]) = ($11 | [1])
	*($5 + [1504]) = $8
	*($5 + [1500]) = $6
	
.LABEL $label$30
	CALL memcpy($8, [9727], $6)
	
.LABEL $label$29
	*(($8 + $6)) = [0]
	*($5 + [1480]) = (int_64)0
	*($5 + [1488]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [1488]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$1 = $7
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$36 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$8 = [0]
	
.LABEL $label$32
	CALL eosio_assert($8, [8870])
	*(($5 + [1472])) = [0]
	*($5 + [1464]) = (int_64)0
	$6 = CALL $223([9727])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$40 }
	*($5 + [1464]) = ($6 << [1])
	$8 = (($5 + [1464]) | [1])
	if ( $6 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [1464]) = ($11 | [1])
	*($5 + [1472]) = $8
	*($5 + [1468]) = $6
	
.LABEL $label$39
	CALL memcpy($8, [9727], $6)
	
.LABEL $label$38
	*(($8 + $6)) = [0]
	*($5 + [1448]) = (int_64)0
	*($5 + [1456]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [1456]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$1 = $7
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$45 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$8 = [0]
	
.LABEL $label$41
	CALL eosio_assert($8, [8870])
	*($5 + [1440]) = (int_64)0
	*($5 + [1424]) = (int_64)0
	*($5 + [1432]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [1432]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$1 = $7
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$50 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$8 = [0]
	
.LABEL $label$46
	CALL eosio_assert($8, [8870])
	*($5 + [1408]) = (int_64)0
	*($5 + [1416]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [1416]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$1 = $7
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$55 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$8 = [0]
	
.LABEL $label$51
	CALL eosio_assert($8, [8870])
	*($5 + [1392]) = (int_64)0
	*($5 + [1400]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [1400]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$59 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$59
	$1 = $7
	
.LOOP $label$60:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$57 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$60 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$8 = [0]
	
.LABEL $label$56
	CALL eosio_assert($8, [8870])
	*($5 + [1384]) = *($12)
	$1 = ((int_64)*($5 + [1512]) * (int_64)$15)
	*($5 + [1376]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8821])
	$1 = (uint_64)*($5 + [1384]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$64 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$64
	$1 = $7
	
.LOOP $label$65:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$62 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$65 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$8 = [0]
	
.LABEL $label$61
	CALL eosio_assert($8, [8870])
	$1 = *($2)
	$7 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*((($5 + [1376]) + [8])) == (int_64)$7), [9276])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *($5 + [1376]))) > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9346])
	*((($5 + [1424]) + [8])) = $7
	*($5 + [1424]) = $1
	*(($5 + [1368])) = [0]
	*($5 + [1352]) = (int_64)-1
	*($5 + [1360]) = (int_64)0
	$7 = *($0)
	*($5 + [1336]) = $7
	$1 = *(*($5 + [1708]) + [8])
	*($5 + [1344]) = $1
	*($5 + [1248]) = $1
	$6 = CALL db_find_i64($7, $1, (int_64)-8524864824747229184, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$67 }
	$16 = CALL $69(($5 + [1336]), $6)
	CALL eosio_assert(((int_32)*($16 + [28]) == (int_32)($5 + [1336])), [8890])
	goto $label$66 
	
.LABEL $label$67
	$1 = *($0)
	*($5 + [560]) = ($5 + [1248])
	CALL $70(($5 + [1184]), ($5 + [1336]), $1, ($5 + [560]))
	$16 = *($5 + [1188])
	
.LABEL $label$66
	$17 = $4
	$8 = CALL transaction_size()
	$6 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $6
	CALL read_transaction($6, $8)
	$8 = CALL tapos_block_prefix()
	$11 = CALL tapos_block_num()
	$4 = CALL transaction_size()
	$8 = *($5 + [1708])
	*($5 + [1328]) = ((int_64)((int_64)((int_64)((int_64)((int_64)*($5 + [1752]) + (int_64)$3) + (int_64)(CASTING uint_64)(uint_32 ((int_32)$4 * (int_32)((int_32)$11 * (int_32)$8)))) + (int_64)*($8 + [8])) + (int_64)*($8 + [88])) + (int_64)CALL current_time())
	*($5 + [1320]) = [0]
	$18 = (int_64)0
	*($5 + [1312]) = (int_64)0
	CALL $216(($5 + [1312]), $6)
	CALL $216(($5 + [1312]), ($5 + [1328]))
	CALL $230(($5 + [1248]), ( *($5 + [1320]) ? (($5 + [1312]) | [1]) : (*($5 + [1312]) & [1]) ), [4])
	CALL $71(($5 + [1184]), ($5 + [1248]))
	*($5 + [1176]) = *($10 + [40])
	*($5 + [1168]) = *($16 + [8])
	$19 = CALL $210(($5 + [1152]), ($16 + [16]))
	$6 = *($5 + [1708])
	*($5 + [1144]) = *($6 + [128])
	*($5 + [1136]) = *($6 + [120])
	*($5 + [1128]) = *($6 + [112])
	$3 = *($5 + [1512])
	if ( (int_64)($3 == 0) ){ goto $label$27 }
	$4 = ($19 + [1])
	$14 = (int_64)-1
	$6 = [64]
	$20 = ($19 + [8])
	$1 = (int_64)0
	$15 = (int_64)0
	$18 = (int_64)0
	
.LOOP $label$69:
	$8 = (int_64)(((int_64)$1 & (int_64)1) == 0)
	$6 = ($6 - $8)
	$11 = *((($5 + [1184]) + $6))
	$8 = (( $11 ? uint_32($11 >> [4]) : $8 ) & [3])
	$7 = (CASTING uint_64)(uint_32 $8)
	if ( ((int_64)*($5 + [1176]) != (int_64)$7) ){ goto $label$76 }
	if ( ((int_64)*(*($5 + [1708]) + [88]) != (int_64))((int_64)0 - $1)) ){ goto $label$75 }
	
.LABEL $label$76
	$18 = ((int_64)$15 + (int_64)$18)
	$15 = *($5 + [1128])
	if ( ((uint_64)*($5 + [1136]) >= (uint_64)$15) ){ goto $label$77 }
	*($5 + [1136]) = $15
	
.LABEL $label$77
	$15 = (int_64)0
	*($5 + [1128]) = (int_64)0
	*($5 + [1176]) = $7
	if ( (uint_64)($3 <= (int_64)21) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$15 = ((int_64)$15 + (int_64)1)
	*($5 + [1128]) = ((int_64)*($5 + [1128]) + (int_64)1)
	*($5 + [1176]) = $7
	if ( ((uint_64)$3 >= (uint_64)(int_64)21) ){ goto $label$73 }
	
.LABEL $label$74
	*((( *($20) ? $4 : (*($5 + [1152]) & [1]) ) + *($5 + [1168]))) = ($8 | [48])
	*($5 + [1168]) = ((uint_64)((int_64)*($5 + [1168]) + (int_64)1) % (uint_64)(int_64)20)
	$8 = (int_64)($1 == 0)
	$3 = *($5 + [1512])
	if ( ((uint_64)$3 >= (uint_64)(int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	if ( ((uint_64)((int_64)$3 + (int_64)-20) > (uint_64)$1) ){ goto $label$78 }
	*((( *($20) ? $4 : (*($5 + [1152]) & [1]) ) + *($5 + [1168]))) = ($8 | [48])
	*($5 + [1168]) = ((uint_64)((int_64)*($5 + [1168]) + (int_64)1) % (uint_64)(int_64)20)
	
.LABEL $label$78
	$8 = (int_64)($1 == 0)
	$3 = *($5 + [1512])
	if ( (uint_64)($3 <= (int_64)11) ){ goto $label$71 }
	
.LABEL $label$72
	if ( ((uint_64)((int_64)$3 + (int_64)-10) <= (uint_64)$1) ){ goto $label$70 }
	$14 = ( $7 ? $14 : $8 )
	$1 = ((int_64)$1 + (int_64)1)
	$3 = *($5 + [1512])
	if ( ((uint_64)$3 > (uint_64)$1) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	$1 = ((int_64)$1 + (int_64)1)
	$11 = *($5 + [1708])
	CALL $72($0, *($11 + [8]), *($5 + [1144]), *($5 + [1752]), *($5 + [1176]), ((int_64)$1 + (int_64)*($11 + [88])))
	*($5 + [1144]) = ((uint_64)((int_64)*($5 + [1144]) + (int_64)1) % (uint_64)(int_64)10)
	$14 = ( $7 ? $14 : $8 )
	$3 = *($5 + [1512])
	if ( ((uint_64)$3 > (uint_64)$1) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$1 = ((int_64)$1 + (int_64)1)
	$11 = *($5 + [1708])
	CALL $72($0, *($11 + [8]), *($5 + [1144]), *($5 + [1752]), *($5 + [1176]), ((int_64)$1 + (int_64)*($11 + [88])))
	*($5 + [1144]) = ((uint_64)((int_64)*($5 + [1144]) + (int_64)1) % (uint_64)(int_64)10)
	$14 = ( $7 ? $14 : $8 )
	$3 = *($5 + [1512])
	if ( ((uint_64)$3 > (uint_64)$1) ){ goto $label$69 }
	
.LABEL $label$68
	$6 = *($5 + [1708])
	goto $label$26 
	
.LABEL $label$37
	CALL $209(($5 + [1464]))
	
.LABEL $label$28
	CALL $209(($5 + [1496]))
	
.LABEL $label$27
	$14 = (int_64)-1
	$15 = (int_64)0
	
.LABEL $label$26
	*($5 + [1120]) = *($6 + [104])
	*($5 + [1112]) = *($6 + [80])
	$1 = CALL current_time()
	$6 = *($5 + [1708])
	$7 = *($6 + [104])
	if ( ((uint_64)$7 >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$81 }
	if ( ((int_64)*($6 + [88]) == (int_64)0) ){ goto $label$80 }
	
.LABEL $label$81
	$1 = ((int_64)((int_64)*($5 + [1512]) * (int_64)30) + (int_64)$7)
	goto $label$79 
	
.LABEL $label$80
	$1 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)64800)
	
.LABEL $label$79
	*($5 + [1120]) = $1
	if ( ((uint_64)$1 <= (uint_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)64800)) ){ goto $label$82 }
	*($5 + [1120]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)64800)
	
.LABEL $label$82
	*($5 + [1112]) = ((int_64)((int_64)*($5 + [1512]) * (int_64)30) + (int_64)*($5 + [1112]))
	*(($6 = (($5 + [1096]) + [8]))) = *(($10 + [16]))
	*($5 + [1096]) = *($10 + [8])
	$1 = *($5 + [1376])
	CALL __multi3(($5 + [536]), $1, (int_64)$1 >> (int_64)63), (int_64)30, (int_64)0)
	$11 = *($13)
	*(($8 = (($5 + [1080]) + [8]))) = *(($11 + [16]))
	*($5 + [1080]) = *($11 + [8])
	$11 = (($5 + [1376]) + [8])
	$1 = *($11)
	$7 = *((($5 + [536]) + [8]))
	$3 = *($5 + [536])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	$7 = ((int_64)*($5 + [1512]) + (int_64)*(*($5 + [1708]) + [88]))
	CALL eosio_assert(((int_64)$7 != (int_64)0), [9367])
	CALL eosio_assert([1], [9382])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [9598])
	$7 = ((int_64)*($5 + [1096]) + (int_64)((int_64)((int_64)$3 / (int_64)100) / (int_64)$7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	$3 = *($5 + [1512])
	CALL __multi3(($5 + [520]), $3, (int_64)$3 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	*($6) = $1
	*($5 + [1096]) = $7
	$7 = *((($5 + [520]) + [8]))
	$3 = *($5 + [520])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	$7 = *($5 + [1376])
	CALL __multi3(($5 + [504]), $7, (int_64)$7 >> (int_64)63), (int_64)30, (int_64)0)
	$21 = *($11)
	$7 = *((($5 + [504]) + [8]))
	$22 = *($5 + [504])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	$7 = ((int_64)*($5 + [1512]) + (int_64)*(*($5 + [1708]) + [88]))
	CALL eosio_assert(((int_64)$7 != (int_64)0), [9367])
	CALL eosio_assert([1], [9382])
	$7 = ((int_64)((int_64)$22 / (int_64)100) / (int_64)$7)
	$23 = *($5 + [1512])
	CALL __multi3(($5 + [488]), $23, (int_64)$23 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$7 = *((($5 + [488]) + [8]))
	$22 = *($5 + [488])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert(((int_64)$21 == (int_64)$1), [9276])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($3 - $22)) > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9346])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [9598])
	$7 = ((int_64)*($5 + [1080]) + (int_64)$7)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*($8) = $1
	*($5 + [1080]) = $7
	$6 = *($5 + [1708])
	*((($5 + [1064]) + [8])) = *(($6 + [56]))
	*($5 + [1064]) = *($6 + [48])
	$22 = (int_64)0
	if ( ((int_64)$14 == (int_64)*(($10 + [40]))) ){ goto $label$87 }
	$3 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$89 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$91 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$91
	$1 = $7
	
.LOOP $label$92:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$89 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$92 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	$8 = [0]
	
.LABEL $label$88
	CALL eosio_assert($8, [8870])
	CALL eosio_assert(((int_64)*($5 + [1072]) == (int_64)$3), [9050])
	if ( ((int_64)*($5 + [1064]) < (int_64)1) ){ goto $label$93 }
	$1 = *(*($5 + [1708]) + [136])
	if ( ((int_64)$1 != (int_64)*($5 + [1752])) ){ goto $label$86 }
	$6 = *($5 + [1524])
	$1 = *($0)
	*($5 + [564]) = ($5 + [1064])
	*($5 + [560]) = ($5 + [1520])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $73(($5 + [1664]), $6, $1, ($5 + [560]))
	$6 = *($5 + [1532])
	$1 = *($0)
	*($5 + [564]) = ($5 + [1064])
	*($5 + [560]) = ($5 + [1528])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $74(($5 + [1624]), $6, $1, ($5 + [560]))
	$22 = *(*($5 + [1708]) + [136])
	CALL $212(($5 + [1496]), (*($5 + [1524]) + [116]))
	*((($5 + [1480]) + [8])) = *((($5 + [1064]) + [8]))
	*($5 + [1480]) = *($5 + [1064])
	goto $label$85 
	
.LABEL $label$93
	$22 = (int_64)0
	
.LABEL $label$87
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	*(($5 + [592])) = [0]
	*($5 + [576]) = (int_64)-1
	*($5 + [584]) = (int_64)0
	$7 = *($0)
	*($5 + [560]) = $7
	*($5 + [568]) = $1
	$6 = CALL db_find_i64($7, $1, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$95 }
	$6 = CALL $47(($5 + [560]), $6)
	CALL eosio_assert(((int_32)*($6 + [132]) == (int_32)($5 + [560])), [8890])
	*($5 + [868]) = $6
	*($5 + [864]) = ($5 + [560])
	$1 = *($0)
	*($5 + [1028]) = ($5 + [1064])
	*($5 + [1024]) = ($5 + [864])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $75(($5 + [560]), $6, $1, ($5 + [1024]))
	$8 = (($5 + [864]) | [4])
	goto $label$94 
	
.LABEL $label$95
	*($5 + [868]) = [0]
	*($5 + [864]) = ($5 + [560])
	$8 = (($5 + [864]) | [4])
	
.LABEL $label$94
	*(($5 + [1056])) = [0]
	*($5 + [1040]) = (int_64)-1
	*($5 + [1048]) = (int_64)0
	$7 = *($0)
	*($5 + [1024]) = $7
	$1 = *(*($5 + [1708]) + [136])
	*($5 + [1032]) = $1
	$6 = CALL db_find_i64($7, $1, (int_64)7035936280380030976, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$97 }
	$6 = CALL $48(($5 + [1024]), $6)
	CALL eosio_assert(((int_32)*($6 + [168]) == (int_32)($5 + [1024])), [8890])
	*($5 + [1020]) = $6
	*($5 + [1016]) = ($5 + [1024])
	$1 = *($0)
	*($5 + [1012]) = ($5 + [1064])
	*($5 + [1008]) = ($5 + [1016])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $76(($5 + [1024]), $6, $1, ($5 + [1008]))
	goto $label$96 
	
.LABEL $label$97
	*($5 + [1020]) = [0]
	*($5 + [1016]) = ($5 + [1024])
	
.LABEL $label$96
	$22 = *(*($5 + [1708]) + [136])
	CALL $212(($5 + [1496]), (*($8) + [116]))
	*((($5 + [1480]) + [8])) = *((($5 + [1064]) + [8]))
	*($5 + [1480]) = *($5 + [1064])
	$11 = *($5 + [1048])
	if ( ($11 == 0) ){ goto $label$98 }
	$4 = ($5 + [1052])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$100 }
	
.LOOP $label$101:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$102 }
	CALL _ZdlPv($8)
	
.LABEL $label$102
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$101 }
	$6 = *(($5 + [1048]))
	goto $label$99 
	
.LABEL $label$100
	$6 = $11
	
.LABEL $label$99
	*($4) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$98
	$11 = *($5 + [584])
	if ( ($11 == 0) ){ goto $label$85 }
	$4 = ($5 + [588])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$104 }
	
.LOOP $label$105:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$106 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$107 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$107
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$108
	CALL _ZdlPv($6)
	
.LABEL $label$106
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$105 }
	$6 = *(($5 + [584]))
	goto $label$103 
	
.LABEL $label$104
	$6 = $11
	
.LABEL $label$103
	*($4) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$85
	$6 = *($5 + [1708])
	$3 = *($6 + [8])
	*((($5 + [992]) + [8])) = *((($5 + [1064]) + [8]))
	*($5 + [992]) = *($5 + [1064])
	*($5 + [976]) = (int_64)0
	*($5 + [984]) = *($12)
	$14 = *($6 + [136])
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [984]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$111:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$110 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$112 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$112
	$1 = $7
	
.LOOP $label$113:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$110 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$113 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$110
	$8 = [0]
	
.LABEL $label$109
	CALL eosio_assert($8, [8870])
	*($5 + [960]) = (int_64)0
	*($5 + [968]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [968]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$116:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$115 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$117 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$116 }
	goto $label$114 
	
.LABEL $label$117
	$1 = $7
	
.LOOP $label$118:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$115 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$118 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$116 }
	goto $label$114 
	
.LABEL $label$115
	$8 = [0]
	
.LABEL $label$114
	CALL eosio_assert($8, [8870])
	*((($5 + [472]) + [8])) = *((($5 + [992]) + [8]))
	*((($5 + [456]) + [8])) = *((($5 + [976]) + [8]))
	*((($5 + [440]) + [8])) = *((($5 + [960]) + [8]))
	*($5 + [472]) = *($5 + [992])
	*($5 + [456]) = *($5 + [976])
	*($5 + [440]) = *($5 + [960])
	CALL $57($0, $14, $3, ($5 + [472]), ($5 + [456]), (int_64)0, ($5 + [440]), (int_64)0, $9)
	$3 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$121:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$120 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$122 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$122
	$1 = $7
	
.LOOP $label$123:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$120 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$123 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$120
	$8 = [0]
	
.LABEL $label$119
	CALL eosio_assert($8, [8870])
	*(($5 + [1072])) = $3
	*($5 + [1064]) = (int_64)0
	if ( ((int_64)$18 == (int_64)0) ){ goto $label$83 }
	
.LABEL $label$84
	$7 = (int_64)$1 >> (int_64)63
	$1 = *($5 + [1376])
	CALL __multi3(($5 + [424]), $1, $7), (int_64)0, (int_64)20)
	CALL __multi3(($5 + [392]), $1, $7, (int_64)20, (int_64)0)
	$1 = *((($5 + [424]) + [8]))
	CALL __multi3(($5 + [408]), $1, (int_64)$1 >> (int_64)63), $18, (int_64)$18 >> (int_64)63))
	$1 = *((($5 + [1376]) + [8]))
	$7 = *((($5 + [392]) + [8]))
	$3 = *($5 + [392])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	$7 = *((($5 + [408]) + [8]))
	$3 = *($5 + [408])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	$7 = *($5 + [1512])
	CALL eosio_assert(((int_64)$7 != (int_64)0), [9367])
	CALL eosio_assert([1], [9382])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5 + [1072])), [9598])
	$7 = ((int_64)*($5 + [1064]) + (int_64)((int_64)((int_64)$3 / (int_64)100) / (int_64)$7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*((($5 + [1392]) + [8])) = $1
	*($5 + [1392]) = $7
	$6 = (($5 + [1424]) + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [9598])
	$7 = ((int_64)*($5 + [1424]) + (int_64)$7)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*($6) = $1
	*($5 + [1424]) = $7
	$3 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$126:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$125 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$127 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$126 }
	goto $label$124 
	
.LABEL $label$127
	$1 = $7
	
.LOOP $label$128:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$125 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$128 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$126 }
	goto $label$124 
	
.LABEL $label$125
	$8 = [0]
	
.LABEL $label$124
	CALL eosio_assert($8, [8870])
	*(($5 + [1072])) = $3
	*($5 + [1064]) = (int_64)0
	$3 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$131:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$130 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$132 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$131 }
	goto $label$129 
	
.LABEL $label$132
	$1 = $7
	
.LOOP $label$133:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$130 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$133 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$131 }
	goto $label$129 
	
.LABEL $label$130
	$8 = [0]
	
.LABEL $label$129
	CALL eosio_assert($8, [8870])
	$4 = (($5 + [1480]) + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)$3), [9050])
	if ( (int_64)(*($5 + [1480]) == 0) ){ goto $label$134 }
	$3 = *(*($5 + [1708]) + [8])
	$20 = CALL $210(($5 + [944]), ($5 + [1496]))
	*((($5 + [912]) + [8])) = [0]
	*((($5 + [928]) + [8])) = *($4)
	*($5 + [912]) = (int_64)0
	*($5 + [928]) = *($5 + [1480])
	$6 = CALL $223([9727])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$138 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$141 }
	*($5 + [912]) = ($6 << [1])
	$8 = (($5 + [912]) | [1])
	if ( $6 ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$141
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [912]) = ($11 | [1])
	*($5 + [920]) = $8
	*($5 + [916]) = $6
	
.LABEL $label$140
	CALL memcpy($8, [9727], $6)
	
.LABEL $label$139
	*(($8 + $6)) = [0]
	*($5 + [896]) = (int_64)0
	*($5 + [904]) = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [904]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$144:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$143 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$145 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$144 }
	goto $label$142 
	
.LABEL $label$145
	$1 = $7
	
.LOOP $label$146:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$143 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$146 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$144 }
	goto $label$142 
	
.LABEL $label$143
	$8 = [0]
	
.LABEL $label$142
	CALL eosio_assert($8, [8870])
	*(($5 + [888])) = [0]
	*($5 + [880]) = (int_64)0
	$6 = CALL $223([9727])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$137 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$149 }
	*($5 + [880]) = ($6 << [1])
	$8 = (($5 + [880]) | [1])
	if ( $6 ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$149
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [880]) = ($11 | [1])
	*($5 + [888]) = $8
	*($5 + [884]) = $6
	
.LABEL $label$148
	CALL memcpy($8, [9727], $6)
	
.LABEL $label$147
	*(($8 + $6)) = [0]
	*((($5 + [376]) + [8])) = *((($5 + [928]) + [8]))
	*((($5 + [360]) + [8])) = *((($5 + [896]) + [8]))
	*($5 + [376]) = *($5 + [928])
	*($5 + [360]) = *($5 + [896])
	CALL $77($0, $3, $22, $20, ($5 + [376]), (int_64)0, ($5 + [912]), ($5 + [360]), (int_64)0, (int_64)0, ($5 + [880]), (int_64)0)
	if ( (*($5 + [880]) & [1]) ){ goto $label$151 }
	if ( (*($5 + [912]) & [1]) ){ goto $label$150 }
	goto $label$136 
	
.LABEL $label$151
	CALL _ZdlPv(*($5 + [888]))
	if ( ((*($5 + [912]) & [1]) == 0) ){ goto $label$136 }
	
.LABEL $label$150
	CALL _ZdlPv(*($5 + [920]))
	if ( (*($20) & [1]) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$138
	CALL $209(($5 + [912]))
	
.LABEL $label$137
	CALL $209(($5 + [880]))
	
.LABEL $label$136
	if ( ((*($20) & [1]) == 0) ){ goto $label$134 }
	
.LABEL $label$135
	CALL _ZdlPv(*($20 + [8]))
	
.LABEL $label$134
	$22 = *($5 + [1752])
	CALL $212(($5 + [1496]), (*($5 + [1524]) + [116]))
	*($4) = *((($5 + [1392]) + [8]))
	*($5 + [1480]) = *($5 + [1392])
	
.LABEL $label$83
	$21 = (int_64)0
	$7 = (int_64)$1 >> (int_64)63
	$1 = *($5 + [1376])
	CALL __multi3(($5 + [344]), $1, $7), (int_64)0, (int_64)20)
	CALL __multi3(($5 + [312]), $1, $7, (int_64)20, (int_64)0)
	$1 = *((($5 + [344]) + [8]))
	CALL __multi3(($5 + [328]), $1, (int_64)$1 >> (int_64)63), $15, (int_64)$15 >> (int_64)63))
	$8 = (($5 + [1376]) + [8])
	$7 = *($8)
	$1 = *((($5 + [312]) + [8]))
	$3 = *($5 + [312])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9702])
	$1 = *((($5 + [328]) + [8]))
	$3 = *($5 + [328])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	$1 = *($5 + [1512])
	CALL eosio_assert(((int_64)$1 != (int_64)0), [9367])
	CALL eosio_assert([1], [9382])
	$6 = (($5 + [1064]) + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)*($6)), [9598])
	$1 = ((int_64)*($5 + [1064]) + (int_64)((int_64)((int_64)$3 / (int_64)100) / (int_64)$1))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9660])
	*($6) = $7
	*($5 + [1064]) = $1
	$1 = *($5 + [1376])
	CALL __multi3(($5 + [296]), $1, (int_64)$1 >> (int_64)63), (int_64)5, (int_64)0)
	$6 = *($5 + [1708])
	*((($5 + [1024]) + [8])) = *(($6 + [40]))
	*($5 + [1024]) = *($6 + [32])
	$1 = *($8)
	$7 = *($6 + [88])
	$23 = *($5 + [1512])
	$3 = *((($5 + [296]) + [8]))
	$14 = *($5 + [296])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [9702])
	$3 = ( (int_64)1000 ? (int_64)10000 : (uint_64)(((int_64)$7 + (int_64)-1) <= (int_64)10000) )
	if ( ((int_64)((uint_64)((int_64)$23 + (int_64)$7) / (uint_64)$3) != (int_64)((uint_64)$7 / (uint_64)$3)) ){ goto $label$153 }
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	CALL eosio_assert(((int_64)*($5 + [1032]) == (int_64)$1), [9598])
	$7 = ((int_64)*($5 + [1024]) + (int_64)((int_64)$14 / (int_64)100))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*($5 + [1032]) = $1
	*($5 + [1024]) = $7
	$6 = *($5 + [1708])
	goto $label$152 
	
.LABEL $label$153
	$7 = *($5 + [1512])
	$7 = ((uint_64)(int_64))($7 - ((uint_64)((int_64)$7 + (int_64)*(*($5 + [1708]) + [88])) % (uint_64)$3)) / (uint_64)$7
	CALL __multi3(($5 + [280]), $7), (int_64)$7 >> (int_64)63), $14, (int_64)$14 >> (int_64)63))
	$7 = *((($5 + [280]) + [8]))
	$14 = *($5 + [280])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	CALL eosio_assert(((int_64)*($5 + [1032]) == (int_64)$1), [9598])
	$7 = ((int_64)*($5 + [1024]) + (int_64)((int_64)$14 / (int_64)100))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($6 = (($5 + [1408]) + [8]))) = $1
	*($5 + [1408]) = $7
	$11 = (($5 + [1424]) + [8])
	CALL eosio_assert(((int_64)*($11) == (int_64)$1), [9598])
	$7 = ((int_64)*($5 + [1424]) + (int_64)$7)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	$21 = (int_64)$14 >> (int_64)63
	$14 = *($5 + [1376])
	CALL __multi3(($5 + [264]), $14, $21), (int_64)5, (int_64)0)
	CALL __multi3(($5 + [248]), $14, $21, (int_64)0, (int_64)5)
	*($11) = $1
	*($5 + [1424]) = $7
	$14 = *($8)
	$1 = *((($5 + [264]) + [8]))
	$7 = *($5 + [264])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9702])
	$1 = *($5 + [1512])
	$1 = *((($5 + [248]) + [8]))
	CALL __multi3(($5 + [232]), $1, (int_64)$1 >> (int_64)63), ((uint_64)((uint_64)((int_64)$1 + (int_64)*(*($5 + [1708]) + [88])) % (uint_64)$3) / (uint_64)$1), (int_64)0)
	$1 = *((($5 + [232]) + [8]))
	$7 = *($5 + [232])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*($5 + [1032]) = $14
	*($5 + [1024]) = ((int_64)$7 / (int_64)100)
	$21 = *($5 + [1752])
	CALL $212(($5 + [1464]), (*($5 + [1524]) + [116]))
	*((($5 + [1448]) + [8])) = *($6)
	*($5 + [1448]) = *($5 + [1408])
	$6 = *($5 + [1708])
	$1 = ((int_64)*($5 + [1512]) + (int_64)*($6 + [88]))
	*($5 + [1440]) = (int_64))($1 - ((uint_64)$1 % (uint_64)$3))
	
.LABEL $label$152
	$1 = *($5 + [1376])
	CALL __multi3(($5 + [200]), $1, (int_64)$1 >> (int_64)63), (int_64)26, (int_64)0)
	*(($8 = (($5 + [864]) + [8]))) = *(($6 + [24]))
	*($5 + [864]) = *($6 + [16])
	$6 = (($5 + [1376]) + [8])
	$1 = *($6)
	$7 = *((($5 + [200]) + [8]))
	$14 = *($5 + [200])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	$23 = (int_64)$7 >> (int_64)63
	$7 = *($5 + [1376])
	CALL __multi3(($5 + [168]), $7, $23), (int_64)20, (int_64)0)
	CALL __multi3(($5 + [184]), $7, $23, (int_64)0, (int_64)20)
	$23 = *($6)
	$7 = *((($5 + [168]) + [8]))
	$24 = *($5 + [168])
	CALL eosio_assert(( (uint_64)($24 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$24 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	$7 = (int_64)
	$7 = *((($5 + [184]) + [8]))
	CALL __multi3(($5 + [152]), $7, (int_64)$7 >> (int_64)63), $7(*($5 + [1512]) - ((int_64)$15 + (int_64)$18))), (int_64)$7 >> (int_64)63))
	$7 = *((($5 + [152]) + [8]))
	$15 = *($5 + [152])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	$7 = *($5 + [1512])
	CALL eosio_assert(((int_64)$7 != (int_64)0), [9367])
	CALL eosio_assert([1], [9382])
	CALL eosio_assert(((int_64)$23 == (int_64)$1), [9598])
	$7 = ((int_64)((int_64)((int_64)$15 / (int_64)100) / (int_64)$7) + (int_64)((int_64)$14 / (int_64)100))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [9598])
	$7 = ((int_64)*($5 + [864]) + (int_64)$7)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*($8) = $1
	$1 = *($6)
	*((($5 + [848]) + [8])) = $1
	$15 = *(*($5 + [1708]) + [8])
	*((($5 + [216]) + [8])) = $1
	*($5 + [864]) = $7
	$1 = *($5 + [1376])
	*($5 + [848]) = $1
	*($5 + [216]) = $1
	$1 = CALL $78($0, ($5 + [216]), *($5 + [1752]), $15)
	$1 = ((int_64)$1 + (int_64)2)
	$7 = *($5 + [1376])
	CALL __multi3(($5 + [136]), $7, (int_64)$7 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$15 = *($6)
	$1 = *((($5 + [136]) + [8]))
	$7 = *($5 + [136])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9702])
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*((($5 + [816]) + [8])) = [0]
	*($5 + [840]) = $15
	*($5 + [832]) = ((int_64)$7 / (int_64)100)
	*($5 + [816]) = (int_64)0
	$8 = CALL $223([9728])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$159 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$162 }
	*($5 + [816]) = ($8 << [1])
	$11 = (($5 + [816]) | [1])
	if ( $8 ){ goto $label$161 }
	goto $label$160 
	
.LABEL $label$162
	$6 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($6)
	*($5 + [816]) = ($6 | [1])
	*($5 + [824]) = $11
	*($5 + [820]) = $8
	
.LABEL $label$161
	CALL memcpy($11, [9728], $8)
	
.LABEL $label$160
	$6 = [0]
	*(($11 + $8)) = [0]
	*((($5 + [120]) + [8])) = *((($5 + [832]) + [8]))
	*($5 + [120]) = *($5 + [832])
	CALL $79($0, (int_64)-1190221485383887568, ($5 + [120]), ($5 + [816]))
	if ( ((*($5 + [816]) & [1]) == 0) ){ goto $label$163 }
	CALL _ZdlPv(*($5 + [824]))
	
.LABEL $label$163
	$15 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$15 >> (uint_64)(int_64)8)
	
.LOOP $label$165:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$164 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$166 }
	$1 = $7
	$4 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$165 }
	goto $label$164 
	
.LABEL $label$166
	$1 = $7
	
.LOOP $label$167:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$164 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$167 }
	$4 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$165 }
	
.LABEL $label$164
	CALL eosio_assert($4, [8870])
	CALL eosio_assert(((int_64)*(($5 + [1400])) == (int_64)$15), [9050])
	if ( ((int_64)*($5 + [1392]) > (int_64)0) ){ goto $label$169 }
	$15 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$15 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$172:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$171 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$173 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$172 }
	goto $label$170 
	
.LABEL $label$173
	$1 = $7
	
.LOOP $label$174:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$171 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$174 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$172 }
	goto $label$170 
	
.LABEL $label$171
	$8 = [0]
	
.LABEL $label$170
	CALL eosio_assert($8, [8870])
	CALL eosio_assert(((int_64)*((($5 + [1408]) + [8])) == (int_64)$15), [9050])
	if ( ((int_64)*($5 + [1408]) < (int_64)1) ){ goto $label$168 }
	
.LABEL $label$169
	$14 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$177:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$176 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$178 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$177 }
	goto $label$175 
	
.LABEL $label$178
	$1 = $7
	
.LOOP $label$179:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$176 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$179 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$177 }
	goto $label$175 
	
.LABEL $label$176
	$8 = [0]
	
.LABEL $label$175
	CALL eosio_assert($8, [8870])
	$15 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$15 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$182:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$181 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$183 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$182 }
	goto $label$180 
	
.LABEL $label$183
	$1 = $7
	
.LOOP $label$184:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$181 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$184 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$182 }
	goto $label$180 
	
.LABEL $label$181
	$8 = [0]
	
.LABEL $label$180
	CALL eosio_assert($8, [8870])
	$18 = *($12)
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$18 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$187:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$186 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$188 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$187 }
	goto $label$185 
	
.LABEL $label$188
	$1 = $7
	
.LOOP $label$189:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$186 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$189 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$187 }
	goto $label$185 
	
.LABEL $label$186
	$8 = [0]
	
.LABEL $label$185
	CALL eosio_assert($8, [8870])
	$6 = ($5 + [1400])
	CALL eosio_assert(((int_64)*($6) == (int_64)$18), [9050])
	$18 = *($12)
	$7 = *($6)
	$1 = *($5 + [1392])
	CALL eosio_assert([1], [8821])
	$6 = ((int_64)$1 > (int_64)0)
	$14 = ( $7 ? $14 : $6 )
	$23 = ( $1 ? (int_64)0 : $6 )
	$1 = (uint_64)$18 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$192:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$191 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$193 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$192 }
	goto $label$190 
	
.LABEL $label$193
	$1 = $7
	
.LOOP $label$194:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$191 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$194 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$192 }
	goto $label$190 
	
.LABEL $label$191
	$8 = [0]
	
.LABEL $label$190
	CALL eosio_assert($8, [8870])
	$8 = ($5 + [1416])
	CALL eosio_assert(((int_64)*($8) == (int_64)$18), [9050])
	$1 = (int_64)0
	$7 = *($5 + [1408])
	if ( ((int_64)$7 <= (int_64)0) ){ goto $label$196 }
	$6 = *($5 + [1708])
	$1 = ((int_64)*($5 + [1512]) + (int_64)*($6 + [88]))
	$3 = (int_64))($1 - ((uint_64)$1 % (uint_64)$3))
	$15 = *($8)
	$1 = $7
	goto $label$195 
	
.LABEL $label$196
	$6 = *($5 + [1708])
	$3 = (int_64)0
	
.LABEL $label$195
	*($5 + [800]) = $23
	*($5 + [784]) = $1
	*($5 + [768]) = (int_64)0
	$18 = *($6 + [8])
	*($5 + [808]) = $14
	*($5 + [792]) = $15
	*($5 + [776]) = *($12)
	$15 = *($5 + [1752])
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)*($5 + [776]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$199:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$198 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$200 }
	$1 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$199 }
	goto $label$197 
	
.LABEL $label$200
	$1 = $7
	
.LOOP $label$201:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$198 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$201 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$199 }
	goto $label$197 
	
.LABEL $label$198
	$8 = [0]
	
.LABEL $label$197
	CALL eosio_assert($8, [8870])
	*((($5 + [72]) + [8])) = *((($5 + [800]) + [8]))
	*((($5 + [56]) + [8])) = *((($5 + [784]) + [8]))
	*((($5 + [40]) + [8])) = *((($5 + [768]) + [8]))
	*($5 + [72]) = *($5 + [800])
	*($5 + [56]) = *($5 + [784])
	*($5 + [40]) = *($5 + [768])
	CALL $57($0, $15, $18, ($5 + [72]), ($5 + [56]), $3, ($5 + [40]), (int_64)0, $9)
	$1 = *(*($5 + [1708]) + [8])
	$6 = CALL $210(($5 + [752]), ($5 + [1496]))
	*(($12 = (($5 + [736]) + [8]))) = *((($5 + [1480]) + [8]))
	*($5 + [736]) = *($5 + [1480])
	$8 = CALL $210(($5 + [720]), ($5 + [1464]))
	*(($4 = (($5 + [704]) + [8]))) = *((($5 + [1448]) + [8]))
	*($5 + [704]) = *($5 + [1448])
	$7 = *($5 + [1440])
	$3 = *($5 + [1752])
	$11 = CALL $210(($5 + [688]), (*($5 + [1524]) + [116]))
	*((($5 + [24]) + [8])) = *($12)
	*((($5 + [8]) + [8])) = *($4)
	*($5 + [24]) = *($5 + [736])
	*($5 + [8]) = *($5 + [704])
	CALL $77($0, $1, $22, $6, ($5 + [24]), $21, $8, ($5 + [8]), $7, $3, $11, *($5 + [1512]))
	if ( (*($11) & [1]) ){ goto $label$203 }
	if ( (*($8) & [1]) ){ goto $label$202 }
	goto $label$156 
	
.LABEL $label$203
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$156 }
	
.LABEL $label$202
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$154 }
	goto $label$155 
	
.LABEL $label$168
	$1 = *(*($5 + [1708]) + [8])
	$6 = CALL $210(($5 + [672]), ($5 + [1496]))
	*(($12 = (($5 + [656]) + [8]))) = *((($5 + [1480]) + [8]))
	*($5 + [656]) = *($5 + [1480])
	$8 = CALL $210(($5 + [640]), ($5 + [1464]))
	*(($4 = (($5 + [624]) + [8]))) = *((($5 + [1448]) + [8]))
	*($5 + [624]) = *($5 + [1448])
	$7 = *($5 + [1440])
	$3 = *($5 + [1752])
	$11 = CALL $210(($5 + [608]), (*($5 + [1524]) + [116]))
	*((($5 + [104]) + [8])) = *($12)
	*((($5 + [88]) + [8])) = *($4)
	*($5 + [104]) = *($5 + [656])
	*($5 + [88]) = *($5 + [624])
	CALL $77($0, $1, $22, $6, ($5 + [104]), $21, $8, ($5 + [88]), $7, $3, $11, *($5 + [1512]))
	if ( (*($11) & [1]) ){ goto $label$205 }
	if ( (*($8) & [1]) ){ goto $label$204 }
	goto $label$158 
	
.LABEL $label$205
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$158 }
	
.LABEL $label$204
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$154 }
	goto $label$157 
	
.LABEL $label$159
	CALL $209(($5 + [816]))
	
.LABEL $label$158
	if ( ((*($6) & [1]) == 0) ){ goto $label$154 }
	
.LABEL $label$157
	CALL _ZdlPv(*($6 + [8]))
	goto $label$154 
	
.LABEL $label$156
	if ( ((*($6) & [1]) == 0) ){ goto $label$154 }
	
.LABEL $label$155
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$154
	$6 = *($5 + [1524])
	$1 = *($0)
	*($5 + [564]) = ($5 + [1424])
	*($5 + [560]) = ($5 + [1520])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $80(($5 + [1664]), $6, $1, ($5 + [560]))
	$1 = *($0)
	$6 = *($5 + [1532])
	*($5 + [572]) = $2
	*($5 + [564]) = ($5 + [1376])
	*($5 + [560]) = ($5 + [1528])
	*($5 + [568]) = ($5 + [1424])
	*($5 + [576]) = ($5 + [1408])
	*($5 + [580]) = ($5 + [1392])
	*($5 + [584]) = ($5 + [1512])
	*($5 + [588]) = ($5 + [1480])
	*($5 + [592]) = ($5 + [1448])
	*($5 + [596]) = ($5 + [1440])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $81(($5 + [1624]), $6, $1, ($5 + [560]))
	$6 = *($5 + [1540])
	$1 = *($0)
	*($5 + [564]) = ($5 + [1512])
	*($5 + [560]) = ($5 + [1536])
	*($5 + [568]) = ($5 + [1080])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $82(($5 + [1584]), $6, $1, ($5 + [560]))
	$1 = *($0)
	*($5 + [564]) = ($5 + [1096])
	*($5 + [560]) = ($5 + [1176])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9407])
	CALL $83(($5 + [1544]), $10, $1, ($5 + [560]))
	$6 = *($5 + [1708])
	$1 = *($0)
	*($5 + [564]) = ($5 + [1064])
	*($5 + [560]) = ($5 + [1112])
	*($5 + [568]) = ($5 + [1128])
	*($5 + [572]) = ($5 + [1120])
	*($5 + [576]) = ($5 + [1704])
	*($5 + [580]) = ($5 + [1376])
	*($5 + [584]) = ($5 + [1752])
	*($5 + [588]) = ($5 + [1144])
	*($5 + [592]) = ($5 + [1512])
	*($5 + [596]) = ($5 + [1136])
	*($5 + [600]) = ($5 + [1024])
	*($5 + [604]) = ($5 + [864])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $84(($5 + [1712]), $6, $1, ($5 + [560]))
	$1 = *($0)
	*($5 + [564]) = $19
	*($5 + [560]) = ($5 + [1168])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [9407])
	CALL $85(($5 + [1336]), $16, $1, ($5 + [560]))
	*(($5 + [592])) = [0]
	*($5 + [576]) = (int_64)-1
	*($5 + [584]) = (int_64)0
	$7 = *($0)
	*($5 + [560]) = $7
	$1 = *($5 + [1752])
	*($5 + [568]) = $1
	$6 = CALL db_find_i64($7, $1, (int_64)3774958338810839040, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$216 }
	$6 = CALL $86(($5 + [560]), $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($5 + [560])), [8890])
	*($5 + [1020]) = $6
	*($5 + [1016]) = ($5 + [560])
	$1 = *($0)
	*($5 + [1012]) = ($5 + [1376])
	*($5 + [1008]) = ($5 + [1016])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $87(($5 + [560]), $6, $1, ($5 + [1008]))
	$11 = *($5 + [584])
	if ( ($11 == 0) ){ goto $label$215 }
	goto $label$214 
	
.LABEL $label$216
	*($5 + [1020]) = [0]
	*($5 + [1016]) = ($5 + [560])
	$1 = *($0)
	*($5 + [1012]) = ($5 + [1376])
	*($5 + [1008]) = ($5 + [1752])
	CALL $88(($5 + [552]), ($5 + [560]), $1, ($5 + [1008]))
	$11 = *($5 + [584])
	if ( $11 ){ goto $label$214 }
	
.LABEL $label$215
	$6 = [1]
	if ( (*($5 + [1152]) & [1]) ){ goto $label$213 }
	goto $label$212 
	
.LABEL $label$214
	$0 = ($5 + [588])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$218 }
	
.LOOP $label$219:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$220 }
	CALL _ZdlPv($8)
	
.LABEL $label$220
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$219 }
	$6 = *(($5 + [584]))
	goto $label$217 
	
.LABEL $label$218
	$6 = $11
	
.LABEL $label$217
	*($0) = $11
	CALL _ZdlPv($6)
	$6 = [1]
	if ( ((*($5 + [1152]) & [1]) == 0) ){ goto $label$212 }
	
.LABEL $label$213
	CALL _ZdlPv(*($19 + [8]))
	if ( ((*($5 + [1312]) & $6) == 0) ){ goto $label$211 }
	goto $label$210 
	
.LABEL $label$212
	if ( (*($5 + [1312]) & $6) ){ goto $label$210 }
	
.LABEL $label$211
	$17
	$11 = *($5 + [1360])
	if ( ($11 == 0) ){ goto $label$209 }
	goto $label$208 
	
.LABEL $label$210
	CALL _ZdlPv(*(($5 + [1320])))
	$17
	$11 = *($5 + [1360])
	if ( $11 ){ goto $label$208 }
	
.LABEL $label$209
	$6 = [1]
	if ( ((*($5 + [1464]) & [1]) == 0) ){ goto $label$206 }
	goto $label$207 
	
.LABEL $label$208
	$0 = ($5 + [1364])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$222 }
	
.LOOP $label$223:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$224 }
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$225 }
	CALL _ZdlPv(*(($8 + [24])))
	
.LABEL $label$225
	CALL _ZdlPv($8)
	
.LABEL $label$224
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$223 }
	$6 = *(($5 + [1360]))
	goto $label$221 
	
.LABEL $label$222
	$6 = $11
	
.LABEL $label$221
	*($0) = $11
	CALL _ZdlPv($6)
	$6 = [1]
	if ( ((*($5 + [1464]) & [1]) == 0) ){ goto $label$206 }
	
.LABEL $label$207
	CALL _ZdlPv(*($5 + [1472]))
	
.LABEL $label$206
	if ( ((*($5 + [1496]) & $6) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($5 + [1504]))
	
.LABEL $label$25
	$11 = *($5 + [1568])
	if ( ($11 == 0) ){ goto $label$226 }
	$0 = ($5 + [1572])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$228 }
	
.LOOP $label$229:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$230 }
	CALL _ZdlPv($8)
	
.LABEL $label$230
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$229 }
	$6 = *(($5 + [1568]))
	goto $label$227 
	
.LABEL $label$228
	$6 = $11
	
.LABEL $label$227
	*($0) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$226
	$11 = *($5 + [1608])
	if ( ($11 == 0) ){ goto $label$231 }
	$0 = ($5 + [1612])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$233 }
	
.LOOP $label$234:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$235 }
	CALL _ZdlPv($8)
	
.LABEL $label$235
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$234 }
	$6 = *(($5 + [1608]))
	goto $label$232 
	
.LABEL $label$233
	$6 = $11
	
.LABEL $label$232
	*($0) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$231
	$11 = *($5 + [1648])
	if ( ($11 == 0) ){ goto $label$236 }
	$0 = ($5 + [1652])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$238 }
	
.LOOP $label$239:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$240 }
	CALL _ZdlPv($8)
	
.LABEL $label$240
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$239 }
	$6 = *(($5 + [1648]))
	goto $label$237 
	
.LABEL $label$238
	$6 = $11
	
.LABEL $label$237
	*($0) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$236
	$11 = *($5 + [1688])
	if ( ($11 == 0) ){ goto $label$241 }
	$0 = ($5 + [1692])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$243 }
	
.LOOP $label$244:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$245 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$246 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$246
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$247 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$247
	CALL _ZdlPv($6)
	
.LABEL $label$245
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$244 }
	$6 = *(($5 + [1688]))
	goto $label$242 
	
.LABEL $label$243
	$6 = $11
	
.LABEL $label$242
	*($0) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$241
	$11 = *($5 + [1736])
	if ( ($11 == 0) ){ goto $label$248 }
	$0 = ($5 + [1740])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$250 }
	
.LOOP $label$251:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$252 }
	CALL _ZdlPv($8)
	
.LABEL $label$252
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$251 }
	$6 = *(($5 + [1736]))
	goto $label$249 
	
.LABEL $label$250
	$6 = $11
	
.LABEL $label$249
	*($0) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$248
	$global$0 = ($5 + [1760])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$9 = ($global$0 - [128])
	$global$0 = $9
	*($9 + [120]) = $1
	*((($9 + [56]) + [24])) = (int_64)0
	*(($9 + [104])) = (int_64)0
	*($9 + [72]) = (int_64)0
	*($9 + [96]) = (int_64)0
	*($9 + [56]) = $2
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$11 = $13
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$5 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	CALL eosio_assert($14, [8870])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [9050])
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$6 }
	*((($9 + [56]) + [24])) = *(($3 + [8]))
	*($9 + [64]) = (int_64)0
	*($9 + [72]) = *($3)
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$11 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$11 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$14 = [0]
	
.LABEL $label$7
	CALL eosio_assert($14, [8870])
	*(($9 + [104])) = $10
	*(($9 + [96])) = (int_64)0
	*($9 + [112]) = (int_64)0
	
.LABEL $label$6
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$11 = $13
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$16 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$14 = [0]
	
.LABEL $label$12
	CALL eosio_assert($14, [8870])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$10), [9050])
	if ( (int_64)($5 == 0) ){ goto $label$17 }
	if ( ((int_64)*($4) < (int_64)1) ){ goto $label$17 }
	*((($9 + [56]) + [24])) = *(($4 + [8]))
	*($9 + [64]) = $5
	*($9 + [72]) = *($4)
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$11 = $13
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$22 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$14 = [0]
	
.LABEL $label$18
	CALL eosio_assert($14, [8870])
	*(($9 + [104])) = $10
	*(($9 + [96])) = (int_64)0
	*($9 + [112]) = (int_64)0
	
.LABEL $label$17
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$11 = $13
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$27 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$14 = [0]
	
.LABEL $label$23
	CALL eosio_assert($14, [8870])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)$10), [9050])
	if ( ((int_64)*($6) < (int_64)1) ){ goto $label$29 }
	*($9 + [64]) = (int_64)0
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$11 = $13
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$34 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$14 = [0]
	
.LABEL $label$30
	CALL eosio_assert($14, [8870])
	*(($9 + [80])) = $10
	*(($9 + [72])) = (int_64)0
	*(($9 + [104])) = *(($6 + [8]))
	*($9 + [96]) = *($6)
	*($9 + [112]) = $7
	if ( ((int_64)$7 == (int_64)2) ){ goto $label$28 }
	*($9 + [56]) = ((int_64)$2 + (int_64)-1)
	
.LABEL $label$29
	if ( ((int_64)$7 != (int_64)3) ){ goto $label$28 }
	*($9 + [64]) = (int_64)0
	$10 = *($8)
	CALL eosio_assert([1], [8821])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$11 = $13
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$39 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$14 = [0]
	
.LABEL $label$35
	CALL eosio_assert($14, [8870])
	*(($9 + [80])) = $10
	*(($9 + [72])) = (int_64)0
	*(($9 + [104])) = *(($6 + [8]))
	*($9 + [112]) = (int_64)3
	*($9 + [56]) = ((int_64)$2 + (int_64)-1)
	*($9 + [96]) = *($6)
	
.LABEL $label$28
	*($9 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	*($9 + [40]) = (int_64)0
	$11 = *($0)
	*($9 + [16]) = $11
	*($9 + [24]) = $1
	$12 = CALL db_find_i64($11, $1, (int_64)-7631349568579305472, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$42 }
	$12 = CALL $98(($9 + [16]), $12)
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)($9 + [16])), [8890])
	$11 = *($0)
	*($9 + [8]) = ($9 + [56])
	CALL eosio_assert([1], [9407])
	CALL $99(($9 + [16]), $12, $11, ($9 + [8]))
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$11 = *($0)
	*($9 + [12]) = ($9 + [56])
	*($9 + [8]) = ($9 + [120])
	CALL $100($9, ($9 + [16]), $11, ($9 + [8]))
	$8 = *($9 + [40])
	if ( $8 ){ goto $label$40 }
	
.LABEL $label$41
	$global$0 = ($9 + [128])
	return 
	
.LABEL $label$40
	$6 = ($9 + [44])
	$12 = *($6)
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$44 }
	
.LOOP $label$45:
	$12 = ($12 + [-24])
	$14 = *($12)
	*($12) = [0]
	if ( ($14 == 0) ){ goto $label$46 }
	$15 = *($14 + [8])
	if ( ($15 == 0) ){ goto $label$47 }
	*(($14 + [12])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$47
	CALL _ZdlPv($14)
	
.LABEL $label$46
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$45 }
	$12 = *(($9 + [40]))
	goto $label$43 
	
.LABEL $label$44
	$12 = $8
	
.LABEL $label$43
	*($6) = $8
	CALL _ZdlPv($12)
	$global$0 = ($9 + [128])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	$6 = ($1 + [12])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($7) = *($4)
	*(($7 + [56])) = *(($4 + [56]))
	*(($7 + [48])) = *(($4 + [48]))
	*(($7 + [40])) = *(($4 + [40]))
	*(($7 + [32])) = *(($4 + [32]))
	*(($7 + [24])) = *(($4 + [24]))
	*(($7 + [16])) = *(($4 + [16]))
	*(($7 + [8])) = *(($4 + [8]))
	$7 = (*($6) + [64])
	*($6) = $7
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $174($8, $4)
	$7 = *($6)
	
.LABEL $label$1
	$6 = *($8)
	$8 = ($7 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [6]))
	$4 = [8]
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	$4 = (($8 & [-64]) + $4)
	
.LABEL $label$4
	if ( ($4 <= [513]) ){ goto $label$6 }
	$7 = CALL $226($4)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$5
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $4)
	CALL $175($3, $1)
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)-7631349568579305472, *(*($0 + [8])), $9, $7, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $229($7)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [112]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[136]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[136])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[31580642]) ){ goto $label$3 }
	$3 = [31580641]
	$2 = ((int_32)($2 - $4) / (int_32)[136])
	if ( ((uint_32)$2 > (uint_32)[15790319]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[136]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*((($3 = CALL memset($3, [0], [136])) + [32])) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*(($3 + [72])) = [0]
	*($3 + [80]) = (int_64)0
	*(($3 + [88])) = (int_64)0
	*($3 + [112 align=4]) = (int_64)0
	*(($3 + [120])) = [0]
	$3 = (*($2) + [136])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $218($0)
	
.LABEL $label$2
	$7 = ($2 + ((int_32)$3 * (int_32)[136]))
	$5 = ($2 + ((int_32)$5 * (int_32)[136]))
	$3 = $5
	
.LOOP $label$8:
	*((($3 = CALL memset($3, [0], [136])) + [32])) = [0]
	*(($3 + [24])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [64])) = (int_64)0
	*(($3 + [72])) = [0]
	*(($3 + [80])) = (int_64)0
	*(($3 + [88])) = (int_64)0
	*(($3 + [112])) = (int_64)0
	*(($3 + [120])) = [0]
	$3 = ($3 + [136])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($2 + ((int_32)$6 * (int_32)[136]))
	$3 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = ($3 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$3 = ($9 + $2)
	*((($1 = ($5 + $2)) + [-120])) = *(($3 + [-120]))
	*(($1 + [-128])) = *(($3 + [-128]))
	*(($1 + [-136])) = *(($3 + [-136]))
	$6 = ($3 + [-104])
	*(($1 + [-104])) = *($6)
	$4 = ($3 + [-112])
	*(($1 + [-112])) = *($4)
	*($6) = [0]
	*($4) = (int_64)0
	*(($1 + [-80])) = *(($3 + [-80]))
	*(($1 + [-88])) = *(($3 + [-88]))
	*(($1 + [-96])) = *(($3 + [-96]))
	$6 = ($3 + [-64])
	*(($1 + [-64])) = *($6)
	$4 = ($3 + [-72])
	*(($1 + [-72])) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	*(($1 + [-32])) = *(($3 + [-32]))
	*(($1 + [-40])) = *(($3 + [-40]))
	*(($1 + [-48])) = *(($3 + [-48]))
	*(($1 + [-56])) = *(($3 + [-56]))
	$6 = ($3 + [-16])
	*(($1 + [-16])) = *($6)
	$4 = ($3 + [-24])
	*(($1 + [-24])) = *($4)
	*($4) = [0]
	*(($3 + [-20])) = [0]
	*($6) = [0]
	*(($1 + [-8])) = *(($3 + [-8]))
	$2 = ($2 + [-136])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$3 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$14
	if ( ((*(($3 + [-72])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [-64])))
	
.LABEL $label$15
	$1 = ($3 + [-136])
	if ( ((*(($3 + [-112])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [-104])))
	
.LABEL $label$16
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *(($0 + [8]))), [8964])
	$2 = *($5)
	$6 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($6 & [128]) ){ goto $label$1 }
	CALL $151(($1 + [8]), (CASTING uint_32)(uint_64 $4))
	$2 = *(($1 + [12]))
	$6 = *($1 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $152($0, $6)
	$6 = ($6 + [136])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[136])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $153($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$4 = ($3 + ((int_32)$1 * (int_32)[136]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($2 + [-24])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [-16])))
	
.LABEL $label$5
	if ( ((*(($2 + [-72])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [-64])))
	
.LABEL $label$6
	$1 = ($2 + [-136])
	if ( ((*(($2 + [-112])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [-104])))
	
.LABEL $label$7
	$2 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $4
	
.LABEL $label$2
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [24])
	*($0) = $2
	$3 = *($1 + [24])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [24]))
	$3 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$2 = ($2 + [24])
	*($0) = $2
	$3 = *($1 + [64])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [64]))
	$3 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$2 = ($2 + [32])
	*($0) = $2
	$3 = *($1 + [112])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$1 = *(($1 + [112]))
	$1 = ( *(($1 + [116])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$6
	*($0) = ($2 + [8])
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *($1 + [8])) / (int_32)[136]))
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[0]), [9013])
	CALL memcpy(*($5), ($2 + [15]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$1 }
	$3 = *(($1 + [12]))
	$5 = *(($1 + [8]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $158($0, $5)
	$5 = ($5 + [136])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $154 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($4 + [12])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((*(($1 + [-24])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$8
	if ( ((*(($1 + [-72])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [-64])))
	
.LABEL $label$9
	$7 = ($1 + [-136])
	if ( ((*(($1 + [-112])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [-104])))
	
.LABEL $label$10
	$1 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	$1 = *(($4 + [8]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[136])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[31580642]) ){ goto $label$2 }
	$5 = [31580641]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[136])
	if ( ((uint_32)$2 > (uint_32)[15790319]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[136]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[136])))) = *($1)
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	CALL $210(($6 + [24]), ($1 + [24]))
	*(($6 + [56])) = *(($1 + [56]))
	*(($6 + [48])) = *(($1 + [48]))
	*($6 + [40]) = *($1 + [40])
	CALL $210(($6 + [64]), ($1 + [64]))
	*(($6 + [104])) = *(($1 + [104]))
	*(($6 + [96])) = *(($1 + [96]))
	*(($6 + [88])) = *(($1 + [88]))
	*($6 + [80]) = *($1 + [80])
	CALL $210(($6 + [112]), ($1 + [112]))
	*($6 + [128]) = *($1 + [128])
	$7 = ($2 + ((int_32)$5 * (int_32)[136]))
	$8 = ($6 + [136])
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$6 }
	$10 = ($1 - $9)
	$2 = [0]
	
.LOOP $label$7:
	$1 = ($9 + $2)
	*((($5 = ($6 + $2)) + [-120])) = *(($1 + [-120]))
	*(($5 + [-128])) = *(($1 + [-128]))
	*(($5 + [-136])) = *(($1 + [-136]))
	$3 = ($1 + [-104])
	*(($5 + [-104])) = *($3)
	$4 = ($1 + [-112])
	*(($5 + [-112])) = *($4)
	*($3) = [0]
	*($4) = (int_64)0
	*(($5 + [-80])) = *(($1 + [-80]))
	*(($5 + [-88])) = *(($1 + [-88]))
	*(($5 + [-96])) = *(($1 + [-96]))
	$3 = ($1 + [-64])
	*(($5 + [-64])) = *($3)
	$4 = ($1 + [-72])
	*(($5 + [-72])) = *($4)
	*($4) = (int_64)0
	*($3) = [0]
	*(($5 + [-32])) = *(($1 + [-32]))
	*(($5 + [-40])) = *(($1 + [-40]))
	*(($5 + [-48])) = *(($1 + [-48]))
	*(($5 + [-56])) = *(($1 + [-56]))
	$3 = ($1 + [-16])
	*(($5 + [-16])) = *($3)
	$4 = ($1 + [-24])
	*(($5 + [-24])) = *($4)
	*($4) = [0]
	*(($1 + [-20])) = [0]
	*($3) = [0]
	*(($5 + [-8])) = *(($1 + [-8]))
	$2 = ($2 + [-136])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$7 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $1
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( ((*(($1 + [-24])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$10
	if ( ((*(($1 + [-72])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [-64])))
	
.LABEL $label$11
	$5 = ($1 + [-136])
	if ( ((*(($1 + [-112])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [-104])))
	
.LABEL $label$12
	$1 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $40($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $40($0, ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $40($0, ($1 + [112]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *(($1 + [12]))
	$2 = *(*(*($0) + [4]) + [8])
	$3 = ($2 + [136])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$5 = ($4 + [-136])
	
.LOOP $label$4:
	*(($2 + [16])) = *(($2 + [152]))
	*(($2 + [8])) = *(($2 + [144]))
	$4 = ($2 + [136])
	*($2) = *($4)
	$3 = ($2 + [24])
	if ( (*($3) & [1]) ){ goto $label$6 }
	*($3) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($2 + [32]))) = [0]
	*(($2 + [28])) = [0]
	
.LABEL $label$5
	CALL $214($3, [0])
	$6 = ($2 + [168])
	*(($3 + [8])) = *($6)
	$7 = ($2 + [160])
	*($3) = *($7)
	*($7) = (int_64)0
	*($6) = [0]
	*(($2 + [40])) = *(($2 + [176]))
	*(($2 + [48])) = *(($2 + [184]))
	*(($2 + [56])) = *(($2 + [192]))
	$3 = ($2 + [64])
	if ( (*($3) & [1]) ){ goto $label$8 }
	*($3) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($2 + [72]))) = [0]
	*(($2 + [68])) = [0]
	
.LABEL $label$7
	CALL $214($3, [0])
	$6 = ($2 + [208])
	*(($3 + [8])) = *($6)
	$7 = ($2 + [200])
	*($3) = *($7)
	*($7) = (int_64)0
	*($6) = [0]
	*(($2 + [80])) = *(($2 + [216]))
	*(($2 + [88])) = *(($2 + [224]))
	*(($2 + [96])) = *(($2 + [232]))
	*(($2 + [104])) = *(($2 + [240]))
	$3 = ($2 + [112])
	if ( (*($3) & [1]) ){ goto $label$10 }
	*($3) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*(($2 + [120]))) = [0]
	*(($2 + [116])) = [0]
	
.LABEL $label$9
	CALL $214($3, [0])
	$6 = ($2 + [256])
	*(($3 + [8])) = *($6)
	$7 = ($2 + [248])
	*($3) = *($7)
	*($7) = (int_64)0
	*($6) = [0]
	*(($2 + [128])) = *(($2 + [264]))
	$2 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($1 + [12]))
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $2
	
.LABEL $label$2
	
.LOOP $label$11:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$12
	if ( ((*(($3 + [-72])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [-64])))
	
.LABEL $label$13
	$2 = ($3 + [-136])
	if ( ((*(($3 + [-112])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-104])))
	
.LABEL $label$14
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$11 }
	
.LABEL $label$1
	*(($3 = ($1 + [12]))) = $4
	$2 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)*(($1 + [16]))) ){ goto $label$15 }
	*($4) = *($2)
	*(($4 + [16])) = *(($2 + [16]))
	*(($4 + [8])) = *(($2 + [8]))
	CALL $210(($4 + [24]), ($2 + [24]))
	*(($4 + [56])) = *(($2 + [56]))
	*(($4 + [48])) = *(($2 + [48]))
	*($4 + [40]) = *($2 + [40])
	CALL $210(($4 + [64]), ($2 + [64]))
	*(($4 + [104])) = *(($2 + [104]))
	*(($4 + [96])) = *(($2 + [96]))
	*(($4 + [88])) = *(($2 + [88]))
	*($4 + [80]) = *($2 + [80])
	CALL $210(($4 + [112]), ($2 + [112]))
	*($4 + [128]) = *($2 + [128])
	*($3) = (*($3) + [136])
	return 
	
.LABEL $label$15
	CALL $155(($1 + [8]), $2)
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $1
	CALL $184($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $133(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3774958338810839040, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $134(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

int_32 .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $219())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $225($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [16])) = $2
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$4 = *($0 + [8])
	*($1 + [56]) = *($4)
	*(($1 + [64])) = *(($4 + [8]))
	*($1 + [72]) = (int_64)1
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([40])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8968])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8968])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [36]) = ($2 + [16])
	CALL $26(($3 + [32]), ($5 + [16]))
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $141(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	$8 = ($global$0 - [64])
	$global$0 = $8
	*($8 + [48]) = $1
	CALL $50($0, $2, *(*($4 + [4]) + [8]), $1, $3, $5, $7, $4, $6)
	$1 = *($0)
	$4 = *($4 + [4])
	*($8 + [12]) = $3
	*($8 + [8]) = ($8 + [48])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9407])
	CALL $120($6, $4, $1, ($8 + [8]))
	*(($8 + [40])) = [0]
	*($8 + [16]) = $2
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$1 = *($0)
	*($8 + [8]) = $1
	$0 = CALL db_find_i64($1, $2, (int_64)-7631349568579305472, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $98(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($8 + [8])), [8890])
	CALL eosio_assert([1], [9744])
	CALL eosio_assert([1], [9778])
	$4 = CALL db_next_i64(*($0 + [24]), ($8 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $98(($8 + [8]), $4)
	
.LABEL $label$2
	CALL $121(($8 + [8]), $0)
	$6 = *($8 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = ($8 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($8 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $6
	
.LABEL $label$3
	*($5) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($8 + [64])
}

int_32 .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $226($1)
	
.LABEL $label$2
	*(CALL $219()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $226(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $229($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [152])
	$8 = *(($6 + [160]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9598])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [160])) = $8
	*($1 + [152]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [184]) = ($4 + [168])
	*($4 + [180]) = $4
	*($4 + [176]) = $4
	CALL $109(($4 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $4, [168])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$10 = *(($7 + [48]))
	$9 = *($3 + [4])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$10), [9598])
	$8 = ((int_64)$8 + (int_64)*($9))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)*($3 + [8])), [9598])
	$8 = ((int_64)*($3) + (int_64)$8)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $10
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3))
	if ( ((uint_32)$7 > (uint_32)[5]) ){ goto $label$1 }
	goto $label$7 
	
.LABEL $label$7
	*($1 + [64]) = ((int_64)*(*(*($3 + [4]) + [4]) + [64]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$6
	*($1 + [72]) = ((int_64)*(*(*($3 + [4]) + [4]) + [72]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$5
	*($1 + [80]) = ((int_64)*(*(*($3 + [4]) + [4]) + [80]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$4
	*($1 + [88]) = ((int_64)*(*(*($3 + [4]) + [4]) + [88]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$3
	*($1 + [96]) = ((int_64)*(*(*($3 + [4]) + [4]) + [96]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	*($1 + [104]) = ((int_64)*(*(*($3 + [4]) + [4]) + [104]) + (int_64)1)
	
.LABEL $label$1
	CALL eosio_assert([1], [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$8:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	if ( ($3 <= [513]) ){ goto $label$11 }
	$4 = CALL $226($3)
	goto $label$10 
	
.LABEL $label$11
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$10
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$14 }
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$12
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	$7
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($1 + [56]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [80]) = $0
	CALL $117(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $116(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [80]) = $1
	CALL $110($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $111(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-7948560026672185344, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $112(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [8])
	$9 = *(($6 + [16]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [16])) = $9
	*($1 + [8]) = $7
	$6 = *(*($3) + [4])
	$7 = *($6 + [24])
	$9 = *(($6 + [32]))
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [32])) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $111(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [80]) = $1
	CALL $114($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $115(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-7948565157351784448, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $116(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	*($3 + [144]) = [8192]
	*($3 + [148]) = CALL $223([8192])
	*($3 + [72]) = *($3 + [144])
	CALL $2(($3 + [152]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)4520851959632101375) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-2128398414721843201) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3020310856061681664) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [1]
	*($3 + [16]) = *($3 + [128])
	CALL $4($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)5935070084908187647) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4520851959632101376) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5935062516392001536) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [40]) = *($3 + [104])
	CALL $6($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-2128398414721843200) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4520791012835016704) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [3]
	*($3 + [48]) = *($3 + [96])
	CALL $8($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)5935070084908187648) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421051804996861952) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [32]) = *($3 + [112])
	CALL $10($0, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [5]
	*($3 + [8]) = *($3 + [136])
	CALL $12($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [92]) = [0]
	*($3 + [88]) = [6]
	*($3 + [56]) = *($3 + [88])
	CALL $14($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [24]) = *($3 + [120])
	CALL $16($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [84]) = [0]
	*($3 + [80]) = [8]
	*($3 + [64]) = *($3 + [80])
	CALL $14($0, $1, ($3 + [64]))
	
.LABEL $label$1
	CALL $220([0])
	$global$0 = ($3 + [160])
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $228($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8286])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $228 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10152]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10156])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10152]) = [1]
	$2 = ($2 << [16])
	*([0] + [10156]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10156])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10156]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10152]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10152]) = [1]
	$3 = ($3 << [16])
	*([0] + [10156]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10156])
	
.LABEL $label$10
	*([0] + [10156]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $229 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18544])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18352]
	$3 = (((int_32)$1 * (int_32)[12]) + [18352])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([144])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [124]) = [0]
	*($3 + [132]) = $1
	CALL $165(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [136])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $104(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $1
	CALL $132($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $133(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3774958338810839040, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $134(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [8])
	$9 = *(($6 + [16]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [16])) = $9
	*($1 + [8]) = $7
	*($1 + [24]) = ((int_64)*(*(*($3) + [4]) + [24]) + (int_64)1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $133(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $0
	CALL $164(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $134(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$7 = ($1 + [16])
	CALL $212($7, *($3 + [4]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [16])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $226($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9013])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [9013])
	CALL memcpy(($4 + [8]), $8, [8])
	*($5 + [4]) = ($4 + [16])
	CALL $40($5, $7)
	CALL db_update_i64(*($1 + [32]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($4 + [168]) = *($1 + [8])
	*($1 + [80]) = *(*($3))
	$5 = *($3 + [4])
	*(($1 + [56])) = *(($5 + [8]))
	*($1 + [48]) = *($5)
	*($1 + [112]) = *(*($3 + [8]))
	*($1 + [104]) = *(*($3 + [12]))
	$6 = *($1)
	$5 = *(*($3 + [16]) + [4])
	$7 = *($5 + [64])
	$9 = *(($5 + [72]))
	$8 = *($3 + [20])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [72])) = $9
	*($1 + [64]) = $7
	*($1 + [136]) = *(*($3 + [24]))
	*($1 + [128]) = *(*($3 + [28]))
	*($1 + [88]) = ((int_64)*(*($3 + [32])) + (int_64)*(*(*($3 + [16]) + [4]) + [88]))
	*($1 + [120]) = *(*($3 + [36]))
	$5 = *($3 + [40])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	$3 = *($3 + [44])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	*($4 + [160]) = ($4 + [145])
	*($4 + [156]) = $4
	*($4 + [152]) = $4
	CALL $163(($4 + [152]), $1)
	CALL db_update_i64(*($1 + [152]), $2, $4, [145])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [184]) = *(($1 + [8]))
	if ( (CALL $222(($4 + [168]), ($4 + [184]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [156])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($4 + [176]), $6)
	*(($1 + [156])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($4 + [184]))
	
.LABEL $label$2
	$global$0 = ($4 + [192])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($1 + [40]) = *(*($3))
	$3 = *($3 + [4])
	*(($1 + [16])) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	$5 = *($1)
	CALL eosio_assert([1], [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $115(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($1 + [72]) = ((int_64)*(*($3 + [4])) + (int_64)*(*(*($3) + [4]) + [72]))
	$3 = *($3 + [8])
	*(($1 + [16])) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	$5 = *($1)
	CALL eosio_assert([1], [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $111(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	CALL $162($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [184]) = ($4 + [168])
	*($4 + [180]) = $4
	*($4 + [176]) = $4
	CALL $109(($4 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $4, [168])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	*($1 + [112]) = [1]
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $182 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $1
	CALL $183($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $133(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3774958338810839040, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $134(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $154(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	$6 = ($1 + [12])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($7) = *($4)
	*(($7 + [16])) = *(($4 + [16]))
	*(($7 + [8])) = *(($4 + [8]))
	CALL $210(($7 + [24]), ($4 + [24]))
	*(($7 + [56])) = *(($4 + [56]))
	*(($7 + [48])) = *(($4 + [48]))
	*($7 + [40]) = *($4 + [40])
	CALL $210(($7 + [64]), ($4 + [64]))
	*(($7 + [104])) = *(($4 + [104]))
	*(($7 + [96])) = *(($4 + [96]))
	*(($7 + [88])) = *(($4 + [88]))
	*($7 + [80]) = *($4 + [80])
	CALL $210(($7 + [112]), ($4 + [112]))
	*($7 + [128]) = *($4 + [128])
	$8 = (*($6) + [136])
	*($6) = $8
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	CALL $155($7, $4)
	$8 = *($6)
	
.LABEL $label$1
	$4 = [8]
	*($3) = [8]
	$7 = *($7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)($8 - $7) / (int_32)[136]))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $156($3, $7)
	$7 = ($7 + [136])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$5 }
	$4 = *($3)
	
.LABEL $label$4
	if ( ($4 <= [513]) ){ goto $label$7 }
	$7 = CALL $226($4)
	goto $label$6 
	
.LABEL $label$7
	$7 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$6
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $4)
	CALL $157($3, $1)
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)7035927889115611136, *(*($0 + [8])), $9, $7, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $229($7)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $218($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8964])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $145($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ((int_32)$7 * (int_32)[24]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [8968])
	CALL memcpy($2, *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	$2 = ($2 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9013])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9013])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9013])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9013])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($4 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	*($1 + [8]) = (int_64)0
	$4 = *($0)
	$5 = ($1 + [16])
	CALL $215($5, [9956])
	$6 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9013])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [9013])
	CALL memcpy(($2 + [8]), $7, [8])
	*($3 + [4]) = ($2 + [16])
	CALL $40($3, $5)
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($4 + [8]), (int_64)-8524864824747229184, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	$6 = ($1 + [12])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($7) = *($4)
	*(($7 + [16])) = *(($4 + [16]))
	*(($7 + [8])) = *(($4 + [8]))
	$7 = (*($6) + [24])
	*($6) = $7
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $146($8, $4)
	$7 = *($6)
	
.LABEL $label$1
	$6 = *($8)
	$9 = ($7 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[24]))
	$4 = [32]
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	$7 = (((int_32)((uint_32)($9 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $4)
	if ( ($7 <= [513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($4 + [-24])
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL $226($7)
	
.LABEL $label$4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [9013])
	CALL memcpy($4, $1, [8])
	*($3 + [4]) = ($4 + [8])
	CALL $147($3, $8)
	$10 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)-8524862449301209088, *(*($0 + [8])), $10, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$10 >= (uint_64)*($5 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $229($4)
	if ( (uint_64)($10 <= *($5 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC $72 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [88]) = $1
	*($6 + [72]) = $5
	*($6 + [64]) = $3
	*($6 + [80]) = $4
	*(($6 + [56])) = [0]
	*($6 + [32]) = $1
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$4 = *($0)
	*($6 + [24]) = $4
	$7 = CALL db_find_i64($4, $1, (int_64)-8524862449301209088, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL $92(($6 + [24]), $7)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($6 + [24])), [8890])
	*($6 + [20]) = $7
	$8 = *(($7 + [12]))
	$9 = *($7 + [8])
	*($6 + [16]) = ($6 + [24])
	$1 = *($0)
	if ( ((uint_32)((int_32)($8 - $9) / (int_32)[24]) > (uint_32)[9]) ){ goto $label$3 }
	*($6 + [8]) = ($6 + [64])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9407])
	CALL $122(($6 + [24]), $7, $1, ($6 + [8]))
	$9 = *($6 + [48])
	if ( $9 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($6 + [20]) = [0]
	*($6 + [16]) = ($6 + [24])
	$1 = *($0)
	*($6 + [12]) = ($6 + [64])
	*($6 + [8]) = ($6 + [88])
	CALL $123($6, ($6 + [24]), $1, ($6 + [8]))
	$9 = *($6 + [48])
	if ( $9 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($6 + [12]) = ($6 + [64])
	*($6 + [8]) = ($6 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9407])
	CALL $124(($6 + [24]), $7, $1, ($6 + [8]))
	$9 = *($6 + [48])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($6 + [52])
	$7 = *($10)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	$8 = *($0 + [8])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($0 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($6 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $9
	
.LABEL $label$5
	*($10) = $9
	CALL _ZdlPv($7)
	$global$0 = ($6 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [96])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $140(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $141(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = *($1)
	$3 = (CASTING uint_32)(uint_64 $2)
	*($0 + [15]) = $3
	*($0 + [11]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [10]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [9]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [8]) = (uint_64)$2 >> (uint_64)(int_64)56)
	*($0 + [14]) = uint_32($3 >> [8])
	*($0 + [13]) = uint_32($3 >> [16])
	*($0 + [12]) = uint_32($3 >> [24])
	$2 = *(($1 + [8]))
	$3 = (CASTING uint_32)(uint_64 $2)
	*($0 + [7]) = $3
	*($0 + [3]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [2]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [1]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0) = (uint_64)$2 >> (uint_64)(int_64)56)
	*($0 + [6]) = uint_32($3 >> [8])
	*($0 + [5]) = uint_32($3 >> [16])
	*($0 + [4]) = uint_32($3 >> [24])
	$2 = *($1 + [16])
	$3 = (CASTING uint_32)(uint_64 $2)
	*($0 + [31]) = $3
	*($0 + [27]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [26]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [25]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [24]) = (uint_64)$2 >> (uint_64)(int_64)56)
	$2 = *(($1 + [24]))
	$4 = (CASTING uint_32)(uint_64 $2)
	*($0 + [23]) = $4
	*($0 + [19]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [18]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [17]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [16]) = (uint_64)$2 >> (uint_64)(int_64)56)
	*($0 + [30]) = uint_32($3 >> [8])
	*($0 + [29]) = uint_32($3 >> [16])
	*($0 + [28]) = uint_32($3 >> [24])
	*($0 + [22]) = uint_32($4 >> [8])
	*($0 + [21]) = uint_32($4 >> [16])
	*($0 + [20]) = uint_32($4 >> [24])
	$2 = *($1 + [32])
	$3 = (CASTING uint_32)(uint_64 $2)
	*($0 + [47]) = $3
	*($0 + [43]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [42]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [41]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [40]) = (uint_64)$2 >> (uint_64)(int_64)56)
	$2 = *(($1 + [40]))
	$4 = (CASTING uint_32)(uint_64 $2)
	*($0 + [39]) = $4
	*($0 + [35]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [34]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [33]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [32]) = (uint_64)$2 >> (uint_64)(int_64)56)
	*($0 + [46]) = uint_32($3 >> [8])
	*($0 + [45]) = uint_32($3 >> [16])
	*($0 + [44]) = uint_32($3 >> [24])
	*($0 + [38]) = uint_32($4 >> [8])
	*($0 + [37]) = uint_32($4 >> [16])
	*($0 + [36]) = uint_32($4 >> [24])
	$2 = *($1 + [48])
	$3 = (CASTING uint_32)(uint_64 $2)
	*($0 + [63]) = $3
	*($0 + [59]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [58]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [57]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [56]) = (uint_64)$2 >> (uint_64)(int_64)56)
	$2 = *(($1 + [56]))
	$1 = (CASTING uint_32)(uint_64 $2)
	*($0 + [55]) = $1
	*($0 + [51]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($0 + [50]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($0 + [49]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($0 + [48]) = (uint_64)$2 >> (uint_64)(int_64)56)
	*($0 + [62]) = uint_32($3 >> [8])
	*($0 + [61]) = uint_32($3 >> [16])
	*($0 + [60]) = uint_32($3 >> [24])
	*($0 + [54]) = uint_32($1 >> [8])
	*($0 + [53]) = uint_32($1 >> [16])
	*($0 + [52]) = uint_32($1 >> [24])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [32])
	$9 = *(($6 + [40]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [40])) = $9
	*($1 + [32]) = $7
	$6 = *(*($3) + [4])
	$7 = *($6 + [64])
	$9 = *(($6 + [72]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [72])) = $9
	*($1 + [64]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [184]) = ($4 + [168])
	*($4 + [180]) = $4
	*($4 + [176]) = $4
	CALL $109(($4 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $4, [168])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7, int_64 $8, int_64 $9, int_32 $10, int_64 $11)
{
	int_32 $12
	int_32 $13
	int_64 $14
	$12 = ($global$0 - [208])
	$global$0 = $12
	*($12 + [200]) = $1
	*((($12 + [64]) + [32])) = [0]
	*(($12 + [136])) = [0]
	*(($13 = ($12 + [152]))) = (int_64)0
	*(($12 + [184])) = [0]
	*($12 + [88]) = (int_64)0
	*($12 + [128]) = (int_64)0
	*($12 + [144]) = (int_64)0
	*($12 + [176]) = (int_64)0
	*($12 + [64]) = $1
	$14 = CALL current_time()
	*(($12 + [112])) = *(($4 + [8]))
	*($12 + [80]) = $2
	*($12 + [104]) = *($4)
	*($12 + [72]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $212(($12 + [88]), $3)
	*($12 + [120]) = $5
	CALL $212(($12 + [128]), $6)
	*($13) = *(($7 + [8]))
	*($12 + [160]) = $8
	*($12 + [168]) = $9
	*($12 + [144]) = *($7)
	CALL $212(($12 + [176]), $10)
	*($12 + [192]) = $11
	*((($12 + [24]) + [32])) = [0]
	*($12 + [32]) = $1
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = (int_64)0
	$11 = *($0)
	*($12 + [24]) = $11
	$7 = CALL db_find_i64($11, $1, (int_64)7035927889115611136, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL $125(($12 + [24]), $7)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($12 + [24])), [8890])
	*($12 + [20]) = $7
	$4 = *(($7 + [12]))
	$10 = *($7 + [8])
	*($12 + [16]) = ($12 + [24])
	$1 = *($0)
	if ( ((uint_32)((int_32)($4 - $10) / (int_32)[136]) > (uint_32)[9]) ){ goto $label$2 }
	*($12 + [8]) = ($12 + [64])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9407])
	CALL $126(($12 + [24]), $7, $1, ($12 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($12 + [20]) = [0]
	*($12 + [16]) = ($12 + [24])
	$1 = *($0)
	*($12 + [12]) = ($12 + [64])
	*($12 + [8]) = ($12 + [200])
	CALL $127($12, ($12 + [24]), $1, ($12 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($12 + [12]) = ($12 + [64])
	*($12 + [8]) = ($12 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9407])
	CALL $128(($12 + [24]), $7, $1, ($12 + [8]))
	
.LABEL $label$1
	CALL $129(($12 + [48]))
	if ( ((*(($12 + [176])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($12 + [184])))
	
.LABEL $label$4
	if ( ((*(($12 + [128])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($12 + [136])))
	
.LABEL $label$5
	if ( ((*(($12 + [88])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($12 + [96])))
	
.LABEL $label$6
	$global$0 = ($12 + [208])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [32])
	$9 = *(($6 + [40]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [40])) = $9
	*($1 + [32]) = $7
	$6 = *(*($3) + [4])
	$7 = *($6 + [64])
	$9 = *(($6 + [72]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [72])) = $9
	*($1 + [64]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [184]) = ($4 + [168])
	*($4 + [180]) = $4
	*($4 + [176]) = $4
	CALL $109(($4 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $4, [168])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_64 .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [40]) = (int_64)3
	*($4 + [32]) = (int_64)10
	*($4 + [48]) = (int_64)1
	*($4 + [56]) = (int_64)1
	*($4 + [64]) = (int_64)1
	*($4 + [72]) = (int_64)1
	$5 = ($1 + [8])
	$6 = (($4 + [88]) + [16])
	$7 = ($4 + [112])
	$8 = ($4 + [120])
	$9 = ($4 + [116])
	$10 = [0]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( (int_64)($2 == 0) ){ goto $label$2 }
	*((($4 + [88]) + [8])) = $2
	*($6) = (int_64)-1
	*($7) = (int_64)0
	*($8) = [0]
	*($4 + [88]) = *($0)
	CALL $53(($4 + [80]), $0, $2, $5, ($4 + [88]))
	$12 = *(*($4 + [84]) + [56])
	$13 = *($7)
	if ( ($13 == 0) ){ goto $label$2 }
	$14 = *($9)
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$4 }
	
.LOOP $label$5:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$6 }
	if ( ((*($15 + [116]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($15 + [124])))
	
.LABEL $label$7
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($15 + [16])))
	
.LABEL $label$8
	CALL _ZdlPv($15)
	
.LABEL $label$6
	if ( ((int_32)$13 != (int_32)$14) ){ goto $label$5 }
	$15 = *($7)
	goto $label$3 
	
.LABEL $label$4
	$15 = $13
	
.LABEL $label$3
	*($9) = $13
	CALL _ZdlPv($15)
	
.LABEL $label$2
	$16 = *($5)
	*((($4 + [16]) + [8])) = $16
	$2 = *($1)
	*(($4 + [8])) = $16
	*($4 + [16]) = $2
	*($4) = $2
	$11 = ((int_64)CALL $130($0, $4, *((($4 + [32]) + ($10 << [3]))), $12, $3) + (int_64)$11)
	$2 = $12
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[6]) ){ goto $label$1 }
	$global$0 = ($4 + [128])
	return $11
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = ((int_64)*($2) / (int_64)10000)
	$2 = CALL $223([8520])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8723])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($2 + [8519]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8768])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8821])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8870])
	$6 = *($0)
	*($4 + [104]) = [8587]
	*($4 + [108]) = CALL $223([8587])
	*($4 + [16]) = *($4 + [104])
	$9 = *(CALL $2(($4 + [112]), ($4 + [16])))
	*($4 + [88]) = [8192]
	*($4 + [92]) = CALL $223([8192])
	*($4 + [8]) = *($4 + [88])
	$2 = CALL $2(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [9977]
	*($4 + [76]) = CALL $223([9977])
	*($4) = *($4 + [72])
	$7 = CALL $2(($4 + [80]), $4)
	*((($4 + [24]) + [24])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $5
	*($4 + [24]) = *($0)
	$10 = CALL $210((($4 + [24]) + [32]), $3)
	*($4 + [120]) = *($2)
	*($4 + [128]) = *($7)
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = $9
	*((($4 + [120]) + [36])) = [0]
	$7 = ($2 + [16])
	*((($4 + [120]) + [24])) = $7
	*(($4 + [140])) = $7
	*($4 + [136]) = $2
	*($4 + [148 align=4]) = (int_64)0
	$2 = *($10)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [32])
	$6 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [148])
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $23($7, $2)
	$7 = *(($4 + [152]))
	$2 = *(($4 + [148]))
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$2 = [0]
	
.LABEL $label$13
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = $7
	*($4 + [160]) = ($4 + [176])
	*($4 + [168]) = ($4 + [24])
	CALL $131(($4 + [168]), ($4 + [160]))
	CALL $22(($4 + [176]), ($4 + [120]))
	$2 = *($4 + [176])
	CALL send_inline($2, (*($4 + [180]) - $2))
	$2 = *($4 + [176])
	if ( ($2 == 0) ){ goto $label$15 }
	*($4 + [180]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$2 = *($4 + [148])
	if ( ($2 == 0) ){ goto $label$16 }
	*(($4 + [152])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$2 = *($4 + [136])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($4 + [140])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$17
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

int_32 .FUNC $223 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL $136(($3 + [32]), $5)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $137(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [12])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($3)
	*(($8 + [56])) = *(($3 + [56]))
	*(($8 + [48])) = *(($3 + [48]))
	*(($8 + [40])) = *(($3 + [40]))
	*(($8 + [32])) = *(($3 + [32]))
	*(($8 + [24])) = *(($3 + [24]))
	*(($8 + [16])) = *(($3 + [16]))
	*(($8 + [8])) = *(($3 + [8]))
	*($7) = (*($7) + [64])
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $174($8, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$8 = *($8)
	$7 = *(($1 + [12]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [6]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	$3 = (($9 & [-64]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$8 = CALL $226($3)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$5
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $175($5, $1)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $229($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9808])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9853])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9903])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [24])
	$10 = *(($7 + [32]))
	$9 = *($3 + [4])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$10), [9598])
	$8 = ((int_64)$8 + (int_64)*($9))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)*($3 + [8])), [9598])
	$8 = ((int_64)*($3) + (int_64)$8)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [32])) = $10
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [68 align=4]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = $1
	CALL $168(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $169(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [76])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($4 + [168]) = *($1 + [8])
	$5 = *($1)
	CALL $172($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [160]) = ($4 + [145])
	*($4 + [156]) = $4
	*($4 + [152]) = $4
	CALL $163(($4 + [152]), $1)
	CALL db_update_i64(*($1 + [152]), $2, $4, [145])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [184]) = *(($1 + [8]))
	if ( (CALL $222(($4 + [168]), ($4 + [184]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [156])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($4 + [176]), $5)
	*(($1 + [156])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($4 + [184]))
	
.LABEL $label$2
	$global$0 = ($4 + [192])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $1
	CALL $166($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $133(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3774958338810839040, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $134(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($1 + [144]) = [1]
	*($4 + [168]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [9539])
	*($4 + [160]) = ($4 + [145])
	*($4 + [156]) = $4
	*($4 + [152]) = $4
	CALL $163(($4 + [152]), $1)
	CALL db_update_i64(*($1 + [152]), $2, $4, [145])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [184]) = *(($1 + [8]))
	if ( (CALL $222(($4 + [168]), ($4 + [184]), [8]) == 0) ){ goto $label$2 }
	$6 = *($1 + [156])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($4 + [176]), $5)
	*(($1 + [156])) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $2, ($4 + [184]))
	
.LABEL $label$2
	$global$0 = ($4 + [192])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8968])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $144(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $143(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [24])
	$9 = *(($7 + [32]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [32])) = $9
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [6])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$4 }
	$3 = [67108863]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$3 = int_32($2 >> [5])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [64])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $218($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [6]))
	$5 = ($2 + ($5 << [6]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	$3 = ($3 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [6]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [144])
	$global$0 = $5
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	*((($5 + [88]) + [32])) = [0]
	*($5 + [96]) = $3
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$6 = *($0)
	*($5 + [88]) = $6
	*((($5 + [48]) + [32])) = [0]
	*($5 + [56]) = $3
	*($5 + [48]) = $6
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$7 = ($1 + [8])
	CALL $53(($5 + [40]), $0, $3, $7, ($5 + [88]))
	*($5 + [16]) = $3
	$8 = CALL db_find_i64($6, $3, (int_64)7035936280380030976, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $48(($5 + [48]), $8)
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)($5 + [48])), [8890])
	*($5 + [36]) = $8
	*($5 + [32]) = ($5 + [48])
	if ( *(*($5 + [44]) + [112]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	*($5 + [36]) = [0]
	*($5 + [32]) = ($5 + [48])
	$3 = *($0)
	*($5 + [132]) = $7
	*($5 + [128]) = ($5 + [16])
	CALL $49(($5 + [136]), ($5 + [48]), $3, ($5 + [128]))
	$3 = *($5 + [136])
	*($5 + [32]) = $3
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32))
	if ( (*(*($5 + [44]) + [112]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *($1)
	CALL __multi3($5, $3, (int_64)$3 >> (int_64)63), $2, (int_64)$2 >> (int_64)63))
	$2 = (int_64)0
	$9 = *($1 + [8])
	$3 = *(($5 + [8]))
	$6 = *($5)
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [9702])
	*($5 + [24]) = $9
	CALL eosio_assert([1], [9367])
	CALL eosio_assert([1], [9382])
	*($5 + [16]) = ((int_64)$6 / (int_64)100)
	$1 = *($5 + [44])
	$3 = *($0)
	*($5 + [140]) = ($5 + [16])
	*($5 + [136]) = ($5 + [40])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9407])
	CALL $160(($5 + [88]), $1, $3, ($5 + [136]))
	if ( ((int_64)*($8 + [8]) != (int_64)$4) ){ goto $label$2 }
	$1 = *($5 + [36])
	$3 = *($0)
	*($5 + [140]) = ($5 + [16])
	*($5 + [136]) = ($5 + [32])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9407])
	CALL $161(($5 + [48]), $1, $3, ($5 + [136]))
	
.LABEL $label$2
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$5 }
	$7 = ($5 + [76])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($5 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $8
	
.LABEL $label$6
	*($7) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$1 }
	$7 = ($5 + [116])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	if ( ((*($0 + [116]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($0 + [124])))
	
.LABEL $label$14
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$12 }
	$0 = *(($5 + [112]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $8
	
.LABEL $label$10
	*($7) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [144])
	return $2
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *($0 + [4])
	*(($1 + [16])) = *(($2 + [8]))
	*($1 + [8]) = *($2)
	*($1 + [24]) = (int_64)1
	$3 = *(*($0 + [4]) + [8])
	CALL eosio_assert([1], [8821])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $3
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$3 = *(*(($0 + [4])) + [8])
	CALL eosio_assert([1], [8821])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $5
	$6 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [64])) = $3
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = (int_64)0
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1 + [8]) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [24])) = $2
	*($1 + [16]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [8870])
	*(($1 + [56])) = $2
	*($1 + [48]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $5
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [8870])
	*(($1 + [72])) = $2
	*($1 + [64]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $5
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$25 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$6 = [0]
	
.LABEL $label$21
	CALL eosio_assert($6, [8870])
	*(($1 + [88])) = $2
	*($1 + [80]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$3 = $5
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$30 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$6 = [0]
	
.LABEL $label$26
	CALL eosio_assert($6, [8870])
	*(($1 + [104])) = $2
	*($1 + [96]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$3 = $5
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$35 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$6 = [0]
	
.LABEL $label$31
	CALL eosio_assert($6, [8870])
	*(($1 + [120])) = $2
	*($1 + [112]) = (int_64)0
	*($1 + [128]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$3 = $5
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$40 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$6 = [0]
	
.LABEL $label$36
	CALL eosio_assert($6, [8870])
	*(($1 + [160])) = $2
	*($1 + [152]) = (int_64)0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *(($0 + [8]))), [8964])
	$2 = *($5)
	$6 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($6 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1 + [8])
	$7 = ($1 + [12])
	$2 = *($7)
	$5 = int_32(($2 - $6) >> [6])
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$4 }
	$6 = ($1 + [8])
	CALL $138($6, ($3 - $5))
	$2 = *($7)
	$6 = *($6)
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$3) ){ goto $label$5 }
	$2 = ($6 + ($3 << [6]))
	*(($1 + [12])) = $2
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $139($0, $6)
	$6 = ($6 + [64])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $213 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $209 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $229($0)
	
.LABEL $label$1
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1 + [8]) = *(*($5))
	$6 = ($1 + [16])
	CALL $212($6, *($5 + [4]))
	$5 = *($5 + [4])
	$7 = *($5)
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	$5 = ($5 + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($5 + [4])
	$5 = *($5 + [8])
	
.LABEL $label$1
	$8 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $5
	*($3) = *($3 + [24])
	*($1) = *(CALL $2(($3 + [8]), $3))
	$5 = *(($1 + [16]))
	$7 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [16])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [9013])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [9013])
	CALL memcpy(($2 + [8]), $8, [8])
	*($3 + [12]) = ($2 + [16])
	CALL $40(($3 + [8]), $6)
	$9 = *(($1 + [8]))
	*($1 + [32]) = CALL db_store_i64(*($4 + [8]), (int_64)-7236991285547646976, *(*($0 + [8])), $9, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $229($2)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$9 = *(($1 + [8]))
	$10 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	*($3 + [24]) = *($1)
	*($1 + [36]) = CALL db_idx64_store($10, (int_64)-7236991285547646976, $11, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $226($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10140])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $226($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $229($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $224(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10140])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $224(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $181 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [56])
	$9 = *(($6 + [64]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [64])) = $9
	*($1 + [56]) = $7
	*($1 + [72]) = ((int_64)*(*(*($3) + [4]) + [72]) + (int_64)1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $133(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($3 + [12])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( ((*(($6 + [-24])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [-16])))
	
.LABEL $label$10
	if ( ((*(($6 + [-72])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [-64])))
	
.LABEL $label$11
	$7 = ($6 + [-136])
	if ( ((*(($6 + [-112])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($6 + [-104])))
	
.LABEL $label$12
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	$6 = *(($3 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$6 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$6 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$1
	return $0
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	CALL $159($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	$3 = [8]
	*(($6 = $4)) = [8]
	$8 = *($1 + [8])
	$7 = *(($1 + [12]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($7 - $8) / (int_32)[136]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	*($6) = $3
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $156($6, $8)
	$8 = ($8 + [136])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$3 }
	$3 = *($6)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$5 }
	$8 = CALL $226($3)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$4
	*($6 + [4]) = $8
	*($6) = $8
	*($6 + [8]) = ($8 + $3)
	CALL $157($6, $1)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $229($8)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($6 + [16])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $34(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [112]) + [8]))) = $10
	*(($9 = (($4 + [128]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [128]) = $11
	*($4 + [112]) = $11
	$10 = *($9)
	*((($4 + [144]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [88])
	$0 = *($4 + [80])
	$1 = *($4 + [104])
	*($9) = *($3)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [128])
	*($4) = $11
	*($4 + [144]) = $11
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $229($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL $223([8570])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8723])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8569]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8768])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	*($2 + [8]) = $4
	CALL $30($0, ($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $142(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $143(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [12])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($3)
	*(($8 + [16])) = *(($3 + [16]))
	*(($8 + [8])) = *(($3 + [8]))
	*($7) = (*($7) + [24])
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	CALL $146($7, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$9 = *($7)
	$8 = *(($1 + [12]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[24]))
	$3 = [32]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$7 }
	$8 = (((int_32)((uint_32)($10 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3)
	if ( ($8 <= [513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $226($8)
	
.LABEL $label$4
	*($5) = $3
	*($5 + [8]) = ($3 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [9013])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $147($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $229($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9808])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9853])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9903])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	CALL $135($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [184]) = ($4 + [168])
	*($4 + [180]) = $4
	*($4 + [176]) = $4
	CALL $109(($4 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $4, [168])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8248])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8439])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8372])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8439])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [12])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($3)
	*(($8 + [16])) = *(($3 + [16]))
	*(($8 + [8])) = *(($3 + [8]))
	CALL $210(($8 + [24]), ($3 + [24]))
	*(($8 + [56])) = *(($3 + [56]))
	*(($8 + [48])) = *(($3 + [48]))
	*($8 + [40]) = *($3 + [40])
	CALL $210(($8 + [64]), ($3 + [64]))
	*(($8 + [104])) = *(($3 + [104]))
	*(($8 + [96])) = *(($3 + [96]))
	*(($8 + [88])) = *(($3 + [88]))
	*($8 + [80]) = *($3 + [80])
	CALL $210(($8 + [112]), ($3 + [112]))
	*($8 + [128]) = *($3 + [128])
	*($7) = (*($7) + [136])
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $155($8, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = [8]
	*($5) = [8]
	$8 = *($8)
	$7 = *(($1 + [12]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($7 - $8) / (int_32)[136]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	*($5) = $3
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $156($5, $8)
	$8 = ($8 + [136])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$5 }
	$3 = *($5)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL $226($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$6
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $157($5, $1)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $229($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $226($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($2 = CALL _Znwj([32])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [20]) = $0
	CALL $150(($3 + [32]), $2)
	*($2 + [24]) = $1
	*($3 + [24]) = $2
	$6 = *($2)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $2
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $149(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($4)
	
.LABEL $label$6
	$0 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	$8 = ($0 + [12])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	if ( ((*(($5 + [-24])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [-16])))
	
.LABEL $label$14
	if ( ((*(($5 + [-72])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [-64])))
	
.LABEL $label$15
	$1 = ($5 + [-136])
	if ( ((*(($5 + [-112])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($5 + [-104])))
	
.LABEL $label$16
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$13 }
	$5 = *(($0 + [8]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $4
	
.LABEL $label$11
	*($8) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$7 = *(*(*($3) + [4]) + [8])
	$8 = ($7 + [24])
	$6 = ($1 + [12])
	$9 = (*($6) - $8)
	$10 = ((int_32)$9 / (int_32)[24])
	$11 = *($1)
	if ( ($9 == 0) ){ goto $label$1 }
	CALL memmove($7, $8, $9)
	
.LABEL $label$1
	$9 = ($1 + [8])
	$7 = ($7 + ((int_32)$10 * (int_32)[24]))
	*($6) = $7
	$3 = *($3 + [4])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$3 }
	*($7) = *($3)
	*(($7 + [16])) = *(($3 + [16]))
	*(($7 + [8])) = *(($3 + [8]))
	*(($7 = ($1 + [12]))) = (*($7) + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $146($9, $3)
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$11 == (int_64)*($1)), [9539])
	$6 = *(($1 + [8]))
	$3 = *(($1 + [12]))
	$10 = ($3 - $6)
	$12 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[24]))
	$7 = [32]
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	$3 = (((int_32)((uint_32)($10 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $7)
	if ( ($3 <= [513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = ($7 + [-24])
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $226($3)
	
.LABEL $label$5
	*($5) = $7
	*($5 + [8]) = ($7 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9013])
	CALL memcpy($7, $1, [8])
	*($5 + [4]) = ($7 + [8])
	CALL $147($5, $9)
	CALL db_update_i64(*($1 + [24]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$11 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $229($7)
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8968])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8968])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8968])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $26(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $36(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	CALL $29($0, $1)
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8968])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $229($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL require_auth(*($0))
	$3 = CALL $210($4, $3)
	CALL $38($0, $1, $3, ($2 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8968])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $229($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [448])
	$global$0 = $5
	$6 = *($0 + [8])
	*($5 + [408]) = [8192]
	*($5 + [412]) = CALL $223([8192])
	*($5 + [88]) = *($5 + [408])
	CALL $2(($5 + [320]), ($5 + [88]))
	if ( ((int_64)$6 == (int_64)6138663591592764928) ){ goto $label$1 }
	CALL eosio_assert([0], [8491])
	
.LABEL $label$1
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = CALL $223([8520])
	if ( ($8 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8723])
	goto $label$5 
	
.LABEL $label$6
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($8 + [8519]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8768])
	
.LABEL $label$8
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	if ( ((int_64)$7 == (int_64)$6) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [8524])
	
.LABEL $label$2
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$10 }
	*($5 + [400]) = [0]
	*($5 + [392]) = (int_64)0
	*(($5 + [328])) = [0]
	*($5 + [320]) = (int_64)0
	$8 = CALL $223([8539])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$17 }
	*($5 + [320]) = ($8 << [1])
	$9 = (($5 + [320]) | [1])
	if ( $8 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [320]) = ($10 | [1])
	*($5 + [328]) = $9
	*($5 + [324]) = $8
	
.LABEL $label$16
	CALL memcpy($9, [8539], $8)
	
.LABEL $label$15
	*(($9 + $8)) = [0]
	CALL $20($0, $4, ($5 + [392]), ($5 + [320]))
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($5 + [328]))
	
.LABEL $label$18
	$4 = *($5 + [392])
	if ( ((int_32)*($5 + [396]) == (int_32)$4) ){ goto $label$11 }
	$10 = CALL $210(($5 + [376]), $4)
	if ( CALL $217($10, [8541]) ){ goto $label$12 }
	if ( ((uint_32)((int_32)(*($5 + [396]) - *($5 + [392])) / (int_32)[12]) > (uint_32)[1]) ){ goto $label$19 }
	CALL eosio_assert([0], [8548])
	
.LABEL $label$19
	$11 = ((int_64)*($3) * (int_64)10000)
	$8 = CALL $223([8570])
	if ( ($8 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [8723])
	goto $label$21 
	
.LABEL $label$22
	if ( ($8 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$6 = (int_64)0
	
.LOOP $label$23:
	$9 = *(($8 + [8569]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [8768])
	
.LABEL $label$24
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$23 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$13 
	
.LABEL $label$20
	$6 = (int_64)0
	goto $label$13 
	
.LABEL $label$14
	CALL $209(($5 + [320]))
	
.LABEL $label$13
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8821])
	$12 = ((int_64)$6 | (int_64)4)
	$8 = [0]
	$2 = (uint_64)$6 >> (uint_64)(int_64)8
	$6 = $2)
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$6 = $7
	$9 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$6 = $7
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $9 ){ goto $label$29 }
	$9 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$9 = [0]
	
.LABEL $label$25
	CALL eosio_assert($9, [8870])
	$3 = CALL $210(($5 + [360]), (*($5 + [392]) + [12]))
	if ( (CALL $217($3, [8576]) == 0) ){ goto $label$45 }
	if ( (CALL $217($3, [8605]) == 0) ){ goto $label$44 }
	if ( (CALL $217($3, [8646]) == 0) ){ goto $label$42 }
	$8 = CALL $216($3, [8695])
	CALL eosio_assert([0], ( *($8 + [8]) ? ($8 + [1]) : (*($8) & [1]) ))
	if ( (*($5 + [360]) & [1]) ){ goto $label$30 }
	goto $label$12 
	
.LABEL $label$45
	$8 = *($5 + [392])
	if ( (((int_32)(*($5 + [396]) - $8) / (int_32)[12]) <= [3]) ){ goto $label$43 }
	$8 = ( *($4 + [4]) ? uint_32($8 >> [1]) : $9 )
	$8 = *($5 + [432])
	$9 = ($8 & [1])
	$13 = ($4 + [1])
	$4 = CALL $210(($5 + [432]), ($8 + [24]))
	$14 = ( *($4 + [8]) ? $13 : $9 )
	if ( ((int_32)*((($14 + $8) + [-1])) != (int_32)[95]) ){ goto $label$41 }
	*($5 + [328]) = [0]
	*($5 + [320]) = (int_64)0
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $223([8585])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$40 }
	*($5 + [128]) = ($8 << [1])
	$9 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$44
	$8 = *($5 + [392])
	if ( ((uint_32)((int_32)(*($5 + [396]) - $8) / (int_32)[12]) > (uint_32)[2]) ){ goto $label$46 }
	CALL eosio_assert([0], [8616])
	$8 = *($5 + [392])
	
.LABEL $label$46
	$9 = CALL $210(($5 + [216]), ($8 + [24]))
	$6 = *($0)
	*($5 + [184]) = [8587]
	*($5 + [188]) = CALL $223([8587])
	*($5 + [64]) = *($5 + [184])
	$8 = CALL $2(($5 + [192]), ($5 + [64]))
	*($5 + [200]) = $6
	*($5 + [208]) = *($8)
	$6 = *($0)
	*($5 + [168]) = [8638]
	*($5 + [172]) = CALL $223([8638])
	*($5 + [56]) = *($5 + [168])
	$8 = CALL $2(($5 + [176]), ($5 + [56]))
	*(($5 + [144])) = $12
	*($5 + [136]) = $11
	*($5 + [128]) = $1
	CALL $210((($5 + [128]) + [24]), $9)
	$8 = CALL $21(($5 + [320]), ($5 + [200]), $6, *($8), ($5 + [128]))
	CALL $22(($5 + [432]), $8)
	$4 = *($5 + [432])
	CALL send_inline($4, (*($5 + [436]) - $4))
	$4 = *($5 + [432])
	if ( ($4 == 0) ){ goto $label$47 }
	*($5 + [436]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$47
	$4 = *($8 + [28])
	if ( ($4 == 0) ){ goto $label$48 }
	*(($8 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$48
	$4 = *($8 + [16])
	if ( ($4 == 0) ){ goto $label$49 }
	*(($8 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$49
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$50
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($9 + [8]))
	if ( (*($5 + [360]) & [1]) ){ goto $label$30 }
	goto $label$12 
	
.LABEL $label$43
	$6 = *($0)
	*($5 + [248]) = [8587]
	*($5 + [252]) = CALL $223([8587])
	*($5 + [48]) = *($5 + [248])
	$2 = *(CALL $2(($5 + [256]), ($5 + [48])))
	$7 = *($0)
	*($5 + [232]) = [8594]
	*($5 + [236]) = CALL $223([8594])
	*($5 + [40]) = *($5 + [232])
	$8 = CALL $2(($5 + [240]), ($5 + [40]))
	*((($5 + [128]) + [16])) = $12
	*($5 + [136]) = $11
	*($5 + [128]) = $1
	*($5 + [152]) = (int_64)0
	*($5 + [320]) = $7
	*($5 + [328]) = *($8)
	*(($8 = CALL _Znwj([16]))) = $6
	*($8 + [8]) = $2
	*(($5 + [356])) = [0]
	$9 = ($8 + [16])
	*(($5 + [344])) = $9
	*(($5 + [340])) = $9
	*($5 + [336]) = $8
	*($5 + [348 align=4]) = (int_64)0
	CALL $23(($5 + [348]), [32])
	$8 = *((($5 + [320]) + [32]))
	$9 = *($5 + [348])
	*($5 + [204]) = $9
	*($5 + [200]) = $9
	*($5 + [208]) = $8
	*($5 + [216]) = ($5 + [200])
	*($5 + [432]) = ($5 + [128])
	CALL $24(($5 + [432]), ($5 + [216]))
	CALL $22(($5 + [200]), ($5 + [320]))
	$8 = *($5 + [200])
	CALL send_inline($8, (*($5 + [204]) - $8))
	$8 = *($5 + [200])
	if ( ($8 == 0) ){ goto $label$51 }
	*($5 + [204]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$51
	$8 = *($5 + [348])
	if ( ($8 == 0) ){ goto $label$52 }
	*(($5 + [352])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$52
	$8 = *($5 + [336])
	if ( ($8 == 0) ){ goto $label$31 }
	*(($5 + [340])) = $8
	CALL _ZdlPv($8)
	if ( (*($5 + [360]) & [1]) ){ goto $label$30 }
	goto $label$12 
	
.LABEL $label$42
	if ( ((uint_32)((int_32)(*($5 + [396]) - *($5 + [392])) / (int_32)[12]) > (uint_32)[2]) ){ goto $label$53 }
	CALL eosio_assert([0], [8616])
	
.LABEL $label$53
	CALL eosio_assert([1], [8821])
	$8 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$2 = $6
	$9 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$2 = $6
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $9 ){ goto $label$58 }
	$9 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$9 = [0]
	
.LABEL $label$54
	CALL eosio_assert($9, [8870])
	CALL eosio_assert([1], [9050])
	if ( ((int_64)$11 > (int_64)9999999) ){ goto $label$59 }
	CALL eosio_assert([0], [8661])
	
.LABEL $label$59
	$9 = CALL $210(($5 + [216]), (*($5 + [392]) + [24]))
	$6 = *($0)
	*($5 + [112]) = [8587]
	*($5 + [116]) = CALL $223([8587])
	*($5 + [80]) = *($5 + [112])
	$8 = CALL $2(($5 + [120]), ($5 + [80]))
	*($5 + [200]) = $6
	*($5 + [208]) = *($8)
	$6 = *($0)
	*($5 + [96]) = [8688]
	*($5 + [100]) = CALL $223([8688])
	*($5 + [72]) = *($5 + [96])
	$8 = CALL $2(($5 + [104]), ($5 + [72]))
	*(($5 + [144])) = $12
	*($5 + [136]) = $11
	*($5 + [128]) = $1
	CALL $210((($5 + [128]) + [24]), $9)
	$8 = CALL $21(($5 + [320]), ($5 + [200]), $6, *($8), ($5 + [128]))
	CALL $22(($5 + [432]), $8)
	$4 = *($5 + [432])
	CALL send_inline($4, (*($5 + [436]) - $4))
	$4 = *($5 + [432])
	if ( ($4 == 0) ){ goto $label$60 }
	*($5 + [436]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$60
	$4 = *($8 + [28])
	if ( ($4 == 0) ){ goto $label$61 }
	*(($8 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$61
	$4 = *($8 + [16])
	if ( ($4 == 0) ){ goto $label$62 }
	*(($8 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$62
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$63
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($9 + [8]))
	if ( (*($5 + [360]) & [1]) ){ goto $label$30 }
	goto $label$12 
	
.LABEL $label$41
	$6 = *($0)
	*($5 + [316]) = $8
	*($5 + [312]) = $14
	*($5 + [32]) = *($5 + [312])
	$8 = CALL $2(($5 + [128]), ($5 + [32]))
	*(($5 + [352])) = [0]
	*($5 + [320]) = $6
	*($5 + [336]) = (int_64)-1
	*($5 + [344]) = (int_64)0
	*($5 + [356]) = [0]
	*($5 + [328]) = *($8)
	*($5 + [216]) = ($5 + [320])
	$8 = *($5 + [432])
	$9 = ($8 & [1])
	*($5 + [304]) = ( *(($4 + [8])) ? $13 : $9 )
	*($5 + [308]) = ( *(($4 + [4])) ? uint_32($8 >> [1]) : $9 )
	*($5 + [24]) = *($5 + [304])
	$9 = CALL $2(($5 + [200]), ($5 + [24]))
	CALL $25(($5 + [128]), ($5 + [216]), $9)
	$8 = *($5 + [132])
	if ( ($8 == 0) ){ goto $label$33 }
	if ( ((int_64)*($9) != (int_64)*($8)) ){ goto $label$33 }
	$6 = *($8 + [8])
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$37 }
	$9 = [0]
	$14 = *([0] + [8976])
	
.LOOP $label$65:
	*((($5 + [128]) + ($8 = $9))) = *(($14 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$9 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$64 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$65 }
	
.LABEL $label$64
	*(($5 + [208])) = [0]
	*($5 + [200]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$36 }
	*($5 + [200]) = ($9 << [1])
	$14 = (($5 + [200]) | [1])
	goto $label$35 
	
.LABEL $label$40
	$14 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($14)
	*($5 + [128]) = ($14 | [1])
	*($5 + [136]) = $9
	*($5 + [132]) = $8
	
.LABEL $label$39
	CALL memcpy($9, [8585], $8)
	
.LABEL $label$38
	*(($9 + $8)) = [0]
	CALL $20($0, $4, ($5 + [320]), ($5 + [128]))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$66
	CALL $212($4, *($5 + [320]))
	$14 = *($5 + [320])
	if ( ($14 == 0) ){ goto $label$32 }
	$9 = *($5 + [324])
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$68 }
	
.LOOP $label$69:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$70
	$9 = $8
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$69 }
	$8 = *($5 + [320])
	goto $label$67 
	
.LABEL $label$68
	$8 = $14
	
.LABEL $label$67
	*($5 + [324]) = $14
	CALL _ZdlPv($8)
	goto $label$32 
	
.LABEL $label$37
	*(($5 + [208])) = [0]
	*($5 + [200]) = (int_64)0
	*($5 + [200]) = [0]
	$8 = (($5 + [200]) | [1])
	goto $label$34 
	
.LABEL $label$36
	$15 = (($9 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($5 + [200]) = ($15 | [1])
	*($5 + [208]) = $14
	*($5 + [204]) = $9
	
.LABEL $label$35
	$15 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$71:
	*(($14 + $8)) = *((($5 + [128]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$15 != (int_32)$8) ){ goto $label$71 }
	$8 = ($14 + $9)
	
.LABEL $label$34
	*($8) = [0]
	if ( (*($5 + [432]) & [1]) ){ goto $label$73 }
	*($13) = [0]
	*($5 + [432]) = [0]
	goto $label$72 
	
.LABEL $label$73
	*(*(($4 + [8]))) = [0]
	*(($4 + [4])) = [0]
	
.LABEL $label$72
	CALL $214($4, [0])
	*((($5 + [432]) + [8])) = *((($5 + [200]) + [8]))
	*($5 + [432]) = *($5 + [200])
	
.LABEL $label$33
	$14 = *($5 + [344])
	if ( ($14 == 0) ){ goto $label$32 }
	$15 = ($5 + [348])
	$8 = *($15)
	if ( ((int_32)$8 == (int_32)$14) ){ goto $label$75 }
	
.LOOP $label$76:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$77 }
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*(($9 + [24])))
	
.LABEL $label$78
	CALL _ZdlPv($9)
	
.LABEL $label$77
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$76 }
	$8 = *(($5 + [344]))
	goto $label$74 
	
.LABEL $label$75
	$8 = $14
	
.LABEL $label$74
	*($15) = $14
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$6 = *($0)
	*($5 + [288]) = [8587]
	*($5 + [292]) = CALL $223([8587])
	*($5 + [16]) = *($5 + [288])
	$2 = *(CALL $2(($5 + [296]), ($5 + [16])))
	$7 = *($0)
	*($5 + [272]) = [8594]
	*($5 + [276]) = CALL $223([8594])
	*($5 + [8]) = *($5 + [272])
	$8 = CALL $2(($5 + [280]), ($5 + [8]))
	$9 = *($5 + [432])
	$0 = ($9 & [1])
	*($5 + [264]) = ( *(($4 + [8])) ? $13 : $0 )
	*($5 + [268]) = ( *(($4 + [4])) ? uint_32($9 >> [1]) : $0 )
	*($5) = *($5 + [264])
	$9 = CALL $2(($5 + [216]), $5)
	*((($5 + [128]) + [16])) = $12
	*($5 + [136]) = $11
	*($5 + [128]) = $1
	*($5 + [320]) = $7
	*($5 + [152]) = *($9)
	*($5 + [328]) = *($8)
	*(($8 = CALL _Znwj([16]))) = $6
	*($8 + [8]) = $2
	*(($5 + [356])) = [0]
	$9 = ($8 + [16])
	*(($5 + [344])) = $9
	*(($5 + [340])) = $9
	*($5 + [336]) = $8
	*($5 + [348 align=4]) = (int_64)0
	CALL $23(($5 + [348]), [32])
	$8 = *((($5 + [320]) + [32]))
	$9 = *($5 + [348])
	*($5 + [204]) = $9
	*($5 + [200]) = $9
	*($5 + [208]) = $8
	*($5 + [416]) = ($5 + [200])
	*($5 + [424]) = ($5 + [128])
	CALL $24(($5 + [424]), ($5 + [416]))
	CALL $22(($5 + [200]), ($5 + [320]))
	$8 = *($5 + [200])
	CALL send_inline($8, (*($5 + [204]) - $8))
	$8 = *($5 + [200])
	if ( ($8 == 0) ){ goto $label$79 }
	*($5 + [204]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$79
	$8 = *($5 + [348])
	if ( ($8 == 0) ){ goto $label$80 }
	*(($5 + [352])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$80
	$8 = *($5 + [336])
	if ( ($8 == 0) ){ goto $label$81 }
	*(($5 + [340])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$81
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$31
	if ( ((*($5 + [360]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$30
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$12
	if ( ((*($5 + [376]) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$82
	$4 = *($5 + [392])
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$10 }
	$9 = *($5 + [396])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$84 }
	
.LOOP $label$85:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$86
	$9 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$85 }
	$8 = *($5 + [392])
	goto $label$83 
	
.LABEL $label$84
	$8 = $4
	
.LABEL $label$83
	*($5 + [396]) = $4
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$global$0 = ($5 + [448])
	return (unreachable)
	
.LABEL $label$9
	CALL $209(($5 + [128]))
	(unreachable)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $226($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $18(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $19(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($5 = (($4 + [32]) + [8]))) = *(($2 + [8]))
	*($4 + [32]) = *($2)
	$2 = CALL $210(($4 + [16]), $3)
	*(($4 + [8])) = *($5)
	*($4) = *($4 + [32])
	CALL $37($0, $1, $4, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [32])) = $2
	*($1 + [24]) = (int_64)0
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [48])) = $2
	*($1 + [40]) = (int_64)0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $210(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $210(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [16])) = $2
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$4 = *($0 + [8])
	*($1 + [56]) = *($4)
	*(($1 + [64])) = *(($4 + [8]))
	*($1 + [72]) = (int_64)1
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([160])
	CALL $188($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [152])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $218 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [32])) = $2
	*($1 + [24]) = (int_64)0
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [48])) = $2
	*($1 + [40]) = (int_64)0
}

void .FUNC $180 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	CALL $185($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [16])) = $2
	*($1 + [8]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [32])) = $2
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [16])) = $2
	*($1 + [8]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [32])) = $2
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $40($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [112])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $40($0, ($1 + [116]))
	*($2 + [8]) = *($1 + [128])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = *(*($0))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [32])) = $2
	*($1 + [24]) = (int_64)0
	$4 = *($0 + [4])
	$3 = *($4)
	$5 = *($4 + [8])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)$5), [9276])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($3 - *($6))) > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9346])
	*(($1 + [48])) = $5
	*($1 + [40]) = $3
}

void .FUNC $29 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [352])
	$global$0 = $2
	*($2 + [344]) = $1
	*(($2 + [336])) = [0]
	*($2 + [320]) = (int_64)-1
	*($2 + [340]) = [0]
	$1 = *($0)
	*($2 + [304]) = $1
	*($2 + [312]) = $1
	*($2 + [328]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $46(($2 + [304]), $3)
	CALL eosio_assert(((int_32)*($3 + [148]) == (int_32)($2 + [304])), [8890])
	*($2 + [300]) = $3
	*($2 + [296]) = ($2 + [304])
	goto $label$1 
	
.LABEL $label$2
	*($2 + [300]) = [0]
	*($2 + [296]) = ($2 + [304])
	CALL eosio_assert([0], [9126])
	$3 = *($2 + [300])
	
.LABEL $label$1
	*($2 + [288]) = *(($3 + [24]))
	$1 = CALL current_time()
	if ( ((uint_64)*(*($2 + [300]) + [96]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$13 }
	$1 = CALL current_time()
	if ( ((uint_64)*(*($2 + [300]) + [104]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$12 }
	$1 = CALL current_time()
	$3 = *($2 + [300])
	if ( ((uint_64)*($3 + [104]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$13 }
	if ( ((int_64)*($3 + [88]) == (int_64)0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = CALL current_time()
	$3 = *($2 + [300])
	if ( ((uint_64)*($3 + [104]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$14 }
	if ( *($3 + [144]) ){ goto $label$14 }
	CALL $55($0, ($2 + [296]), ($2 + [304]))
	
.LABEL $label$14
	*((($2 + [248]) + [32])) = [0]
	*($2 + [264]) = (int_64)-1
	*($2 + [272]) = (int_64)0
	$4 = *($0)
	*($2 + [248]) = $4
	$1 = *($2 + [344])
	*($2 + [256]) = $1
	*((($2 + [208]) + [32])) = [0]
	*($2 + [216]) = $1
	*($2 + [208]) = $4
	*($2 + [224]) = (int_64)-1
	*($2 + [232]) = (int_64)0
	$3 = CALL db_find_i64($4, $1, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $47(($2 + [248]), $3)
	CALL eosio_assert(((int_32)*($3 + [132]) == (int_32)($2 + [248])), [8890])
	*($2 + [204]) = $3
	*($2 + [200]) = ($2 + [248])
	$5 = (($2 + [200]) | [4])
	goto $label$10 
	
.LABEL $label$12
	*((($2 + [248]) + [32])) = [0]
	*($2 + [264]) = (int_64)-1
	*($2 + [272]) = (int_64)0
	$4 = *($0)
	*($2 + [248]) = $4
	$1 = *($2 + [344])
	*($2 + [256]) = $1
	*((($2 + [208]) + [32])) = [0]
	*($2 + [216]) = $1
	*($2 + [208]) = $4
	*($2 + [224]) = (int_64)-1
	*($2 + [232]) = (int_64)0
	$3 = CALL db_find_i64($4, $1, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $47(($2 + [248]), $3)
	CALL eosio_assert(((int_32)*($3 + [132]) == (int_32)($2 + [248])), [8890])
	*($2 + [204]) = $3
	*($2 + [200]) = ($2 + [248])
	$5 = (($2 + [200]) | [4])
	goto $label$8 
	
.LABEL $label$11
	*($2 + [204]) = [0]
	*($2 + [200]) = ($2 + [248])
	CALL eosio_assert([0], [9140])
	$5 = (($2 + [200]) | [4])
	
.LABEL $label$10
	$1 = *($2 + [344])
	*($2 + [104]) = $1
	$7 = *(($2 + [236]))
	$6 = *(($2 + [232]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$18:
	$3 = ($7 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$17 }
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)($2 + [208])), [8890])
	*($2 + [196]) = $8
	*($2 + [192]) = ($2 + [208])
	goto $label$15 
	
.LABEL $label$16
	$3 = CALL db_find_i64(*($2 + [208]), *(($2 + [216])), (int_64)7035936280380030976, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$19 }
	$8 = CALL $48(($2 + [208]), $3)
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)($2 + [208])), [8890])
	*($2 + [196]) = $8
	*($2 + [192]) = ($2 + [208])
	goto $label$15 
	
.LABEL $label$19
	*($2 + [196]) = [0]
	*($2 + [192]) = ($2 + [208])
	$1 = *($0)
	*($2 + [84]) = ($2 + [288])
	*($2 + [80]) = ($2 + [104])
	CALL $49(($2 + [176]), ($2 + [208]), $1, ($2 + [80]))
	$1 = *($2 + [176])
	*($2 + [192]) = $1
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))
	
.LABEL $label$15
	CALL $50($0, *($2 + [344]), *($8 + [8]), *(*($2 + [300]) + [8]), ($2 + [288]), ($2 + [200]), ($2 + [248]), ($2 + [192]), ($2 + [208]))
	$3 = *($5)
	$1 = *(($3 + [48]))
	*(($7 = (($2 + [176]) + [8]))) = $1
	*($2 + [176]) = *($3 + [40])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($3 + [32]))), [9598])
	$1 = ((int_64)*($2 + [176]) + (int_64)*($3 + [24]))
	*($2 + [176]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9660])
	$3 = *($2 + [204])
	$1 = *($0)
	*($2 + [104]) = ($2 + [288])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9407])
	CALL $177(($2 + [248]), $3, $1, ($2 + [104]))
	*((($2 + [40]) + [8])) = [0]
	*((($2 + [56]) + [8])) = *($7)
	*($2 + [40]) = (int_64)0
	*($2 + [56]) = *($2 + [176])
	$1 = *($2 + [344])
	$3 = CALL $223([9994])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$22 }
	*($2 + [40]) = ($3 << [1])
	$7 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$8 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2 + [40]) = ($8 | [1])
	*($2 + [48]) = $7
	*($2 + [44]) = $3
	
.LABEL $label$21
	CALL memcpy($7, [9994], $3)
	
.LABEL $label$20
	*(($7 + $3)) = [0]
	*((($2 + [24]) + [8])) = *((($2 + [56]) + [8]))
	*($2 + [24]) = *($2 + [56])
	CALL $79($0, $1, ($2 + [24]), ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($2 + [48]))
	
.LABEL $label$23
	*(($2 + [136])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$4 = *($0)
	*($2 + [104]) = $4
	$1 = *($2 + [344])
	*($2 + [112]) = $1
	$3 = CALL db_find_i64($4, $1, (int_64)3774958338810839040, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$26 }
	$3 = CALL $86(($2 + [104]), $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)($2 + [104])), [8890])
	*($2 + [100]) = $3
	*($2 + [96]) = ($2 + [104])
	$1 = *($0)
	*($2 + [84]) = ($2 + [176])
	*($2 + [80]) = ($2 + [96])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9407])
	CALL $178(($2 + [104]), $3, $1, ($2 + [80]))
	$8 = *($2 + [128])
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	*($2 + [100]) = [0]
	*($2 + [96]) = ($2 + [104])
	$1 = *($0)
	*($2 + [84]) = ($2 + [288])
	*($2 + [80]) = ($2 + [344])
	*($2 + [88]) = ($2 + [176])
	CALL $179(($2 + [72]), ($2 + [104]), $1, ($2 + [80]))
	$8 = *($2 + [128])
	if ( ($8 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$0 = ($2 + [132])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	CALL _ZdlPv($7)
	
.LABEL $label$30
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($2 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $8
	
.LABEL $label$27
	*($0) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$24
	$8 = *($2 + [232])
	if ( ($8 == 0) ){ goto $label$31 }
	$0 = ($2 + [236])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	CALL _ZdlPv($7)
	
.LABEL $label$35
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($2 + [232]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $8
	
.LABEL $label$32
	*($0) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$8 = *($2 + [272])
	if ( ($8 == 0) ){ goto $label$7 }
	$0 = ($2 + [276])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$39 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$40
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$41
	CALL _ZdlPv($3)
	
.LABEL $label$39
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$38 }
	$3 = *(($2 + [272]))
	goto $label$36 
	
.LABEL $label$37
	$3 = $8
	
.LABEL $label$36
	*($0) = $8
	CALL _ZdlPv($3)
	$8 = *($2 + [328])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	*($2 + [204]) = [0]
	*($2 + [200]) = ($2 + [248])
	CALL eosio_assert([0], [9140])
	$5 = (($2 + [200]) | [4])
	
.LABEL $label$8
	$1 = *($2 + [344])
	*($2 + [104]) = $1
	$7 = *(($2 + [236]))
	$6 = *(($2 + [232]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$43 }
	
.LOOP $label$45:
	$3 = ($7 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$44 }
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$43 }
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)($2 + [208])), [8890])
	*($2 + [196]) = $8
	*($2 + [192]) = ($2 + [208])
	goto $label$42 
	
.LABEL $label$43
	$3 = CALL db_find_i64(*($2 + [208]), *(($2 + [216])), (int_64)7035936280380030976, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$46 }
	$8 = CALL $48(($2 + [208]), $3)
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)($2 + [208])), [8890])
	*($2 + [196]) = $8
	*($2 + [192]) = ($2 + [208])
	goto $label$42 
	
.LABEL $label$46
	*($2 + [196]) = [0]
	*($2 + [192]) = ($2 + [208])
	$1 = *($0)
	*($2 + [84]) = ($2 + [288])
	*($2 + [80]) = ($2 + [104])
	CALL $49(($2 + [176]), ($2 + [208]), $1, ($2 + [80]))
	$1 = *($2 + [176])
	*($2 + [192]) = $1
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))
	
.LABEL $label$42
	CALL $50($0, *($2 + [344]), *($8 + [8]), *(*($2 + [300]) + [8]), ($2 + [288]), ($2 + [200]), ($2 + [248]), ($2 + [192]), ($2 + [208]))
	$3 = *($5)
	$1 = *(($3 + [48]))
	*(($7 = (($2 + [176]) + [8]))) = $1
	*($2 + [176]) = *($3 + [40])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($3 + [32]))), [9598])
	$1 = ((int_64)*($2 + [176]) + (int_64)*($3 + [24]))
	*($2 + [176]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9660])
	$3 = *($2 + [204])
	$1 = *($0)
	*($2 + [104]) = ($2 + [288])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9407])
	CALL $180(($2 + [248]), $3, $1, ($2 + [104]))
	*((($2 + [144]) + [8])) = [0]
	*((($2 + [160]) + [8])) = *($7)
	*($2 + [144]) = (int_64)0
	*($2 + [160]) = *($2 + [176])
	$1 = *($2 + [344])
	$3 = CALL $223([9994])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$49 }
	*($2 + [144]) = ($3 << [1])
	$7 = (($2 + [144]) | [1])
	if ( $3 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$8 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2 + [144]) = ($8 | [1])
	*($2 + [152]) = $7
	*($2 + [148]) = $3
	
.LABEL $label$48
	CALL memcpy($7, [9994], $3)
	
.LABEL $label$47
	*(($7 + $3)) = [0]
	*((($2 + [8]) + [8])) = *((($2 + [160]) + [8]))
	*($2 + [8]) = *($2 + [160])
	CALL $79($0, $1, ($2 + [8]), ($2 + [144]))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($2 + [152]))
	
.LABEL $label$50
	*(($2 + [136])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$4 = *($0)
	*($2 + [104]) = $4
	$1 = *($2 + [344])
	*($2 + [112]) = $1
	$3 = CALL db_find_i64($4, $1, (int_64)3774958338810839040, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$53 }
	$3 = CALL $86(($2 + [104]), $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)($2 + [104])), [8890])
	*($2 + [100]) = $3
	*($2 + [96]) = ($2 + [104])
	$1 = *($0)
	*($2 + [84]) = ($2 + [176])
	*($2 + [80]) = ($2 + [96])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9407])
	CALL $181(($2 + [104]), $3, $1, ($2 + [80]))
	$8 = *($2 + [128])
	if ( $8 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	*($2 + [100]) = [0]
	*($2 + [96]) = ($2 + [104])
	$1 = *($0)
	*($2 + [84]) = ($2 + [288])
	*($2 + [80]) = ($2 + [344])
	*($2 + [88]) = ($2 + [176])
	CALL $182(($2 + [72]), ($2 + [104]), $1, ($2 + [80]))
	$8 = *($2 + [128])
	if ( ($8 == 0) ){ goto $label$51 }
	
.LABEL $label$52
	$0 = ($2 + [132])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$55 }
	
.LOOP $label$56:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$57 }
	CALL _ZdlPv($7)
	
.LABEL $label$57
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$56 }
	$3 = *(($2 + [128]))
	goto $label$54 
	
.LABEL $label$55
	$3 = $8
	
.LABEL $label$54
	*($0) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$51
	$8 = *($2 + [232])
	if ( ($8 == 0) ){ goto $label$58 }
	$0 = ($2 + [236])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$60 }
	
.LOOP $label$61:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$62 }
	CALL _ZdlPv($7)
	
.LABEL $label$62
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$61 }
	$3 = *(($2 + [232]))
	goto $label$59 
	
.LABEL $label$60
	$3 = $8
	
.LABEL $label$59
	*($0) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$58
	$8 = *($2 + [272])
	if ( ($8 == 0) ){ goto $label$7 }
	$0 = ($2 + [276])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$64 }
	
.LOOP $label$65:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$66 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$67
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$68
	CALL _ZdlPv($3)
	
.LABEL $label$66
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$65 }
	$3 = *(($2 + [272]))
	goto $label$63 
	
.LABEL $label$64
	$3 = $8
	
.LABEL $label$63
	*($0) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$8 = *($2 + [328])
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$0 = ($2 + [332])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$70 }
	
.LOOP $label$71:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$72 }
	CALL _ZdlPv($7)
	
.LABEL $label$72
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$71 }
	$3 = *(($2 + [328]))
	goto $label$69 
	
.LABEL $label$70
	$3 = $8
	
.LABEL $label$69
	*($0) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$global$0 = ($2 + [352])
	return (unreachable)
	
.LABEL $label$4
	CALL $209(($2 + [40]))
	
.LABEL $label$3
	CALL $209(($2 + [144]))
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [384])
	$global$0 = $4
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$1 }
	CALL eosio_assert([0], [9109])
	
.LABEL $label$1
	*(($4 + [376])) = [0]
	*($4 + [360]) = (int_64)-1
	*($4 + [380]) = [0]
	$5 = *($0)
	*($4 + [344]) = $5
	*($4 + [352]) = $5
	*($4 + [368]) = (int_64)0
	$6 = CALL db_find_i64($5, $5, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $46(($4 + [344]), $6)
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)($4 + [344])), [8890])
	*($4 + [340]) = $6
	*($4 + [336]) = ($4 + [344])
	goto $label$2 
	
.LABEL $label$3
	*($4 + [340]) = [0]
	*($4 + [336]) = ($4 + [344])
	CALL eosio_assert([0], [9126])
	$6 = *($4 + [340])
	
.LABEL $label$2
	$5 = *(($6 + [24]))
	*($4 + [328]) = $5
	$5 = ((int_64)$5 & (int_64)255)
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$6 }
	$7 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$5 }
	$5 = (int_64)1
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9019])
	$7 = (int_64)-1
	
.LABEL $label$5
	$5 = (int_64)1
	
.LOOP $label$7:
	$5 = ((int_64)$5 * (int_64)10)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$7 }
	
.LABEL $label$4
	*((($4 + [288]) + [32])) = [0]
	*($4 + [296]) = $1
	*($4 + [304]) = (int_64)-1
	*($4 + [312]) = (int_64)0
	$7 = *($0)
	*($4 + [288]) = $7
	*((($4 + [248]) + [32])) = [0]
	*($4 + [256]) = $1
	*($4 + [248]) = $7
	*($4 + [264]) = (int_64)-1
	*($4 + [272]) = (int_64)0
	$6 = CALL db_find_i64($7, $1, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $47(($4 + [288]), $6)
	CALL eosio_assert(((int_32)*($6 + [132]) == (int_32)($4 + [288])), [8890])
	*($4 + [244]) = $6
	*($4 + [240]) = ($4 + [288])
	$8 = (($4 + [240]) | [4])
	goto $label$8 
	
.LABEL $label$9
	*($4 + [244]) = [0]
	*($4 + [240]) = ($4 + [288])
	CALL eosio_assert([0], [9140])
	$8 = (($4 + [240]) | [4])
	
.LABEL $label$8
	$9 = ((int_64)$5 * (int_64)10000)
	*($4 + [144]) = $1
	$11 = *(($4 + [276]))
	$10 = *(($4 + [272]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$11 }
	
.LOOP $label$13:
	$6 = ($11 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$12 }
	$11 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($12 + [168]) == (int_32)($4 + [248])), [8890])
	*($4 + [236]) = $12
	*($4 + [232]) = ($4 + [248])
	goto $label$10 
	
.LABEL $label$11
	$6 = CALL db_find_i64(*($4 + [248]), *(($4 + [256])), (int_64)7035936280380030976, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $48(($4 + [248]), $6)
	CALL eosio_assert(((int_32)*($12 + [168]) == (int_32)($4 + [248])), [8890])
	*($4 + [236]) = $12
	*($4 + [232]) = ($4 + [248])
	goto $label$10 
	
.LABEL $label$14
	*($4 + [236]) = [0]
	*($4 + [232]) = ($4 + [248])
	$5 = *($0)
	*($4 + [204]) = ($4 + [328])
	*($4 + [200]) = ($4 + [144])
	CALL $49(($4 + [216]), ($4 + [248]), $5, ($4 + [200]))
	$5 = *($4 + [216])
	*($4 + [232]) = $5
	$12 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32))
	
.LABEL $label$10
	CALL $50($0, $1, *($12 + [8]), *(*($4 + [340]) + [8]), ($4 + [328]), ($4 + [240]), ($4 + [288]), ($4 + [232]), ($4 + [248]))
	$6 = *($8)
	$5 = *($6 + [40])
	$13 = *(($6 + [48]))
	CALL eosio_assert(((int_64)*(($6 + [32])) == (int_64)$13), [9598])
	$14 = ((int_64)$5 + (int_64)*($6 + [24]))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [9660])
	$15 = *($4 + [328])
	$16 = ((int_64)$9 * (int_64)$2)
	$10 = (uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($10, [8821])
	$5 = (uint_64)$15 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$5 = $7
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$19 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$11 = [0]
	
.LABEL $label$15
	CALL eosio_assert($11, [8870])
	CALL eosio_assert(((int_64)$13 == (int_64)$15), [9050])
	if ( ((int_64)$14 >= (int_64)$16) ){ goto $label$20 }
	CALL eosio_assert([0], [9172])
	
.LABEL $label$20
	$6 = *($8)
	$5 = *(($6 + [48]))
	*(($4 + [224])) = $5
	*($4 + [216]) = *($6 + [40])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($6 + [32]))), [9598])
	$5 = ((int_64)*($4 + [216]) + (int_64)*($6 + [24]))
	*($4 + [216]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9660])
	*($4 + [200]) = $16
	*($4 + [208]) = *($4 + [328])
	CALL eosio_assert($10, [8821])
	$5 = (uint_64)*($4 + [208]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$5 = $7
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$25 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$11 = [0]
	
.LABEL $label$21
	CALL eosio_assert($11, [8870])
	$6 = *($4 + [244])
	$5 = *($0)
	*($4 + [148]) = ($4 + [216])
	*($4 + [144]) = ($4 + [328])
	*($4 + [152]) = ($4 + [200])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $51(($4 + [288]), $6, $5, ($4 + [144]))
	$14 = *(($4 + [208]))
	$10 = (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($10, [8821])
	$5 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$5 = $7
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$30 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$11 = [0]
	
.LABEL $label$26
	CALL eosio_assert($11, [8870])
	$6 = ($4 + [208])
	CALL eosio_assert(((int_64)*($6) == (int_64)$14), [9050])
	if ( ((int_64)*($4 + [200]) >= (int_64)$9) ){ goto $label$31 }
	CALL eosio_assert([0], [9197])
	
.LABEL $label$31
	$14 = *($6)
	CALL eosio_assert($10, [8821])
	$5 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$5 = $7
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$36 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$11 = [0]
	
.LABEL $label$32
	CALL __multi3(($4 + [64]), $9, (int_64)$9 >> (int_64)63), (int_64)100, (int_64)0)
	CALL eosio_assert($11, [8870])
	$5 = *((($4 + [64]) + [8]))
	$7 = *($4 + [64])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [9702])
	CALL eosio_assert(((int_64)*((($4 + [200]) + [8])) == (int_64)$14), [9050])
	if ( ((int_64)*($4 + [200]) <= (int_64)$7) ){ goto $label$37 }
	CALL eosio_assert([0], [9212])
	
.LABEL $label$37
	if ( ((int_64)$3 == (int_64)$1) ){ goto $label$38 }
	CALL $52($0, $1, $3, ($4 + [208]))
	
.LABEL $label$38
	$5 = CALL current_time()
	if ( ((uint_64)*(*($4 + [340]) + [96]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$45 }
	$5 = CALL current_time()
	if ( ((uint_64)*(*($4 + [340]) + [104]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$44 }
	$5 = CALL current_time()
	$6 = *($4 + [340])
	if ( ((uint_64)*($6 + [104]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$45 }
	if ( ((int_64)*($6 + [88]) == (int_64)0) ){ goto $label$44 }
	
.LABEL $label$45
	*(($4 + [176])) = [0]
	*($4 + [152]) = $1
	*($4 + [160]) = (int_64)-1
	*($4 + [168]) = (int_64)0
	*($4 + [144]) = *($0)
	$10 = ($4 + [208])
	CALL $53(($4 + [136]), $0, $1, $10, ($4 + [144]))
	$6 = *($4 + [140])
	$5 = *($0)
	*($4 + [132]) = ($4 + [200])
	*($4 + [128]) = ($4 + [136])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $54(($4 + [144]), $6, $5, ($4 + [128]))
	$5 = CALL current_time()
	$6 = *($4 + [340])
	if ( ((uint_64)*($6 + [104]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$41 }
	if ( *($6 + [144]) ){ goto $label$41 }
	$9 = CALL $55($0, ($4 + [336]), ($4 + [344]))
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = *(($4 + [208]))
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)*($4 + [120]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$46 }
	goto $label$42 
	
.LABEL $label$47
	$5 = $7
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$48 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$46 }
	goto $label$42 
	
.LABEL $label$44
	$5 = *((($4 + [200]) + [8]))
	*((($4 + [184]) + [8])) = $5
	*(($4 + [8])) = $5
	$5 = *($4 + [200])
	*($4) = $5
	*($4 + [184]) = $5
	CALL $56($0, $1, $4, $2)
	$12 = *($4 + [272])
	if ( $12 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$43
	$11 = [0]
	
.LABEL $label$42
	CALL eosio_assert($11, [8870])
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = *(($4 + [208]))
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)*($4 + [104]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$5 = $7
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$53 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$11 = [0]
	
.LABEL $label$49
	CALL eosio_assert($11, [8870])
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = *(($4 + [208]))
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)*($4 + [88]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$5 = $7
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$5 = $7
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$58 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$11 = [0]
	
.LABEL $label$54
	CALL eosio_assert($11, [8870])
	*((($4 + [48]) + [8])) = *((($4 + [112]) + [8]))
	*((($4 + [32]) + [8])) = *((($4 + [96]) + [8]))
	*((($4 + [16]) + [8])) = *((($4 + [80]) + [8]))
	*($4 + [48]) = *($4 + [112])
	*($4 + [32]) = *($4 + [96])
	*($4 + [16]) = *($4 + [80])
	CALL $57($0, $1, $9, ($4 + [48]), ($4 + [32]), (int_64)0, ($4 + [16]), (int_64)3, $10)
	
.LABEL $label$41
	$12 = *($4 + [168])
	if ( ($12 == 0) ){ goto $label$59 }
	$10 = ($4 + [172])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$61 }
	
.LOOP $label$62:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$63 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$64
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$65
	CALL _ZdlPv($6)
	
.LABEL $label$63
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$62 }
	$6 = *(($4 + [168]))
	goto $label$60 
	
.LABEL $label$61
	$6 = $12
	
.LABEL $label$60
	*($10) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$59
	$12 = *($4 + [272])
	if ( ($12 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	$10 = ($4 + [276])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$67 }
	
.LOOP $label$68:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$69 }
	CALL _ZdlPv($11)
	
.LABEL $label$69
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$68 }
	$6 = *(($4 + [272]))
	goto $label$66 
	
.LABEL $label$67
	$6 = $12
	
.LABEL $label$66
	*($10) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$39
	$12 = *($4 + [312])
	if ( ($12 == 0) ){ goto $label$70 }
	$10 = ($4 + [316])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$72 }
	
.LOOP $label$73:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$74 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$75
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$76
	CALL _ZdlPv($6)
	
.LABEL $label$74
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$73 }
	$6 = *(($4 + [312]))
	goto $label$71 
	
.LABEL $label$72
	$6 = $12
	
.LABEL $label$71
	*($10) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$70
	$12 = *($4 + [368])
	if ( ($12 == 0) ){ goto $label$77 }
	$10 = ($4 + [372])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$79 }
	
.LOOP $label$80:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$81 }
	CALL _ZdlPv($11)
	
.LABEL $label$81
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$80 }
	$6 = *(($4 + [368]))
	goto $label$78 
	
.LABEL $label$79
	$6 = $12
	
.LABEL $label$78
	*($10) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$77
	$global$0 = ($4 + [384])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $23($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9013])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9013])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9013])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $40(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ($3 + [1])
	$6 = ($1 + [1])
	$7 = [0]
	$9 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$3 }
	$10 = ($7 & [1])
	$7 = *($1)
	$7 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $10 )
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$2 }
	$11 = ( *($1 + [8]) ? $6 : $10 )
	$12 = ($11 + $7)
	$13 = ( *($3 + [8]) ? $5 : $9 )
	$10 = *($13)
	$9 = $11
	
.LOOP $label$4:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$2 }
	$7 = CALL $221($9, $10, $7)
	if ( ($7 == 0) ){ goto $label$2 }
	if ( (CALL $222($7, $13, $8) == 0) ){ goto $label$5 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$2 }
	$7 = ($7 - $11)
	if ( ((int_32)$7 == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = ($2 + [8])
	$15 = ($2 + [4])
	$10 = [0]
	
.LOOP $label$6:
	$9 = CALL $211($4, $1, $10, ($7 - $10), $1)
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)*($14)) ){ goto $label$8 }
	*($8) = *($4)
	$8 = ($4 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($15) = (*($15) + [12])
	*($4) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $39($2, $9)
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$7
	$11 = ($8 & [1])
	$8 = *($3)
	$8 = ( *(($3 + [4])) ? uint_32($8 >> [1]) : $11 )
	$10 = ($8 + $7)
	$9 = ($8 & [1])
	$8 = *($1)
	$13 = ( *(($1 + [4])) ? uint_32($8 >> [1]) : $9 )
	if ( ($13 <= $10) ){ goto $label$1 }
	$7 = $10
	if ( ($8 == 0) ){ goto $label$9 }
	$9 = ($16 + $10)
	$16 = ( *(($1 + [8])) ? $6 : $9 )
	$12 = ($16 + $13)
	$7 = ($12 - $9)
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$1 }
	$11 = ( *(($3 + [8])) ? $5 : $11 )
	$13 = *($11)
	
.LOOP $label$10:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $221($9, $13, $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $222($7, $11, $8) == 0) ){ goto $label$11 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$1 }
	$7 = ($7 - $16)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	$8 = *($1)
	if ( ((int_32)$10 == (int_32)( *(($1 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$12 }
	$8 = CALL $211($4, $1, $10, [-1], $1)
	$7 = *($2 + [4])
	if ( ((uint_32)$7 >= (uint_32)*($2 + [8])) ){ goto $label$13 }
	*($7) = *($4)
	*(($7 + [8])) = *(($4 + [8]))
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	*(($8 = ($2 + [4]))) = (*($8) + [12])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$13
	CALL $39($2, $8)
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$12
	$global$0 = ($4 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $218($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9013])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9013])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $45(CALL $44($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-7236991285547646976, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [8]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [8890])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $41($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-7236991285547646976, $6))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [8890])
	
.LABEL $label$2
	*($4 + [36]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $210($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $210(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $43($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $214($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $214($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $209($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [144]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $173(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $137(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [112]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$0 = CALL $26($0, ($1 + [116]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [128]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [112]) = (int_64)0
	*($0 + [152]) = (int_64)0
	*($0 + [168]) = $1
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*(($0 + [160])) = (int_64)0
	$1 = *($2)
	CALL $108(*($2 + [4]), $0)
	*($3 + [184]) = ($3 + [168])
	*($3 + [180]) = $3
	*($3 + [176]) = $3
	CALL $109(($3 + [176]), $0)
	$4 = *($0)
	*($0 + [172]) = CALL db_store_i64(*($1 + [8]), (int_64)7035936280380030976, *(*($2 + [8])), $4, $3, [168])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [192])
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [116]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [124])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [104])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [120])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [160])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [104]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [120]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [160]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9013])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1 + [8]) = (int_64)0
	*($1) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [24])) = $2
	*($1 + [16]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [8870])
	*(($1 + [56])) = $2
	*($1 + [48]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $5
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [8870])
	*(($1 + [72])) = $2
	*($1 + [64]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $5
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$25 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$6 = [0]
	
.LABEL $label$21
	CALL eosio_assert($6, [8870])
	*(($1 + [88])) = $2
	*($1 + [80]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$3 = $5
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$30 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$6 = [0]
	
.LABEL $label$26
	CALL eosio_assert($6, [8870])
	*(($1 + [104])) = $2
	*($1 + [96]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$3 = $5
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$35 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$6 = [0]
	
.LABEL $label$31
	CALL eosio_assert($6, [8870])
	*(($1 + [120])) = $2
	*($1 + [112]) = (int_64)0
	*($1 + [128]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$3 = $5
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$40 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$6 = [0]
	
.LABEL $label$36
	CALL eosio_assert($6, [8870])
	*(($1 + [160])) = $2
	*($1 + [152]) = (int_64)0
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $213($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $219 ()
{
	return [10144]
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [152]) = $1
	$5 = *($0)
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	$7 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [4])
	$7 = *($2 + [8])
	
.LABEL $label$1
	*($4 + [108]) = $6
	*($4 + [104]) = $7
	*($4 + [16]) = *($4 + [104])
	$6 = CALL $2(($4 + [40]), ($4 + [16]))
	*(($4 + [144])) = [0]
	*($4 + [112]) = $5
	*($4 + [128]) = (int_64)-1
	*($4 + [136]) = (int_64)0
	*($4 + [148]) = [0]
	*($4 + [120]) = *($6)
	*($4 + [96]) = ($4 + [112])
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$4 }
	$6 = uint_32($6 >> [1])
	$7 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$4
	$6 = *($2 + [4])
	$7 = *($2 + [8])
	
.LABEL $label$3
	*($4 + [84]) = $6
	*($4 + [80]) = $7
	*($4 + [8]) = *($4 + [80])
	$6 = CALL $2(($4 + [88]), ($4 + [8]))
	CALL $25(($4 + [40]), ($4 + [96]), $6)
	$7 = *($4 + [44])
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((int_64)*($6) != (int_64)*($7)) ){ goto $label$5 }
	CALL eosio_assert([0], [10098])
	$1 = *($4 + [152])
	
.LABEL $label$5
	*(($4 + [72])) = [0]
	*($4 + [48]) = $1
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [40]) = *($0)
	CALL $53(($4 + [88]), $0, $1, $3, ($4 + [40]))
	if ( (*(*($4 + [92]) + [128]) == 0) ){ goto $label$6 }
	CALL eosio_assert([0], [10117])
	
.LABEL $label$6
	$1 = *($0)
	*($4 + [36]) = $2
	*($4 + [32]) = ($4 + [152])
	CALL $198(($4 + [24]), ($4 + [112]), $1, ($4 + [32]))
	$1 = *($0)
	$0 = *($4 + [92])
	*($4 + [32]) = $2
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9407])
	CALL $199(($4 + [40]), $0, $1, ($4 + [32]))
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [68])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	if ( ((*($2 + [116]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [124])))
	
.LABEL $label$12
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$2 = *(($4 + [64]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$3 = *($4 + [136])
	if ( ($3 == 0) ){ goto $label$14 }
	$6 = ($4 + [140])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$19
	CALL _ZdlPv($0)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [136]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $3
	
.LABEL $label$15
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$global$0 = ($4 + [160])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $218($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $210(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $210(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [544])
	$global$0 = $4
	*($4 + [536]) = $1
	*(($4 + [528])) = [0]
	*($4 + [512]) = (int_64)-1
	*($4 + [532]) = [0]
	$1 = *($0)
	*($4 + [496]) = $1
	*($4 + [504]) = $1
	*($4 + [520]) = (int_64)0
	$5 = CALL db_find_i64($1, $1, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $46(($4 + [496]), $5)
	CALL eosio_assert(((int_32)*($5 + [148]) == (int_32)($4 + [496])), [8890])
	*($4 + [492]) = $5
	*($4 + [488]) = ($4 + [496])
	$6 = (($4 + [488]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($4 + [492]) = [0]
	*($4 + [488]) = ($4 + [496])
	CALL eosio_assert([0], [9126])
	$6 = (($4 + [488]) | [4])
	
.LABEL $label$1
	$1 = *($2 + [8])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$7 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$4 }
	$1 = (int_64)1
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [9019])
	$7 = (int_64)-1
	
.LABEL $label$4
	$1 = (int_64)1
	
.LOOP $label$6:
	$1 = ((int_64)$1 * (int_64)10)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$3
	$8 = ($2 + [8])
	$9 = *($2 + [8])
	$10 = ((int_64)$1 * (int_64)10000)
	$11 = (uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($11, [8821])
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $7
	$12 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$11 }
	$12 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	
.LABEL $label$7
	CALL eosio_assert($12, [8870])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$9), [9050])
	if ( ((int_64)*($2) >= (int_64)$10) ){ goto $label$12 }
	CALL eosio_assert([0], [9197])
	
.LABEL $label$12
	$1 = CALL current_time()
	if ( ((uint_64)*(*($6) + [96]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$21 }
	$1 = CALL current_time()
	$5 = *($6)
	if ( ((uint_64)*($5 + [104]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$20 }
	$1 = CALL current_time()
	$5 = *($6)
	if ( ((uint_64)*($5 + [104]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$21 }
	if ( ((int_64)*($5 + [88]) == (int_64)0) ){ goto $label$20 }
	
.LABEL $label$21
	$12 = [0]
	*(($4 + [480])) = [0]
	*($4 + [464]) = (int_64)-1
	*($4 + [472]) = (int_64)0
	*($4 + [448]) = *($0)
	$1 = *($4 + [536])
	*($4 + [456]) = $1
	CALL $53(($4 + [408]), $0, $1, $8, ($4 + [448]))
	$1 = *($0)
	$5 = *($4 + [412])
	*($4 + [372]) = $2
	*($4 + [368]) = ($4 + [408])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9407])
	CALL $191(($4 + [448]), $5, $1, ($4 + [368]))
	$1 = CALL current_time()
	$5 = *($6)
	if ( ((uint_64)*($5 + [104]) >= (uint_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$22 }
	if ( (*($5 + [144]) == 0) ){ goto $label$19 }
	
.LABEL $label$22
	*($4 + [128]) = (int_64)0
	$9 = *($5 + [8])
	$1 = *(($2 + [8]))
	*($4 + [136]) = $1
	$10 = *($4 + [536])
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	
.LOOP $label$25:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$1 = $7
	$13 = [1]
	$6 = $12
	$12 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$1 = $7
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$13 = ((int_32)$12 < (int_32)[6])
	$6 = ($12 + [1])
	$12 = $6
	if ( $13 ){ goto $label$27 }
	$13 = [1]
	$12 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$13 = [0]
	
.LABEL $label$23
	CALL eosio_assert($13, [8870])
	*($4 + [112]) = (int_64)0
	$1 = *(($2 + [8]))
	*($4 + [120]) = $1
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	
.LOOP $label$29:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$1 = $7
	$6 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$1 = $7
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$31 }
	$6 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$29 }
	
.LABEL $label$28
	CALL eosio_assert($6, [8870])
	$7 = *(($2 + [8]))
	*((($4 + [96]) + [8])) = $7
	$1 = *($2)
	*((($4 + [80]) + [8])) = *((($4 + [128]) + [8]))
	*((($4 + [64]) + [8])) = *((($4 + [112]) + [8]))
	*((($4 + [48]) + [8])) = $7
	*($4 + [96]) = $1
	*($4 + [80]) = *($4 + [128])
	*($4 + [64]) = *($4 + [112])
	*($4 + [48]) = $1
	CALL $57($0, $10, $9, ($4 + [80]), ($4 + [64]), (int_64)0, ($4 + [48]), (int_64)2, $8)
	$13 = *($4 + [472])
	if ( ($13 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$20
	*((($4 + [448]) + [32])) = [0]
	*($4 + [464]) = (int_64)-1
	*($4 + [472]) = (int_64)0
	$1 = *($0)
	*($4 + [448]) = $1
	$9 = *($4 + [536])
	*($4 + [456]) = $9
	*((($4 + [408]) + [32])) = [0]
	*($4 + [408]) = $1
	*($4 + [424]) = (int_64)-1
	*($4 + [432]) = (int_64)0
	$7 = *($5 + [8])
	*($4 + [416]) = $7
	*((($4 + [368]) + [32])) = [0]
	*($4 + [376]) = $9
	*($4 + [368]) = $1
	*($4 + [384]) = (int_64)-1
	*($4 + [392]) = (int_64)0
	*($4 + [216]) = $7
	$5 = CALL db_find_i64($1, $7, (int_64)-7948565157351784448, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	$5 = CALL $61(($4 + [408]), $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($4 + [408])), [8890])
	*($4 + [364]) = $5
	*($4 + [360]) = ($4 + [408])
	$14 = (($4 + [360]) | [4])
	goto $label$17 
	
.LABEL $label$19
	$9 = CALL $55($0, ($4 + [488]), ($4 + [496]))
	*($4 + [176]) = (int_64)0
	$1 = *(($2 + [8]))
	*($4 + [184]) = $1
	$10 = *($4 + [536])
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$1 = $7
	$12 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$1 = $7
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$36 }
	$12 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$12 = [0]
	
.LABEL $label$32
	CALL eosio_assert($12, [8870])
	*($4 + [160]) = (int_64)0
	$1 = *(($2 + [8]))
	*($4 + [168]) = $1
	CALL eosio_assert([1], [8821])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$1 = $7
	$12 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$1 = $7
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$41 }
	$12 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$12 = [0]
	
.LABEL $label$37
	CALL eosio_assert($12, [8870])
	$7 = *(($2 + [8]))
	*((($4 + [144]) + [8])) = $7
	$1 = *($2)
	*((($4 + [32]) + [8])) = *((($4 + [176]) + [8]))
	*((($4 + [16]) + [8])) = *((($4 + [160]) + [8]))
	*(($4 + [8])) = $7
	*($4 + [144]) = $1
	*($4 + [32]) = *($4 + [176])
	*($4 + [16]) = *($4 + [160])
	*($4) = $1
	CALL $57($0, $10, $9, ($4 + [32]), ($4 + [16]), (int_64)0, $4, (int_64)1, $8)
	$13 = *($4 + [472])
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$18
	*($4 + [364]) = [0]
	*($4 + [360]) = ($4 + [408])
	$1 = *($0)
	*($4 + [292]) = $8
	*($4 + [288]) = ($4 + [216])
	CALL $62(($4 + [320]), ($4 + [408]), $1, ($4 + [288]))
	*($4 + [360]) = *($4 + [320])
	$14 = (($4 + [360]) | [4])
	
.LABEL $label$17
	$1 = *(*($6) + [8])
	*($4 + [216]) = $1
	$12 = *(($4 + [396]))
	$13 = *(($4 + [392]))
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$43 }
	
.LOOP $label$45:
	$5 = ($12 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$44 }
	$12 = $5
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$43 }
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($4 + [368])), [8890])
	goto $label$42 
	
.LABEL $label$43
	$5 = CALL db_find_i64(*($4 + [368]), *(($4 + [376])), (int_64)-7948560026672185344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$46 }
	$6 = CALL $59(($4 + [368]), $5)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($4 + [368])), [8890])
	goto $label$42 
	
.LABEL $label$46
	$1 = *($0)
	*($4 + [292]) = $8
	*($4 + [288]) = ($4 + [216])
	CALL $60(($4 + [320]), ($4 + [368]), $1, ($4 + [288]))
	$6 = *($4 + [324])
	
.LABEL $label$42
	CALL $53(($4 + [352]), $0, *($4 + [536]), $8, ($4 + [448]))
	$5 = *($14)
	*($4 + [320]) = *($5 + [48])
	*($4 + [328]) = *($5 + [56])
	*($4 + [336]) = *($5 + [64])
	*($4 + [344]) = *($5 + [72])
	*($4 + [288]) = *($6 + [40])
	*($4 + [296]) = *($6 + [48])
	*($4 + [304]) = *($6 + [56])
	*($4 + [312]) = *($6 + [64])
	$9 = *(($2 + [8]))
	CALL eosio_assert($11, [8821])
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$1 = $7
	$12 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$1 = $7
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$51 }
	$12 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$12 = [0]
	
.LABEL $label$47
	CALL eosio_assert($12, [8870])
	CALL eosio_assert(((int_64)$10 != (int_64)0), [9367])
	$5 = ($2 + [8])
	CALL eosio_assert(((int_64)*($5) == (int_64)$9), [9050])
	$1 = *($2)
	*($4 + [280]) = *($5)
	$9 = ((int_64)$1 / (int_64)$10)
	$1 = ((int_64)$9 * (int_64)$10)
	*($4 + [272]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8821])
	$1 = (uint_64)*($4 + [280]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$1 = $7
	$12 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$1 = $7
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$56 }
	$12 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$12 = [0]
	
.LABEL $label$52
	CALL eosio_assert($12, [8870])
	$1 = *(($2 + [8]))
	*((($4 + [256]) + [8])) = $1
	*($4 + [256]) = *($2)
	CALL eosio_assert(((int_64)$1 == (int_64)*((($4 + [272]) + [8]))), [9276])
	$1 = (int_64)
	*($4 + [256]) = $1(*($4 + [256]) - *($4 + [272])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9324])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9346])
	if ( (CALL $217($3, [10064]) == 0) ){ goto $label$61 }
	if ( (CALL $217($3, [10066]) == 0) ){ goto $label$60 }
	if ( (CALL $217($3, [10068]) == 0) ){ goto $label$59 }
	if ( (CALL $217($3, [10070]) == 0) ){ goto $label$58 }
	CALL eosio_assert([0], [10072])
	goto $label$57 
	
.LABEL $label$61
	*($4 + [320]) = ((int_64)*($4 + [320]) + (int_64)$9)
	*($4 + [288]) = ((int_64)*($4 + [288]) + (int_64)$9)
	goto $label$57 
	
.LABEL $label$60
	*($4 + [328]) = ((int_64)*($4 + [328]) + (int_64)$9)
	*($4 + [296]) = ((int_64)*($4 + [296]) + (int_64)$9)
	goto $label$57 
	
.LABEL $label$59
	*(($5 = (($4 + [320]) + [16]))) = ((int_64)*($5) + (int_64)$9)
	*(($5 = (($4 + [288]) + [16]))) = ((int_64)*($5) + (int_64)$9)
	goto $label$57 
	
.LABEL $label$58
	*(($5 = (($4 + [320]) + [24]))) = ((int_64)*($5) + (int_64)$9)
	*(($5 = (($4 + [288]) + [24]))) = ((int_64)*($5) + (int_64)$9)
	
.LABEL $label$57
	$5 = *($4 + [356])
	$1 = *($0)
	*($4 + [220]) = ($4 + [256])
	*($4 + [216]) = ($4 + [352])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9407])
	CALL $192(($4 + [448]), $5, $1, ($4 + [216]))
	$5 = *($4 + [364])
	$1 = *($0)
	*($4 + [220]) = ($4 + [272])
	*($4 + [216]) = ($4 + [360])
	*($4 + [224]) = ($4 + [320])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9407])
	CALL $193(($4 + [408]), $5, $1, ($4 + [216]))
	$1 = *($0)
	*($4 + [216]) = ($4 + [288])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $194(($4 + [368]), $6, $1, ($4 + [216]))
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)-1
	*($4 + [240]) = (int_64)0
	$7 = *($0)
	*($4 + [216]) = $7
	$1 = *($4 + [536])
	*($4 + [224]) = $1
	$5 = CALL db_find_i64($7, $1, (int_64)3774958338810839040, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$64 }
	$5 = CALL $86(($4 + [216]), $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($4 + [216])), [8890])
	*($4 + [212]) = $5
	*($4 + [208]) = ($4 + [216])
	$1 = *($0)
	*($4 + [204]) = ($4 + [272])
	*($4 + [200]) = ($4 + [208])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9407])
	CALL $195(($4 + [216]), $5, $1, ($4 + [200]))
	$13 = *($4 + [240])
	if ( $13 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	*($4 + [212]) = [0]
	*($4 + [208]) = ($4 + [216])
	$1 = *($0)
	*($4 + [204]) = ($4 + [272])
	*($4 + [200]) = ($4 + [536])
	CALL $196(($4 + [192]), ($4 + [216]), $1, ($4 + [200]))
	$13 = *($4 + [240])
	if ( ($13 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$6 = ($4 + [244])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$66 }
	
.LOOP $label$67:
	$5 = ($5 + [-24])
	$12 = *($5)
	*($5) = [0]
	if ( ($12 == 0) ){ goto $label$68 }
	CALL _ZdlPv($12)
	
.LABEL $label$68
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$67 }
	$5 = *(($4 + [240]))
	goto $label$65 
	
.LABEL $label$66
	$5 = $13
	
.LABEL $label$65
	*($6) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$62
	$13 = *($4 + [392])
	if ( ($13 == 0) ){ goto $label$69 }
	$6 = ($4 + [396])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$71 }
	
.LOOP $label$72:
	$5 = ($5 + [-24])
	$12 = *($5)
	*($5) = [0]
	if ( ($12 == 0) ){ goto $label$73 }
	CALL _ZdlPv($12)
	
.LABEL $label$73
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$72 }
	$5 = *(($4 + [392]))
	goto $label$70 
	
.LABEL $label$71
	$5 = $13
	
.LABEL $label$70
	*($6) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$69
	$13 = *($4 + [432])
	if ( ($13 == 0) ){ goto $label$74 }
	$6 = ($4 + [436])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$76 }
	
.LOOP $label$77:
	$5 = ($5 + [-24])
	$12 = *($5)
	*($5) = [0]
	if ( ($12 == 0) ){ goto $label$78 }
	CALL _ZdlPv($12)
	
.LABEL $label$78
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$77 }
	$5 = *(($4 + [432]))
	goto $label$75 
	
.LABEL $label$76
	$5 = $13
	
.LABEL $label$75
	*($6) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$74
	$13 = *($4 + [472])
	if ( ($13 == 0) ){ goto $label$16 }
	$6 = ($4 + [476])
	$12 = *($6)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$80 }
	
.LOOP $label$81:
	$12 = ($12 + [-24])
	$5 = *($12)
	*($12) = [0]
	if ( ($5 == 0) ){ goto $label$82 }
	if ( ((*($5 + [116]) & [1]) == 0) ){ goto $label$83 }
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$83
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$84
	CALL _ZdlPv($5)
	
.LABEL $label$82
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$81 }
	$5 = *(($4 + [472]))
	goto $label$79 
	
.LABEL $label$80
	$5 = $13
	
.LABEL $label$79
	*($6) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$13 = *($4 + [520])
	if ( ($13 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = ($4 + [476])
	$12 = *($6)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$86 }
	
.LOOP $label$87:
	$12 = ($12 + [-24])
	$5 = *($12)
	*($12) = [0]
	if ( ($5 == 0) ){ goto $label$88 }
	if ( ((*($5 + [116]) & [1]) == 0) ){ goto $label$89 }
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$89
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$90 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$90
	CALL _ZdlPv($5)
	
.LABEL $label$88
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$87 }
	$5 = *(($4 + [472]))
	goto $label$85 
	
.LABEL $label$86
	$5 = $13
	
.LABEL $label$85
	*($6) = $13
	CALL _ZdlPv($5)
	$13 = *($4 + [520])
	if ( $13 ){ goto $label$13 }
	
.LABEL $label$14
	$global$0 = ($4 + [544])
	return 
	
.LABEL $label$13
	$6 = ($4 + [524])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$92 }
	
.LOOP $label$93:
	$5 = ($5 + [-24])
	$12 = *($5)
	*($5) = [0]
	if ( ($12 == 0) ){ goto $label$94 }
	CALL _ZdlPv($12)
	
.LABEL $label$94
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$93 }
	$5 = *(($4 + [520]))
	goto $label$91 
	
.LABEL $label$92
	$5 = $13
	
.LABEL $label$91
	*($6) = $13
	CALL _ZdlPv($5)
	$global$0 = ($4 + [544])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8968])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [352])
	$global$0 = $4
	*(($4 + [344])) = [0]
	*($4 + [328]) = (int_64)-1
	*($4 + [348]) = [0]
	$5 = *($0)
	*($4 + [312]) = $5
	*($4 + [320]) = $5
	*($4 + [336]) = (int_64)0
	$6 = CALL db_find_i64($5, $5, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $46(($4 + [312]), $6)
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)($4 + [312])), [8890])
	*($4 + [308]) = $6
	*($4 + [304]) = ($4 + [312])
	$7 = (($4 + [304]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($4 + [308]) = [0]
	*($4 + [304]) = ($4 + [312])
	CALL eosio_assert([0], [9126])
	$7 = (($4 + [304]) | [4])
	
.LABEL $label$1
	$5 = *($2 + [8])
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$5 }
	$8 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)($8 == 0) == 0) ){ goto $label$4 }
	$5 = (int_64)1
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [9019])
	$8 = (int_64)-1
	
.LABEL $label$4
	$5 = (int_64)1
	
.LOOP $label$6:
	$5 = ((int_64)$5 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$3
	$9 = ($2 + [8])
	$10 = *($2 + [8])
	$11 = ((int_64)$5 * (int_64)10000)
	$12 = (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($12, [8821])
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $8
	$13 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $8
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$13 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $13 ){ goto $label$11 }
	$13 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	
.LABEL $label$7
	CALL eosio_assert($13, [8870])
	$6 = ($2 + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)$10), [9050])
	if ( ((int_64)*($2) >= (int_64)$11) ){ goto $label$12 }
	CALL eosio_assert([0], [9197])
	
.LABEL $label$12
	$10 = *($6)
	CALL eosio_assert($12, [8821])
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$5 = $8
	$13 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$5 = $8
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$13 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $13 ){ goto $label$17 }
	$13 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$13 = [0]
	
.LABEL $label$13
	CALL __multi3(($4 + [120]), $11, (int_64)$11 >> (int_64)63), (int_64)100, (int_64)0)
	CALL eosio_assert($13, [8870])
	$5 = *((($4 + [120]) + [8]))
	$8 = *($4 + [120])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [9678])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [9702])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$10), [9050])
	if ( ((int_64)*($2) <= (int_64)$8) ){ goto $label$18 }
	CALL eosio_assert([0], [9212])
	
.LABEL $label$18
	if ( ((int_64)$3 == (int_64)$1) ){ goto $label$19 }
	CALL $52($0, $1, $3, $9)
	
.LABEL $label$19
	$5 = CALL current_time()
	if ( ((uint_64)*(*($7) + [96]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$26 }
	$5 = CALL current_time()
	if ( ((uint_64)*(*($7) + [104]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$25 }
	$5 = CALL current_time()
	$6 = *($7)
	if ( ((uint_64)*($6 + [104]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$26 }
	if ( ((int_64)*($6 + [88]) == (int_64)0) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = [0]
	*(($4 + [280])) = [0]
	*($4 + [256]) = $1
	*($4 + [264]) = (int_64)-1
	*($4 + [272]) = (int_64)0
	*($4 + [248]) = *($0)
	CALL $53(($4 + [240]), $0, $1, $9, ($4 + [248]))
	$5 = *($0)
	$6 = *($4 + [244])
	*($4 + [236]) = $2
	*($4 + [232]) = ($4 + [240])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9407])
	CALL $190(($4 + [248]), $6, $5, ($4 + [232]))
	$5 = CALL current_time()
	$6 = *($7)
	if ( ((uint_64)*($6 + [104]) >= (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$27 }
	if ( (*($6 + [144]) == 0) ){ goto $label$24 }
	
.LABEL $label$27
	*($4 + [168]) = (int_64)0
	$11 = *($6 + [8])
	$5 = *(($2 + [8]))
	*($4 + [176]) = $5
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	
.LOOP $label$30:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$5 = $8
	$14 = [1]
	$7 = $13
	$13 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$5 = $8
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$14 = ((int_32)$13 < (int_32)[6])
	$7 = ($13 + [1])
	$13 = $7
	if ( $14 ){ goto $label$32 }
	$14 = [1]
	$13 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$14 = [0]
	
.LABEL $label$28
	CALL eosio_assert($14, [8870])
	*($4 + [152]) = (int_64)0
	$5 = *(($2 + [8]))
	*($4 + [160]) = $5
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	
.LOOP $label$34:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$5 = $8
	$7 = [1]
	$13 = $6
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$5 = $8
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$13 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $13 ){ goto $label$36 }
	$7 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	
.LABEL $label$33
	CALL eosio_assert($7, [8870])
	$8 = *(($2 + [8]))
	*((($4 + [136]) + [8])) = $8
	$5 = *($2)
	*((($4 + [104]) + [8])) = *((($4 + [168]) + [8]))
	*((($4 + [88]) + [8])) = *((($4 + [152]) + [8]))
	*((($4 + [72]) + [8])) = $8
	*($4 + [136]) = $5
	*($4 + [104]) = *($4 + [168])
	*($4 + [88]) = *($4 + [152])
	*($4 + [72]) = $5
	CALL $57($0, $1, $11, ($4 + [104]), ($4 + [88]), (int_64)0, ($4 + [72]), (int_64)2, $9)
	$14 = *($4 + [272])
	if ( ($14 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$25
	$8 = *(($2 + [8]))
	*((($4 + [288]) + [8])) = $8
	$5 = *($2)
	*((($4 + [8]) + [8])) = $8
	*($4 + [288]) = $5
	*($4 + [8]) = $5
	CALL $56($0, $1, ($4 + [8]), (int_64)0)
	$14 = *($4 + [336])
	if ( $14 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$24
	$11 = CALL $55($0, ($4 + [304]), ($4 + [312]))
	*($4 + [216]) = (int_64)0
	$5 = *(($2 + [8]))
	*($4 + [224]) = $5
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$5 = $8
	$13 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$5 = $8
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$13 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $13 ){ goto $label$41 }
	$13 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$13 = [0]
	
.LABEL $label$37
	CALL eosio_assert($13, [8870])
	*($4 + [200]) = (int_64)0
	$5 = *(($2 + [8]))
	*($4 + [208]) = $5
	CALL eosio_assert([1], [8821])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$5 = $8
	$13 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$5 = $8
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$13 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $13 ){ goto $label$46 }
	$13 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$13 = [0]
	
.LABEL $label$42
	CALL eosio_assert($13, [8870])
	$8 = *(($2 + [8]))
	*((($4 + [184]) + [8])) = $8
	$5 = *($2)
	*((($4 + [56]) + [8])) = *((($4 + [216]) + [8]))
	*((($4 + [40]) + [8])) = *((($4 + [200]) + [8]))
	*((($4 + [24]) + [8])) = $8
	*($4 + [184]) = $5
	*($4 + [56]) = *($4 + [216])
	*($4 + [40]) = *($4 + [200])
	*($4 + [24]) = $5
	CALL $57($0, $1, $11, ($4 + [56]), ($4 + [40]), (int_64)0, ($4 + [24]), (int_64)1, $9)
	$14 = *($4 + [272])
	if ( ($14 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$7 = ($4 + [276])
	$13 = *($7)
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$48 }
	
.LOOP $label$49:
	$13 = ($13 + [-24])
	$6 = *($13)
	*($13) = [0]
	if ( ($6 == 0) ){ goto $label$50 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($6 + [124])))
	
.LABEL $label$51
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$52
	CALL _ZdlPv($6)
	
.LABEL $label$50
	if ( ((int_32)$14 != (int_32)$13) ){ goto $label$49 }
	$6 = *(($4 + [272]))
	goto $label$47 
	
.LABEL $label$48
	$6 = $14
	
.LABEL $label$47
	*($7) = $14
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$14 = *($4 + [336])
	if ( ($14 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$7 = ($4 + [340])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$54 }
	
.LOOP $label$55:
	$6 = ($6 + [-24])
	$13 = *($6)
	*($6) = [0]
	if ( ($13 == 0) ){ goto $label$56 }
	CALL _ZdlPv($13)
	
.LABEL $label$56
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$55 }
	$6 = *(($4 + [336]))
	goto $label$53 
	
.LABEL $label$54
	$6 = $14
	
.LABEL $label$53
	*($7) = $14
	CALL _ZdlPv($6)
	$global$0 = ($4 + [352])
	return 
	
.LABEL $label$20
	$global$0 = ($4 + [352])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $226($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [76]) = [0]
	*($5 + [80]) = $0
	CALL $170(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $229($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [76])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	*($1 + [64]) = [1]
	$6 = *($1)
	CALL $212(($1 + [68]), *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [68])
	$7 = ( *(($1 + [72])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [65])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $226($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $171($5, $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [52]) = [0]
	$2 = *($0)
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	*($3 + [40]) = (int_64)0
	$4 = CALL db_find_i64($2, $2, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $46(($3 + [16]), $4) + [148]) == (int_32)($3 + [16])), [8890])
	$1 = *($3 + [40])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = *($0)
	*($3 + [8]) = $1
	*($3 + [12]) = ($3 + [56])
	CALL $187($3, ($3 + [16]), $2, ($3 + [8]))
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($3 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL _ZdlPv($0)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $210($2, ($1 + [8]))
	$5 = *($1 + [24])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $210(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $6), (int_32 $5), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $223($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $213($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $213($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $223($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $4 ){ goto $label$6 }
	$0 = ($0 + [1])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$0 = CALL $222($0, $1, $4)
	if ( ($0 == 0) ){ goto $label$1 }
	return $0
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $5 : ($3 <= $2) )
}

int_32 .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $223($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $213($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $211 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $210 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $198 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $200(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [8])
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $42(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $199 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	CALL $212(($1 + [116]), *($3))
	*($1 + [128]) = [1]
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *(($1 + [116]))
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $196 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [9225])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $1
	CALL $197($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $133(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3774958338810839040, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $134(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	$2 = *(*($0 + [4]) + [8])
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8870])
	*(($1 + [16])) = $2
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$4 = ($0 + [4])
	$6 = *($4)
	*($1 + [32]) = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [48]) = (int_64)1
	$2 = *(*($4) + [8])
	CALL eosio_assert([1], [8821])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8870])
	*(($1 + [64])) = $2
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = (int_64)0
}

void .FUNC $194 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$3 = *($3)
	*($1 + [40]) = *($3)
	*($1 + [48]) = *($3 + [8])
	*($1 + [56]) = *($3 + [16])
	*($1 + [64]) = *($3 + [24])
	$5 = *($1)
	CALL eosio_assert([1], [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $111(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [32])
	$9 = *(($6 + [40]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [40])) = $9
	*($1 + [32]) = $7
	*($1 + [48]) = ((int_64)*(*(*($3) + [4]) + [48]) + (int_64)1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $133(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $192 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$5 = *($1)
	$6 = *(*($3) + [4])
	$7 = *($6 + [24])
	$9 = *(($6 + [32]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$9), [9598])
	$7 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9660])
	*(($1 + [32])) = $9
	*($1 + [24]) = $7
	$3 = *($3 + [8])
	*($1 + [48]) = *($3)
	*($1 + [56]) = *($3 + [8])
	*($1 + [64]) = *($3 + [16])
	*($1 + [72]) = *($3 + [24])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9539])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $115(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $191 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [9442])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9488])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = *($7 + [40])
	$9 = *(($7 + [48]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9598])
	$8 = ((int_64)$8 + (int_64)*($3))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9641])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9660])
	*(($1 + [48])) = $9
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9539])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [98])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [116])
	$7 = ( *(($1 + [120])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $226($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $118($5, $1)
	CALL db_update_i64(*($1 + [136]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $229($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}