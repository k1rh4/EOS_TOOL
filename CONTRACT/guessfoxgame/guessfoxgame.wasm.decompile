(data (i32.const 16620) "deposit\00")
(data (i32.const 16628) "read_transaction failed\00")
(data (i32.const 16652) "wrong action\00")
(data (i32.const 16665) "wrong actor\00%d\00")
(data (i32.const 16680) "transfer\00")
(data (i32.const 16689) "wrong transaction\00")
(data (i32.const 16707) "game is not active!\00")
(data (i32.const 16727) "EOS\00")
(data (i32.const 16731) "only EOS token allowed\00%llu\00")
(data (i32.const 16759) "quantity invalid\00")
(data (i32.const 16776) "Bet amount must between %f and %f\00")
(data (i32.const 16810) "Bet border must between 2 to 97\00")
(data (i32.const 16842) "inviter can not be self\00")
(data (i32.const 16866) "referral does not exist\00")
(data (i32.const 16890) "unable to find bet id\00")
(data (i32.const 16912) "unkown roll type\00")
(data (i32.const 16929) "Unable to find bet hash\00")
(data (i32.const 16953) "unable to find the bet\00")
(data (i32.const 16977) "Bet id: \00: no conversion\00")
(data (i32.const 17002) " -- Winner! \00: out of range\00")
(data (i32.const 17030) " Referral reward. \00")
(data (i32.const 17049) "unable to find hash\00")
(data (i32.const 17069) " -- Refund.\00")
(data (i32.const 17081) "eosio.token\00")
(data (i32.const 17093) "Incorrect action\00")
(data (i32.const 17110) "string is too long to be a valid name\00")
(data (i32.const 17148) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17215) "character is not in allowed character set for names\00")
(data (i32.const 17267) "string is too long to be a valid symbol_code\00")
(data (i32.const 17312) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17365) "Incorrect memo for dice\00")
(data (i32.const 17389) "unable to find key\00")
(data (i32.const 17408) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17459) "error reading iterator\00")
(data (i32.const 17482) "read\00")
(data (i32.const 17487) "write\00")
(data (i32.const 17493) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17542) "invalid symbol name\00")
(data (i32.const 17562) "cannot create objects in table of another contract\00")
(data (i32.const 17613) "cannot pass end iterator to modify\00")
(data (i32.const 17648) "object passed to modify is not in multi_index\00")
(data (i32.const 17694) "cannot modify objects in table of another contract\00")
(data (i32.const 17745) "get\00")
(data (i32.const 17749) "cannot pass end iterator to erase\00")
(data (i32.const 17783) "cannot increment end iterator\00")
(data (i32.const 17813) "object passed to erase is not in multi_index\00")
(data (i32.const 17858) "cannot erase objects in table of another contract\00")
(data (i32.const 17908) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17961) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 18064) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18144) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 18401) "\00\01\02\04\07\03\06\05\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "transaction_size" (func $fimport$7 (result i32)))
(import "env" "read_transaction" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "sha256" (func $fimport$10 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$11 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$12 (result i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$17 (param i32)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$21 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $52))
(export "_Znwj" (func $82))
(export "_ZdlPv" (func $84))
(export "_Znaj" (func $83))
(export "_ZdaPv" (func $85))
(export "_ZnwjSt11align_val_t" (func $86))
(export "_ZnajSt11align_val_t" (func $87))
(export "_ZdlPvSt11align_val_t" (func $88))
(export "_ZdaPvSt11align_val_t" (func $89))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $11 $48 $30 $34 $6 $4 $7 $49 $5 $109 $112)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18410))
(global $global$2 i32 (i32.const 18410))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $121([17961])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [17961], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $107())
	*(CALL $107()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $119($4, ($3 + [12]), $2)
	$5 = CALL $107()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $99($3)
	
.LABEL $label$1
	CALL $100($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $99 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $103($1, $0, [17015])
	CALL $104()
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $92($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $120(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $124($1)
	
.LABEL $label$2
	*(CALL $107()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $124(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $127($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $114($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $107())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $123($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [104]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17813])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17858])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [17908])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*(($1 + [108])))
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8216]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8220])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8216]) = [1]
	$2 = ($2 << [16])
	*([0] + [8220]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8220])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8220]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8216]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8216]) = [1]
	$3 = ($3 << [16])
	*([0] + [8220]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8220])
	
.LABEL $label$10
	*([0] + [8220]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [104]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)4229865212519383040, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $35($3, $6)
	if ( ((int_32)*($7 + [104]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [16953])
	*(($2 + [152])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	$8 = *($0)
	*($2 + [120]) = $8
	*($2 + [128]) = (int_64)6138568292554748624
	$5 = [0]
	$6 = CALL db_find_i64($8, (int_64)6138568292554748624, (int_64)7615828862441619456, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $32(($2 + [120]), $6)
	if ( ((int_32)*($5 + [48]) == (int_32)($2 + [120])) ){ goto $label$5 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17049])
	$8 = *($0)
	CALL $102(($2 + [16]), $1)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $121([17069])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$11 }
	$9 = ($7 + [24])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($2) = ($6 << [1])
	$10 = ($2 | [1])
	$4 = $10
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$10 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($2) = ($10 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $6
	$10 = ($2 | [1])
	
.LABEL $label$13
	CALL memcpy($4, [17069], $6)
	
.LABEL $label$12
	*(($4 + $6)) = [0]
	$6 = *($2)
	$4 = ($6 & [1])
	$6 = CALL $96(($2 + [16]), ( *($2 + [8]) ? $10 : $4 ), ( *($2 + [4]) ? uint_32($6 >> [1]) : $4 ))
	$10 = *($6 + [4])
	$11 = *($6 + [8])
	*($6 + [4 align=4]) = (int_64)0
	$4 = *($6)
	*($6) = [0]
	$1 = *(($9 + [8]))
	$12 = *($9)
	$13 = *($7 + [8])
	*(($2 + [72])) = $11
	*((($2 + [32]) + [36])) = $10
	*((($2 + [32]) + [24])) = $1
	*($2 + [32]) = *($0)
	*($2 + [40]) = $13
	*($2 + [80]) = (int_64)6138663591592764928
	*($2 + [88]) = (int_64)-3617168760277827584
	*($2 + [64]) = $4
	*($2 + [48]) = $12
	*(($6 = CALL _Znwj([16]))) = $8
	*($6 + [8]) = (int_64)3617214756542218240
	*((($2 + [80]) + [36])) = [0]
	$0 = ($6 + [16])
	*((($2 + [80]) + [24])) = $0
	*(($2 + [100])) = $0
	*($2 + [96]) = $6
	*($2 + [108 align=4]) = (int_64)0
	$4 = ( $10 ? (uint_32($4 >> [1]) & [127]) : ($4 & [1]) )
	$6 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($2 + [108])
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$15 }
	if ( ($6 == 0) ){ goto $label$17 }
	CALL $28($4, $6)
	$4 = *(($2 + [112]))
	$6 = *(($2 + [108]))
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	$6 = [0]
	
.LABEL $label$16
	*($2 + [164]) = $6
	*($2 + [160]) = $6
	*($2 + [168]) = $4
	*($2 + [176]) = ($2 + [160])
	*($2 + [184]) = ($2 + [32])
	CALL $40(($2 + [184]), ($2 + [176]))
	CALL $50(($2 + [80]))
	$6 = *($2 + [108])
	if ( ($6 == 0) ){ goto $label$18 }
	*(($2 + [112])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$6 = *($2 + [96])
	if ( ($6 == 0) ){ goto $label$19 }
	*(($2 + [100])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( (*($2 + [64]) & [1]) ){ goto $label$21 }
	if ( (*($2) & [1]) ){ goto $label$20 }
	goto $label$10 
	
.LABEL $label$21
	CALL _ZdlPv(*(($2 + [72])))
	if ( ((*($2) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($2 + [8])))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $90($2)
	
.LABEL $label$10
	if ( (*($2 + [16]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($2 + [24]))
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [17749])
	CALL eosio_assert([0], [17783])
	
.LABEL $label$6
	$6 = CALL db_next_i64(*($7 + [108]), ($2 + [32]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	CALL $35($3, $6)
	
.LABEL $label$22
	CALL $38($3, $7)
	if ( $5 ){ goto $label$23 }
	CALL eosio_assert([0], [17749])
	CALL eosio_assert([0], [17783])
	
.LABEL $label$23
	$6 = CALL db_next_i64(*($5 + [52]), ($2 + [32]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	CALL $32(($2 + [120]), $6)
	
.LABEL $label$24
	CALL $33(($2 + [120]), $5)
	$7 = *($2 + [144])
	if ( ($7 == 0) ){ goto $label$25 }
	$4 = ($2 + [148])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$27 }
	
.LOOP $label$28:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$29 }
	CALL _ZdlPv($5)
	
.LABEL $label$29
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$28 }
	$6 = *(($2 + [144]))
	goto $label$26 
	
.LABEL $label$27
	$6 = $7
	
.LABEL $label$26
	*($4) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$global$0 = ($2 + [192])
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_32 $8)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $126($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [17966])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [17459])
	
.LABEL $label$5
	$4 = CALL $124($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([160])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = $0
	CALL $79(($3 + [32]), $5)
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $46(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $127($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $28(($7 + [28]), [97])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $41(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [40]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	*($2 + [8]) = $4
	CALL $78(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $77(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17648])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17694])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [40]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [48])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [56]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [64])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, $3, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [72])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$10
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [80])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [96])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[31]) ){ goto $label$12 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$12
	CALL memcpy($4, $5, [32])
	$4 = (*($3) + [32])
	*($3) = $4
	$1 = ($1 + [128])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_64 $18
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [136]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17648])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17694])
	
.LABEL $label$2
	$6 = *($1)
	$8 = *($3 + [16])
	*(($7 = (($5 + [48]) + [8]))) = *(($8 + [8]))
	$10 = *($3 + [20])
	*(($9 = (($5 + [32]) + [8]))) = *(($10 + [8]))
	*($5 + [48]) = *($8)
	*($5 + [32]) = *($10)
	$11 = *(*($3 + [32]))
	$12 = *(*($3 + [28]))
	$10 = *(*($3 + [24]))
	$13 = *(*($3 + [8]))
	$14 = *(*($3 + [12]))
	$15 = *(*($3 + [4]))
	$8 = *($3 + [36])
	*(($16 = ($5 + [24]))) = *(($8 + [24]))
	*(($17 = ($5 + [16]))) = *(($8 + [16]))
	*($5 + [8]) = *(($8 + [8]))
	*($5) = *($8)
	$18 = *(*($3 + [40]))
	*($1 + [8]) = $15
	*(($3 = (($5 + [96]) + [24]))) = *($16)
	*(($8 = (($5 + [96]) + [16]))) = *($17)
	*(($16 = (($5 + [80]) + [8]))) = *($9)
	*(($9 = (($5 + [64]) + [8]))) = *($7)
	*($5 + [104]) = *($5 + [8])
	*($5 + [96]) = *($5)
	*($5 + [80]) = *($5 + [32])
	*($5 + [64]) = *($5 + [48])
	*($1 + [24]) = $14
	*($1 + [16]) = $13
	*($1 + [64]) = $10
	*($1 + [72]) = $12
	*($1 + [80]) = $11
	*(($1 + [40])) = *($9)
	*($1 + [32]) = *($5 + [64])
	*(($1 + [56])) = *($16)
	*($1 + [48]) = *($5 + [80])
	*(($1 + [104])) = *($5 + [104])
	*(($1 + [120])) = *($3)
	*(($1 + [112])) = *($8)
	*($1 + [96]) = *($5 + [96])
	*($1 + [128]) = $18
	$8 = $4
	$3 = ($8 + [-128])
	$global$0 = $3
	*($5 + [100]) = $3
	*($5 + [96]) = $3
	*($5 + [104]) = ($8 + [-7])
	CALL $45(($5 + [96]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $3, [121])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [128])
}

int_32 .FUNC $124 (int_32 $0)
{
	return CALL $125([8224], $0)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [17459])
	
.LABEL $label$5
	$2 = CALL $124($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	$7 = ($5 + [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $127($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17648])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17694])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $6 (int_32 $0)
{
	CALL require_auth(*($0))
	CALL $7($0, (int_64)101, (int_64)0)
	CALL $7($0, (int_64)102, (int_64)0)
	CALL $7($0, (int_64)103, (int_64)0)
	CALL $7($0, (int_64)104, (int_64)0)
	CALL $7($0, (int_64)105, (int_64)1000)
	CALL $7($0, (int_64)106, (int_64)50)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [8]) = $2
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)*($8 + [16]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [17408])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7235159550150574080, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $8($4, $7)
	if ( ((int_32)*($8 + [16]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [32]) = ($3 + [8])
	CALL $9($4, $8, $1, ($3 + [32]))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$9 = *($0)
	if ( ((int_64)*(($0 + [32])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [17562])
	
.LABEL $label$6
	*(($7 = CALL _Znwj([32])) + [16]) = $4
	*($7 + [8]) = $2
	*($7) = $1
	CALL memcpy(($3 + [32]), $7, [8])
	CALL memcpy((($3 + [32]) | [8]), ($7 + [8]), [8])
	$1 = *($7)
	$8 = CALL db_store_i64(*(($0 + [40])), (int_64)7235159550150574080, $9, $1, ($3 + [32]), [16])
	*($7 + [20]) = $8
	$6 = ($0 + [48])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [24]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	*($3 + [20]) = $8
	$5 = ($0 + [60])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$10 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [24]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $10(($0 + [56]), ($3 + [24]), ($3 + [32]), ($3 + [20]))
	$7 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$global$0 = ($3 + [48])
}

void .FUNC $4 (int_32 $0)
{
	CALL require_auth(*($0))
}

void .FUNC $5 (int_32 $0)
{
	CALL require_auth(*($0))
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $90($3)
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$2 = *(($0 + [216]))
	if ( ($2 == 0) ){ goto $label$6 }
	$5 = ($0 + [220])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	$1 = *($4 + [96])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($4 + [100])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [216]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [176]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [136]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$26 }
	CALL _ZdlPv($4)
	
.LABEL $label$26
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$25 }
	$3 = *(($0 + [96]))
	goto $label$23 
	
.LABEL $label$24
	$3 = $1
	
.LABEL $label$23
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$22
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$27 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$29 }
	
.LOOP $label$30:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$31 }
	CALL _ZdlPv($4)
	
.LABEL $label$31
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$30 }
	$3 = *(($0 + [56]))
	goto $label$28 
	
.LABEL $label$29
	$3 = $1
	
.LABEL $label$28
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$27
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	*($3 + [24]) = $5
	$4 = uint_32($4 >> [1])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	*($3 + [24]) = $5
	$4 = *($1 + [4])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($2 & [255])
	$7 = ($0 + [8])
	$8 = ($0 + [4])
	$2 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($2) != (int_32)$6) ){ goto $label$12 }
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*($7)) ){ goto $label$11 }
	*($1) = (int_64)0
	*(($1 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$10 }
	*($1) = ($9 << [1])
	$4 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$2 = ($2 + [1])
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$11
	CALL $2($0, ($3 + [24]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($9 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1) = ($10 | [1])
	*($1 + [8]) = $4
	*($1 + [4]) = $9
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = $4
	
.LOOP $label$13:
	*($1) = *($5)
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$13 }
	$4 = ($4 + $9)
	
.LABEL $label$8
	*($4) = [0]
	*($8) = (*($8) + [12])
	
.LABEL $label$7
	$2 = (*($3 + [8]) + [1])
	*($3 + [24]) = $2
	$1 = *($3 + [16])
	$5 = $2
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$16 }
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)*($0 + [8])) ){ goto $label$17 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$4 = ($1 - $5)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$15 }
	*($2) = ($4 << [1])
	$6 = ($2 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $2($0, ($3 + [24]), ($3 + [16]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2) = ($8 | [1])
	*($2 + [8]) = $6
	*($2 + [4]) = $4
	
.LABEL $label$14
	$2 = $6
	
.LOOP $label$18:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$18 }
	*(($6 + $4)) = [0]
	*(($5 = ($0 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $90($1)
	
.LABEL $label$1
	CALL $90($2)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17745])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$6 = *($1)
	$5 = *($1 + [4])
	$7 = int_32(($5 - $6) >> [4])
	if ( ((uint_32)$7 >= (uint_32)$2) ){ goto $label$5 }
	CALL $68($1, ($2 - $7))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$6 }
	$6 = ($6 + ($2 << [4]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-16])
	$7 = *(($5 + [-12]))
	if ( ($7 == 0) ){ goto $label$9 }
	*(($5 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $6
	$5 = $6
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($0 + [4])
	$4 = ($0 + [8])
	
.LOOP $label$10:
	$6 = *($7)
	if ( ((uint_32)(*($4) - $6) > (uint_32)[1]) ){ goto $label$11 }
	CALL eosio_assert([0], [17482])
	$6 = *($7)
	
.LABEL $label$11
	CALL memcpy($2, $6, [2])
	*($7) = (*($7) + [2])
	CALL $69($0, ($2 + [4]))
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $106(($0 + [16]))
	
.LABEL $label$1
	CALL $106(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [17110])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [17215])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17148])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17215])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = [0]
	CALL $1(($3 + [32]), $2, [59])
	CALL eosio_assert(((int_32)(*($3 + [36]) - *($3 + [32])) == (int_32)[36]), [17365])
	*($0) = CALL $98(*($3 + [32]), [0], [10])
	*($0 + [8]) = (CASTING int_64)(int_32 CALL $98((*($3 + [32]) + [12]), [0], [10]))
	$2 = *($3 + [32])
	if ( (*($2 + [24]) & [1]) ){ goto $label$2 }
	$2 = (($2 + [24]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(($2 + [32]))
	
.LABEL $label$1
	*($3 + [16]) = $2
	*($3 + [20]) = CALL $121($2)
	*($3 + [8]) = *($3 + [16])
	*(($0 + [16])) = *(CALL $16(($3 + [24]), ($3 + [8])))
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$2 = *($3 + [36])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($2 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$7
	$2 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *($3 + [32])
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($3 + [36]) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [736])
	$global$0 = $5
	*(($6 = $5) + [720]) = $1
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663590285017088) ){ goto $label$1 }
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$1 }
	$9 = *($4)
	$8 = CALL $121([16620])
	if ( ((int_32)$8 != (int_32)( *($4 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$2 }
	if ( (CALL $97($4, [0], [-1], [16620], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = $5
	$11 = CALL transaction_size()
	$12 = ($5 - (($11 + [15]) & [-16]))
	$global$0 = $12
	$9 = CALL read_transaction($12, $11)
	CALL eosio_assert(((int_32)$11 == (int_32)$9), [16628])
	$2 = CALL current_time()
	*(($6 + [684])) = (int_64)0
	*(($6 + [700])) = (int_64)0
	*(($6 + [708])) = (int_64)0
	$5 = [0]
	*($6 + [668]) = [0]
	*($6 + [672]) = [0]
	*($6 + [676 align=4]) = (int_64)0
	*($6 + [692 align=4]) = (int_64)0
	*($6 + [656]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [420]) = $12
	*($6 + [416]) = $12
	*($6 + [424]) = ($12 + $9)
	CALL $12(($6 + [416]), ($6 + [656]))
	CALL $14(CALL $13(CALL $13(($6 + [416]), ($6 + [680])), ($6 + [692])), ($6 + [704]))
	$13 = CALL $15(($6 + [616]), *($6 + [692]))
	CALL eosio_assert(((int_32)(*((($6 + [656]) + [40])) - *($6 + [692])) == (int_32)[40]), [16652])
	CALL eosio_assert(((int_64)*((*(($13 + [20])) + [-16])) == (int_64)$1), [16665])
	$1 = *($13 + [8])
	*($6 + [608]) = [16680]
	*($6 + [612]) = CALL $121([16680])
	*($6 + [24]) = *($6 + [608])
	CALL $16(($6 + [416]), ($6 + [24]))
	if ( ((int_64)$1 != (int_64)-3617168760277827584) ){ goto $label$3 }
	$5 = ((int_64)*($13) == (int_64)*($0 + [8]))
	
.LABEL $label$3
	CALL eosio_assert($5, [16689])
	$14 = ($0 + [32])
	$9 = *(($0 + [60]))
	$15 = *(($0 + [56]))
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($9 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)101) ){ goto $label$6 }
	$9 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$5 }
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$4 }
	CALL eosio_assert([0], [17408])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $8($14, CALL $fimport$4(*($14), *(($0 + [40])), (int_64)7235159550150574080, (int_64)101))
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$4 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)1), [16707])
	$5 = CALL $121([16727])
	if ( ($5 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [17267])
	goto $label$10 
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$1 = (int_64)0
	
.LOOP $label$12:
	$9 = *(($5 + [16726]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [17312])
	
.LABEL $label$13
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$8 
	
.LABEL $label$9
	$1 = (int_64)0
	
.LABEL $label$8
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)((int_64)$1 | (int_64)4)), [16731])
	$9 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$14 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $2
	$9 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$1 = $2
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $9 ){ goto $label$18 }
	$9 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$14
	CALL eosio_assert($9, [16759])
	$5 = CALL $91(($6 + [568]), $4)
	CALL $17(($6 + [584]), $0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$19
	$9 = *(($0 + [60]))
	$15 = *(($0 + [56]))
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$21 }
	
.LOOP $label$23:
	$5 = ($9 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)105) ){ goto $label$22 }
	$9 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$21 }
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$20 }
	CALL eosio_assert([0], [17408])
	goto $label$20 
	
.LABEL $label$21
	$8 = CALL $8($14, CALL $fimport$4(*(($0 + [32])), *(($0 + [40])), (int_64)7235159550150574080, (int_64)105))
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$20 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$20
	$7 = *($8 + [8])
	$9 = *(($0 + [60]))
	$15 = *(($0 + [56]))
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$27:
	$5 = ($9 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)106) ){ goto $label$26 }
	$9 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$25 }
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$24 }
	CALL eosio_assert([0], [17408])
	goto $label$24 
	
.LABEL $label$25
	$8 = CALL $8($14, CALL $fimport$4(*(($0 + [32])), *(($0 + [40])), (int_64)7235159550150574080, (int_64)106))
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$24 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$24
	$2 = *($3)
	$16 = *($8 + [8])
	$17 = *($0)
	$5 = CALL $121([16727])
	if ( ($5 <= [8]) ){ goto $label$31 }
	CALL eosio_assert([0], [17267])
	goto $label$30 
	
.LABEL $label$31
	if ( ($5 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$1 = (int_64)0
	
.LOOP $label$32:
	$9 = *(($5 + [16726]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$33 }
	CALL eosio_assert([0], [17312])
	
.LABEL $label$33
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$32 }
	$1 = ((int_64)$1 & (int_64)72057594037927935)
	goto $label$28 
	
.LABEL $label$29
	$1 = (int_64)0
	
.LABEL $label$28
	CALL $18(($6 + [552]), (int_64)6138663591592764928, $17, $1)
	$1 = *($6 + [592])
	$5 = *($6 + [584])
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$34 }
	if ( ((int_32)$5 != (int_32)[2]) ){ goto $label$35 }
	$1 = (int_64))((int_64)99 - $1)
	goto $label$34 
	
.LABEL $label$35
	CALL eosio_assert([0], [16912])
	$1 = (int_64)0
	
.LABEL $label$34
	$17 = *($6 + [552])
	*($6) = (PROMOTE float_64)(float_32 (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_64 $7) / (float_64)(float_64)1e4)))
	$1 = ((int_64)((int_64)$2 * (int_64)98) / (int_64)((int_64)$1 & (int_64)255))
	*($6 + [8]) = (PROMOTE float_64)(float_32 (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_64 ((uint_64)((int_64)((uint_64)$17 / (uint_64)$16) * (int_64)$2) / (uint_64)$1)) / (float_64)(float_64)1e4)))
	CALL $111(($6 + [416]), [16776], $6)
	$5 = [0]
	if ( (uint_64)($2 <= $7) ){ goto $label$36 }
	$5 = ((uint_64)$1 <= (uint_64)((uint_64)*($6 + [552]) / (uint_64)$16))
	
.LABEL $label$36
	CALL eosio_assert($5, ($6 + [416]))
	CALL eosio_assert((uint_64)(((int_64)*((($6 + [584]) + [8])) + (int_64)-2) <= (int_64)96), [16810])
	*($6 + [408]) = (int_64)7391968495242218784
	$1 = *($6 + [600])
	if ( (int_64)($1 == 0) ){ goto $label$37 }
	*($6 + [408]) = $1
	CALL eosio_assert(((int_64)*($6 + [720]) != (int_64)$1), [16842])
	CALL eosio_assert(CALL $fimport$9(*($6 + [408])), [16866])
	
.LABEL $label$37
	CALL sha256($12, $11, ($6 + [368]))
	CALL $101(($6 + [256]), CALL $fimport$11())
	CALL $101(($6 + [112]), CALL $fimport$12())
	$5 = *($6 + [112])
	$9 = ($5 & [1])
	$5 = CALL $96(($6 + [256]), ( *($6 + [120]) ? (($6 + [112]) | [1]) : $9 ), ( *($6 + [116]) ? uint_32($5 >> [1]) : $9 ))
	$9 = ($5 + [8])
	*((($6 + [352]) + [8])) = *($9)
	*($6 + [352]) = *($5)
	*($5) = (int_64)0
	*($9) = [0]
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($6 + [120])))
	
.LABEL $label$38
	if ( ((*($6 + [256]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($6 + [264]))
	
.LABEL $label$39
	$5 = *($6 + [352])
	CALL sha256(($6 + [352]), ( *($6 + [356]) ? uint_32($5 >> [1]) : ($5 & [1]) ), ($6 + [320]))
	*((($6 + [256]) + [24])) = *((($6 + [320]) + [24]))
	*((($6 + [256]) + [16])) = *((($6 + [320]) + [16]))
	*((($6 + [256]) + [40])) = *($6 + [376])
	*(($6 + [304])) = *((($6 + [368]) + [16]))
	*((($6 + [256]) + [56])) = *((($6 + [368]) + [24]))
	*($6 + [264]) = *($6 + [328])
	*($6 + [256]) = *($6 + [320])
	*($6 + [288]) = *($6 + [368])
	CALL sha256(($6 + [256]), [64], ($6 + [224]))
	$9 = *(($0 + [60]))
	$15 = *(($0 + [56]))
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$41 }
	
.LOOP $label$43:
	$5 = ($9 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)102) ){ goto $label$42 }
	$9 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$41 }
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$40 }
	CALL eosio_assert([0], [17408])
	goto $label$40 
	
.LABEL $label$41
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)7235159550150574080, (int_64)102)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$40 }
	$8 = CALL $8($14, $5)
	if ( ((int_32)*($8 + [16]) == (int_32)$14) ){ goto $label$40 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$40
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [16890])
	*($6 + [216]) = ((int_64)*($8 + [8]) + (int_64)1)
	$1 = *($0)
	*($6 + [112]) = ($6 + [216])
	if ( $8 ){ goto $label$44 }
	CALL eosio_assert([0], [17613])
	
.LABEL $label$44
	CALL $19($14, $8, $1, ($6 + [112]))
	*((($6 + [176]) + [32])) = [0]
	*($6 + [184]) = (int_64)6138568292554748624
	*($6 + [192]) = (int_64)-1
	*($6 + [200]) = (int_64)0
	$1 = *($0)
	*($6 + [176]) = $1
	if ( ((int_64)$1 == (int_64)CALL current_receiver()) ){ goto $label$45 }
	CALL eosio_assert([0], [17562])
	
.LABEL $label$45
	*(($5 = CALL _Znwj([64])) + [48]) = ($6 + [176])
	*($5) = *($6 + [216])
	*($5 + [16]) = *($6 + [224])
	*(($5 + [24])) = *($6 + [232])
	*(($5 + [32])) = *((($6 + [224]) + [16]))
	*(($5 + [40])) = *((($6 + [224]) + [24]))
	CALL memcpy(($6 + [112]), $5, [8])
	CALL memcpy((($6 + [112]) | [8]), ($5 + [16]), [32])
	$2 = *($5)
	$8 = CALL db_store_i64(*((($6 + [176]) + [8])), (int_64)7615828862441619456, $1, $2, ($6 + [112]), [40])
	*($5 + [52]) = $8
	$9 = (($6 + [176]) + [16])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$46 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$46
	*($6 + [32]) = $5
	$1 = *($5)
	*($6 + [112]) = $1
	*($6 + [96]) = $8
	$15 = ($6 + [204])
	$9 = *($15)
	if ( ((uint_32)$9 >= (uint_32)*(($6 + [208]))) ){ goto $label$49 }
	*($9 + [8]) = $1
	*($9 + [16]) = $8
	*($6 + [32]) = [0]
	*($9) = $5
	*($15) = ($9 + [24])
	$5 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( $5 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	CALL $20(($6 + [200]), ($6 + [32]), ($6 + [112]), ($6 + [96]))
	$5 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv($5)
	
.LABEL $label$47
	$1 = *($0)
	*($6 + [124]) = $3
	*($6 + [116]) = ($6 + [720])
	*($6 + [112]) = ($6 + [216])
	*($6 + [120]) = ($6 + [408])
	*($6 + [128]) = ($6 + [584])
	*($6 + [96]) = $1
	$9 = ($0 + [112])
	if ( ((int_64)*($0 + [112]) == (int_64)CALL current_receiver()) ){ goto $label$50 }
	CALL eosio_assert([0], [17562])
	
.LABEL $label$50
	*($6 + [32]) = $9
	*($6 + [36]) = ($6 + [112])
	*($6 + [40]) = ($6 + [96])
	*(($5 = CALL _Znwj([128])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = $9
	CALL $21(($6 + [32]), $5)
	*($6 + [88]) = $5
	$1 = *($5)
	*($6 + [32]) = $1
	$8 = *($5 + [108])
	*($6 + [732]) = $8
	$15 = ($0 + [140])
	$9 = *($15)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [144]))) ){ goto $label$53 }
	*($9 + [8]) = $1
	*($9 + [16]) = $8
	*($6 + [88]) = [0]
	*($9) = $5
	*($15) = ($9 + [24])
	$9 = *($6 + [88])
	$5 = [0]
	*($6 + [88]) = [0]
	if ( $9 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	CALL $22(($0 + [136]), ($6 + [88]), ($6 + [32]), ($6 + [732]))
	$9 = *($6 + [88])
	$5 = [0]
	*($6 + [88]) = [0]
	if ( ($9 == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv($9)
	
.LABEL $label$51
	$1 = CALL current_time()
	*((($6 + [112]) + [28])) = (int_64)0
	*(($6 + [156])) = (int_64)0
	*(($6 + [164])) = (int_64)0
	*($6 + [124]) = $5
	*($6 + [128]) = $5
	*($6 + [132 align=4]) = (int_64)0
	*($6 + [148 align=4]) = (int_64)0
	*($6 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [104]) = (int_64)3617214756542218240
	*($6 + [96]) = *($0)
	*($6 + [88]) = (int_64)-4157529991795441664
	*(($6 + [56])) = *(($3 + [8]))
	*($6 + [32]) = *($6 + [216])
	*($6 + [40]) = *($6 + [720])
	*($6 + [48]) = *($3)
	*($6 + [64]) = *($6 + [584])
	*($6 + [72]) = *((($6 + [584]) + [8]))
	*($6 + [80]) = *($6 + [408])
	CALL $23(($6 + [148]), ($6 + [96]), $0, ($6 + [88]), ($6 + [32]))
	$1 = *($0)
	$2 = *($6 + [720])
	*($6 + [132]) = [1]
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = $2
	CALL $24(($6 + [112]), ($6 + [32]), $1, $5)
	CALL $25(($6 + [112]))
	$0 = *($6 + [200])
	if ( ($0 == 0) ){ goto $label$54 }
	$5 = *((($6 + [176]) + [28]))
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$56 }
	
.LOOP $label$57:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$58 }
	CALL _ZdlPv($9)
	
.LABEL $label$58
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$57 }
	$5 = *(($6 + [200]))
	goto $label$55 
	
.LABEL $label$56
	$5 = $0
	
.LABEL $label$55
	*(($6 + [204])) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$54
	if ( ((*($6 + [352]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*($6 + [360]))
	
.LABEL $label$59
	$5 = *($13 + [28])
	if ( ($5 == 0) ){ goto $label$60 }
	*(($13 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$60
	$5 = *($13 + [16])
	if ( ($5 == 0) ){ goto $label$61 }
	*(($13 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$61
	CALL $25(($6 + [656]))
	$10
	
.LABEL $label$1
	$global$0 = ($6 + [736])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [4])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [2])
	$3 = (*($2) + [2])
	*($2) = $3
	$2 = ($1 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [4])
	$2 = (*($6) + [4])
	*(($6 = ($0 + [4]))) = $2
	$7 = (int_64)0
	$8 = ($0 + [8])
	$5 = [0]
	
.LOOP $label$4:
	if ( ($2 <= *($8)) ){ goto $label$5 }
	CALL eosio_assert([0], [17745])
	$2 = *($6)
	
.LABEL $label$5
	$3 = *($2)
	$4 = ($2 + [1])
	*($6) = $4
	$2 = ($5 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $2)))
	$5 = ($2 + [7])
	$2 = $4
	if ( ($3 & [128]) ){ goto $label$4 }
	*($1 + [12]) = $7
	$2 = ($1 + [16])
	$6 = ($0 + [8])
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [1])
	$2 = (*($5) + [1])
	*(($5 = ($0 + [4]))) = $2
	$7 = (int_64)0
	$4 = [0]
	
.LOOP $label$7:
	if ( ($2 <= *($6)) ){ goto $label$8 }
	CALL eosio_assert([0], [17745])
	$2 = *($5)
	
.LABEL $label$8
	$3 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$4 = ($4 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $4)))
	$4 = ($4 + [7])
	$2 = $2
	if ( ($3 & [128]) ){ goto $label$7 }
	*($1 + [20]) = $7
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17745])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[40])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $70($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($5 + ((int_32)$2 * (int_32)[40]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = *(($7 + [-12]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($7 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$2 = ($7 + [-40])
	$6 = *(($7 + [-24]))
	if ( ($6 == 0) ){ goto $label$10 }
	*(($7 + [-20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$7 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $5
	$7 = $5
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	CALL $71($0, $2)
	$2 = ($2 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	
.LABEL $label$3
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$3 = ($4 + [40])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$5 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($4 + [48])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17487])
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$5 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $26(($4 + [8]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$5
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [17389])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17648])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17694])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [312]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$5
	CALL memcpy(($4 + [312]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = $3
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*($4 + [16]) = $2
	*($4) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [144])) = [0]
	*(($4 + [136])) = (int_64)0
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*($4 + [8]) = $1
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [312])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $127($2)
	
.LABEL $label$7
	CALL $3($4)
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17482])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $80(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $28($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $51(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $66(CALL $67($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	*($3 + [176]) = [17081]
	*($3 + [180]) = CALL $121([17081])
	*($3 + [80]) = *($3 + [176])
	CALL $16(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [160]) = [16680]
	*($3 + [164]) = CALL $121([16680])
	*($3 + [72]) = *($3 + [160])
	CALL $16(($3 + [168]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [64]) = *($3 + [152])
	CALL $53($0, (int_64)6138663591592764928, ($3 + [64]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$10 }
	if ( ((int_64)$2 > (int_64)-4417247484950609921) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-5001342335392940033) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-7297667123730448384) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$2 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [2]
	*($3 + [48]) = *($3 + [96])
	CALL $54($1, $1, ($3 + [48]))
	
.LABEL $label$10
	CALL eosio_exit([0])
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)6182744098496053247) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4157529991795441664) ){ goto $label$2 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [32]) = *($3 + [112])
	CALL $55($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-5001342335392940032) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4994130327835885568) ){ goto $label$2 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3 + [40]) = *($3 + [104])
	CALL $55($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [16]) = *($3 + [128])
	CALL $56($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3) = *($3 + [144])
	CALL $56($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [24]) = *($3 + [120])
	CALL $57($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [92]) = [0]
	*($3 + [88]) = [8]
	*($3 + [56]) = *($3 + [88])
	CALL $58($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [8]) = *($3 + [136])
	CALL $56($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	CALL eosio_assert([0], [17093])
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $53 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [392]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [344]) + [24])) = (int_64)0
	*((($4 + [344]) + [40])) = [0]
	*($4 + [352]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [332]) = $2
	*($4 + [328]) = $2
	*($4 + [336]) = ($2 + $5)
	*($4 + [432]) = ($4 + [328])
	*($4 + [16]) = ($4 + [344])
	CALL $59(($4 + [16]), ($4 + [432]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [400]) + [8])) = $3
	*(($6 = (($4 + [416]) + [8]))) = $3
	$7 = *($4)
	*($4 + [416]) = $7
	*($4 + [400]) = $7
	$3 = *($6)
	*((($4 + [432]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	$7 = *($4 + [416])
	*($4 + [32]) = $7
	*($4 + [432]) = $7
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [24]) = $1
	*($4 + [436]) = ($4 + [392])
	*($4 + [432]) = ($4 + [16])
	CALL $60(($4 + [432]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $127($2)
	
.LABEL $label$4
	CALL $3(($4 + [16]))
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [384])))
	
.LABEL $label$5
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [704])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [400]) + [24]))) = (int_64)0
	*(($8 = (($4 + [400]) + [40]))) = (int_64)0
	*(($9 = (($4 + [400]) + [104]))) = (int_64)0
	*(($10 = (($4 + [400]) + [96]))) = (int_64)0
	*(($11 = (($4 + [400]) + [88]))) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [448]) = [0]
	*($4 + [456]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [640]) = ($4 + [384])
	*($4 + [80]) = ($4 + [400])
	CALL $62(($4 + [80]), ($4 + [640]))
	*(($12 = (($4 + [64]) + [8]))) = *($4 + [392])
	*($4 + [64]) = *($4 + [384])
	$12 = *($12)
	*((($4 + [512]) + [8])) = $12
	*(($13 = (($4 + [608]) + [8]))) = $12
	$14 = *($4 + [64])
	*($4 + [608]) = $14
	*($4 + [512]) = $14
	$12 = *($13)
	*((($4 + [640]) + [8])) = $12
	*((($4 + [80]) + [24])) = $12
	*($4 + [80]) = $0
	$14 = *($4 + [608])
	*($4 + [96]) = $14
	*($4 + [640]) = $14
	*((($4 + [80]) + [40])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*((($4 + [80]) + [88])) = (int_64)-1
	*((($4 + [80]) + [96])) = (int_64)0
	*((($4 + [80]) + [104])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*(($4 + [256])) = (int_64)0
	*(($4 + [268])) = [0]
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = [0]
	*($4 + [272]) = $0
	*($4 + [312]) = $0
	*($4 + [88]) = $1
	*(($12 = (($4 + [560]) + [8]))) = *($3)
	*(($3 = (($4 + [544]) + [8]))) = *($8)
	*(($8 = (($4 + [512]) + [16]))) = *($10)
	*(($10 = (($4 + [512]) + [24]))) = *($9)
	*($4 + [560]) = *($4 + [416])
	*($4 + [544]) = *($4 + [432])
	*($4 + [512]) = *($4 + [480])
	*($4 + [520]) = *($11)
	$0 = *($4 + [408])
	$1 = *($4 + [400])
	$9 = *($4 + [448])
	$14 = *($4 + [456])
	$15 = *($4 + [464])
	*((($4 + [608]) + [24])) = *($10)
	*((($4 + [608]) + [16])) = *($8)
	*((($4 + [592]) + [8])) = *($3)
	*((($4 + [576]) + [8])) = *($12)
	*($4 + [616]) = *($4 + [520])
	*($4 + [608]) = *($4 + [512])
	*($4 + [592]) = *($4 + [544])
	*($4 + [576]) = *($4 + [560])
	$3 = (($4 + [80]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$16 = *((($4 + [576]) + [8]))
	*((($4 + [688]) + [8])) = $16
	*(($5 = (($4 + [672]) + [8]))) = *((($4 + [592]) + [8]))
	*(($8 = (($4 + [640]) + [16]))) = *((($4 + [608]) + [16]))
	*(($10 = (($4 + [640]) + [24]))) = *((($4 + [608]) + [24]))
	*((($4 + [48]) + [8])) = $16
	$16 = *($4 + [576])
	*($4 + [688]) = $16
	*($4 + [672]) = *($4 + [592])
	*($4 + [640]) = *($4 + [608])
	*($4 + [648]) = *($4 + [616])
	*($4 + [48]) = $16
	*((($4 + [32]) + [8])) = *($5)
	*(($4 + [16])) = *($8)
	*(($4 + [24])) = *($10)
	*($4 + [32]) = *($4 + [672])
	*($4) = *($4 + [640])
	*($4 + [8]) = *($4 + [648])
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [48])), (int_32 ($4 + [32])), (int_32 ($9 & [255])), (int_32 $14), (int_64 $15), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $127($2)
	
.LABEL $label$5
	CALL $3(($4 + [80]))
	$global$0 = ($4 + [704])
	return [1]
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	float_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	$7 = ($global$0 - [464])
	$global$0 = $7
	CALL require_auth(*($0))
	$8 = ($0 + [112])
	$10 = *(($0 + [140]))
	$9 = *(($0 + [136]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$3 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	if ( ((int_32)*($12 + [104]) == (int_32)$8) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	$11 = CALL db_find_i64(*($8), *(($0 + [120])), (int_64)4229865212519383040, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $35($8, $11)
	if ( ((int_32)*($12 + [104]) == (int_32)$8) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [16953])
	$13 = CALL $31($0, ( (int_64)97 ? (int_64)100 : ((int_64)$2 == (int_64)9129246498374965568) ), $1, ($7 + [400]))
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$9 }
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$7 }
	$14 = $5
	if ( (uint_64)($13 <= $5) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_64)$13 <= (uint_64)$5) ){ goto $label$7 }
	$14 = (int_64))((int_64)99 - $5)
	
.LABEL $label$8
	$15 = *($3 + [8])
	$16 = ((int_64)((int_64)*($3) * (int_64)98) / (int_64)((int_64)$14 & (int_64)255))
	if ( (uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$10 }
	CALL eosio_assert([0], [17493])
	
.LABEL $label$10
	$14 = (uint_64)$15 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$17 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$14 = $17
	$9 = $11
	goto $label$12 
	
.LABEL $label$13
	$14 = $17
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$14 }
	
.LABEL $label$12
	$18 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$7
	$15 = *($3 + [8])
	$14 = (uint_64)$15 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$17 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$14 = $17
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	$14 = $17
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$19 }
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$16 }
	
.LABEL $label$17
	$16 = (int_64)0
	$18 = [0]
	goto $label$5 
	
.LABEL $label$15
	$18 = [0]
	CALL eosio_assert([0], [17542])
	$16 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [17542])
	$18 = [1]
	
.LABEL $label$5
	$19 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$21 }
	$20 = (int_64)-9223372036854775808
	goto $label$20 
	
.LABEL $label$21
	$20 = (Rounds 0)($19)
	
.LABEL $label$20
	if ( (uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$22 }
	CALL eosio_assert([0], [17493])
	
.LABEL $label$22
	$14 = (uint_64)$15 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$17 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$14 = $17
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$14 = $17
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$27 }
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert([0], [17542])
	
.LABEL $label$23
	$14 = *($0)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$11 = CALL $121([16976])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$33 }
	*($7 + [256]) = ($11 << [1])
	$10 = (($7 + [256]) | [1])
	if ( $11 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($7 + [256]) = ($9 | [1])
	*($7 + [264]) = $10
	*($7 + [260]) = $11
	
.LABEL $label$32
	CALL memcpy($10, [16976], $11)
	
.LABEL $label$31
	*(($10 + $11)) = [0]
	$17 = *($7 + [256])
	*($7 + [256]) = (int_64)0
	$10 = *($7 + [264])
	*($7 + [264]) = [0]
	$21 = *($0)
	*(($11 = CALL _Znwj([16]))) = $14
	*($11 + [8]) = (int_64)3617214756542218240
	*(($7 + [88])) = $15
	*(($9 = ($7 + [104]))) = $10
	*($7 + [272]) = $11
	*($7 + [64]) = $21
	*($7 + [72]) = (int_64)7391968495235147408
	*($7 + [80]) = $20
	*($7 + [96]) = $17
	$11 = ($11 + [16])
	*($7 + [280]) = $11
	*($7 + [276]) = $11
	CALL $36((int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]), ($7 + [64]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$34
	$11 = *($7 + [272])
	if ( ($11 == 0) ){ goto $label$35 }
	*($7 + [276]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$35
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($7 + [264])))
	
.LABEL $label$36
	$19 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.004)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$38 }
	$20 = (int_64)-9223372036854775808
	goto $label$37 
	
.LABEL $label$38
	$20 = (Rounds 0)($19)
	
.LABEL $label$37
	$21 = *(($3 + [8]))
	if ( (uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$39 }
	CALL eosio_assert([0], [17493])
	
.LABEL $label$39
	$14 = (uint_64)$21 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$17 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$14 = $17
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$14 = $17
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$44 }
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	CALL eosio_assert([0], [17542])
	
.LABEL $label$40
	$14 = *($0)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$11 = CALL $121([16976])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$47 }
	*($7 + [256]) = ($11 << [1])
	$10 = (($7 + [256]) | [1])
	if ( $11 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($7 + [256]) = ($9 | [1])
	*($7 + [264]) = $10
	*($7 + [260]) = $11
	
.LABEL $label$46
	CALL memcpy($10, [16976], $11)
	
.LABEL $label$45
	*(($10 + $11)) = [0]
	$17 = *($7 + [256])
	*($7 + [256]) = (int_64)0
	$10 = *($7 + [264])
	*($7 + [264]) = [0]
	$22 = *($0)
	*(($11 = CALL _Znwj([16]))) = $14
	*($11 + [8]) = (int_64)3617214756542218240
	*(($7 + [88])) = $21
	*(($9 = ($7 + [104]))) = $10
	*($7 + [272]) = $11
	*($7 + [64]) = $22
	*($7 + [72]) = (int_64)7391968495240292624
	*($7 + [80]) = $20
	*($7 + [96]) = $17
	$11 = ($11 + [16])
	*($7 + [280]) = $11
	*($7 + [276]) = $11
	CALL $36((int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]), ($7 + [64]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$48
	$11 = *($7 + [272])
	if ( ($11 == 0) ){ goto $label$49 }
	*($7 + [276]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$49
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($7 + [264])))
	
.LABEL $label$50
	if ( (*([0] + [8200]) == 0) ){ goto $label$51 }
	$17 = *([0] + [8192])
	goto $label$28 
	
.LABEL $label$51
	$17 = CALL current_time()
	*([0] + [8200]) = [1]
	*([0] + [8192]) = $17
	goto $label$28 
	
.LABEL $label$30
	CALL $90(($7 + [256]))
	
.LABEL $label$29
	CALL $90(($7 + [256]))
	
.LABEL $label$28
	$20 = *(($3 + [8]))
	*((($7 + [384]) + [8])) = $20
	*(($11 = (($7 + [336]) + [16]))) = *((($7 + [400]) + [16]))
	*(($10 = (($7 + [336]) + [24]))) = *((($7 + [400]) + [24]))
	$14 = *($3)
	*((($7 + [48]) + [8])) = $20
	*((($7 + [32]) + [8])) = $15
	*($7 + [368]) = $16
	*($7 + [376]) = $15
	*($7 + [336]) = *($7 + [400])
	*($7 + [344]) = *($7 + [408])
	*($7 + [384]) = $14
	*($7 + [48]) = $14
	*($7 + [32]) = $16
	*(($7 + [24])) = *($10)
	*(($7 + [16])) = *($11)
	*($7 + [8]) = *($7 + [344])
	*($7) = *($7 + [336])
	CALL $37($0, $1, $2, $6, ($7 + [48]), ($7 + [32]), $4, $5, $13, $7, $17)
	if ( $12 ){ goto $label$52 }
	CALL eosio_assert([0], [17749])
	CALL eosio_assert([0], [17783])
	
.LABEL $label$52
	$11 = CALL db_next_i64(*($12 + [108]), ($7 + [64]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$53 }
	CALL $35($8, $11)
	
.LABEL $label$53
	CALL $38($8, $12)
	$14 = CALL current_time()
	*(($7 + [300])) = (int_64)0
	*(($7 + [316])) = (int_64)0
	*(($7 + [324])) = (int_64)0
	*($7 + [284]) = [0]
	*($7 + [288]) = [0]
	*($7 + [292 align=4]) = (int_64)0
	*($7 + [308 align=4]) = (int_64)0
	*($7 + [272]) = ((CASTING uint_32)(uint_64 ((uint_64)$14 / (uint_64)(int_64)1000000)) + [60])
	if ( ($18 == 0) ){ goto $label$54 }
	*($7 + [264]) = (int_64)3617214756542218240
	*($7 + [256]) = *($0)
	*($7 + [248]) = (int_64)6138663591592764928
	*($7 + [240]) = (int_64)-3617168760277827584
	*(($7 + [216])) = [0]
	*($7 + [208]) = (int_64)0
	$11 = CALL $121([16977])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$60 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$63 }
	*($7 + [208]) = ($11 << [1])
	$10 = (($7 + [208]) | [1])
	if ( $11 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($7 + [208]) = ($9 | [1])
	*($7 + [216]) = $10
	*($7 + [212]) = $11
	
.LABEL $label$62
	CALL memcpy($10, [16977], $11)
	
.LABEL $label$61
	*(($10 + $11)) = [0]
	CALL $102(($7 + [192]), $1)
	$11 = *($7 + [192])
	$10 = ($11 & [1])
	$11 = CALL $96(($7 + [208]), ( *($7 + [200]) ? (($7 + [192]) | [1]) : $10 ), ( *($7 + [196]) ? uint_32($11 >> [1]) : $10 ))
	$10 = ($11 + [8])
	*((($7 + [224]) + [8])) = *($10)
	*($7 + [224]) = *($11)
	*($11) = (int_64)0
	*($10) = [0]
	*((($7 + [176]) + [8])) = [0]
	*($7 + [176]) = (int_64)0
	$11 = CALL $121([17002])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$59 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$66 }
	*($7 + [176]) = ($11 << [1])
	$9 = (($7 + [176]) | [1])
	$10 = $9
	if ( $11 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($7 + [176]) = ($9 | [1])
	*($7 + [184]) = $10
	*($7 + [180]) = $11
	$9 = (($7 + [176]) | [1])
	
.LABEL $label$65
	CALL memcpy($10, [17002], $11)
	
.LABEL $label$64
	*(($10 + $11)) = [0]
	$11 = *($7 + [176])
	$10 = ($11 & [1])
	$11 = CALL $96(($7 + [224]), ( *($7 + [184]) ? $9 : $10 ), ( *($7 + [180]) ? uint_32($11 >> [1]) : $10 ))
	$14 = *($11)
	*($11) = (int_64)0
	$10 = *($11 + [8])
	*($11 + [8]) = [0]
	*((($7 + [64]) + [24])) = $15
	*((($7 + [64]) + [40])) = $10
	*($7 + [72]) = $2
	*($7 + [64]) = *($0)
	*($7 + [96]) = $14
	*($7 + [80]) = $16
	$10 = *((($7 + [272]) + [40]))
	if ( ((uint_32)$10 >= (uint_32)*(($7 + [316]))) ){ goto $label$71 }
	*($10 + [8]) = *($7 + [240])
	*($10) = *($7 + [248])
	*($10 + [16 align=4]) = (int_64)0
	*(($9 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$12 = ($11 + [16])
	*($9) = $12
	*(($11 + [8])) = *((($7 + [256]) + [8]))
	*($11) = *($7 + [256])
	*(($10 + [20])) = $12
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($7 + [96])
	$9 = ( *((($7 + [64]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$14 = (CASTING uint_64)(uint_32 $9)
	$9 = ($10 + [28])
	
.LOOP $label$72:
	$11 = ($11 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$72 }
	if ( ($11 == 0) ){ goto $label$70 }
	CALL $28($9, $11)
	$9 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$69 
	
.LABEL $label$71
	CALL $39(($7 + [308]), ($7 + [256]), ($7 + [248]), ($7 + [240]), ($7 + [64]))
	$11 = [1]
	if ( (*($7 + [96]) & [1]) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$9 = [0]
	$11 = [0]
	
.LABEL $label$69
	*($7 + [452]) = $11
	*($7 + [448]) = $11
	*($7 + [456]) = $9
	*($7 + [432]) = ($7 + [448])
	*($7 + [440]) = ($7 + [64])
	CALL $40(($7 + [440]), ($7 + [432]))
	*(($11 = (($7 + [272]) + [40]))) = (*($11) + [40])
	$11 = [1]
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$67 }
	
.LABEL $label$68
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$67
	if ( (*($7 + [176]) & $11) ){ goto $label$74 }
	$11 = [1]
	if ( (*($7 + [224]) & [1]) ){ goto $label$73 }
	goto $label$58 
	
.LABEL $label$74
	CALL _ZdlPv(*(($7 + [184])))
	$11 = [1]
	if ( ((*($7 + [224]) & [1]) == 0) ){ goto $label$58 }
	
.LABEL $label$73
	CALL _ZdlPv(*($7 + [232]))
	if ( ((*($7 + [192]) & $11) == 0) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$60
	CALL $90(($7 + [208]))
	
.LABEL $label$59
	CALL $90(($7 + [176]))
	
.LABEL $label$58
	if ( (*($7 + [192]) & $11) ){ goto $label$56 }
	
.LABEL $label$57
	if ( ((*($7 + [208]) & [1]) == 0) ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$56
	CALL _ZdlPv(*(($7 + [200])))
	if ( ((*($7 + [208]) & [1]) == 0) ){ goto $label$54 }
	
.LABEL $label$55
	CALL _ZdlPv(*($7 + [216]))
	
.LABEL $label$54
	if ( ((int_64)$6 == (int_64)7391968495242218784) ){ goto $label$76 }
	if ( (CALL is_account($6) == 0) ){ goto $label$76 }
	$14 = *($3)
	$11 = CALL $121([16727])
	$10 = ($11 <= [8])
	$19 = ((float_64)(CASTING float_64)(int_64 $14) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$81 }
	$20 = (int_64)-9223372036854775808
	if ( ($10 == 0) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$20 = (Rounds 0)($19)
	if ( $10 ){ goto $label$79 }
	
.LABEL $label$80
	CALL eosio_assert([0], [17267])
	goto $label$78 
	
.LABEL $label$79
	if ( $11 ){ goto $label$78 }
	$21 = (int_64)4
	goto $label$77 
	
.LABEL $label$78
	$14 = (int_64)0
	
.LOOP $label$82:
	$10 = *(($11 + [16726]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$83 }
	CALL eosio_assert([0], [17312])
	
.LABEL $label$83
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$82 }
	$21 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	
.LABEL $label$77
	if ( (uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$84 }
	CALL eosio_assert([0], [17493])
	
.LABEL $label$84
	$14 = (uint_64)$21 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$87:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$86 }
	$17 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$88 }
	$14 = $17
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$88
	$14 = $17
	
.LOOP $label$89:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$86 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$89 }
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$86
	CALL eosio_assert([0], [17542])
	
.LABEL $label$85
	*($7 + [264]) = (int_64)3617214756542218240
	*($7 + [256]) = *($0)
	*($7 + [208]) = (int_64)6138663591592764928
	*($7 + [192]) = (int_64)-3617168760277827584
	*(($7 + [232])) = [0]
	*($7 + [224]) = (int_64)0
	$11 = CALL $121([17030])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$75 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$92 }
	*($7 + [224]) = ($11 << [1])
	$10 = (($7 + [224]) | [1])
	if ( $11 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$9 = (($11 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($7 + [224]) = ($9 | [1])
	*($7 + [232]) = $10
	*($7 + [228]) = $11
	
.LABEL $label$91
	CALL memcpy($10, [17030], $11)
	
.LABEL $label$90
	*(($10 + $11)) = [0]
	*((($7 + [64]) + [24])) = $21
	$11 = (($7 + [224]) + [8])
	*((($7 + [64]) + [40])) = *($11)
	*($11) = [0]
	*($7 + [72]) = $6
	*($7 + [80]) = $20
	*($7 + [64]) = *($0)
	*($7 + [96]) = *($7 + [224])
	*($7 + [224]) = (int_64)0
	$10 = *((($7 + [272]) + [40]))
	if ( ((uint_32)$10 >= (uint_32)*(($7 + [316]))) ){ goto $label$96 }
	*($10 + [8]) = *($7 + [192])
	*($10) = *($7 + [208])
	*($10 + [16 align=4]) = (int_64)0
	*(($9 = ($10 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($10 + [16]) = $11
	$12 = ($11 + [16])
	*($9) = $12
	*(($11 + [8])) = *((($7 + [256]) + [8]))
	*($11) = *($7 + [256])
	*(($10 + [20])) = $12
	*($10 + [28 align=4]) = (int_64)0
	*(($10 + [36])) = [0]
	$11 = *($7 + [96])
	$9 = ( *((($7 + [64]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$14 = (CASTING uint_64)(uint_32 $9)
	$9 = ($10 + [28])
	
.LOOP $label$97:
	$11 = ($11 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$97 }
	if ( ($11 == 0) ){ goto $label$95 }
	CALL $28($9, $11)
	$9 = *(($10 + [32]))
	$11 = *(($10 + [28]))
	goto $label$94 
	
.LABEL $label$96
	CALL $39(($7 + [308]), ($7 + [256]), ($7 + [208]), ($7 + [192]), ($7 + [64]))
	goto $label$93 
	
.LABEL $label$95
	$9 = [0]
	$11 = [0]
	
.LABEL $label$94
	*($7 + [452]) = $11
	*($7 + [448]) = $11
	*($7 + [456]) = $9
	*($7 + [248]) = ($7 + [448])
	*($7 + [176]) = ($7 + [64])
	CALL $40(($7 + [176]), ($7 + [248]))
	*(($11 = (($7 + [272]) + [40]))) = (*($11) + [40])
	
.LABEL $label$93
	if ( ((*(($7 + [96])) & [1]) == 0) ){ goto $label$98 }
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$98
	if ( ((*($7 + [224]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($7 + [232])))
	
.LABEL $label$76
	*($7 + [264]) = (int_64)3617214756542218240
	$14 = *($0)
	*($7 + [256]) = $14
	*($7 + [224]) = (int_64)-5003315193367756800
	*((($7 + [64]) + [40])) = $15
	*((($7 + [64]) + [24])) = *(($3 + [8]))
	*(($7 + [152])) = *($7 + [408])
	*(($7 + [160])) = *((($7 + [400]) + [16]))
	*(($7 + [168])) = *((($7 + [400]) + [24]))
	*($7 + [72]) = $2
	*($7 + [64]) = $1
	*($7 + [96]) = $16
	*($7 + [112]) = $4
	*($7 + [120]) = $5
	*($7 + [128]) = $13
	*($7 + [80]) = *($3)
	*($7 + [144]) = *($7 + [400])
	$10 = (($7 + [272]) + [40])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($7 + [316]))) ){ goto $label$100 }
	*($11 + [8]) = (int_64)-5003315193367756800
	*($11) = $14
	*($11 + [16 align=4]) = (int_64)0
	*(($12 = ($11 + [24]))) = [0]
	$9 = CALL _Znwj([16])
	*($11 + [16]) = $9
	$3 = ($9 + [16])
	*($12) = $3
	*(($9 + [8])) = *((($7 + [256]) + [8]))
	*($9) = *($7 + [256])
	*(($11 + [20])) = $3
	*($11 + [28 align=4]) = (int_64)0
	*(($11 + [36])) = [0]
	CALL $28(($11 + [28]), [97])
	$9 = *(($11 + [32]))
	$11 = *($11 + [28])
	*($7 + [452]) = $11
	*($7 + [448]) = $11
	*($7 + [456]) = $9
	*($7 + [192]) = ($7 + [448])
	*($7 + [208]) = ($7 + [64])
	CALL $41(($7 + [208]), ($7 + [192]))
	*($10) = (*($10) + [40])
	goto $label$99 
	
.LABEL $label$100
	CALL $42(($7 + [308]), ($7 + [256]), $0, ($7 + [224]), ($7 + [64]))
	
.LABEL $label$99
	*(($7 + [292])) = [0]
	*($7 + [72]) = (int_64)0
	*($7 + [64]) = $2
	CALL $24(($7 + [272]), ($7 + [64]), *($0), [0])
	CALL $25(($7 + [272]))
	$global$0 = ($7 + [464])
	return (unreachable)
	
.LABEL $label$75
	CALL $90(($7 + [224]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*($4 + [16]) = $2
	*($4) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [144])) = [0]
	*(($4 + [136])) = (int_64)0
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*($4 + [8]) = $1
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $127($2)
	
.LABEL $label$5
	CALL $3($4)
	$global$0 = ($4 + [304])
	return [1]
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [304]) + [8])
	CALL memcpy(($4 + [304]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [24])) = $3
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [144])) = [0]
	*(($4 + [136])) = (int_64)0
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*($4 + [8]) = $1
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [304]) + [8]))
	$1 = *($4 + [304])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $127($2)
	
.LABEL $label$8
	CALL $3($4)
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $116 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $117 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $115($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [17459])
	
.LABEL $label$5
	$4 = CALL $124($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([128])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = $0
	CALL $76(($3 + [32]), $5)
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $127($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $108([11], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $108([11], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_64 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $117($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $107()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $117($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18145]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $116($0, (int_64)0)
	*(CALL $107()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $117($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $117($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $117($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $117($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18145])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $117($0)
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $117($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [18401]))
	$8 = (int_64)0
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $117($0)
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $117($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $116($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18145]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18145]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $117($0) + [18145]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $107()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $107()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $107()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $116($3, (int_64)0)
	$4 = CALL $118($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $64($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $51($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $51($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $65($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [360]) + [24]))) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [392]) = [0]
	*($4 + [400]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [348]) = $2
	*($4 + [344]) = $2
	*($4 + [352]) = ($2 + $7)
	*($4 + [448]) = ($4 + [344])
	*($4 + [32]) = ($4 + [360])
	CALL $61(($4 + [32]), ($4 + [448]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [352])
	*($4 + [16]) = *($4 + [344])
	$10 = *($9)
	*(($3 = (($4 + [416]) + [8]))) = $10
	*(($9 = (($4 + [432]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [432]) = $11
	*($4 + [416]) = $11
	$10 = *($9)
	*((($4 + [448]) + [8])) = $10
	*((($4 + [32]) + [24])) = $10
	*($4 + [32]) = $0
	$11 = *($4 + [432])
	*($4 + [48]) = $11
	*($4 + [448]) = $11
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [112])) = $0
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = (int_64)0
	*(($4 + [136])) = [0]
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*($4 + [64]) = $0
	*($4 + [104]) = $0
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [216])) = [0]
	*(($4 + [208])) = (int_64)0
	*(($4 + [220])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [272])) = $0
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = (int_64)0
	*(($4 + [296])) = [0]
	*($4 + [224]) = $0
	*($4 + [264]) = $0
	*($4 + [40]) = $1
	*($3) = *($8)
	*($4 + [416]) = *($4 + [376])
	$0 = *($4 + [368])
	$1 = *($4 + [360])
	$8 = *($4 + [392])
	$11 = *($4 + [400])
	$12 = *($4 + [408])
	*($9) = *($3)
	*($4 + [432]) = *($4 + [416])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$13 = *((($4 + [432]) + [8]))
	*((($4 + [448]) + [8])) = $13
	*(($4 + [8])) = $13
	$13 = *($4 + [432])
	*($4) = $13
	*($4 + [448]) = $13
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ($8 & [255])), (int_32 $11), (int_64 $12), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $127($2)
	
.LABEL $label$5
	CALL $3(($4 + [32]))
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $107 ()
{
	return [8208]
}

void .FUNC $106 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = *($4 + [12])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	$4 = *($4 + [16])
	*($1 + [40]) = *($4)
	*($1 + [48]) = *($4 + [8])
	if ( (*([0] + [8200]) == 0) ){ goto $label$2 }
	$7 = *([0] + [8192])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL current_time()
	*([0] + [8200]) = [1]
	*([0] + [8192]) = $7
	
.LABEL $label$1
	*($1 + [96]) = $7
	$2 = $2
	$4 = ($2 + [-96])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($2 + [-7])
	CALL $74($3, $1)
	$7 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($5 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $7, $4, [89])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$3 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $28(($7 + [28]), [49])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $75(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $27(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $28($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $29(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [17459])
	
.LABEL $label$5
	$2 = CALL $124($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $63(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $127($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17745])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $28($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [10] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $110($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $110($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $110($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $110($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18064]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $110($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $110($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $110($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [17487])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $66($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [17487])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [17487])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17487])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17482])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$3 = ($4 + [40])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($4 + [48])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17482])
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy($0, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $91(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $91(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17482])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17482])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [40])) = *($2 + [8])
	*($5) = (*($5) + [8])
	*($2 + [8]) = $4
	CALL $81(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $94(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $113(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [16677], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $94(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $94(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $100 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $103($1, $0, [16986])
	CALL $105()
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $121($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $92($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $94(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $113(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [16754], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $94(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $94(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $105 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $104 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $127($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $122(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $122(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $127($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $124($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $124($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*($0) + [48])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$0 = *($0)
	$2 = ($0 + [56])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [64])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [80])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[31]) ){ goto $label$4 }
	CALL eosio_assert([0], [17482])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $69($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $93($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $93($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $90($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17745])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$4 = *($1 + [4])
	$6 = int_32(($4 - $7) >> [4])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $73($1, ($2 - $6))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$4 = ($7 + ($2 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = ($0 + [4])
	$6 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17482])
	$6 = *($2)
	
.LABEL $label$8
	CALL memcpy($7, $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [17482])
	$6 = *($2)
	
.LABEL $label$9
	CALL memcpy(($7 + [8]), $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $69(CALL $72($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [32])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	$6 = ($0 + [8])
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($5, $4, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$3 = ($1 + [48])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [64])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($5, $4, [32])
	$4 = (*($3) + [32])
	*($3) = $4
	$1 = ($1 + [96])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($1, $4, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [32]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $5, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$3 = ($1 + [48])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [64])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [17487])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, $5, [32])
	$4 = (*($3) + [32])
	*($3) = $4
	$1 = ($1 + [96])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [17487])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $28($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $40(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $36 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $28($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [68]) = $7
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $40(($4 + [88]), ($4 + [80]))
	CALL $50(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $106(($4 + [8]))
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9, int_64 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	$11 = ($global$0 - [288])
	$global$0 = $11
	*($11 + [48]) = $3
	*($11 + [56]) = $2
	*($11 + [40]) = $10
	*($11 + [32]) = $1
	*($11 + [31]) = $6
	*($11 + [16]) = $7
	*($11 + [8]) = $8
	$12 = ($0 + [32])
	$14 = *(($0 + [60]))
	$13 = *(($0 + [56]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$2 }
	
.LOOP $label$4:
	$15 = ($14 + [-24])
	$16 = *($15)
	if ( ((int_64)*($16) == (int_64)104) ){ goto $label$3 }
	$14 = $15
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$2 }
	if ( ((int_32)*($16 + [16]) == (int_32)$12) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	goto $label$1 
	
.LABEL $label$2
	$16 = [0]
	$15 = CALL db_find_i64(*($12), *(($0 + [40])), (int_64)7235159550150574080, (int_64)104)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$1 }
	$16 = CALL $8($12, $15)
	if ( ((int_32)*($16 + [16]) == (int_32)$12) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$1
	$17 = ((int_64)((uint_64)*($16 + [8]) % (uint_64)(int_64)50) + (int_64)1)
	*($11) = $17
	$18 = ($0 + [72])
	$14 = *(($0 + [100]))
	$19 = *(($0 + [96]))
	if ( ((int_32)$19 == (int_32)$14) ){ goto $label$9 }
	
.LOOP $label$11:
	$15 = ($14 + [-24])
	$13 = *($15)
	if ( ((int_64)*($13) == (int_64)$17) ){ goto $label$10 }
	$14 = $15
	if ( ((int_32)$19 != (int_32)$15) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$19 == (int_32)$14) ){ goto $label$9 }
	if ( ((int_32)*($13 + [136]) == (int_32)$18) ){ goto $label$12 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$12
	if ( $13 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$15 = CALL db_find_i64(*($18), *(($0 + [80])), (int_64)4297309255767162880, $17)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $43($18, $15)
	if ( ((int_32)*($13 + [136]) == (int_32)$18) ){ goto $label$8 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$8
	$17 = *($0)
	*($11 + [64]) = $0
	*($11 + [80]) = $4
	*($11 + [84]) = $5
	*($11 + [100]) = $9
	*($11 + [68]) = ($11 + [32])
	*($11 + [72]) = ($11 + [56])
	*($11 + [76]) = ($11 + [48])
	*($11 + [88]) = ($11 + [31])
	*($11 + [92]) = ($11 + [16])
	*($11 + [96]) = ($11 + [8])
	*($11 + [104]) = ($11 + [40])
	CALL $44($18, $13, $17, ($11 + [64]))
	$17 = *($0)
	*($11 + [64]) = $11
	if ( $16 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$20 = *($0)
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$13 }
	CALL eosio_assert([0], [17562])
	
.LABEL $label$13
	*(($15 = CALL _Znwj([160])) + [136]) = $18
	*(($14 = (($11 + [240]) + [8]))) = *(($4 + [8]))
	*(($13 = (($11 + [224]) + [8]))) = *(($5 + [8]))
	*(($19 = (($11 + [192]) + [16]))) = *(($9 + [16]))
	*(($18 = (($11 + [192]) + [24]))) = *(($9 + [24]))
	*($11 + [240]) = *($4)
	*($11 + [224]) = *($5)
	*($11 + [192]) = *($9)
	*($11 + [200]) = *(($9 + [8]))
	*($15) = $17
	*(($9 = (($11 + [64]) + [24]))) = *($18)
	*(($18 = (($11 + [64]) + [16]))) = *($19)
	*(($19 = (($11 + [272]) + [8]))) = *($13)
	*(($13 = (($11 + [256]) + [8]))) = *($14)
	*($11 + [72]) = *($11 + [200])
	*($11 + [64]) = *($11 + [192])
	*($11 + [272]) = *($11 + [224])
	*($11 + [256]) = *($11 + [240])
	*($15 + [16]) = $2
	*($15 + [8]) = $1
	*($15 + [24]) = $3
	*($15 + [64]) = $6
	*($15 + [72]) = $7
	*($15 + [80]) = $8
	*(($15 + [40])) = *($13)
	*($15 + [32]) = *($11 + [256])
	*(($15 + [56])) = *($19)
	*($15 + [48]) = *($11 + [272])
	*(($15 + [104])) = *($11 + [72])
	*(($15 + [120])) = *($9)
	*(($15 + [112])) = *($18)
	*($15 + [96]) = *($11 + [64])
	*($15 + [128]) = $10
	*($11 + [200]) = (($11 + [64]) + [121])
	*($11 + [196]) = ($11 + [64])
	*($11 + [192]) = ($11 + [64])
	CALL $45(($11 + [192]), $15)
	$17 = *($15)
	$13 = CALL db_store_i64(*(($0 + [80])), (int_64)4297309255767162880, $20, $17, ($11 + [64]), [121])
	*($15 + [140]) = $13
	$14 = ($0 + [88])
	if ( (uint_64)($17 <= *($14)) ){ goto $label$14 }
	*($14) = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($11 + [192]) = $15
	$17 = *($15)
	*($11 + [64]) = $17
	*($11 + [272]) = $13
	$19 = ($0 + [100])
	$14 = *($19)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [104]))) ){ goto $label$17 }
	*($14 + [8]) = $17
	*($14 + [16]) = $13
	*($11 + [192]) = [0]
	*($14) = $15
	*($19) = ($14 + [24])
	$15 = *($11 + [192])
	*($11 + [192]) = [0]
	if ( $15 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $46(($0 + [96]), ($11 + [192]), ($11 + [64]), ($11 + [272]))
	$15 = *($11 + [192])
	*($11 + [192]) = [0]
	if ( ($15 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv($15)
	
.LABEL $label$15
	$17 = *($0)
	*($11 + [64]) = $11
	if ( $16 ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [17613])
	
.LABEL $label$5
	CALL $47($12, $16, $17, ($11 + [64]))
	$global$0 = ($11 + [288])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*($0) + [48])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert([0], [17487])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$0 = *($0)
	$2 = ($0 + [56])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17487])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [64])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17487])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [80])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[31]) ){ goto $label$4 }
	CALL eosio_assert([0], [17487])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $0, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17482])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [40])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [48])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [56])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [64])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$9 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $4, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [72])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$10
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [80])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [96])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[31]) ){ goto $label$12 }
	CALL eosio_assert([0], [17482])
	$4 = *($3)
	
.LABEL $label$12
	CALL memcpy($5, $4, [32])
	$4 = (*($3) + [32])
	*($3) = $4
	$1 = ($1 + [128])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [17482])
	$4 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($1, $4, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [17459])
	
.LABEL $label$5
	$2 = CALL $124($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	$7 = ($5 + [16])
	$8 = ($2 + [8])
	if ( ((uint_32)($4 + [-8]) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [17482])
	
.LABEL $label$8
	CALL memcpy($7, $8, [32])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $127($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17813])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17858])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [17908])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	$7 = ($global$0 - [144])
	$global$0 = $7
	CALL require_auth(*($0))
	$8 = CALL current_time()
	*(($7 + [108])) = (int_64)0
	*(($7 + [124])) = (int_64)0
	*(($7 + [132])) = (int_64)0
	*($7 + [92]) = [0]
	*($7 + [96]) = [0]
	*($7 + [100 align=4]) = (int_64)0
	*($7 + [116 align=4]) = (int_64)0
	*($7 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($7 + [72]) = (int_64)3617214756542218240
	*($7 + [64]) = *($0)
	*($7 + [56]) = (int_64)-4994130327835885568
	*(($7 + [24])) = *(($3 + [8]))
	*($7 + [8]) = $2
	*($7) = $1
	*($7 + [32]) = $4
	*($7 + [40]) = $5
	*($7 + [48]) = $6
	*($7 + [16]) = *($3)
	CALL $23(($7 + [116]), ($7 + [64]), $0, ($7 + [56]), $7)
	$6 = *($0)
	*($7 + [100]) = [0]
	*($7 + [8]) = (int_64)0
	*($7) = $2
	CALL $24(($7 + [80]), $7, $6, [0])
	CALL $25(($7 + [80]))
	$global$0 = ($7 + [144])
}

int_64 .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [320])
	$global$0 = $4
	*((($4 + [136]) + [32])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$5 = *($0)
	*($4 + [136]) = $5
	*($4 + [144]) = (int_64)6138568292554748624
	$0 = [0]
	$6 = CALL db_find_i64($5, (int_64)6138568292554748624, (int_64)7615828862441619456, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $32(($4 + [136]), $6)
	if ( ((int_32)*($0 + [48]) == (int_32)($4 + [136])) ){ goto $label$1 }
	CALL eosio_assert([0], [17408])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [16929])
	*(($6 = (($4 + [96]) + [24]))) = *(($0 + [40]))
	*(($7 = (($4 + [96]) + [16]))) = *(($0 + [32]))
	*($4 + [104]) = *(($0 + [24]))
	*($4 + [96]) = *($0 + [16])
	*((($4 + [32]) + [24])) = *($6)
	*((($4 + [32]) + [16])) = *($7)
	*($4 + [40]) = *($4 + [104])
	*($4 + [32]) = *($4 + [96])
	*($4 + [316]) = (CALL tapos_block_num() + CALL $fimport$12())
	CALL sha256(($4 + [316]), [4], ($4 + [272]))
	$6 = CALL read_transaction([0], [0])
	$7 = CALL $124($6)
	CALL read_transaction($7, $6)
	CALL sha256($7, $6, ($4 + [240]))
	*(($6 = (($4 + [176]) + [24]))) = *((($4 + [272]) + [24]))
	*(($7 = (($4 + [176]) + [16]))) = *((($4 + [272]) + [16]))
	*((($4 + [176]) + [40])) = *($4 + [248])
	*((($4 + [176]) + [48])) = *((($4 + [240]) + [16]))
	*((($4 + [176]) + [56])) = *((($4 + [240]) + [24]))
	*($4 + [184]) = *($4 + [280])
	*($4 + [176]) = *($4 + [272])
	*($4 + [208]) = *($4 + [240])
	CALL sha256(($4 + [176]), [64], $4)
	*((($4 + [32]) + [56])) = *(($4 + [24]))
	*((($4 + [32]) + [48])) = *(($4 + [16]))
	*((($4 + [32]) + [40])) = *($4 + [8])
	*($4 + [64]) = *($4)
	CALL sha256(($4 + [32]), [64], ($4 + [176]))
	*(($3 + [24])) = *($6)
	*(($3 + [16])) = *($7)
	*(($3 + [8])) = *($4 + [184])
	*($3) = *($4 + [176])
	$1 = ((uint_64)(int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [177]) + (int_64)*($4 + [176])) + (int_64)*($4 + [178])) + (int_64)*($4 + [179])) + (int_64)*($4 + [180])) + (int_64)*($4 + [181])) + (int_64)*($4 + [182])) + (int_64)*($4 + [183])) << (int_64)32) >> (int_64)32) % (uint_64)$1)
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [17749])
	CALL eosio_assert([0], [17783])
	
.LABEL $label$2
	$3 = CALL db_next_i64(*($0 + [52]), ($4 + [272]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL $32(($4 + [136]), $3)
	
.LABEL $label$3
	CALL $33(($4 + [136]), $0)
	$6 = *($4 + [160])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($4 + [164])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($4 + [160]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($4 + [320])
	return $1
}

void .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16608])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16416]
	$3 = (((int_32)$1 * (int_32)[12]) + [16416])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}