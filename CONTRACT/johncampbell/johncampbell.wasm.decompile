(data (i32.const 4) "0b\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "read\00")
(data (i32.const 128) "your call to csurvey\00")
(data (i32.const 160) "Deposit from tipbot\00")
(data (i32.const 192) "get\00")
(data (i32.const 208) "Withdraw from tipbot\00")
(data (i32.const 240) "your call to tip\00")
(data (i32.const 8656) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$5 (param i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "require_auth2" (func $fimport$8 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $24))
(export "free" (func $27))
(export "memcmp" (func $34))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $35 $8 $10 $6 $11)



void .FUNC $29 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $35 ()
{
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8748])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $26($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [8656])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $28($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $25([260], $0)
}

void .FUNC $32 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $30 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	CALL require_auth(*($0))
	CALL prints([208])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [176])
	*([0] + [4]) = $3
	*(($2 = $3) + [140]) = $0
	*($2 + [128]) = *($1)
	*($2 + [132]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	*(($2 + [56])) = [0]
	*(($2 + [60])) = [0]
	*($2 + [64]) = [0]
	*(($2 + [68])) = [0]
	*(($2 + [72])) = [0]
	*($2 + [76]) = [0]
	*(($2 + [80])) = [0]
	*(($2 + [84])) = [0]
	*($2 + [88]) = [0]
	*(($2 + [92])) = [0]
	*(($2 + [96])) = [0]
	*($2 + [100]) = [0]
	*(($2 + [104])) = [0]
	*(($2 + [108])) = [0]
	*($2 + [112]) = [0]
	*(($2 + [116])) = [0]
	*(($2 + [120])) = [0]
	*($2 + [148]) = $1
	*($2 + [144]) = $1
	*($2 + [152]) = ($1 + $0)
	*($2 + [160]) = ($2 + [144])
	*($2 + [168]) = ($2 + [8])
	CALL $13(($2 + [168]), ($2 + [160]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [148]) = ($2 + [128])
	*($2 + [144]) = ($2 + [140])
	CALL $14(($2 + [144]), ($2 + [8]))
	CALL $15(($2 + [8]))
	*([0] + [4]) = ($2 + [176])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	CALL require_auth(*($0))
	CALL prints([240])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [208])
	*([0] + [4]) = $3
	*(($2 = $3) + [172]) = $0
	*($2 + [160]) = *($1)
	*($2 + [164]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	*(($2 + [56])) = [0]
	*(($2 + [60])) = [0]
	*($2 + [64]) = [0]
	*(($2 + [68])) = [0]
	*(($2 + [72])) = [0]
	*($2 + [76]) = [0]
	*(($2 + [80])) = [0]
	*(($2 + [84])) = [0]
	*($2 + [88]) = [0]
	*(($2 + [92])) = [0]
	*(($2 + [96])) = [0]
	*($2 + [100]) = [0]
	*(($2 + [104])) = [0]
	*(($2 + [108])) = [0]
	*($2 + [112]) = [0]
	*(($2 + [116])) = [0]
	*(($2 + [120])) = [0]
	*($2 + [124]) = [0]
	*(($2 + [128])) = [0]
	*(($2 + [132])) = [0]
	*($2 + [136]) = [0]
	*(($2 + [140])) = [0]
	*(($2 + [144])) = [0]
	*($2 + [148]) = [0]
	*(($2 + [152])) = [0]
	*(($2 + [156])) = [0]
	*($2 + [180]) = $1
	*($2 + [176]) = $1
	*($2 + [184]) = ($1 + $0)
	*($2 + [192]) = ($2 + [176])
	*($2 + [200]) = ($2 + [8])
	CALL $20(($2 + [200]), ($2 + [192]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [180]) = ($2 + [160])
	*($2 + [176]) = ($2 + [172])
	CALL $21(($2 + [176]), ($2 + [8]))
	CALL $22(($2 + [8]))
	*([0] + [4]) = ($2 + [208])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [72]) = $0
	if ( ((int_64)$2 > (int_64)4851652691907575807) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4420673658855358464) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-2039333636193107968) ){ goto $label$14 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $9(($9 + [72]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)4851652691907575808) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)5380477996647841792) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $9(($9 + [72]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $7(($9 + [72]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $12(($9 + [72]), ($9 + [32]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	$2 = *($1)
	CALL $33(($3 + [128]), ($1 + [8]))
	CALL $33(($3 + [112]), ($1 + [20]))
	CALL $33(($3 + [96]), ($1 + [32]))
	CALL $33(($3 + [80]), ($1 + [44]))
	CALL $33(($3 + [64]), ($1 + [56]))
	CALL $33(($3 + [48]), ($1 + [68]))
	CALL $33(($3 + [32]), ($1 + [80]))
	CALL $33(($3 + [16]), ($1 + [92]))
	CALL $33($3, ($1 + [104]))
	CALL $16($0, $2, ($3 + [128]), ($3 + [112]), ($3 + [96]), ($3 + [80]), ($3 + [64]), ($3 + [48]), ($3 + [32]), ($3 + [16]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL $29(*($3 + [8]))
	
.LABEL $label$1
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $29(*($3 + [24]))
	
.LABEL $label$2
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $29(*($3 + [40]))
	
.LABEL $label$3
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $29(*($3 + [56]))
	
.LABEL $label$4
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $29(*($3 + [72]))
	
.LABEL $label$5
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $29(*($3 + [88]))
	
.LABEL $label$6
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $29(*($3 + [104]))
	
.LABEL $label$7
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL $29(*($3 + [120]))
	
.LABEL $label$8
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$9 }
	CALL $29(*($3 + [136]))
	
.LABEL $label$9
	*([0] + [4]) = ($3 + [144])
}

int_32 .FUNC $15 (int_32 $0)
{
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$1 }
	CALL $29(*(($0 + [112])))
	
.LABEL $label$1
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$2 }
	CALL $29(*(($0 + [100])))
	
.LABEL $label$2
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$3 }
	CALL $29(*(($0 + [88])))
	
.LABEL $label$3
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$4 }
	CALL $29(*(($0 + [76])))
	
.LABEL $label$4
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$5 }
	CALL $29(*(($0 + [64])))
	
.LABEL $label$5
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$6 }
	CALL $29(*(($0 + [52])))
	
.LABEL $label$6
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $29(*(($0 + [40])))
	
.LABEL $label$7
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL $29(*(($0 + [28])))
	
.LABEL $label$8
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $29(*(($0 + [16])))
	
.LABEL $label$9
	return $0
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$0 = *($0 + [4])
	$12 = *($0 + [4])
	$11 = (*(*($0)) + int_32($12 >> [1]))
	$0 = *($0)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($11) + $0))
	
.LABEL $label$1
	CALL $33(($13 + [128]), $2)
	CALL $33(($13 + [112]), $3)
	CALL $33(($13 + [96]), $4)
	CALL $33(($13 + [80]), $5)
	CALL $33(($13 + [64]), $6)
	CALL $33(($13 + [48]), $7)
	CALL $33(($13 + [32]), $8)
	CALL $33(($13 + [16]), $9)
	CALL $33($13, $10)
	CALL void $11((int_32 $1), (int_64 ($13 + [128])), (int_32 ($13 + [112])), (int_32 ($13 + [96])), (int_32 ($13 + [80])), (int_32 ($13 + [64])), (int_32 ($13 + [48])), (int_32 ($13 + [32])), (int_32 ($13 + [16])), (int_32 $13), (int_32 $0))
	if ( ((*($13) & [1]) == 0) ){ goto $label$2 }
	CALL $29(*($13 + [8]))
	
.LABEL $label$2
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $29(*($13 + [24]))
	
.LABEL $label$3
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $29(*($13 + [40]))
	
.LABEL $label$4
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $29(*($13 + [56]))
	
.LABEL $label$5
	if ( ((*($13 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $29(*($13 + [72]))
	
.LABEL $label$6
	if ( ((*($13 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $29(*($13 + [88]))
	
.LABEL $label$7
	if ( ((*($13 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL $29(*($13 + [104]))
	
.LABEL $label$8
	if ( ((*($13 + [112]) & [1]) == 0) ){ goto $label$9 }
	CALL $29(*($13 + [120]))
	
.LABEL $label$9
	if ( ((*($13 + [128]) & [1]) == 0) ){ goto $label$10 }
	CALL $29(*($13 + [136]))
	
.LABEL $label$10
	*([0] + [4]) = ($13 + [144])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $18($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $31($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $28($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $31($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $29($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $30($7)
	return (unreachable)
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	CALL require_auth(*($0))
	CALL prints([160])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL prints([128])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [112])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $17(*($1), ($3 + [8]))
	CALL $17(*($1), ($3 + [20]))
	CALL $17(*($1), ($3 + [32]))
	CALL $17(*($1), ($3 + [44]))
	CALL $17(*($1), ($3 + [56]))
	CALL $17(*($1), ($3 + [68]))
	CALL $17(*($1), ($3 + [80]))
	CALL $17(*($1), ($3 + [92]))
	CALL $17(*($1), ($3 + [104]))
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [192])
	*([0] + [4]) = $3
	$2 = *($1)
	CALL $33(($3 + [176]), ($1 + [8]))
	CALL $33(($3 + [160]), ($1 + [20]))
	CALL $33(($3 + [144]), ($1 + [32]))
	CALL $33(($3 + [128]), ($1 + [44]))
	CALL $33(($3 + [112]), ($1 + [56]))
	CALL $33(($3 + [96]), ($1 + [68]))
	CALL $33(($3 + [80]), ($1 + [80]))
	CALL $33(($3 + [64]), ($1 + [92]))
	CALL $33(($3 + [48]), ($1 + [104]))
	CALL $33(($3 + [32]), ($1 + [116]))
	CALL $33(($3 + [16]), ($1 + [128]))
	CALL $33($3, ($1 + [140]))
	CALL $23($0, $2, ($3 + [176]), ($3 + [160]), ($3 + [144]), ($3 + [128]), ($3 + [112]), ($3 + [96]), ($3 + [80]), ($3 + [64]), ($3 + [48]), ($3 + [32]), ($3 + [16]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL $29(*($3 + [8]))
	
.LABEL $label$1
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $29(*($3 + [24]))
	
.LABEL $label$2
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $29(*($3 + [40]))
	
.LABEL $label$3
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $29(*($3 + [56]))
	
.LABEL $label$4
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $29(*($3 + [72]))
	
.LABEL $label$5
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $29(*($3 + [88]))
	
.LABEL $label$6
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $29(*($3 + [104]))
	
.LABEL $label$7
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL $29(*($3 + [120]))
	
.LABEL $label$8
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$9 }
	CALL $29(*($3 + [136]))
	
.LABEL $label$9
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	CALL $29(*($3 + [152]))
	
.LABEL $label$10
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$11 }
	CALL $29(*($3 + [168]))
	
.LABEL $label$11
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$12 }
	CALL $29(*($3 + [184]))
	
.LABEL $label$12
	*([0] + [4]) = ($3 + [192])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $17(*($1), ($3 + [8]))
	CALL $17(*($1), ($3 + [20]))
	CALL $17(*($1), ($3 + [32]))
	CALL $17(*($1), ($3 + [44]))
	CALL $17(*($1), ($3 + [56]))
	CALL $17(*($1), ($3 + [68]))
	CALL $17(*($1), ($3 + [80]))
	CALL $17(*($1), ($3 + [92]))
	CALL $17(*($1), ($3 + [104]))
	CALL $17(*($1), ($3 + [116]))
	CALL $17(*($1), ($3 + [128]))
	CALL $17(*($1), ($3 + [140]))
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [192])
	*([0] + [4]) = $16
	$0 = *($0 + [4])
	$15 = *($0 + [4])
	$14 = (*(*($0)) + int_32($15 >> [1]))
	$0 = *($0)
	if ( (($15 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($14) + $0))
	
.LABEL $label$1
	CALL $33(($16 + [176]), $2)
	CALL $33(($16 + [160]), $3)
	CALL $33(($16 + [144]), $4)
	CALL $33(($16 + [128]), $5)
	CALL $33(($16 + [112]), $6)
	CALL $33(($16 + [96]), $7)
	CALL $33(($16 + [80]), $8)
	CALL $33(($16 + [64]), $9)
	CALL $33(($16 + [48]), $10)
	CALL $33(($16 + [32]), $11)
	CALL $33(($16 + [16]), $12)
	CALL $33($16, $13)
	CALL void $14((int_32 $1), (int_64 ($16 + [176])), (int_32 ($16 + [160])), (int_32 ($16 + [144])), (int_32 ($16 + [128])), (int_32 ($16 + [112])), (int_32 ($16 + [96])), (int_32 ($16 + [80])), (int_32 ($16 + [64])), (int_32 ($16 + [48])), (int_32 ($16 + [32])), (int_32 ($16 + [16])), (int_32 $16), (int_32 $0))
	if ( ((*($16) & [1]) == 0) ){ goto $label$2 }
	CALL $29(*($16 + [8]))
	
.LABEL $label$2
	if ( ((*($16 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $29(*($16 + [24]))
	
.LABEL $label$3
	if ( ((*($16 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $29(*($16 + [40]))
	
.LABEL $label$4
	if ( ((*($16 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $29(*($16 + [56]))
	
.LABEL $label$5
	if ( ((*($16 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $29(*($16 + [72]))
	
.LABEL $label$6
	if ( ((*($16 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $29(*($16 + [88]))
	
.LABEL $label$7
	if ( ((*($16 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL $29(*($16 + [104]))
	
.LABEL $label$8
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$9 }
	CALL $29(*($16 + [120]))
	
.LABEL $label$9
	if ( ((*($16 + [128]) & [1]) == 0) ){ goto $label$10 }
	CALL $29(*($16 + [136]))
	
.LABEL $label$10
	if ( ((*($16 + [144]) & [1]) == 0) ){ goto $label$11 }
	CALL $29(*($16 + [152]))
	
.LABEL $label$11
	if ( ((*($16 + [160]) & [1]) == 0) ){ goto $label$12 }
	CALL $29(*($16 + [168]))
	
.LABEL $label$12
	if ( ((*($16 + [176]) & [1]) == 0) ){ goto $label$13 }
	CALL $29(*($16 + [184]))
	
.LABEL $label$13
	*([0] + [4]) = ($16 + [192])
}

int_32 .FUNC $22 (int_32 $0)
{
	if ( ((*($0 + [140]) & [1]) == 0) ){ goto $label$1 }
	CALL $29(*(($0 + [148])))
	
.LABEL $label$1
	if ( ((*($0 + [128]) & [1]) == 0) ){ goto $label$2 }
	CALL $29(*(($0 + [136])))
	
.LABEL $label$2
	if ( ((*($0 + [116]) & [1]) == 0) ){ goto $label$3 }
	CALL $29(*(($0 + [124])))
	
.LABEL $label$3
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$4 }
	CALL $29(*(($0 + [112])))
	
.LABEL $label$4
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$5 }
	CALL $29(*(($0 + [100])))
	
.LABEL $label$5
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $29(*(($0 + [88])))
	
.LABEL $label$6
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$7 }
	CALL $29(*(($0 + [76])))
	
.LABEL $label$7
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$8 }
	CALL $29(*(($0 + [64])))
	
.LABEL $label$8
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$9 }
	CALL $29(*(($0 + [52])))
	
.LABEL $label$9
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $29(*(($0 + [40])))
	
.LABEL $label$10
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $29(*(($0 + [28])))
	
.LABEL $label$11
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $29(*(($0 + [16])))
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [192])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $19($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [112])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $28($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $32($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $29($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [8644])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [8452]
	$1 = (((int_32)$2 * (int_32)[12]) + [8452])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8742]) == 0) ){ goto $label$2 }
	$7 = *([0] + [8744])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [8742]) = [1]
	$7 = ($7 << [16])
	*([0] + [8744]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8744])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [8744]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [8742]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [8742]) = [1]
	$3 = ($3 << [16])
	*([0] + [8744]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8744])
	
.LABEL $label$8
	*([0] + [8744]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $28(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $29($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}