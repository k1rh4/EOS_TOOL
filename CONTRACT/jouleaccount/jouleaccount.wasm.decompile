(data (i32.const 8220) "failed to allocate pages\00JUL\00")
(data (i32.const 8249) "write\00")
(data (i32.const 8255) "string is too long to be a valid symbol_code\00")
(data (i32.const 8300) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8353) "invalid symbol name\00")
(data (i32.const 8376) "\bc \00\00")
(data (i32.const 8380) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8413) "read\00")
(data (i32.const 8418) "get\00")
(data (i32.const 0) "\e8 \00\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$5))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "eosio_assert_code" (func $fimport$7 (param i32 i64)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(export "apply" (func $1))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8422))
(global $global$2 i32 (i32.const 8422))


void .FUNC $18 (int_32 $0)
{
}

void .FUNC $19 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [384])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [324]) = $2
	*($3 + [320]) = $2
	*($3 + [328]) = ($2 + $4)
	*($3 + [312]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$5
	CALL memcpy(($3 + [312]), $2, [8])
	$2 = (*($3 + [324]) + [8])
	*($3 + [324]) = $2
	*($3 + [304]) = (int_64)0
	$4 = (($3 + [320]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$6
	CALL memcpy(($3 + [304]), $2, [8])
	$2 = (*($3 + [324]) + [8])
	*($3 + [324]) = $2
	*($3 + [296]) = (int_64)0
	*($3 + [288]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$7
	CALL memcpy(($3 + [288]), $2, [8])
	$2 = (*($3 + [324]) + [8])
	*($3 + [324]) = $2
	*($3 + [232]) = (int_64)0
	$4 = (($3 + [320]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$8
	CALL memcpy(($3 + [232]), $2, [8])
	*((($3 + [288]) + [8])) = *($3 + [232])
	$2 = (*($3 + [324]) + [8])
	*($3 + [324]) = $2
	*($3 + [280]) = (int_64)0
	*($3 + [272]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$9
	CALL memcpy(($3 + [272]), $2, [8])
	$2 = (*($3 + [324]) + [8])
	*($3 + [324]) = $2
	*($3 + [232]) = (int_64)0
	$4 = (($3 + [320]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$10
	CALL memcpy(($3 + [232]), $2, [8])
	*((($3 + [272]) + [8])) = *($3 + [232])
	$2 = (*($3 + [324]) + [8])
	*($3 + [324]) = $2
	*((($3 + [232]) + [8])) = (int_64)0
	*((($3 + [232]) + [24])) = (int_64)0
	*((($3 + [232]) + [32])) = (int_64)0
	*($3 + [232]) = (int_64)0
	*($3 + [248]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$11
	CALL memcpy(($3 + [232]), $2, [4])
	*($3 + [324]) = (*($3 + [324]) + [4])
	CALL $22(CALL $21(CALL $20(($3 + [320]), (($3 + [232]) | [4])), (($3 + [232]) + [16])), (($3 + [232]) + [28]))
	*((($3 + [192]) + [8])) = (int_64)0
	*((($3 + [192]) + [24])) = (int_64)0
	*((($3 + [192]) + [32])) = (int_64)0
	*($3 + [192]) = (int_64)0
	*($3 + [208]) = (int_64)0
	$2 = *($3 + [324])
	$4 = (($3 + [320]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [8413])
	$2 = *($3 + [324])
	
.LABEL $label$12
	CALL memcpy(($3 + [192]), $2, [4])
	*($3 + [324]) = (*($3 + [324]) + [4])
	CALL $22(CALL $21(CALL $20(($3 + [320]), (($3 + [192]) | [4])), (($3 + [192]) + [16])), (($3 + [192]) + [28]))
	*(($2 = (($3 + [144]) + [8]))) = *($4)
	*($3 + [144]) = *($3 + [320])
	$2 = *($2)
	*((($3 + [336]) + [8])) = $2
	*(($4 = (($3 + [352]) + [8]))) = $2
	$5 = *($3 + [144])
	*($3 + [352]) = $5
	*($3 + [336]) = $5
	$2 = *($4)
	*((($3 + [368]) + [8])) = $2
	*(($3 + [184])) = $2
	*($3 + [160]) = $0
	*($3 + [168]) = $1
	$0 = *($3 + [352])
	*($3 + [176]) = $0
	*($3 + [368]) = $0
	*(($6 = (($3 + [128]) + [8]))) = *((($3 + [288]) + [8]))
	*(($7 = (($3 + [112]) + [8]))) = *((($3 + [272]) + [8]))
	*($3 + [128]) = *($3 + [288])
	*($3 + [112]) = *($3 + [272])
	$0 = *($3 + [304])
	$1 = *($3 + [312])
	$2 = CALL $23(($3 + [72]), ($3 + [232]))
	$4 = CALL $23(($3 + [32]), ($3 + [192]))
	*((($3 + [16]) + [8])) = *($6)
	*(($3 + [8])) = *($7)
	*($3 + [16]) = *($3 + [128])
	*($3) = *($3 + [112])
	CALL $24(($3 + [160]), $1, $0, ($3 + [16]), $3, $2, $4)
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($4 + [32])) = $6
	CALL $10($6)
	
.LABEL $label$13
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($4 + [20])) = $6
	CALL $10($6)
	
.LABEL $label$14
	$6 = *($4 + [4])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($4 + [8])) = $6
	CALL $10($6)
	
.LABEL $label$15
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($2 + [32])) = $4
	CALL $10($4)
	
.LABEL $label$16
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($2 + [20])) = $4
	CALL $10($4)
	
.LABEL $label$17
	$4 = *($2 + [4])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($2 + [8])) = $4
	CALL $10($4)
	
.LABEL $label$18
	$2 = *(($3 + [220]))
	if ( ($2 == 0) ){ goto $label$19 }
	*(($3 + [224])) = $2
	CALL $10($2)
	
.LABEL $label$19
	$2 = *(($3 + [208]))
	if ( ($2 == 0) ){ goto $label$20 }
	*(($3 + [212])) = $2
	CALL $10($2)
	
.LABEL $label$20
	$2 = *($3 + [196])
	if ( ($2 == 0) ){ goto $label$21 }
	*(($3 + [200])) = $2
	CALL $10($2)
	
.LABEL $label$21
	$2 = *(($3 + [260]))
	if ( ($2 == 0) ){ goto $label$22 }
	*(($3 + [264])) = $2
	CALL $10($2)
	
.LABEL $label$22
	$2 = *(($3 + [248]))
	if ( ($2 == 0) ){ goto $label$23 }
	*(($3 + [252])) = $2
	CALL $10($2)
	
.LABEL $label$23
	$2 = *($3 + [236])
	if ( ($2 == 0) ){ goto $label$24 }
	*(($3 + [240])) = $2
	CALL $10($2)
	
.LABEL $label$24
	$global$0 = ($3 + [384])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($8) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [8249])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	if ( ((int_32)(*($8) - $4) > (int_32)[1]) ){ goto $label$6 }
	CALL eosio_assert([0], [8249])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [4]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $17($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $28 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = (*($2 + [4]) - *($2))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = CALL $8($5)
	*(($4 + [16])) = ($5 + ($6 << [4]))
	*($4 + [8]) = $5
	*($4 + [12]) = $5
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $2)
	*($4 + [12]) = ($5 + $2)
	
.LABEL $label$2
	$2 = CALL $42(($4 + [24]), ($4 + [8]), $0, $1, $3)
	CALL $31($2)
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$3 }
	*(($2 + [32])) = $5
	CALL $10($5)
	
.LABEL $label$3
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($2 + [20])) = $5
	CALL $10($5)
	
.LABEL $label$4
	$2 = *($4 + [8])
	if ( ($2 == 0) ){ goto $label$5 }
	*($4 + [12]) = $2
	CALL $10($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $17(($4 + [8]))
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $2) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$5 }
	CALL $47($1, ($6 - $5))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$6 }
	$7 = ($2 + ((int_32)$6 * (int_32)[24]))
	*(($1 + [4])) = $7
	
.LABEL $label$6
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	CALL $48($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $2) / (int_32)[44])
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$5 }
	CALL $49($1, ($6 - $5))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$6 }
	$7 = ($2 + ((int_32)$6 * (int_32)[44]))
	*(($1 + [4])) = $7
	
.LABEL $label$6
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	CALL $50($0, $2)
	$2 = ($2 + [44])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL $8($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $8($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $8($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $17(($0 + [4]))
	
.LABEL $label$2
	CALL $17(($0 + [16]))
	
.LABEL $label$1
	CALL $17(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$4 = *($1 + [4])
	$6 = int_32(($4 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $46($1, ($2 - $6))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$4 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $4
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = ($0 + [4])
	$6 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($5) - $6) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [8413])
	$6 = *($2)
	
.LABEL $label$8
	CALL memcpy($7, $6, [4])
	$6 = (*($2) + [4])
	*($2) = $6
	if ( ((uint_32)(*($5) - $6) > (uint_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [8413])
	$6 = *($2)
	
.LABEL $label$9
	CALL memcpy(($7 + [4]), $6, [2])
	$6 = (*($2) + [2])
	*($2) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $25 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($1 + [8])
	*($1 + [8]) = [0]
	$5 = *($1)
	*($1) = (int_64)0
	$1 = ($2 + [20])
	*(($3 + [20])) = *($1)
	*(($3 + [24])) = *(($2 + [24]))
	*($1) = (int_64)0
	$1 = ($2 + [28])
	$6 = *($1)
	*($1) = [0]
	*($3 + [96]) = $5
	*($3 + [104]) = $4
	*($3) = *($2)
	*($3 + [8]) = *($2 + [8])
	*($3 + [16]) = *($2 + [16])
	*(($3 + [28])) = $6
	$1 = ($2 + [32])
	*(($3 + [32])) = *($1)
	$4 = ($2 + [36])
	*(($3 + [36])) = *($4)
	*($1) = [0]
	*($4) = [0]
	$1 = ($2 + [40])
	$4 = *($1)
	*($1) = [0]
	*(($3 + [40])) = $4
	$1 = ($2 + [44])
	*(($3 + [44])) = *($1)
	$4 = ($2 + [48])
	*(($3 + [48])) = *($4)
	*($1) = [0]
	*($4) = [0]
	$1 = ($2 + [52])
	$4 = *($1)
	*($1) = [0]
	*(($3 + [52])) = $4
	*($3 + [56]) = *($2 + [56])
	$1 = ($2 + [60])
	*(($3 + [60])) = *($1)
	$4 = ($2 + [64])
	*(($3 + [64])) = *($4)
	*($1) = [0]
	*($4) = [0]
	$1 = ($2 + [68])
	$4 = *($1)
	*($1) = [0]
	*(($3 + [68])) = $4
	$4 = ($2 + [72])
	*(($1 = ($3 + [72]))) = *($4)
	$6 = ($2 + [76])
	*(($3 + [76])) = *($6)
	*($4) = [0]
	*($6) = [0]
	$4 = ($2 + [80])
	$6 = *($4)
	*($4) = [0]
	*(($3 + [80])) = $6
	$6 = ($2 + [84])
	*(($4 = ($3 + [84]))) = *($6)
	$8 = ($2 + [88])
	*(($7 = ($3 + [88]))) = *($8)
	*($6) = [0]
	*($8) = [0]
	$2 = ($2 + [92])
	$6 = *($2)
	*($2) = [0]
	*(($3 + [92])) = $6
	CALL $32($0, (int_64)-7297973096368160768, ($3 + [96]), $3)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$1 }
	*($7) = $2
	CALL $10($2)
	
.LABEL $label$1
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [76])) = $2
	CALL $10($2)
	
.LABEL $label$2
	$2 = *(($3 + [60]))
	if ( ($2 == 0) ){ goto $label$3 }
	*(($3 + [64])) = $2
	CALL $10($2)
	
.LABEL $label$3
	$2 = *(($3 + [44]))
	if ( ($2 == 0) ){ goto $label$4 }
	*(($3 + [48])) = $2
	CALL $10($2)
	
.LABEL $label$4
	$2 = *(($3 + [32]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($3 + [36])) = $2
	CALL $10($2)
	
.LABEL $label$5
	$2 = *(($3 + [20]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $2
	CALL $10($2)
	
.LABEL $label$6
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$7 }
	*($3 + [100]) = $2
	CALL $10($2)
	
.LABEL $label$7
	$global$0 = ($3 + [112])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$7 = ($global$0 - [400])
	$global$0 = $7
	CALL require_auth(*($0))
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	*(($8 = CALL $8([16]))) = *($7 + [328])
	*(($8 + [8])) = *($7 + [336])
	*($7 + [288]) = $8
	*($7 + [200]) = $1
	$8 = ($8 + [16])
	*($7 + [296]) = $8
	*($7 + [292]) = $8
	*($7 + [192]) = *($0)
	CALL $23((($7 + [192]) + [16]), $5)
	CALL $23(($7 + [248]), $6)
	CALL $25((int_64)6138663577826885632, ($7 + [288]), ($7 + [192]))
	$8 = *(($7 + [276]))
	if ( ($8 == 0) ){ goto $label$1 }
	*(($7 + [280])) = $8
	CALL $10($8)
	
.LABEL $label$1
	$8 = *(($7 + [264]))
	if ( ($8 == 0) ){ goto $label$2 }
	*(($7 + [268])) = $8
	CALL $10($8)
	
.LABEL $label$2
	$8 = *(($7 + [252]))
	if ( ($8 == 0) ){ goto $label$3 }
	*(($7 + [256])) = $8
	CALL $10($8)
	
.LABEL $label$3
	$8 = *(($7 + [236]))
	if ( ($8 == 0) ){ goto $label$4 }
	*(($7 + [240])) = $8
	CALL $10($8)
	
.LABEL $label$4
	$8 = *(($7 + [224]))
	if ( ($8 == 0) ){ goto $label$5 }
	*(($7 + [228])) = $8
	CALL $10($8)
	
.LABEL $label$5
	$8 = *(($7 + [212]))
	if ( ($8 == 0) ){ goto $label$6 }
	*(($7 + [216])) = $8
	CALL $10($8)
	
.LABEL $label$6
	$8 = *($7 + [288])
	if ( ($8 == 0) ){ goto $label$7 }
	*($7 + [292]) = $8
	CALL $10($8)
	
.LABEL $label$7
	*($7 + [104]) = (int_64)3617214756542218240
	*($7 + [96]) = *($0)
	*((($8 = CALL $8([16])) + [8])) = *($7 + [104])
	*($8) = *($7 + [96])
	$9 = *($0)
	*((($7 + [72]) + [8])) = $1
	*($7 + [344]) = [2048]
	*((($7 + [72]) + [16])) = *($7 + [344])
	$6 = ($8 + [16])
	*($7 + [316]) = $6
	*($7 + [312]) = $8
	*($7 + [320]) = $6
	*($7 + [328]) = $9
	*($7 + [336]) = $1
	*($7 + [72]) = $9
	CALL $26((int_64)6138663577826885632, (int_64)4520896358299381760, ($7 + [312]), ($7 + [72]))
	$8 = *($7 + [312])
	if ( ($8 == 0) ){ goto $label$8 }
	*($7 + [316]) = $8
	CALL $10($8)
	
.LABEL $label$8
	$9 = *($0)
	*($7 + [184]) = (int_64)3617214756542218240
	*($7 + [176]) = $9
	*((($8 = CALL $8([16])) + [8])) = *($7 + [184])
	*($8) = *($7 + [176])
	*(($6 = (($7 + [160]) + [8]))) = *(($3 + [8]))
	*(($5 = (($7 + [144]) + [8]))) = *(($4 + [8]))
	*($7 + [160]) = *($3)
	*($7 + [144]) = *($4)
	$9 = *($0)
	*(($3 = (($7 + [96]) + [8]))) = *($6)
	*(($4 = (($7 + [312]) + [8]))) = *($5)
	*(($6 = (($7 + [304]) + [4]))) = *((($7 + [137]) + [4]))
	*(($5 = (($7 + [304]) + [6]))) = *((($7 + [137]) + [6]))
	*($7 + [384]) = $8
	$8 = ($8 + [16])
	*($7 + [388]) = $8
	*($7 + [392]) = $8
	*($7 + [96]) = *($7 + [160])
	*($7 + [312]) = *($7 + [144])
	*($7 + [304]) = *($7 + [137 align=1])
	$10 = *($3)
	*((($7 + [328]) + [24])) = $10
	$11 = *($4)
	*((($7 + [328]) + [40])) = $11
	*(($7 + [383])) = *($5)
	*(($7 + [381])) = *($6)
	*($7 + [336]) = $1
	*($7 + [328]) = $9
	*($7 + [376]) = [0]
	$12 = *($7 + [96])
	*($7 + [344]) = $12
	$13 = *($7 + [312])
	*($7 + [360]) = $13
	*($7 + [377 align=1]) = *($7 + [304])
	*((($7 + [16]) + [40])) = $11
	*(($7 + [48])) = $13
	*((($7 + [16]) + [24])) = $10
	*((($7 + [16]) + [16])) = $12
	*((($7 + [16]) + [8])) = $1
	*(($7 + [64])) = *($7 + [376])
	*($7 + [16]) = $9
	CALL $27((int_64)6138663577826885632, (int_64)5378043540636893184, ($7 + [384]), ($7 + [16]))
	$8 = *($7 + [384])
	if ( ($8 == 0) ){ goto $label$9 }
	*($7 + [388]) = $8
	CALL $10($8)
	
.LABEL $label$9
	$9 = *($0)
	*($7 + [104]) = (int_64)3617214756542218240
	*($7 + [96]) = $9
	*((($8 = CALL $8([16])) + [8])) = *($7 + [104])
	*($8) = *($7 + [96])
	*(($7 + [8])) = $2
	$3 = ($8 + [16])
	*($7 + [316]) = $3
	*($7 + [312]) = $8
	*($7 + [320]) = $3
	*($7 + [328]) = $1
	*($7 + [336]) = $2
	*($7) = $1
	CALL $28((int_64)9022140632961197968, (int_64)5031766352605145360, ($7 + [312]), $7)
	$8 = *($7 + [312])
	if ( ($8 == 0) ){ goto $label$10 }
	*($7 + [316]) = $8
	CALL $10($8)
	
.LABEL $label$10
	$8 = CALL $16([8245])
	if ( ($8 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8255])
	goto $label$13 
	
.LABEL $label$14
	if ( ($8 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = (int_64)0
	
.LOOP $label$15:
	$3 = *(($8 + [8244]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8300])
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$15 }
	$10 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$12
	$10 = (int_64)4
	
.LABEL $label$11
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$2 = $9
	$3 = $8
	$8 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$2 = $9
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $3 ){ goto $label$24 }
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$21 }
	
.LABEL $label$22
	$2 = (int_64)0
	$9 = *($0)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL eosio_assert([0], [8353])
	$2 = (int_64)0
	$9 = *($0)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$18 }
	
.LABEL $label$19
	*(($7 + [184])) = [0]
	*($7 + [176]) = $2
	*($7 + [176]) = [0]
	$8 = (($7 + [176]) | [1])
	goto $label$17 
	
.LABEL $label$18
	$3 = [0]
	$4 = *([0] + [8376])
	
.LOOP $label$26:
	*((($7 + [328]) + ($8 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$3 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$25 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$26 }
	
.LABEL $label$25
	*(($7 + [184])) = [0]
	*($7 + [176]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$28 }
	*($7 + [176]) = ($3 << [1])
	$4 = (($7 + [176]) | [1])
	goto $label$27 
	
.LABEL $label$28
	$0 = (($3 + [16]) & [-16])
	$4 = CALL $8($0)
	*($7 + [176]) = ($0 | [1])
	*($7 + [184]) = $4
	*($7 + [180]) = $3
	
.LABEL $label$27
	$0 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$29:
	*(($4 + $8)) = *((($7 + [328]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$29 }
	$8 = ($4 + $3)
	
.LABEL $label$17
	*($8) = [0]
	*((($7 + [328]) + [24])) = $10
	$8 = ($7 + [184])
	*(($7 + [368])) = *($8)
	*($8) = [0]
	*($7 + [336]) = (int_64)9022140632961197968
	*($7 + [328]) = $9
	*($7 + [344]) = (int_64)500000
	*($7 + [96]) = (int_64)9022140666672313616
	*($7 + [104]) = (int_64)-3617168760277827584
	*($7 + [360]) = *($7 + [176])
	*($7 + [176]) = (int_64)0
	*(($8 = CALL $8([16]))) = $9
	*($8 + [8]) = (int_64)3617214756542218240
	*((($7 + [96]) + [36])) = [0]
	$3 = ($8 + [16])
	*((($7 + [96]) + [24])) = $3
	*(($7 + [116])) = $3
	*($7 + [112]) = $8
	*($7 + [124 align=4]) = (int_64)0
	$8 = *($7 + [360])
	$3 = ( *((($7 + [328]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($3 + [32])
	$2 = (CASTING uint_64)(uint_32 $3)
	$3 = ($7 + [124])
	
.LOOP $label$30:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$30 }
	if ( ($8 == 0) ){ goto $label$32 }
	CALL $29($3, $8)
	$3 = *(($7 + [128]))
	$8 = *(($7 + [124]))
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	$8 = [0]
	
.LABEL $label$31
	*($7 + [316]) = $8
	*($7 + [312]) = $8
	*($7 + [320]) = $3
	*($7 + [304]) = ($7 + [312])
	*($7 + [384]) = ($7 + [328])
	CALL $30(($7 + [384]), ($7 + [304]))
	CALL $31(($7 + [96]))
	$8 = *($7 + [124])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($7 + [128])) = $8
	CALL $10($8)
	
.LABEL $label$33
	$8 = *($7 + [112])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($7 + [116])) = $8
	CALL $10($8)
	
.LABEL $label$34
	if ( ((*(($7 + [360])) & [1]) == 0) ){ goto $label$35 }
	CALL $10(*(($7 + [368])))
	
.LABEL $label$35
	$global$0 = ($7 + [400])
}

void .FUNC $27 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $8($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $29(($4 + [52]), [49])
	$5 = ($4 + [56])
	$7 = *($5)
	$2 = *($4 + [52])
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = $7
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $41(($4 + [88]), ($4 + [80]))
	CALL $31(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$4 }
	*($5) = $7
	CALL $10($7)
	
.LABEL $label$4
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [44])) = $7
	CALL $10($7)
	
.LABEL $label$5
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$6 }
	*($4 + [12]) = $7
	CALL $10($7)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $17(($4 + [8]))
}

void .FUNC $26 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $8($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*((($4 + [24]) + [20])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $29(($4 + [52]), [20])
	$5 = ($4 + [56])
	$7 = *($5)
	$2 = *($4 + [52])
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = $7
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $40(($4 + [88]), ($4 + [80]))
	CALL $31(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$4 }
	*($5) = $7
	CALL $10($7)
	
.LABEL $label$4
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [44])) = $7
	CALL $10($7)
	
.LABEL $label$5
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$6 }
	*($4 + [12]) = $7
	CALL $10($7)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $17(($4 + [8]))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[44]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[44])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[97612894]) ){ goto $label$3 }
	$3 = [97612893]
	$2 = ((int_32)($2 - $4) / (int_32)[44])
	if ( ((uint_32)$2 > (uint_32)[48806445]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8(((int_32)$3 * (int_32)[44]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [4 align=4]) = (int_64)0
	*(($3 + [36])) = (int_64)0
	*(($3 + [28])) = (int_64)0
	*(($3 + [20])) = (int_64)0
	*(($3 + [12])) = (int_64)0
	*($3) = [0]
	$3 = (*($0) + [44])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $17($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[44]))
	$5 = ($2 + ((int_32)$5 * (int_32)[44]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	*(($3 + [36])) = (int_64)0
	*(($3 + [28])) = (int_64)0
	*(($3 + [20])) = (int_64)0
	*(($3 + [12])) = (int_64)0
	*(($3 + [4])) = (int_64)0
	$3 = ($3 + [44])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[44]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-44]) * (int_32)[44]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $10($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8413])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8413])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8413])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [2])
	*(($2 = ($0 + [4]))) = (*($2) + [2])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8249])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	*($0 + [16 align=4]) = *($1)
	*($5) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $29(($0 + [28]), [16])
	$1 = *($0 + [28])
	$5 = (*(($0 + [32])) - $1)
	if ( ((int_32)$5 > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	
.LABEL $label$1
	CALL memcpy($1, $4, [8])
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)($5 + [-8]) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	
.LABEL $label$2
	CALL memcpy($1, $4, [8])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8249])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8249])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [40]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8249])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$1 = *($1)
	*($2 + [8]) = *($4 + [48])
	$4 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [8249])
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, ($2 + [8]), [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $17($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = ($5 + [8])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [-8])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $10($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [3])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$7 }
	$3 = int_32($2 >> [2])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $8(($3 << [3]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	$3 = (*($0) + [8])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $17($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [3]))
	$5 = ($2 + ($5 << [3]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	$3 = ($3 + [8])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [3]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8249])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8249])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $0 ()
{
	CALL $4()
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL $0()
	CALL $19($0, $1)
	CALL eosio_assert_code([0], (int_64)8000000000000000000)
	CALL eosio_assert_code([0], (int_64)8000000000000000001)
	CALL $18([0])
	((int_64)$0 == (int_64)$1)
	((int_64)5031766155849629696 == (int_64)$2)
	((int_64)$0 != (int_64)6138663577826885632)
	((int_64)6138663577826885632 == (int_64)$1)
	((int_64)-6569208335818555392 == (int_64)$2)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $17 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$0 = *($3 + [4])
	$3 = *($0)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$0 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($0, $1, [4])
	$0 = (*($4) + [4])
	*(($4 = ($3 + [4]))) = $0
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [8])) - *($1 + [4])) / (int_32)[44]))
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*(($3 + [8])) - $0) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$0 = *($4)
	
.LABEL $label$3
	CALL memcpy($0, ($2 + [14]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $7 ){ goto $label$2 }
	$6 = *(($1 + [8]))
	$4 = *(($1 + [4]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $37($3, $4)
	$4 = ($4 + [44])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	$0 = *(($3 + [4]))
	
.LABEL $label$4
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *($1 + [16])) / (int_32)[24]))
	$8 = ($3 + [8])
	$4 = ($3 + [4])
	
.LOOP $label$6:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($8) - $0) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [8249])
	$0 = *($4)
	
.LABEL $label$7
	CALL memcpy($0, ($2 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $7 ){ goto $label$6 }
	$4 = *(($1 + [20]))
	$0 = *(($1 + [16]))
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $38($3, $0)
	$0 = ($0 + [24])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	
.LABEL $label$8
	CALL $39($3, ($1 + [28]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1)
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$6 = ($1 + [4])
	$7 = ($0 + [8])
	if ( ((int_32)(*($7) - $3) > (int_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $6, [33])
	$3 = (*($3) + [33])
	*(($3 = ($0 + [4]))) = $3
	$6 = ($1 + [40])
	if ( ((int_32)(*($7) - $3) > (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8249])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $6, [2])
	*(($3 = ($0 + [4]))) = (*($3) + [2])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$1 = [20]
	$3 = *(($0 + [20]))
	$2 = *(($0 + [24]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[44]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$1 = ($1 + [35])
	$4 = *($3)
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [44])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = *(($0 + [32]))
	$3 = *(($0 + [36]))
	$5 = ($3 - $2)
	$4 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$6 }
	$1 = ((((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$6
	$2 = *(($0 + [44]))
	$3 = *(($0 + [48]))
	$5 = ($3 - $2)
	$4 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	$1 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$8
	$3 = *(($0 + [60]))
	$2 = *(($0 + [64]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[44]))
	$1 = ($1 + [4])
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($1 + [35])
	$4 = *($3)
	
.LOOP $label$12:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$12 }
	$3 = ($3 + [44])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$11 }
	
.LABEL $label$10
	$2 = *(($0 + [72]))
	$3 = *(($0 + [76]))
	$5 = ($3 - $2)
	$4 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$14 }
	$1 = ((((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$14
	$2 = *(($0 + [84]))
	$3 = *(($0 + [88]))
	$0 = ($3 - $2)
	$4 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	
.LOOP $label$15:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$15 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$16 }
	$1 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$16
	return $1
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $36($1, ($0 + [16]))
	CALL $36($1, ($0 + [56]))
}

void .FUNC $32 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = [0]
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$9 = (*($2 + [4]) - *($2))
	if ( ($9 == 0) ){ goto $label$2 }
	$6 = int_32($9 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $8($9)
	$6 = ($8 + ($6 << [4]))
	*(($4 + [16])) = $6
	*($4 + [8]) = $8
	*($4 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($4 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($4 + [44])) = $7
	*(($4 + [48])) = $6
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $8
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$8 = CALL $34($3)
	if ( ($8 == 0) ){ goto $label$5 }
	$2 = ($4 + [52])
	CALL $29($2, $8)
	$5 = *(($4 + [56]))
	$8 = *($2)
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	*($4 + [68]) = $8
	*($4 + [64]) = $8
	*($4 + [72]) = $5
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $35(($4 + [88]), ($4 + [80]))
	CALL $31(($4 + [24]))
	$8 = *($4 + [52])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($4 + [56])) = $8
	CALL $10($8)
	
.LABEL $label$6
	$8 = *($4 + [40])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($4 + [44])) = $8
	CALL $10($8)
	
.LABEL $label$7
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$8 }
	*($4 + [12]) = $8
	CALL $10($8)
	
.LABEL $label$8
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $17(($4 + [8]))
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $45(CALL $44($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8249])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $43(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $29($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $33(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	*($1) = $3
	$2 = ($1 + [4])
	$7 = ($0 + [8])
	if ( ((uint_32)(*($7) - $8) > (uint_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [8413])
	$8 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $8, [33])
	$2 = (*($2) + [33])
	*(($2 = ($0 + [4]))) = $2
	$8 = ($1 + [40])
	if ( ((uint_32)(*($7) - $2) > (uint_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8413])
	$2 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($8, $2, [2])
	*(($2 = ($0 + [4]))) = (*($2) + [2])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8249])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8249])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((int_32)(*($5) - $3) > (int_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8249])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [2])
	*(($2 = ($0 + [4]))) = (*($2) + [2])
	return $0
}