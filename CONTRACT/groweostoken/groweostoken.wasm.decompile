(data (i32.const 8193) "invalid symbol name\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "invalid supply\00")
(data (i32.const 8314) "max-supply must be positive\00")
(data (i32.const 8342) "token with symbol already exists\00")
(data (i32.const 8375) "memo has more than 256 bytes\00")
(data (i32.const 8404) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8464) "invalid quantity\00")
(data (i32.const 8481) "must issue positive quantity\00")
(data (i32.const 8510) "symbol precision mismatch\00")
(data (i32.const 8536) "quantity exceeds available supply\00")
(data (i32.const 8570) "active\00")
(data (i32.const 8577) "token with symbol does not exist\00")
(data (i32.const 8610) "must retire positive quantity\00")
(data (i32.const 8640) "cannot transfer to self\00")
(data (i32.const 8664) "to account does not exist\00")
(data (i32.const 8690) "unable to find key\00")
(data (i32.const 8709) "must transfer positive quantity\00")
(data (i32.const 8741) "no balance object found\00")
(data (i32.const 8765) "overdrawn balance\00")
(data (i32.const 8783) "symbol does not exist\00")
(data (i32.const 8805) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 8881) "Cannot close because the balance is not zero.\00")
(data (i32.const 8927) "groweostoken\00")
(data (i32.const 8940) "type\00")
(data (i32.const 8945) "wellcome\00")
(data (i32.const 8954) "issue\00")
(data (i32.const 8960) "Wellcome to groweos.io!\00")
(data (i32.const 8984) "payout\00")
(data (i32.const 8991) "GROW\00")
(data (i32.const 8996) "You\'re not a valid player!\00")
(data (i32.const 9023) "type:payout\00")
(data (i32.const 9035) "You don\'t have any referal amount to withdraw.\00")
(data (i32.const 9082) "Thanks for sharing groweos.io\00")
(data (i32.const 9112) "string is too long to be a valid name\00")
(data (i32.const 9150) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9217) "character is not in allowed character set for names\00")
(data (i32.const 9269) "write\00")
(data (i32.const 9275) "string is too long to be a valid symbol_code\00")
(data (i32.const 9320) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9373) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9422) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9473) "error reading iterator\00")
(data (i32.const 9496) "read\00")
(data (i32.const 9501) "cannot create objects in table of another contract\00")
(data (i32.const 9552) "object passed to modify is not in multi_index\00")
(data (i32.const 9598) "cannot modify objects in table of another contract\00")
(data (i32.const 9649) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9708) "attempt to add asset with different symbol\00")
(data (i32.const 9751) "addition underflow\00")
(data (i32.const 9770) "addition overflow\00")
(data (i32.const 9788) "attempt to subtract asset with different symbol\00")
(data (i32.const 9836) "subtraction underflow\00")
(data (i32.const 9858) "subtraction overflow\00")
(data (i32.const 9879) "cannot pass end iterator to modify\00")
(data (i32.const 9914) "cannot pass end iterator to erase\00")
(data (i32.const 9948) "cannot increment end iterator\00")
(data (i32.const 9978) "object passed to erase is not in multi_index\00")
(data (i32.const 10023) "cannot erase objects in table of another contract\00")
(data (i32.const 10073) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10126) "none\00")
(data (i32.const 10131) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "has_auth" (func $fimport$9 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $42))
(export "_ZdlPv" (func $66))
(export "_Znwj" (func $64))
(export "_Znaj" (func $65))
(export "_ZdaPv" (func $67))
(export "_ZnwjSt11align_val_t" (func $68))
(export "_ZnajSt11align_val_t" (func $69))
(export "_ZdlPvSt11align_val_t" (func $70))
(export "_ZdaPvSt11align_val_t" (func $71))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $4 $36 $17 $40 $21 $8 $23 $14 $19)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18552))
(global $global$2 i32 (i32.const 18552))


void .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18540])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18348]
	$3 = (((int_32)$1 * (int_32)[12]) + [18348])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = (int_64)0
	*($1) = (int_64)0
	$5 = *($0 + [4])
	$6 = *($0)
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9275])
	goto $label$2 
	
.LABEL $label$3
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = (int_64)0
	
.LOOP $label$4:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$4 }
	$4 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$1
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$10 = ((int_64)$4 | (int_64)4)
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8193])
	*(($1 + [16])) = $10
	$4 = (int_64)0
	*($1 + [8]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9275])
	goto $label$12 
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$8 = (int_64)0
	
.LOOP $label$14:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$15
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$14 }
	$4 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$11
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$10 = ((int_64)$4 | (int_64)4)
	$7 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$8 = $4
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$20 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$9 = [0]
	
.LABEL $label$16
	CALL eosio_assert($9, [8193])
	*(($1 + [64])) = $10
	$4 = (int_64)0
	*($1 + [56]) = (int_64)0
	$10 = ((int_64)*(*($5)) * (int_64)20)
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [9275])
	goto $label$22 
	
.LABEL $label$23
	if ( ($7 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$8 = (int_64)0
	
.LOOP $label$24:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$24 }
	$4 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$21
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9373])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$12 = ((int_64)$4 | (int_64)4)
	$7 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$8 = $4
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$30 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$9 = [0]
	
.LABEL $label$26
	CALL eosio_assert($9, [8193])
	*(($1 + [32])) = $12
	*($1 + [24]) = $10
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9275])
	goto $label$33 
	
.LABEL $label$34
	if ( ($7 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$8 = (int_64)0
	
.LOOP $label$35:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$35 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$31 
	
.LABEL $label$32
	$10 = (int_64)4
	
.LABEL $label$31
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$8 = $4
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$41 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$9 = [0]
	
.LABEL $label$37
	CALL eosio_assert($9, [8193])
	*(($1 + [48])) = $10
	*($1 + [40]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$45 }
	CALL eosio_assert([0], [9275])
	goto $label$44 
	
.LABEL $label$45
	if ( ($7 == 0) ){ goto $label$43 }
	
.LABEL $label$44
	$8 = (int_64)0
	
.LOOP $label$46:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$47 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$47
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$46 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$42 
	
.LABEL $label$43
	$10 = (int_64)4
	
.LABEL $label$42
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$51
	$8 = $4
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$52 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$9 = [0]
	
.LABEL $label$48
	CALL eosio_assert($9, [8193])
	*(($1 + [80])) = $10
	*($1 + [72]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$56 }
	CALL eosio_assert([0], [9275])
	goto $label$55 
	
.LABEL $label$56
	if ( ($7 == 0) ){ goto $label$54 }
	
.LABEL $label$55
	$8 = (int_64)0
	
.LOOP $label$57:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$58 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$58
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$57 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$53 
	
.LABEL $label$54
	$10 = (int_64)4
	
.LABEL $label$53
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$8 = $4
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$63 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$9 = [0]
	
.LABEL $label$59
	CALL eosio_assert($9, [8193])
	*(($1 + [96])) = $10
	*($1 + [88]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$67 }
	CALL eosio_assert([0], [9275])
	goto $label$66 
	
.LABEL $label$67
	if ( ($7 == 0) ){ goto $label$65 }
	
.LABEL $label$66
	$8 = (int_64)0
	
.LOOP $label$68:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$69 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$69
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$68 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$64 
	
.LABEL $label$65
	$10 = (int_64)4
	
.LABEL $label$64
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$72:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$73 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$73
	$8 = $4
	
.LOOP $label$74:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$71 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$74 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$9 = [0]
	
.LABEL $label$70
	CALL eosio_assert($9, [8193])
	*(($1 + [112])) = $10
	*($1 + [104]) = (int_64)0
	$9 = $2
	$7 = ($9 + [-128])
	$global$0 = $7
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($9 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [72])
	*($3 + [56]) = ($1 + [88])
	*($3 + [60]) = ($1 + [104])
	CALL $62(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [124]) = CALL db_store_i64(*($6 + [8]), (int_64)-4373710607929573376, *(*($0 + [8])), $8, $7, [120])
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$75 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$75
	$global$0 = ($3 + [64])
}

int_32 .FUNC $49 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9496])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9496])
	CALL memcpy($4, ($2 + [8]), [8])
	*($4 + [40]) = *($4)
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9496])
	CALL memcpy((($4 + [32]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$0 = *($4 + [32])
	$1 = *($4 + [48])
	*($4 + [56]) = *($4 + [40])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $90($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9496])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9496])
	CALL memcpy(($4 + [24]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	*($4 + [80]) = *($4 + [24])
	CALL $50(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $54(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $90($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9496])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9496])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9496])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $90($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4993669930013425665) ){ goto $label$9 }
	if ( ((int_64)$2 <= (int_64)4929617502180212735) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4929617502180212736) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3) = *($3 + [136])
	CALL $43($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)-6533262907872903169) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-6566938297963118592) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-6563311103172935680) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [56]) = *($3 + [80])
	CALL $44($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4993669930013425664) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [3]
	*($3 + [16]) = *($3 + [120])
	CALL $45($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-5001309621718501376) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [4]
	*($3 + [64]) = *($3 + [72])
	CALL $46($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [32]) = *($3 + [104])
	CALL $47($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [8]) = *($3 + [128])
	CALL $44($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [92]) = [0]
	*($3 + [88]) = [7]
	*($3 + [48]) = *($3 + [88])
	CALL $45($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [100]) = [0]
	*($3 + [96]) = [8]
	*($3 + [40]) = *($3 + [96])
	CALL $48($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [116]) = [0]
	*($3 + [112]) = [9]
	*($3 + [24]) = *($3 + [112])
	CALL $49($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $82([0])
	$global$0 = ($3 + [144])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9598])
	$5 = *($1)
	$6 = CALL $84([8991])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8990]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [9373])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [8193])
	*(($1 + [32])) = $9
	*($1 + [24]) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9649])
	$8 = $3
	$6 = ($8 + [-48])
	$global$0 = $6
	*($4 + [4]) = $6
	*($4) = $6
	*($4 + [8]) = ($8 + [-11])
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [20])
	*($4 + [40]) = ($1 + [24])
	CALL $60(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [44]), $2, $6, [37])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [48])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [168])) = [0]
	*($2 + [152]) = (int_64)-1
	*($2 + [160]) = (int_64)0
	$3 = *($0)
	*($2 + [136]) = $3
	*($2 + [144]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-7880044397109182464, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $24(($2 + [136]), $5)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($2 + [136])), [9422])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($4 + [24]) > (int_64)0), [9035])
	$3 = *($0)
	*($2 + [40]) = [8570]
	*($2 + [44]) = CALL $84([8570])
	*($2 + [16]) = *($2 + [40])
	*($2 + [88]) = *(CALL $10(($2 + [96]), ($2 + [16])))
	*($2 + [80]) = $3
	$3 = *($0)
	*($2 + [40]) = [8954]
	*($2 + [44]) = CALL $84([8954])
	*($2 + [8]) = *($2 + [40])
	$6 = *(CALL $10(($2 + [96]), ($2 + [8])))
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$5 = CALL $84([9082])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	$7 = ($4 + [24])
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [24]) = ($5 << [1])
	$8 = (($2 + [24]) | [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2 + [24]) = ($9 | [1])
	*($2 + [32]) = $8
	*($2 + [28]) = $5
	
.LABEL $label$4
	CALL memcpy($8, [9082], $5)
	
.LABEL $label$3
	*(($8 + $5)) = [0]
	*(($2 + [56])) = *(($7 + [8]))
	$10 = *($7)
	$5 = (($2 + [24]) + [8])
	*(($2 + [72])) = *($5)
	*($5) = [0]
	*($2 + [40]) = $1
	*($2 + [48]) = $10
	*($2 + [64]) = *($2 + [24])
	*($2 + [24]) = (int_64)0
	$5 = CALL $27(($2 + [96]), ($2 + [80]), $3, $6, ($2 + [40]))
	CALL $28(($2 + [176]), $5)
	$8 = *($2 + [176])
	CALL send_inline($8, (*($2 + [180]) - $8))
	$8 = *($2 + [176])
	if ( ($8 == 0) ){ goto $label$6 }
	*($2 + [180]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($5 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($5 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$8
	if ( ((*(($2 + [64])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$9
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$10
	$1 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9879])
	CALL $41(($2 + [136]), $4, $1)
	$0 = *($2 + [160])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($2 + [164])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($2 + [160]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $72(($2 + [24]))
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9496])
	CALL memcpy(($4 + [40]), $2, [8])
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9496])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	$8 = *($4 + [8])
	*($4 + [48]) = $8
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$0 = *($4 + [40])
	*($4 + [56]) = $8
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $90($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9496])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $90($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $52(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $53(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $90($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $87($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9496])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9496])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9496])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $50(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $51(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $90($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8193])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8375])
	$10 = [0]
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$8 = *($0)
	*($4 + [104]) = $8
	*($4 + [112]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $5(($4 + [104]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [9422])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8404])
	CALL require_auth(*($11 + [32]))
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [8464])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8481])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [8510])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [8536])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [9552])
	CALL eosio_assert(((int_64)*($4 + [104]) == (int_64)CALL $fimport$3()), [9598])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [9708])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9751])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [9770])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [9649])
	*($4 + [80]) = (($4 + [144]) + [40])
	*($4 + [76]) = ($4 + [144])
	*($4 + [72]) = ($4 + [144])
	CALL $6(($4 + [72]), $11)
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [144]), [40])
	$5 = ($4 + [120])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$5 = ($11 + [32])
	$8 = *($5)
	$11 = ($2 + [8])
	*(($10 = (($4 + [88]) + [8]))) = *($11)
	$7 = *($2)
	*((($4 + [8]) + [8])) = *($10)
	*($4 + [88]) = $7
	*($4 + [8]) = *($4 + [88])
	CALL $9($0, $8, ($4 + [8]), $8)
	$8 = *($5)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$15 }
	$7 = *($0)
	*($4 + [72]) = [8570]
	*($4 + [76]) = CALL $84([8570])
	*($4) = *($4 + [72])
	*($4 + [80]) = *(CALL $10(($4 + [144]), $4))
	*($4 + [72]) = $8
	*((($10 = CALL _Znwj([16])) + [8])) = *($4 + [80])
	*($10) = *($4 + [72])
	$8 = *($5)
	*(($5 = (($4 + [24]) + [24]))) = *($11)
	*($4 + [32]) = $1
	*($4 + [24]) = $8
	*($4 + [40]) = *($2)
	CALL $73((($4 + [24]) + [32]), $3)
	*((($4 + [144]) + [24])) = *($5)
	$5 = (($4 + [24]) + [40])
	*(($11 = (($4 + [144]) + [40]))) = *($5)
	*($5) = [0]
	$5 = ($10 + [16])
	*($4 + [196]) = $5
	*($4 + [192]) = $10
	*($4 + [200]) = $5
	*($4 + [144]) = *($4 + [24])
	*($4 + [152]) = *($4 + [32])
	*($4 + [160]) = *($4 + [40])
	*($4 + [176]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $11($7, (int_64)-3617168760277827584, ($4 + [192]), ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$16
	$5 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$17 }
	*($4 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [128])
	if ( ($11 == 0) ){ goto $label$18 }
	$12 = ($4 + [132])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($4 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $11
	
.LABEL $label$19
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$global$0 = ($4 + [208])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $12(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [9422])
	CALL eosio_assert([1], [9879])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [9552])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9598])
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [9708])
	$6 = ((int_64)*($0) + (int_64)*($2))
	*($0) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9751])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9770])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9649])
	CALL eosio_assert([1], [9269])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9269])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$1 + (int_64)1)
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [9501])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	CALL eosio_assert([1], [9269])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9269])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $7)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [72]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $13(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $4 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8193])
	$9 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8299])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8314])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$7 = *($0)
	*($3) = $7
	*($3 + [8]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $5($3, $4) + [40]) == (int_32)$3), [9422])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8342])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$3()), [9501])
	*(($4 = CALL _Znwj([56]))) = (int_64)0
	*($4 + [40]) = $3
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [104]) = (($3 + [48]) + [40])
	*($3 + [100]) = ($3 + [48])
	*($3 + [96]) = ($3 + [48])
	CALL $6(($3 + [96]), $4)
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*(($3 + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = ($3 + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$13 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($3 + [96]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [44]) = $10
	$2 = ($3 + [28])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [32]))) ){ goto $label$16 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [96]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $7(($3 + [24]), ($3 + [96]), ($3 + [48]), ($3 + [44]))
	$4 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [24])
	if ( ($10 == 0) ){ goto $label$17 }
	$2 = ($3 + [28])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $10
	
.LABEL $label$18
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [112])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9473])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $87($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $57(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $90($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $73(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$1 = CALL $73(($2 + [32]), $1)
	CALL $1(($2 + [48]), $1, [44])
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$1
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($2 + [48])
	if ( ((int_32)$3 == (int_32)*($2 + [52])) ){ goto $label$4 }
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$5:
	CALL $1(($2 + [16]), CALL $73($2, $3), [58])
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$6
	$1 = *($2 + [16])
	$6 = $1
	if ( ((int_32)$1 == (int_32)*($2 + [20])) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*($4)) ){ goto $label$10 }
	CALL $73($7, $1)
	*($5) = (*($5) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $2($0, $1)
	
.LABEL $label$9
	$1 = ($1 + [12])
	if ( ((int_32)$1 != (int_32)*($2 + [20])) ){ goto $label$8 }
	$6 = *($2 + [16])
	
.LABEL $label$7
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($1 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$15
	$1 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$14 }
	$1 = *($2 + [16])
	goto $label$12 
	
.LABEL $label$13
	$1 = $6
	
.LABEL $label$12
	*($2 + [20]) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)*($2 + [52])) ){ goto $label$5 }
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $3
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$19
	$3 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	$1 = *($2 + [48])
	goto $label$16 
	
.LABEL $label$17
	$1 = $5
	
.LABEL $label$16
	*($2 + [52]) = $5
	CALL _ZdlPv($1)
	$global$0 = ($2 + [64])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ($4 == 0) ){ goto $label$3 }
	$1 = ($1 + [1])
	goto $label$4 
	
.LABEL $label$5
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	$1 = *($1 + [8])
	
.LABEL $label$4
	
.LOOP $label$6:
	$5 = *($1)
	if ( ((int_32)$5 != (int_32)($2 & [255])) ){ goto $label$10 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$9 }
	CALL $73($6, $3)
	*($5) = (*($5) + [12])
	goto $label$8 
	
.LABEL $label$10
	CALL $78($3, int_32(($5 << [24]) >> [24]))
	goto $label$7 
	
.LABEL $label$9
	CALL $2($0, $3)
	
.LABEL $label$8
	CALL $76($3, [8192])
	
.LABEL $label$7
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	$1 = ($0 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)*(($0 + [8]))) ){ goto $label$3 }
	CALL $73($4, $3)
	*($1) = (*($1) + [12])
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $2($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = [0]
	$5 = *($1 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8193])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($4 <= [257]), [8375])
	$9 = [0]
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$7 = *($0)
	*($3 + [40]) = $7
	*($3 + [48]) = $6
	$10 = [0]
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $5(($3 + [40]), $4)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [40])), [9422])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8577])
	CALL require_auth(*($10 + [32]))
	$8 = *($1)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$9 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [8464])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8610])
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [8510])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [40])), [9552])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$3()), [9598])
	$7 = *($10 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [9788])
	$6 = (int_64)
	*($10) = $6(*($10) - $8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9836])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [9858])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [9649])
	*($3 + [136]) = (($3 + [80]) + [40])
	*($3 + [132]) = ($3 + [80])
	*($3 + [128]) = ($3 + [80])
	CALL $6(($3 + [128]), $10)
	CALL db_update_i64(*($10 + [44]), (int_64)0, ($3 + [80]), [40])
	$4 = ($3 + [56])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$14 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$14
	$7 = *(($10 + [32]))
	*(($4 = (($3 + [24]) + [8]))) = *(($1 + [8]))
	$6 = *($1)
	*((($3 + [8]) + [8])) = *($4)
	*($3 + [24]) = $6
	*($3 + [8]) = *($3 + [24])
	CALL $15($0, $7, ($3 + [8]))
	$10 = *($3 + [64])
	if ( ($10 == 0) ){ goto $label$15 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	CALL _ZdlPv($9)
	
.LABEL $label$19
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($3 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $10
	
.LABEL $label$16
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$global$0 = ($3 + [144])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $16(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [8741]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [8765])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [9552])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9598])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [9788])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9836])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9858])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9649])
	CALL eosio_assert([1], [9269])
	CALL memcpy(($3 + [48]), $0, [8])
	*($3 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9269])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
}

int_32 .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9422])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $12($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9422])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8640])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$7($2), [8664])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $18(($5 + [72]), $8, [8690])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8464])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8709])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [8510])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [8375])
	$11 = CALL has_auth($2)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $15($0, $1, ($5 + [24]))
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $9($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9112])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9217])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9150])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9217])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $11 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $34($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $58(($4 + [72]), ($4 + [64]))
	CALL $28(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $80(($4 + [8]))
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9473])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $87($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9496])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9496])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $90($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9422])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $5($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9422])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth($3)
	$5 = *($2)
	*((($4 + [48]) + [32])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [48]) = *($0)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [56]) = $5)
	CALL eosio_assert(((int_64)*(CALL $18(($4 + [48]), $5, [8783]) + [8]) == (int_64)*($2)), [8510])
	*(($6 = (($4 + [8]) + [32]))) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$7 = *($0)
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($7, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $12(($4 + [8]), $0) + [16]) == (int_32)($4 + [8])), [9422])
	$6 = *($4 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4) = $2
	*($4 + [120]) = $3
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$3()), [9501])
	*($4 + [100]) = $4
	*($4 + [96]) = ($4 + [8])
	*($4 + [104]) = ($4 + [120])
	*(($2 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = ($4 + [8])
	CALL $20(($4 + [96]), $2)
	*($4 + [112]) = $2
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($4 + [96]) = $1)
	$8 = *($2 + [20])
	*($4 + [92]) = $8
	$9 = ($4 + [36])
	$0 = *($9)
	if ( ((uint_32)$0 >= (uint_32)*($6)) ){ goto $label$6 }
	*($0 + [8]) = $1
	*($0 + [16]) = $8
	*($4 + [112]) = [0]
	*($0) = $2
	*($9) = ($0 + [24])
	$2 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $13(($4 + [32]), ($4 + [112]), ($4 + [96]), ($4 + [92]))
	$2 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $6
	
.LABEL $label$7
	*($8) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$6 = *($4 + [72])
	if ( ($6 == 0) ){ goto $label$11 }
	$8 = ($4 + [76])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $6
	
.LABEL $label$12
	*($8) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [128])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $35(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9496])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9496])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $63($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $75($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $75($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $72($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $73(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $73(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $73(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $73(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $73(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $73(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9269])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9269])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9496])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9496])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9269])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9269])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	*($1) = *(*(*($0 + [4])))
	*(($4 = $2) + [16]) = [10126]
	*($4 + [20]) = CALL $84([10126])
	*($4 + [8]) = *($4 + [16])
	*($1 + [8]) = *(CALL $10(($4 + [40]), ($4 + [8])))
	*($1 + [20]) = [100]
	*($1 + [16]) = [1]
	$5 = CALL $84([8991])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8990]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [20])
	$10 = ($1 + [16])
	CALL eosio_assert([1], [9373])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $11
	$7 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8193])
	*(($1 + [32])) = $8
	*($1 + [24]) = (int_64)0
	$7 = $2
	$5 = ($7 + [-48])
	$global$0 = $5
	*($4 + [20]) = $5
	*($4 + [16]) = $5
	*($4 + [24]) = ($7 + [-11])
	*($4 + [32]) = ($4 + [16])
	*($4 + [44]) = ($1 + [8])
	*($4 + [40]) = $1
	*($4 + [48]) = $10
	*($4 + [52]) = $9
	*($4 + [56]) = ($1 + [24])
	CALL $60(($4 + [40]), ($4 + [32]))
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($3 + [8]), (int_64)-7880044397109182464, *(*($0 + [8])), $6, $5, [37])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$12 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [64])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $34($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9269])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9269])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $56(CALL $55($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9269])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9269])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9269])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4 = *($0)
	*($3) = $4
	$0 = [0]
	$2 = CALL db_find_i64($4, $1, (int_64)3607749779137757184, (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $12($3, $2)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$3), [9422])
	
.LABEL $label$1
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [8805])
	CALL eosio_assert((int_64)(*($0) == 0), [8881])
	CALL eosio_assert($2, [9914])
	CALL eosio_assert($2, [9948])
	$2 = CALL db_next_i64(*($0 + [20]), ($3 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($3, $2)
	
.LABEL $label$2
	CALL $22($3, $0)
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])))
	CALL eosio_assert([1], [9373])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8193])
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$9 = $2
	$7 = ($9 + [-16])
	$global$0 = $7
	CALL eosio_assert([1], [9269])
	CALL memcpy($7, $1, [8])
	*($3 + [8]) = *($1 + [8])
	CALL eosio_assert([1], [9269])
	CALL memcpy(($9 + [-8]), ($3 + [8]), [8])
	$6 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6), $7, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [272])
	$global$0 = $5
	*($5 + [240]) = $2
	*($5 + [248]) = $1
	*($5 + [120]) = [8927]
	*($5 + [124]) = CALL $84([8927])
	*($5 + [32]) = *($5 + [120])
	CALL require_auth(*(CALL $10(($5 + [160]), ($5 + [32]))))
	$6 = CALL $73(($5 + [208]), $4)
	CALL $3(($5 + [224]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$1
	$7 = *($3)
	$6 = [0]
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	$1 = $2)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $8
	$9 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $9 ){ goto $label$6 }
	$9 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [8193])
	$9 = [0]
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $1
	$9 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $1
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [8299])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8314])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$13 }
	$6 = uint_32($6 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$6 = *($4 + [4])
	
.LABEL $label$12
	CALL eosio_assert(($6 <= [257]), [8375])
	$10 = *($5 + [224])
	if ( ((int_32)*($5 + [228]) == (int_32)$10) ){ goto $label$14 }
	$6 = *($10)
	$9 = CALL $84([8940])
	if ( ((int_32)$9 != (int_32)( *($10 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$15 }
	if ( CALL $79($10, [0], [-1], [8940], $9) ){ goto $label$15 }
	$6 = *($5 + [224])
	$9 = *($6 + [12])
	$10 = CALL $84([8945])
	if ( ((int_32)$10 != (int_32)( *(($6 + [16])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$15 }
	if ( CALL $79(($6 + [12]), [0], [-1], [8945], $10) ){ goto $label$15 }
	*($5 + [204]) = [0]
	*(($9 = ($5 + [192]))) = [0]
	*($5 + [176]) = (int_64)-1
	*($5 + [184]) = (int_64)0
	$1 = *($0)
	*($5 + [160]) = $1
	*($5 + [168]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)-7880044397109182464, *($5 + [248]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*(CALL $24(($5 + [160]), $6) + [40]) == (int_32)($5 + [160])), [9422])
	goto $label$25 
	
.LABEL $label$26
	$1 = *($0)
	*($5 + [48]) = ($5 + [248])
	*($5 + [64]) = $1
	CALL eosio_assert(((int_64)*($5 + [160]) == (int_64)CALL $fimport$3()), [9501])
	*($5 + [124]) = ($5 + [48])
	*($5 + [120]) = ($5 + [160])
	*($5 + [128]) = ($5 + [64])
	*(($6 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = ($5 + [160])
	CALL $25(($5 + [120]), $6)
	*($5 + [104]) = $6
	$1 = *($6)
	*($5 + [120]) = $1
	$4 = *($6 + [44])
	*($5 + [256]) = $4
	$11 = ($5 + [188])
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)*($9)) ){ goto $label$29 }
	*($10 + [8]) = $1
	*($10 + [16]) = $4
	*($5 + [104]) = [0]
	*($10) = $6
	*($11) = ($10 + [24])
	$6 = *($5 + [104])
	$9 = [0]
	*($5 + [104]) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	CALL $26(($5 + [184]), ($5 + [104]), ($5 + [120]), ($5 + [256]))
	$6 = *($5 + [104])
	$9 = [0]
	*($5 + [104]) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv($6)
	
.LABEL $label$27
	*($5 + [204]) = (*($5 + [204]) + (CASTING uint_32)(uint_64 $7))
	$1 = *($0)
	*($5 + [64]) = [8570]
	*($5 + [68]) = CALL $84([8570])
	*($5 + [24]) = *($5 + [64])
	*($5 + [112]) = *(CALL $10(($5 + [120]), ($5 + [24])))
	*($5 + [104]) = $1
	$1 = *($0)
	*($5 + [64]) = [8954]
	*($5 + [68]) = CALL $84([8954])
	*($5 + [16]) = *($5 + [64])
	$2 = *(CALL $10(($5 + [120]), ($5 + [16])))
	*(($5 + [56])) = $9
	*($5 + [48]) = (int_64)0
	$6 = CALL $84([8960])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$32 }
	*($5 + [48]) = ($6 << [1])
	$9 = (($5 + [48]) | [1])
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$10 = (($6 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [48]) = ($10 | [1])
	*($5 + [56]) = $9
	*($5 + [52]) = $6
	
.LABEL $label$31
	CALL memcpy($9, [8960], $6)
	
.LABEL $label$30
	*(($9 + $6)) = [0]
	*(($5 + [80])) = *(($3 + [8]))
	$6 = (($5 + [48]) + [8])
	*(($5 + [96])) = *($6)
	*($6) = [0]
	*($5 + [64]) = *($5 + [248])
	*($5 + [72]) = *($3)
	*($5 + [88]) = *($5 + [48])
	*($5 + [48]) = (int_64)0
	$6 = CALL $27(($5 + [120]), ($5 + [104]), $1, $2, ($5 + [64]))
	CALL $28(($5 + [256]), $6)
	$9 = *($5 + [256])
	CALL send_inline($9, (*($5 + [260]) - $9))
	$9 = *($5 + [256])
	if ( ($9 == 0) ){ goto $label$33 }
	*($5 + [260]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$33
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$34 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$34
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$35 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$35
	if ( ((*(($5 + [88])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($5 + [96])))
	
.LABEL $label$36
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$25
	$1 = *($5 + [240])
	$9 = *(($5 + [188]))
	$10 = *(($5 + [184]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$38 }
	
.LOOP $label$40:
	$6 = ($9 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$39 }
	$9 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$38 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($5 + [160])), [9422])
	if ( $4 ){ goto $label$21 }
	goto $label$37 
	
.LABEL $label$38
	$6 = CALL db_find_i64(*($5 + [160]), *(($5 + [168])), (int_64)-7880044397109182464, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*(CALL $24(($5 + [160]), $6) + [40]) == (int_32)($5 + [160])), [9422])
	goto $label$21 
	
.LABEL $label$37
	$1 = *($0)
	*($5 + [48]) = ($5 + [240])
	*($5 + [64]) = $1
	CALL eosio_assert(((int_64)*($5 + [160]) == (int_64)CALL $fimport$3()), [9501])
	*($5 + [124]) = ($5 + [48])
	*($5 + [120]) = ($5 + [160])
	*($5 + [128]) = ($5 + [64])
	*(($6 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = ($5 + [160])
	CALL $29(($5 + [120]), $6)
	*($5 + [104]) = $6
	$1 = *($6)
	*($5 + [120]) = $1
	$10 = *($6 + [44])
	*($5 + [256]) = $10
	$4 = ($5 + [188])
	$9 = *($4)
	if ( ((uint_32)$9 >= (uint_32)*(($5 + [192]))) ){ goto $label$41 }
	*($9 + [8]) = $1
	*($9 + [16]) = $10
	*($5 + [104]) = [0]
	*($9) = $6
	*($4) = ($9 + [24])
	$6 = *($5 + [104])
	$9 = [0]
	*($5 + [104]) = [0]
	if ( ($6 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$41
	CALL $26(($5 + [184]), ($5 + [104]), ($5 + [120]), ($5 + [256]))
	$6 = *($5 + [104])
	$9 = [0]
	*($5 + [104]) = [0]
	if ( $6 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $72(($5 + [48]))
	
.LABEL $label$23
	CALL _ZdlPv($6)
	
.LABEL $label$22
	*($5 + [204]) = (*($5 + [204]) + (CASTING uint_32)(uint_64 $7))
	$1 = *($0)
	*($5 + [64]) = [8570]
	*($5 + [68]) = CALL $84([8570])
	*($5 + [8]) = *($5 + [64])
	*($5 + [112]) = *(CALL $10(($5 + [120]), ($5 + [8])))
	*($5 + [104]) = $1
	$1 = *($0)
	*($5 + [64]) = [8954]
	*($5 + [68]) = CALL $84([8954])
	*($5) = *($5 + [64])
	$2 = *(CALL $10(($5 + [120]), $5))
	*(($5 + [56])) = $9
	*($5 + [48]) = (int_64)0
	$6 = CALL $84([8960])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$44 }
	*($5 + [48]) = ($6 << [1])
	$9 = (($5 + [48]) | [1])
	if ( $6 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$10 = (($6 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [48]) = ($10 | [1])
	*($5 + [56]) = $9
	*($5 + [52]) = $6
	
.LABEL $label$43
	CALL memcpy($9, [8960], $6)
	
.LABEL $label$42
	*(($9 + $6)) = [0]
	*(($5 + [80])) = *(($3 + [8]))
	$6 = (($5 + [48]) + [8])
	*(($5 + [96])) = *($6)
	*($6) = [0]
	*($5 + [64]) = *($5 + [240])
	*($5 + [72]) = *($3)
	*($5 + [88]) = *($5 + [48])
	*($5 + [48]) = (int_64)0
	$6 = CALL $27(($5 + [120]), ($5 + [104]), $1, $2, ($5 + [64]))
	CALL $28(($5 + [256]), $6)
	$9 = *($5 + [256])
	CALL send_inline($9, (*($5 + [260]) - $9))
	$9 = *($5 + [256])
	if ( ($9 == 0) ){ goto $label$45 }
	*($5 + [260]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$45
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$46 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$46
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$47 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$47
	if ( ((*(($5 + [88])) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($5 + [96])))
	
.LABEL $label$48
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$21
	*(($9 = ($5 + [152]))) = [0]
	*($5 + [136]) = (int_64)-1
	$1 = *($0)
	*($5 + [120]) = $1
	*($5 + [128]) = $1
	*($5 + [144]) = (int_64)0
	$6 = CALL db_find_i64($1, $1, (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$49 }
	$6 = CALL $30(($5 + [120]), $6)
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)($5 + [120])), [9422])
	if ( ((int_32)*($5 + [204]) <= (int_32)[0]) ){ goto $label$18 }
	$1 = *($0)
	*($5 + [64]) = ($5 + [204])
	CALL eosio_assert([1], [9879])
	CALL $31(($5 + [120]), $6, $1, ($5 + [64]))
	$10 = *($5 + [144])
	if ( $10 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$49
	$1 = *($0)
	*($5 + [40]) = ($5 + [204])
	*($5 + [104]) = $1
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)CALL $fimport$3()), [9501])
	*($5 + [68]) = ($5 + [40])
	*($5 + [64]) = ($5 + [120])
	*($5 + [72]) = ($5 + [104])
	*(($6 = CALL _Znwj([136])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = (int_64)0
	*($6 + [96]) = (int_64)0
	*($6 + [104]) = (int_64)0
	*($6 + [112]) = (int_64)0
	*($6 + [120]) = ($5 + [120])
	CALL $32(($5 + [64]), $6)
	*($5 + [256]) = $6
	$1 = *($6)
	*($5 + [64]) = $1
	$4 = *($6 + [124])
	*($5 + [48]) = $4
	$3 = ($5 + [148])
	$10 = *($3)
	if ( ((uint_32)$10 >= (uint_32)*($9)) ){ goto $label$50 }
	*($10 + [8]) = $1
	*($10 + [16]) = $4
	*($5 + [256]) = [0]
	*($10) = $6
	*($3) = ($10 + [24])
	$6 = *($5 + [256])
	*($5 + [256]) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$50
	CALL $33(($5 + [144]), ($5 + [256]), ($5 + [64]), ($5 + [48]))
	$6 = *($5 + [256])
	*($5 + [256]) = [0]
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $72(($5 + [48]))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$10 = *($5 + [144])
	if ( ($10 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$4 = ($5 + [148])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$52 }
	
.LOOP $label$53:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$54 }
	CALL _ZdlPv($9)
	
.LABEL $label$54
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$53 }
	$6 = *(($5 + [144]))
	goto $label$51 
	
.LABEL $label$52
	$6 = $10
	
.LABEL $label$51
	*($4) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$10 = *($5 + [184])
	if ( ($10 == 0) ){ goto $label$15 }
	$4 = ($5 + [188])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$56 }
	
.LOOP $label$57:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$58 }
	CALL _ZdlPv($9)
	
.LABEL $label$58
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$57 }
	$6 = *(($5 + [184]))
	goto $label$55 
	
.LABEL $label$56
	$6 = $10
	
.LABEL $label$55
	*($4) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$10 = *($5 + [224])
	
.LABEL $label$14
	if ( ($10 == 0) ){ goto $label$59 }
	$9 = *($5 + [228])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$61 }
	
.LOOP $label$62:
	$6 = ($9 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$63
	$9 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$62 }
	$6 = *($5 + [224])
	goto $label$60 
	
.LABEL $label$61
	$6 = $10
	
.LABEL $label$60
	*($5 + [228]) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$59
	$global$0 = ($5 + [272])
	(unreachable)
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9978])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10023])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10073])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	*($1) = *(*(*($0 + [4])))
	*(($4 = $2) + [16]) = [10126]
	*($4 + [20]) = CALL $84([10126])
	*($4 + [8]) = *($4 + [16])
	*($1 + [8]) = *(CALL $10(($4 + [40]), ($4 + [8])))
	*($1 + [20]) = [100]
	*($1 + [16]) = [1]
	$5 = CALL $84([8991])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8990]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [20])
	$10 = ($1 + [16])
	CALL eosio_assert([1], [9373])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $11
	$7 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8193])
	*(($1 + [32])) = $8
	*($1 + [24]) = (int_64)0
	$7 = $2
	$5 = ($7 + [-48])
	$global$0 = $5
	*($4 + [20]) = $5
	*($4 + [16]) = $5
	*($4 + [24]) = ($7 + [-11])
	*($4 + [32]) = ($4 + [16])
	*($4 + [44]) = ($1 + [8])
	*($4 + [40]) = $1
	*($4 + [48]) = $10
	*($4 + [52]) = $9
	*($4 + [56]) = ($1 + [24])
	CALL $60(($4 + [40]), ($4 + [32]))
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($3 + [8]), (int_64)-7880044397109182464, *(*($0 + [8])), $6, $5, [37])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$12 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [64])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9473])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $87($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [20])
	*($3 + [56]) = ($5 + [24])
	CALL $59(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $90($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $34($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9269])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9269])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9269])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $35(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $85(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10136])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $85(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $87($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10136])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $87($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $90($0)
	
.LABEL $label$1
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9496])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9496])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9269])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9269])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10131])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $34($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9496])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9269])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9269])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10148]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10152])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10148]) = [1]
	$2 = ($2 << [16])
	*([0] + [10152]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10152])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10152]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10148]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10148]) = [1]
	$3 = ($3 << [16])
	*([0] + [10152]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10152])
	
.LABEL $label$10
	*([0] + [10152]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $89($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $87 (int_32 $0)
{
	return CALL $88([10156], $0)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $87($1)
	
.LABEL $label$2
	*(CALL $81()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $87(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $90($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $81())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $86($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $82 (int_32 $0)
{
}

int_32 .FUNC $81 ()
{
	return [10140]
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $72 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $90($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $84($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $74($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $74($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	float_64 $16
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9598])
	$5 = *($1)
	$6 = *($3 + [12])
	$7 = *(*($3) + [4])
	*(($8 = $4) + [8]) = [10126]
	*($8 + [12]) = CALL $84([10126])
	*($8) = *($8 + [8])
	$9 = CALL $10(($8 + [16]), $8)
	if ( ((int_64)*($7 + [8]) == (int_64)*($9)) ){ goto $label$1 }
	if ( ((int_64)*(*(*($3 + [4]) + [4]) + [40]) > (int_64)100000000000) ){ goto $label$1 }
	$10 = *(*(*($3) + [4]) + [8])
	$13 = *(($11 + [28]))
	$11 = *($3 + [8])
	$12 = *($11 + [24])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($13 + [-24])
	$9 = *($7)
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$4 }
	$13 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$11), [9422])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$7 = CALL db_find_i64(*($11), *($11 + [8]), (int_64)-7880044397109182464, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $24($11, $7)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$11), [9422])
	
.LABEL $label$2
	$7 = *(($3 + [8]))
	$14 = *($6)
	$13 = *($3 + [16])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9879])
	CALL eosio_assert(((int_32)$7 == (int_32)*($9 + [40])), [9552])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$3()), [9598])
	$10 = *($9)
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)*(($9 + [32]))), [9708])
	$15 = ((int_64)*($9 + [24]) + (int_64)*($13))
	*($9 + [24]) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9751])
	CALL eosio_assert(((int_64)*($9 + [24]) < (int_64)4611686018427387904), [9770])
	CALL eosio_assert(((int_64)$10 == (int_64)*($9)), [9649])
	*($8 + [176]) = (($8 + [16]) + [37])
	*($8 + [172]) = ($8 + [16])
	*($8 + [168]) = ($8 + [16])
	*($8 + [184]) = ($8 + [168])
	*($8 + [140]) = ($9 + [8])
	*($8 + [136]) = $9
	*($8 + [144]) = ($9 + [16])
	*($8 + [148]) = ($9 + [20])
	*($8 + [152]) = ($9 + [24])
	CALL $60(($8 + [136]), ($8 + [184]))
	CALL db_update_i64(*($9 + [44]), $14, ($8 + [16]), [37])
	if ( (uint_64)($10 <= *($7 + [16])) ){ goto $label$6 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$13 = *(($3 + [16]))
	$14 = *($6)
	$9 = *($3 + [20])
	$7 = *(*(($3 + [4])) + [4])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9879])
	CALL eosio_assert(((int_32)$9 == (int_32)*($7 + [120])), [9552])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$3()), [9598])
	$10 = *($7)
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)*(($7 + [48]))), [9708])
	$15 = ((int_64)*($7 + [40]) + (int_64)*($13))
	*($7 + [40]) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9751])
	CALL eosio_assert(((int_64)*($7 + [40]) < (int_64)4611686018427387904), [9770])
	CALL eosio_assert(((int_64)$10 == (int_64)*($7)), [9649])
	*($8 + [176]) = (($8 + [16]) + [120])
	*($8 + [172]) = ($8 + [16])
	*($8 + [168]) = ($8 + [16])
	*($8 + [184]) = ($8 + [168])
	*($8 + [140]) = ($7 + [8])
	*($8 + [136]) = $7
	*($8 + [144]) = ($7 + [24])
	*($8 + [148]) = ($7 + [40])
	*($8 + [152]) = ($7 + [56])
	*($8 + [156]) = ($7 + [72])
	*($8 + [160]) = ($7 + [88])
	*($8 + [164]) = ($7 + [104])
	CALL $62(($8 + [136]), ($8 + [184]))
	CALL db_update_i64(*($7 + [124]), $14, ($8 + [16]), [120])
	if ( (uint_64)($10 <= *($9 + [16])) ){ goto $label$1 }
	*(($9 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($1 + [16]) = [1]
	$16 = ((float_64)(CASTING float_64)(int_64 *(*($3 + [24]))) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)2147483648) ){ goto $label$8 }
	$7 = [-2147483648]
	goto $label$7 
	
.LABEL $label$8
	$7 = (CASTING int_32)(float_64 $16)
	
.LABEL $label$7
	*($1 + [20]) = (*($1 + [20]) + $7)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9649])
	$9 = $4
	$7 = ($9 + [-48])
	$global$0 = $7
	*($8 + [140]) = $7
	*($8 + [136]) = $7
	*($8 + [144]) = ($9 + [-11])
	*($8 + [168]) = ($8 + [136])
	*($8 + [20]) = ($1 + [8])
	*($8 + [16]) = $1
	*($8 + [24]) = ($1 + [16])
	*($8 + [28]) = ($1 + [20])
	*($8 + [32]) = ($1 + [24])
	CALL $60(($8 + [16]), ($8 + [168]))
	CALL db_update_i64(*($1 + [44]), $2, $7, [37])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($8 + [192])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	float_32 $12
	float_64 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [320])
	$global$0 = $4
	*($4 + [168]) = [8927]
	*($4 + [172]) = CALL $84([8927])
	*($4 + [24]) = *($4 + [168])
	CALL require_auth(*(CALL $10(($4 + [216]), ($4 + [24]))))
	$5 = CALL $73(($4 + [272]), $3)
	CALL $3(($4 + [288]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$1
	$6 = *($2 + [8])
	$7 = *($2)
	*($4 + [264]) = $7
	$2 = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	$6 = $8)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $9
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$6 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [8193])
	$5 = [0]
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $6
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [8299])
	CALL eosio_assert(((int_64)*($4 + [264]) > (int_64)0), [8314])
	$2 = *($3)
	if ( ($2 & [1]) ){ goto $label$13 }
	$2 = uint_32($2 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$2 = *($3 + [4])
	
.LABEL $label$12
	CALL eosio_assert(($2 <= [257]), [8375])
	$10 = *($4 + [288])
	if ( ((int_32)*($4 + [292]) == (int_32)$10) ){ goto $label$15 }
	$2 = *($10)
	$5 = CALL $84([8940])
	if ( ((int_32)$5 != (int_32)( *($10 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$16 }
	if ( CALL $79($10, [0], [-1], [8940], $5) ){ goto $label$16 }
	$2 = *($4 + [288])
	$5 = *($2 + [12])
	$10 = CALL $84([8984])
	if ( ((int_32)$10 != (int_32)( *(($2 + [16])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$16 }
	if ( CALL $79(($2 + [12]), [0], [-1], [8984], $10) ){ goto $label$16 }
	*(($5 = ($4 + [248]))) = [0]
	*($4 + [232]) = (int_64)-1
	$6 = *($0)
	*($4 + [216]) = $6
	*($4 + [224]) = $6
	*($4 + [240]) = (int_64)0
	$2 = CALL db_find_i64($6, $6, (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$18 }
	$2 = CALL $30(($4 + [216]), $2)
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)($4 + [216])), [9422])
	*($4 + [212]) = $2
	*($4 + [208]) = ($4 + [216])
	$6 = *($0)
	*($4 + [172]) = ($4 + [264])
	*($4 + [168]) = ($4 + [260])
	CALL eosio_assert([1], [9879])
	CALL $37(($4 + [216]), $2, $6, ($4 + [168]))
	goto $label$17 
	
.LABEL $label$18
	*($4 + [212]) = [0]
	*($4 + [208]) = ($4 + [216])
	$6 = *($0)
	*($4 + [88]) = ($4 + [264])
	*($4 + [104]) = $6
	CALL eosio_assert(((int_64)*($4 + [216]) == (int_64)CALL $fimport$3()), [9501])
	*($4 + [172]) = ($4 + [88])
	*($4 + [168]) = ($4 + [216])
	*($4 + [176]) = ($4 + [104])
	*(($2 = CALL _Znwj([136])) + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	*($2 + [104]) = (int_64)0
	*($2 + [112]) = (int_64)0
	*($2 + [120]) = ($4 + [216])
	CALL $38(($4 + [168]), $2)
	*($4 + [48]) = $2
	$6 = *($2)
	*($4 + [168]) = $6
	$3 = *($2 + [124])
	*($4 + [144]) = $3
	$11 = ($4 + [244])
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)*($5)) ){ goto $label$20 }
	*($10 + [8]) = $6
	*($10 + [16]) = $3
	*($4 + [48]) = [0]
	*($10) = $2
	*($11) = ($10 + [24])
	$2 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	goto $label$19 
	
.LABEL $label$20
	CALL $33(($4 + [240]), ($4 + [48]), ($4 + [168]), ($4 + [144]))
	$2 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	
.LABEL $label$19
	CALL _ZdlPv($2)
	
.LABEL $label$17
	*(($4 + [200])) = [0]
	*($4 + [184]) = (int_64)-1
	*($4 + [192]) = (int_64)0
	$6 = *($0)
	*($4 + [168]) = $6
	*($4 + [176]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-7880044397109182464, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$22 }
	$2 = CALL $24(($4 + [168]), $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($4 + [168])), [9422])
	*($4 + [164]) = $2
	*($4 + [160]) = ($4 + [168])
	goto $label$21 
	
.LABEL $label$22
	*($4 + [164]) = [0]
	*($4 + [160]) = ($4 + [168])
	
.LABEL $label$21
	$12 = *($4 + [260])
	$2 = CALL $84([8991])
	$5 = ($2 <= [8])
	$13 = ((float_64)(PROMOTE float_64)(float_32 $12) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$8 = (int_64)-9223372036854775808
	if ( $5 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = (Rounds 0)($13)
	if ( ($5 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	if ( $2 ){ goto $label$24 }
	$6 = (int_64)0
	goto $label$23 
	
.LABEL $label$25
	CALL eosio_assert([0], [9275])
	
.LABEL $label$24
	$6 = (int_64)0
	
.LOOP $label$28:
	$5 = *(($2 + [8990]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$29
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$28 }
	$6 = ((int_64)$6 << (int_64)8)
	
.LABEL $label$23
	*($4 + [152]) = ((int_64)$6 | (int_64)4)
	*($4 + [144]) = $8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9373])
	$6 = (uint_64)*($4 + [152]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$6 = $8
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$6 = $8
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$34 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$5 = [0]
	
.LABEL $label$30
	CALL eosio_assert($5, [8193])
	CALL eosio_assert(((int_32)*($4 + [164]) != (int_32)[0]), [8996])
	$6 = *($0)
	$2 = *($4 + [164])
	*($4 + [116]) = $0
	*($4 + [108]) = ($4 + [208])
	*($4 + [104]) = ($4 + [160])
	*($4 + [112]) = ($4 + [168])
	*($4 + [120]) = ($4 + [144])
	*($4 + [124]) = ($4 + [216])
	*($4 + [128]) = ($4 + [264])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9879])
	CALL $39(($4 + [168]), $2, $6, ($4 + [104]))
	if ( ((int_32)((float_32)*($4 + [260]) > (float_32)(float_32)0) ^ (int_32)[1]) ){ goto $label$35 }
	$6 = *($0)
	*($4 + [48]) = [8570]
	*($4 + [52]) = CALL $84([8570])
	*($4 + [16]) = *($4 + [48])
	*($4 + [96]) = *(CALL $10(($4 + [104]), ($4 + [16])))
	*($4 + [88]) = $6
	$7 = *($0)
	*($4 + [48]) = [8954]
	*($4 + [52]) = CALL $84([8954])
	*($4 + [8]) = *($4 + [48])
	$14 = *(CALL $10(($4 + [104]), ($4 + [8])))
	$12 = *($4 + [260])
	$2 = CALL $84([8991])
	$5 = ($2 <= [8])
	if ( ((float_32)(float_32)|$12| < (float_32)(float_32)9223372036854775808) ){ goto $label$40 }
	$9 = (int_64)-9223372036854775808
	if ( $5 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$9 = (Rounds 0)($12)
	if ( ($5 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	if ( $2 ){ goto $label$37 }
	$8 = (int_64)0
	goto $label$36 
	
.LABEL $label$38
	CALL eosio_assert([0], [9275])
	
.LABEL $label$37
	$6 = (int_64)0
	
.LOOP $label$41:
	$5 = *(($2 + [8990]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$42 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$42
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$41 }
	$8 = ((int_64)$6 << (int_64)8)
	
.LABEL $label$36
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9373])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_64)$8 | (int_64)4)
	$2 = [0]
	
.LOOP $label$45:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$46 }
	$6 = $8
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$46
	$6 = $8
	
.LOOP $label$47:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$44 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$47 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$5 = [0]
	
.LABEL $label$43
	CALL eosio_assert($5, [8193])
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$2 = CALL $84([9023])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$50 }
	*($4 + [32]) = ($2 << [1])
	$5 = (($4 + [32]) | [1])
	if ( $2 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$10 = (($2 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($4 + [32]) = ($10 | [1])
	*($4 + [40]) = $5
	*($4 + [36]) = $2
	
.LABEL $label$49
	CALL memcpy($5, [9023], $2)
	
.LABEL $label$48
	*(($5 + $2)) = [0]
	*(($4 + [64])) = $15
	$2 = ($4 + [40])
	*(($4 + [80])) = *($2)
	*($2) = [0]
	*($4 + [56]) = $9
	*($4 + [48]) = $1
	*($4 + [72]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$2 = CALL $27(($4 + [104]), ($4 + [88]), $7, $14, ($4 + [48]))
	CALL $28(($4 + [304]), $2)
	$5 = *($4 + [304])
	CALL send_inline($5, (*($4 + [308]) - $5))
	$5 = *($4 + [304])
	if ( ($5 == 0) ){ goto $label$51 }
	*($4 + [308]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$51
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$52 }
	*(($2 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$52
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$53 }
	*(($2 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$53
	if ( ((*(($4 + [72])) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$54
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$35
	$10 = *($4 + [192])
	if ( ($10 == 0) ){ goto $label$55 }
	$3 = ($4 + [196])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$57 }
	
.LOOP $label$58:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$59 }
	CALL _ZdlPv($5)
	
.LABEL $label$59
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$58 }
	$2 = *(($4 + [192]))
	goto $label$56 
	
.LABEL $label$57
	$2 = $10
	
.LABEL $label$56
	*($3) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$55
	$10 = *($4 + [240])
	if ( ($10 == 0) ){ goto $label$16 }
	$3 = ($4 + [244])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$61 }
	
.LOOP $label$62:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$63 }
	CALL _ZdlPv($5)
	
.LABEL $label$63
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$62 }
	$2 = *(($4 + [240]))
	goto $label$60 
	
.LABEL $label$61
	$2 = $10
	
.LABEL $label$60
	*($3) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$10 = *($4 + [288])
	
.LABEL $label$15
	if ( ($10 == 0) ){ goto $label$64 }
	$5 = *($4 + [292])
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$66 }
	
.LOOP $label$67:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$68
	$5 = $2
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$67 }
	$2 = *($4 + [288])
	goto $label$65 
	
.LABEL $label$66
	$2 = $10
	
.LABEL $label$65
	*($4 + [292]) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$64
	$global$0 = ($4 + [320])
	return (unreachable)
	
.LABEL $label$14
	CALL $72(($4 + [32]))
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	float_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [9552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9598])
	$6 = *(($3 + [4]))
	$3 = *($3)
	$7 = *($1)
	$8 = (float_32)20
	$9 = *($1 + [24])
	if ( ((int_64)$9 < (int_64)100000000001) ){ goto $label$1 }
	$8 = (float_32)10
	if ( ((int_64)$9 < (int_64)200000000001) ){ goto $label$1 }
	$8 = (float_32)5
	if ( ((int_64)$9 < (int_64)700000000001) ){ goto $label$1 }
	$8 = (float_32)2.5
	if ( ((int_64)$9 < (int_64)3200000000001) ){ goto $label$1 }
	$8 = ( (float_32)1.25 ? (float_32)0 : ((int_64)$9 < (int_64)5980000000001) )
	
.LABEL $label$1
	$8 = ((float_32)$8 * (float_32)(CASTING float_32)(int_64 *($6)))
	*($3) = $8
	$3 = CALL $84([8991])
	$6 = ($3 <= [8])
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$10 = (int_64)-9223372036854775808
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = (Rounds 0)($8)
	if ( $6 ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( $3 ){ goto $label$3 }
	$11 = (int_64)4
	goto $label$2 
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($3 + [8990]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	$11 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9373])
	$9 = (uint_64)$11 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$9 = $12
	$6 = [1]
	$13 = $3
	$3 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$9 = $12
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$13 = ($3 + [1])
	$3 = $13
	if ( $6 ){ goto $label$13 }
	$6 = [1]
	$3 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	
.LABEL $label$9
	CALL eosio_assert($6, [8193])
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [32]))), [9708])
	$9 = ((int_64)*($1 + [24]) + (int_64)$10)
	*($1 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9751])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9770])
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9649])
	$6 = $4
	$3 = ($6 + [-128])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($6 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [72])
	*($5 + [56]) = ($1 + [88])
	*($5 + [60]) = ($1 + [104])
	CALL $62(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [124]), $2, $3, [120])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$global$0 = ($5 + [64])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $77($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $83(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = (int_64)0
	*($1) = (int_64)0
	$5 = *($0)
	$6 = *(*(*($0 + [4])))
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9275])
	goto $label$2 
	
.LABEL $label$3
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = (int_64)0
	
.LOOP $label$4:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$4 }
	$4 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9373])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$10 = ((int_64)$4 | (int_64)4)
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8193])
	*(($1 + [16])) = $10
	*($1 + [8]) = $6
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9275])
	goto $label$13 
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$8 = (int_64)0
	
.LOOP $label$15:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$15 }
	$4 = ((int_64)$8 << (int_64)8)
	goto $label$11 
	
.LABEL $label$12
	$4 = (int_64)0
	
.LABEL $label$11
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_64)$4 | (int_64)4)
	$7 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$8 = $4
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$21 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = [0]
	
.LABEL $label$17
	CALL eosio_assert($9, [8193])
	*(($1 + [64])) = $6
	$4 = (int_64)0
	*($1 + [56]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9275])
	goto $label$23 
	
.LABEL $label$24
	if ( ($7 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$8 = (int_64)0
	
.LOOP $label$25:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$26
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$25 }
	$4 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$22
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_64)$4 | (int_64)4)
	$7 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$8 = $4
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$31 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$9 = [0]
	
.LABEL $label$27
	CALL eosio_assert($9, [8193])
	*(($1 + [32])) = $6
	*($1 + [24]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$35 }
	CALL eosio_assert([0], [9275])
	goto $label$34 
	
.LABEL $label$35
	if ( ($7 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$8 = (int_64)0
	
.LOOP $label$36:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$37 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$36 }
	$6 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$32 
	
.LABEL $label$33
	$6 = (int_64)4
	
.LABEL $label$32
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$41 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	$8 = $4
	
.LOOP $label$42:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$42 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$9 = [0]
	
.LABEL $label$38
	CALL eosio_assert($9, [8193])
	*(($1 + [48])) = $6
	*($1 + [40]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [9275])
	goto $label$45 
	
.LABEL $label$46
	if ( ($7 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$8 = (int_64)0
	
.LOOP $label$47:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$48
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$47 }
	$6 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$43 
	
.LABEL $label$44
	$6 = (int_64)4
	
.LABEL $label$43
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$8 = $4
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$53 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$9 = [0]
	
.LABEL $label$49
	CALL eosio_assert($9, [8193])
	*(($1 + [80])) = $6
	*($1 + [72]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [9275])
	goto $label$56 
	
.LABEL $label$57
	if ( ($7 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$8 = (int_64)0
	
.LOOP $label$58:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$59
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$58 }
	$6 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$54 
	
.LABEL $label$55
	$6 = (int_64)4
	
.LABEL $label$54
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$8 = $4
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$64 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$9 = [0]
	
.LABEL $label$60
	CALL eosio_assert($9, [8193])
	*(($1 + [96])) = $6
	*($1 + [88]) = (int_64)0
	$7 = CALL $84([8991])
	if ( ($7 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [9275])
	goto $label$67 
	
.LABEL $label$68
	if ( ($7 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$8 = (int_64)0
	
.LOOP $label$69:
	$9 = *(($7 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$70
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$69 }
	$6 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$65 
	
.LABEL $label$66
	$6 = (int_64)4
	
.LABEL $label$65
	CALL eosio_assert([1], [9373])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$8 = $4
	$9 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$8 = $4
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $9 ){ goto $label$75 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$9 = [0]
	
.LABEL $label$71
	CALL eosio_assert($9, [8193])
	*(($1 + [112])) = $6
	*($1 + [104]) = (int_64)0
	$9 = $2
	$7 = ($9 + [-128])
	$global$0 = $7
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($9 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [72])
	*($3 + [56]) = ($1 + [88])
	*($3 + [60]) = ($1 + [104])
	CALL $62(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [124]) = CALL db_store_i64(*($5 + [8]), (int_64)-4373710607929573376, *(*($0 + [8])), $8, $7, [120])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$76 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$76
	$global$0 = ($3 + [64])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9473])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $87($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([136])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [88])
	*($3 + [60]) = ($5 + [104])
	CALL $61(($3 + [32]), ($3 + [24]))
	*($5 + [124]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $90($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [9552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9598])
	$6 = *($1)
	$7 = *(*($3))
	$3 = CALL $84([8991])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($3 + [8990]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9373])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $11
	$9 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [8193])
	CALL eosio_assert(((int_64)$10 == (int_64)*(($1 + [16]))), [9708])
	$8 = ((int_64)*($1 + [8]) + (int_64)$7)
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9751])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9770])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9649])
	$9 = $4
	$3 = ($9 + [-128])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($9 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [72])
	*($5 + [56]) = ($1 + [88])
	*($5 + [60]) = ($1 + [104])
	CALL $62(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [124]), $2, $3, [120])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($5 + [64])
}