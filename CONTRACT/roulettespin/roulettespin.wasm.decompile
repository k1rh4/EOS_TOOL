(data (i32.const 4) "\e0v\00\00")
(data (i32.const 16) "Read transaction failed\00")
(data (i32.const 48) "r=\00")
(data (i32.const 52) "\00\00\00\00\00\00\00\00\0c\00\00\00\0d\00\00\00")
(data (i32.const 68) "\00\00\00\00\00\00\00\00\0e\00\00\00\0f\00\00\00")
(data (i32.const 84) "\00\00\00\00\00\00\00\00\10\00\00\00\11\00\00\00")
(data (i32.const 100) "\00\00\00\00\00\00\00\00\12\00\00\00\13\00\00\00")
(data (i32.const 116) "\00\00\00\00\00\00\00\00\14\00\00\00\15\00\00\00")
(data (i32.const 132) "\00\00\00\00\00\00\00\00\16\00\00\00\17\00\00\00")
(data (i32.const 148) "\00\00\00\00\00\00\00\00\18\00\00\00\19\00\00\00")
(data (i32.const 164) "\00\00\00\00\00\00\00\00\1a\00\00\00\1b\00\00\00")
(data (i32.const 180) "\00\00\00\00\00\00\00\00\1c\00\00\00\1d\00\00\00")
(data (i32.const 196) "\00\00\00\00\00\00\00\00\1e\00\00\00\1f\00\00\00")
(data (i32.const 212) "\00\00\00\00\00\00\00\00 \00\00\00!\00\00\00")
(data (i32.const 228) "\00\00\00\00\00\00\00\00\"\00\00\00#\00\00\00")
(data (i32.const 244) "\00\00\00\00\00\00\00\00$\00\00\00%\00\00\00")
(data (i32.const 260) "\00\00\00\00\00\00\00\00&\00\00\00\'\00\00\00")
(data (i32.const 276) "\00\00\00\00\00\00\00\00(\00\00\00)\00\00\00")
(data (i32.const 304) "eosio\00")
(data (i32.const 320) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 384) "error reading iterator\00")
(data (i32.const 416) "read\00")
(data (i32.const 432) "eosio.token\00")
(data (i32.const 448) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 512) "invalid symbol name\00")
(data (i32.const 544) "eosroyaleroy\00")
(data (i32.const 560) "You must place a bet with a minimum amount of 1EOS\00")
(data (i32.const 624) "Try again later in \00")
(data (i32.const 656) " sec.\00")
(data (i32.const 672) "\00\00\00\00\9e&\00\00\02\'\00\00\n\'\00\00\0e\'\00\00")
(data (i32.const 704) "cannot pass end iterator to modify\00")
(data (i32.const 752) "object passed to modify is not in multi_index\00")
(data (i32.const 800) "cannot modify objects in table of another contract\00")
(data (i32.const 864) "\05\00\00\002\00\00\00\f4\01\00\00\88\13\00\00P\c3\00\00")
(data (i32.const 896) "updater cannot change primary key when modifying an object\00")
(data (i32.const 960) "write\00")
(data (i32.const 976) "Eosroyale draw\00")
(data (i32.const 992) "active\00")
(data (i32.const 1008) "Dropped number: \00")
(data (i32.const 1040) ", you draw: \00")
(data (i32.const 1056) "transfer\00")
(data (i32.const 1072) "cannot create objects in table of another contract\00")
(data (i32.const 1136) "onerror\00")
(data (i32.const 1152) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1216) "Ref account should be exist in EOS network\00")
(data (i32.const 1264) "Rate should be in range 0..100\00")
(data (i32.const 1296) "cannot pass end iterator to erase\00")
(data (i32.const 1344) "cannot increment end iterator\00")
(data (i32.const 1376) "object passed to erase is not in multi_index\00")
(data (i32.const 1424) "cannot erase objects in table of another contract\00")
(data (i32.const 1488) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1552) "Ref can not be for yourself\00")
(data (i32.const 1584) "Ref account does not exist\00")
(data (i32.const 1616) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1680) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1744) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1792) "Eosroyale welcome bonus\00")
(data (i32.const 1824) "get\00")
(data (i32.const 1840) "There is no games\00")
(data (i32.const 1872) "No game started\00")
(data (i32.const 1888) "cleanup\00")
(data (i32.const 1904) "Game not found\00")
(data (i32.const 1920) "Eosroyale winning for a spin \00")
(data (i32.const 1952) "sendgain\00")
(data (i32.const 1968) "eosio.stake\00")
(data (i32.const 1984) "The bet should be bigger\00")
(data (i32.const 2016) "Your bet placed too late\00")
(data (i32.const 2044) "\00\00\00\00\00\00\00\00*\00\00\00+\00\00\00,\00\00\00-\00\00\00.\00\00\00/\00\00\000\00\00\00")
(data (i32.const 2080) "Do not match the amount of bets\00")
(data (i32.const 2112) "Incorrect bet\00")
(data (i32.const 2128) "roulettespin\00")
(data (i32.const 2144) "Was exceeded the maximum bet\00")
(data (i32.const 2176) "roulettefees\00")
(data (i32.const 2192) "multiplication overflow or underflow\00")
(data (i32.const 2240) "multiplication underflow\00")
(data (i32.const 2272) "multiplication overflow\00")
(data (i32.const 2320) "Eosroyale refferal bonus\00")
(data (i32.const 2352) "straight\00")
(data (i32.const 2368) "split\00")
(data (i32.const 2384) "street\00")
(data (i32.const 2400) "corner\00")
(data (i32.const 2416) "square\00")
(data (i32.const 2432) "trio\00")
(data (i32.const 2448) "basket\00")
(data (i32.const 2464) "sixline\00")
(data (i32.const 2480) "column\00")
(data (i32.const 2496) "dozen\00")
(data (i32.const 2512) "odd\00")
(data (i32.const 2528) "even\00")
(data (i32.const 2544) "red\00")
(data (i32.const 2560) "black\00")
(data (i32.const 2576) "half\00")
(data (i32.const 2592) "Eosroyale bonus\00")
(data (i32.const 2608) "Thu Aug 8 22:30:54 UTC 2019\00")
(data (i32.const 2640) "spin\00")
(data (i32.const 11056) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11152) "stoi\00")
(data (i32.const 11168) ": no conversion\00")
(data (i32.const 11184) ": out of range\00")
(data (i32.const 11200) "%lu\00")
(data (i32.const 11216) "%llu\00")
(data (i32.const 11232) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 11696) "0123456789ABCDEF")
(data (i32.const 11712) "-+   0X0x\00")
(data (i32.const 11728) "(null)\00")
(data (i32.const 11744) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 11776) "inf\00")
(data (i32.const 11792) "INF\00")
(data (i32.const 11808) "nan\00")
(data (i32.const 11824) "NAN\00")
(data (i32.const 11840) ".\00")
(data (i32.const 11856) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 11952) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 13760) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 14032) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "cancel_deferred" (func $fimport$13 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_store_i64" (func $fimport$29 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$30 (param i32 i64 i32 i32)))
(import "env" "db_upperbound_i64" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$32 (param i32 i32)))
(import "env" "is_account" (func $fimport$33 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$37 (param i32)))
(import "env" "printui" (func $fimport$38 (param i64)))
(import "env" "read_action_data" (func $fimport$39 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$41 (param i64)))
(import "env" "require_auth2" (func $fimport$42 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$43 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$44 (param i32 i32)))
(import "env" "sha256" (func $fimport$45 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$46 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z4randty" (func $5))
(export "_Z10decode_refRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $6))
(export "_Z7getByteRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj" (func $7))
(export "_Z9get2BytesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj" (func $8))
(export "_Z13getBetCheckery" (func $9))
(export "_Z10unpackMemoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEONS_8functionIFvyP10BetCheckerEEE" (func $40))
(export "_Z10isContracty" (func $41))
(export "_Z13getEosBalancey" (func $44))
(export "_Z15getTokenBalancey" (func $48))
(export "_Z7getDrawyy" (func $49))
(export "_Z11setDrawWaityym" (func $60))
(export "apply" (func $61))
(export "_ZN4game7versionEv" (func $62))
(export "_ZN4game8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $64))
(export "_ZN4game8sendgainEyy" (func $66))
(export "_ZN4game4spinEhyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $68))
(export "_ZN4game4stopEv" (func $70))
(export "_ZN4game5loginEyRy" (func $71))
(export "_ZN4game7cleanupEv" (func $73))
(export "_ZN4game9removelogEv" (func $74))
(export "_ZN4game6setrefEyy" (func $75))
(export "_ZN4game10setrefrateEyl" (func $76))
(export "_ZN4game13cleanup_gamesEv" (func $93))
(export "_ZN4game13cleanup_gainsEv" (func $94))
(export "_ZN4game19count_welcome_bonusEy" (func $99))
(export "_ZN4game12set_nextspinEy" (func $105))
(export "_ZN4game13defer_cleanupEv" (func $106))
(export "_ZN4game15defer_send_gainEyy12unsigned_int" (func $116))
(export "_ZN4game12process_gainEyRK4GameN5eosio5assetE" (func $120))
(export "_ZN4game12get_nextspinEv" (func $126))
(export "_ZN4game8get_gameEv" (func $127))
(export "_ZN4game19count_deposit_bonusEyN5eosio5assetE" (func $128))
(export "_ZN4game10create_betEyyN5eosio5assetEP10BetChecker" (func $130))
(export "_ZN4game9send_feesERKN5eosio5assetEy" (func $131))
(export "_ZN4game14set_state_gameEy" (func $144))
(export "_ZN4game15defer_next_spinEv" (func $145))
(export "malloc" (func $146))
(export "free" (func $149))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $162))
(export "_ZNSt3__19to_stringEm" (func $166))
(export "_ZNSt3__19to_stringEy" (func $169))
(export "__errno_location" (func $173))
(export "snprintf" (func $174))
(export "vsnprintf" (func $175))
(export "vfprintf" (func $177))
(export "__lockfile" (func $179))
(export "__unlockfile" (func $180))
(export "__fwritex" (func $181))
(export "strerror" (func $183))
(export "strnlen" (func $184))
(export "wctomb" (func $185))
(export "__signbitl" (func $186))
(export "__fpclassifyl" (func $187))
(export "frexpl" (func $188))
(export "wcrtomb" (func $189))
(export "memchr" (func $190))
(export "__lctrans" (func $191))
(export "__lctrans_impl" (func $192))
(export "__mo_lookup" (func $193))
(export "strcmp" (func $194))
(export "__towrite" (func $195))
(export "abs" (func $196))
(export "strtoul" (func $197))
(export "__shlim" (func $198))
(export "__intscan" (func $199))
(export "__shgetc" (func $200))
(export "__uflow" (func $201))
(export "__toread" (func $202))
(export "strtol" (func $203))
(export "memcmp" (func $204))
(export "strlen" (func $205))
(table $0 49 49 anyfunc)
(elem (i32.const 0) $206 $76 $62 $74 $70 $66 $75 $64 $73 $71 $68 $176 $38 $39 $36 $37 $34 $35 $32 $33 $30 $31 $28 $29 $26 $27 $24 $25 $22 $23 $20 $21 $18 $19 $16 $17 $14 $15 $12 $13 $10 $11 $136 $137 $138 $139 $140 $141 $142)



int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_64 .FUNC _Z10decode_refRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$5 = *($0)
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	$6 = CALL strlen([48])
	if ( ($6 == 0) ){ goto $label$4 }
	$10 = (int_64)0
	$1 = ($5 & [1])
	$5 = ( $3 ? uint_32($5 >> [1]) : $1 )
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$1 }
	$1 = ( $2 ? ($0 + [1]) : $1 )
	$2 = ($1 + $5)
	$3 = $1
	
.LOOP $label$5:
	$5 = (($5 - $6) + [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$5 = CALL memchr($3, [114], $5)
	if ( ($5 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($5, [48], $6) == 0) ){ goto $label$3 }
	$3 = ($5 + [1])
	$5 = ($2 - $3)
	if ( ((int_32)$5 >= (int_32)$6) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$1 }
	$6 = ($5 - $1)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = [-1]
	CALL $172($11, $0, ($6 + [2]), [-1], $0)
	CALL $160($0, $6, [-1])
	$2 = (*($11) & [1])
	$1 = *($11 + [8])
	$6 = ( $1 ? ($11 | [1]) : $2 )
	
.LOOP $label$6:
	$0 = ($6 + $5)
	$3 = ($5 + [1])
	$5 = $3
	if ( *(($0 + [1])) ){ goto $label$6 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$8 = (int_64)0
	$7 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$4) ){ goto $label$8 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$12 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$11 
	
.LABEL $label$12
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$11
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $151($1)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [16])
	return $10
}

int_32 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $178([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $178($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $178($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

void .FUNC $170 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $150($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $150($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _Z7getByteRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $172($2, $0, $1, [2], $0)
	$0 = CALL strtoul(( *($2 + [8]) ? ($2 | [1]) : (*($2) & [1]) ), [0], [16])
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL $151(*(($2 + [8])))
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return ($0 & [255])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [11232]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $182(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [11712]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [11744]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [11750] ? [11745] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [11714] ? [11712] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [11747]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $173()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [11712]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [11712]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [11696])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [11712])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [11728] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [11712]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [11808] ? [11824] : $30 ) ? ( [11776] ? [11792] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [11712]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [11713]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [11712] ? [11717] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11696])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11696])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [11696])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([11840], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([11840], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([11840], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $182(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $182(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $182(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $182(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $182(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $182(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $182(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $182(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $182(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z4randty (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*((($5 = $6) + [24])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	$2 = CALL transaction_size()
	$3 = ($6 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $3
	$4 = CALL read_transaction($3, $2)
	CALL eosio_assert(((int_32)$2 == (int_32)$4), [16])
	CALL sha256($3, $4, $5)
	$2 = *(($5 + (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)31))))
	$6
	*([0] + [4]) = ($5 + [32])
	return (CASTING uint_64)(uint_32 ((uint_32)$2 % (uint_32)($0 + [1])))
}

int_64 .FUNC _ZN4game8get_gameEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*(($3 = ($7 + [48]))) = [0]
	*($7 + [32]) = (int_64)-1
	$4 = *($0)
	*($7 + [16]) = $4
	*($7 + [24]) = $4
	*($7 + [40]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $83(($7 + [16]), $6)
	*($7 + [68]) = [0]
	*($7 + [64]) = ($7 + [16])
	if ( ((int_32)*(*(CALL $96(($7 + [64])) + [4]) + [8]) == (int_32)[255]) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	*($7 + [8]) = ($7 + [16])
	*($7 + [88]) = $4
	CALL eosio_assert(((int_64)*($7 + [16]) == (int_64)CALL $fimport$14()), [1072])
	*($7 + [68]) = ($7 + [8])
	*($7 + [64]) = ($7 + [16])
	*($7 + [72]) = ($7 + [88])
	*(($6 = CALL $150([24])) + [8]) = [255]
	*($6 + [12]) = ($7 + [16])
	CALL $143(($7 + [64]), $6)
	*($7 + [80]) = $6
	$4 = *($6)
	*($7 + [64]) = $4
	$1 = *($6 + [16])
	*($7 + [60]) = $1
	$5 = ($7 + [44])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*($3)) ){ goto $label$5 }
	*($2 + [8]) = $4
	*($2 + [16]) = $1
	*($7 + [80]) = [0]
	*($2) = $6
	*($5) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $92((($7 + [16]) + [24]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$4
	$2 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $151($2)
	
.LABEL $label$6
	CALL _ZN4game14set_state_gameEy($0, *($6))
	goto $label$1 
	
.LABEL $label$2
	*($7 + [68]) = [0]
	*($7 + [64]) = ($7 + [16])
	$6 = *(CALL $96(($7 + [64])) + [4])
	
.LABEL $label$1
	$4 = *($6)
	$2 = *($7 + [40])
	if ( ($2 == 0) ){ goto $label$7 }
	$3 = ($7 + [44])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $151($0)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $2
	
.LABEL $label$8
	*($3) = $2
	CALL $151($6)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [96])
	return $4
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

void .FUNC _Z7getDrawyy (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [160])
	*([0] + [4]) = $15
	*(($15 + [120])) = [0]
	*($15 + [96]) = $0
	*($15 + [88]) = $0
	*($15 + [104]) = (int_64)-1
	*($15 + [112]) = (int_64)0
	$8 = [0]
	$10 = CALL db_find_i64($0, $0, (int_64)5606348217378668544, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $50(($15 + [88]), $10)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($15 + [88])), [320])
	
.LABEL $label$1
	$12 = CALL current_time()
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [560])
	$2 = (CASTING uint_32)(uint_64 ((uint_64)$12 / (uint_64)(int_64)1000000))
	$5 = *($8 + [8])
	CALL _ZNSt3__19to_stringEm(($15 + [56]), ($5 - $2))
	$10 = CALL $158(($15 + [56]), [0], [624])
	$9 = ($10 + [8])
	*((($15 + [72]) + [8])) = *($9)
	*($15 + [72]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($9) = [0]
	$10 = CALL $155(($15 + [72]), [656])
	$7 = ($10 + [8])
	*(($9 = (($15 + [128]) + [8]))) = *($7)
	*($15 + [128]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($7) = [0]
	CALL eosio_assert(($5 <= $2), ( *($9) ? (($15 + [128]) | [1]) : (*($15 + [128]) & [1]) ))
	if ( ((*($15 + [128]) & [1]) == 0) ){ goto $label$2 }
	CALL $151(*($9))
	
.LABEL $label$2
	if ( ((*($15 + [72]) & [1]) == 0) ){ goto $label$3 }
	CALL $151(*($15 + [80]))
	
.LABEL $label$3
	if ( ((*($15 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL $151(*($15 + [64]))
	
.LABEL $label$4
	$4 = CALL _Z4randty([9999], $1)
	$10 = [5]
	$9 = [16]
	
.LOOP $label$6:
	$5 = ($9 + [-4])
	if ( ((int_32)$10 < (int_32)[2]) ){ goto $label$5 }
	$10 = ($10 + [-1])
	$7 = ($9 + [672])
	$9 = $5
	if ( (uint_64)($4 <= *($7)) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($3, [704])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($15 + [88])), [752])
	CALL eosio_assert(((int_64)*($15 + [88]) == (int_64)CALL $fimport$14()), [800])
	*($8 + [8]) = ($2 + [2592000])
	*($8 + [12]) = $4
	$6 = *(($5 + [868]))
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)$6)
	$12 = *($8)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($15 + [128]), $8, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($15 + [128]) | [8]), ($8 + [8]), [4])
	CALL eosio_assert([1], [960])
	CALL memcpy((($15 + [128]) | [12]), ($8 + [12]), [4])
	CALL eosio_assert([1], [960])
	CALL memcpy((($15 + [128]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $1, ($15 + [128]), [24])
	$10 = (($15 + [88]) + [16])
	if ( (uint_64)($12 <= *($10)) ){ goto $label$7 }
	*($10) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [432]
	$13 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$13 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [165])
	goto $label$11 
	
.LABEL $label$13
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$9
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$8 }
	*($15 + [128]) = $13
	*($15 + [48]) = (int_64)1397703940
	*($15 + [40]) = $6
	CALL eosio_assert([1], [448])
	$12 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$9 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$14
	CALL eosio_assert($9, [512])
	*(($15 + [32])) = [0]
	*($15 + [24]) = (int_64)0
	$10 = CALL strlen([976])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$22 }
	*($15 + [24]) = ($10 << [1])
	$9 = (($15 + [24]) | [1])
	if ( $10 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$5 = (($10 + [16]) & [-16])
	$9 = CALL $150($5)
	*($15 + [24]) = ($5 | [1])
	*($15 + [32]) = $9
	*($15 + [28]) = $10
	
.LABEL $label$21
	CALL memcpy($9, [976], $10)
	
.LABEL $label$20
	*(($9 + $10)) = [0]
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [992]
	$13 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$28 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$9 = ($9 + [165])
	goto $label$26 
	
.LABEL $label$28
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$24
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$23 }
	*((($15 + [8]) + [8])) = *((($15 + [40]) + [8]))
	*($15 + [8]) = *($15 + [40])
	CALL $51(($15 + [128]), $0, $1, ($15 + [8]), ($15 + [24]), $13)
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL $151(*($15 + [32]))
	
.LABEL $label$29
	CALL prints([1008])
	CALL printui($4)
	CALL prints([1040])
	CALL printui($6)
	$5 = *($15 + [112])
	if ( ($5 == 0) ){ goto $label$30 }
	$7 = ($15 + [116])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$32 }
	
.LOOP $label$33:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$34 }
	CALL $151($9)
	
.LABEL $label$34
	if ( ((int_32)$5 != (int_32)$10) ){ goto $label$33 }
	$10 = *(($15 + [112]))
	goto $label$31 
	
.LABEL $label$32
	$10 = $5
	
.LABEL $label$31
	*($7) = $5
	CALL $151($10)
	
.LABEL $label$30
	*([0] + [4]) = ($15 + [160])
	return (unreachable)
	
.LABEL $label$19
	CALL $152(($15 + [24]))
}

int_64 .FUNC _Z15getTokenBalancey (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [544]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	$6 = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [16]) = $0
	*($9 + [8]) = $7
	$4 = CALL db_find_i64($7, $0, (int_64)3607749779137757184, (int_64)5853010)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $45(($9 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($9 + [8])), [320])
	$6 = *($4)
	$2 = *($9 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($9 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $151($1)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($9 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $151($4)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [48])
	return $6
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $150([64])) + [48]) = $0
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [416])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC _Z10isContracty (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$12 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$1 = ($1 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$10 = [0]
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	*($11 + [16]) = $9
	*($11 + [8]) = $7
	$4 = CALL db_find_i64($7, $9, (int_64)3592979018984456192, $0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $42(($11 + [8]), $4) + [48]) == (int_32)($11 + [8])), [320])
	$10 = [1]
	$2 = *($11 + [32])
	if ( ($2 == 0) ){ goto $label$13 }
	$3 = ($11 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	CALL $151($1)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($11 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $2
	
.LABEL $label$14
	*($3) = $2
	CALL $151($4)
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [48])
	return $10
}

void .FUNC _Z10unpackMemoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEONS_8functionIFvyP10BetCheckerEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [16])
	*([0] + [4]) = $15
	$13 = *($0)
	$2 = ( *($0 + [4]) ? uint_32($13 >> [1]) : ($13 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = ($15 | [1])
	$9 = ($15 + [8])
	$10 = ($1 + [16])
	$4 = [0]
	
.LOOP $label$3:
	CALL $172($15, $0, $4, [2], $0)
	$13 = CALL strtoul(( *($9) ? $3 : (*($15) & [1]) ), [0], [16])
	if ( ((*($15) & [1]) == 0) ){ goto $label$4 }
	CALL $151(*($9))
	
.LABEL $label$4
	$5 = (uint_32($13 >> [4]) & [15])
	if ( ($5 == 0) ){ goto $label$2 }
	CALL $172($15, $0, ($4 + [2]), [2], $0)
	$1 = CALL strtoul(( *($9) ? $3 : (*($15) & [1]) ), [0], [16])
	if ( ((*($15) & [1]) == 0) ){ goto $label$5 }
	CALL $151(*($9))
	
.LABEL $label$5
	CALL $172($15, $0, ($4 + [4]), [2], $0)
	$7 = CALL strtoul(( *($9) ? $3 : (*($15) & [1]) ), [0], [16])
	if ( ((*($15) & [1]) == 0) ){ goto $label$6 }
	CALL $151(*($9))
	
.LABEL $label$6
	$6 = ($13 & [15])
	$8 = (CASTING uint_64)(uint_32 ((int_32)(($7 & [255]) | (($1 << [8]) & [65280])) * (int_32)[1000]))
	$14 = (int_64)0
	if ( ($5 <= [4]) ){ goto $label$7 }
	$13 = ($4 + [6])
	$11 = (CASTING uint_64)(uint_32 ($5 + [-3]))
	$12 = (int_64)0
	$14 = (int_64)0
	
.LOOP $label$8:
	CALL $172($15, $0, $13, [2], $0)
	$1 = CALL strtoul(( *($9) ? $3 : (*($15) & [1]) ), [0], [16])
	if ( ((*($15) & [1]) == 0) ){ goto $label$9 }
	CALL $151(*($9))
	
.LABEL $label$9
	$13 = ($13 + [2])
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 ($1 & [255])) << (int_64)$12) | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)8)
	$11 = ((int_64)$11 + (int_64)-1)
	if ( ((int_64)($11 == 0) == 0) ){ goto $label$8 }
	
.LABEL $label$7
	$13 = CALL _Z13getBetCheckery(((int_64)$14 | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)36)))
	*($15) = $8
	*($15 + [12]) = $13
	$13 = *($10)
	if ( ($13 == 0) ){ goto $label$1 }
	CALL void $13((int_32 $15), (int_32 ($15 + [12])), (int_32 *(*($13) + [24])))
	$4 = (($5 << [1]) + $4)
	if ( ($4 <= $2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($15 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [448])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [512])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $150([32])
	$6 = CALL $46($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $47(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_64 .FUNC _Z13getEosBalancey (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [432]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	$6 = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [16]) = $0
	*($9 + [8]) = $7
	$4 = CALL db_find_i64($7, $0, (int_64)3607749779137757184, (int_64)5459781)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $45(($9 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($9 + [8])), [320])
	$6 = *($4)
	$2 = *($9 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	$3 = ($9 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $151($1)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($3) = $2
	CALL $151($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
	return $6
}

int_32 .FUNC $167 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $168($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [11200], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $167(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $167(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $150($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $156($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $164 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $165($1, $0, [11168])
	CALL abort()
	(unreachable)
}

void .FUNC $163 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $165($1, $0, [11184])
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([11152])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $150($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [11152], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $151(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $163($6)
	
.LABEL $label$1
	CALL $164($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [11216], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $167(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $167(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $150($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $151($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [11]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $150([40])) + [24]) = $0
	CALL $58(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $59(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $51 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [1056]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$6 }
	$7 = *($0)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*((($12 + [8]) + [28])) = *(($3 + [12]))
	*((($12 + [8]) + [24])) = *(($3 + [8]))
	*((($12 + [8]) + [20])) = *(($3 + [4]))
	*($12 + [16]) = $2
	*($12 + [8]) = $1
	*($12 + [24]) = *($3)
	CALL $171((($12 + [8]) + [32]), $4)
	*($12 + [64]) = $10
	*($12 + [56]) = $6
	*(($0 = CALL $150([16]))) = $1
	*($0 + [8]) = $5
	*((($12 + [56]) + [32])) = [0]
	$7 = ($0 + [16])
	*((($12 + [56]) + [24])) = $7
	*((($12 + [56]) + [20])) = $7
	*($12 + [72]) = $0
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$0 = *($12 + [40])
	$7 = ( *((($12 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($7 + [32])
	$9 = (CASTING uint_64)(uint_32 $7)
	$7 = (($12 + [56]) + [28])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $52($7, $0)
	$7 = *(($12 + [88]))
	$0 = *(($12 + [84]))
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	$0 = [0]
	
.LABEL $label$8
	*($12 + [100]) = $0
	*($12 + [96]) = $0
	*($12 + [104]) = $7
	CALL $53(($12 + [96]), ($12 + [8]))
	if ( ((*(($12 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $151(*(($12 + [48])))
	
.LABEL $label$10
	CALL $54(($12 + [8]), ($12 + [56]))
	$0 = *($12 + [8])
	CALL send_inline($0, (*($12 + [12]) - $0))
	$0 = *($12 + [8])
	if ( ($0 == 0) ){ goto $label$11 }
	*($12 + [12]) = $0
	CALL $151($0)
	
.LABEL $label$11
	$0 = *($12 + [84])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($12 + [88])) = $0
	CALL $151($0)
	
.LABEL $label$12
	$0 = *($12 + [72])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($12 + [76])) = $0
	CALL $151($0)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [112])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $150($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $170($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $151($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $57($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $52($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [960])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [960])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $56(CALL $55($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [960])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [960])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [960])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [960])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [960])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [960])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [960])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC __errno_location ()
{
	return [11224]
}

void .FUNC $152 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $150(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $151($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11148])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $151 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $157($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $150($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $151($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ($2 & [1])
	if ( $3 ){ goto $label$3 }
	if ( ((uint_32)uint_32($2 >> [1]) > (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)*($0 + [4]) <= (uint_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $3 ){ goto $label$4 }
	return (($0 + [1]) + $1)
	
.LABEL $label$4
	return (*($0 + [8]) + $1)
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	return CALL $156($0, $1, CALL $205($1))
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $159($0, $1, $2, CALL $205($2))
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $157($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [11856])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [11952]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [11952]
	return .LABEL $label$1
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [416])
	CALL memcpy($3, $1, [1])
	$2 = ($1 + [1])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [416])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [9])
	$4 = ($3 + [16])
	CALL $102(($3 + [48]), $4)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $103(($3 + [48]), $3)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $151(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC _ZN4game4spinEhyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	CALL _ZN4game12set_nextspinEy($0, ((int_64)((int_64)((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295))
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	$5 = *($0)
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	*($8 + [32]) = (int_64)0
	$4 = CALL db_lowerbound_i64($5, $5, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $83(($8 + [8]), $4)
	*($8 + [52]) = [0]
	*($8 + [48]) = ($8 + [8])
	if ( ((int_32)*(*(CALL $96(($8 + [48])) + [4]) + [8]) == (int_32)[255]) ){ goto $label$3 }
	CALL prints([1872])
	$1 = *($8 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL prints([1840])
	$1 = *($8 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($8 + [52]) = [0]
	*($8 + [48]) = ($8 + [8])
	$4 = CALL $96(($8 + [48]))
	$6 = *($0)
	$4 = *($4 + [4])
	CALL eosio_assert(((int_32)*(($4 + [12])) == (int_32)($8 + [8])), [752])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$14()), [800])
	*($4 + [8]) = ((uint_32)$1 % (uint_32)[37])
	$5 = *($4)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($8 + [48]), $4, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($8 + [48]) | [8]), ($4 + [8]), [1])
	CALL db_update_i64(*($4 + [16]), $6, ($8 + [48]), [9])
	$4 = ($8 + [24])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	CALL _ZN4game13defer_cleanupEv($0)
	$1 = *($8 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($8 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $151($4)
	
.LABEL $label$9
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($8 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $1
	
.LABEL $label$6
	*($7) = $1
	CALL $151($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [448])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [512])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $124(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $125(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $151(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN4game8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [496])
	*([0] + [4]) = $16
	*($16 + [488]) = $1
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	$2 = (int_64)0
	$10 = (int_64)59
	$14 = [1968]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$7 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$15 = ($15 + [165])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$3
	$14 = ($14 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$2 }
	if ( ((int_64)$11 == (int_64)$1) ){ goto $label$1 }
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$9 }
	if ( uint_32($14 >> [1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	if ( (*($4 + [4]) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	if ( CALL _Z10isContracty($1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [1984])
	*($16 + [480]) = (int_64)0
	CALL _ZN4game5loginEyRy($0, $1, ($16 + [480]))
	$1 = CALL _ZN4game12get_nextspinEv($0)
	$5 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = ((int_64)$5 & (int_64)4294967295)
	CALL eosio_assert((uint_64)($6 <= ((int_64)$1 + (int_64)-10)), [2016])
	$2 = CALL _ZN4game8get_gameEv($0)
	*($16 + [472]) = $2
	CALL memset(($16 + [176]), [0], [296])
	*(($16 + [168])) = [0]
	*($16 + [144]) = $2
	*($16 + [152]) = (int_64)-1
	*($16 + [160]) = (int_64)0
	$12 = *($0)
	*($16 + [136]) = $12
	*($16 + [172]) = [0]
	$14 = CALL db_lowerbound_i64($12, $2, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$10 }
	$13 = CALL $85(($16 + [136]), $14)
	$9 = ($3 + [8])
	
.LOOP $label$11:
	if ( ((int_64)*(($13 + [40])) != (int_64)*($9)) ){ goto $label$12 }
	$12 = *($13 + [32])
	$7 = CALL _Z13getBetCheckery(*($13 + [24]))
	$15 = [0]
	$14 = ($16 + [176])
	
.LOOP $label$13:
	$2 = CALL int_64 $7((int_32 ($15 & [255])), (int_32 *(*($7) + [4])))
	*($14) = ((int_64)*($14) + (int_64)((int_64)$2 * (int_64)$12))
	$14 = ($14 + [8])
	$15 = ($15 + [1])
	if ( ((int_32)$15 != (int_32)[37]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert([1], [1344])
	$14 = CALL db_next_i64(*($13 + [52]), ($16 + [104]))
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$10 }
	$13 = CALL $85(($16 + [136]), $14)
	goto $label$11 
	
.LABEL $label$10
	if ( ((uint_32)*(CALL $154($4, [0])) >= (uint_32)[97]) ){ goto $label$17 }
	*($16 + [128]) = (int_64)0
	*(($14 = CALL $150([28])) + [4]) = $3
	*($14) = [2052]
	*($14 + [12]) = $0
	*($14 + [8]) = ($16 + [128])
	*($14 + [16]) = ($16 + [472])
	*($14 + [20]) = ($16 + [488])
	*($14 + [24]) = ($16 + [176])
	*($16 + [120]) = $14
	CALL _Z10unpackMemoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEONS_8functionIFvyP10BetCheckerEEE($4, ($16 + [104]))
	$14 = *($16 + [120])
	if ( ((int_32)$14 == (int_32)($16 + [104])) ){ goto $label$16 }
	if ( ($14 == 0) ){ goto $label$15 }
	CALL void $14((int_32 *(*($14) + [20])))
	goto $label$15 
	
.LABEL $label$17
	$7 = CALL $129($4)
	CALL eosio_assert(CALL int_32 $7((int_32 *(*($7)))), [2112])
	*((($16 + [72]) + [12])) = *(($3 + [12]))
	*(($14 = (($16 + [72]) + [8]))) = *(($3 + [8]))
	$2 = *($16 + [488])
	$12 = *($16 + [472])
	*($16 + [72]) = *($3)
	*((($16 + [40]) + [8])) = *($14)
	*($16 + [40]) = *($16 + [72])
	CALL _ZN4game10create_betEyyN5eosio5assetEP10BetChecker($0, $12, $2, ($16 + [40]), $7)
	$12 = *($3)
	$15 = [0]
	$14 = ($16 + [176])
	
.LOOP $label$18:
	$2 = CALL int_64 $7((int_32 ($15 & [255])), (int_32 *(*($7) + [4])))
	*($14) = ((int_64)*($14) + (int_64)((int_64)$2 * (int_64)$12))
	$14 = ($14 + [8])
	$15 = ($15 + [1])
	if ( ((int_32)$15 != (int_32)[37]) ){ goto $label$18 }
	*((($16 + [56]) + [12])) = *(($3 + [12]))
	*(($14 = (($16 + [56]) + [8]))) = *(($3 + [8]))
	$2 = *($16 + [488])
	*($16 + [56]) = *($3)
	*((($16 + [24]) + [8])) = *($14)
	*($16 + [24]) = *($16 + [56])
	CALL _ZN4game19count_deposit_bonusEyN5eosio5assetE($0, $2, ($16 + [24]))
	goto $label$14 
	
.LABEL $label$16
	CALL void $14((int_32 *(*($14) + [16])))
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*($16 + [128]) == (int_64)*($3)), [2080])
	*((($16 + [88]) + [12])) = *(($3 + [12]))
	*(($14 = (($16 + [88]) + [8]))) = *(($3 + [8]))
	$2 = *($16 + [488])
	*($16 + [88]) = *($3)
	*((($16 + [8]) + [8])) = *($14)
	*($16 + [8]) = *($16 + [88])
	CALL _ZN4game19count_deposit_bonusEyN5eosio5assetE($0, $2, ($16 + [8]))
	
.LABEL $label$14
	$8 = *(($3 + [8]))
	$2 = (int_64)0
	$12 = (int_64)59
	$14 = [2128]
	$11 = (int_64)0
	
.LOOP $label$19:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$20 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$15 = ($15 + [165])
	goto $label$21 
	
.LABEL $label$22
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$20
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$19 }
	if ( ((int_64)$8 != (int_64)1498370564) ){ goto $label$24 }
	$2 = CALL _Z15getTokenBalancey($11)
	goto $label$23 
	
.LABEL $label$24
	$2 = CALL _Z13getEosBalancey($11)
	
.LABEL $label$23
	$2 = ((int_64)$2 / (int_64)2)
	$14 = [0]
	
.LOOP $label$25:
	CALL eosio_assert(((int_64)$2 > (int_64)*((($16 + [176]) + $14))), [2144])
	$14 = ($14 + [8])
	if ( ((int_32)$14 != (int_32)[296]) ){ goto $label$25 }
	CALL _ZN4game15defer_send_gainEyy12unsigned_int($0, *($16 + [472]), *($16 + [488]), ( (CASTING uint_32)(uint_64 (int_64))($1 - $5)) ? [1] : ((uint_64)$1 > (uint_64)$6) ))
	CALL _ZN4game9send_feesERKN5eosio5assetEy($0, $3, *($16 + [480]))
	$7 = *($16 + [160])
	if ( ($7 == 0) ){ goto $label$1 }
	$13 = ($16 + [164])
	$14 = *($13)
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$27 }
	
.LOOP $label$28:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$29 }
	CALL $151($15)
	
.LABEL $label$29
	if ( ((int_32)$7 != (int_32)$14) ){ goto $label$28 }
	$14 = *(($16 + [160]))
	goto $label$26 
	
.LABEL $label$27
	$14 = $7
	
.LABEL $label$26
	*($13) = $7
	CALL $151($14)
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [496])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [416])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [416])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN4game8sendgainEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [192])
	*([0] + [4]) = $10
	*($10 + [184]) = $2
	CALL require_auth(*($0))
	*(($10 + [176])) = [0]
	*($10 + [160]) = (int_64)-1
	*($10 + [168]) = (int_64)0
	$2 = *($0)
	*($10 + [144]) = $2
	*($10 + [152]) = $2
	$3 = [0]
	$9 = CALL db_find_i64($2, $2, (int_64)7035924439720001536, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $83(($10 + [144]), $9)
	CALL eosio_assert(((int_32)*($3 + [12]) == (int_32)($10 + [144])), [320])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1904])
	if ( ((int_32)*($3 + [8]) == (int_32)[255]) ){ goto $label$8 }
	*(($10 + [136])) = [0]
	*($10 + [112]) = $1
	*($10 + [120]) = (int_64)-1
	$8 = (int_64)0
	*($10 + [128]) = (int_64)0
	*($10 + [104]) = *($0)
	*($10 + [140]) = [0]
	*($10 + [96]) = ($10 + [104])
	CALL $117(($10 + [88]), ($10 + [96]), ($10 + [184]))
	*($10 + [72]) = ((int_64)*($10 + [184]) + (int_64)1)
	CALL $118(($10 + [80]), ($10 + [96]), ($10 + [72]))
	$9 = *($10 + [92])
	if ( ((int_32)$9 == (int_32)*($10 + [84])) ){ goto $label$4 }
	$4 = ($3 + [8])
	$7 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$9:
	$5 = *($4)
	$9 = CALL _Z13getBetCheckery(*($9 + [24]))
	$2 = CALL int_64 $9((int_32 $5), (int_32 *(*($9) + [4])))
	if ( (int_64)($2 == 0) ){ goto $label$10 }
	$9 = *($10 + [92])
	$2 = ((int_64)*($9 + [32]) * (int_64)$2)
	$1 = *(($9 + [40]))
	if ( ((int_64)$1 != (int_64)1498370564) ){ goto $label$11 }
	$7 = ((int_64)$2 + (int_64)$7)
	goto $label$10 
	
.LABEL $label$11
	$6 = ((int_64)$2 + (int_64)$6)
	$8 = $1
	
.LABEL $label$10
	CALL $119(($10 + [88]))
	*($10 + [72]) = ((int_64)*($10 + [184]) + (int_64)1)
	CALL $118(($10 + [80]), ($10 + [96]), ($10 + [72]))
	$9 = *($10 + [92])
	if ( ((int_32)$9 != (int_32)*($10 + [84])) ){ goto $label$9 }
	if ( (int_64)($6 == 0) ){ goto $label$5 }
	*($10 + [64]) = $8
	$1 = *($10 + [184])
	*($10 + [56]) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [448])
	$2 = (uint_64)*($10 + [64]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZN4game15defer_send_gainEyy12unsigned_int($0, $1, *($10 + [184]), [1])
	$4 = *($10 + [168])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [512])
	*((($10 + [24]) + [8])) = *((($10 + [56]) + [8]))
	*($10 + [24]) = *($10 + [56])
	CALL _ZN4game12process_gainEyRK4GameN5eosio5assetE($0, $1, $3, ($10 + [24]))
	
.LABEL $label$5
	if ( (int_64)($7 == 0) ){ goto $label$4 }
	*($10 + [48]) = (int_64)1498370564
	$1 = *($10 + [184])
	*($10 + [40]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [448])
	$2 = (int_64)5853010
	$9 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [512])
	*((($10 + [8]) + [8])) = *((($10 + [40]) + [8]))
	*($10 + [8]) = *($10 + [40])
	CALL _ZN4game12process_gainEyRK4GameN5eosio5assetE($0, $1, $3, ($10 + [8]))
	
.LABEL $label$4
	$4 = *($10 + [128])
	if ( ($4 == 0) ){ goto $label$20 }
	$3 = ($10 + [132])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL $151($5)
	
.LABEL $label$24
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$23 }
	$9 = *(($10 + [128]))
	goto $label$21 
	
.LABEL $label$22
	$9 = $4
	
.LABEL $label$21
	*($3) = $4
	CALL $151($9)
	
.LABEL $label$20
	$4 = *($10 + [168])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($10 + [172])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$26 }
	
.LOOP $label$27:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	CALL $151($5)
	
.LABEL $label$28
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$27 }
	$9 = *(($10 + [168]))
	goto $label$25 
	
.LABEL $label$26
	$9 = $4
	
.LABEL $label$25
	*($3) = $4
	CALL $151($9)
	
.LABEL $label$2
	*([0] + [4]) = ($10 + [192])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1136]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [1152])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1056]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [432]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$30 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [544]
	$7 = (int_64)0
	
.LOOP $label$31:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$32
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$31 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$29 }
	
.LABEL $label$30
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1056]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$29
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1136]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [168]) = $0
	if ( ((int_64)$2 > (int_64)-4225168098845523969) ){ goto $label$55 }
	if ( ((int_64)$2 <= (int_64)-4420680946559221761) ){ goto $label$54 }
	if ( ((int_64)$2 == (int_64)-4420680946559221760) ){ goto $label$52 }
	if ( ((int_64)$2 == (int_64)-4417057977681313792) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)-4417057965219348480) ){ goto $label$14 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [80 align=4]) = *($9 + [88])
	CALL $77(($9 + [168]), ($9 + [80]))
	goto $label$14 
	
.LABEL $label$55
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)4923676749050413056) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)-2688781664649216000) ){ goto $label$14 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [2]
	*($9 + [8 align=4]) = *($9 + [160])
	CALL $63(($9 + [168]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$54
	if ( ((int_64)$2 == (int_64)-8279611178955571200) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-4997502818079211520) ){ goto $label$14 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [3]
	*($9 + [64 align=4]) = *($9 + [104])
	CALL $63(($9 + [168]), ($9 + [64]))
	goto $label$14 
	
.LABEL $label$53
	if ( ((int_64)$2 == (int_64)-4225168098845523968) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)-4149697620714979328) ){ goto $label$14 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [4]
	*($9 + [40 align=4]) = *($9 + [128])
	CALL $63(($9 + [168]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$52
	*($9 + [148]) = [0]
	*($9 + [144]) = [5]
	*($9 + [24 align=4]) = *($9 + [144])
	CALL $67(($9 + [168]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$51
	*($9 + [100]) = [0]
	*($9 + [96]) = [6]
	*($9 + [72 align=4]) = *($9 + [96])
	CALL $67(($9 + [168]), ($9 + [72]))
	goto $label$14 
	
.LABEL $label$50
	*($9 + [156]) = [0]
	*($9 + [152]) = [7]
	*($9 + [16 align=4]) = *($9 + [152])
	CALL $65(($9 + [168]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$49
	*($9 + [116]) = [0]
	*($9 + [112]) = [8]
	*($9 + [56 align=4]) = *($9 + [112])
	CALL $63(($9 + [168]), ($9 + [56]))
	goto $label$14 
	
.LABEL $label$48
	*($9 + [124]) = [0]
	*($9 + [120]) = [9]
	*($9 + [48 align=4]) = *($9 + [120])
	CALL $72(($9 + [168]), ($9 + [48]))
	goto $label$14 
	
.LABEL $label$47
	*($9 + [140]) = [0]
	*($9 + [136]) = [10]
	*($9 + [32 align=4]) = *($9 + [136])
	CALL $69(($9 + [168]), ($9 + [32]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [176])
}

void .FUNC _Z11setDrawWaityym (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = [0]
	*(($6 + [40])) = [0]
	*($6 + [16]) = $0
	*($6 + [8]) = $0
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$3 = CALL db_find_i64($0, $0, (int_64)5606348217378668544, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $50(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($6 + [8])), [320])
	
.LABEL $label$1
	$2 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + $2)
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)*($5 + [8]) <= (uint_32)$2) ){ goto $label$4 }
	CALL eosio_assert([1], [704])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($6 + [8])), [752])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$14()), [800])
	*($5 + [8]) = $2
	$0 = *($5)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($6 + [64]), $5, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) | [8]), ($5 + [8]), [4])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) | [12]), ($5 + [12]), [4])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) + [16]), ($5 + [16]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($6 + [64]), [24])
	$5 = (($6 + [8]) + [16])
	if ( (uint_64)($0 <= *($5)) ){ goto $label$4 }
	*($5) = ( (int_64)-2 ? ((int_64)$0 + (int_64)1) : ((uint_64)$0 > (uint_64)(int_64)-3) )
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$14()), [1072])
	*(($5 = CALL $150([40])) + [24]) = ($6 + [8])
	*($5 + [8]) = $2
	*($5) = $1
	CALL eosio_assert([1], [960])
	CALL memcpy(($6 + [64]), $5, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) | [8]), ($5 + [8]), [4])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) | [12]), ($5 + [12]), [4])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) + [16]), ($5 + [16]), [8])
	$1 = *($5)
	$3 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)5606348217378668544, $0, $1, ($6 + [64]), [24])
	*($5 + [28]) = $3
	$2 = (($6 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$6 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($6 + [56]) = $5
	$0 = *($5)
	*($6 + [64]) = $0
	*($6 + [52]) = $3
	$4 = ($6 + [36])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($6 + [40]))) ){ goto $label$8 }
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($6 + [56]) = [0]
	*($2) = $5
	*($4) = ($2 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $59(($6 + [32]), ($6 + [56]), ($6 + [64]), ($6 + [52]))
	
.LABEL $label$7
	$5 = *($6 + [56])
	*($6 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $151($5)
	
.LABEL $label$4
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $151($2)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($6 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $3
	
.LABEL $label$9
	*($4) = $3
	CALL $151($5)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN4game7versionEv (int_32 $0)
{
	CALL prints([2608])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [1376])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1424])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1488])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $151($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $151($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1376])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1424])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1488])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $151($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $151($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317056, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [384])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $150([64])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [448])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [512])
	*($4 + [48]) = $0
	CALL $88(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $89($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $151($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [384])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $150([64])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [448])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [512])
	*($4 + [52]) = $0
	CALL $90(($8 + [32]), $4)
	*($4 + [56]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [56])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $91($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $151($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $150([24])) + [12]) = $0
	*($6 + [8]) = [255]
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [416])
	CALL memcpy(($6 + [8]), ($7 + [8]), [1])
	*($6 + [16]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [16])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $92(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $150([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [416])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $82(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $182 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11032])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10840]
	$1 = (((int_32)$2 * (int_32)[12]) + [10840])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11142]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11144])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11142]) = [1]
	$7 = ($7 << [16])
	*([0] + [11144]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11144])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11144]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11142]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11142]) = [1]
	$3 = ($3 << [16])
	*([0] + [11144]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11144])
	
.LABEL $label$8
	*([0] + [11144]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC _ZN4game15defer_next_spinEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$6 = CALL current_time()
	*(($9 + [60])) = [0]
	*(($9 + [64])) = [0]
	*($9 + [44]) = [0]
	*($9 + [48]) = [0]
	*($9 + [52]) = [0]
	*($9 + [56]) = [0]
	*($9 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [68]) = [0]
	*(($9 + [72])) = [0]
	*(($9 + [76])) = [0]
	*($9 + [80]) = [0]
	*(($9 + [84])) = [0]
	*(($9 + [88])) = [0]
	$2 = ($9 + [68])
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [992]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($9 + [24]) = $7
	*($9 + [16]) = $1
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2640]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*($9 + [96]) = $7
	CALL $107($2, ($9 + [16]), $0, ($9 + [96]), ($9 + [8]))
	$6 = *($0)
	*(($9 + [52])) = [60]
	*($9 + [24]) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL $108(($9 + [96]), ($9 + [32]))
	$4 = *($9 + [96])
	CALL send_deferred(($9 + [16]), $6, $4, (*($9 + [100]) - $4), [0])
	$4 = *($9 + [96])
	if ( ($4 == 0) ){ goto $label$13 }
	*($9 + [100]) = $4
	CALL $151($4)
	
.LABEL $label$13
	CALL _ZN4game12set_nextspinEy($0, ((int_64)((int_64)((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295))
	CALL $109(($9 + [32]))
	*([0] + [4]) = ($9 + [112])
}

void .FUNC _ZN4game14set_state_gameEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	$2 = *($0)
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	*($7 + [32]) = (int_64)0
	$6 = CALL db_lowerbound_i64($2, $2, (int_64)-4157503053760561152, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $115(($7 + [8]), $6)
	$4 = *($0)
	CALL eosio_assert([1], [704])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($7 + [8])), [752])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$14()), [800])
	*($6 + [16]) = $1
	$2 = *($6)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($7 + [64]), $6, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) + [16]), ($6 + [16]), [8])
	CALL db_update_i64(*($6 + [28]), $4, ($7 + [64]), [24])
	$6 = (($7 + [8]) + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$3 = *($7 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$14()), [1072])
	*(($6 = CALL $150([40])) + [24]) = ($7 + [8])
	*($6 + [16]) = $1
	CALL eosio_assert([1], [960])
	CALL memcpy(($7 + [64]), $6, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) + [16]), ($6 + [16]), [8])
	$2 = *($6)
	$3 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-4157503053760561152, $4, $2, ($7 + [64]), [24])
	*($6 + [28]) = $3
	$0 = (($7 + [8]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [56]) = $6
	$2 = *($6)
	*($7 + [64]) = $2
	*($7 + [52]) = $3
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((uint_32)$0 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $2
	*($0 + [16]) = $3
	*($7 + [56]) = [0]
	*($0) = $6
	*($5) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $114(($7 + [32]), ($7 + [56]), ($7 + [64]), ($7 + [52]))
	
.LABEL $label$6
	$6 = *($7 + [56])
	*($7 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $151($6)
	
.LABEL $label$3
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $151($0)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $151($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $148($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11056])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $147([2648], $0)
}

void .FUNC $141 (int_32 $0)
{
	CALL $151($0)
}

void .FUNC $140 (int_32 $0)
{
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$3 = *(*($0 + [4]))
	$5 = *($3 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $83($3, $4)
	*($6 + [12]) = [0]
	*($6 + [8]) = $3
	$5 = *(*(CALL $96(($6 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1616])
	*($1) = *(($3 + [16]))
	$7 = $7
	$3 = ($7 + [-16])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [960])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy(($7 + [-8]), ($1 + [8]), [1])
	$5 = *($1)
	*($1 + [16]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $5, $3, [9])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$2 = *($2)
	$4 = ((int_64)( (int_64)1000 ? (int_64)1 : ((int_64)*(*($0 + [4]) + [8]) == (int_64)1498370564) ) * (int_64)*($1))
	*(($8 = *(($0 + [8])))) = ((int_64)$4 + (int_64)*($8))
	$3 = *(($0 + [12]))
	CALL eosio_assert(CALL int_32 $2((int_32 *(*($2)))), [2112])
	$6 = *(*(($0 + [20])))
	$5 = *(*(($0 + [16])))
	*($9 + [16]) = $4
	$7 = *(*($0 + [4]) + [8])
	*($9 + [24]) = $7
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [448])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [512])
	*(($9 + [8])) = *((($9 + [16]) + [8]))
	*($9) = *($9 + [16])
	CALL _ZN4game10create_betEyyN5eosio5assetEP10BetChecker($3, $5, $6, $9, $2)
	$1 = *(($0 + [24]))
	$0 = [0]
	
.LOOP $label$6:
	$7 = CALL int_64 $2((int_32 ($0 & [255])), (int_32 *(*($2) + [4])))
	*($1) = ((int_64)*($1) + (int_64)((int_64)$7 * (int_64)$4))
	$1 = ($1 + [8])
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[37]) ){ goto $label$6 }
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [416])
	CALL memcpy(($7 + [8]), $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [416])
	$4 = (($7 + [8]) + [8])
	CALL memcpy($4, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$3 = *($7 + [8])
	*($7 + [24]) = *($4)
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 ($7 + [24])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC _ZN4game7cleanupEv (int_32 $0)
{
	CALL require_auth(*($0))
	CALL _ZN4game13cleanup_gamesEv($0)
	CALL _ZN4game13cleanup_gainsEv($0)
}

void .FUNC _ZN4game4stopEv (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL require_auth(*($0))
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	CALL cancel_deferred($1)
	*([0] + [4]) = ($1 + [16])
}

void .FUNC _ZN4game5loginEyRy (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [48]) = $1
	CALL require_auth($1)
	*(($6 = (($8 + [8]) + [32]))) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$3 = *($0)
	*($8 + [8]) = $3
	*($8 + [16]) = $3
	$5 = CALL db_find_i64($3, $3, (int_64)3607749778735104000, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $81(($8 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($8 + [8])), [320])
	*($2) = *($0 + [8])
	$5 = *($8 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($8 + [4]) = $2
	*($8) = ($8 + [48])
	*($8 + [88]) = $1
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$14()), [1072])
	*($8 + [68]) = $8
	*($8 + [64]) = ($8 + [8])
	*($8 + [72]) = ($8 + [88])
	*(($2 = CALL $150([32])) + [16]) = ($8 + [8])
	CALL $98(($8 + [64]), $2)
	*($8 + [80]) = $2
	$3 = *($2)
	*($8 + [64]) = $3
	$4 = *($2 + [20])
	*($8 + [60]) = $4
	$7 = ($8 + [36])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*($6)) ){ goto $label$5 }
	*($5 + [8]) = $3
	*($5 + [16]) = $4
	*($8 + [80]) = [0]
	*($5) = $2
	*($7) = ($5 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $82(($8 + [32]), ($8 + [80]), ($8 + [64]), ($8 + [60]))
	
.LABEL $label$4
	$2 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $151($2)
	
.LABEL $label$6
	CALL _ZN4game19count_welcome_bonusEy($0, *($8 + [48]))
	$5 = *($8 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $151($2)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($8 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL $151($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

void .FUNC _ZN4game10setrefrateEyl (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$33($1), [1216])
	CALL eosio_assert(($2 <= [101]), [1264])
	$5 = [0]
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)-5001810336148357120, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $78(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [320])
	
.LABEL $label$1
	if ( ((int_32)$2 != (int_32)[50]) ){ goto $label$5 }
	if ( ($5 == 0) ){ goto $label$4 }
	CALL eosio_assert([1], [1296])
	CALL eosio_assert([1], [1344])
	$0 = CALL db_next_i64(*($5 + [20]), ($6 + [64]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	CALL $78(($6 + [8]), $0)
	
.LABEL $label$6
	CALL $79(($6 + [8]), $5)
	$2 = *($6 + [32])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = *($0)
	if ( ($5 == 0) ){ goto $label$7 }
	CALL eosio_assert([1], [704])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [752])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$14()), [800])
	*($5 + [8]) = $2
	$1 = *($5)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($6 + [64]), $5, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) | [8]), ($5 + [8]), [4])
	CALL db_update_i64(*($5 + [20]), $4, ($6 + [64]), [12])
	$5 = ($6 + [24])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$4 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$2 = *($6 + [32])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$14()), [1072])
	*(($5 = CALL $150([32])) + [16]) = ($6 + [8])
	*($5 + [8]) = $2
	*($5) = $1
	CALL eosio_assert([1], [960])
	CALL memcpy(($6 + [64]), $5, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($6 + [64]) | [8]), ($5 + [8]), [4])
	$1 = *($5)
	$2 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)-5001810336148357120, $4, $1, ($6 + [64]), [12])
	*($5 + [20]) = $2
	$0 = ($6 + [24])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$8 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($6 + [56]) = $5
	$4 = *($5)
	*($6 + [64]) = $4
	*($6 + [52]) = $2
	$3 = ($6 + [36])
	$0 = *($3)
	if ( ((uint_32)$0 >= (uint_32)*((($6 + [8]) + [32]))) ){ goto $label$10 }
	*($0 + [8]) = $4
	*($0 + [16]) = $2
	*($6 + [56]) = [0]
	*($0) = $5
	*($3) = ($0 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $80(($6 + [32]), ($6 + [56]), ($6 + [64]), ($6 + [52]))
	
.LABEL $label$9
	$5 = *($6 + [56])
	*($6 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $151($5)
	
.LABEL $label$4
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($6 + [36])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL $151($0)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($6 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $2
	
.LABEL $label$11
	*($3) = $2
	CALL $151($5)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [416])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [416])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN4game9removelogEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	*((($13 + [48]) + [32])) = [0]
	*($13 + [64]) = (int_64)-1
	$4 = *($0)
	*($13 + [48]) = $4
	*($13 + [56]) = $4
	*($13 + [72]) = (int_64)0
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $83(($13 + [48]), $3)
	$5 = ($13 + [16])
	$6 = ($13 + [24])
	$7 = ($13 + [32])
	$8 = (($13 + [8]) + [32])
	$10 = ($13 + [44])
	$11 = ($13 + [36])
	
.LOOP $label$2:
	$4 = *($12)
	*($5) = $4
	*($6) = (int_64)-1
	*($7) = (int_64)0
	*($8) = [0]
	$9 = *($0)
	*($13 + [8]) = $9
	*($10) = [0]
	$3 = CALL db_lowerbound_i64($9, $4, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = CALL $85(($13 + [8]), $3)
	CALL eosio_assert([1], [1296])
	CALL eosio_assert([1], [1344])
	$2 = CALL db_next_i64(*($3 + [52]), ($13 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	CALL $85(($13 + [8]), $2)
	
.LABEL $label$5
	CALL $86(($13 + [8]), $3)
	$3 = CALL db_lowerbound_i64(*($13 + [8]), *($5), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = *($11)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$3 = $1
	goto $label$7 
	
.LABEL $label$8
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $151($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *($7)
	
.LABEL $label$7
	*($11) = $1
	CALL $151($3)
	
.LABEL $label$6
	CALL eosio_assert([1], [1344])
	$3 = CALL db_next_i64(*($12 + [16]), ($13 + [8]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$12 = CALL $83(($13 + [48]), $3)
	goto $label$2 
	
.LABEL $label$1
	*((($13 + [8]) + [32])) = [0]
	*($13 + [24]) = (int_64)-1
	$4 = *($0)
	*($13 + [8]) = $4
	*($13 + [16]) = $4
	*($13 + [32]) = (int_64)0
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7033830969580716032, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $84(($13 + [8]), $3)
	$5 = ($13 + [16])
	
.LOOP $label$12:
	CALL eosio_assert([1], [1296])
	CALL eosio_assert([1], [1344])
	$2 = CALL db_next_i64(*($3 + [56]), ($13 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	CALL $84(($13 + [8]), $2)
	
.LABEL $label$13
	CALL $87(($13 + [8]), $3)
	$3 = CALL db_lowerbound_i64(*($13 + [8]), *($5), (int_64)7033830969580716032, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $84(($13 + [8]), $3)
	goto $label$12 
	
.LABEL $label$11
	$5 = *($13 + [32])
	if ( ($5 == 0) ){ goto $label$14 }
	$1 = ($13 + [36])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	CALL $151($2)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$17 }
	$3 = *(($13 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $5
	
.LABEL $label$15
	*($1) = $5
	CALL $151($3)
	
.LABEL $label$14
	$5 = *($13 + [72])
	if ( ($5 == 0) ){ goto $label$19 }
	$1 = ($13 + [76])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	CALL $151($2)
	
.LABEL $label$23
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$22 }
	$3 = *(($13 + [72]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $5
	
.LABEL $label$20
	*($1) = $5
	CALL $151($3)
	
.LABEL $label$19
	*([0] + [4]) = ($13 + [96])
}

void .FUNC _ZN4game6setrefEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$33($2), [1216])
	CALL eosio_assert(((int_64)$2 != (int_64)$1), [1552])
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [8]) = $4
	*($7 + [16]) = $4
	$6 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)3607749778735104000, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $81(($7 + [8]), $3)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [320])
	
.LABEL $label$1
	$3 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($3, [1584])
	$4 = *($0)
	CALL eosio_assert($3, [704])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [752])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$14()), [800])
	*($6 + [8]) = $2
	$2 = *($6)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($7 + [48]), $6, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [48]) | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $4, ($7 + [48]), [16])
	$6 = (($7 + [8]) + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$2 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $151($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	$6 = *(($7 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$6 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $151($6)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $150([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [416])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1376])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1424])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1488])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $151($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $151($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = *([0] + [4])
	$5 = $6
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	$4 = *(*($3 + [4]))
	if ( (int_64)($4 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 == (int_64)*(*($3))) ){ goto $label$1 }
	if ( (CALL is_account($4) == 0) ){ goto $label$1 }
	*($1 + [8]) = *(*(($3 + [4])))
	
.LABEL $label$1
	*(*(($3 + [4]))) = *($1 + [8])
	$6 = $6
	$3 = ($6 + [-16])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [960])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy(($6 + [-8]), ($1 + [8]), [8])
	$4 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$2 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = $5
}

void .FUNC _ZN4game19count_welcome_bonusEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	*(($11 + [88])) = [0]
	*($11 + [72]) = (int_64)-1
	*($11 + [80]) = (int_64)0
	$8 = *($0)
	*($11 + [56]) = $8
	*($11 + [64]) = $8
	$10 = CALL db_find_i64($8, $8, (int_64)-3665743303606108160, (int_64)1498370564)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $100(($11 + [56]), $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($11 + [56])), [320])
	goto $label$1 
	
.LABEL $label$2
	$9 = *($0)
	CALL eosio_assert(((int_64)*($11 + [56]) == (int_64)CALL $fimport$14()), [1072])
	*(($10 = CALL $150([40])) + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = ($11 + [56])
	*($10) = (int_64)1498370564
	CALL eosio_assert([1], [960])
	CALL memcpy(($11 + [112]), $10, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [112]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [112]) + [16]), ($10 + [16]), [8])
	$8 = *($10)
	$5 = CALL db_store_i64(*((($11 + [56]) + [8])), (int_64)-3665743303606108160, $9, $8, ($11 + [112]), [24])
	*($10 + [28]) = $5
	$2 = (($11 + [56]) + [16])
	if ( (uint_64)($8 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($11 + [104]) = $10
	$8 = *($10)
	*($11 + [112]) = $8
	*($11 + [100]) = $5
	$4 = ($11 + [84])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($11 + [88]))) ){ goto $label$5 }
	*($2 + [8]) = $8
	*($2 + [16]) = $5
	*($11 + [104]) = [0]
	*($2) = $10
	*($4) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $101(($11 + [80]), ($11 + [104]), ($11 + [112]), ($11 + [100]))
	
.LABEL $label$4
	$2 = *($11 + [104])
	*($11 + [104]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $151($2)
	
.LABEL $label$1
	if ( ((uint_64)((int_64)*($10 + [8]) + (int_64)100000000) > (uint_64)(int_64)500000000000) ){ goto $label$7 }
	$9 = *($0)
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [704])
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($11 + [56])), [752])
	CALL eosio_assert(((int_64)*($11 + [56]) == (int_64)CALL $fimport$14()), [800])
	*($10 + [8]) = ((int_64)*($10 + [8]) + (int_64)100000000)
	$8 = *($10)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($11 + [112]), $10, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [112]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [112]) + [16]), ($10 + [16]), [8])
	CALL db_update_i64(*($10 + [28]), $9, ($11 + [112]), [24])
	$10 = (($11 + [56]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$8 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$8 = (int_64)0
	$9 = (int_64)59
	$10 = [544]
	$6 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$10 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$10
	$10 = ($10 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$9 }
	*($11 + [112]) = $6
	*($11 + [48]) = (int_64)1498370564
	*($11 + [40]) = (int_64)100000000
	$3 = *($0)
	CALL eosio_assert([1], [448])
	$8 = (int_64)5853010
	$10 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$2 = [0]
	
.LABEL $label$13
	CALL eosio_assert($2, [512])
	*(($11 + [32])) = [0]
	*($11 + [24]) = (int_64)0
	$10 = CALL strlen([1792])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$20 }
	*($11 + [24]) = ($10 << [1])
	$2 = (($11 + [24]) | [1])
	if ( $10 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$0 = (($10 + [16]) & [-16])
	$2 = CALL $150($0)
	*($11 + [24]) = ($0 | [1])
	*($11 + [32]) = $2
	*($11 + [28]) = $10
	
.LABEL $label$19
	CALL memcpy($2, [1792], $10)
	
.LABEL $label$18
	*(($2 + $10)) = [0]
	$8 = (int_64)0
	$7 = (int_64)59
	$10 = [992]
	$6 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$26 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$22
	$10 = ($10 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$6 = ((int_64)$9 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$21 }
	*((($11 + [8]) + [8])) = *((($11 + [40]) + [8]))
	*($11 + [8]) = *($11 + [40])
	CALL $51(($11 + [112]), $3, $1, ($11 + [8]), ($11 + [24]), $6)
	if ( ((*($11 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $151(*($11 + [32]))
	
.LABEL $label$7
	$0 = *($11 + [80])
	if ( ($0 == 0) ){ goto $label$27 }
	$5 = ($11 + [84])
	$10 = *($5)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$29 }
	
.LOOP $label$30:
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$31 }
	CALL $151($2)
	
.LABEL $label$31
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$30 }
	$10 = *(($11 + [80]))
	goto $label$28 
	
.LABEL $label$29
	$10 = $0
	
.LABEL $label$28
	*($5) = $0
	CALL $151($10)
	
.LABEL $label$27
	*([0] + [4]) = ($11 + [144])
	return (unreachable)
	
.LABEL $label$6
	CALL $152(($11 + [24]))
}

void .FUNC _ZN4game13cleanup_gainsEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	$4 = (int_64)0
	*($6 + [24]) = (int_64)0
	$1 = *($0)
	*($6) = $1
	*($6 + [8]) = $1
	$0 = CALL db_lowerbound_i64($1, $1, (int_64)7033830969580716032, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL $84($6, $0)
	*($6 + [44]) = [0]
	*($6 + [40]) = $6
	$1 = *(*(CALL $95(($6 + [40])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($0 = ($6 + [16]))) = $4
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1616])
	$1 = *($0)
	if ( (uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)100) ){ goto $label$2 }
	$0 = [0]
	$3 = ($6 + [8])
	$5 = CALL db_lowerbound_i64(*($6), *($3), (int_64)7033830969580716032, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $84($6, $5)
	
.LABEL $label$3
	$1 = ((int_64)$1 + (int_64)-101)
	
.LOOP $label$4:
	$5 = [0]
	$2 = CALL db_upperbound_i64(*($6), *($3), (int_64)7033830969580716032, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $84($6, $2)
	
.LABEL $label$5
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [1296])
	CALL eosio_assert($5, [1344])
	$5 = CALL db_next_i64(*($0 + [56]), ($6 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $84($6, $5)
	
.LABEL $label$6
	CALL $87($6, $0)
	$0 = [0]
	$5 = CALL db_lowerbound_i64(*($6), *($3), (int_64)7033830969580716032, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $84($6, $5)
	goto $label$4 
	
.LABEL $label$2
	$3 = *($6 + [24])
	if ( ($3 == 0) ){ goto $label$7 }
	$2 = ($6 + [28])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $151($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($2) = $3
	CALL $151($0)
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [56]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1744])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7033830969580716032)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1680])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $84(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [16]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1744])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1680])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $83(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [1376])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1424])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1488])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $151($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $151($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [16]))
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [416])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN4game13cleanup_gamesEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	*(($14 + [80])) = [0]
	*($14 + [64]) = (int_64)-1
	$9 = (int_64)0
	*($14 + [72]) = (int_64)0
	$5 = *($0)
	*($14 + [48]) = $5
	*($14 + [56]) = $5
	$3 = CALL db_lowerbound_i64($5, $5, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL $83(($14 + [48]), $3)
	*($14 + [12]) = [0]
	*($14 + [8]) = ($14 + [48])
	$5 = *(*(CALL $96(($14 + [8])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($3 = ($14 + [64]))) = $9
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [1616])
	$5 = *($3)
	if ( (uint_64)(((int_64)$5 + (int_64)-1) <= (int_64)20) ){ goto $label$2 }
	$13 = [0]
	$4 = (($14 + [48]) + [8])
	$3 = CALL db_lowerbound_i64(*($14 + [48]), *($4), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $83(($14 + [48]), $3)
	
.LABEL $label$3
	$1 = ((int_64)$5 + (int_64)-21)
	$7 = ($14 + [24])
	$8 = ($14 + [32])
	$10 = ($14 + [36])
	$11 = ($14 + [40])
	$12 = ($14 + [44])
	
.LOOP $label$4:
	$3 = [0]
	$2 = CALL db_upperbound_i64(*($14 + [48]), *($4), (int_64)7035924439720001536, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $83(($14 + [48]), $2)
	
.LABEL $label$5
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$2 }
	$5 = *($13)
	*(($6 = (($14 + [8]) + [8]))) = $5
	*($7) = (int_64)-1
	*($8) = [0]
	$9 = *($0)
	*($14 + [8]) = $9
	*($10) = [0]
	*($11) = [0]
	*($12) = [0]
	$3 = CALL db_lowerbound_i64($9, $5, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = CALL $85(($14 + [8]), $3)
	CALL eosio_assert([1], [1296])
	CALL eosio_assert([1], [1344])
	$2 = CALL db_next_i64(*($3 + [52]), ($14 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL $85(($14 + [8]), $2)
	
.LABEL $label$8
	CALL $86(($14 + [8]), $3)
	$3 = CALL db_lowerbound_i64(*($14 + [8]), *($6), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$6
	$3 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($3, [1296])
	CALL eosio_assert($3, [1344])
	$3 = CALL db_next_i64(*($13 + [16]), ($14 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	CALL $83(($14 + [48]), $3)
	
.LABEL $label$9
	CALL $97(($14 + [48]), $13)
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$10 }
	$3 = *($10)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$12 }
	$3 = $6
	goto $label$11 
	
.LABEL $label$12
	
.LOOP $label$13:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $151($2)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$13 }
	$3 = *($8)
	
.LABEL $label$11
	*($10) = $6
	CALL $151($3)
	
.LABEL $label$10
	$13 = [0]
	$3 = CALL db_lowerbound_i64(*($14 + [48]), *($4), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$13 = CALL $83(($14 + [48]), $3)
	goto $label$4 
	
.LABEL $label$2
	$6 = *($14 + [72])
	if ( ($6 == 0) ){ goto $label$15 }
	$13 = ($14 + [76])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	CALL $151($2)
	
.LABEL $label$19
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($14 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $6
	
.LABEL $label$16
	*($13) = $6
	CALL $151($3)
	
.LABEL $label$15
	*([0] + [4]) = ($14 + [96])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	*(($1 = CALL $150([28]))) = [2052]
	*(($1 + [24])) = *(($0 + [24]))
	*(($1 + [20])) = *(($0 + [20]))
	*(($1 + [16])) = *(($0 + [16]))
	*(($1 + [12])) = *(($0 + [12]))
	*(($1 + [8])) = *(($0 + [8]))
	*($1 + [4]) = *($0 + [4])
	return $1
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	*($1) = [2052]
	*(($1 + [24])) = *(($0 + [24]))
	*(($1 + [20])) = *(($0 + [20]))
	*(($1 + [16])) = *(($0 + [16]))
	*(($1 + [12])) = *(($0 + [12]))
	*(($1 + [8])) = *(($0 + [8]))
	*($1 + [4]) = *($0 + [4])
}

void .FUNC _ZN4game10create_betEyyN5eosio5assetEP10BetChecker (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	*($7 + [64]) = $2
	$2 = *($3 + [8])
	$5 = *($3)
	*($7 + [60]) = $4
	CALL eosio_assert(((int_64)((int_64)((int_64)$5 * (int_64)*($4 + [17])) / (int_64)10000) <= (int_64)( (int_64)360000 ? (int_64)360 : ((int_64)$2 == (int_64)1498370564) )), [2144])
	$4 = [0]
	*(($7 + [48])) = [0]
	*($7 + [24]) = $1
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$1 = *($0)
	*($7 + [16]) = $1
	*($7 + [52]) = [0]
	*($7 + [12]) = $3
	*($7 + [4]) = ($7 + [60])
	*($7) = ($7 + [16])
	*($7 + [8]) = ($7 + [64])
	*($7 + [104]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$14()), [1072])
	*($7 + [84]) = $7
	*($7 + [80]) = ($7 + [16])
	*($7 + [88]) = ($7 + [104])
	*(($3 = CALL $150([64])) + [40]) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [448])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [512])
	*($3 + [48]) = ($7 + [16])
	CALL $132(($7 + [80]), $3)
	*($7 + [96]) = $3
	$1 = *($3)
	*($7 + [80]) = $1
	$0 = *($3 + [52])
	*($7 + [76]) = $0
	$6 = ($7 + [44])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($7 + [48]))) ){ goto $label$7 }
	*($4 + [8]) = $1
	*($4 + [16]) = $0
	*($7 + [96]) = [0]
	*($4) = $3
	*($6) = ($4 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $89(($7 + [40]), ($7 + [96]), ($7 + [80]), ($7 + [76]))
	
.LABEL $label$6
	$4 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $151($4)
	
.LABEL $label$8
	$0 = *($7 + [40])
	if ( ($0 == 0) ){ goto $label$9 }
	$6 = ($7 + [44])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $151($3)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($7 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $0
	
.LABEL $label$10
	*($6) = $0
	CALL $151($4)
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [112])
}

void .FUNC _ZN4game9send_feesERKN5eosio5assetEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$3 = *($1 + [8])
	$10 = (int_64)0
	$12 = (int_64)59
	$7 = [544]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [432]
	$11 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$10 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$10
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$5 }
	*($13 + [136]) = ( $8 ? $11 : ((int_64)$3 == (int_64)1498370564) )
	$5 = *($0)
	$10 = (int_64)0
	$12 = (int_64)59
	$7 = [2176]
	$8 = (int_64)0
	
.LOOP $label$11:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$12 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$11 }
	$10 = *($1)
	CALL eosio_assert([1], [2192])
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [2240])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [2272])
	*($13 + [128]) = $3
	*(($13 + [112])) = [0]
	*($13 + [120]) = ((int_64)$10 / (int_64)100)
	*($13 + [108]) = [0]
	*($13 + [104]) = [0]
	$7 = CALL strlen([2304])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$19 }
	*($13 + [104]) = ($7 << [1])
	$4 = (($13 + [104]) | [1])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = (($7 + [16]) & [-16])
	$4 = CALL $150($6)
	*($13 + [104]) = ($6 | [1])
	*($13 + [112]) = $4
	*($13 + [108]) = $7
	
.LABEL $label$18
	CALL memcpy($4, [2304], $7)
	
.LABEL $label$17
	*(($4 + $7)) = [0]
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [992]
	$11 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$25 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$4 = ($4 + [165])
	goto $label$23 
	
.LABEL $label$25
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	*((($13 + [16]) + [8])) = *((($13 + [120]) + [8]))
	*($13 + [16]) = *($13 + [120])
	CALL $51(($13 + [136]), $5, $8, ($13 + [16]), ($13 + [104]), $11)
	if ( ((*($13 + [104]) & [1]) == 0) ){ goto $label$26 }
	CALL $151(*($13 + [112]))
	
.LABEL $label$26
	if ( (int_64)($2 == 0) ){ goto $label$27 }
	*(($13 + [96])) = [0]
	*($13 + [80]) = (int_64)-1
	*($13 + [88]) = (int_64)0
	$10 = *($0)
	*($13 + [64]) = $10
	*($13 + [72]) = $10
	$7 = CALL db_find_i64($10, $10, (int_64)-5001810336148357120, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$29 }
	$7 = CALL $78(($13 + [64]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($13 + [64])), [320])
	$10 = *($7 + [8])
	goto $label$28 
	
.LABEL $label$29
	$10 = (int_64)50
	
.LABEL $label$28
	$10 = ((int_64)$10 * (int_64)*($1))
	if ( ((int_64)$10 < (int_64)10000) ){ goto $label$30 }
	*($13 + [48]) = ((uint_64)$10 / (uint_64)(int_64)10000)
	$10 = *(($1 + [8]))
	*($13 + [56]) = $10
	$11 = *($0)
	CALL eosio_assert([1], [448])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [512])
	*(($13 + [40])) = [0]
	*($13 + [32]) = (int_64)0
	$7 = CALL strlen([2320])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$38 }
	*($13 + [32]) = ($7 << [1])
	$4 = (($13 + [32]) | [1])
	if ( $7 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$1 = (($7 + [16]) & [-16])
	$4 = CALL $150($1)
	*($13 + [32]) = ($1 | [1])
	*($13 + [40]) = $4
	*($13 + [36]) = $7
	
.LABEL $label$37
	CALL memcpy($4, [2320], $7)
	
.LABEL $label$36
	*(($4 + $7)) = [0]
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [992]
	$8 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$44 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$4 = ($4 + [165])
	goto $label$42 
	
.LABEL $label$44
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$40
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$12 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$39 }
	*(($13 + [8])) = *((($13 + [48]) + [8]))
	*($13) = *($13 + [48])
	CALL $51(($13 + [136]), $11, $2, $13, ($13 + [32]), $8)
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$30 }
	CALL $151(*($13 + [40]))
	
.LABEL $label$30
	$1 = *($13 + [88])
	if ( ($1 == 0) ){ goto $label$27 }
	$0 = ($13 + [92])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$46 }
	
.LOOP $label$47:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$48 }
	CALL $151($4)
	
.LABEL $label$48
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$47 }
	$7 = *(($13 + [88]))
	goto $label$45 
	
.LABEL $label$46
	$7 = $1
	
.LABEL $label$45
	*($0) = $1
	CALL $151($7)
	
.LABEL $label$27
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$16
	CALL $152(($13 + [104]))
	
.LABEL $label$15
	CALL $152(($13 + [32]))
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $85($4, $5)
	*($9 + [12]) = [0]
	*($9 + [8]) = $4
	$6 = *(*(CALL $133(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1616])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = *(*(*($3 + [4])) + [8])
	*($1 + [16]) = *(*($3 + [8]))
	$3 = *($3 + [12])
	*($1 + [32]) = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	$4 = $10
	$3 = ($4 + [-48])
	*([0] + [4]) = $3
	*($9 + [12]) = $3
	*($9 + [8]) = $3
	*($9 + [16]) = $4
	CALL $134(($9 + [8]), $1)
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $6, $3, [48])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [24]) = *(($1 + [16]))
	*($1 + [56]) = CALL db_idx64_store($6, (int_64)4229443000054317056, $7, $8, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $133 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1744])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229443000054317056)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1680])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $85(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	CALL _Z13getBetCheckery(((int_64)$5 | (int_64)$6))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$4 = (CASTING uint_64)(uint_32 $2)
	$5 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$3:
	$6 = ((int_64)((int_64)*($1) << (int_64)((int_64)$5 & (int_64)4294967294)) | (int_64)$6)
	$1 = ($1 + [4])
	$5 = ((int_64)$5 + (int_64)6)
	$4 = ((int_64)$4 + (int_64)-1)
	if ( ((int_64)($4 == 0) == 0) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	$1 = *($0)
	$2 = CALL strlen([2352])
	if ( ((int_32)$2 != (int_32)( *($0 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$18 }
	if ( (CALL $161($0, [0], [-1], [2352], $2) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2368])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$19 }
	if ( (CALL $161($0, [0], [-1], [2368], $3) == 0) ){ goto $label$15 }
	
.LABEL $label$19
	$1 = *($0)
	$3 = CALL strlen([2384])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$20 }
	if ( (CALL $161($0, [0], [-1], [2384], $3) == 0) ){ goto $label$14 }
	
.LABEL $label$20
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2400])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$21 }
	if ( (CALL $161($0, [0], [-1], [2400], $3) == 0) ){ goto $label$16 }
	
.LABEL $label$21
	$1 = *($0)
	$3 = CALL strlen([2416])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$22 }
	if ( (CALL $161($0, [0], [-1], [2416], $3) == 0) ){ goto $label$16 }
	
.LABEL $label$22
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2432])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$23 }
	if ( (CALL $161($0, [0], [-1], [2432], $3) == 0) ){ goto $label$13 }
	
.LABEL $label$23
	$1 = *($0)
	$3 = CALL strlen([2448])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$24 }
	if ( (CALL $161($0, [0], [-1], [2448], $3) == 0) ){ goto $label$12 }
	
.LABEL $label$24
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2464])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$25 }
	if ( (CALL $161($0, [0], [-1], [2464], $3) == 0) ){ goto $label$11 }
	
.LABEL $label$25
	$1 = *($0)
	$3 = CALL strlen([2480])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$26 }
	if ( (CALL $161($0, [0], [-1], [2480], $3) == 0) ){ goto $label$10 }
	
.LABEL $label$26
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2496])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$27 }
	if ( (CALL $161($0, [0], [-1], [2496], $3) == 0) ){ goto $label$9 }
	
.LABEL $label$27
	$1 = *($0)
	$3 = CALL strlen([2512])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$28 }
	if ( (CALL $161($0, [0], [-1], [2512], $3) == 0) ){ goto $label$8 }
	
.LABEL $label$28
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2528])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$29 }
	if ( (CALL $161($0, [0], [-1], [2528], $3) == 0) ){ goto $label$7 }
	
.LABEL $label$29
	$1 = *($0)
	$3 = CALL strlen([2544])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$30 }
	if ( (CALL $161($0, [0], [-1], [2544], $3) == 0) ){ goto $label$6 }
	
.LABEL $label$30
	$1 = *($0)
	$2 = ($0 + [4])
	$3 = CALL strlen([2560])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$31 }
	if ( (CALL $161($0, [0], [-1], [2560], $3) == 0) ){ goto $label$5 }
	
.LABEL $label$31
	$5 = (int_64)1030792151040
	$1 = *($0)
	$3 = CALL strlen([2576])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$4 }
	$5 = ( (int_64)1030792151040 ? (int_64)893353197568 : CALL $161($0, [0], [-1], [2576], $3) )
	goto $label$4 
	
.LABEL $label$17
	$5 = (int_64)0
	goto $label$4 
	
.LABEL $label$16
	$5 = (int_64)206158430208
	goto $label$4 
	
.LABEL $label$15
	$5 = (int_64)68719476736
	goto $label$4 
	
.LABEL $label$14
	$5 = (int_64)137438953472
	goto $label$4 
	
.LABEL $label$13
	$5 = (int_64)274877906944
	goto $label$4 
	
.LABEL $label$12
	$5 = (int_64)343597383680
	goto $label$4 
	
.LABEL $label$11
	$5 = (int_64)412316860416
	goto $label$4 
	
.LABEL $label$10
	$5 = (int_64)481036337152
	goto $label$4 
	
.LABEL $label$9
	$5 = (int_64)549755813888
	goto $label$4 
	
.LABEL $label$8
	$5 = (int_64)618475290624
	goto $label$4 
	
.LABEL $label$7
	$5 = (int_64)687194767360
	goto $label$4 
	
.LABEL $label$6
	$5 = (int_64)755914244096
	goto $label$4 
	
.LABEL $label$5
	$5 = (int_64)824633720832
	return .LABEL $label$4
}

int_32 .FUNC $136 (int_32 $0)
{
	return $0
}

void .FUNC $137 (int_32 $0)
{
	CALL $151($0)
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

void .FUNC $206 ()
{
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$5 = [0]
	*($7 + [56]) = [0]
	*($7 + [48]) = (int_64)0
	$6 = *($0)
	if ( (( *($0 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == 0) ){ goto $label$1 }
	$2 = ($0 + [4])
	$6 = [0]
	$5 = [0]
	$1 = [0]
	
.LOOP $label$2:
	$3 = CALL $154($0, $6)
	$4 = *($0)
	if ( ((int_32)*($3) != (int_32)[32]) ){ goto $label$5 }
	$3 = *($2)
	goto $label$4 
	
.LABEL $label$5
	$3 = *($2)
	if ( ((int_32)$6 != (int_32)(( $3 ? uint_32($4 >> [1]) : ($4 & [1]) ) + [-1])) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$6 != (int_32)(( $3 ? uint_32($4 >> [1]) : ($4 & [1]) ) + [-1])) ){ goto $label$6 }
	$6 = (((int_32)*(CALL $154($0, $6)) != (int_32)[32]) + $6)
	
.LABEL $label$6
	$4 = ($6 - $1)
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $172($7, $0, $1, $4, $0)
	*(((($7 + [16]) + ($5 << [2])) + [-4])) = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($7, [0], [10])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $151(*(($7 + [8])))
	goto $label$8 
	
.LABEL $label$9
	CALL $172($7, $0, $1, $4, $0)
	if ( (*($7 + [48]) & [1]) ){ goto $label$11 }
	*($7 + [48]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*((($7 + [48]) + [8]))) = [0]
	*($7 + [52]) = [0]
	
.LABEL $label$10
	CALL $153(($7 + [48]), [0])
	*((($7 + [48]) + [8])) = *(($7 + [8]))
	*($7 + [48]) = *($7)
	
.LABEL $label$8
	$5 = ($5 + [1])
	
.LABEL $label$7
	$1 = ($6 + [1])
	$3 = *($2)
	$4 = *($0)
	
.LABEL $label$3
	if ( ((int_32)$5 > (int_32)[6]) ){ goto $label$1 }
	$6 = ($6 + [1])
	if ( ($6 <= ( $3 ? uint_32(($4 & [254]) >> [1]) : ($4 & [1]) )) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = CALL $135(($7 + [48]), ($7 + [16]), ($5 + [-1]))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL $151(*(($7 + [56])))
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [64])
	return $6
}

void .FUNC _ZN4game19count_deposit_bonusEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	if ( ((int_64)*($2 + [8]) == (int_64)1498370564) ){ goto $label$2 }
	*(($13 + [88])) = [0]
	*($13 + [72]) = (int_64)-1
	*($13 + [80]) = (int_64)0
	$11 = *($0)
	*($13 + [56]) = $11
	*($13 + [64]) = $11
	$8 = CALL db_find_i64($11, $11, (int_64)-3665743303606108160, (int_64)1498370564)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $100(($13 + [56]), $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($13 + [56])), [320])
	goto $label$3 
	
.LABEL $label$4
	$12 = *($0)
	CALL eosio_assert(((int_64)*($13 + [56]) == (int_64)CALL $fimport$14()), [1072])
	*(($8 = CALL $150([40])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = ($13 + [56])
	*($8) = (int_64)1498370564
	CALL eosio_assert([1], [960])
	CALL memcpy(($13 + [112]), $8, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($13 + [112]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($13 + [112]) + [16]), ($8 + [16]), [8])
	$11 = *($8)
	$3 = CALL db_store_i64(*((($13 + [56]) + [8])), (int_64)-3665743303606108160, $12, $11, ($13 + [112]), [24])
	*($8 + [28]) = $3
	$6 = (($13 + [56]) + [16])
	if ( (uint_64)($11 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($13 + [104]) = $8
	$11 = *($8)
	*($13 + [112]) = $11
	*($13 + [100]) = $3
	$5 = ($13 + [84])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($13 + [88]))) ){ goto $label$7 }
	*($6 + [8]) = $11
	*($6 + [16]) = $3
	*($13 + [104]) = [0]
	*($6) = $8
	*($5) = ($6 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $101(($13 + [80]), ($13 + [104]), ($13 + [112]), ($13 + [100]))
	
.LABEL $label$6
	$6 = *($13 + [104])
	*($13 + [104]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $151($6)
	
.LABEL $label$3
	$12 = *($8 + [16])
	$11 = *($2)
	$7 = ((int_64)$11 * (int_64)50)
	if ( (uint_64)(((int_64)$7 + (int_64)$12) <= (int_64)500000000001) ){ goto $label$9 }
	$7 = ((int_64)$11 * (int_64)25)
	if ( ((uint_64)((int_64)$7 + (int_64)$12) <= (uint_64)(int_64)1500000000000) ){ goto $label$9 }
	$7 = ((int_64)$11 * (int_64)10)
	if ( (uint_64)(((int_64)$7 + (int_64)$12) <= (int_64)3500000000001) ){ goto $label$9 }
	$7 = ((int_64)$11 * (int_64)5)
	if ( ((uint_64)((int_64)$7 + (int_64)$12) > (uint_64)(int_64)9500000000000) ){ goto $label$8 }
	
.LABEL $label$9
	$12 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [704])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($13 + [56])), [752])
	CALL eosio_assert(((int_64)*($13 + [56]) == (int_64)CALL $fimport$14()), [800])
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)$7)
	$11 = *($8)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($13 + [112]), $8, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($13 + [112]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($13 + [112]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $12, ($13 + [112]), [24])
	$8 = (($13 + [56]) + [16])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$10 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$11 = (int_64)0
	$12 = (int_64)59
	$8 = [544]
	$9 = (int_64)0
	
.LOOP $label$11:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$12 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$2 = ($2 + [165])
	goto $label$13 
	
.LABEL $label$14
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$11 }
	*($13 + [112]) = $9
	*($13 + [48]) = (int_64)1498370564
	*($13 + [40]) = $7
	$4 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [448])
	$11 = (int_64)5853010
	$8 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$2 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$2 = [0]
	
.LABEL $label$15
	CALL eosio_assert($2, [512])
	*(($13 + [32])) = [0]
	*($13 + [24]) = (int_64)0
	$8 = CALL strlen([2592])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$22 }
	*($13 + [24]) = ($8 << [1])
	$2 = (($13 + [24]) | [1])
	if ( $8 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$0 = (($8 + [16]) & [-16])
	$2 = CALL $150($0)
	*($13 + [24]) = ($0 | [1])
	*($13 + [32]) = $2
	*($13 + [28]) = $8
	
.LABEL $label$21
	CALL memcpy($2, [2592], $8)
	
.LABEL $label$20
	*(($2 + $8)) = [0]
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [992]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$28 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$2 = ($2 + [165])
	goto $label$26 
	
.LABEL $label$28
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$12 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	*((($13 + [8]) + [8])) = *((($13 + [40]) + [8]))
	*($13 + [8]) = *($13 + [40])
	CALL $51(($13 + [112]), $4, $1, ($13 + [8]), ($13 + [24]), $9)
	if ( ((*($13 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $151(*($13 + [32]))
	
.LABEL $label$8
	$0 = *($13 + [80])
	if ( ($0 == 0) ){ goto $label$2 }
	$6 = ($13 + [84])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$32 }
	CALL $151($2)
	
.LABEL $label$32
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$31 }
	$8 = *(($13 + [80]))
	goto $label$29 
	
.LABEL $label$30
	$8 = $0
	
.LABEL $label$29
	*($6) = $0
	CALL $151($8)
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $152(($13 + [24]))
}

int_32 .FUNC _Z9get2BytesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $172($2, $0, $1, [4], $0)
	$0 = (CALL strtoul(( *($2 + [8]) ? ($2 | [1]) : (*($2) & [1]) ), [0], [16]) & [255])
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL $151(*(($2 + [8])))
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC _Z13getBetCheckery (int_64 $0)
{
	int_32 $1
	$1 = ((CASTING uint_32)(uint_64 (uint_64)$0 >> (uint_64)(int_64)36)) & [255]
	if ( ((uint_32)$1) > (uint_32)[13]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$15
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [9217]
	*($1) = [60]
	return $1
	
.LABEL $label$14
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1) = [284]
	*($1 + [16]) = [0]
	return $1
	
.LABEL $label$13
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [4610]
	*($1) = [76]
	return $1
	
.LABEL $label$12
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [3075]
	*($1) = [92]
	return $1
	
.LABEL $label$11
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [2308]
	*($1) = [108]
	return $1
	
.LABEL $label$10
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [3075]
	*($1) = [124]
	return $1
	
.LABEL $label$9
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [2304]
	*($1) = [140]
	return $1
	
.LABEL $label$8
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [1542]
	*($1) = [156]
	return $1
	
.LABEL $label$7
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [769]
	*($1) = [172]
	return $1
	
.LABEL $label$6
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [769]
	*($1) = [188]
	return $1
	
.LABEL $label$5
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [512]
	*($1) = [204]
	return $1
	
.LABEL $label$4
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [512]
	*($1) = [220]
	return $1
	
.LABEL $label$3
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [512]
	*($1) = [236]
	return $1
	
.LABEL $label$2
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [512]
	*($1) = [252]
	return $1
	
.LABEL $label$1
	*(($1 = CALL $150([24])) + [8]) = $0
	*($1 + [16]) = [513]
	*($1) = [268]
	$1
	return $1
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $150([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $52(($8 + [28]), [16])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [960])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [960])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($7 = ($8 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($7 = ($8 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $151($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $151($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $151($7)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)7033830969580716032, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $84($4, $5)
	*($7 + [4]) = [0]
	*($7) = $4
	$6 = *(*(CALL $95($7) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1616])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = *(*($3 + [8]))
	$4 = *($3 + [12])
	*($1 + [32]) = *($4)
	*(($1 + [40])) = *(($4 + [8]))
	*($1 + [48]) = *(*($3 + [4]) + [8])
	$4 = $8
	$3 = ($4 + [-64])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($4 + [-15])
	CALL $122($7, $1)
	$6 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($2 + [8]), (int_64)7033830969580716032, *(*($0 + [8])), $6, $3, [49])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN4game12process_gainEyRK4GameN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [160])
	*([0] + [4]) = $13
	*($13 + [112]) = $1
	*(($13 + [104])) = [0]
	*($13 + [88]) = (int_64)-1
	$10 = (int_64)0
	*($13 + [96]) = (int_64)0
	$4 = *($0)
	*($13 + [72]) = $4
	*($13 + [80]) = $4
	$5 = *($3 + [8])
	$12 = (int_64)59
	$7 = [544]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [432]
	$11 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$10 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$5 }
	*((($13 + [56]) + [8])) = *(($3 + [8]))
	*($13 + [128]) = ( $8 ? $11 : ((int_64)$5 == (int_64)1498370564) )
	*($13 + [56]) = *($3)
	CALL _ZNSt3__19to_stringEy(($13 + [24]), *($2))
	$7 = CALL $158(($13 + [24]), [0], [1920])
	$6 = ($7 + [8])
	*((($13 + [40]) + [8])) = *($6)
	*($13 + [40]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($6) = [0]
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [992]
	$8 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$16 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$16
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$12 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	*((($13 + [8]) + [8])) = *((($13 + [56]) + [8]))
	*($13 + [8]) = *($13 + [56])
	CALL $51(($13 + [128]), $4, $1, ($13 + [8]), ($13 + [40]), $8)
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$17 }
	CALL $151(*($13 + [48]))
	
.LABEL $label$17
	if ( ((*($13 + [24]) & [1]) == 0) ){ goto $label$18 }
	CALL $151(*($13 + [32]))
	
.LABEL $label$18
	$10 = *($0)
	*($13 + [28]) = $2
	*($13 + [36]) = $3
	*($13 + [24]) = ($13 + [72])
	*($13 + [32]) = ($13 + [112])
	*($13 + [152]) = $10
	CALL eosio_assert(((int_64)*($13 + [72]) == (int_64)CALL $fimport$14()), [1072])
	*($13 + [132]) = ($13 + [24])
	*($13 + [128]) = ($13 + [72])
	*($13 + [136]) = ($13 + [152])
	*(($6 = CALL $150([64])) + [40]) = (int_64)1398362884
	*($6 + [32]) = (int_64)0
	CALL eosio_assert([1], [448])
	$10 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$3 = [0]
	
.LABEL $label$19
	CALL eosio_assert($3, [512])
	*($6 + [52]) = ($13 + [72])
	CALL $121(($13 + [128]), $6)
	*($13 + [144]) = $6
	$10 = *($6)
	*($13 + [128]) = $10
	$3 = *($6 + [56])
	*($13 + [124]) = $3
	$2 = ($13 + [100])
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)*(($13 + [104]))) ){ goto $label$25 }
	*($7 + [8]) = $10
	*($7 + [16]) = $3
	*($13 + [144]) = [0]
	*($7) = $6
	*($2) = ($7 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $91(($13 + [96]), ($13 + [144]), ($13 + [128]), ($13 + [124]))
	
.LABEL $label$24
	$7 = *($13 + [144])
	*($13 + [144]) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	CALL $151($7)
	
.LABEL $label$26
	$3 = *($13 + [96])
	if ( ($3 == 0) ){ goto $label$27 }
	$2 = ($13 + [100])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$29 }
	
.LOOP $label$30:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	CALL $151($6)
	
.LABEL $label$31
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$30 }
	$7 = *(($13 + [96]))
	goto $label$28 
	
.LABEL $label$29
	$7 = $3
	
.LABEL $label$28
	*($2) = $3
	CALL $151($7)
	
.LABEL $label$27
	*([0] + [4]) = ($13 + [160])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_64 .FUNC _ZN4game12get_nextspinEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	$5 = (int_64)0
	*($6 + [32]) = (int_64)0
	$3 = *($0)
	*($6 + [8]) = $3
	*($6 + [16]) = $3
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)-4157503053760561152, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = *(CALL $115(($6 + [8]), $0) + [8])
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($6 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $151($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($6 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $151($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
	return $5
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $171(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $171(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $151(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $151(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $102(*($1), ($0 + [32]))
}

int_32 .FUNC $14 (int_32 $0)
{
	return [1]
}

int_64 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = (int_64)0
	$1 = ($1 + [-2])
	if ( ((uint_32)$1 > (uint_32)[33]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$2
	$2 = *($0 + [17])
	
.LABEL $label$1
	$1
	return $2
}

int_32 .FUNC $16 (int_32 $0)
{
	return [1]
}

int_64 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = (int_64)0
	$1 = ($1 + [-1])
	if ( ((uint_32)$1 > (uint_32)[35]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$2
	$2 = *($0 + [17])
	
.LABEL $label$1
	$1
	return $2
}

int_32 .FUNC $10 (int_32 $0)
{
	return [0]
}

int_64 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = (int_64)0
	$4 = [0]
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$5) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$5 = ((int_64)$5 + (int_64)6)
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

int_32 .FUNC $12 (int_32 $0)
{
	return ((((CASTING uint_32)(uint_64 ((int_64)*($0 + [8]) & (int_64)63)) + [-1]) & [255]) <= [2])
}

int_64 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ((int_32)(((int_32)($1 + [-1]) / (int_32)[18]) + [1]) != (int_32)(*($0 + [8]) & [63])) ){ goto $label$1 }
	$2 = *($0 + [17])
	
.LABEL $label$1
	return $2
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $18 (int_32 $0)
{
	return [1]
}

int_64 .FUNC $19 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	return ((int_64)*($0 + [17]) & (int_64))((int_64)0 - (CASTING uint_64)(uint_32 (((int_32)$1 ^ (int_32)[-1]) & [1]))))
	
.LABEL $label$1
	return (int_64)0
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC _ZN4game15defer_send_gainEyy12unsigned_int (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	*($12 + [120]) = $1
	*($12 + [112]) = $2
	CALL cancel_deferred(($12 + [112]))
	$9 = CALL current_time()
	*(($12 + [76])) = [0]
	*(($12 + [80])) = [0]
	*($12 + [60]) = [0]
	*($12 + [64]) = [0]
	*($12 + [68]) = [0]
	*($12 + [72]) = [0]
	*($12 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [84]) = [0]
	*(($12 + [88])) = [0]
	*(($12 + [92])) = [0]
	*($12 + [96]) = [0]
	*(($12 + [100])) = [0]
	*(($12 + [104])) = [0]
	$5 = ($12 + [84])
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [992]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*($12 + [40]) = $10
	*($12 + [32]) = $4
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1952]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$12 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*($12 + [24]) = $10
	*($12 + [16]) = $2
	*($12 + [8]) = $1
	CALL $123($5, ($12 + [32]), $0, ($12 + [24]), ($12 + [8]))
	$9 = *($0)
	*(($12 + [68])) = $3
	CALL $108(($12 + [32]), ($12 + [48]))
	$7 = *($12 + [32])
	CALL send_deferred(($12 + [112]), $9, $7, (*($12 + [36]) - $7), [0])
	$7 = *($12 + [32])
	if ( ($7 == 0) ){ goto $label$13 }
	*($12 + [36]) = $7
	CALL $151($7)
	
.LABEL $label$13
	CALL $109(($12 + [48]))
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4229443000054317056, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [320])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $85($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4229443000054317056, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [320])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $150([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [416])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [416])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $114(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [960])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [960])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [960])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $56(CALL $55($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [960])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [960])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $56($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [960])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [960])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [960])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [960])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [960])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_upperbound(*($8), *($8 + [8]), (int_64)4229443000054317056, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [320])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $85($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4229443000054317056, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [320])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1344])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229443000054317056, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [320])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $85($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)4229443000054317056, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [320])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_64 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = (int_64)0
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$1 }
	$2 = *($0 + [17])
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $28 (int_32 $0)
{
	return [1]
}

int_64 .FUNC $21 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	return ((int_64)*($0 + [17]) & (int_64))((int_64)0 - ((int_64)(CASTING uint_64)(uint_32 $1) & (int_64)1)))
	
.LABEL $label$1
	return (int_64)0
}

int_32 .FUNC $20 (int_32 $0)
{
	return [1]
}

int_64 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ((int_32)(((int_32)($1 + [-1]) / (int_32)[12]) + [1]) != (int_32)(*($0 + [8]) & [63])) ){ goto $label$1 }
	$2 = *($0 + [17])
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $22 (int_32 $0)
{
	return ((((CASTING uint_32)(uint_64 ((int_64)*($0 + [8]) & (int_64)63)) + [-1]) & [255]) <= [3])
}

int_64 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	$2 = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ((int_32)((uint_32)$1 % (uint_32)[3]) != (int_32)((uint_32)(CASTING uint_32)(uint_64 ((int_64)*($0 + [8]) & (int_64)63)) % (uint_32)[3])) ){ goto $label$1 }
	$2 = *($0 + [17])
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $24 (int_32 $0)
{
	return ((((CASTING uint_32)(uint_64 ((int_64)*($0 + [8]) & (int_64)63)) + [-1]) & [255]) <= [3])
}

int_64 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = [0]
	$4 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$4) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$14 = [1]
	$1 = *($0 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	$2 = *($0 + [8])
	$4 = (int_64)0
	$10 = [0]
	$3 = (int_64)6
	
.LOOP $label$5:
	$5 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$2 >> (uint_64)((int_64)$4 * (int_64)6)) & (int_64)63)
	if ( ((uint_32)$5) > (uint_32)[36]) ){ goto $label$1 }
	$12 = $10
	$13 = $3
	
.LOOP $label$7:
	$12 = ($12 + [1])
	if ( ((int_32)$12 >= (int_32)$1) ){ goto $label$6 }
	$11 = (uint_64)$2 >> (uint_64)$13)
	$13 = ((int_64)$13 + (int_64)6)
	if ( ((int_32)$5 != (int_32)(CASTING uint_32)(uint_64 ((int_64)$11 & (int_64)63))) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	$10 = ($10 + [1])
	$3 = ((int_64)$3 + (int_64)6)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_32)(CASTING uint_32)(uint_64 $4) < (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = ($0 + [16])
	$1 = *($9)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$11 = (int_64)0
	$6 = [12]
	$10 = ($0 + [8])
	
.LOOP $label$8:
	$13 = *($10)
	$12 = (((CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)((int_64)((int_64)$11 * (int_64)6) & (int_64)4294967294))) & [63]) + [-1]
	$7 = ((int_32)$12) % (int_32)[3])
	$0 = ((int_32)$12 / (int_32)[3])
	$11 = ((int_64)$11 + (int_64)1)
	$8 = (CASTING uint_32)(uint_64 $11)
	if ( ((int_32)$8 >= (int_32)int_32(($1 << [24]) >> [24])) ){ goto $label$9 }
	$14 = [0]
	$12 = $6
	$5 = $8
	$1 = (((CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)((int_64)((int_64)$11 * (int_64)6) & (int_64)4294967294))) & [63]) + [-1]
	if ( ((int_32)CALL abs(($0 - ((int_32)$1) / (int_32)[3]))) > (int_32)[1]) ){ goto $label$2 }
	
.LOOP $label$10:
	if ( ((int_32)CALL abs(($7 - ((int_32)$1 % (int_32)[3]))) >= (int_32)[3]) ){ goto $label$2 }
	$1 = *($9)
	$5 = ($5 + [1])
	if ( ((int_32)$5 >= (int_32)$1) ){ goto $label$9 }
	$13 = (CASTING uint_64)(uint_32 $12)
	$12 = ($12 + [6])
	$1 = (((CASTING uint_32)(uint_64 (uint_64)*($10) >> (uint_64)$13)) & [63]) + [-1]
	if ( ((int_32)CALL abs(($0 - ((int_32)$1) / (int_32)[3]))) <= (int_32)[1]) ){ goto $label$10 }
	goto $label$2 
	
.LABEL $label$9
	$6 = ($6 + [6])
	if ( ((int_32)$8 < (int_32)int_32(($1 << [24]) >> [24])) ){ goto $label$8 }
	return [1]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return $14
	
.LABEL $label$1
	return [0]
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $150(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $150([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [416])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [416])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $101(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $151($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $171($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $171(($5 + [16]), $5)
	CALL void $0((int_32 ($2 & [255])), (int_32 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $151(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $151(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $104($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $153($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $150($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $153($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $151($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $152($7)
	return (unreachable)
}

void .FUNC _ZN4game12set_nextspinEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	$2 = *($0)
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	*($7 + [32]) = (int_64)0
	$6 = CALL db_lowerbound_i64($2, $2, (int_64)-4157503053760561152, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $115(($7 + [8]), $6)
	$4 = *($0)
	CALL eosio_assert([1], [704])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($7 + [8])), [752])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$14()), [800])
	*($6 + [8]) = $1
	$2 = *($6)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($7 + [64]), $6, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) + [16]), ($6 + [16]), [8])
	CALL db_update_i64(*($6 + [28]), $4, ($7 + [64]), [24])
	$6 = (($7 + [8]) + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$3 = *($7 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$14()), [1072])
	*(($6 = CALL $150([40])) + [24]) = ($7 + [8])
	*($6 + [8]) = $1
	CALL eosio_assert([1], [960])
	CALL memcpy(($7 + [64]), $6, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($7 + [64]) + [16]), ($6 + [16]), [8])
	$2 = *($6)
	$3 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-4157503053760561152, $4, $2, ($7 + [64]), [24])
	*($6 + [28]) = $3
	$0 = (($7 + [8]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [56]) = $6
	$2 = *($6)
	*($7 + [64]) = $2
	*($7 + [52]) = $3
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((uint_32)$0 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $2
	*($0 + [16]) = $3
	*($7 + [56]) = [0]
	*($0) = $6
	*($5) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $114(($7 + [32]), ($7 + [56]), ($7 + [64]), ($7 + [52]))
	
.LABEL $label$6
	$6 = *($7 + [56])
	*($7 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $151($6)
	
.LABEL $label$3
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $151($0)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $151($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1824])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $52($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [416])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$8 = ($5 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $150(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $170($0)
	
.LABEL $label$1
	*(($9 = ($8 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $150([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($9 + [32])) = [0]
	*(($9 + [36])) = [0]
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$6 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($7 = ($9 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($7 = ($9 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$9 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($9 + [16])) = $2
	CALL $151($2)
	
.LABEL $label$10
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($9 + [4])) = $2
	CALL $151($2)
	
.LABEL $label$11
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $151($7)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN4game13defer_cleanupEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$6 = (int_64)0
	*($9 + [104]) = (int_64)0
	*($9 + [96]) = (int_64)1
	CALL cancel_deferred(($9 + [96]))
	$8 = CALL current_time()
	*(($9 + [60])) = [0]
	*(($9 + [64])) = [0]
	*($9 + [44]) = [0]
	*($9 + [48]) = [0]
	*($9 + [52]) = [0]
	*($9 + [56]) = [0]
	*($9 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [68]) = [0]
	*(($9 + [72])) = [0]
	*(($9 + [76])) = [0]
	*($9 + [80]) = [0]
	*(($9 + [84])) = [0]
	*(($9 + [88])) = [0]
	$2 = ($9 + [68])
	$1 = *($0)
	$5 = (int_64)59
	$4 = [992]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($9 + [24]) = $7
	*($9 + [16]) = $1
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1888]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*($9 + [8]) = $7
	CALL $107($2, ($9 + [16]), $0, ($9 + [8]), $9)
	$6 = *($0)
	*(($9 + [52])) = [1]
	CALL $108(($9 + [16]), ($9 + [32]))
	$4 = *($9 + [16])
	CALL send_deferred(($9 + [96]), $6, $4, (*($9 + [20]) - $4), [0])
	$4 = *($9 + [16])
	if ( ($4 == 0) ){ goto $label$13 }
	*($9 + [20]) = $4
	CALL $151($4)
	
.LABEL $label$13
	CALL $109(($9 + [32]))
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $151($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $151($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $151($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $151($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $151($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $151($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $151($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $151($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $110($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $52($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $111($4, $1)
	CALL $113(CALL $112(CALL $112($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $38 (int_32 $0)
{
	return (uint_64)(((int_64)*($0 + [8]) & (int_64)63) <= (int_64)37)
}

int_64 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = [0]
	$4 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$4) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	(((int_32)$0 == (int_32)$1) & ((int_32)CALL abs(($4 - $2)) == (int_32)[1]))
	$5 = [0]
	$1 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)(int_64)6) & (int_64)63)
	$3 = *($0 + [8])
	$0 = (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)63))
	if ( ((int_32)$0 == (int_32)$1)) ){ goto $label$2 }
	if ( ((uint_32)($0 & [255]) > (uint_32)[36]) ){ goto $label$2 }
	if ( ((uint_32)($1 & [255]) > (uint_32)[36]) ){ goto $label$2 }
	$5 = [1]
	if ( $0 ){ goto $label$3 }
	if ( (($1 & [255]) <= [4]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)($0 & [255]) > (uint_32)[3]) ){ goto $label$4 }
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$4
	$5 = (($1 + [-1]) & [255])
	$1 = ((uint_32)$5 % (uint_32)[3])
	$4 = (($0 + [-1]) & [255])
	$0 = ((uint_32)$4 % (uint_32)[3])
	$2 = ((uint_32)$5 / (uint_32)[3])
	$4 = ((uint_32)$4 / (uint_32)[3])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$1 }
	$5 = [1]
	if ( ((int_32)CALL abs((($0 & [255]) - ($1 & [255]))) != (int_32)[1]) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_64 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = [0]
	$4 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$4) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = *($0 + [8])
	$1 = *($0 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$5 = (int_64)0
	$9 = [0]
	$3 = [0]
	$4 = (int_64)6
	
.LOOP $label$3:
	$6 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$2 >> (uint_64)((int_64)$5 * (int_64)6)) & (int_64)63)
	if ( ((uint_32)$6) > (uint_32)[36]) ){ goto $label$1 }
	$0 = $3
	$8 = $4
	
.LOOP $label$5:
	$0 = ($0 + [1])
	if ( ((int_32)$0 >= (int_32)$1) ){ goto $label$4 }
	$7 = (uint_64)$2 >> (uint_64)$8)
	$8 = ((int_64)$8 + (int_64)6)
	if ( ((int_32)$6 != (int_32)(CASTING uint_32)(uint_64 ((int_64)$7 & (int_64)63))) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_32)(CASTING uint_32)(uint_64 $5) < (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = [0]
	$0 = (CASTING uint_32)(uint_64 $2)
	$1 = ((uint_32)((($0 & [63]) + [255]) & [255]) / (uint_32)[3])
	if ( ((int_32)$1 != (int_32)((uint_32)(((uint_32($0 >> [6]) & [63]) + [255]) & [255]) / (uint_32)[3])) ){ goto $label$1 }
	$9 = ((int_32)$1 == (int_32)((uint_32)(((uint_32($0 >> [12]) & [63]) + [255]) & [255]) / (uint_32)[3]))
	
.LABEL $label$1
	return $9
}

int_64 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = [0]
	$4 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$4) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$14 = [1]
	$1 = *($0 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	$2 = *($0 + [8])
	$4 = (int_64)0
	$10 = [0]
	$3 = (int_64)6
	
.LOOP $label$5:
	$5 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$2 >> (uint_64)((int_64)$4 * (int_64)6)) & (int_64)63)
	if ( ((uint_32)$5) > (uint_32)[36]) ){ goto $label$1 }
	$12 = $10
	$13 = $3
	
.LOOP $label$7:
	$12 = ($12 + [1])
	if ( ((int_32)$12 >= (int_32)$1) ){ goto $label$6 }
	$11 = (uint_64)$2 >> (uint_64)$13)
	$13 = ((int_64)$13 + (int_64)6)
	if ( ((int_32)$5 != (int_32)(CASTING uint_32)(uint_64 ((int_64)$11 & (int_64)63))) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	$10 = ($10 + [1])
	$3 = ((int_64)$3 + (int_64)6)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_32)(CASTING uint_32)(uint_64 $4) < (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = ($0 + [16])
	$1 = *($9)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$11 = (int_64)0
	$6 = [12]
	$10 = ($0 + [8])
	
.LOOP $label$8:
	$13 = *($10)
	$12 = (((CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)((int_64)((int_64)$11 * (int_64)6) & (int_64)4294967294))) & [63]) + [-1]
	$7 = ((int_32)$12) % (int_32)[3])
	$0 = ((int_32)$12 / (int_32)[3])
	$11 = ((int_64)$11 + (int_64)1)
	$8 = (CASTING uint_32)(uint_64 $11)
	if ( ((int_32)$8 >= (int_32)int_32(($1 << [24]) >> [24])) ){ goto $label$9 }
	$14 = [0]
	$12 = $6
	$5 = $8
	$1 = (((CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)((int_64)((int_64)$11 * (int_64)6) & (int_64)4294967294))) & [63]) + [-1]
	if ( ((int_32)CALL abs(($0 - ((int_32)$1) / (int_32)[3]))) > (int_32)[1]) ){ goto $label$2 }
	
.LOOP $label$10:
	if ( ((int_32)CALL abs(($7 - ((int_32)$1 % (int_32)[3]))) >= (int_32)[2]) ){ goto $label$2 }
	$1 = *($9)
	$5 = ($5 + [1])
	if ( ((int_32)$5 >= (int_32)$1) ){ goto $label$9 }
	$13 = (CASTING uint_64)(uint_32 $12)
	$12 = ($12 + [6])
	$1 = (((CASTING uint_32)(uint_64 (uint_64)*($10) >> (uint_64)$13)) & [63]) + [-1]
	if ( ((int_32)CALL abs(($0 - ((int_32)$1) / (int_32)[3]))) <= (int_32)[1]) ){ goto $label$10 }
	goto $label$2 
	
.LABEL $label$9
	$6 = ($6 + [6])
	if ( ((int_32)$8 < (int_32)int_32(($1 << [24]) >> [24])) ){ goto $label$8 }
	return [1]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return $14
	
.LABEL $label$1
	return [0]
}

int_64 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = [0]
	$4 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$4) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = *($0 + [8])
	$1 = *($0 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$5 = (int_64)0
	$9 = [0]
	$3 = [0]
	$4 = (int_64)6
	
.LOOP $label$3:
	$6 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$2 >> (uint_64)((int_64)$5 * (int_64)6)) & (int_64)63)
	if ( ((uint_32)$6) > (uint_32)[3]) ){ goto $label$1 }
	$0 = $3
	$8 = $4
	
.LOOP $label$5:
	$0 = ($0 + [1])
	if ( ((int_32)$0 >= (int_32)$1) ){ goto $label$4 }
	$7 = (uint_64)$2 >> (uint_64)$8)
	$8 = ((int_64)$8 + (int_64)6)
	if ( ((int_32)$6 != (int_32)(CASTING uint_32)(uint_64 ((int_64)$7 & (int_64)63))) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_32)(CASTING uint_32)(uint_64 $5) < (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = (CASTING uint_32)(uint_64 $2)
	$0 = (((uint_32($0 >> [6]) & [63]) + ($0 & [63])) + (uint_32($0 >> [12]) & [63]))
	$9 = (((int_32)$0 == (int_32)[3]) | ((int_32)$0 == (int_32)[5]))
	
.LABEL $label$1
	return $9
}

int_64 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [8])
	$5 = [0]
	$4 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$3 >> (uint_64)$4) & (int_64)63)) == (int_32)$1) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$3 }
	return (int_64)0
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return *($0 + [17])
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [13761])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [13761])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [13761]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [13761]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [14032]))
	$10 = *(($13 + [13761]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [13761]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [13761]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [13761]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [13761])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [13761])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC abs (int_32 $0)
{
	int_32 $1
	$1 = int_32($0 >> [31])
	return ((int_32)($0 + $1) ^ (int_32)$1)
}

int_32 .FUNC strtoul (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}