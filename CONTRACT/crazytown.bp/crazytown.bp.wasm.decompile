(data (i32.const 4) "\c0g\00\00")
(data (i32.const 32) "0\00")
(data (i32.const 48) "transfer\00")
(data (i32.const 64) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 128) "invalid symbol name\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 240) "singleton does not exist\00")
(data (i32.const 272) "cannot pass end iterator to modify\00")
(data (i32.const 320) "cannot create objects in table of another contract\00")
(data (i32.const 384) "write\00")
(data (i32.const 400) "object passed to modify is not in multi_index\00")
(data (i32.const 448) "cannot modify objects in table of another contract\00")
(data (i32.const 512) "updater cannot change primary key when modifying an object\00")
(data (i32.const 576) "error reading iterator\00")
(data (i32.const 608) "don\'t have enough CMU for unstake\00")
(data (i32.const 656) "active\00")
(data (i32.const 672) "dacincubator\00")
(data (i32.const 688) "transfer token by unstake\00")
(data (i32.const 720) "eosio.token\00")
(data (i32.const 736) "claim dividend.\00")
(data (i32.const 752) "get\00")
(data (i32.const 768) "no character exist\00")
(data (i32.const 800) "too long\00")
(data (i32.const 816) "not the owner.\00")
(data (i32.const 832) "next primary key in table is at autoincrement limit\00")
(data (i32.const 896) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 960) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1008) "same hash\00")
(data (i32.const 1024) "receipt\00")
(data (i32.const 1040) "Winner Winner Chicken Dinner. \00")
(data (i32.const 1072) "for miner.\00")
(data (i32.const 1088) "cannot increment end iterator\00")
(data (i32.const 1120) "cannot pass end iterator to erase\00")
(data (i32.const 1168) "object passed to erase is not in multi_index\00")
(data (i32.const 1216) "cannot erase objects in table of another contract\00")
(data (i32.const 1280) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1344) "XXXXXXXXXXX\00")
(data (i32.const 1360) "Invalid token transfer\00")
(data (i32.const 1392) "must buy a positive amount\00")
(data (i32.const 1424) "Bets not equal to amount.\00")
(data (i32.const 1456) "Bets should not < 0.1\00")
(data (i32.const 1488) "Bets should not > 20\00")
(data (i32.const 1520) "winninetysix\00")
(data (i32.const 1536) "for proxy\00")
(data (i32.const 1552) "for refer\00")
(data (i32.const 1568) "unable to find key\00")
(data (i32.const 1600) "only EOS token is allowed\00")
(data (i32.const 1632) "memo should >= 11\00")
(data (i32.const 1664) "wrong size\00")
(data (i32.const 10080) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$1 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$2))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$12 (param i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$15 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$16 (param i32)))
(import "env" "is_account" (func $fimport$17 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$23 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc" (func $5))
(export "_Z7explodeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc" (func $7))
(export "_Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $8))
(export "_Z13string_to_intNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $9))
(export "_Z13int_to_stringy" (func $10))
(export "_ZN12eoscrazytown5applyEyy" (func $11))
(export "_ZN12eoscrazytown10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $13))
(export "_ZN12eoscrazytown4initERK11checksum256" (func $14))
(export "_ZN12eoscrazytown4testEv" (func $16))
(export "_ZN12eoscrazytown5clearEv" (func $18))
(export "_ZN12eoscrazytown6revealERK11checksum256S2_" (func $19))
(export "_ZN12eoscrazytown6newbagERyRN5eosio5assetE" (func $21))
(export "_ZN12eoscrazytown9setsloganERyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $23))
(export "_ZN12eoscrazytown5claimEy" (func $25))
(export "_ZN12eoscrazytown7unstakeEyN5eosio5assetE" (func $27))
(export "_ZN12eoscrazytown9getResultERKhS1_" (func $72))
(export "_ZN12eoscrazytown8getBetonERKNSt3__16vectorIxNS0_9allocatorIxEEEE" (func $74))
(export "apply" (func $96))
(export "_ZN12eoscrazytown11make_profitEo" (func $97))
(export "_ZN12eoscrazytown9checkBetsERKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERNS4_6vectorIxNS8_IxEEEERx" (func $98))
(export "_ZN12eoscrazytown7getBetsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKc" (func $99))
(export "_ZN12eoscrazytown12getTotalBetsERKNSt3__16vectorIxNS0_9allocatorIxEEEE" (func $100))
(export "_ZN12eoscrazytown12checkBetsNewERKN5eosio5assetERNSt3__16vectorIxNS4_9allocatorIxEEEERx" (func $101))
(export "_Z10merge_seedRK11checksum256S1_" (func $102))
(export "malloc" (func $103))
(export "free" (func $106))
(export "memcmp" (func $121))
(export "strlen" (func $122))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $123 $19 $25 $16 $14 $21 $27 $23 $18)



int_32 .FUNC _ZN12eoscrazytown9checkBetsERKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERNS4_6vectorIxNS8_IxEEEERx (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [15]) = [44]
	CALL _ZN12eoscrazytown7getBetsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKc(($7 + [16]), $2, $2, ($7 + [15]))
	if ( ((int_32)($7 + [16]) == (int_32)$3) ){ goto $label$1 }
	CALL $90($3, *($7 + [16]), *($7 + [20]))
	
.LABEL $label$1
	$2 = *($7 + [16])
	if ( ($2 == 0) ){ goto $label$2 }
	*($7 + [20]) = $2
	CALL $108($2)
	
.LABEL $label$2
	$6 = (int_64)0
	$3 = *($3 + [4])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ((int_64)*($2) + (int_64)$6)
	$2 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$3
	*($4) = $6
	$5 = *($1)
	*([0] + [4]) = ($7 + [32])
	return ((int_64)$5 == (int_64)$6)
}

void .FUNC _ZN12eoscrazytown7getBetsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKc (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$8 = [0]
	*($10 + [72]) = [0]
	*($10 + [64]) = (int_64)0
	CALL _Z7explodeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($10 + [48]), $2, $3)
	$4 = *($10 + [52])
	$7 = *($10 + [48])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$5 = (($10 + [8]) | [1])
	$6 = (($10 + [64]) + [8])
	
.LOOP $label$3:
	CALL $120(($10 + [32]), $7)
	CALL $120(($10 + [8]), ($10 + [32]))
	$8 = *($10 + [8])
	if ( ($8 & [1]) ){ goto $label$5 }
	$9 = (int_64)0
	$2 = uint_32($8 >> [1])
	if ( ($2 == 0) ){ goto $label$4 }
	$8 = $5
	
.LOOP $label$6:
	$3 = *($8)
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$7 }
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$7
	$8 = ($8 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = *($10 + [12])
	if ( ($2 == 0) ){ goto $label$8 }
	$8 = *((($10 + [8]) + [8]))
	$9 = (int_64)0
	
.LOOP $label$9:
	$3 = *($8)
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$10 }
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$10
	$8 = ($8 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$8
	$9 = (int_64)0
	
.LABEL $label$4
	*($10 + [24]) = $9
	$8 = *($10 + [68])
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$12 }
	*($8) = $9
	*($10 + [68]) = ($8 + [8])
	goto $label$11 
	
.LABEL $label$12
	CALL $85(($10 + [64]), ($10 + [24]))
	
.LABEL $label$11
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $108(*((($10 + [8]) + [8])))
	
.LABEL $label$13
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $108(*((($10 + [32]) + [8])))
	
.LABEL $label$14
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	$8 = *($10 + [64])
	$2 = *($10 + [68])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($2 - $8) == (int_32)[88]), [1664])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$8 = (*($10 + [68]) - *($10 + [64]))
	$7 = int_32($8 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$15 }
	$2 = CALL $107($8)
	*($0) = $2
	*(($3 = ($0 + [4]))) = $2
	*(($0 + [8])) = ($2 + ($7 << [3]))
	$8 = *($10 + [64])
	$7 = (*($10 + [68]) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($2, $8, $7)
	*($3) = (*($3) + $7)
	$2 = *($0)
	$8 = *($10 + [64])
	
.LABEL $label$16
	*($2) = *($8 + [8])
	*($2 + [8]) = *($8 + [48])
	*($2 + [16]) = *($8)
	*($2 + [24]) = *($8 + [32])
	*($2 + [32]) = *($8 + [72])
	*($2 + [40]) = *($8 + [40])
	*($2 + [48]) = *($8 + [80])
	*($2 + [56]) = *($8 + [16])
	*($2 + [64]) = *($8 + [24])
	*($2 + [72]) = *($8 + [56])
	*($2 + [80]) = *($8 + [64])
	$3 = *($10 + [48])
	if ( ($3 == 0) ){ goto $label$17 }
	$8 = *($10 + [52])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$19 }
	$2 = ([0] - $3)
	$8 = ($8 + [-12])
	
.LOOP $label$20:
	if ( ((*($8) & [1]) == 0) ){ goto $label$21 }
	CALL $108(*(($8 + [8])))
	
.LABEL $label$21
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $2) != (int_32)[-12]) ){ goto $label$20 }
	$8 = *($10 + [48])
	goto $label$18 
	
.LABEL $label$19
	$8 = $3
	
.LABEL $label$18
	*($10 + [52]) = $3
	CALL $108($8)
	$8 = *($10 + [64])
	
.LABEL $label$17
	if ( ($8 == 0) ){ goto $label$22 }
	*($10 + [68]) = $8
	CALL $108($8)
	
.LABEL $label$22
	*([0] + [4]) = ($10 + [80])
	return (unreachable)
	
.LABEL $label$15
	CALL $119($0)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [64])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [128])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $95(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $62(*($1), *($0 + [12]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [208])
	*([0] + [4]) = $3
	*(($3 + [16])) = $0
	*(($3 + [24])) = (int_64)-1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = [0]
	*($3 + [8]) = $0
	*($3) = $0
	*($3 + [48]) = $0
	*(($3 + [56])) = $0
	*(($3 + [64])) = (int_64)-1
	*(($3 + [72])) = [0]
	*(($3 + [76])) = [0]
	*(($3 + [80])) = [0]
	*($3 + [88]) = $0
	*(($3 + [96])) = $0
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*(($3 + [120])) = [0]
	*($3 + [128]) = $0
	*(($3 + [136])) = $0
	*(($3 + [144])) = (int_64)-1
	*(($3 + [152])) = [0]
	*(($3 + [156])) = [0]
	*(($3 + [160])) = [0]
	*($3 + [168]) = $0
	*(($3 + [176])) = $0
	*(($3 + [184])) = (int_64)-1
	*(($3 + [192])) = [0]
	*(($3 + [196])) = [0]
	*(($3 + [200])) = [0]
	CALL _ZN12eoscrazytown5applyEyy($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC _ZN12eoscrazytown11make_profitEo (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	$3 = ($0 + [8])
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$3), [176])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$4 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $31($3, $4)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$3), [176])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [240])
	CALL memcpy(($7 + [16]), $6, [80])
	CALL __udivti3($7, ((int_64)$1 << (int_64)32), ((int_64)((int_64)$2 << (int_64)32) | (int_64)(uint_64)$1 >> (uint_64)(int_64)32)), *($7 + [72]), (int_64)0)
	$5 = *($7)
	$2 = *($7 + [80])
	$1 = ((int_64)$2 + (int_64)$5)
	*($7 + [80]) = $1
	*(($6 = ($7 + [88]))) = ((int_64)((int_64)*($6) + (int_64)*(($7 + [8]))) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($1 <= $2)) : (uint_64)($1 <= $5) ))
	CALL $32($3, ($7 + [16]), *($0))
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $108($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $107($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $119($0)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $107([32])
	$6 = CALL $92($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $93(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [64])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [128])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $123 ()
{
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $107($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $108($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $107($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [176])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-2507753063930920960, (int_64)-2507753063930920960)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $43($1, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [176])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [16])) = *(($4 + [16]))
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $51($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [20])) = *(($1 + [20]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [384])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [384])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [384])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [576])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $107([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($5, $6, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [160])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [160])
	CALL memcpy(($5 + [16]), ($6 + [16]), [8])
	*($5 + [28]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-2507753063930920960
	$6 = *($5 + [28])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-2507753063930920960
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $47(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [176])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2507753063930920960, (int_64)-2507753063930920960)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $43($0, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [176])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [272])
	CALL $44($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $45($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $39($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [384])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [384])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $49(CALL $48($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [384])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 | [8]), $5, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 + [16]), $4, [8])
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-2507753063930920960, *(*($0 + [8])), (int_64)-2507753063930920960, $6, [24])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)-2507753063930920960) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)-2507753063930920959
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [320])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $107([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $46(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)-2507753063930920960
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)-2507753063930920960
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $47(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $108($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [448])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [512])
	CALL eosio_assert([1], [384])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 | [8]), $5, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 + [16]), $4, [8])
	CALL db_update_i64(*($1 + [28]), $2, $6, [24])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2507753063930920960) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-2507753063930920959
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_64 .FUNC _Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	if ( ($3 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$4 = (int_64)0
	
.LOOP $label$5:
	$2 = *($0)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$6 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$6
	$0 = ($0 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [8])
	$2 = *($1)
	$4 = (int_64)0
	$0 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*(($2 + $0)) < (int_32)[48]) ){ goto $label$8 }
	if ( ((int_32)*((*($1) + $0)) > (int_32)[57]) ){ goto $label$8 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)*((*($1) + $0))) + (int_64)-48)
	
.LABEL $label$8
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$7 }
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

int_64 .FUNC _Z13string_to_intNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$4 }
	$2 = uint_32($2 >> [1])
	if ( ($2 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$3 = (int_64)0
	
.LOOP $label$5:
	$3 = ((int_64)((int_64)((int_64)$3 + (int_64)*($0)) * (int_64)10) + (int_64)-480)
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = *(($0 + [8]))
	$3 = (int_64)0
	$0 = [0]
	
.LOOP $label$6:
	$3 = ((int_64)((int_64)((int_64)$3 + (int_64)*(($1 + $0))) * (int_64)10) + (int_64)-480)
	$0 = ($0 + [1])
	if ( ($0 <= $2) ){ goto $label$6 }
	
.LABEL $label$3
	return $3
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $107(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $120($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $108(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $108($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z7explodeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$7 = CALL strlen([16])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($8) = ($7 << [1])
	$6 = ($8 | [1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($7 + [16]) & [-16])
	$6 = CALL $107($5)
	*($8) = ($5 | [1])
	*($8 + [8]) = $6
	*($8 + [4]) = $7
	
.LABEL $label$3
	CALL memcpy($6, [16], $7)
	
.LABEL $label$2
	*(($6 + $7)) = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$7 = ($7 & [1])
	$7 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$6:
	$1 = *($7)
	if ( ((int_32)$1 != (int_32)*($2)) ){ goto $label$10 }
	$1 = *($8)
	$3 = CALL strlen([16])
	if ( ((int_32)$3 != (int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$11 }
	if ( (CALL $116($8, [0], [-1], [16], $3) == 0) ){ goto $label$7 }
	
.LABEL $label$11
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$9 }
	CALL $120($1, $8)
	*($5) = (*($5) + [12])
	goto $label$8 
	
.LABEL $label$10
	CALL $114($8, int_32(($1 << [24]) >> [24]))
	goto $label$7 
	
.LABEL $label$9
	CALL $6($0, $8)
	
.LABEL $label$8
	CALL $113($8, [16])
	
.LABEL $label$7
	$7 = ($7 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$5
	$7 = *($8)
	$6 = CALL strlen([16])
	if ( ((int_32)$6 != (int_32)( *($8 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$13 }
	if ( (CALL $116($8, [0], [-1], [16], $6) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$7 = ($0 + [4])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$14 }
	CALL $120($6, $8)
	*($7) = (*($7) + [12])
	goto $label$12 
	
.LABEL $label$14
	CALL $6($0, $8)
	
.LABEL $label$12
	if ( ((*($8) & [1]) == 0) ){ goto $label$15 }
	CALL $108(*($8 + [8]))
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $109($8)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0) = (int_64)0
	$3 = [0]
	*($0 + [8]) = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$5 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $5 )
	if ( ($6 == 0) ){ goto $label$2 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$3:
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)*($2)) ){ goto $label$7 }
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$6 }
	CALL $120($3, $7)
	*($5) = (*($5) + [12])
	goto $label$5 
	
.LABEL $label$7
	CALL $114($7, int_32(($3 << [24]) >> [24]))
	goto $label$4 
	
.LABEL $label$6
	CALL $6($0, $7)
	
.LABEL $label$5
	if ( (*($7) & [1]) ){ goto $label$8 }
	*($7) = [0]
	goto $label$4 
	
.LABEL $label$8
	*(*(($7 + [8]))) = [0]
	*($7 + [4]) = [0]
	
.LABEL $label$4
	$1 = ($1 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$3 }
	$3 = *($7 + [4])
	$1 = *($7)
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	if ( (( $3 ? uint_32(($1 & [254]) >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$9 }
	$1 = ($0 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$10 }
	CALL $120($6, $7)
	*($1) = (*($1) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $6($0, $7)
	
.LABEL $label$9
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL $108(*(($7 + [8])))
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN12eoscrazytown4initERK11checksum256 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [160])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = *($0)
	*(($7 + [44])) = *(($1 + [28]))
	$3 = ($1 + [24])
	*(($7 + [40])) = *($3)
	*(($7 + [36])) = *(($1 + [20]))
	$4 = ($1 + [16])
	*(($7 + [32])) = *($4)
	*(($7 + [28])) = *(($1 + [12]))
	$5 = ($1 + [8])
	*(($7 + [24])) = *($5)
	*(($7 + [20])) = *(($1 + [4]))
	*($7) = (int_64)0
	*($7 + [16]) = *($1)
	*(($7 + [72])) = (int_64)0
	*($7 + [49]) = [0]
	*($7 + [48]) = [0]
	*($7 + [56]) = (int_64)0
	*($7 + [64]) = (int_64)0
	$6 = ($0 + [8])
	CALL $83(($7 + [80]), $6, $2, $7)
	*((($7 + [80]) + [40])) = *($3)
	*((($7 + [80]) + [32])) = *($4)
	*((($7 + [80]) + [24])) = *($5)
	*($7 + [96]) = *($1)
	CALL $32($6, ($7 + [80]), *($0))
	*([0] + [4]) = ($7 + [160])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [96])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*(($3 = ($7 + [24]))) = (int_64)0
	*(($4 = ($7 + [16]))) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[31]), [160])
	CALL memcpy($7, $5, [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [32]) + [24]))) = *($3)
	*(($5 = (($7 + [32]) + [16]))) = *($4)
	*($7 + [40]) = *($7 + [8])
	*($7 + [32]) = *($7)
	*((($7 + [64]) + [24])) = *($1)
	*((($7 + [64]) + [16])) = *($5)
	*($7 + [72]) = *($7 + [40])
	*($7 + [64]) = *($7 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [64])), (int_32 $6))
	*([0] + [4]) = ($7 + [96])
	return [1]
}

void .FUNC _ZN12eoscrazytown4testEv (int_32 $0)
{
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _Z13int_to_stringy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$3 }
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	
.LOOP $label$4:
	CALL $114($6, (CASTING uint_32)(uint_64 ((int_64)((uint_64)$1 % (uint_64)(int_64)10) | (int_64)48)))
	$2 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( $2 ){ goto $label$4 }
	$3 = ($6 + [8])
	$2 = ($2 & [1])
	$2 = *($6)
	$5 = ( *($6 + [4]) ? uint_32($2 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$5 }
	$2 = ( *($3) ? ($6 | [1]) : $2 )
	$5 = (($2 + $5) + [-1])
	if ( ((uint_32)$5 <= (uint_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = *($2)
	*($2) = *($5)
	*($5) = $4
	$5 = ($5 + [-1])
	$2 = ($2 + [1])
	if ( ($2 <= $5) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = *($6)
	*(($0 + [8])) = *($3)
	goto $label$2 
	
.LABEL $label$3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL strlen([32])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $107($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $2
	
.LABEL $label$8
	CALL memcpy($5, [32], $2)
	
.LABEL $label$7
	*(($5 + $2)) = [0]
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $109($0)
}

void .FUNC _ZN12eoscrazytown5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $12(($9 + [208]))
	$6 = *($9 + [216])
	*(($9 + [180])) = *(($9 + [236]))
	*(($4 = (($9 + [168]) + [8]))) = *(($9 + [232]))
	*($9 + [172]) = *(($9 + [228]))
	$8 = *($9 + [208])
	*($9 + [168]) = *($9 + [224])
	$5 = *($4)
	*((($9 + [256]) + [8])) = $5
	*(($4 = (($9 + [184]) + [8]))) = $5
	$5 = *($9 + [168])
	*($9 + [256]) = $5
	*($9 + [184]) = $5
	*($9 + [200]) = $1
	$3 = ($9 + [240])
	CALL $120(($9 + [152]), $3)
	*(($9 + [16])) = *($9 + [200])
	*(($9 + [8])) = *($4)
	*($9) = *($9 + [184])
	CALL _ZN12eoscrazytown10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $8, $6, $9, ($9 + [152]))
	if ( ((*($9 + [152]) & [1]) == 0) ){ goto $label$9 }
	CALL $108(*($9 + [160]))
	
.LABEL $label$9
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $108(*(($9 + [248])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-3102536759825661953) ){ goto $label$16 }
	if ( ((int_64)$2 > (int_64)-4417036376032673793) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-7297956546158264320) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$7 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [1]
	*($9 + [48 align=4]) = *($9 + [120])
	CALL $20($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$16
	if ( ((int_64)$2 > (int_64)4923678490122780671) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$7 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [2]
	*($9 + [72 align=4]) = *($9 + [96])
	CALL $26($0, ($9 + [72]))
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4417036376032673792) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$7 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [3]
	*($9 + [32 align=4]) = *($9 + [136])
	CALL $17($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [4]
	*($9 + [24 align=4]) = *($9 + [144])
	CALL $15($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$13
	*($9 + [116]) = [0]
	*($9 + [112]) = [5]
	*($9 + [56 align=4]) = *($9 + [112])
	CALL $22($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [92]) = [0]
	*($9 + [88]) = [6]
	*($9 + [80 align=4]) = *($9 + [88])
	CALL $28($0, ($9 + [80]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [108]) = [0]
	*($9 + [104]) = [7]
	*($9 + [64 align=4]) = *($9 + [104])
	CALL $24($0, ($9 + [64]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [132]) = [0]
	*($9 + [128]) = [8]
	*($9 + [40 align=4]) = *($9 + [128])
	CALL $17($0, ($9 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [272])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $94($0, $2, $1)
	*([0] + [4]) = $3
}

void .FUNC _ZN12eoscrazytown10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	*($15 + [160]) = $1
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$3 }
	$5 = *($3 + [16])
	$2 = (int_64)0
	$9 = (int_64)59
	$14 = [720]
	$10 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$9 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$13 = ($13 + [165])
	goto $label$7 
	
.LABEL $label$9
	$11 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$5
	$14 = ($14 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$4 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$3 }
	CALL require_auth($1)
	$11 = *($3 + [8])
	$12 = [0]
	$13 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$2 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$13 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$13 = [0]
	
.LABEL $label$10
	CALL eosio_assert($13, [1360])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [1392])
	CALL eosio_assert(((int_64)$11 == (int_64)1397703940), [1600])
	*($15 + [16]) = [44]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc(($15 + [144]), $4, ($15 + [16]))
	CALL eosio_assert(((uint_32)((int_32)(*($15 + [148]) - *($15 + [144])) / (int_32)[12]) > (uint_32)[10]), [1632])
	*($15 + [136]) = [0]
	*($15 + [128]) = (int_64)0
	$7 = (($15 + [112]) | [1])
	$8 = (($15 + [128]) + [8])
	
.LOOP $label$15:
	CALL $120(($15 + [112]), (*($15 + [144]) + ((int_32)$12 * (int_32)[12])))
	$14 = *($15 + [112])
	if ( ($14 & [1]) ){ goto $label$17 }
	$2 = (int_64)0
	$13 = uint_32($14 >> [1])
	if ( ($13 == 0) ){ goto $label$16 }
	$14 = $7
	
.LOOP $label$18:
	$4 = *($14)
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$19 }
	$2 = ((int_64)((int_64)((int_64)$2 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$19
	$14 = ($14 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$13 = *($15 + [116])
	if ( ($13 == 0) ){ goto $label$20 }
	$14 = *((($15 + [112]) + [8]))
	$2 = (int_64)0
	
.LOOP $label$21:
	$4 = *($14)
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$22 }
	$2 = ((int_64)((int_64)((int_64)$2 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$22
	$14 = ($14 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$21 }
	goto $label$16 
	
.LABEL $label$20
	$2 = (int_64)0
	
.LABEL $label$16
	*($15 + [16]) = $2
	$14 = *($15 + [132])
	if ( ((uint_32)$14 >= (uint_32)*($8)) ){ goto $label$24 }
	*($14) = $2
	*($15 + [132]) = ($14 + [8])
	goto $label$23 
	
.LABEL $label$24
	CALL $85(($15 + [128]), ($15 + [16]))
	
.LABEL $label$23
	if ( ((*($15 + [112]) & [1]) == 0) ){ goto $label$25 }
	CALL $108(*((($15 + [112]) + [8])))
	
.LABEL $label$25
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)[11]) ){ goto $label$15 }
	*($15 + [96]) = (int_64)0
	*($15 + [104]) = [0]
	$14 = (*($15 + [132]) - *($15 + [128]))
	$4 = int_32($14 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$13 = CALL $107($14)
	*(($15 + [104])) = ($13 + ($4 << [3]))
	*($15 + [96]) = $13
	*($15 + [100]) = $13
	$4 = *($15 + [128])
	$14 = (*($15 + [132]) - $4)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$27 }
	CALL memcpy($13, $4, $14)
	$13 = (*($15 + [100]) + $14)
	*($15 + [100]) = $13
	$14 = *($15 + [96])
	$4 = *($15 + [128])
	goto $label$26 
	
.LABEL $label$27
	$14 = $13
	
.LABEL $label$26
	*($14) = *($4 + [8])
	*($14 + [8]) = *($4 + [48])
	*($14 + [16]) = *($4)
	*($14 + [24]) = *($4 + [32])
	*($14 + [32]) = *($4 + [72])
	*($14 + [40]) = *($4 + [40])
	*($14 + [48]) = *($4 + [80])
	*($14 + [56]) = *($4 + [16])
	*($14 + [64]) = *($4 + [24])
	*($14 + [72]) = *($4 + [56])
	*($14 + [80]) = *($4 + [64])
	$11 = (int_64)0
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$28 }
	
.LOOP $label$29:
	$11 = ((int_64)*($14) + (int_64)$11)
	$14 = ($14 + [8])
	if ( ((int_32)$13 != (int_32)$14) ){ goto $label$29 }
	
.LABEL $label$28
	CALL eosio_assert(((int_64)*($3) == (int_64)$11), [1424])
	CALL eosio_assert(((int_64)$11 > (int_64)999), [1456])
	CALL eosio_assert(((int_64)$11 < (int_64)200001), [1488])
	$14 = *($15 + [144])
	if ( ((uint_32)((int_32)(*($15 + [148]) - $14) / (int_32)[12]) <= (uint_32)[12]) ){ goto $label$30 }
	$13 = *($14 + [144])
	$4 = CALL strlen([1520])
	if ( ((int_32)$4 != (int_32)( *(($14 + [148])) ? uint_32($13 >> [1]) : ($13 & [1]) )) ){ goto $label$30 }
	if ( CALL $116(($14 + [144]), [0], [-1], [1520], $4) ){ goto $label$30 }
	$5 = ((int_64)$11 / (int_64)500)
	$6 = *($0)
	$2 = (int_64)0
	$10 = (int_64)59
	$14 = [656]
	$1 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$36 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$13 = ($13 + [165])
	goto $label$34 
	
.LABEL $label$36
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$32
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$9 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$31 }
	*($15 + [88]) = $1
	*($15 + [80]) = $6
	$2 = (int_64)0
	$10 = (int_64)59
	$14 = [720]
	$1 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$42 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$13 = ($13 + [165])
	goto $label$40 
	
.LABEL $label$42
	$9 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$14 = ($14 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$1 = ((int_64)$9 | (int_64)$1)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$37 }
	*($15 + [72]) = $1
	$2 = (int_64)0
	$10 = (int_64)59
	$14 = [48]
	$1 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$48 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$13 = ($13 + [165])
	goto $label$46 
	
.LABEL $label$48
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$44
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$9 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$43 }
	*($15 + [64]) = $1
	$2 = (int_64)0
	$9 = (int_64)59
	$14 = [1520]
	$1 = (int_64)0
	
.LOOP $label$49:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$50 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$13 = ($13 + [165])
	goto $label$51 
	
.LABEL $label$52
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$50
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$10 | (int_64)$1)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$49 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	
.LOOP $label$57:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$57 }
	
.LABEL $label$56
	$13 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$13 = [0]
	
.LABEL $label$53
	CALL eosio_assert($13, [128])
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$14 = CALL strlen([1536])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$60 }
	*($15) = ($14 << [1])
	$13 = ($15 | [1])
	if ( $14 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$4 = (($14 + [16]) & [-16])
	$13 = CALL $107($4)
	*($15) = ($4 | [1])
	*($15 + [8]) = $13
	*($15 + [4]) = $14
	
.LABEL $label$59
	CALL memcpy($13, [1536], $14)
	
.LABEL $label$58
	*(($13 + $14)) = [0]
	*(($15 + [40])) = (int_64)1397703940
	*(($15 + [52])) = *($15 + [4])
	*($15 + [24]) = $1
	$14 = ($15 + [8])
	*(($13 = ($15 + [56]))) = *($14)
	*($15 + [16]) = *($0)
	*($15 + [32]) = $5
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($14) = [0]
	CALL $53($0, ($15 + [80]), ($15 + [72]), ($15 + [64]), ($15 + [16]))
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$61 }
	CALL $108(*($13))
	
.LABEL $label$61
	if ( ((*($15) & [1]) == 0) ){ goto $label$30 }
	CALL $108(*(($15 + [8])))
	
.LABEL $label$30
	$14 = *($15 + [144])
	if ( (((int_32)(*($15 + [148]) - $14) / (int_32)[12]) <= [12]) ){ goto $label$62 }
	if ( (*($14 + [132]) & [1]) ){ goto $label$64 }
	$14 = (($14 + [132]) + [1])
	goto $label$63 
	
.LABEL $label$64
	$14 = *(($14 + [140]))
	
.LABEL $label$63
	$13 = [-1]
	
.LOOP $label$65:
	$4 = ($14 + $13)
	$12 = ($13 + [1])
	$13 = $12
	if ( *(($4 + [1])) ){ goto $label$65 }
	$5 = (CASTING uint_64)(uint_32 $12)
	$2 = (int_64)0
	$9 = (int_64)59
	$1 = (int_64)0
	
.LOOP $label$66:
	$10 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$5) ){ goto $label$67 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$13 = ($13 + [165])
	goto $label$68 
	
.LABEL $label$69
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$71 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$70 
	
.LABEL $label$71
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$70
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$10 | (int_64)$1)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$66 }
	$14 = CALL is_account($1)
	if ( ((int_64)$1 == (int_64)*($15 + [160])) ){ goto $label$62 }
	if ( ((int_32)$14 ^ (int_32)[1]) ){ goto $label$62 }
	$5 = ((int_64)$11 / (int_64)200)
	$6 = *($0)
	$2 = (int_64)0
	$9 = (int_64)59
	$14 = [656]
	$10 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$77 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$13 = ($13 + [165])
	goto $label$75 
	
.LABEL $label$77
	$11 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$73
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$72 }
	*($15 + [88]) = $10
	*($15 + [80]) = $6
	$2 = (int_64)0
	$9 = (int_64)59
	$14 = [720]
	$10 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$83 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$13 = ($13 + [165])
	goto $label$81 
	
.LABEL $label$83
	$11 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$79
	$14 = ($14 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$78 }
	*($15 + [72]) = $10
	$2 = (int_64)0
	$9 = (int_64)59
	$14 = [48]
	$10 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$89 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$13 = ($13 + [165])
	goto $label$87 
	
.LABEL $label$89
	$11 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$85
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$84 }
	*($15 + [64]) = $10
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$92:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$91 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$93 }
	
.LOOP $label$94:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$91 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$94 }
	
.LABEL $label$93
	$13 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$92 }
	goto $label$90 
	
.LABEL $label$91
	$13 = [0]
	
.LABEL $label$90
	CALL eosio_assert($13, [128])
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$14 = CALL strlen([1552])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$97 }
	*($15) = ($14 << [1])
	$13 = ($15 | [1])
	if ( $14 ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$4 = (($14 + [16]) & [-16])
	$13 = CALL $107($4)
	*($15) = ($4 | [1])
	*($15 + [8]) = $13
	*($15 + [4]) = $14
	
.LABEL $label$96
	CALL memcpy($13, [1552], $14)
	
.LABEL $label$95
	*(($13 + $14)) = [0]
	*(($15 + [40])) = (int_64)1397703940
	*(($15 + [52])) = *($15 + [4])
	*($15 + [24]) = $1
	$14 = ($15 + [8])
	*(($13 = ($15 + [56]))) = *($14)
	*($15 + [16]) = *($0)
	*($15 + [32]) = $5
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($14) = [0]
	CALL $53($0, ($15 + [80]), ($15 + [72]), ($15 + [64]), ($15 + [16]))
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$98 }
	CALL $108(*($13))
	
.LABEL $label$98
	if ( ((*($15) & [1]) == 0) ){ goto $label$62 }
	CALL $108(*(($15 + [8])))
	
.LABEL $label$62
	$2 = (int_64)0
	$9 = (int_64)59
	$14 = [720]
	$10 = (int_64)0
	
.LOOP $label$99:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$104 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$13 = ($13 + [165])
	goto $label$102 
	
.LABEL $label$104
	$11 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$103
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$101
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$100
	$14 = ($14 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$99 }
	*(($15 + [48])) = [0]
	*($15 + [16]) = $10
	*($15 + [32]) = (int_64)-1
	*($15 + [40]) = (int_64)0
	*($15 + [24]) = *($0)
	CALL $86(($15 + [16]), (int_64)5459781, [1568])
	$2 = *($15 + [160])
	$8 = *(($0 + [112]))
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$105 }
	$14 = ($4 + [-24])
	$12 = ([0] - $8)
	
.LOOP $label$106:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$105 }
	$4 = $14
	$13 = ($14 + [-24])
	$14 = $13
	if ( ((int_32)($13 + $12) != (int_32)[-24]) ){ goto $label$106 }
	
.LABEL $label$105
	$14 = ($0 + [88])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$112 }
	$13 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [20]) == (int_32)$14), [176])
	$2 = *($0)
	if ( $13 ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$112
	$13 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$110 }
	$13 = CALL $73($14, $13)
	CALL eosio_assert(((int_32)*($13 + [20]) == (int_32)$14), [176])
	$2 = *($0)
	
.LABEL $label$111
	*($15 + [80]) = ($15 + [96])
	CALL eosio_assert([1], [272])
	CALL $88($14, $13, $2, ($15 + [80]))
	$4 = *($15 + [40])
	if ( $4 ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$110
	$2 = *($0)
	
.LABEL $label$109
	*($15 + [76]) = ($15 + [96])
	*($15 + [72]) = ($15 + [160])
	*($15) = $2
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [320])
	*($15 + [80]) = $14
	*($15 + [84]) = ($15 + [72])
	*($15 + [88]) = $15
	*(($13 = CALL $107([32])) + [16]) = [0]
	*($13 + [8 align=4]) = (int_64)0
	*($13 + [20]) = $14
	CALL $87(($15 + [80]), $13)
	*($15 + [64]) = $13
	$2 = *($13)
	*($15 + [80]) = $2
	$4 = *($13 + [24])
	*($15 + [172]) = $4
	$12 = ($0 + [116])
	$14 = *($12)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [120]))) ){ goto $label$114 }
	*($14 + [8]) = $2
	*($14 + [16]) = $4
	*($15 + [64]) = [0]
	*($14) = $13
	*($12) = ($14 + [24])
	goto $label$113 
	
.LABEL $label$114
	CALL $77(($0 + [112]), ($15 + [64]), ($15 + [80]), ($15 + [172]))
	
.LABEL $label$113
	$14 = *($15 + [64])
	*($15 + [64]) = [0]
	if ( ($14 == 0) ){ goto $label$115 }
	$13 = *($14 + [8])
	if ( ($13 == 0) ){ goto $label$116 }
	*(($14 + [12])) = $13
	CALL $108($13)
	
.LABEL $label$116
	CALL $108($14)
	
.LABEL $label$115
	$4 = *($15 + [40])
	if ( ($4 == 0) ){ goto $label$107 }
	
.LABEL $label$108
	$12 = ($15 + [44])
	$14 = *($12)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$118 }
	
.LOOP $label$119:
	$14 = ($14 + [-24])
	$13 = *($14)
	*($14) = [0]
	if ( ($13 == 0) ){ goto $label$120 }
	CALL $108($13)
	
.LABEL $label$120
	if ( ((int_32)$4 != (int_32)$14) ){ goto $label$119 }
	$14 = *(($15 + [40]))
	goto $label$117 
	
.LABEL $label$118
	$14 = $4
	
.LABEL $label$117
	*($12) = $4
	CALL $108($14)
	
.LABEL $label$107
	$14 = *($15 + [96])
	if ( ($14 == 0) ){ goto $label$121 }
	*($15 + [100]) = $14
	CALL $108($14)
	
.LABEL $label$121
	$14 = *($15 + [128])
	if ( ($14 == 0) ){ goto $label$122 }
	*($15 + [132]) = $14
	CALL $108($14)
	
.LABEL $label$122
	$4 = *($15 + [144])
	if ( ($4 == 0) ){ goto $label$3 }
	$14 = *($15 + [148])
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$124 }
	$13 = ([0] - $4)
	$14 = ($14 + [-12])
	
.LOOP $label$125:
	if ( ((*($14) & [1]) == 0) ){ goto $label$126 }
	CALL $108(*(($14 + [8])))
	
.LABEL $label$126
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $13) != (int_32)[-12]) ){ goto $label$125 }
	$14 = *($15 + [144])
	goto $label$123 
	
.LABEL $label$124
	$14 = $4
	
.LABEL $label$123
	*($15 + [148]) = $4
	CALL $108($14)
	
.LABEL $label$3
	*([0] + [4]) = ($15 + [176])
	return (unreachable)
	
.LABEL $label$2
	CALL $119(($15 + [96]))
	
.LABEL $label$1
	CALL $109($15)
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1168])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1216])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1280])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $108($6)
	
.LABEL $label$7
	CALL $108($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $108($6)
	
.LABEL $label$10
	CALL $108($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC _ZN12eoscrazytown5clearEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	$1 = ($0 + [48])
	$2 = *(($0 + [76]))
	if ( ((int_32)$2 == (int_32)*(($0 + [72]))) ){ goto $label$3 }
	$0 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$1), [176])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($1), *(($0 + [56])), (int_64)4150496169072803840, (int_64)4150496169072803840)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $79($1, $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$1), [176])
	
.LABEL $label$2
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1088])
	$2 = CALL db_next_i64(*($0 + [36]), ($3 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $79($1, $2)
	
.LABEL $label$4
	CALL $80($1, $0)
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
}

void .FUNC _ZN12eoscrazytown6revealERK11checksum256S2_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	float_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	$28 = (*([0] + [4]) - [336])
	*([0] + [4]) = $28
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$23 = *(($0 + [36]))
	if ( ((int_32)$23 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$21 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [80]) == (int_32)$3), [176])
	goto $label$1 
	
.LABEL $label$2
	$21 = [0]
	$23 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$1 }
	$21 = CALL $31($3, $23)
	CALL eosio_assert(((int_32)*($21 + [80]) == (int_32)$3), [176])
	
.LABEL $label$1
	$23 = [0]
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [240])
	CALL memcpy(($28 + [224]), $21, [80])
	$21 = ($2 + [24])
	*((($28 + [144]) + [24])) = *($21)
	$8 = ($2 + [16])
	*((($28 + [144]) + [16])) = *($8)
	$7 = ($2 + [8])
	*($28 + [152]) = *($7)
	*($28 + [144]) = *($2)
	CALL eosio_assert(((int_32)CALL $121((($28 + [224]) + [16]), ($28 + [144]), [32]) != (int_32)[0]), [1008])
	*(($28 + [264])) = *($21)
	*((($28 + [224]) + [32])) = *($8)
	*((($28 + [224]) + [24])) = *($7)
	*($28 + [240]) = *($2)
	$25 = (int_64)0
	$2 = $1
	
.LOOP $label$3:
	$25 = ((int_64)(CASTING int_64)(int_32 (*($2) << ($23 & [56]))) ^ (int_64)$25)
	$2 = ($2 + [1])
	$23 = ($23 + [8])
	if ( ((int_32)$23 != (int_32)[256]) ){ goto $label$3 }
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$25 % (uint_64)(int_64)52))
	*($28 + [144]) = $4
	$5 = (CASTING uint_32)(uint_64 ((uint_64)((uint_64)$25 / (uint_64)(int_64)52) % (uint_64)(int_64)52))
	*($28 + [145]) = $5
	$23 = *(($0 + [36]))
	if ( ((int_32)$23 == (int_32)*(($0 + [32]))) ){ goto $label$5 }
	$23 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [80]) == (int_32)$3), [176])
	goto $label$4 
	
.LABEL $label$5
	$23 = [0]
	$2 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$23 = CALL $31($3, $2)
	CALL eosio_assert(((int_32)*($23 + [80]) == (int_32)$3), [176])
	
.LABEL $label$4
	$21 = (($28 + [144]) | [1])
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [240])
	CALL memcpy(($28 + [64]), $23, [80])
	*((($28 + [144]) + [40])) = *((($28 + [64]) + [40]))
	*((($28 + [144]) + [32])) = *((($28 + [64]) + [32]))
	*((($28 + [144]) + [24])) = *((($28 + [64]) + [24]))
	*($28 + [160]) = *($28 + [80])
	*(($28 + [216])) = *(($1 + [24]))
	*(($28 + [208])) = *(($1 + [16]))
	*(($28 + [200])) = *(($1 + [8]))
	*($28 + [192]) = *($1)
	$11 = *($0)
	$25 = (int_64)0
	$24 = (int_64)59
	$23 = [656]
	$26 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$25 > (uint_64)(int_64)5) ){ goto $label$11 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$11
	$27 = (int_64)0
	if ( ((uint_64)$25 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$7
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$6 }
	$25 = (int_64)0
	$24 = (int_64)59
	$23 = [1024]
	$22 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$25 > (uint_64)(int_64)6) ){ goto $label$17 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$2 = ($2 + [165])
	goto $label$15 
	
.LABEL $label$17
	$27 = (int_64)0
	if ( ((uint_64)$25 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$13
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$22 = ((int_64)$27 | (int_64)$22)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$12 }
	*(($2 = ($28 + [88]))) = [0]
	*($28 + [72]) = $22
	*($28 + [64]) = $11
	*($28 + [80]) = (int_64)0
	*(($23 = CALL $107([16]))) = $11
	*($23 + [8]) = $26
	*(($1 = ($28 + [96]))) = [0]
	$8 = ($23 + [16])
	*($2) = $8
	*(($28 + [84])) = $8
	*($28 + [80]) = $23
	*($28 + [92]) = [0]
	*(($28 + [100])) = [0]
	CALL $39(($28 + [92]), [66])
	$23 = *($1)
	$2 = *($28 + [92])
	*($28 + [308]) = $2
	*($28 + [304]) = $2
	*($28 + [312]) = $23
	*($28 + [48]) = ($28 + [304])
	*($28 + [324]) = (($28 + [144]) | [1])
	*($28 + [328]) = (($28 + [144]) + [16])
	*($28 + [332]) = ($28 + [192])
	*($28 + [320]) = ($28 + [144])
	CALL $71(($28 + [320]), ($28 + [48]))
	CALL $41(($28 + [320]), ($28 + [64]))
	$23 = *($28 + [320])
	CALL send_inline($23, (*($28 + [324]) - $23))
	$23 = *($28 + [320])
	if ( ($23 == 0) ){ goto $label$18 }
	*($28 + [324]) = $23
	CALL $108($23)
	
.LABEL $label$18
	$23 = *($28 + [92])
	if ( ($23 == 0) ){ goto $label$19 }
	*(($28 + [96])) = $23
	CALL $108($23)
	
.LABEL $label$19
	$23 = *($28 + [80])
	if ( ($23 == 0) ){ goto $label$20 }
	*(($28 + [84])) = $23
	CALL $108($23)
	
.LABEL $label$20
	CALL _ZN12eoscrazytown9getResultERKhS1_(($28 + [304]), $23, ($28 + [144]), $21)
	*($28 + [56]) = [0]
	*($28 + [48]) = (int_64)0
	*(($28 + [40])) = [0]
	*($28 + [32]) = (int_64)0
	$23 = CALL strlen([16])
	if ( ((uint_32)$23 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$23 >= (uint_32)[11]) ){ goto $label$24 }
	*($28 + [32]) = ($23 << [1])
	$2 = (($28 + [32]) | [1])
	if ( $23 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$1 = (($23 + [16]) & [-16])
	$2 = CALL $107($1)
	*($28 + [32]) = ($1 | [1])
	*($28 + [40]) = $2
	*($28 + [36]) = $23
	
.LABEL $label$23
	CALL memcpy($2, [16], $23)
	
.LABEL $label$22
	*(($2 + $23)) = [0]
	$6 = ($0 + [88])
	$12 = ($0 + [96])
	$23 = CALL db_lowerbound_i64(*($0 + [88]), *($12), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$25 }
	$20 = CALL $73($6, $23)
	$8 = (($28 + [304]) | [1])
	$7 = (($28 + [48]) | [1])
	$17 = ($28 + [80])
	$9 = ($28 + [96])
	$18 = ($9 + [4])
	$19 = ($28 + [104])
	
.LOOP $label$26:
	$10 = ($20 + [8])
	CALL _ZN12eoscrazytown8getBetonERKNSt3__16vectorIxNS0_9allocatorIxEEEE(($28 + [64]), $23, $10)
	if ( (*($28 + [48]) & [1]) ){ goto $label$28 }
	*($28 + [48]) = [0]
	goto $label$27 
	
.LABEL $label$28
	*(*((($28 + [48]) + [8]))) = [0]
	*($28 + [52]) = [0]
	
.LABEL $label$27
	CALL $112(($28 + [48]), [0])
	$14 = (($28 + [64]) + [8])
	*(($13 = (($28 + [48]) + [8]))) = *($14)
	*($28 + [48]) = *($28 + [64])
	CALL $113(($28 + [32]), [16])
	$15 = (($28 + [304]) + [8])
	$23 = ( *($15) ? $8 : (*($28 + [304]) & [1]) )
	if ( ((int_32)*($23 + [2]) != (int_32)[79]) ){ goto $label$30 }
	$23 = *($10)
	$25 = (int_64)0
	if ( ((int_32)*(( *($13) ? $7 : (*($28 + [48]) & [1]) ) + [2]) != (int_32)[79]) ){ goto $label$31 }
	$25 = ((int_64)*($23 + [16]) * (int_64)9)
	
.LABEL $label$31
	$22 = ((int_64)((int_64)((int_64)*($23) / (int_64)2) + (int_64)$25) + (int_64)((int_64)*($23 + [8]) / (int_64)2))
	goto $label$29 
	
.LABEL $label$30
	if ( ((int_32)*($23) != (int_32)[79]) ){ goto $label$32 }
	$22 = (int_64)0
	if ( ((int_32)*(( *($13) ? $7 : (*($28 + [48]) & [1]) )) != (int_32)[79]) ){ goto $label$29 }
	$25 = *(*($10))
	CALL $114(($28 + [32]), [49])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.98)) + (float_64)(float_64)0))
	goto $label$29 
	
.LABEL $label$32
	$22 = (int_64)0
	if ( ((int_32)*($23 + [1]) != (int_32)*(( *($13) ? $7 : (*($28 + [48]) & [1]) ) + [1])) ){ goto $label$29 }
	$25 = *(*($10) + [8])
	CALL $114(($28 + [32]), [50])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.98)) + (float_64)(float_64)0))
	
.LABEL $label$29
	$21 = *($28 + [48])
	$1 = *($13)
	$2 = *($28 + [304])
	$23 = *($15)
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [3]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [3])) ){ goto $label$33 }
	$25 = *(*($10) + [24])
	CALL $114(($28 + [32]), [52])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.96))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$33
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [4]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [4])) ){ goto $label$34 }
	$25 = *(*($10) + [32])
	CALL $114(($28 + [32]), [53])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.96))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$34
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [5]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [5])) ){ goto $label$35 }
	$25 = *(*($10) + [40])
	CALL $114(($28 + [32]), [54])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.96))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$35
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [6]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [6])) ){ goto $label$36 }
	$25 = *(*($10) + [48])
	CALL $114(($28 + [32]), [55])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.96))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$36
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [7]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [7])) ){ goto $label$37 }
	$25 = *(*($10) + [56])
	CALL $114(($28 + [32]), [56])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.82))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$37
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [8]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [8])) ){ goto $label$38 }
	$25 = *(*($10) + [64])
	CALL $114(($28 + [32]), [57])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)1.12))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$38
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [9]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [9])) ){ goto $label$39 }
	$25 = *(*($10) + [72])
	CALL $114(($28 + [32]), [65])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)0.82))))
	$1 = *($13)
	$23 = *($15)
	$21 = *($28 + [48])
	$2 = *($28 + [304])
	
.LABEL $label$39
	if ( ((int_32)*(( $23 ? $8 : ($2 & [1]) ) + [10]) != (int_32)*(( $1 ? $7 : ($21 & [1]) ) + [10])) ){ goto $label$40 }
	$25 = *(*($10) + [80])
	CALL $114(($28 + [32]), [66])
	$16 = (CASTING float_64)(int_64 $25)
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $22) + (float_64)((float_64)$16 + (float_64)((float_64)$16 * (float_64)(float_64)1.12))))
	
.LABEL $label$40
	if ( (int_64)($22 == 0) ){ goto $label$41 }
	if ( ((int_64)$22 > (int_64)2000000) ){ goto $label$41 }
	$11 = *($0)
	$25 = (int_64)0
	$24 = (int_64)59
	$23 = [656]
	$26 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$25 > (uint_64)(int_64)5) ){ goto $label$47 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$2 = ($2 + [165])
	goto $label$45 
	
.LABEL $label$47
	$27 = (int_64)0
	if ( ((uint_64)$25 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$43
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$42 }
	*((($28 + [320]) + [8])) = $26
	*($28 + [320]) = $11
	$25 = (int_64)0
	$24 = (int_64)59
	$23 = [720]
	$26 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$25 > (uint_64)(int_64)10) ){ goto $label$53 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$2 = ($2 + [165])
	goto $label$51 
	
.LABEL $label$53
	$27 = (int_64)0
	if ( ((int_64)$25 == (int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$49
	$23 = ($23 + [1])
	$24 = ((int_64)$24 + (int_64)-5)
	$26 = ((int_64)$27 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)1)
	if ( ((int_64)$25 != (int_64)13) ){ goto $label$48 }
	*($28 + [24]) = $26
	$25 = (int_64)0
	$24 = (int_64)59
	$23 = [48]
	$26 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$25 > (uint_64)(int_64)7) ){ goto $label$59 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$2 = ($2 + [165])
	goto $label$57 
	
.LABEL $label$59
	$27 = (int_64)0
	if ( ((uint_64)$25 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$55
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$54 }
	*($28 + [16]) = $26
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$25 = (int_64)5459781
	$23 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $25) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$63 }
	
.LOOP $label$64:
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$61 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$64 }
	
.LABEL $label$63
	$2 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$2 = [0]
	
.LABEL $label$60
	CALL eosio_assert($2, [128])
	CALL $117($28, [1040], ($28 + [32]))
	*($14) = *($20)
	*((($28 + [64]) + [24])) = (int_64)1397703940
	*($17) = $22
	*($18) = *($28 + [4 align=4])
	*($28 + [64]) = *($0)
	*($9) = *($28)
	*($28) = [0]
	*($28 + [4]) = [0]
	*(($23 = ($28 + [8]))) = [0]
	CALL $53($0, ($28 + [320]), ($28 + [24]), ($28 + [16]), ($28 + [64]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$65 }
	CALL $108(*($19))
	
.LABEL $label$65
	if ( ((*($28) & [1]) == 0) ){ goto $label$41 }
	CALL $108(*($23))
	
.LABEL $label$41
	$25 = (int_64)0
	$22 = (int_64)0
	$2 = *(($20 + [12]))
	$23 = *($10)
	if ( ((int_32)$23 == (int_32)$2) ){ goto $label$66 }
	$22 = (int_64)0
	
.LOOP $label$67:
	$22 = ((int_64)*($23) + (int_64)$22)
	$23 = ($23 + [8])
	if ( ((int_32)$2 != (int_32)$23) ){ goto $label$67 }
	
.LABEL $label$66
	$11 = *($0)
	$24 = (int_64)59
	$23 = [656]
	$26 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$25 > (uint_64)(int_64)5) ){ goto $label$73 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$2 = ($2 + [165])
	goto $label$71 
	
.LABEL $label$73
	$27 = (int_64)0
	if ( ((uint_64)$25 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$69
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$68 }
	*((($28 + [320]) + [8])) = $26
	*($28 + [320]) = $11
	$25 = (int_64)0
	$27 = (int_64)59
	$23 = [672]
	$26 = (int_64)0
	
.LOOP $label$74:
	$24 = (int_64)0
	if ( ((uint_64)$25 > (uint_64)(int_64)11) ){ goto $label$75 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$2 = ($2 + [165])
	goto $label$76 
	
.LABEL $label$77
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$24 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$75
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$24 | (int_64)$26)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$74 }
	*($28 + [24]) = $26
	$25 = (int_64)0
	$24 = (int_64)59
	$23 = [48]
	$26 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$25 > (uint_64)(int_64)7) ){ goto $label$83 }
	$2 = *($23)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$2 = ($2 + [165])
	goto $label$81 
	
.LABEL $label$83
	$27 = (int_64)0
	if ( ((uint_64)$25 <= (uint_64)(int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$79
	$23 = ($23 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$78 }
	*($28 + [16]) = $26
	$27 = ((int_64)$22 * (int_64)40)
	CALL eosio_assert((uint_64)(((int_64)$27 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$25 = (int_64)5133379
	$23 = [0]
	
.LOOP $label$86:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $25) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$85 }
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$87 }
	
.LOOP $label$88:
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$85 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$88 }
	
.LABEL $label$87
	$2 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$85
	$2 = [0]
	
.LABEL $label$84
	CALL eosio_assert($2, [128])
	CALL $117($28, [1072], ($28 + [32]))
	*($14) = *($20)
	*((($28 + [64]) + [24])) = (int_64)1314145028
	*($17) = $27
	*($18) = *($28 + [4 align=4])
	*($28 + [64]) = *($0)
	*($9) = *($28)
	*($28) = [0]
	*($28 + [4]) = [0]
	*(($23 = ($28 + [8]))) = [0]
	CALL $53($0, ($28 + [320]), ($28 + [24]), ($28 + [16]), ($28 + [64]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$89 }
	CALL $108(*($19))
	
.LABEL $label$89
	if ( ((*($28) & [1]) == 0) ){ goto $label$90 }
	CALL $108(*($23))
	
.LABEL $label$90
	CALL eosio_assert([1], [1088])
	$23 = CALL db_next_i64(*($20 + [24]), ($28 + [64]))
	if ( ((int_32)$23 <= (int_32)[-1]) ){ goto $label$25 }
	$20 = CALL $73($6, $23)
	goto $label$26 
	
.LABEL $label$25
	*($28 + [273]) = $5
	*($28 + [272]) = $4
	CALL $32($3, ($28 + [224]), *($0))
	$23 = CALL db_lowerbound_i64(*($6), *($12), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$91 }
	$2 = ($0 + [96])
	$1 = ($0 + [88])
	
.LOOP $label$92:
	CALL $73($6, $23)
	$23 = [0]
	$21 = CALL db_lowerbound_i64(*($1), *($2), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$93 }
	$23 = CALL $73($6, $21)
	
.LABEL $label$93
	$21 = ((int_32)$23 != (int_32)[0])
	CALL eosio_assert($21, [1120])
	CALL eosio_assert($21, [1088])
	$21 = CALL db_next_i64(*($23 + [24]), ($28 + [64]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$94 }
	CALL $73($6, $21)
	
.LABEL $label$94
	CALL $75($6, $23)
	$23 = CALL db_lowerbound_i64(*($1), *($2), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$23 > (int_32)[-1]) ){ goto $label$92 }
	
.LABEL $label$91
	if ( ((*($28 + [32]) & [1]) == 0) ){ goto $label$95 }
	CALL $108(*($28 + [40]))
	
.LABEL $label$95
	if ( ((*($28 + [48]) & [1]) == 0) ){ goto $label$96 }
	CALL $108(*(($28 + [56])))
	
.LABEL $label$96
	if ( ((*($28 + [304]) & [1]) == 0) ){ goto $label$97 }
	CALL $108(*($28 + [312]))
	
.LABEL $label$97
	*([0] + [4]) = ($28 + [336])
	return (unreachable)
	
.LABEL $label$21
	CALL $109(($28 + [32]))
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [384])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [384])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [384])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [384])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [320])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $107([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $52(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)-2507753063930920960
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)-2507753063930920960
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $47(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $108($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [384])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 | [8]), $5, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 + [16]), $4, [8])
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-2507753063930920960, *(*($0 + [8])), (int_64)-2507753063930920960, $6, [24])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)-2507753063930920960) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)-2507753063930920959
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $54(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $55($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $56(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $108($0)
	
.LABEL $label$1
	CALL $57(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $107([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $39($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $40(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $108($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $108($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $108($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [320])
	*(($4 = CALL $107([96])) + [80]) = $1
	*($4) = (int_64)0
	CALL memcpy($4, *($3), [80])
	*($7 + [88]) = ($7 + [66])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	*($7 + [96]) = ($7 + [80])
	*($7 + [108]) = ($4 + [16])
	*($7 + [104]) = $4
	*($7 + [112]) = ($4 + [48])
	*($7 + [116]) = ($4 + [49])
	*($7 + [120]) = ($4 + [56])
	*($7 + [124]) = ($4 + [64])
	CALL $35(($7 + [104]), ($7 + [96]))
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, $7, [66])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [104]) = $4
	*($7) = (int_64)7235159537265672192
	$5 = *($4 + [84])
	*($7 + [80]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($7 + [104]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $36(($1 + [24]), ($7 + [104]), $7, ($7 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [104])
	*($7 + [104]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $108($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $58($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $39($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $59($4, $1)
	CALL $61(CALL $60(CALL $60($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $108($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $108($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $108($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $108($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $108($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $108($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $108($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $108($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $107($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $118($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $115($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [384])
	CALL memcpy(*($2 + [4]), $3, [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [384])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [384])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [384])
	CALL memcpy(*($0 + [4]), $2, [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $107(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $108($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $111($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $111($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $107($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $108($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $111($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $119 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [64])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [128])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [160])
	CALL memcpy($0, $1, [8])
	$4 = ($2 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [160])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [160])
	CALL memcpy(($0 + [16]), ($1 + [16]), [8])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [96])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	CALL $29(($7 + [24]), $5, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [48]) + [8]))) = *(($7 + [40]))
	$3 = *($7 + [24])
	*($7 + [48]) = *($7 + [32])
	*((($7 + [64]) + [8])) = *($1)
	*($7 + [64]) = *($7 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	$4 = *((($7 + [64]) + [8]))
	*((($7 + [80]) + [8])) = $4
	*((($7 + [8]) + [8])) = $4
	$4 = *($7 + [64])
	*($7 + [80]) = $4
	*($7 + [8]) = $4
	CALL void $1((int_32 $3), (int_64 ($7 + [8])), (int_32 $6))
	*([0] + [4]) = ($7 + [96])
	return [1]
}

int_64 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	$2 = ($0 + [8])
	$1 = *(($0 + [36]))
	if ( ((int_32)$1 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$2), [176])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$3 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $31($2, $3)
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$2), [176])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [240])
	*(($1 = CALL memcpy($5, $1, [80]))) = ((int_64)*($1) + (int_64)1)
	CALL $32($2, $1, *($0))
	$4 = *($1)
	*([0] + [4]) = ($1 + [80])
	return $4
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10172])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10060])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9868]
	$1 = (((int_32)$2 * (int_32)[12]) + [9868])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC _ZN12eoscrazytown6newbagERyRN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	$4 = ($0 + [152])
	$3 = ($0 + [128])
	$11 = [10]
	$9 = ($0 + [160])
	$10 = ($0 + [156])
	
.LOOP $label$1:
	$8 = *($1)
	*(($12 + [8])) = $2
	*($12 + [4]) = $1
	*($12) = $0
	*($12 + [40]) = $8
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [320])
	*($12 + [16]) = $3
	*((($12 + [16]) + [8])) = ($12 + [40])
	*($12 + [20]) = $12
	*(($5 = CALL $107([48])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [36]) = $3
	CALL $69(($12 + [16]), $5)
	*($12 + [32]) = $5
	$8 = *($5)
	*($12 + [16]) = $8
	$6 = *($5 + [40])
	*($12 + [12]) = $6
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*($9)) ){ goto $label$3 }
	*($7 + [8]) = $8
	*($7 + [16]) = $6
	*($12 + [32]) = [0]
	*($7) = $5
	*($10) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $68($4, ($12 + [32]), ($12 + [16]), ($12 + [12]))
	
.LABEL $label$2
	$5 = *($12 + [32])
	*($12 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL $108(*(($5 + [32])))
	
.LABEL $label$5
	CALL $108($5)
	
.LABEL $label$4
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$1 }
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = (*([0] + [4]) - [192])
	$8 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*(($4 = ($8 + [24]))) = (int_64)0
	*(($5 = ($8 + [16]))) = (int_64)0
	*(($8 + [56])) = (int_64)0
	*(($8 + [48])) = (int_64)0
	*(($8 + [40])) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[31]), [160])
	CALL memcpy($8, $6, [32])
	CALL eosio_assert(((int_32)($1 & [-32]) != (int_32)[32]), [160])
	$3 = ($8 + [32])
	CALL memcpy($3, ($6 + [32]), [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*(($1 = (($8 + [96]) + [24]))) = *($4)
	*(($6 = (($8 + [96]) + [16]))) = *($5)
	*($8 + [104]) = *($8 + [8])
	*($8 + [96]) = *($8)
	*(($4 = (($8 + [64]) + [24]))) = *(($3 + [24]))
	*(($5 = (($8 + [64]) + [16]))) = *(($3 + [16]))
	*($8 + [72]) = *(($3 + [8]))
	*($8 + [64]) = *($3)
	*((($8 + [160]) + [24])) = *($4)
	*((($8 + [160]) + [16])) = *($5)
	*($8 + [168]) = *($8 + [72])
	*($8 + [160]) = *($8 + [64])
	*((($8 + [128]) + [24])) = *($1)
	*((($8 + [128]) + [16])) = *($6)
	*($8 + [136]) = *($8 + [104])
	*($8 + [128]) = *($8 + [96])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 ($8 + [128])), (int_32 ($8 + [160])), (int_32 $7))
	*([0] + [4]) = ($8 + [192])
	return [1]
}

void .FUNC _ZN12eoscrazytown9setsloganERyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$4 = *(($0 + [152]))
	$8 = *(($0 + [156]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [128])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$6), [176])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)4150067056621912064, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $65($6, $8)
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$6), [176])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [768])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($3 + [4])
	
.LABEL $label$5
	CALL eosio_assert(($5 <= [65]), [800])
	CALL eosio_assert(((int_64)*($1) == (int_64)*($7 + [8])), [816])
	$2 = *($1)
	*($9 + [8]) = $3
	CALL eosio_assert($8, [272])
	CALL $66($6, $7, $2, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [64])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $29($6, $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [24]) + [8]))) = *(($6 + [16]))
	$3 = *($6)
	*($6 + [24]) = *($6 + [8])
	*((($6 + [40]) + [8])) = *($1)
	*($6 + [40]) = *($6 + [24])
	*($6 + [56]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [56])), (int_32 ($6 + [40])), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

void .FUNC _ZN12eoscrazytown5claimEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [176])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$10 = [0]
	*((($11 + [136]) + [32])) = [0]
	*($11 + [144]) = $1
	*($11 + [152]) = (int_64)-1
	*($11 + [160]) = (int_64)0
	$7 = *($0)
	*($11 + [136]) = $7
	*($11 + [40]) = (int_64)0
	*($11 + [32]) = (int_64)0
	*($11 + [48]) = (int_64)0
	CALL $38(($11 + [112]), ($11 + [136]), $7, ($11 + [32]))
	$5 = ($0 + [8])
	$2 = *(($0 + [36]))
	if ( ((int_32)$2 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$10 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$5), [176])
	goto $label$1 
	
.LABEL $label$2
	$2 = CALL db_find_i64(*($5), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $31($5, $2)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$5), [176])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [240])
	CALL __multi3($11, *($11 + [120]), (int_64)0, *($10 + [64]), *(($10 + [72])))
	$7 = *($11 + [128])
	$6 = *(($11 + [8]))
	$9 = ((int_64)*($11 + [4]) | (int_64)((int_64)$6 << (int_64)32))
	*($11 + [128]) = $9
	CALL $42(($11 + [136]), ($11 + [112]), *($0))
	$10 = (int_64)((uint_64)$6 >> (uint_64)(int_64)32) == 0
	if ( ( ((uint_64)$9 <= (uint_64)$7) ? $10) : $10 ) ){ goto $label$4 }
	$3 = (int_64)
	if ( (int_64)($3($9 - $7)) == 0) ){ goto $label$4 }
	$4 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$10 = [656]
	$8 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$10 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$10 = ($10 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$5 }
	*($11 + [104]) = $8
	*($11 + [96]) = $4
	$7 = (int_64)0
	$6 = (int_64)59
	$10 = [720]
	$8 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$12
	$10 = ($10 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$11 }
	*($11 + [88]) = $8
	$7 = (int_64)0
	$6 = (int_64)59
	$10 = [48]
	$8 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$22 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$18
	$10 = ($10 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$17 }
	*($11 + [80]) = $8
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$7 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$5 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$5 = [0]
	
.LABEL $label$23
	CALL eosio_assert($5, [128])
	*(($11 + [24])) = [0]
	*($11 + [16]) = (int_64)0
	$10 = CALL strlen([736])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$30 }
	*($11 + [16]) = ($10 << [1])
	$5 = (($11 + [16]) | [1])
	if ( $10 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$2 = (($10 + [16]) & [-16])
	$5 = CALL $107($2)
	*($11 + [16]) = ($2 | [1])
	*($11 + [24]) = $5
	*($11 + [20]) = $10
	
.LABEL $label$29
	CALL memcpy($5, [736], $10)
	
.LABEL $label$28
	*(($5 + $10)) = [0]
	*(($11 + [56])) = (int_64)1397703940
	*(($11 + [68])) = *($11 + [20])
	*($11 + [40]) = $1
	$10 = ($11 + [24])
	*(($5 = ($11 + [72]))) = *($10)
	*($11 + [32]) = *($0)
	*($11 + [48]) = $3
	*($11 + [64]) = *($11 + [16])
	*($11 + [16]) = [0]
	*($11 + [20]) = [0]
	*($10) = [0]
	CALL $53($0, ($11 + [96]), ($11 + [88]), ($11 + [80]), ($11 + [32]))
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$31 }
	CALL $108(*($5))
	
.LABEL $label$31
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $108(*(($11 + [24])))
	
.LABEL $label$4
	$0 = *($11 + [160])
	if ( ($0 == 0) ){ goto $label$32 }
	$2 = ($11 + [164])
	$10 = *($2)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$34 }
	
.LOOP $label$35:
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$36 }
	CALL $108($5)
	
.LABEL $label$36
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$35 }
	$10 = *(($11 + [160]))
	goto $label$33 
	
.LABEL $label$34
	$10 = $0
	
.LABEL $label$33
	*($2) = $0
	CALL $108($10)
	
.LABEL $label$32
	*([0] + [4]) = ($11 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $109(($11 + [16]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [160])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $62(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $63(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $108(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC _ZN12eoscrazytown7unstakeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL _ZN12eoscrazytown5claimEy($0, $1)
	$3 = *($2)
	CALL $30($0, $1, $3)
	$4 = ($0 + [8])
	$2 = *(($0 + [36]))
	if ( ((int_32)$2 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [176])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$5 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $31($4, $5)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [176])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [240])
	*(($2 = CALL memcpy($6, $2, [80])) + [56]) = (int_64))(*($2 + [56]) - $3)
	CALL $32($4, $2, *($0))
	*([0] + [4]) = ($2 + [80])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $109 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$8 = *($0 + [4])
	$6 = *($8)
	$5 = ($6 + [144])
	$9 = *($5)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$4 = ($6 + [128])
	$3 = CALL db_lowerbound_i64(*($4), *(($6 + [136])), (int_64)4150067056621912064, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $65($4, $3)
	*($11 + [4]) = [0]
	*($11) = $4
	$9 = *(*(CALL $70($11) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [832])
	*($1) = *($5)
	*($1 + [8]) = *(*($8 + [4]))
	*($1 + [16]) = *(*($8 + [8]))
	$8 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [24])
	$9 = (CASTING uint_64)(uint_32 $6)
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($8 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11) = $10
	$6 = ($10 + $8)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [384])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[7]), [384])
	CALL memcpy($7, $3, [8])
	$3 = ($10 + [16])
	CALL eosio_assert(((int_32)($6 - $3) > (int_32)[7]), [384])
	CALL memcpy($3, $4, [8])
	*($11 + [4]) = ($10 + [24])
	CALL $50($11, $5)
	$9 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)4150067056621912064, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $108(*(($1 + [32])))
	
.LABEL $label$11
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $108($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $108 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $107([48])
	$6 = CALL $67($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $68(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $108(*(($4 + [32])))
	
.LABEL $label$10
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [752])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $39($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	*(($0 + [32])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $62($1, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [448])
	$4 = *($1)
	$5 = ($1 + [24])
	CALL $110($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [512])
	$3 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [24])
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10) = $9
	$6 = ($9 + $3)
	*($10 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [384])
	CALL memcpy($9, $1, [8])
	$7 = ($9 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[7]), [384])
	CALL memcpy($7, ($1 + [8]), [8])
	$7 = ($9 + [16])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[7]), [384])
	CALL memcpy($7, ($1 + [16]), [8])
	*($10 + [4]) = ($9 + [24])
	CALL $50($10, $5)
	CALL db_update_i64(*($1 + [40]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [384])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $49($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [384])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [384])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $49(CALL $48($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *($1 + [8])
	$3 = *($1)
	CALL $120(($5 + [8]), ($1 + [16]))
	*($5 + [40]) = $3
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $120(($5 + [24]), ($5 + [8]))
	CALL void $0((int_32 ($5 + [40])), (int_32 $2), (int_64 ($5 + [24])), (int_32 $1))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$2 }
	CALL $108(*($5 + [32]))
	
.LABEL $label$2
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL $108(*($5 + [16]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $64($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $112($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $107($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $112($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $108($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $109($7)
	return (unreachable)
}

int_32 .FUNC _ZN12eoscrazytown12checkBetsNewERKN5eosio5assetERNSt3__16vectorIxNS4_9allocatorIxEEEERx (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$5 = (int_64)0
	$2 = *($2 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$1 }
	
.LOOP $label$2:
	$5 = ((int_64)*($4) + (int_64)$5)
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$1
	*($3) = $5
	return ((int_64)*($1) == (int_64)$5)
}

int_64 .FUNC _ZN12eoscrazytown12getTotalBetsERKNSt3__16vectorIxNS0_9allocatorIxEEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$2 = (int_64)0
	$1 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	$2 = ((int_64)*($3) + (int_64)$2)
	$3 = ($3 + [8])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	return $2
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $104([1676], $0)
}

int_64 .FUNC _Z10merge_seedRK11checksum256S1_ (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$3 = (int_64)0
	$2 = [0]
	
.LOOP $label$1:
	$3 = ((int_64)(CASTING int_64)(int_32 (*($0) << ($2 & [56]))) ^ (int_64)$3)
	$0 = ($0 + [1])
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)[256]) ){ goto $label$1 }
	return $3
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10166]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10168])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10166]) = [1]
	$7 = ($7 << [16])
	*([0] + [10168]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10168])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10168]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10166]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10166]) = [1]
	$3 = ($3 << [16])
	*([0] + [10168]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10168])
	
.LABEL $label$8
	*([0] + [10168]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $105($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10080])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [384])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [448])
	$4 = *($1)
	$10 = [0]
	$8 = *($3)
	if ( ((int_32)*($8 + [4]) == (int_32)*($8)) ){ goto $label$1 }
	$5 = *($1 + [8])
	$11 = (int_64)0
	$10 = [0]
	$9 = [0]
	
.LOOP $label$2:
	$7 = ((int_64)*($6) + (int_64)*((*($8) + $10)))
	*(($6 = ($5 + $10))) = $7
	$11 = ((int_64)$7 + (int_64)((int_64)$11 & (int_64)4294967295))
	$10 = ($10 + [8])
	$8 = *($3)
	$9 = ($9 + [1])
	if ( ($9 <= int_32((*($8 + [4]) - *($8)) >> [3])) ){ goto $label$2 }
	$10 = (CASTING uint_32)(uint_64 $11)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 > (int_32)[999]), [1456])
	CALL eosio_assert(((int_32)$10 < (int_32)[200001]), [1488])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [512])
	$10 = [8]
	$9 = ($1 + [8])
	$6 = *($1 + [8])
	$8 = *(($1 + [12]))
	$3 = ($8 - $6)
	$11 = (CASTING uint_64)(uint_32 int_32($3 >> [3]))
	
.LOOP $label$3:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	$10 = (($3 & [-8]) + $10)
	
.LABEL $label$4
	if ( ($10 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($10)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($12) = $8
	*($12 + [8]) = ($8 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [384])
	CALL memcpy($8, $1, [8])
	*($12 + [4]) = ($8 + [8])
	CALL $89($12, $9)
	CALL db_update_i64(*($1 + [24]), $2, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$7 = [8]
	$2 = *($0)
	$3 = *($3 + [4])
	$4 = ($1 + [8])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	CALL $90($4, *($3), *($3 + [4]))
	
.LABEL $label$1
	$5 = *($4)
	$3 = *(($1 + [12]))
	$6 = ($3 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	$7 = (($6 & [-8]) + $7)
	
.LABEL $label$3
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [384])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $89($10, $4)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $86 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [176])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $91($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [176])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $107(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $119($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $108($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [320])
	*(($4 = CALL $107([96])) + [80]) = $1
	*($4) = (int_64)0
	CALL memcpy($4, *($3), [80])
	*($7 + [88]) = ($7 + [66])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	*($7 + [96]) = ($7 + [80])
	*($7 + [108]) = ($4 + [16])
	*($7 + [104]) = $4
	*($7 + [112]) = ($4 + [48])
	*($7 + [116]) = ($4 + [49])
	*($7 + [120]) = ($4 + [56])
	*($7 + [124]) = ($4 + [64])
	CALL $35(($7 + [104]), ($7 + [96]))
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, $7, [66])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [104]) = $4
	*($7) = (int_64)7235159537265672192
	$5 = *($4 + [84])
	*($7 + [80]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($7 + [104]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $36(($1 + [24]), ($7 + [104]), $7, ($7 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [104])
	*($7 + [104]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $108($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$1), [176])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $31($1, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$1), [176])
	
.LABEL $label$3
	CALL memcpy($0, $4, [80])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $84($5, $1, $2, ($5 + [8]))
	CALL memcpy($0, *($5 + [4]), [80])
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1168])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1216])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [1280])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $108($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $108($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC _ZN12eoscrazytown9getResultERKhS1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL strlen([1344])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$6 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$6 = CALL $107($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($6, [1344], $4)
	
.LABEL $label$2
	*(($6 + $4)) = [0]
	$2 = *($3)
	$3 = (((uint_32)$2 % (uint_32)[13]) + [1])
	$4 = *($2)
	$6 = (((uint_32)$4 % (uint_32)[13]) + [1])
	$5 = ( [0] ? ( [1] ? [2] : ($6 <= $3) ) : ((uint_32)$6 > (uint_32)$3) )
	if ( (*($0) & [1]) ){ goto $label$6 }
	$7 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$7 = *($0 + [8])
	
.LABEL $label$5
	*(($7 + $5)) = [79]
	$4 = ( [3] ? ( [3] ? [5] : ((($4 + [-26]) & [255]) <= [13]) ) : ((($4 + [-13]) & [255]) <= [13]) )
	if ( (*($0) & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	*(($5 + $4)) = [79]
	$4 = ( [4] ? ( [4] ? [6] : ((($2 + [-26]) & [255]) <= [13]) ) : ((($2 + [-13]) & [255]) <= [13]) )
	if ( (*($0) & [1]) ){ goto $label$10 }
	$2 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$2 = *($0 + [8])
	
.LABEL $label$9
	*(($2 + $4)) = [79]
	$4 = ([8] - ($6 & [1]))
	if ( (*($0) & [1]) ){ goto $label$12 }
	$6 = ($0 + [1])
	goto $label$11 
	
.LABEL $label$12
	$6 = *($0 + [8])
	
.LABEL $label$11
	*(($6 + $4)) = [79]
	$4 = ([10] - ($3 & [1]))
	if ( (*($0) & [1]) ){ goto $label$14 }
	$0 = ($0 + [1])
	goto $label$13 
	
.LABEL $label$14
	$0 = *($0 + [8])
	
.LABEL $label$13
	*(($0 + $4)) = [79]
	return (unreachable)
	
.LABEL $label$1
	CALL $109($0)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $107([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [160])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $76(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $77(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $108($7)
	
.LABEL $label$10
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [40]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [960])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4150067056621912064)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [896])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [896])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $65(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [384])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [384])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [384])
	CALL memcpy(*($2 + [4]), $3, [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [384])
	CALL memcpy(*($0 + [4]), $2, [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [752])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $78($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [160])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $108($6)
	
.LABEL $label$11
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $108($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN12eoscrazytown8getBetonERKNSt3__16vectorIxNS0_9allocatorIxEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL strlen([16])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($5 << [1])
	$3 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($5 + [16]) & [-16])
	$3 = CALL $107($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($3, [16], $5)
	
.LABEL $label$2
	*(($3 + $5)) = [0]
	$3 = *($2 + [4])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $114($0, ( [79] ? [110] : ((int_64)*($5) != (int_64)0) ))
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$5
	return (unreachable)
	
.LABEL $label$1
	CALL $109($0)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $107($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $119($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $108($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[31]), [160])
	CALL memcpy($3, *($2 + [4]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [160])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [160])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [160])
	CALL memcpy($2, *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $107(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $119($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $108($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [576])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $107([48])) + [32]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [16])
	*($7 + [52]) = ($5 + [24])
	*($7 + [56]) = ($5 + [28])
	CALL $81(($7 + [40]), ($7 + [32]))
	*($5 + [36]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)4150496169072803840
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)4150496169072803840
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $82(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$0), [176])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $31($0, $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$0), [176])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [272])
	CALL $33($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $34($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [128])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [448])
	CALL memcpy($1, *($3), [80])
	CALL eosio_assert([1], [512])
	*($4 + [88]) = ($4 + [66])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [16])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [48])
	*($4 + [116]) = ($1 + [49])
	*($4 + [120]) = ($1 + [56])
	*($4 + [124]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [66])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [128])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [224])
	*([0] + [4]) = $15
	CALL require_auth($1)
	$8 = [0]
	*((($15 + [152]) + [32])) = [0]
	*($15 + [160]) = $1
	*($15 + [168]) = (int_64)-1
	*($15 + [176]) = (int_64)0
	$10 = *($0)
	*($15 + [152]) = $10
	*($15 + [48]) = (int_64)0
	*($15 + [40]) = (int_64)0
	*($15 + [56]) = (int_64)0
	CALL $38(($15 + [128]), ($15 + [152]), $10, ($15 + [40]))
	$6 = ($0 + [8])
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$6), [176])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($6), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $31($6, $7)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$6), [176])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [240])
	$4 = *(($8 + [72]))
	$3 = *($8 + [64])
	CALL eosio_assert(((uint_64)*($15 + [136]) >= (uint_64)$2), [608])
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [656]
	$11 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$8 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$6 = ($6 + [165])
	goto $label$6 
	
.LABEL $label$8
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$3 }
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [672]
	$13 = (int_64)0
	
.LOOP $label$9:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$10 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$6 = ($6 + [165])
	goto $label$11 
	
.LABEL $label$12
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$10
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [48]
	$14 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$18 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$6 = ($6 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$13 }
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$10 = (int_64)5133379
	$8 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$6 = [0]
	
.LABEL $label$19
	CALL eosio_assert($6, [128])
	*(($15 + [32])) = [0]
	*($15 + [24]) = (int_64)0
	$8 = CALL strlen([688])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($15 + [24]) = ($8 << [1])
	$6 = (($15 + [24]) | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $107($7)
	*($15 + [24]) = ($7 | [1])
	*($15 + [32]) = $6
	*($15 + [28]) = $8
	
.LABEL $label$26
	CALL memcpy($6, [688], $8)
	
.LABEL $label$25
	*(($6 + $8)) = [0]
	*((($15 + [40]) + [24])) = (int_64)1314145028
	*(($6 = (($15 + [40]) + [36]))) = *($15 + [28])
	*($15 + [48]) = $1
	$8 = ($15 + [32])
	*(($15 + [80])) = *($8)
	*($15 + [40]) = *($0)
	*($15 + [56]) = $2
	*($15 + [72]) = *($15 + [24])
	*($15 + [24]) = [0]
	*($15 + [28]) = [0]
	*($8) = [0]
	*($15 + [88]) = $13
	*($15 + [96]) = $14
	*(($8 = CALL $107([16]))) = $5
	*($8 + [8]) = $11
	*((($15 + [88]) + [32])) = [0]
	$7 = ($8 + [16])
	*((($15 + [88]) + [24])) = $7
	*(($15 + [108])) = $7
	*($15 + [104]) = $8
	*($15 + [116]) = [0]
	*((($15 + [88]) + [36])) = [0]
	$8 = *($15 + [72])
	$6 = ( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = ($15 + [116])
	
.LOOP $label$28:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$28 }
	if ( ($8 == 0) ){ goto $label$30 }
	CALL $39($6, $8)
	$6 = *(($15 + [120]))
	$8 = *(($15 + [116]))
	goto $label$29 
	
.LABEL $label$30
	$6 = [0]
	$8 = [0]
	
.LABEL $label$29
	*($15 + [212]) = $8
	*($15 + [208]) = $8
	*($15 + [216]) = $6
	*($15 + [192]) = ($15 + [208])
	*($15 + [200]) = ($15 + [40])
	CALL $40(($15 + [200]), ($15 + [192]))
	CALL $41(($15 + [208]), ($15 + [88]))
	$8 = *($15 + [208])
	CALL send_inline($8, (*($15 + [212]) - $8))
	$8 = *($15 + [208])
	if ( ($8 == 0) ){ goto $label$31 }
	*($15 + [212]) = $8
	CALL $108($8)
	
.LABEL $label$31
	$8 = *($15 + [116])
	if ( ($8 == 0) ){ goto $label$32 }
	*(($15 + [120])) = $8
	CALL $108($8)
	
.LABEL $label$32
	$8 = *($15 + [104])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [108])) = $8
	CALL $108($8)
	
.LABEL $label$33
	if ( ((*(($15 + [72])) & [1]) == 0) ){ goto $label$34 }
	CALL $108(*(($15 + [80])))
	
.LABEL $label$34
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$35 }
	CALL $108(*(($15 + [32])))
	
.LABEL $label$35
	CALL __multi3(($15 + [8]), $3, $4, $2, (int_64)0)
	*(($8 = (($15 + [128]) + [8]))) = (int_64))(*($8) - $2)
	$10 = (uint_64)$12 >> (uint_64)(int_64)32
	$12 = *((($15 + [8]) + [8]))
	$9 = ((int_64)*($15 + [12]) | (int_64)((int_64)$12 << (int_64)32))
	$10 = *($15 + [144])
	*($15 + [144]) = ( (int_64)0 ? (int_64))($10 - $9) : ( (uint_64)($10 <= $9) ? ((int_64)$10) != (int_64)0) : (int_64)($10 == 0) ) )
	CALL $42(($15 + [152]), ($15 + [128]), *($0))
	$0 = *($15 + [176])
	if ( ($0 == 0) ){ goto $label$36 }
	$7 = ($15 + [180])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$40 }
	CALL $108($6)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$39 }
	$8 = *(($15 + [176]))
	goto $label$37 
	
.LABEL $label$38
	$8 = $0
	
.LABEL $label$37
	*($7) = $0
	CALL $108($8)
	
.LABEL $label$36
	*([0] + [4]) = ($15 + [224])
	return (unreachable)
	
.LABEL $label$24
	CALL $109(($15 + [24]))
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [576])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $107([96])) + [80]) = $0
	*($5) = (int_64)0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [16])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [48])
	*($7 + [52]) = ($5 + [49])
	*($7 + [56]) = ($5 + [56])
	*($7 + [60]) = ($5 + [64])
	CALL $37(($7 + [40]), ($7 + [32]))
	*($5 + [84]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)7235159537265672192
	$6 = *($5 + [84])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}