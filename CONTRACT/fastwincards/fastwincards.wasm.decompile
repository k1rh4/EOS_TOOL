(data (i32.const 4) "\f0f\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "fastshieldio\00")
(data (i32.const 64) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 128) "invalid symbol name\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "get\00")
(data (i32.const 192) "shouldn\'t transfer to self\00")
(data (i32.const 224) "amount must be positivie number\00")
(data (i32.const 256) "you should use EOS from eosio.token.\00")
(data (i32.const 304) "buy card\00")
(data (i32.const 320) "card id missmatch.\00")
(data (i32.const 352) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 416) "card id not found.\00")
(data (i32.const 448) "you should input correct buying quantity.\00")
(data (i32.const 496) "card dividend calculation error.\00")
(data (i32.const 544) "active\00")
(data (i32.const 560) "Fastwin Card Sales Revenue - Previous Owner.\00")
(data (i32.const 608) "fastwinhold2\00")
(data (i32.const 624) "Fastwin Card Sales Revenue - FAST Holders.\00")
(data (i32.const 672) "fastwinteam1\00")
(data (i32.const 688) "Fastwin Card Sales Revenue - FAST Dev Team.\00")
(data (i32.const 736) "cannot pass end iterator to modify\00")
(data (i32.const 784) "memo size: \00")
(data (i32.const 800) "\t find: \00")
(data (i32.const 816) "\t number: \00")
(data (i32.const 832) "cannot increment end iterator\00")
(data (i32.const 864) "object passed to modify is not in multi_index\00")
(data (i32.const 912) "cannot modify objects in table of another contract\00")
(data (i32.const 976) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1040) "write\00")
(data (i32.const 1056) "error reading iterator\00")
(data (i32.const 1088) "cannot create objects in table of another contract\00")
(data (i32.const 1152) "you should init the contract first.\00")
(data (i32.const 1200) "card id is invalid.\00")
(data (i32.const 1232) "you are not the owner of the card.\00")
(data (i32.const 1280) "you don\'t have any undistributed amount.\00")
(data (i32.const 1328) "you have to wait 24 hours after last withdraw time.\00")
(data (i32.const 1392) "Fastwin Card Dividend Revenue - Owner.\00")
(data (i32.const 1440) "card id is already exist.\00")
(data (i32.const 9872) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$12 (param i64)))
(import "env" "prints" (func $fimport$13 (param i32)))
(import "env" "printui" (func $fimport$14 (param i64)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$18 (param i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $42))
(export "free" (func $45))
(export "atoi" (func $53))
(export "memchr" (func $54))
(export "memcmp" (func $55))
(export "strlen" (func $56))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $57 $8 $6 $12 $10)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $46($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $50($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $47($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1056])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $46([112])
	CALL $32($6)
	*($6 + [96]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [56])
	*($8 + [64]) = ($6 + [64])
	*($8 + [68]) = ($6 + [72])
	*($8 + [72]) = ($6 + [80])
	*($8 + [76]) = ($6 + [88])
	CALL $33(($8 + [40]), ($8 + [32]))
	*($6 + [100]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $47($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1088])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $46([112])
	CALL $32($3)
	*($3 + [96]) = $1
	CALL $41(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $34(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $47($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1040])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1040])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1040])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1040])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1040])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $18($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1040])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1040])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $29(CALL $28($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $46([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $18($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $30(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1056])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $46([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($5, $6, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [160])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [160])
	CALL memcpy(($5 + [16]), ($6 + [16]), [8])
	*($5 + [28]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [28])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $47($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [16]) = *($1 + [8])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	*(($1 + [48])) = *(($1 + [32]))
	*($1 + [40]) = *($1 + [24])
	*($1 + [24]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($1 + [24])) * (float_64)(float_64)1.3))
	*($1 + [64]) = CALL current_time()
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [976])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	*($5 + [112]) = ($5 + [96])
	*($5 + [124]) = ($1 + [8])
	*($5 + [120]) = $1
	*($5 + [128]) = ($1 + [16])
	*($5 + [132]) = ($1 + [24])
	*($5 + [136]) = ($1 + [40])
	*($5 + [140]) = ($1 + [56])
	*($5 + [144]) = ($1 + [64])
	*($5 + [148]) = ($1 + [72])
	*($5 + [152]) = ($1 + [80])
	*($5 + [156]) = ($1 + [88])
	CALL $26(($5 + [120]), ($5 + [112]))
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	$4 = *($1)
	*($1 + [72]) = ((int_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(*($3))) * (float_64)(CASTING float_64)(uint_64 *(*(*($3 + [4]) + [4]) + [56]))) / (float_64)(CASTING float_64)(uint_64 *(*(*($3 + [8]) + [4]) + [16])))) + (int_64)*($1 + [72]))
	CALL eosio_assert([1], [976])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	*($5 + [112]) = ($5 + [96])
	*($5 + [124]) = ($1 + [8])
	*($5 + [120]) = $1
	*($5 + [128]) = ($1 + [16])
	*($5 + [132]) = ($1 + [24])
	*($5 + [136]) = ($1 + [40])
	*($5 + [140]) = ($1 + [56])
	*($5 + [144]) = ($1 + [64])
	*($5 + [148]) = ($1 + [72])
	*($5 + [152]) = ($1 + [80])
	*($5 + [156]) = ($1 + [88])
	CALL $26(($5 + [120]), ($5 + [112]))
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1) = ((int_64)*($1) + (int_64)*(*($3)))
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [1040])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [1040])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1040])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $46(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $47($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $47($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $46(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $47($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $48 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $44($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9872])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $43([1468], $0)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	$11 = $12
	*([0] + [4]) = $12
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [16]) = (int_64)0
	$2 = *($0)
	$9 = *($3 + [4])
	*($1 + [24]) = *($9)
	*(($1 + [32])) = *(($9 + [8]))
	*($1 + [80]) = (int_64)0
	*($1 + [72]) = (int_64)0
	CALL eosio_assert([1], [64])
	$7 = ($1 + [72])
	$6 = ($1 + [80])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$8 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [128])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	$8 = *(*($3 + [8]))
	*($1 + [64]) = (int_64)0
	*($1 + [56]) = $8
	*($1 + [88]) = CALL current_time()
	$10 = $12
	$9 = ($10 + [-96])
	*([0] + [4]) = $9
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = $10
	*($11 + [16]) = $11
	*($11 + [28]) = ($1 + [8])
	*($11 + [24]) = $1
	*($11 + [32]) = $4
	*($11 + [36]) = $5
	*($11 + [40]) = ($1 + [40])
	*($11 + [44]) = ($1 + [56])
	*($11 + [48]) = ($1 + [64])
	*($11 + [52]) = $7
	*($11 + [56]) = $6
	*($11 + [60]) = ($1 + [88])
	CALL $26(($11 + [24]), ($11 + [16]))
	$8 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($2 + [8]), (int_64)4732891782226903040, *(*($0 + [8])), $8, $9, [96])
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [1040])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [1040])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1040])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $47 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9964])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9852])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9660]
	$1 = (((int_32)$2 * (int_32)[12]) + [9660])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9958]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9960])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9958]) = [1]
	$7 = ($7 << [16])
	*([0] + [9960]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9960])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9960]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9958]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9958]) = [1]
	$3 = ($3 << [16])
	*([0] + [9960]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9960])
	
.LABEL $label$8
	*([0] + [9960]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $46($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [224])
	*([0] + [4]) = $11
	CALL require_auth($2)
	$5 = [0]
	*((($11 + [168]) + [32])) = [0]
	*($11 + [184]) = (int_64)-1
	*($11 + [192]) = (int_64)0
	$8 = *($0)
	*($11 + [168]) = $8
	*($11 + [176]) = $8
	$7 = [0]
	$4 = CALL db_find_i64($8, $8, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $23(($11 + [168]), $4)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($11 + [168])), [352])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1152])
	*((($11 + [128]) + [32])) = [0]
	*($11 + [144]) = (int_64)-1
	*($11 + [152]) = (int_64)0
	$8 = *($0)
	*($11 + [128]) = $8
	*($11 + [136]) = $8
	$7 = CALL db_find_i64($8, $8, (int_64)4732891782226903040, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $19(($11 + [128]), $7)
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)($11 + [128])), [352])
	
.LABEL $label$2
	$3 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($3, [1200])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)$2), [1232])
	$8 = (int_64)0
	CALL eosio_assert(((int_64)*($5 + [72]) != (int_64)0), [1280])
	CALL eosio_assert((uint_64)(((int_64)*($5 + [88]) + (int_64)86400000000) <= CALL $fimport$3()), [1328])
	$10 = *($0)
	$1 = (int_64)59
	$7 = [544]
	$9 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$8 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($4 + [165])
	goto $label$6 
	
.LABEL $label$8
	$2 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$4
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$2 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$3 }
	*($11 + [80]) = $9
	*($11 + [72]) = $10
	$8 = (int_64)0
	$1 = (int_64)59
	$7 = [16]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$14 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$4 = ($4 + [165])
	goto $label$12 
	
.LABEL $label$14
	$2 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)-5)
	$9 = ((int_64)$2 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$9 }
	$8 = (int_64)0
	$1 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$20 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$4 = ($4 + [165])
	goto $label$18 
	
.LABEL $label$20
	$2 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$2 | (int_64)$10)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$15 }
	$2 = *(($5 + [72]))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$8 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [128])
	*(($11 + [16])) = [0]
	*($11 + [8]) = (int_64)0
	$7 = CALL strlen([1392])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$29 }
	*($11 + [8]) = ($7 << [1])
	$4 = (($11 + [8]) | [1])
	if ( $7 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$6 = (($7 + [16]) & [-16])
	$4 = CALL $46($6)
	*($11 + [8]) = ($6 | [1])
	*($11 + [16]) = $4
	*($11 + [12]) = $7
	
.LABEL $label$28
	CALL memcpy($4, [1392], $7)
	
.LABEL $label$27
	*(($4 + $7)) = [0]
	$8 = *(($5 + [8]))
	*(($11 + [48])) = (int_64)1397703940
	*(($11 + [60])) = *($11 + [12 align=4])
	*($11 + [24]) = *($0)
	*($11 + [32]) = $8
	*($11 + [40]) = $2
	*($11 + [56]) = *($11 + [8])
	*($11 + [8]) = [0]
	*($11 + [12]) = [0]
	*((($11 + [8]) + [8])) = [0]
	$7 = CALL $20(($11 + [88]), ($11 + [72]), $9, $10, ($11 + [24]))
	CALL $21(($11 + [208]), $7)
	$4 = *($11 + [208])
	CALL send_inline($4, (*($11 + [212]) - $4))
	$4 = *($11 + [208])
	if ( ($4 == 0) ){ goto $label$30 }
	*($11 + [212]) = $4
	CALL $47($4)
	
.LABEL $label$30
	$4 = *($7 + [28])
	if ( ($4 == 0) ){ goto $label$31 }
	*(($7 + [32])) = $4
	CALL $47($4)
	
.LABEL $label$31
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$32 }
	*(($7 + [20])) = $4
	CALL $47($4)
	
.LABEL $label$32
	if ( ((*(($11 + [56])) & [1]) == 0) ){ goto $label$33 }
	CALL $47(*(($11 + [64])))
	
.LABEL $label$33
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL $47(*(($11 + [16])))
	
.LABEL $label$34
	$8 = *($0)
	CALL eosio_assert($3, [736])
	CALL $37(($11 + [128]), $5, $8, ($11 + [24]))
	$5 = *($11 + [152])
	if ( ($5 == 0) ){ goto $label$35 }
	$0 = ($11 + [156])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$39 }
	CALL $47($4)
	
.LABEL $label$39
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$38 }
	$7 = *(($11 + [152]))
	goto $label$36 
	
.LABEL $label$37
	$7 = $5
	
.LABEL $label$36
	*($0) = $5
	CALL $47($7)
	
.LABEL $label$35
	$5 = *($11 + [192])
	if ( ($5 == 0) ){ goto $label$40 }
	$0 = ($11 + [196])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL $47($4)
	
.LABEL $label$44
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$43 }
	$7 = *(($11 + [192]))
	goto $label$41 
	
.LABEL $label$42
	$7 = $5
	
.LABEL $label$41
	*($0) = $5
	CALL $47($7)
	
.LABEL $label$40
	*([0] + [4]) = ($11 + [224])
	return (unreachable)
	
.LABEL $label$26
	CALL $48(($11 + [8]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [160])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	*($10 + [104]) = $1
	*($10 + [96]) = $2
	$4 = *($0)
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [544]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($4, $8)
	$6 = [0]
	*((($10 + [56]) + [32])) = [0]
	*($10 + [72]) = (int_64)-1
	*($10 + [80]) = (int_64)0
	$2 = *($0)
	*($10 + [56]) = $2
	*($10 + [64]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)4732891782226903040, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $19(($10 + [56]), $5) + [96]) == (int_32)($10 + [56])), [352])
	$5 = [0]
	goto $label$7 
	
.LABEL $label$8
	$5 = [1]
	
.LABEL $label$7
	CALL eosio_assert($5, [1440])
	$2 = *($0)
	*($10 + [12]) = $3
	*($10 + [8]) = ($10 + [104])
	*($10 + [16]) = ($10 + [96])
	CALL $39(($10 + [48]), ($10 + [56]), $2, ($10 + [8]))
	*((($10 + [8]) + [32])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$2 = *($0)
	*($10 + [8]) = $2
	*($10 + [16]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $23(($10 + [8]), $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($10 + [8])), [352])
	
.LABEL $label$9
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1152])
	$2 = *($0)
	*($10 + [48]) = ($10 + [96])
	CALL eosio_assert($5, [736])
	CALL $40(($10 + [8]), $6, $2, ($10 + [48]))
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$10 }
	$3 = ($10 + [36])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $47($5)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$13 }
	$6 = *(($10 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $0
	
.LABEL $label$11
	*($3) = $0
	CALL $47($6)
	
.LABEL $label$10
	$0 = *($10 + [80])
	if ( ($0 == 0) ){ goto $label$15 }
	$3 = ($10 + [84])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL $47($5)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($10 + [80]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $0
	
.LABEL $label$16
	*($3) = $0
	CALL $47($6)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1397703940
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [64])
	$7 = (int_64)5459781
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [128])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $38(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$6 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$18 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$3 = ($3 + [165])
	goto $label$16 
	
.LABEL $label$18
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$19 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$25 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$20 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$4 }
	
.LABEL $label$19
	*($9 + [72]) = $1
	*($9 + [64]) = $0
	if ( ((int_64)$2 > (int_64)5031766156897828863) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [1]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $9(($9 + [64]), ($9 + [8]))
	goto $label$1 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5031766156897828864) ){ goto $label$1 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9) = *($9 + [56])
	CALL $7(($9 + [64]), $9)
	goto $label$1 
	
.LABEL $label$5
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$27:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	CALL require_recipient($7)
	goto $label$1 
	
.LABEL $label$4
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$31:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$32
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$31 }
	CALL require_recipient($7)
	goto $label$1 
	
.LABEL $label$3
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $13(($9 + [64]), ($9 + [24]))
	goto $label$1 
	
.LABEL $label$2
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $11(($9 + [64]), ($9 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $16(*($1), ($0 + [32]))
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $51(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $51(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $47(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $47(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $17($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $49($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $46($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $49($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $47($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $48($7)
	return (unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [176])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $18($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $10 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [544]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $7)
	*(($9 + [56])) = [0]
	*($9 + [40]) = (int_64)-1
	*($9 + [48]) = (int_64)0
	$6 = *($0)
	*($9 + [24]) = $6
	*($9 + [32]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $23(($9 + [24]), $4) + [24]) == (int_32)($9 + [24])), [352])
	$0 = *($9 + [48])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $35(($9 + [8]), ($9 + [24]), *($0), ($9 + [16]))
	$0 = *($9 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($9 + [52])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $47($2)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($9 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $0
	
.LABEL $label$10
	*($3) = $0
	CALL $47($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	*($17 + [168]) = $1
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$4 }
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [192])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [224])
	$15 = *($0 + [8])
	$11 = (int_64)59
	$10 = [16]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$10 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$6
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$2 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$5 }
	CALL eosio_assert(((int_64)$15 == (int_64)$12), [256])
	$5 = *($4)
	$14 = ($5 & [1])
	if ( $14 ){ goto $label$12 }
	$10 = uint_32($5 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$10 = *($4 + [4])
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)[10]) ){ goto $label$16 }
	if ( $14 ){ goto $label$18 }
	$5 = uint_32($5 >> [1])
	$13 = ($4 + [1])
	goto $label$17 
	
.LABEL $label$18
	$5 = *($4 + [4])
	$13 = *($4 + [8])
	
.LABEL $label$17
	$10 = CALL strlen([304])
	if ( ($10 == 0) ){ goto $label$19 }
	if ( ((int_32)$5 < (int_32)$10) ){ goto $label$16 }
	$6 = ($13 + $5)
	$14 = $13
	
.LOOP $label$20:
	$5 = (($5 - $10) + [1])
	if ( ($5 == 0) ){ goto $label$16 }
	$5 = CALL memchr($14, [98], $5)
	if ( ($5 == 0) ){ goto $label$16 }
	if ( (CALL memcmp($5, [304], $10) == 0) ){ goto $label$21 }
	$14 = ($5 + [1])
	$5 = ($6 - $14)
	if ( ((int_32)$5 >= (int_32)$10) ){ goto $label$20 }
	goto $label$16 
	
.LABEL $label$21
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$5 != (int_32)$13) ){ goto $label$16 }
	
.LABEL $label$19
	CALL $52(($17 + [24]), $4, [9], [-1], $4)
	$10 = CALL atoi(( *($17 + [32]) ? (($17 + [24]) | [1]) : (*($17 + [24]) & [1]) ))
	$7 = (CASTING int_64)(int_32 $10)
	if ( ((*($17 + [24]) & [1]) == 0) ){ goto $label$22 }
	CALL $47(*(($17 + [32])))
	
.LABEL $label$22
	CALL eosio_assert((($10 + [-1]) <= [4]), [320])
	*(($17 + [160])) = [0]
	*($17 + [144]) = (int_64)-1
	*($17 + [152]) = (int_64)0
	$1 = *($0)
	*($17 + [128]) = $1
	*($17 + [136]) = $1
	$14 = [0]
	$10 = CALL db_find_i64($1, $1, (int_64)4732891782226903040, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$23 }
	$14 = CALL $19(($17 + [128]), $10)
	CALL eosio_assert(((int_32)*($14 + [96]) == (int_32)($17 + [128])), [352])
	
.LABEL $label$23
	$6 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($6, [416])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($14 + [24])), [448])
	$16 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($14 + [40])) * (float_64)(float_64)1.1))
	$9 = *($3)
	CALL eosio_assert(((uint_64)$9 > (uint_64)$16), [496])
	if ( (int_64)($16 == 0) ){ goto $label$13 }
	$15 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [544]
	$12 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$29 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$5 = ($5 + [165])
	goto $label$27 
	
.LABEL $label$29
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$25
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$2 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$24 }
	*($17 + [80]) = $12
	*($17 + [72]) = $15
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [16]
	$12 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$35 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$5 = ($5 + [165])
	goto $label$33 
	
.LABEL $label$35
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$31
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$2 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$30 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [32]
	$15 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$41 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$5 = ($5 + [165])
	goto $label$39 
	
.LABEL $label$41
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$37
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$36 }
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$1 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	
.LOOP $label$44:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$44 }
	
.LABEL $label$43
	$5 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$42 }
	goto $label$14 
	
.LABEL $label$16
	*(($17 + [56])) = [0]
	*($17 + [40]) = (int_64)-1
	*($17 + [48]) = (int_64)0
	$1 = *($0)
	*($17 + [24]) = $1
	*($17 + [32]) = $1
	$10 = CALL db_find_i64($1, $1, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$46 }
	$10 = CALL $23(($17 + [24]), $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($17 + [24])), [352])
	*($17 + [76]) = $10
	*($17 + [72]) = ($17 + [24])
	$1 = *($0)
	*($17 + [128]) = $3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [736])
	CALL $24(($17 + [24]), $10, $1, ($17 + [128]))
	goto $label$45 
	
.LABEL $label$46
	*($17 + [76]) = [0]
	*($17 + [72]) = ($17 + [24])
	
.LABEL $label$45
	*(($17 + [160])) = [0]
	*($17 + [144]) = (int_64)-1
	$1 = *($0)
	*($17 + [128]) = $1
	*($17 + [136]) = $1
	*($17 + [152]) = (int_64)0
	$10 = CALL db_lowerbound_i64($1, $1, (int_64)4732891782226903040, (int_64)0)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$49 }
	*($17 + [180]) = CALL $19(($17 + [128]), $10)
	*($17 + [176]) = ($17 + [128])
	$5 = ($17 + [96])
	
.LOOP $label$51:
	$1 = *($0)
	$10 = *($17 + [180])
	*($17 + [88]) = $3
	*($5) = ($17 + [72])
	*($17 + [92]) = ($17 + [176])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [736])
	CALL $25(($17 + [128]), $10, $1, ($17 + [88]))
	CALL eosio_assert(((int_32)*($17 + [180]) != (int_32)[0]), [832])
	$10 = CALL db_next_i64(*(*($17 + [180]) + [100]), ($17 + [88]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$50 }
	*($17 + [180]) = CALL $19(*($17 + [176]), $10)
	goto $label$51 
	
.LABEL $label$50
	*($17 + [180]) = [0]
	$0 = *($17 + [152])
	if ( $0 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	*($17 + [180]) = [0]
	*($17 + [176]) = ($17 + [128])
	$0 = *($17 + [152])
	if ( ($0 == 0) ){ goto $label$47 }
	
.LABEL $label$48
	$3 = ($17 + [156])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$53 }
	
.LOOP $label$54:
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$55 }
	CALL $47($5)
	
.LABEL $label$55
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$54 }
	$10 = *(($17 + [152]))
	goto $label$52 
	
.LABEL $label$53
	$10 = $0
	
.LABEL $label$52
	*($3) = $0
	CALL $47($10)
	
.LABEL $label$47
	$0 = *($17 + [48])
	if ( ($0 == 0) ){ goto $label$4 }
	$3 = ($17 + [52])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$57 }
	
.LOOP $label$58:
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$59 }
	CALL $47($5)
	
.LABEL $label$59
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$58 }
	$10 = *(($17 + [48]))
	goto $label$56 
	
.LABEL $label$57
	$10 = $0
	
.LABEL $label$56
	*($3) = $0
	CALL $47($10)
	goto $label$4 
	
.LABEL $label$15
	$5 = [0]
	
.LABEL $label$14
	CALL eosio_assert($5, [128])
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$10 = CALL strlen([560])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$62 }
	*($17 + [8]) = ($10 << [1])
	$5 = (($17 + [8]) | [1])
	if ( $10 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$3 = (($10 + [16]) & [-16])
	$5 = CALL $46($3)
	*($17 + [8]) = ($3 | [1])
	*($17 + [16]) = $5
	*($17 + [12]) = $10
	
.LABEL $label$61
	CALL memcpy($5, [560], $10)
	
.LABEL $label$60
	*(($5 + $10)) = [0]
	$1 = *(($14 + [8]))
	*(($17 + [48])) = (int_64)1397703940
	*(($17 + [60])) = *($17 + [12 align=4])
	*($17 + [24]) = *($0)
	*($17 + [32]) = $1
	*($17 + [40]) = $16
	*($17 + [56]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*((($17 + [8]) + [8])) = [0]
	$10 = CALL $20(($17 + [88]), ($17 + [72]), $12, $15, ($17 + [24]))
	CALL $21(($17 + [176]), $10)
	$5 = *($17 + [176])
	CALL send_inline($5, (*($17 + [180]) - $5))
	$5 = *($17 + [176])
	if ( ($5 == 0) ){ goto $label$63 }
	*($17 + [180]) = $5
	CALL $47($5)
	
.LABEL $label$63
	$5 = *($10 + [28])
	if ( ($5 == 0) ){ goto $label$64 }
	*(($10 + [32])) = $5
	CALL $47($5)
	
.LABEL $label$64
	$5 = *($10 + [16])
	if ( ($5 == 0) ){ goto $label$65 }
	*(($10 + [20])) = $5
	CALL $47($5)
	
.LABEL $label$65
	if ( ((*(($17 + [56])) & [1]) == 0) ){ goto $label$66 }
	CALL $47(*(($17 + [64])))
	
.LABEL $label$66
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $47(*(($17 + [16])))
	
.LABEL $label$13
	$8 = (uint_64)$1 >> (uint_64)(int_64)1
	$1 = (int_64)
	$9 = (int_64))($1($9 - $16)) - $8))
	$15 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [544]
	$12 = (int_64)0
	
.LOOP $label$67:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$72 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$5 = ($5 + [165])
	goto $label$70 
	
.LABEL $label$72
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$69
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$68
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$2 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$67 }
	*($17 + [80]) = $12
	*($17 + [72]) = $15
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [16]
	$12 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$78 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$5 = ($5 + [165])
	goto $label$76 
	
.LABEL $label$78
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$74
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$2 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$73 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [32]
	$15 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$84 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$5 = ($5 + [165])
	goto $label$82 
	
.LABEL $label$84
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$80
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$79 }
	$1 = (int_64)0
	$2 = (int_64)59
	$10 = [608]
	$16 = (int_64)0
	
.LOOP $label$85:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$86 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$5 = ($5 + [165])
	goto $label$87 
	
.LABEL $label$88
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$86
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$85 }
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$1 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$91:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$90 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$92 }
	
.LOOP $label$93:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$90 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$93 }
	
.LABEL $label$92
	$5 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$91 }
	goto $label$89 
	
.LABEL $label$90
	$5 = [0]
	
.LABEL $label$89
	CALL eosio_assert($5, [128])
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$10 = CALL strlen([624])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$96 }
	*($17 + [8]) = ($10 << [1])
	$5 = (($17 + [8]) | [1])
	if ( $10 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$3 = (($10 + [16]) & [-16])
	$5 = CALL $46($3)
	*($17 + [8]) = ($3 | [1])
	*($17 + [16]) = $5
	*($17 + [12]) = $10
	
.LABEL $label$95
	CALL memcpy($5, [624], $10)
	
.LABEL $label$94
	*(($5 + $10)) = [0]
	*(($17 + [48])) = (int_64)1397703940
	*(($17 + [60])) = *($17 + [12])
	*($17 + [32]) = $16
	$10 = ($17 + [16])
	*(($17 + [64])) = *($10)
	*($17 + [24]) = *($0)
	*($17 + [40]) = $9
	*($17 + [56]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*($10) = [0]
	$10 = CALL $20(($17 + [88]), ($17 + [72]), $12, $15, ($17 + [24]))
	CALL $21(($17 + [176]), $10)
	$5 = *($17 + [176])
	CALL send_inline($5, (*($17 + [180]) - $5))
	$5 = *($17 + [176])
	if ( ($5 == 0) ){ goto $label$97 }
	*($17 + [180]) = $5
	CALL $47($5)
	
.LABEL $label$97
	$5 = *($10 + [28])
	if ( ($5 == 0) ){ goto $label$98 }
	*(($10 + [32])) = $5
	CALL $47($5)
	
.LABEL $label$98
	$5 = *($10 + [16])
	if ( ($5 == 0) ){ goto $label$99 }
	*(($10 + [20])) = $5
	CALL $47($5)
	
.LABEL $label$99
	if ( ((*(($17 + [56])) & [1]) == 0) ){ goto $label$100 }
	CALL $47(*(($17 + [64])))
	
.LABEL $label$100
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$101 }
	CALL $47(*(($17 + [16])))
	
.LABEL $label$101
	$15 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [544]
	$12 = (int_64)0
	
.LOOP $label$102:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$107 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$5 = ($5 + [165])
	goto $label$105 
	
.LABEL $label$107
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$103
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$2 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$102 }
	*($17 + [80]) = $12
	*($17 + [72]) = $15
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [16]
	$12 = (int_64)0
	
.LOOP $label$108:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$113 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$112 }
	$5 = ($5 + [165])
	goto $label$111 
	
.LABEL $label$113
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$112
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$111
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$110
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$109
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$2 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$108 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [32]
	$15 = (int_64)0
	
.LOOP $label$114:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$119 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$5 = ($5 + [165])
	goto $label$117 
	
.LABEL $label$119
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$118
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$116
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$115
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$114 }
	$1 = (int_64)0
	$2 = (int_64)59
	$10 = [672]
	$16 = (int_64)0
	
.LOOP $label$120:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$121 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$123 }
	$5 = ($5 + [165])
	goto $label$122 
	
.LABEL $label$123
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$122
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$121
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$120 }
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [64])
	$1 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$126:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$125 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$127 }
	
.LOOP $label$128:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$125 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$128 }
	
.LABEL $label$127
	$5 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$126 }
	goto $label$124 
	
.LABEL $label$125
	$5 = [0]
	
.LABEL $label$124
	CALL eosio_assert($5, [128])
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$10 = CALL strlen([688])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$131 }
	*($17 + [8]) = ($10 << [1])
	$5 = (($17 + [8]) | [1])
	if ( $10 ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$131
	$3 = (($10 + [16]) & [-16])
	$5 = CALL $46($3)
	*($17 + [8]) = ($3 | [1])
	*($17 + [16]) = $5
	*($17 + [12]) = $10
	
.LABEL $label$130
	CALL memcpy($5, [688], $10)
	
.LABEL $label$129
	*(($5 + $10)) = [0]
	*(($17 + [48])) = (int_64)1397703940
	*(($17 + [60])) = *($17 + [12])
	*($17 + [32]) = $16
	$10 = ($17 + [16])
	*(($17 + [64])) = *($10)
	*($17 + [24]) = *($0)
	*($17 + [40]) = $8
	*($17 + [56]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*($10) = [0]
	$10 = CALL $20(($17 + [88]), ($17 + [72]), $12, $15, ($17 + [24]))
	CALL $21(($17 + [176]), $10)
	$5 = *($17 + [176])
	CALL send_inline($5, (*($17 + [180]) - $5))
	$5 = *($17 + [176])
	if ( ($5 == 0) ){ goto $label$132 }
	*($17 + [180]) = $5
	CALL $47($5)
	
.LABEL $label$132
	$5 = *($10 + [28])
	if ( ($5 == 0) ){ goto $label$133 }
	*(($10 + [32])) = $5
	CALL $47($5)
	
.LABEL $label$133
	$5 = *($10 + [16])
	if ( ($5 == 0) ){ goto $label$134 }
	*(($10 + [20])) = $5
	CALL $47($5)
	
.LABEL $label$134
	if ( ((*(($17 + [56])) & [1]) == 0) ){ goto $label$135 }
	CALL $47(*(($17 + [64])))
	
.LABEL $label$135
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$136 }
	CALL $47(*(($17 + [16])))
	
.LABEL $label$136
	$1 = *($0)
	*($17 + [24]) = ($17 + [168])
	CALL eosio_assert($6, [736])
	CALL $22(($17 + [128]), $14, $1, ($17 + [24]))
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$138 }
	$0 = uint_32($10 >> [1])
	$14 = ($4 + [1])
	$4 = uint_32($10 >> [1])
	goto $label$137 
	
.LABEL $label$138
	$14 = *($4 + [8])
	$4 = *($4 + [4])
	$0 = $4
	
.LABEL $label$137
	$5 = CALL strlen([304])
	if ( ($5 == 0) ){ goto $label$140 }
	$3 = ($14 + $0)
	$10 = $3
	if ( ((int_32)$0 < (int_32)$5) ){ goto $label$141 }
	$10 = $14
	
.LOOP $label$143:
	$0 = (($0 - $5) + [1])
	if ( ($0 == 0) ){ goto $label$142 }
	$10 = CALL memchr($10, [98], $0)
	if ( ($10 == 0) ){ goto $label$142 }
	if ( (CALL memcmp($10, [304], $5) == 0) ){ goto $label$141 }
	$10 = ($10 + [1])
	$0 = ($3 - $10)
	if ( ((int_32)$0 >= (int_32)$5) ){ goto $label$143 }
	
.LABEL $label$142
	$10 = $3
	
.LABEL $label$141
	$1 = ( (int_64)4294967295 ? (CASTING uint_64)(uint_32 ($10 - $14)) : ((int_32)$10 == (int_32)$3) )
	goto $label$139 
	
.LABEL $label$140
	$1 = (int_64)0
	
.LABEL $label$139
	CALL prints([784])
	CALL printui((CASTING uint_64)(uint_32 $4))
	CALL prints([800])
	CALL printui($1)
	CALL prints([816])
	CALL printi($7)
	$0 = *($17 + [152])
	if ( ($0 == 0) ){ goto $label$4 }
	$3 = ($17 + [156])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$145 }
	
.LOOP $label$146:
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$147 }
	CALL $47($5)
	
.LABEL $label$147
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$146 }
	$10 = *(($17 + [152]))
	goto $label$144 
	
.LABEL $label$145
	$10 = $0
	
.LABEL $label$144
	*($3) = $0
	CALL $47($10)
	
.LABEL $label$4
	*([0] + [4]) = ($17 + [192])
	return (unreachable)
	
.LABEL $label$3
	CALL $48(($17 + [8]))
	
.LABEL $label$2
	CALL $48(($17 + [8]))
	
.LABEL $label$1
	CALL $48(($17 + [8]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [64])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [128])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $14(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $15(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $47(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	$2 = *($0)
	CALL eosio_assert([1], [1040])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [1040])
	CALL memcpy(($3 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1040])
	CALL memcpy(($3 + [16]), ($1 + [16]), [8])
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550573565312, *(*($0 + [8])), (int_64)1, $3, [24])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [32])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	$4 = *($1 + [72])
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = ((int_64)$4 + (int_64)*($1 + [80]))
	$4 = *($1)
	*($1 + [88]) = CALL current_time()
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [976])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	*($5 + [112]) = ($5 + [96])
	*($5 + [124]) = ($1 + [8])
	*($5 + [120]) = $1
	*($5 + [128]) = ($1 + [16])
	*($5 + [132]) = ($1 + [24])
	*($5 + [136]) = ($1 + [40])
	*($5 + [140]) = ($1 + [56])
	*($5 + [144]) = ($1 + [64])
	*($5 + [148]) = ($1 + [72])
	*($5 + [152]) = ($1 + [80])
	*($5 + [156]) = ($1 + [88])
	CALL $26(($5 + [120]), ($5 + [112]))
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $46(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $47($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $47($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1088])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $46([40])) + [24]) = $1
	CALL $36(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)1
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $47($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $32 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [128])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [128])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1040])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1040])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1040])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1040])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $46($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $57 ()
{
	(unreachable)
}