(data (i32.const 8220) "failed to allocate pages\00\00\01\02\04\07\03\06\05\00cannot transfer to self\00")
(data (i32.const 8288) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8545) "stoi\00to account does not exist\00")
(data (i32.const 8576) ": no conversion\00game\00")
(data (i32.const 8597) ": out of range\00code\00")
(data (i32.const 8617) "invalid quantity\00")
(data (i32.const 8634) "Bet amount must be from 0.1000 to 10.0000 EOS\00")
(data (i32.const 8680) "Invalid Bet memo\00")
(data (i32.const 8697) "EOS\00")
(data (i32.const 8701) ",\00")
(data (i32.const 8703) "invalid input\00")
(data (i32.const 8717) "invalid input: game\00")
(data (i32.const 8737) "invalid input: selection\00")
(data (i32.const 8762) "type invalid\00")
(data (i32.const 8775) "invalid bet\00")
(data (i32.const 8787) "active\00")
(data (i32.const 8794) "eosio.token\00")
(data (i32.const 8806) "transfer\00")
(data (i32.const 8815) "Congratulations!\00")
(data (i32.const 8832) "win-coin\00")
(data (i32.const 8841) "lose-coin\00")
(data (i32.const 8851) "win-cards\00")
(data (i32.const 8861) "lose\00")
(data (i32.const 8866) "0123456789abcdef\00")
(data (i32.const 8883) "invalid selection\00")
(data (i32.const 8901) "onerror\00")
(data (i32.const 8909) "eosio\00")
(data (i32.const 8915) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8979) "string is too long to be a valid symbol_code\00")
(data (i32.const 9024) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9077) "string is too long to be a valid name\00")
(data (i32.const 9115) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9182) "character is not in allowed character set for names\00")
(data (i32.const 9234) "write\00")
(data (i32.const 9240) "read\00")
(data (i32.const 9245) "get\00")
(data (i32.const 0) "($\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "is_account" (func $fimport$2 (param i64) (result i32)))
(import "env" "abort" (func $fimport$3))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$7 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__multf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$10 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$13 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$18 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$20 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$25 (result i64)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(import "env" "require_recipient" (func $fimport$27 (param i64)))
(import "env" "action_data_size" (func $fimport$28 (result i32)))
(import "env" "read_action_data" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$30 (param i32 i64)))
(export "apply" (func $53))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $40 $52)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 9249))
(global $global$2 i32 (i32.const 9249))


int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9245])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $49($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9240])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $18($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9234])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9234])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9234])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9234])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $66(*($1), ($4 + [8]))
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9234])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9234])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [40]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9234])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [48])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9234])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [56]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$0 = ($4 + [64])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9234])
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $0, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $21 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $19($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $20($3, (int_64)0)
	$4 = CALL $22($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $21($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $5()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $21($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8289]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $20($0, (int_64)0)
	*(CALL $5()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $21($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $21($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $21($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $21($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8289])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $21($0)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $21($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8245]))
	$8 = (int_64)0
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $21($0)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $21($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $20($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8289]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8289]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $21($0) + [8289]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $5()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $5()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $5()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $28($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $39($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $8(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $10($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9077])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9182])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9115])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9182])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($1 + $5))
	CALL $31($4, *((uint_32($6 >> [4]) + [8866])))
	CALL $31($4, *((($6 & [15]) + [8866])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$5 = *($4)
	$6 = ($5 & [1])
	$7 = ( *(($4 + [8])) ? ($4 | [1]) : $6 )
	$8 = ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($8 <= [4]) ){ goto $label$5 }
	$1 = $8
	$5 = $7
	$6 = $8
	
.LOOP $label$6:
	CALL memcpy(($4 + [12]), $5, [4])
	$9 = ((int_32)*($4 + [12]) * (int_32)[1540483477])
	$6 = ((int_32)((int_32)((int_32)uint_32($9 >> [24]) ^ (int_32)$9) * (int_32)[1540483477]) ^ (int_32)((int_32)$6 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$6 }
	$5 = ($8 + [-4])
	$1 = ($5 & [-4])
	$7 = (($7 + $1) + [4])
	$8 = ($5 - $1)
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$6 = $8
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$7 }
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$2 }
	$6 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$6)
	
.LABEL $label$7
	$6 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$6)
	
.LABEL $label$3
	$6 = ((int_32)((int_32)$6 ^ (int_32)*($7)) * (int_32)[1540483477])
	
.LABEL $label$2
	$5 = ((int_32)((int_32)uint_32($6 >> [13]) ^ (int_32)$6) * (int_32)[1540483477])
	$5 = ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*(($4 + [8])))
	
.LABEL $label$8
	$8 = ($5 + [-1640531527])
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$9:
	$6 = *(($2 + $5))
	CALL $31($4, *((uint_32($6 >> [4]) + [8866])))
	CALL $31($4, *((($6 & [15]) + [8866])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[20]) ){ goto $label$9 }
	$5 = *($4)
	$6 = ($5 & [1])
	$7 = ( *(($4 + [8])) ? ($4 | [1]) : $6 )
	$9 = ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($9 <= [4]) ){ goto $label$13 }
	$1 = $9
	$5 = $7
	$6 = $9
	
.LOOP $label$14:
	CALL memcpy(($4 + [12]), $5, [4])
	$2 = ((int_32)*($4 + [12]) * (int_32)[1540483477])
	$6 = ((int_32)((int_32)((int_32)uint_32($2 >> [24]) ^ (int_32)$2) * (int_32)[1540483477]) ^ (int_32)((int_32)$6 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$14 }
	$5 = ($9 + [-4])
	$1 = ($5 & [-4])
	$7 = (($7 + $1) + [4])
	$9 = ($5 - $1)
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$6 = $9
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$15 }
	if ( ((int_32)$9 != (int_32)[3]) ){ goto $label$10 }
	$6 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$6)
	
.LABEL $label$15
	$6 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$6)
	
.LABEL $label$11
	$6 = ((int_32)((int_32)$6 ^ (int_32)*($7)) * (int_32)[1540483477])
	
.LABEL $label$10
	$5 = ((int_32)((int_32)uint_32($6 >> [13]) ^ (int_32)$6) * (int_32)[1540483477])
	$5 = ((int_32)(((($8 << [6]) + uint_32($8 >> [2])) + ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)) + [-1640531527]) ^ (int_32)$8)
	if ( ((*($4) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($4 + [8])))
	
.LABEL $label$16
	$global$0 = ($4 + [16])
	return ((((uint_32)$5 % (uint_32)$3) + [1]) & [255])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($3 + [4])
	if ( ((int_32)$5 == (int_32)*($3 + [8])) ){ goto $label$4 }
	CALL $25($5, $1)
	*(($1 = ($3 + [4]))) = (*($1) + [12])
	$1 = [1]
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $47($3, $1)
	$1 = [1]
	$5 = *($2)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = *($2 + [4])
	goto $label$1 
	
.LABEL $label$2
	$6 = uint_32($5 >> $1)
	
.LABEL $label$1
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$7 = ($2 + [1])
	$8 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$10 = ($3 + [4])
	CALL $27(($4 + [16]), (*($10) + [-12]))
	$11 = *($4 + [16])
	$9 = ($11 & [1])
	$5 = [0]
	$12 = ($1 & [1])
	$1 = *($2)
	$1 = ( *(($2 + [4])) ? uint_32($1 >> [1]) : $12 )
	if ( ($1 == 0) ){ goto $label$7 }
	$5 = ( *($4 + [20]) ? uint_32($11 >> [1]) : $9 )
	if ( ((int_32)$5 < (int_32)$1) ){ goto $label$5 }
	$13 = ( *((($4 + [16]) + [8])) ? $8 : $9 )
	$14 = ($13 + $5)
	$12 = ( *(($2 + [8])) ? $7 : $12 )
	$11 = *($12)
	$9 = $13
	
.LOOP $label$8:
	$5 = (($5 - $1) + [1])
	if ( ($5 == 0) ){ goto $label$5 }
	$5 = CALL $16($9, $11, $5)
	if ( ($5 == 0) ){ goto $label$5 }
	if ( (CALL $17($5, $12, $1) == 0) ){ goto $label$9 }
	$9 = ($5 + [1])
	$5 = ($14 - $9)
	if ( ((int_32)$5 >= (int_32)$1) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$5 == (int_32)$14) ){ goto $label$5 }
	$5 = ($5 - $13)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$7
	CALL $26($4, ($4 + [16]), [0], $5, ($4 + [16]))
	$9 = *($10)
	$1 = ($9 + [-12])
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($9 + [-4]))) = [0]
	*(($9 + [-8])) = [0]
	
.LABEL $label$10
	CALL $29($1, [0])
	$9 = ($4 + [8])
	*(($1 + [8])) = *($9)
	*($1) = *($4)
	$5 = *($4 + [16])
	$1 = ($5 + $6)
	$5 = CALL $26($4, ($4 + [16]), $1, (( *($4 + [20]) ? uint_32($5 >> [1]) : ($5 & [1]) ) - $1), ($4 + [16]))
	$1 = *($10)
	if ( ((uint_32)$1 >= (uint_32)*(($3 + [8]))) ){ goto $label$12 }
	*($1) = *($4)
	*(($1 + [8])) = *($9)
	*($9) = [0]
	*($10) = (*($10) + [12])
	*($4) = (int_64)0
	goto $label$6 
	
.LABEL $label$12
	CALL $48($3, $5)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*($9))
	goto $label$6 
	
.LABEL $label$5
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($4 + [24])))
	
.LABEL $label$13
	$global$0 = ($4 + [32])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	float_64 $15
	int_64 $16
	int_64 $17
	$7 = ($global$0 - [1776])
	$global$0 = $7
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8254])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$2($2), [8550])
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$10 = $12
	$8 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$10 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8617])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)-1000) <= (int_64)99001), [8634])
	*($7 + [1696]) = [0]
	*($7 + [1688]) = (int_64)0
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$10 }
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$12 }
	$11 = uint_32($11 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$11 = *($4 + [4])
	
.LABEL $label$11
	CALL eosio_assert(($11 <= [8]), [8680])
	$11 = CALL $1([8697])
	if ( ($11 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [8979])
	goto $label$15 
	
.LABEL $label$16
	if ( ($11 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$10 = (int_64)0
	
.LOOP $label$17:
	$8 = *(($11 + [8696]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9024])
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$17 }
	$10 = ((int_64)$10 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$10 = (int_64)0
	
.LABEL $label$13
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)$10 | (int_64)4)) ){ goto $label$10 }
	$8 = CALL $25(($7 + [1672]), $4)
	*(($7 + [1664])) = [0]
	*($7 + [1656]) = (int_64)0
	$11 = CALL $1([8701])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$29 }
	*($7 + [1656]) = ($11 << [1])
	$13 = (($7 + [1656]) | [1])
	if ( $11 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*($7 + [1656]) = ($4 | [1])
	*($7 + [1664]) = $13
	*($7 + [1660]) = $11
	
.LABEL $label$28
	CALL memcpy($13, [8701], $11)
	
.LABEL $label$27
	*(($13 + $11)) = [0]
	CALL $41($11, $8, ($7 + [1656]), ($7 + [1688]))
	if ( ((*($7 + [1656]) & [1]) == 0) ){ goto $label$30 }
	CALL $10(*($7 + [1664]))
	
.LABEL $label$30
	if ( ((*($8) & [1]) == 0) ){ goto $label$31 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$31
	CALL eosio_assert(((int_32)(*($7 + [1692]) - *($7 + [1688])) == (int_32)[24]), [8703])
	$11 = *($7 + [1688])
	$8 = *($11)
	if ( ($8 & [1]) ){ goto $label$33 }
	$11 = uint_32($8 >> [1])
	goto $label$32 
	
.LABEL $label$33
	$11 = *($11 + [4])
	
.LABEL $label$32
	CALL eosio_assert(((int_32)$11 == (int_32)[1]), [8717])
	$11 = *($7 + [1688])
	$8 = *($11 + [12])
	if ( ($8 & [1]) ){ goto $label$35 }
	$11 = uint_32($8 >> [1])
	goto $label$34 
	
.LABEL $label$35
	$11 = *(($11 + [16]))
	
.LABEL $label$34
	CALL eosio_assert(($11 <= [6]), [8737])
	$8 = *($7 + [1688])
	$11 = CALL $32($8, [0], [10])
	CALL eosio_assert(($11 <= [2]), [8762])
	$13 = ($8 + [12])
	$10 = *(($3 + [8]))
	$12 = *($3)
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$52 }
	if ( $11 ){ goto $label$10 }
	$11 = *($7 + [1688])
	$4 = *($11 + [12])
	if ( ($4 & [1]) ){ goto $label$51 }
	$11 = uint_32($4 >> [1])
	goto $label$50 
	
.LABEL $label$52
	$11 = CALL $42($11, $5, $6, [6])
	$4 = *($7 + [1688])
	$5 = *($4 + [12])
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$49 }
	$2 = (CASTING uint_64)(uint_32 $11)
	$14 = [1]
	if ( ((int_32)uint_32($5 >> [1]) == (int_32)[1]) ){ goto $label$48 }
	goto $label$19 
	
.LABEL $label$51
	$11 = *(($11 + [16]))
	
.LABEL $label$50
	CALL eosio_assert(((int_32)$11 == (int_32)[1]), [8775])
	$2 = ((int_64)(CASTING uint_64)(uint_32 CALL $42($11, $5, $6, [2])) + (int_64)-1)
	if ( (*($13) & [1]) ){ goto $label$54 }
	$11 = ($13 + [1])
	goto $label$53 
	
.LABEL $label$54
	$11 = *(($8 + [20]))
	
.LABEL $label$53
	if ( ((int_64)$2 != (int_64)((int_64)(CASTING uint_64)(uint_32 (*($11) + [-48])) & (int_64)255)) ){ goto $label$55 }
	$9 = *($0)
	*($7 + [1584]) = [8787]
	*($7 + [1588]) = CALL $1([8787])
	*($7 + [24]) = *($7 + [1584])
	$11 = CALL $43(($7 + [1592]), ($7 + [24]))
	*($7 + [1600]) = $9
	*($7 + [1608]) = *($11)
	*($7 + [1568]) = [8794]
	*($7 + [1572]) = CALL $1([8794])
	*($7 + [16]) = *($7 + [1568])
	$13 = CALL $43(($7 + [1576]), ($7 + [16]))
	*($7 + [1552]) = [8806]
	*($7 + [1556]) = CALL $1([8806])
	*($7 + [8]) = *($7 + [1552])
	$4 = CALL $43(($7 + [1560]), ($7 + [8]))
	*(($7 + [1544])) = [0]
	*($7 + [1536]) = (int_64)0
	$11 = CALL $1([8815])
	$8 = ($11 <= [-16])
	$15 = ((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)1.98)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$47 }
	$12 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$46 }
	goto $label$20 
	
.LABEL $label$55
	$12 = *($0)
	*($7 + [1432]) = [8787]
	*($7 + [1436]) = CALL $1([8787])
	*($7 + [32]) = *($7 + [1432])
	$9 = *(CALL $43(($7 + [1440]), ($7 + [32])))
	$16 = CALL current_time()
	*(($7 + [1376])) = [0]
	*($7 + [1368]) = (int_64)0
	*($7 + [1360]) = $1
	$1 = ((uint_64)$16 / (uint_64)(int_64)1000000)
	$8 = ($7 + [1368])
	$11 = CALL $1([8841])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$25 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$43 }
	*(($7 + [1368])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$49
	$2 = (CASTING uint_64)(uint_32 $11)
	$14 = [1]
	if ( ((int_32)*(($4 + [16])) != (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$48
	if ( (*($13) & $14) ){ goto $label$45 }
	$8 = ($13 + [1])
	goto $label$44 
	
.LABEL $label$47
	$12 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$20 }
	
.LABEL $label$46
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$40 }
	*($7 + [1536]) = ($11 << [1])
	$8 = (($7 + [1536]) | [1])
	if ( $11 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$45
	$8 = *(($8 + [20]))
	
.LABEL $label$44
	$8 = *($8)
	if ( ((uint_32)(($8 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$57 }
	if ( ((int_32)$11 == (int_32)(($8 + [-48]) & [255])) ){ goto $label$56 }
	goto $label$21 
	
.LABEL $label$57
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 != (int_32)([0] & [255])) ){ goto $label$21 }
	
.LABEL $label$56
	$9 = *($0)
	*($7 + [1344]) = [8787]
	*($7 + [1348]) = CALL $1([8787])
	*($7 + [64]) = *($7 + [1344])
	$11 = CALL $43(($7 + [1352]), ($7 + [64]))
	*($7 + [1600]) = $9
	*($7 + [1608]) = *($11)
	*($7 + [1328]) = [8794]
	*($7 + [1332]) = CALL $1([8794])
	*($7 + [56]) = *($7 + [1328])
	$13 = CALL $43(($7 + [1336]), ($7 + [56]))
	*($7 + [1312]) = [8806]
	*($7 + [1316]) = CALL $1([8806])
	*($7 + [48]) = *($7 + [1312])
	$4 = CALL $43(($7 + [1320]), ($7 + [48]))
	*(($7 + [1544])) = [0]
	*($7 + [1536]) = (int_64)0
	$11 = CALL $1([8815])
	$8 = ($11 <= [-16])
	$15 = ((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)5.93)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$37 }
	$12 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$36 }
	goto $label$22 
	
.LABEL $label$43
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [1360]) + [16])) = $13
	*(($7 + [1372])) = $11
	*($7 + [1368]) = ($4 | [1])
	
.LABEL $label$42
	CALL memcpy($13, [8841], $11)
	
.LABEL $label$41
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [1360]) + [56]))) = $10
	*(($4 = (($7 + [1360]) + [40]))) = *(($3 + [8]))
	*($7 + [1384]) = $2
	*($7 + [1408]) = (int_64)0
	*($7 + [1424]) = $0
	*($7 + [1392]) = *($3)
	*(($11 = CALL $8([16]))) = $12
	*($11 + [8]) = $9
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [1360]) + [8])) = (int_64)0
	*((($7 + [1360]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [1360])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [1384])
	*($7 + [1736]) = *($7 + [1392])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [1408])
	*($7 + [1768]) = *($7 + [1424])
	CALL $44($12, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$58 }
	CALL $10(*($8))
	
.LABEL $label$58
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$59 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$59
	if ( ((*(($7 + [1368])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [1376])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$40
	$5 = (($11 + [16]) & [-16])
	$8 = CALL $8($5)
	*($7 + [1536]) = ($5 | [1])
	*($7 + [1544]) = $8
	*($7 + [1540]) = $11
	
.LABEL $label$39
	CALL memcpy($8, [8815], $11)
	
.LABEL $label$38
	*(($8 + $11)) = [0]
	*(($7 + [1728])) = $10
	$11 = ($7 + [1544])
	*(($7 + [1744])) = *($11)
	*($11) = [0]
	*($7 + [1712]) = $1
	*($7 + [1720]) = $12
	*($7 + [1704]) = *($0)
	*($7 + [1736]) = *($7 + [1536])
	*($7 + [1536]) = (int_64)0
	$11 = CALL $45(($7 + [1616]), ($7 + [1600]), *($13), *($4), ($7 + [1704]))
	CALL $46($11)
	$8 = *($11 + [28])
	if ( ($8 == 0) ){ goto $label$60 }
	*(($11 + [32])) = $8
	CALL $10($8)
	
.LABEL $label$60
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$61 }
	*(($11 + [20])) = $8
	CALL $10($8)
	
.LABEL $label$61
	if ( ((*(($7 + [1736])) & [1]) == 0) ){ goto $label$62 }
	CALL $10(*(($7 + [1744])))
	
.LABEL $label$62
	if ( ((*($7 + [1536]) & [1]) == 0) ){ goto $label$63 }
	CALL $10(*(($7 + [1544])))
	
.LABEL $label$63
	$9 = *($0)
	*($7 + [1520]) = [8787]
	*($7 + [1524]) = CALL $1([8787])
	*($7) = *($7 + [1520])
	$16 = *(CALL $43(($7 + [1528]), $7))
	$17 = CALL current_time()
	*(($7 + [1464])) = [0]
	*($7 + [1456]) = (int_64)0
	*($7 + [1448]) = $1
	$1 = ((uint_64)$17 / (uint_64)(int_64)1000000)
	$8 = ($7 + [1456])
	$11 = CALL $1([8832])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$24 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$66 }
	*(($7 + [1456])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [1448]) + [16])) = $13
	*(($7 + [1460])) = $11
	*($7 + [1456]) = ($4 | [1])
	
.LABEL $label$65
	CALL memcpy($13, [8832], $11)
	
.LABEL $label$64
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [1448]) + [56]))) = $10
	*(($4 = (($7 + [1448]) + [40]))) = *(($3 + [8]))
	*($7 + [1472]) = $2
	*($7 + [1496]) = $12
	*($7 + [1512]) = $0
	*($7 + [1480]) = *($3)
	*(($11 = CALL $8([16]))) = $9
	*($11 + [8]) = $16
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [1448]) + [8])) = (int_64)0
	*((($7 + [1448]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [1448])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [1472])
	*($7 + [1736]) = *($7 + [1480])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [1496])
	*($7 + [1768]) = *($7 + [1512])
	CALL $44($9, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$67 }
	CALL $10(*($8))
	
.LABEL $label$67
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$68 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$68
	if ( ((*(($7 + [1456])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [1464])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$37
	$12 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$22 }
	
.LABEL $label$36
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$71 }
	*($7 + [1536]) = ($11 << [1])
	$8 = (($7 + [1536]) | [1])
	if ( $11 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$5 = (($11 + [16]) & [-16])
	$8 = CALL $8($5)
	*($7 + [1536]) = ($5 | [1])
	*($7 + [1544]) = $8
	*($7 + [1540]) = $11
	
.LABEL $label$70
	CALL memcpy($8, [8815], $11)
	
.LABEL $label$69
	*(($8 + $11)) = [0]
	*(($7 + [1728])) = $10
	$11 = ($7 + [1544])
	*(($7 + [1744])) = *($11)
	*($11) = [0]
	*($7 + [1712]) = $1
	*($7 + [1720]) = $12
	*($7 + [1704]) = *($0)
	*($7 + [1736]) = *($7 + [1536])
	*($7 + [1536]) = (int_64)0
	$11 = CALL $45(($7 + [1616]), ($7 + [1600]), *($13), *($4), ($7 + [1704]))
	CALL $46($11)
	$8 = *($11 + [28])
	if ( ($8 == 0) ){ goto $label$72 }
	*(($11 + [32])) = $8
	CALL $10($8)
	
.LABEL $label$72
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$73 }
	*(($11 + [20])) = $8
	CALL $10($8)
	
.LABEL $label$73
	if ( ((*(($7 + [1736])) & [1]) == 0) ){ goto $label$74 }
	CALL $10(*(($7 + [1744])))
	
.LABEL $label$74
	if ( ((*($7 + [1536]) & [1]) == 0) ){ goto $label$75 }
	CALL $10(*(($7 + [1544])))
	
.LABEL $label$75
	$9 = *($0)
	*($7 + [1296]) = [8787]
	*($7 + [1300]) = CALL $1([8787])
	*($7 + [40]) = *($7 + [1296])
	$16 = *(CALL $43(($7 + [1304]), ($7 + [40])))
	$17 = CALL current_time()
	*(($7 + [1240])) = [0]
	*($7 + [1232]) = (int_64)0
	*($7 + [1224]) = $1
	$1 = ((uint_64)$17 / (uint_64)(int_64)1000000)
	$8 = ($7 + [1232])
	$11 = CALL $1([8851])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$23 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$78 }
	*(($7 + [1232])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [1224]) + [16])) = $13
	*(($7 + [1236])) = $11
	*($7 + [1232]) = ($4 | [1])
	
.LABEL $label$77
	CALL memcpy($13, [8851], $11)
	
.LABEL $label$76
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [1224]) + [56]))) = $10
	*(($4 = (($7 + [1224]) + [40]))) = *(($3 + [8]))
	*($7 + [1248]) = $2
	*($7 + [1272]) = $12
	*($7 + [1288]) = $0
	*($7 + [1256]) = *($3)
	*(($11 = CALL $8([16]))) = $9
	*($11 + [8]) = $16
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [1224]) + [8])) = (int_64)0
	*((($7 + [1224]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [1224])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [1248])
	*($7 + [1736]) = *($7 + [1256])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [1272])
	*($7 + [1768]) = *($7 + [1288])
	CALL $44($9, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$79 }
	CALL $10(*($8))
	
.LABEL $label$79
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$80 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$80
	if ( ((*(($7 + [1232])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [1240])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$26
	CALL $24(($7 + [1656]))
	
.LABEL $label$25
	CALL $24($8)
	
.LABEL $label$24
	CALL $24($8)
	
.LABEL $label$23
	CALL $24($8)
	
.LABEL $label$22
	CALL $24(($7 + [1536]))
	
.LABEL $label$21
	$12 = *($0)
	*($7 + [1208]) = [8787]
	*($7 + [1212]) = CALL $1([8787])
	*($7 + [72]) = *($7 + [1208])
	$9 = *(CALL $43(($7 + [1216]), ($7 + [72])))
	$16 = CALL current_time()
	*(($7 + [1152])) = [0]
	*($7 + [1144]) = (int_64)0
	*($7 + [1136]) = $1
	$1 = ((uint_64)$16 / (uint_64)(int_64)1000000)
	$8 = ($7 + [1144])
	$11 = CALL $1([8861])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$81 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$84 }
	*(($7 + [1144])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [1136]) + [16])) = $13
	*(($7 + [1148])) = $11
	*($7 + [1144]) = ($4 | [1])
	
.LABEL $label$83
	CALL memcpy($13, [8861], $11)
	
.LABEL $label$82
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [1136]) + [56]))) = $10
	*(($4 = (($7 + [1136]) + [40]))) = *(($3 + [8]))
	*($7 + [1160]) = $2
	*($7 + [1184]) = (int_64)0
	*($7 + [1200]) = $0
	*($7 + [1168]) = *($3)
	*(($11 = CALL $8([16]))) = $12
	*($11 + [8]) = $9
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [1136]) + [8])) = (int_64)0
	*((($7 + [1136]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [1136])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [1160])
	*($7 + [1736]) = *($7 + [1168])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [1184])
	*($7 + [1768]) = *($7 + [1200])
	CALL $44($12, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$85 }
	CALL $10(*($8))
	
.LABEL $label$85
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$86 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$86
	if ( ((*(($7 + [1144])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [1152])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$81
	CALL $24($8)
	
.LABEL $label$20
	CALL $24(($7 + [1536]))
	
.LABEL $label$19
	if ( $6 ){ goto $label$89 }
	if ( ((int_32)uint_32($5 >> [1]) == (int_32)[2]) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	if ( ((int_32)*(($4 + [16])) != (int_32)[2]) ){ goto $label$87 }
	
.LABEL $label$88
	if ( (*($13) & [1]) ){ goto $label$91 }
	$4 = ($13 + [1])
	goto $label$90 
	
.LABEL $label$91
	$4 = *(($8 + [20]))
	
.LABEL $label$90
	$4 = *($4)
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$94 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$92 }
	
.LABEL $label$93
	if ( (*($13) & [1]) ){ goto $label$96 }
	$8 = ($13 + [1])
	goto $label$95 
	
.LABEL $label$96
	$8 = *(($8 + [20]))
	
.LABEL $label$95
	$8 = *($8 + [1])
	if ( ((uint_32)(($8 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$98 }
	if ( ((int_32)$11 != (int_32)(($8 + [-48]) & [255])) ){ goto $label$97 }
	goto $label$92 
	
.LABEL $label$98
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$92 }
	
.LABEL $label$97
	$12 = *($0)
	*($7 + [984]) = [8787]
	*($7 + [988]) = CALL $1([8787])
	*($7 + [112]) = *($7 + [984])
	$9 = *(CALL $43(($7 + [992]), ($7 + [112])))
	$16 = CALL current_time()
	*(($7 + [928])) = [0]
	*($7 + [920]) = (int_64)0
	*($7 + [912]) = $1
	$1 = ((uint_64)$16 / (uint_64)(int_64)1000000)
	$8 = ($7 + [920])
	$11 = CALL $1([8861])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$99 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$102 }
	*(($7 + [920])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [912]) + [16])) = $13
	*(($7 + [924])) = $11
	*($7 + [920]) = ($4 | [1])
	
.LABEL $label$101
	CALL memcpy($13, [8861], $11)
	
.LABEL $label$100
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [912]) + [40]))) = *(($3 + [8]))
	*(($4 = (($7 + [912]) + [56]))) = $10
	*($7 + [944]) = *($3)
	*($7 + [936]) = $2
	*($7 + [960]) = (int_64)0
	*($7 + [976]) = $0
	*(($11 = CALL $8([16]))) = $12
	*($11 + [8]) = $9
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [912]) + [8])) = (int_64)0
	*((($7 + [912]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($13)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [912])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [936])
	*($7 + [1736]) = *($7 + [944])
	*((($7 + [1704]) + [56])) = *($4)
	*($7 + [1752]) = *($7 + [960])
	*($7 + [1768]) = *($7 + [976])
	CALL $44($12, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$103 }
	CALL $10(*($8))
	
.LABEL $label$103
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$104 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$104
	if ( ((*(($7 + [920])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [928])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$99
	CALL $24($8)
	
.LABEL $label$92
	$9 = *($0)
	*($7 + [1120]) = [8787]
	*($7 + [1124]) = CALL $1([8787])
	*($7 + [104]) = *($7 + [1120])
	$11 = CALL $43(($7 + [1128]), ($7 + [104]))
	*($7 + [1600]) = $9
	*($7 + [1608]) = *($11)
	*($7 + [1104]) = [8794]
	*($7 + [1108]) = CALL $1([8794])
	*($7 + [96]) = *($7 + [1104])
	$13 = CALL $43(($7 + [1112]), ($7 + [96]))
	*($7 + [1088]) = [8806]
	*($7 + [1092]) = CALL $1([8806])
	*($7 + [88]) = *($7 + [1088])
	$4 = CALL $43(($7 + [1096]), ($7 + [88]))
	*(($7 + [1544])) = [0]
	*($7 + [1536]) = (int_64)0
	$11 = CALL $1([8815])
	$8 = ($11 <= [-16])
	$15 = ((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)2.97)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$107 }
	$12 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	$12 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$105 }
	
.LABEL $label$106
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$110 }
	*($7 + [1536]) = ($11 << [1])
	$8 = (($7 + [1536]) | [1])
	if ( $11 ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	$5 = (($11 + [16]) & [-16])
	$8 = CALL $8($5)
	*($7 + [1536]) = ($5 | [1])
	*($7 + [1544]) = $8
	*($7 + [1540]) = $11
	
.LABEL $label$109
	CALL memcpy($8, [8815], $11)
	
.LABEL $label$108
	*(($8 + $11)) = [0]
	*(($7 + [1728])) = $10
	$11 = ($7 + [1544])
	*(($7 + [1744])) = *($11)
	*($11) = [0]
	*($7 + [1712]) = $1
	*($7 + [1720]) = $12
	*($7 + [1704]) = *($0)
	*($7 + [1736]) = *($7 + [1536])
	*($7 + [1536]) = (int_64)0
	$11 = CALL $45(($7 + [1616]), ($7 + [1600]), *($13), *($4), ($7 + [1704]))
	CALL $46($11)
	$8 = *($11 + [28])
	if ( ($8 == 0) ){ goto $label$111 }
	*(($11 + [32])) = $8
	CALL $10($8)
	
.LABEL $label$111
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$112 }
	*(($11 + [20])) = $8
	CALL $10($8)
	
.LABEL $label$112
	if ( ((*(($7 + [1736])) & [1]) == 0) ){ goto $label$113 }
	CALL $10(*(($7 + [1744])))
	
.LABEL $label$113
	if ( ((*($7 + [1536]) & [1]) == 0) ){ goto $label$114 }
	CALL $10(*(($7 + [1544])))
	
.LABEL $label$114
	$9 = *($0)
	*($7 + [1072]) = [8787]
	*($7 + [1076]) = CALL $1([8787])
	*($7 + [80]) = *($7 + [1072])
	$16 = *(CALL $43(($7 + [1080]), ($7 + [80])))
	$17 = CALL current_time()
	*(($7 + [1016])) = [0]
	*($7 + [1008]) = (int_64)0
	*($7 + [1000]) = $1
	$1 = ((uint_64)$17 / (uint_64)(int_64)1000000)
	$8 = ($7 + [1008])
	$11 = CALL $1([8851])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$115 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$118 }
	*(($7 + [1008])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$118
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [1000]) + [16])) = $13
	*(($7 + [1012])) = $11
	*($7 + [1008]) = ($4 | [1])
	
.LABEL $label$117
	CALL memcpy($13, [8851], $11)
	
.LABEL $label$116
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [1000]) + [56]))) = $10
	*(($4 = (($7 + [1000]) + [40]))) = *(($3 + [8]))
	*($7 + [1024]) = $2
	*($7 + [1048]) = $12
	*($7 + [1064]) = $0
	*($7 + [1032]) = *($3)
	*(($11 = CALL $8([16]))) = $9
	*($11 + [8]) = $16
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [1000]) + [8])) = (int_64)0
	*((($7 + [1000]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [1000])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [1024])
	*($7 + [1736]) = *($7 + [1032])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [1048])
	*($7 + [1768]) = *($7 + [1064])
	CALL $44($9, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$119 }
	CALL $10(*($8))
	
.LABEL $label$119
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$120 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$120
	if ( ((*(($7 + [1008])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [1016])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$115
	CALL $24($8)
	
.LABEL $label$105
	CALL $24(($7 + [1536]))
	
.LABEL $label$87
	if ( $6 ){ goto $label$123 }
	if ( ((int_32)uint_32($5 >> [1]) != (int_32)[3]) ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$123
	if ( ((int_32)*(($4 + [16])) == (int_32)[3]) ){ goto $label$121 }
	
.LABEL $label$122
	if ( $6 ){ goto $label$126 }
	if ( ((int_32)uint_32($5 >> [1]) != (int_32)[4]) ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$126
	if ( ((int_32)*(($4 + [16])) == (int_32)[4]) ){ goto $label$124 }
	
.LABEL $label$125
	if ( $6 ){ goto $label$128 }
	if ( ((int_32)uint_32($5 >> [1]) == (int_32)[5]) ){ goto $label$127 }
	goto $label$10 
	
.LABEL $label$128
	if ( ((int_32)*(($4 + [16])) != (int_32)[5]) ){ goto $label$10 }
	
.LABEL $label$127
	if ( (*($13) & [1]) ){ goto $label$130 }
	$4 = ($13 + [1])
	goto $label$129 
	
.LABEL $label$130
	$4 = *(($8 + [20]))
	
.LABEL $label$129
	$4 = *($4)
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$133 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$133
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$131 }
	
.LABEL $label$132
	if ( (*($13) & [1]) ){ goto $label$135 }
	$4 = ($13 + [1])
	goto $label$134 
	
.LABEL $label$135
	$4 = *(($8 + [20]))
	
.LABEL $label$134
	$4 = *($4 + [1])
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$137 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$136 }
	goto $label$131 
	
.LABEL $label$137
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$131 }
	
.LABEL $label$136
	if ( (*($13) & [1]) ){ goto $label$139 }
	$4 = ($13 + [1])
	goto $label$138 
	
.LABEL $label$139
	$4 = *(($8 + [20]))
	
.LABEL $label$138
	$4 = *($4 + [2])
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$141 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$140 }
	goto $label$131 
	
.LABEL $label$141
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$131 }
	
.LABEL $label$140
	if ( (*($13) & [1]) ){ goto $label$143 }
	$4 = ($13 + [1])
	goto $label$142 
	
.LABEL $label$143
	$4 = *(($8 + [20]))
	
.LABEL $label$142
	$4 = *($4 + [3])
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$145 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$144 }
	goto $label$131 
	
.LABEL $label$145
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$131 }
	
.LABEL $label$144
	if ( (*($13) & [1]) ){ goto $label$147 }
	$8 = ($13 + [1])
	goto $label$146 
	
.LABEL $label$147
	$8 = *(($8 + [20]))
	
.LABEL $label$146
	$8 = *($8 + [4])
	if ( ((uint_32)(($8 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$149 }
	if ( ((int_32)$11 != (int_32)(($8 + [-48]) & [255])) ){ goto $label$148 }
	goto $label$131 
	
.LABEL $label$149
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$131 }
	
.LABEL $label$148
	$12 = *($0)
	*($7 + [312]) = [8787]
	*($7 + [316]) = CALL $1([8787])
	*($7 + [232]) = *($7 + [312])
	$9 = *(CALL $43(($7 + [320]), ($7 + [232])))
	$16 = CALL current_time()
	*(($7 + [256])) = [0]
	*($7 + [248]) = (int_64)0
	*($7 + [240]) = $1
	$1 = ((uint_64)$16 / (uint_64)(int_64)1000000)
	$8 = ($7 + [248])
	$11 = CALL $1([8861])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$150 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$153 }
	*(($7 + [248])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$153
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [240]) + [16])) = $13
	*(($7 + [252])) = $11
	*($7 + [248]) = ($4 | [1])
	
.LABEL $label$152
	CALL memcpy($13, [8861], $11)
	
.LABEL $label$151
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [240]) + [56]))) = $10
	*(($4 = (($7 + [240]) + [40]))) = *(($3 + [8]))
	*($7 + [264]) = $2
	*($7 + [288]) = (int_64)0
	*($7 + [304]) = $0
	*($7 + [272]) = *($3)
	*(($11 = CALL $8([16]))) = $12
	*($11 + [8]) = $9
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [240]) + [8])) = (int_64)0
	*((($7 + [240]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [240])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [264])
	*($7 + [1736]) = *($7 + [272])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [288])
	*($7 + [1768]) = *($7 + [304])
	CALL $44($12, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$154 }
	CALL $10(*($8))
	
.LABEL $label$154
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$155 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$155
	if ( ((*(($7 + [248])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [256])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$150
	CALL $24($8)
	
.LABEL $label$131
	$9 = *($0)
	*($7 + [448]) = [8787]
	*($7 + [452]) = CALL $1([8787])
	*($7 + [224]) = *($7 + [448])
	$11 = CALL $43(($7 + [456]), ($7 + [224]))
	*($7 + [1600]) = $9
	*($7 + [1608]) = *($11)
	*($7 + [432]) = [8794]
	*($7 + [436]) = CALL $1([8794])
	*($7 + [216]) = *($7 + [432])
	$13 = CALL $43(($7 + [440]), ($7 + [216]))
	*($7 + [416]) = [8806]
	*($7 + [420]) = CALL $1([8806])
	*($7 + [208]) = *($7 + [416])
	$4 = CALL $43(($7 + [424]), ($7 + [208]))
	*(($7 + [1544])) = [0]
	*($7 + [1536]) = (int_64)0
	$11 = CALL $1([8815])
	$8 = ($11 <= [-16])
	$15 = ((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)1.19)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$158 }
	$12 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$158
	$12 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$156 }
	
.LABEL $label$157
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$161 }
	*($7 + [1536]) = ($11 << [1])
	$8 = (($7 + [1536]) | [1])
	if ( $11 ){ goto $label$160 }
	goto $label$159 
	
.LABEL $label$161
	$5 = (($11 + [16]) & [-16])
	$8 = CALL $8($5)
	*($7 + [1536]) = ($5 | [1])
	*($7 + [1544]) = $8
	*($7 + [1540]) = $11
	
.LABEL $label$160
	CALL memcpy($8, [8815], $11)
	
.LABEL $label$159
	*(($8 + $11)) = [0]
	*(($7 + [1728])) = $10
	$11 = ($7 + [1544])
	*(($7 + [1744])) = *($11)
	*($11) = [0]
	*($7 + [1712]) = $1
	*($7 + [1720]) = $12
	*($7 + [1704]) = *($0)
	*($7 + [1736]) = *($7 + [1536])
	*($7 + [1536]) = (int_64)0
	$11 = CALL $45(($7 + [1616]), ($7 + [1600]), *($13), *($4), ($7 + [1704]))
	CALL $46($11)
	$8 = *($11 + [28])
	if ( ($8 == 0) ){ goto $label$162 }
	*(($11 + [32])) = $8
	CALL $10($8)
	
.LABEL $label$162
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$163 }
	*(($11 + [20])) = $8
	CALL $10($8)
	
.LABEL $label$163
	if ( ((*(($7 + [1736])) & [1]) == 0) ){ goto $label$164 }
	CALL $10(*(($7 + [1744])))
	
.LABEL $label$164
	if ( ((*($7 + [1536]) & [1]) == 0) ){ goto $label$165 }
	CALL $10(*(($7 + [1544])))
	
.LABEL $label$165
	$9 = *($0)
	*($7 + [400]) = [8787]
	*($7 + [404]) = CALL $1([8787])
	*($7 + [200]) = *($7 + [400])
	$16 = *(CALL $43(($7 + [408]), ($7 + [200])))
	$17 = CALL current_time()
	*(($7 + [344])) = [0]
	*($7 + [336]) = (int_64)0
	*($7 + [328]) = $1
	$1 = ((uint_64)$17 / (uint_64)(int_64)1000000)
	$8 = ($7 + [336])
	$11 = CALL $1([8851])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$166 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$169 }
	*(($7 + [336])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$169
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [328]) + [16])) = $13
	*(($7 + [340])) = $11
	*($7 + [336]) = ($4 | [1])
	
.LABEL $label$168
	CALL memcpy($13, [8851], $11)
	
.LABEL $label$167
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [328]) + [40]))) = *(($3 + [8]))
	*(($4 = (($7 + [328]) + [56]))) = $10
	*($7 + [360]) = *($3)
	*($7 + [352]) = $2
	*($7 + [376]) = $12
	*($7 + [392]) = $0
	*(($11 = CALL $8([16]))) = $9
	*($11 + [8]) = $16
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [328]) + [8])) = (int_64)0
	*((($7 + [328]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($13)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [328])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [352])
	*($7 + [1736]) = *($7 + [360])
	*((($7 + [1704]) + [56])) = *($4)
	*($7 + [1752]) = *($7 + [376])
	*($7 + [1768]) = *($7 + [392])
	CALL $44($9, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$170 }
	CALL $10(*($8))
	
.LABEL $label$170
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$171 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$171
	if ( ((*(($7 + [336])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [344])))
	goto $label$10 
	
.LABEL $label$166
	CALL $24($8)
	
.LABEL $label$156
	CALL $24(($7 + [1536]))
	
.LABEL $label$124
	if ( (*($13) & [1]) ){ goto $label$173 }
	$4 = ($13 + [1])
	goto $label$172 
	
.LABEL $label$173
	$4 = *(($8 + [20]))
	
.LABEL $label$172
	$4 = *($4)
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$176 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$176
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$174 }
	
.LABEL $label$175
	if ( (*($13) & [1]) ){ goto $label$178 }
	$4 = ($13 + [1])
	goto $label$177 
	
.LABEL $label$178
	$4 = *(($8 + [20]))
	
.LABEL $label$177
	$4 = *($4 + [1])
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$180 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$179 }
	goto $label$174 
	
.LABEL $label$180
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$174 }
	
.LABEL $label$179
	if ( (*($13) & [1]) ){ goto $label$182 }
	$4 = ($13 + [1])
	goto $label$181 
	
.LABEL $label$182
	$4 = *(($8 + [20]))
	
.LABEL $label$181
	$4 = *($4 + [2])
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$184 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$183 }
	goto $label$174 
	
.LABEL $label$184
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$174 }
	
.LABEL $label$183
	if ( (*($13) & [1]) ){ goto $label$186 }
	$8 = ($13 + [1])
	goto $label$185 
	
.LABEL $label$186
	$8 = *(($8 + [20]))
	
.LABEL $label$185
	$8 = *($8 + [3])
	if ( ((uint_32)(($8 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$188 }
	if ( ((int_32)$11 != (int_32)(($8 + [-48]) & [255])) ){ goto $label$187 }
	goto $label$174 
	
.LABEL $label$188
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$174 }
	
.LABEL $label$187
	$12 = *($0)
	*($7 + [536]) = [8787]
	*($7 + [540]) = CALL $1([8787])
	*($7 + [192]) = *($7 + [536])
	$9 = *(CALL $43(($7 + [544]), ($7 + [192])))
	$16 = CALL current_time()
	*(($7 + [480])) = [0]
	*($7 + [472]) = (int_64)0
	*($7 + [464]) = $1
	$1 = ((uint_64)$16 / (uint_64)(int_64)1000000)
	$8 = ($7 + [472])
	$11 = CALL $1([8861])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$189 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$192 }
	*(($7 + [472])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$191 }
	goto $label$190 
	
.LABEL $label$192
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [464]) + [16])) = $13
	*(($7 + [476])) = $11
	*($7 + [472]) = ($4 | [1])
	
.LABEL $label$191
	CALL memcpy($13, [8861], $11)
	
.LABEL $label$190
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [464]) + [56]))) = $10
	*(($4 = (($7 + [464]) + [40]))) = *(($3 + [8]))
	*($7 + [488]) = $2
	*($7 + [512]) = (int_64)0
	*($7 + [528]) = $0
	*($7 + [496]) = *($3)
	*(($11 = CALL $8([16]))) = $12
	*($11 + [8]) = $9
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [464]) + [8])) = (int_64)0
	*((($7 + [464]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [464])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [488])
	*($7 + [1736]) = *($7 + [496])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [512])
	*($7 + [1768]) = *($7 + [528])
	CALL $44($12, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$193 }
	CALL $10(*($8))
	
.LABEL $label$193
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$194 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$194
	if ( ((*(($7 + [472])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [480])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$189
	CALL $24($8)
	
.LABEL $label$174
	$9 = *($0)
	*($7 + [672]) = [8787]
	*($7 + [676]) = CALL $1([8787])
	*($7 + [184]) = *($7 + [672])
	$11 = CALL $43(($7 + [680]), ($7 + [184]))
	*($7 + [1600]) = $9
	*($7 + [1608]) = *($11)
	*($7 + [656]) = [8794]
	*($7 + [660]) = CALL $1([8794])
	*($7 + [176]) = *($7 + [656])
	$13 = CALL $43(($7 + [664]), ($7 + [176]))
	*($7 + [640]) = [8806]
	*($7 + [644]) = CALL $1([8806])
	*($7 + [168]) = *($7 + [640])
	$4 = CALL $43(($7 + [648]), ($7 + [168]))
	*(($7 + [1544])) = [0]
	*($7 + [1536]) = (int_64)0
	$11 = CALL $1([8815])
	$8 = ($11 <= [-16])
	$15 = ((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)1.48)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$197 }
	$12 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$196 }
	goto $label$195 
	
.LABEL $label$197
	$12 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$195 }
	
.LABEL $label$196
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$200 }
	*($7 + [1536]) = ($11 << [1])
	$8 = (($7 + [1536]) | [1])
	if ( $11 ){ goto $label$199 }
	goto $label$198 
	
.LABEL $label$200
	$5 = (($11 + [16]) & [-16])
	$8 = CALL $8($5)
	*($7 + [1536]) = ($5 | [1])
	*($7 + [1544]) = $8
	*($7 + [1540]) = $11
	
.LABEL $label$199
	CALL memcpy($8, [8815], $11)
	
.LABEL $label$198
	*(($8 + $11)) = [0]
	*(($7 + [1728])) = $10
	$11 = ($7 + [1544])
	*(($7 + [1744])) = *($11)
	*($11) = [0]
	*($7 + [1712]) = $1
	*($7 + [1720]) = $12
	*($7 + [1704]) = *($0)
	*($7 + [1736]) = *($7 + [1536])
	*($7 + [1536]) = (int_64)0
	$11 = CALL $45(($7 + [1616]), ($7 + [1600]), *($13), *($4), ($7 + [1704]))
	CALL $46($11)
	$8 = *($11 + [28])
	if ( ($8 == 0) ){ goto $label$201 }
	*(($11 + [32])) = $8
	CALL $10($8)
	
.LABEL $label$201
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$202 }
	*(($11 + [20])) = $8
	CALL $10($8)
	
.LABEL $label$202
	if ( ((*(($7 + [1736])) & [1]) == 0) ){ goto $label$203 }
	CALL $10(*(($7 + [1744])))
	
.LABEL $label$203
	if ( ((*($7 + [1536]) & [1]) == 0) ){ goto $label$204 }
	CALL $10(*(($7 + [1544])))
	
.LABEL $label$204
	$9 = *($0)
	*($7 + [624]) = [8787]
	*($7 + [628]) = CALL $1([8787])
	*($7 + [160]) = *($7 + [624])
	$16 = *(CALL $43(($7 + [632]), ($7 + [160])))
	$17 = CALL current_time()
	*(($7 + [568])) = [0]
	*($7 + [560]) = (int_64)0
	*($7 + [552]) = $1
	$1 = ((uint_64)$17 / (uint_64)(int_64)1000000)
	$8 = ($7 + [560])
	$11 = CALL $1([8851])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$205 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$208 }
	*(($7 + [560])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$207 }
	goto $label$206 
	
.LABEL $label$208
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [552]) + [16])) = $13
	*(($7 + [564])) = $11
	*($7 + [560]) = ($4 | [1])
	
.LABEL $label$207
	CALL memcpy($13, [8851], $11)
	
.LABEL $label$206
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [552]) + [56]))) = $10
	*(($4 = (($7 + [552]) + [40]))) = *(($3 + [8]))
	*($7 + [576]) = $2
	*($7 + [600]) = $12
	*($7 + [616]) = $0
	*($7 + [584]) = *($3)
	*(($11 = CALL $8([16]))) = $9
	*($11 + [8]) = $16
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [552]) + [8])) = (int_64)0
	*((($7 + [552]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [552])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [576])
	*($7 + [1736]) = *($7 + [584])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [600])
	*($7 + [1768]) = *($7 + [616])
	CALL $44($9, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$209 }
	CALL $10(*($8))
	
.LABEL $label$209
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$210 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$210
	if ( ((*(($7 + [560])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [568])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$205
	CALL $24($8)
	
.LABEL $label$195
	CALL $24(($7 + [1536]))
	
.LABEL $label$121
	if ( (*($13) & [1]) ){ goto $label$212 }
	$4 = ($13 + [1])
	goto $label$211 
	
.LABEL $label$212
	$4 = *(($8 + [20]))
	
.LABEL $label$211
	$4 = *($4)
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$215 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$214 }
	goto $label$213 
	
.LABEL $label$215
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$213 }
	
.LABEL $label$214
	if ( (*($13) & [1]) ){ goto $label$217 }
	$4 = ($13 + [1])
	goto $label$216 
	
.LABEL $label$217
	$4 = *(($8 + [20]))
	
.LABEL $label$216
	$4 = *($4 + [1])
	if ( ((uint_32)(($4 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$219 }
	if ( ((int_32)$11 != (int_32)(($4 + [-48]) & [255])) ){ goto $label$218 }
	goto $label$213 
	
.LABEL $label$219
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$213 }
	
.LABEL $label$218
	if ( (*($13) & [1]) ){ goto $label$221 }
	$8 = ($13 + [1])
	goto $label$220 
	
.LABEL $label$221
	$8 = *(($8 + [20]))
	
.LABEL $label$220
	$8 = *($8 + [2])
	if ( ((uint_32)(($8 + [-49]) & [255]) > (uint_32)[5]) ){ goto $label$223 }
	if ( ((int_32)$11 != (int_32)(($8 + [-48]) & [255])) ){ goto $label$222 }
	goto $label$213 
	
.LABEL $label$223
	CALL eosio_assert([0], [8883])
	if ( ((int_32)$11 == (int_32)([0] & [255])) ){ goto $label$213 }
	
.LABEL $label$222
	$12 = *($0)
	*($7 + [760]) = [8787]
	*($7 + [764]) = CALL $1([8787])
	*($7 + [152]) = *($7 + [760])
	$9 = *(CALL $43(($7 + [768]), ($7 + [152])))
	$16 = CALL current_time()
	*(($7 + [704])) = [0]
	*($7 + [696]) = (int_64)0
	*($7 + [688]) = $1
	$1 = ((uint_64)$16 / (uint_64)(int_64)1000000)
	$8 = ($7 + [696])
	$11 = CALL $1([8861])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$224 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$227 }
	*(($7 + [696])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$226 }
	goto $label$225 
	
.LABEL $label$227
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [688]) + [16])) = $13
	*(($7 + [700])) = $11
	*($7 + [696]) = ($4 | [1])
	
.LABEL $label$226
	CALL memcpy($13, [8861], $11)
	
.LABEL $label$225
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [688]) + [40]))) = *(($3 + [8]))
	*(($4 = (($7 + [688]) + [56]))) = $10
	*($7 + [720]) = *($3)
	*($7 + [712]) = $2
	*($7 + [736]) = (int_64)0
	*($7 + [752]) = $0
	*(($11 = CALL $8([16]))) = $12
	*($11 + [8]) = $9
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [688]) + [8])) = (int_64)0
	*((($7 + [688]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($13)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [688])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [712])
	*($7 + [1736]) = *($7 + [720])
	*((($7 + [1704]) + [56])) = *($4)
	*($7 + [1752]) = *($7 + [736])
	*($7 + [1768]) = *($7 + [752])
	CALL $44($12, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$228 }
	CALL $10(*($8))
	
.LABEL $label$228
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$229 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$229
	if ( ((*(($7 + [696])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [704])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$224
	CALL $24($8)
	
.LABEL $label$213
	$9 = *($0)
	*($7 + [896]) = [8787]
	*($7 + [900]) = CALL $1([8787])
	*($7 + [144]) = *($7 + [896])
	$11 = CALL $43(($7 + [904]), ($7 + [144]))
	*($7 + [1600]) = $9
	*($7 + [1608]) = *($11)
	*($7 + [880]) = [8794]
	*($7 + [884]) = CALL $1([8794])
	*($7 + [136]) = *($7 + [880])
	$13 = CALL $43(($7 + [888]), ($7 + [136]))
	*($7 + [864]) = [8806]
	*($7 + [868]) = CALL $1([8806])
	*($7 + [128]) = *($7 + [864])
	$4 = CALL $43(($7 + [872]), ($7 + [128]))
	*(($7 + [1544])) = [0]
	*($7 + [1536]) = (int_64)0
	$11 = CALL $1([8815])
	$8 = ($11 <= [-16])
	$15 = ((float_64)(CASTING float_64)(int_64 $12) * (float_64)(float_64)1.98)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$231 }
	$12 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$230 }
	goto $label$6 
	
.LABEL $label$231
	$12 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$6 }
	
.LABEL $label$230
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$234 }
	*($7 + [1536]) = ($11 << [1])
	$8 = (($7 + [1536]) | [1])
	if ( $11 ){ goto $label$233 }
	goto $label$232 
	
.LABEL $label$234
	$5 = (($11 + [16]) & [-16])
	$8 = CALL $8($5)
	*($7 + [1536]) = ($5 | [1])
	*($7 + [1544]) = $8
	*($7 + [1540]) = $11
	
.LABEL $label$233
	CALL memcpy($8, [8815], $11)
	
.LABEL $label$232
	*(($8 + $11)) = [0]
	*(($7 + [1728])) = $10
	$11 = ($7 + [1544])
	*(($7 + [1744])) = *($11)
	*($11) = [0]
	*($7 + [1712]) = $1
	*($7 + [1720]) = $12
	*($7 + [1704]) = *($0)
	*($7 + [1736]) = *($7 + [1536])
	*($7 + [1536]) = (int_64)0
	$11 = CALL $45(($7 + [1616]), ($7 + [1600]), *($13), *($4), ($7 + [1704]))
	CALL $46($11)
	$8 = *($11 + [28])
	if ( ($8 == 0) ){ goto $label$235 }
	*(($11 + [32])) = $8
	CALL $10($8)
	
.LABEL $label$235
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$236 }
	*(($11 + [20])) = $8
	CALL $10($8)
	
.LABEL $label$236
	if ( ((*(($7 + [1736])) & [1]) == 0) ){ goto $label$237 }
	CALL $10(*(($7 + [1744])))
	
.LABEL $label$237
	if ( ((*($7 + [1536]) & [1]) == 0) ){ goto $label$238 }
	CALL $10(*(($7 + [1544])))
	
.LABEL $label$238
	$9 = *($0)
	*($7 + [848]) = [8787]
	*($7 + [852]) = CALL $1([8787])
	*($7 + [120]) = *($7 + [848])
	$16 = *(CALL $43(($7 + [856]), ($7 + [120])))
	$17 = CALL current_time()
	*(($7 + [792])) = [0]
	*($7 + [784]) = (int_64)0
	*($7 + [776]) = $1
	$1 = ((uint_64)$17 / (uint_64)(int_64)1000000)
	$8 = ($7 + [784])
	$11 = CALL $1([8851])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$7 }
	$0 = (CASTING uint_32)(uint_64 $1)
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$241 }
	*(($7 + [784])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$240 }
	goto $label$239 
	
.LABEL $label$241
	$4 = (($11 + [16]) & [-16])
	$13 = CALL $8($4)
	*((($7 + [776]) + [16])) = $13
	*(($7 + [788])) = $11
	*($7 + [784]) = ($4 | [1])
	
.LABEL $label$240
	CALL memcpy($13, [8851], $11)
	
.LABEL $label$239
	*(($13 + $11)) = [0]
	*(($13 = (($7 + [776]) + [56]))) = $10
	*(($4 = (($7 + [776]) + [40]))) = *(($3 + [8]))
	*($7 + [800]) = $2
	*($7 + [824]) = $12
	*($7 + [840]) = $0
	*($7 + [808]) = *($3)
	*(($11 = CALL $8([16]))) = $9
	*($11 + [8]) = $16
	$3 = *(($8 + [8]))
	$10 = *($8)
	*((($7 + [776]) + [8])) = (int_64)0
	*((($7 + [776]) + [16])) = [0]
	*(($8 = (($7 + [1704]) + [16]))) = $3
	*((($7 + [1704]) + [40])) = *($4)
	*($7 + [1616]) = $11
	$11 = ($11 + [16])
	*($7 + [1624]) = $11
	*($7 + [1620]) = $11
	*($7 + [1704]) = *($7 + [776])
	*($7 + [1712]) = $10
	*($7 + [1728]) = *($7 + [800])
	*($7 + [1736]) = *($7 + [808])
	*((($7 + [1704]) + [56])) = *($13)
	*($7 + [1752]) = *($7 + [824])
	*($7 + [1768]) = *($7 + [840])
	CALL $44($9, (int_64)4229853260945440768, ($7 + [1616]), ($7 + [1704]))
	if ( ((*($7 + [1712]) & [1]) == 0) ){ goto $label$242 }
	CALL $10(*($8))
	
.LABEL $label$242
	$11 = *($7 + [1616])
	if ( ($11 == 0) ){ goto $label$243 }
	*($7 + [1620]) = $11
	CALL $10($11)
	
.LABEL $label$243
	if ( ((*(($7 + [784])) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [792])))
	$13 = *($7 + [1688])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$13 = *($7 + [1688])
	if ( ($13 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = *($7 + [1692])
	if ( ((int_32)$8 == (int_32)$13) ){ goto $label$245 }
	
.LOOP $label$246:
	$11 = ($8 + [-12])
	if ( ((*($11) & [1]) == 0) ){ goto $label$247 }
	CALL $10(*(($8 + [-4])))
	
.LABEL $label$247
	$8 = $11
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$246 }
	$11 = *($7 + [1688])
	goto $label$244 
	
.LABEL $label$245
	$11 = $13
	
.LABEL $label$244
	*($7 + [1692]) = $13
	CALL $10($11)
	
.LABEL $label$8
	$global$0 = ($7 + [1776])
	return (unreachable)
	
.LABEL $label$7
	CALL $24($8)
	
.LABEL $label$6
	CALL $24(($7 + [1536]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $8(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $25(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $10($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $49($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $51(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL $8([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $49($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $50(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $44 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $8($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [8])
	$2 = ( *(($3 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [52])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $49($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [68]) = $7
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $67(($4 + [88]), ($4 + [80]))
	CALL $46(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $7
	CALL $10($7)
	
.LABEL $label$7
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $7
	CALL $10($7)
	
.LABEL $label$8
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [12]) = $7
	CALL $10($7)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $39(($4 + [8]))
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $65(CALL $64($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9234])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $60 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [400])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [340]) = $2
	*($3 + [336]) = $2
	$5 = ($2 + $4)
	*($3 + [344]) = $5
	*($3 + [328]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9240])
	$5 = *(($3 + [344]))
	$2 = *($3 + [340])
	
.LABEL $label$5
	CALL memcpy(($3 + [328]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [340]) = $2
	*($3 + [320]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9240])
	$5 = *((($3 + [336]) + [8]))
	$2 = *($3 + [340])
	
.LABEL $label$6
	CALL memcpy(($3 + [320]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [340]) = $2
	*($3 + [312]) = (int_64)0
	*($3 + [304]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9240])
	$5 = *(($3 + [344]))
	$2 = *($3 + [340])
	
.LABEL $label$7
	CALL memcpy(($3 + [304]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [340]) = $2
	*($3 + [256]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [340])
	
.LABEL $label$8
	CALL memcpy(($3 + [256]), $2, [8])
	*((($3 + [304]) + [8])) = *($3 + [256])
	*($3 + [340]) = ($2 + [8])
	*($3 + [296]) = [0]
	*($3 + [288]) = (int_64)0
	CALL $61(($3 + [336]), ($3 + [288]))
	$2 = *($3 + [340])
	if ( ((uint_32)(*((($3 + [336]) + [8])) - $2) > (uint_32)[31]) ){ goto $label$9 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [340])
	
.LABEL $label$9
	CALL memcpy(($3 + [256]), $2, [32])
	$2 = (*($3 + [340]) + [32])
	*($3 + [340]) = $2
	$5 = (($3 + [336]) + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[19]) ){ goto $label$10 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [340])
	
.LABEL $label$10
	CALL memcpy(($3 + [224]), $2, [20])
	*($3 + [340]) = (*($3 + [340]) + [20])
	*(($2 = (($3 + [176]) + [8]))) = *($5)
	*($3 + [176]) = *($3 + [336])
	$2 = *($2)
	*((($3 + [352]) + [8])) = $2
	*(($5 = (($3 + [368]) + [8]))) = $2
	$6 = *($3 + [176])
	*($3 + [368]) = $6
	*($3 + [352]) = $6
	$2 = *($5)
	*((($3 + [384]) + [8])) = $2
	*((($3 + [192]) + [24])) = $2
	*($3 + [192]) = $0
	*($3 + [200]) = $1
	$0 = *($3 + [368])
	*($3 + [208]) = $0
	*($3 + [384]) = $0
	*(($5 = (($3 + [160]) + [8]))) = *((($3 + [304]) + [8]))
	*($3 + [160]) = *($3 + [304])
	$0 = *($3 + [320])
	$1 = *($3 + [328])
	$2 = CALL $25(($3 + [144]), ($3 + [288]))
	*(($4 = (($3 + [112]) + [24]))) = *((($3 + [256]) + [24]))
	*(($7 = (($3 + [112]) + [16]))) = *((($3 + [256]) + [16]))
	*(($8 = (($3 + [80]) + [16]))) = *((($3 + [224]) + [16]))
	*(($9 = (($3 + [80]) + [24]))) = *((($3 + [224]) + [24]))
	*((($3 + [64]) + [8])) = *($5)
	*($3 + [120]) = *($3 + [264])
	*($3 + [112]) = *($3 + [256])
	*($3 + [80]) = *($3 + [224])
	*($3 + [88]) = *($3 + [232])
	*($3 + [64]) = *($3 + [160])
	*((($3 + [32]) + [24])) = *($4)
	*((($3 + [32]) + [16])) = *($7)
	*(($3 + [16])) = *($8)
	*(($3 + [24])) = *($9)
	*($3 + [40]) = *($3 + [120])
	*($3 + [32]) = *($3 + [112])
	*($3) = *($3 + [80])
	*($3 + [8]) = *($3 + [88])
	CALL $40(($3 + [192]), $1, $0, ($3 + [64]), $2, ($3 + [32]), $3)
	if ( (*($2) & [1]) ){ goto $label$13 }
	if ( (*($3 + [288]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [288]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($3 + [296])))
	$global$0 = ($3 + [400])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [400])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $0 ()
{
	CALL $4()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $36 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $37 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $35($1, $0, [8576])
	CALL $37()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $1($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $28($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $1([8545])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8545], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $5())
	*(CALL $5()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $23($4, ($3 + [12]), $2)
	$5 = CALL $5()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $33($3)
	
.LABEL $label$1
	CALL $34($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $35($1, $0, [8597])
	CALL $36()
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $10($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $30($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9240])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $61(*($1), ($4 + [8]))
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9240])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9240])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9240])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [40])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [48])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9240])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9240])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [56])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = ($4 + [64])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9240])
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy($0, $4, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $25(($2 + [64]), ($1 + [8]))
	*(($5 = (($2 + [48]) + [8]))) = *(($1 + [40]))
	*(($6 = (($2 + [32]) + [8]))) = *(($1 + [56]))
	*($2 + [48]) = *($1 + [32])
	*($2 + [32]) = *($1 + [48])
	$7 = *($1 + [24])
	$8 = *($1 + [64])
	*((($2 + [96]) + [8])) = *($6)
	*((($2 + [80]) + [8])) = *($5)
	*($2 + [96]) = *($2 + [32])
	*($2 + [80]) = *($2 + [48])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $25(($2 + [144]), $4)
	$9 = *((($2 + [80]) + [8]))
	*((($2 + [128]) + [8])) = $9
	$10 = *((($2 + [96]) + [8]))
	*((($2 + [112]) + [8])) = $10
	*((($2 + [16]) + [8])) = $9
	*(($2 + [8])) = $10
	$9 = *($2 + [80])
	*($2 + [128]) = $9
	$10 = *($2 + [96])
	*($2 + [112]) = $10
	*($2 + [16]) = $9
	*($2) = $10
	CALL void $0((int_32 $3), (int_64 $5), (int_32 $7), (int_64 ($2 + [16])), (int_32 $2), (int_32 $8), (int_32 $1))
	if ( (*($2 + [144]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($4 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [160])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $62($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $29($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $29($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $24($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $63 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [92]) = $2
	*($3 + [88]) = $2
	*($3 + [96]) = ($2 + $4)
	*($3 + [80]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$5
	CALL memcpy(($3 + [80]), $2, [8])
	*($3 + [92]) = (*($3 + [92]) + [8])
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	CALL $61(($3 + [88]), ($3 + [64]))
	$2 = *($3 + [92])
	$4 = (($3 + [88]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$6
	CALL memcpy(($3 + [56]), $2, [8])
	$2 = (*($3 + [92]) + [8])
	*($3 + [92]) = $2
	*($3 + [48]) = (int_64)0
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $2, [8])
	$2 = (*($3 + [92]) + [8])
	*($3 + [92]) = $2
	*($3 + [24]) = (int_64)0
	$4 = (($3 + [88]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $2, [8])
	*((($3 + [40]) + [8])) = *($3 + [24])
	$2 = (*($3 + [92]) + [8])
	*($3 + [92]) = $2
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$9
	CALL memcpy(($3 + [24]), $2, [8])
	$2 = (*($3 + [92]) + [8])
	*($3 + [92]) = $2
	*($3 + [104]) = (int_64)0
	$4 = (($3 + [88]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$10
	CALL memcpy(($3 + [104]), $2, [8])
	*((($3 + [24]) + [8])) = *($3 + [104])
	$2 = (*($3 + [92]) + [8])
	*($3 + [92]) = $2
	*($3 + [104]) = [0]
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [9240])
	$2 = *($3 + [92])
	
.LABEL $label$11
	CALL memcpy(($3 + [104]), $2, [4])
	*($3 + [92]) = (*($3 + [92]) + [4])
	$5 = *($3 + [80])
	$2 = CALL $25(($3 + [8]), ($3 + [64]))
	CALL require_auth($0)
	CALL require_recipient($0)
	CALL require_recipient($5)
	if ( (*($2) & [1]) ){ goto $label$14 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $10(*(($3 + [72])))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$12
	$global$0 = ($3 + [112])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9234])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9234])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9234])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9234])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9234])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $66(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $38 (int_32 $0)
{
}

void .FUNC $52 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($0))
	CALL require_recipient($1)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL $0()
	*($3 + [160]) = [8901]
	*($3 + [164]) = CALL $1([8901])
	*($3 + [64]) = *($3 + [160])
	CALL $43(($3 + [168]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	*($3 + [152]) = [8909]
	*($3 + [156]) = CALL $1([8909])
	*($3 + [56]) = *($3 + [152])
	CALL $43(($3 + [168]), ($3 + [56]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8915])
	
.LABEL $label$1
	*($3 + [144]) = [8794]
	*($3 + [148]) = CALL $1([8794])
	*($3 + [48]) = *($3 + [144])
	CALL $43(($3 + [168]), ($3 + [48]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [128]) = [8806]
	*($3 + [132]) = CALL $1([8806])
	*($3 + [40]) = *($3 + [128])
	CALL $43(($3 + [136]), ($3 + [40]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [112]) = [8592]
	*($3 + [116]) = CALL $1([8592])
	*($3 + [32]) = *($3 + [112])
	$4 = CALL $43(($3 + [120]), ($3 + [32]))
	*($3 + [96]) = [8612]
	*($3 + [100]) = CALL $1([8612])
	*($3 + [24]) = *($3 + [96])
	$5 = CALL $43(($3 + [104]), ($3 + [24]))
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	$6 = *($5)
	$7 = *($4)
	*($3 + [16]) = *($3 + [88])
	CALL $54($7, $6, ($3 + [16]))
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)4229853260945440768) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5445027871351373824) ){ goto $label$3 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3) = *($3 + [80])
	CALL $54($1, $1, $3)
	goto $label$3 
	
.LABEL $label$4
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [8]) = *($3 + [72])
	CALL $55($1, $1, ($3 + [8]))
	
.LABEL $label$3
	CALL $38([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [136])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [160])) = (int_64)0
	*(($4 + [152])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [224]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $56(($4 + [16]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4)
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [208])
	*($4 + [32]) = $0
	*($4 + [224]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [16])
	CALL $57(($4 + [224]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [104])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [240])
	return $2
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [176]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $58(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4)
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $59(($4 + [176]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [80])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9240])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9240])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9240])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9240])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $61(*($1), ($4 + [32]))
	$3 = ($4 + [48])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[31]) ){ goto $label$5 }
	CALL eosio_assert([0], [9240])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [32])
	*(($0 = ($0 + [4]))) = (*($0) + [32])
	$0 = ($4 + [80])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[19]) ){ goto $label$6 }
	CALL eosio_assert([0], [9240])
	$4 = *(($1 + [4]))
	
.LABEL $label$6
	CALL memcpy($0, $4, [20])
	*(($1 = ($1 + [4]))) = (*($1) + [20])
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [352])
	$global$0 = $2
	*(($3 = (($2 + [160]) + [8]))) = *(($1 + [24]))
	*($2 + [160]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $25(($2 + [144]), ($1 + [32]))
	*(($7 = (($2 + [112]) + [24]))) = *(($1 + [72]))
	*(($8 = (($2 + [112]) + [16]))) = *(($1 + [64]))
	*(($9 = (($2 + [80]) + [16]))) = *(($1 + [96]))
	*(($10 = (($2 + [80]) + [24]))) = *(($1 + [104]))
	*($2 + [120]) = *(($1 + [56]))
	*($2 + [112]) = *($1 + [48])
	*($2 + [80]) = *($1 + [80])
	*($2 + [88]) = *(($1 + [88]))
	*((($2 + [224]) + [24])) = *($10)
	*((($2 + [224]) + [16])) = *($9)
	*((($2 + [192]) + [16])) = *($8)
	*((($2 + [192]) + [24])) = *($7)
	*((($2 + [176]) + [8])) = *($3)
	*($2 + [232]) = *($2 + [88])
	*($2 + [224]) = *($2 + [80])
	*($2 + [192]) = *($2 + [112])
	*($2 + [200]) = *($2 + [120])
	*($2 + [176]) = *($2 + [160])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($7 = (($2 + [336]) + [8]))) = *((($2 + [176]) + [8]))
	*($2 + [336]) = *($2 + [176])
	$3 = CALL $25(($2 + [320]), $6)
	*(($8 = (($2 + [288]) + [24]))) = *((($2 + [192]) + [24]))
	*(($9 = (($2 + [288]) + [16]))) = *((($2 + [192]) + [16]))
	*(($10 = (($2 + [256]) + [16]))) = *((($2 + [224]) + [16]))
	*(($11 = (($2 + [256]) + [24]))) = *((($2 + [224]) + [24]))
	*((($2 + [64]) + [8])) = *($7)
	*($2 + [296]) = *($2 + [200])
	*($2 + [288]) = *($2 + [192])
	*($2 + [256]) = *($2 + [224])
	*($2 + [264]) = *($2 + [232])
	*($2 + [64]) = *($2 + [336])
	*((($2 + [32]) + [24])) = *($8)
	*((($2 + [32]) + [16])) = *($9)
	*(($2 + [16])) = *($10)
	*(($2 + [24])) = *($11)
	*($2 + [40]) = *($2 + [296])
	*($2 + [32]) = *($2 + [288])
	*($2) = *($2 + [256])
	*($2 + [8]) = *($2 + [264])
	CALL void $0((int_32 $5), (int_64 $4), (int_64 ($2 + [64])), (int_32 $3), (int_32 ($2 + [32])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [320]) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($3 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($6 + [8]))
	$global$0 = ($2 + [352])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [352])
}