(data (i32.const 8220) "failed to allocate pages\00\00\01\02\04\07\03\06\05\00passowrd version  0.01\00")
(data (i32.const 8288) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8560) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8640) "%llu\00:\00")
(data (i32.const 8656) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 8672) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 8688) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 8704) "Invalid token transfer...\00")
(data (i32.const 8730) "EOS\00")
(data (i32.const 8734) "only EOS token is allowed\00")
(data (i32.const 8760) "must buy a positive amount\00")
(data (i32.const 8787) "\e9\aa\8c\e8\af\81\e5\a4\b1\e8\b4\a5\00")
(data (i32.const 8800) "to team hot\00")
(data (i32.const 8812) "\e4\b8\8b\e6\b3\a8\e5\a4\b1\e8\b4\a5,\e9\87\91\e9\a2\9d\e9\80\80\e5\9b\9e\00")
(data (i32.const 8838) ",\00")
(data (i32.const 8840) "\e5\af\86\e7\a0\81\e8\be\93\e5\85\a5\e6\9c\89\e8\af\af:\00")
(data (i32.const 8860) "\e5\bd\93\e5\89\8d\e7\8a\b6\e6\80\81\e4\b8\8d\e8\83\bd\e4\b8\8b\e6\b3\a8,\e8\af\b7\e7\ad\89\e5\be\85\e4\b8\8b\e8\bd\ae\e5\bc\80\e5\a7\8b\00")
(data (i32.const 8907) "\e5\af\86\e7\a0\81\e5\b7\b2\e5\ad\98\e5\9c\a8\00")
(data (i32.const 8923) "\e5\bd\93\e5\89\8d\e7\8a\b6\e6\80\81\e4\b8\8d\e8\83\bd\e4\b8\8b\e6\b3\a8,\e8\af\b7\e7\a8\8d\e5\80\99\e5\86\8d\e8\af\95\00")
(data (i32.const 8964) "\e4\b8\8b\e6\b3\a8\e7\9a\84\e9\87\91\e9\a2\9d\e6\9c\89\e8\af\af,\e8\af\b7\e9\87\8d\e6\96\b0\e5\86\8d\e8\af\95\00")
(data (i32.const 9002) "token\00")
(data (i32.const 9008) "fomo\00")
(data (i32.const 9013) "to team\00")
(data (i32.const 9021) "to inviter\00")
(data (i32.const 9032) "to prize pool\00")
(data (i32.const 9046) "Win Rewards\00")
(data (i32.const 9058) "must pay with EOS token\00")
(data (i32.const 9082) "string is too long to be a valid symbol_code\00")
(data (i32.const 9127) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9180) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9229) "invalid symbol name\00")
(data (i32.const 9249) "write\00")
(data (i32.const 9255) "string is too long to be a valid name\00")
(data (i32.const 9293) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9360) "character is not in allowed character set for names\00")
(data (i32.const 9412) "error reading iterator\00")
(data (i32.const 9435) "read\00")
(data (i32.const 9440) "cannot increment end iterator\00")
(data (i32.const 9470) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9524) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9572) "cannot pass end iterator to modify\00")
(data (i32.const 9607) "object passed to modify is not in multi_index\00")
(data (i32.const 9653) "cannot modify objects in table of another contract\00")
(data (i32.const 9704) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9763) "cannot pass end iterator to erase\00")
(data (i32.const 9797) "object passed to erase is not in multi_index\00")
(data (i32.const 9842) "cannot erase objects in table of another contract\00")
(data (i32.const 9892) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9945) "cannot create objects in table of another contract\00")
(data (i32.const 9996) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10048) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10099) "get\00")
(data (i32.const 0) "x\'\00\00")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "abort" (func $fimport$2))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$7 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__multf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$10 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$13 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$18 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$20 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$25 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$29 (param i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$30 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$31 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$32 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$33 (param i32 i64 i32)))
(import "env" "action_data_size" (func $fimport$34 (result i32)))
(import "env" "read_action_data" (func $fimport$35 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$36 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$37 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$38 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$39 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$40 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$41 (param i32)))
(import "env" "current_time" (func $fimport$42 (result i64)))
(import "env" "db_store_i64" (func $fimport$43 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$44 (param i64 i64 i64 i64 i32) (result i32)))
(export "apply" (func $103))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $27 $29 $64 $47 $101 $61 $92 $96 $46)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10103))
(global $global$2 i32 (i32.const 10103))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [16]) = *(*(*($0 + [4])))
	$4 = *(($1 + [32]))
	$5 = *($0)
	$6 = [24]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$8 = ($1 + [28])
	$7 = *($1 + [24])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = $7
	$10 = *($9 + [4])
	if ( ($10 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = $10
	$10 = *($7)
	if ( $10 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = *($9 + [8])
	if ( ((int_32)*($7) == (int_32)$9) ){ goto $label$4 }
	$9 = ($9 + [8])
	
.LOOP $label$7:
	$10 = *($9)
	$9 = ($10 + [8])
	$7 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$4
	$6 = ($6 + [16])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$9 }
	$10 = CALL $1($6)
	goto $label$8 
	
.LABEL $label$9
	$10 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$8
	*($3 + [12]) = $10
	*($3 + [8]) = $10
	*($3 + [16]) = ($10 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	CALL $95(($3 + [32]), ($3 + [24]))
	$4 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($5 + [8]), (int_64)7235161911607853056, *(*($0 + [8])), $4, $10, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$4 >= (uint_64)*($5 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $2($10)
	if ( (uint_64)($4 <= *($5 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	*($1 + [16]) = *(*($3))
	$6 = *(($1 + [32]))
	$7 = *($1)
	$8 = [24]
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$10 = ($1 + [28])
	$9 = *($1 + [24])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = $9
	$3 = *($11 + [4])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = $3
	$3 = *($9)
	if ( $3 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = *($11 + [8])
	if ( ((int_32)*($9) == (int_32)$11) ){ goto $label$6 }
	$11 = ($11 + [8])
	
.LOOP $label$9:
	$3 = *($11)
	$11 = ($3 + [8])
	$9 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($9)) ){ goto $label$9 }
	
.LABEL $label$6
	$8 = ($8 + [16])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($8 <= [513]) ){ goto $label$11 }
	$3 = CALL $1($8)
	goto $label$10 
	
.LABEL $label$11
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$10
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	CALL $95(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [40]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$14 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $2($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$12 }
	
.LABEL $label$13
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$12
	$global$0 = ($5 + [48])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$5 = ($1 + [16])
	$6 = *($5)
	*($5) = (int_64)1
	*($4 + [16]) = $6
	$7 = *($1 + [48])
	$8 = ( *(($1 + [52])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [52])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [48])
	$9 = *($1)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$3 = CALL $1($7)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $7)
	*($4 + [24]) = $4
	*($4 + [40]) = $5
	*($4 + [56]) = $8
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [44]) = ($1 + [24])
	*($4 + [48]) = ($1 + [32])
	*($4 + [52]) = ($1 + [40])
	*($4 + [60]) = ($1 + [60])
	CALL $83(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($3)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [32]) = *($5)
	if ( (CALL $17(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [72])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5573886407878901760, ($4 + [24]), $9)
	*($1) = $7
	
.LABEL $label$9
	CALL db_idx64_update($7, $2, ($4 + [32]))
	
.LABEL $label$8
	$global$0 = ($4 + [64])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $135(*($1), *($0 + [12]))
}

void .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	*($1 + [40]) = (int_64)0
	$2 = *($0)
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [8]) = (int_64)0
	$3 = CALL db_find_i64($2, $2, (int_64)7235161911607853056, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $84(($1 + [16]), $3)
	if ( ((int_32)*($3 + [36]) == (int_32)($1 + [16])) ){ goto $label$4 }
	CALL eosio_assert([0], [10048])
	
.LABEL $label$4
	$2 = *($0)
	*($1 + [64]) = ($1 + [8])
	CALL $97(($1 + [16]), $3, $2, ($1 + [64]))
	$4 = *($1 + [40])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($1) = ($1 + [8])
	*($1 + [88]) = $5
	if ( ((int_64)$2 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [9945])
	
.LABEL $label$5
	*($1 + [68]) = $1
	*($1 + [64]) = ($1 + [16])
	*($1 + [72]) = ($1 + [88])
	*(($0 = CALL $7([48])) + [16]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*($0 + [24]) = ($0 + [28])
	*($0 + [36]) = ($1 + [16])
	CALL $98(($1 + [64]), $0)
	*($1 + [80]) = $0
	$2 = *($0)
	*($1 + [64]) = $2
	$4 = *($0 + [40])
	*($1 + [60]) = $4
	$6 = (($1 + [16]) + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [48]))) ){ goto $label$8 }
	*($3 + [8]) = $2
	*($3 + [16]) = $4
	*($1 + [80]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	$0 = *($1 + [80])
	*($1 + [80]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($1 + [40]), ($1 + [80]), ($1 + [64]), ($1 + [60]))
	$0 = *($1 + [80])
	*($1 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $86(($0 + [24]), *(($0 + [28])))
	CALL $9($0)
	
.LABEL $label$6
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (($1 + [16]) + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $86(($3 + [24]), *(($3 + [28])))
	CALL $9($3)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($1 + [40]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $4
	
.LABEL $label$9
	*($6) = $4
	CALL $9($0)
	
.LABEL $label$1
	$global$0 = ($1 + [96])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = *(*($3))
	$6 = ($1 + [8])
	$7 = *(($1 + [32]))
	$8 = *($1)
	$9 = [24]
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$11 = ($1 + [28])
	$10 = *($1 + [24])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = $10
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = $3
	$3 = *($10)
	if ( $3 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = *($12 + [8])
	if ( ((int_32)*($10) == (int_32)$12) ){ goto $label$6 }
	$12 = ($12 + [8])
	
.LOOP $label$9:
	$3 = *($12)
	$12 = ($3 + [8])
	$10 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($10)) ){ goto $label$9 }
	
.LABEL $label$6
	$9 = ($9 + [16])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$11 }
	$3 = CALL $1($9)
	goto $label$10 
	
.LABEL $label$11
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$10
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	CALL $95(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [40]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$14 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $2($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$12 }
	
.LABEL $label$13
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$12
	$global$0 = ($5 + [48])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)0
	$4 = ($1 + [8])
	$5 = *(($1 + [32]))
	$6 = *($0)
	$7 = [24]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [28])
	$8 = *($1 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$3:
	$10 = $8
	$11 = *($10 + [4])
	if ( ($11 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = $11
	$11 = *($8)
	if ( $11 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = *($10 + [8])
	if ( ((int_32)*($8) == (int_32)$10) ){ goto $label$4 }
	$10 = ($10 + [8])
	
.LOOP $label$7:
	$11 = *($10)
	$10 = ($11 + [8])
	$8 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($8)) ){ goto $label$7 }
	
.LABEL $label$4
	$7 = ($7 + [16])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$9 }
	$11 = CALL $1($7)
	goto $label$8 
	
.LABEL $label$9
	$11 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$8
	*($3 + [12]) = $11
	*($3 + [8]) = $11
	*($3 + [16]) = ($11 + $7)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $4
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	CALL $95(($3 + [32]), ($3 + [24]))
	$5 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($6 + [8]), (int_64)7235161911607853056, *(*($0 + [8])), $5, $11, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$5 >= (uint_64)*($6 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $2($11)
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $45($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $86(($1 + [24]), *(($1 + [28])))
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	if ( ($1 == 0) ){ goto $label$2 }
	$3 = ($0 + [32])
	*($2 + [16]) = $3
	*($2 + [8]) = (int_64)1
	CALL $49(($2 + [24]), ($2 + [16]), ($2 + [8]))
	$1 = *($2 + [28])
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2 + [8]) != (int_64)*($1 + [16])) ){ goto $label$1 }
	CALL $93($3, $1, *($0))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$3 = ($0 + [32])
	*($2 + [16]) = $3
	*($2 + [8]) = (int_64)3
	CALL $49(($2 + [24]), ($2 + [16]), ($2 + [8]))
	$1 = *($2 + [28])
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2 + [8]) != (int_64)*($1 + [16])) ){ goto $label$1 }
	CALL $94($3, $1, *($0))
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$5 = ($1 + [16])
	$6 = *($5)
	*($5) = (int_64)3
	*($4 + [16]) = $6
	$7 = *($1 + [48])
	$8 = ( *(($1 + [52])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [52])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [48])
	$9 = *($1)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$3 = CALL $1($7)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $7)
	*($4 + [24]) = $4
	*($4 + [40]) = $5
	*($4 + [56]) = $8
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [44]) = ($1 + [24])
	*($4 + [48]) = ($1 + [32])
	*($4 + [52]) = ($1 + [40])
	*($4 + [60]) = ($1 + [60])
	CALL $83(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($3)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [32]) = *($5)
	if ( (CALL $17(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [72])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5573886407878901760, ($4 + [24]), $9)
	*($1) = $7
	
.LABEL $label$9
	CALL db_idx64_update($7, $2, ($4 + [32]))
	
.LABEL $label$8
	$global$0 = ($4 + [64])
}

void .FUNC $123 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [9435])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	CALL memcpy($3, $2, [1])
	$5 = *($3)
	*(($3 + [20])) = ($2 + [1])
	*(($3 + [24])) = ($2 + $4)
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*(($3 + [68])) = [0]
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*(($3 + [120])) = $1
	*(($3 + [128])) = (int_64)-1
	*(($3 + [136])) = (int_64)0
	*(($3 + [144])) = [0]
	*(($3 + [160])) = $1
	*(($3 + [168])) = (int_64)-1
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*($3 + [112]) = $0
	*($3 + [152]) = $0
	CALL $92($3, ((int_32)$5 != (int_32)[0]))
	CALL $112($3)
	$global$0 = ($3 + [192])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert([0], [9435])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
}

void .FUNC $122 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [224])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [216]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9435])
	
.LABEL $label$5
	CALL memcpy(($3 + [216]), $2, [8])
	*($3 + [208]) = (int_64)0
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9435])
	
.LABEL $label$6
	$6 = ($2 + $4)
	CALL memcpy(($3 + [208]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9435])
	
.LABEL $label$7
	CALL memcpy(($3 + [207]), $5, [1])
	*(($3 + [32])) = $6
	*(($3 + [48])) = $1
	*(($3 + [56])) = (int_64)-1
	*(($3 + [64])) = (int_64)0
	*(($3 + [72])) = [0]
	*(($3 + [76])) = [0]
	*(($3 + [88])) = $1
	*(($3 + [96])) = (int_64)-1
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [17])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [40]) = $0
	*($3 + [80]) = $0
	*(($3 + [128])) = $1
	*(($3 + [136])) = (int_64)-1
	*(($3 + [144])) = (int_64)0
	*(($3 + [152])) = [0]
	*(($3 + [168])) = $1
	*(($3 + [176])) = (int_64)-1
	*(($3 + [184])) = (int_64)0
	*(($3 + [192])) = [0]
	*($3 + [120]) = $0
	*($3 + [160]) = $0
	CALL $64(($3 + [8]), *($3 + [216]), *($3 + [208]), *($3 + [207]))
	CALL $112(($3 + [8]))
	$global$0 = ($3 + [224])
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9524])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5573886407878901760)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9470])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9470])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $77(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $119(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9435])
	$1 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $133(*($1), *($0 + [12]))
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $86($1, *($1 + [4]))
	$3 = ($1 + [4])
	*($1) = $3
	$4 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($5 <= *($6)) ){ goto $label$2 }
	CALL eosio_assert([0], [10099])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	$8 = *($5)
	$9 = ($5 + [1])
	*(($0 + [4])) = $9
	$5 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $5)))
	$7 = ($5 + [7])
	$5 = $9
	if ( ($8 & [128]) ){ goto $label$1 }
	$10 = (CASTING uint_32)(uint_64 $4)
	if ( ($10 == 0) ){ goto $label$4 }
	$11 = ($1 + [4])
	$6 = [0]
	$12 = ($0 + [8])
	if ( ((uint_32)(*($12) - $9) > (uint_32)[7]) ){ goto $label$5 }
	$13 = [7]
	goto $label$3 
	
.LABEL $label$5
	$13 = [0]
	goto $label$3 
	
.LABEL $label$4
	$13 = [8]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$40 
	
.LABEL $label$42
	$9 = *($7)
	if ( ((uint_32)(*($12) - $9) > (uint_32)[7]) ){ goto $label$22 }
	$13 = [7]
	goto $label$6 
	
.LABEL $label$41
	CALL eosio_assert([0], [9435])
	$9 = *(($0 + [4]))
	$13 = [0]
	goto $label$6 
	
.LABEL $label$40
	CALL memcpy(($2 + [8]), $9, [8])
	$5 = (*($7) + [8])
	*(($7 = ($0 + [4]))) = $5
	if ( ((uint_32)(*($12) - $5) > (uint_32)[7]) ){ goto $label$23 }
	$13 = [18]
	goto $label$6 
	
.LABEL $label$39
	CALL eosio_assert([0], [9435])
	$5 = *($7)
	$13 = [1]
	goto $label$6 
	
.LABEL $label$38
	CALL memcpy($2, $5, [8])
	*($7) = (*($7) + [8])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$21 }
	$13 = [2]
	goto $label$6 
	
.LABEL $label$37
	$9 = $11
	$14 = *($5 + [16])
	$4 = *($2 + [8])
	if ( ((uint_64)$4 >= (uint_64)$14) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$36
	$9 = $5
	$5 = $8
	$14 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$14) ){ goto $label$18 }
	$13 = [15]
	goto $label$6 
	
.LABEL $label$35
	$8 = *($5)
	if ( $8 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$34
	if ( ((uint_64)$14 >= (uint_64)$4) ){ goto $label$16 }
	$13 = [12]
	goto $label$6 
	
.LABEL $label$33
	$9 = ($5 + [4])
	$8 = *($5 + [4])
	if ( ($8 == 0) ){ goto $label$17 }
	$13 = [13]
	goto $label$6 
	
.LABEL $label$32
	$5 = $9
	goto $label$7 
	
.LABEL $label$31
	$5 = $3
	$9 = $3
	$13 = [4]
	goto $label$6 
	
.LABEL $label$30
	if ( (*($9) == 0) ){ goto $label$15 }
	$13 = [5]
	goto $label$6 
	
.LABEL $label$29
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$28
	$9 = $5
	if ( *($9) ){ goto $label$14 }
	$13 = [9]
	goto $label$6 
	
.LABEL $label$27
	*(($8 = CALL $7([32]))) = (int_64)0
	*($8 + [8]) = $5
	*($9) = $8
	*($8 + [16]) = *($2 + [8])
	*($8 + [24]) = *($2)
	$5 = *(*($1))
	if ( ($5 == 0) ){ goto $label$10 }
	$13 = [10]
	goto $label$6 
	
.LABEL $label$26
	*($1) = $5
	$8 = *($9)
	$13 = [11]
	goto $label$6 
	
.LABEL $label$25
	CALL $134(*(($1 + [4])), $8)
	*(($5 = ($1 + [8]))) = (*($5) + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$11 }
	$13 = [8]
	goto $label$6 
	
.LABEL $label$24
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$23
	$13 = [1]
	goto $label$6 
	
.LABEL $label$22
	$13 = [0]
	goto $label$6 
	
.LABEL $label$21
	$13 = [17]
	goto $label$6 
	
.LABEL $label$20
	$13 = [15]
	goto $label$6 
	
.LABEL $label$19
	$13 = [3]
	goto $label$6 
	
.LABEL $label$18
	$13 = [3]
	goto $label$6 
	
.LABEL $label$17
	$13 = [4]
	goto $label$6 
	
.LABEL $label$16
	$13 = [4]
	goto $label$6 
	
.LABEL $label$15
	$13 = [9]
	goto $label$6 
	
.LABEL $label$14
	$13 = [5]
	goto $label$6 
	
.LABEL $label$13
	$13 = [8]
	goto $label$6 
	
.LABEL $label$12
	$13 = [6]
	goto $label$6 
	
.LABEL $label$11
	$13 = [6]
	goto $label$6 
	
.LABEL $label$10
	$13 = [11]
	goto $label$6 
	
.LABEL $label$9
	$13 = [16]
	goto $label$6 
	
.LABEL $label$8
	$13 = [14]
	goto $label$6 
	
.LABEL $label$7
	$13 = [14]
	goto $label$6 
	return $13
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $121 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [368])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [308]) = $2
	*($3 + [304]) = $2
	$5 = ($2 + $4)
	*($3 + [312]) = $5
	*($3 + [296]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9435])
	$5 = *(($3 + [312]))
	$2 = *($3 + [308])
	
.LABEL $label$5
	CALL memcpy(($3 + [296]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [308]) = $2
	*($3 + [288]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9435])
	$5 = *((($3 + [304]) + [8]))
	$2 = *($3 + [308])
	
.LABEL $label$6
	CALL memcpy(($3 + [288]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [308]) = $2
	*($3 + [280]) = (int_64)0
	*($3 + [272]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9435])
	$5 = *(($3 + [312]))
	$2 = *($3 + [308])
	
.LABEL $label$7
	CALL memcpy(($3 + [272]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [308]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9435])
	$2 = *($3 + [308])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [272]) + [8]))) = *($3 + [64])
	*($3 + [308]) = ($2 + [8])
	*($3 + [264]) = [0]
	*($3 + [256]) = (int_64)0
	CALL $119(($3 + [304]), ($3 + [256]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [304]) + [8]))
	*($3 + [48]) = *($3 + [304])
	$2 = *($2)
	*((($3 + [320]) + [8])) = $2
	*(($4 = (($3 + [336]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [336]) = $6
	*($3 + [320]) = $6
	$2 = *($4)
	*((($3 + [352]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$6 = *($3 + [336])
	*($3 + [80]) = $6
	*($3 + [352]) = $6
	*(($3 + [104])) = $1
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [132])) = [0]
	*(($3 + [144])) = $1
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*(($3 + [184])) = $1
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = (int_64)0
	*(($3 + [208])) = [0]
	*($3 + [96]) = $0
	*($3 + [136]) = $0
	*($3 + [176]) = $0
	*($3 + [216]) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [224])) = $1
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [272])
	$0 = *($3 + [288])
	$1 = *($3 + [296])
	$2 = CALL $32(($3 + [16]), ($3 + [256]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $61(($3 + [64]), $1, $0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*($2 + [8]))
	
.LABEL $label$9
	CALL $112(($3 + [64]))
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($3 + [264])))
	
.LABEL $label$10
	$global$0 = ($3 + [368])
}

void .FUNC $136 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$5 = CALL $32($6, $5)
	$4 = CALL $32(($6 + [16]), $4)
	$3 = CALL $32(($6 + [32]), $3)
	CALL void $8((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$6 }
	if ( (*($4) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $9(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $9(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$2
	CALL $9(*($3 + [8]))
	$global$0 = ($6 + [48])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10099])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $70($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9435])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $9($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9249])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5573886407878901760, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [64]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [10048])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $77($7, CALL $fimport$28(*($7), *($7 + [8]), (int_64)5573886407878901760, $6))
	if ( ((int_32)*($4 + [64]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [10048])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [240])
	$global$0 = $5
	*($5 + [200]) = $1
	*((($5 + [160]) + [32])) = [0]
	*($5 + [176]) = (int_64)-1
	*($5 + [184]) = (int_64)0
	*($5 + [196]) = [0]
	$6 = *($0)
	*($5 + [160]) = $6
	*($5 + [168]) = $6
	*((($5 + [120]) + [32])) = [0]
	*($5 + [128]) = $6
	*($5 + [120]) = $6
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	*($5 + [156]) = [0]
	*($5 + [112]) = ($5 + [160])
	*($5 + [88]) = (int_64)2
	CALL $49(($5 + [224]), ($5 + [112]), ($5 + [88]))
	$1 = *($5 + [228])
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ((int_64)*($5 + [88]) != (int_64)*($1 + [16])) ){ goto $label$12 }
	$6 = *($5 + [224])
	*($5 + [104]) = $6
	if ( (uint_64)($6 <= (int_64)4294967296) ){ goto $label$11 }
	*($5 + [96]) = [0]
	*($5 + [88]) = (int_64)0
	*(($5 + [232])) = [0]
	*($5 + [224]) = (int_64)0
	$1 = CALL $15([8645])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($5 + [224]) = ($1 << [1])
	$7 = (($5 + [224]) | [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	*($5 + [108]) = [0]
	*($5 + [104]) = ($5 + [112])
	
.LABEL $label$11
	$6 = *($0)
	*($5 + [76]) = $2
	*($5 + [72]) = ($5 + [160])
	*($5 + [88]) = $6
	if ( ((int_64)*($5 + [160]) == (int_64)CALL current_receiver()) ){ goto $label$13 }
	CALL eosio_assert([0], [9945])
	
.LABEL $label$13
	*($5 + [228]) = ($5 + [72])
	*($5 + [224]) = ($5 + [160])
	*($5 + [232]) = ($5 + [88])
	*(($1 = CALL $7([80])) + [48 align=4]) = (int_64)0
	*($1 + [56 align=4]) = (int_64)0
	*($1 + [64]) = ($5 + [160])
	CALL $50(($5 + [224]), $1)
	*($5 + [16]) = $1
	$6 = *($1)
	*($5 + [224]) = $6
	$4 = *($1 + [68])
	*($5 + [216]) = $4
	$7 = ($5 + [188])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [192]))) ){ goto $label$14 }
	*($3 + [8]) = $6
	*($3 + [16]) = $4
	*($5 + [16]) = [0]
	*($3) = $1
	*($7) = ($3 + [24])
	$1 = *($5 + [16])
	*($5 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$14
	CALL $51(($5 + [184]), ($5 + [16]), ($5 + [224]), ($5 + [216]))
	$1 = *($5 + [16])
	*($5 + [16]) = [0]
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$10
	$8 = (($1 + [16]) & [-16])
	$7 = CALL $7($8)
	*($5 + [224]) = ($8 | [1])
	*($5 + [232]) = $7
	*($5 + [228]) = $1
	
.LABEL $label$9
	CALL memcpy($7, [8645], $1)
	
.LABEL $label$8
	*(($7 + $1)) = [0]
	CALL $52($1, $3, ($5 + [88]), ($5 + [224]))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*($5 + [232]))
	
.LABEL $label$15
	*($5 + [80]) = [0]
	*($5 + [72]) = (int_64)0
	*(($5 + [232])) = [0]
	*($5 + [224]) = (int_64)0
	$1 = CALL $15([8645])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$18 }
	*($5 + [224]) = ($1 << [1])
	$3 = (($5 + [224]) | [1])
	if ( $1 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = (($1 + [16]) & [-16])
	$3 = CALL $7($7)
	*($5 + [224]) = ($7 | [1])
	*($5 + [232]) = $3
	*($5 + [228]) = $1
	
.LABEL $label$17
	CALL memcpy($3, [8645], $1)
	
.LABEL $label$16
	*(($3 + $1)) = [0]
	CALL $52($1, $4, ($5 + [72]), ($5 + [224]))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$19 }
	CALL $9(*($5 + [232]))
	
.LABEL $label$19
	$1 = *($5 + [72])
	if ( ((int_32)*($5 + [76]) == (int_32)$1) ){ goto $label$21 }
	$9 = (($5 + [32]) | [1])
	$7 = (($5 + [32]) + [8])
	$3 = [0]
	$8 = [0]
	
.LOOP $label$22:
	$1 = ($1 + $3)
	if ( (*($1) & [1]) ){ goto $label$24 }
	$1 = ($1 + [1])
	goto $label$23 
	
.LABEL $label$24
	$1 = *(($1 + [8]))
	
.LABEL $label$23
	$10 = CALL $23($1, ($5 + [68]), [10])
	$1 = (*($5 + [88]) + $3)
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$26 }
	$4 = uint_32($4 >> [1])
	$1 = ($1 + [1])
	goto $label$25 
	
.LABEL $label$26
	$4 = *(($1 + [4]))
	$1 = *(($1 + [8]))
	
.LABEL $label$25
	*($5 + [52]) = $4
	*($5 + [48]) = $1
	*($5 + [8]) = *($5 + [48])
	CALL $53(($5 + [56]), ($5 + [8]))
	*($7) = [0]
	*($5 + [32]) = (int_64)0
	$1 = CALL $15([9002])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$29 }
	*($5 + [32]) = ($1 << [1])
	$4 = $9
	if ( $1 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$11 = (($1 + [16]) & [-16])
	$4 = CALL $7($11)
	*($7) = $4
	*($5 + [32]) = ($11 | [1])
	*($5 + [36]) = $1
	
.LABEL $label$28
	CALL memcpy($4, [9002], $1)
	
.LABEL $label$27
	*(($4 + $1)) = [0]
	CALL $54($1, (int_64)4157547406398120320, *($5 + [56]), $10, ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$30 }
	CALL $9(*($7))
	
.LABEL $label$30
	$3 = ($3 + [12])
	$1 = *($5 + [72])
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)((int_32)(*($5 + [76]) - $1) / (int_32)[12])) ){ goto $label$22 }
	
.LABEL $label$21
	$6 = *($0)
	$1 = *($5 + [108])
	*($5 + [224]) = ($5 + [200])
	CALL $55(($5 + [160]), $1, $6, ($5 + [224]))
	$6 = *($0)
	*($5 + [24]) = $2
	*($5 + [20]) = ($5 + [104])
	*($5 + [16]) = ($5 + [160])
	*($5 + [216]) = $6
	if ( ((int_64)*($5 + [160]) == (int_64)CALL current_receiver()) ){ goto $label$31 }
	CALL eosio_assert([0], [9945])
	
.LABEL $label$31
	*($5 + [228]) = ($5 + [16])
	*($5 + [224]) = ($5 + [160])
	*($5 + [232]) = ($5 + [216])
	*(($1 = CALL $7([80])) + [48 align=4]) = (int_64)0
	*($1 + [56 align=4]) = (int_64)0
	*($1 + [64]) = ($5 + [160])
	CALL $56(($5 + [224]), $1)
	*($5 + [208]) = $1
	$6 = *($1)
	*($5 + [224]) = $6
	$4 = *($1 + [68])
	*($5 + [204]) = $4
	$7 = ($5 + [188])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [192]))) ){ goto $label$33 }
	*($3 + [8]) = $6
	*($3 + [16]) = $4
	*($5 + [208]) = [0]
	*($3) = $1
	*($7) = ($3 + [24])
	$1 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($1 == 0) ){ goto $label$32 }
	goto $label$5 
	
.LABEL $label$33
	CALL $51(($5 + [184]), ($5 + [208]), ($5 + [224]), ($5 + [204]))
	$1 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $1 ){ goto $label$5 }
	
.LABEL $label$32
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$20
	CALL $31(($5 + [32]))
	
.LABEL $label$7
	CALL $31(($5 + [224]))
	
.LABEL $label$6
	CALL $31(($5 + [224]))
	
.LABEL $label$5
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$34 }
	CALL $9(*(($1 + [56])))
	
.LABEL $label$34
	CALL $9($1)
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = *($5 + [76])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$36 }
	
.LOOP $label$37:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$38 }
	CALL $9(*(($3 + [-4])))
	
.LABEL $label$38
	$3 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$37 }
	$1 = *($5 + [72])
	goto $label$35 
	
.LABEL $label$36
	$1 = $4
	
.LABEL $label$35
	*($5 + [76]) = $4
	CALL $9($1)
	
.LABEL $label$3
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$1 }
	$3 = *($5 + [92])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$40 }
	
.LOOP $label$41:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$42 }
	CALL $9(*(($3 + [-4])))
	
.LABEL $label$42
	$3 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$41 }
	$1 = *($5 + [88])
	goto $label$39 
	
.LABEL $label$40
	$1 = $4
	
.LABEL $label$39
	*($5 + [92]) = $4
	CALL $9($1)
	goto $label$1 
	
.LABEL $label$2
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$43 }
	CALL $9(*(($1 + [56])))
	
.LABEL $label$43
	CALL $9($1)
	
.LABEL $label$1
	CALL $57($0)
	*($5 + [232]) = [0]
	*($5 + [224]) = (int_64)0
	$1 = CALL db_lowerbound_i64(*($5 + [120]), *((($5 + [120]) + [8])), (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$45 }
	$1 = CALL $58(($5 + [120]), $1)
	$4 = (($5 + [224]) + [8])
	$3 = *($5 + [228])
	if ( ((int_32)$3 != (int_32)*($4)) ){ goto $label$46 }
	$12 = [3]
	goto $label$44 
	
.LABEL $label$46
	$12 = [0]
	goto $label$44 
	
.LABEL $label$45
	$12 = [4]
	
.LABEL $label$44
	
.LOOP $label$47:
	goto $label$118 
	
.LABEL $label$119
	$1 = CALL $58(($5 + [120]), $1)
	$3 = *($5 + [228])
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$75 }
	$12 = [0]
	goto $label$47 
	
.LABEL $label$118
	*($3) = *($1)
	*($5 + [228]) = ($3 + [8])
	goto $label$74 
	
.LABEL $label$117
	CALL $59(($5 + [224]), $1)
	$12 = [1]
	goto $label$47 
	
.LABEL $label$116
	$1 = CALL db_next_i64(*($1 + [64]), ($5 + [88]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$73 }
	$12 = [4]
	goto $label$47 
	
.LABEL $label$115
	$10 = *($5 + [228])
	$8 = *($5 + [224])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$72 }
	$12 = [5]
	goto $label$47 
	
.LABEL $label$114
	$0 = ($5 + [148])
	$11 = ($5 + [144])
	$2 = (($5 + [120]) + [8])
	$12 = [6]
	goto $label$47 
	
.LABEL $label$113
	$6 = *($8)
	$3 = *($0)
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$68 }
	$12 = [7]
	goto $label$47 
	
.LABEL $label$112
	$1 = ($3 + [-24])
	$4 = *($1)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$67 }
	$12 = [8]
	goto $label$47 
	
.LABEL $label$111
	$3 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$69 }
	goto $label$70 
	
.LABEL $label$110
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$66 }
	$12 = [41]
	goto $label$47 
	
.LABEL $label$109
	if ( ((int_32)*($4 + [60]) == (int_32)($5 + [120])) ){ goto $label$48 }
	$12 = [42]
	goto $label$47 
	
.LABEL $label$108
	CALL eosio_assert([0], [10048])
	$12 = [43]
	goto $label$47 
	
.LABEL $label$107
	if ( $4 ){ goto $label$62 }
	goto $label$63 
	
.LABEL $label$106
	$1 = CALL db_find_i64(*($5 + [120]), *($2), (int_64)5320316864482508800, $6)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$65 }
	$12 = [10]
	goto $label$47 
	
.LABEL $label$105
	$4 = CALL $58(($5 + [120]), $1)
	if ( ((int_32)*($4 + [60]) == (int_32)($5 + [120])) ){ goto $label$64 }
	$12 = [11]
	goto $label$47 
	
.LABEL $label$104
	CALL eosio_assert([0], [10048])
	$12 = [12]
	goto $label$47 
	
.LABEL $label$103
	$1 = CALL db_next_i64(*($4 + [64]), ($5 + [88]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$61 }
	$12 = [13]
	goto $label$47 
	
.LABEL $label$102
	CALL $58(($5 + [120]), $1)
	$12 = [14]
	goto $label$47 
	
.LABEL $label$101
	CALL $60(($5 + [120]), $4)
	$12 = [15]
	goto $label$47 
	
.LABEL $label$100
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$71 }
	$12 = [16]
	goto $label$47 
	
.LABEL $label$99
	$8 = *($5 + [224])
	$12 = [17]
	goto $label$47 
	
.LABEL $label$98
	if ( ($8 == 0) ){ goto $label$60 }
	$12 = [18]
	goto $label$47 
	
.LABEL $label$97
	*($5 + [228]) = $8
	CALL $9($8)
	$12 = [19]
	goto $label$47 
	
.LABEL $label$96
	$4 = *($5 + [144])
	if ( ($4 == 0) ){ goto $label$59 }
	$12 = [20]
	goto $label$47 
	
.LABEL $label$95
	$7 = ($5 + [148])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$58 }
	$12 = [21]
	goto $label$47 
	
.LABEL $label$94
	$12 = [22]
	goto $label$47 
	
.LABEL $label$93
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$56 }
	$12 = [23]
	goto $label$47 
	
.LABEL $label$92
	CALL $9($3)
	$12 = [24]
	goto $label$47 
	
.LABEL $label$91
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$57 }
	$12 = [25]
	goto $label$47 
	
.LABEL $label$90
	$1 = *(($5 + [144]))
	goto $label$55 
	
.LABEL $label$89
	$1 = $4
	$12 = [26]
	goto $label$47 
	
.LABEL $label$88
	*($7) = $4
	CALL $9($1)
	$12 = [27]
	goto $label$47 
	
.LABEL $label$87
	$4 = *($5 + [184])
	if ( ($4 == 0) ){ goto $label$54 }
	$12 = [28]
	goto $label$47 
	
.LABEL $label$86
	$7 = ($5 + [188])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$53 }
	$12 = [29]
	goto $label$47 
	
.LABEL $label$85
	$12 = [30]
	goto $label$47 
	
.LABEL $label$84
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$51 }
	$12 = [31]
	goto $label$47 
	
.LABEL $label$83
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$50 }
	$12 = [32]
	goto $label$47 
	
.LABEL $label$82
	CALL $9(*(($3 + [56])))
	$12 = [33]
	goto $label$47 
	
.LABEL $label$81
	CALL $9($3)
	$12 = [34]
	goto $label$47 
	
.LABEL $label$80
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$52 }
	$12 = [35]
	goto $label$47 
	
.LABEL $label$79
	$1 = *(($5 + [184]))
	goto $label$49 
	
.LABEL $label$78
	$1 = $4
	$12 = [36]
	goto $label$47 
	
.LABEL $label$77
	*($7) = $4
	CALL $9($1)
	$12 = [37]
	goto $label$47 
	
.LABEL $label$76
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$75
	$12 = [3]
	goto $label$47 
	
.LABEL $label$74
	$12 = [1]
	goto $label$47 
	
.LABEL $label$73
	$12 = [2]
	goto $label$47 
	
.LABEL $label$72
	$12 = [17]
	goto $label$47 
	
.LABEL $label$71
	$12 = [6]
	goto $label$47 
	
.LABEL $label$70
	$12 = [9]
	goto $label$47 
	
.LABEL $label$69
	$12 = [7]
	goto $label$47 
	
.LABEL $label$68
	$12 = [9]
	goto $label$47 
	
.LABEL $label$67
	$12 = [40]
	goto $label$47 
	
.LABEL $label$66
	$12 = [9]
	goto $label$47 
	
.LABEL $label$65
	$12 = [15]
	goto $label$47 
	
.LABEL $label$64
	$12 = [12]
	goto $label$47 
	
.LABEL $label$63
	$12 = [15]
	goto $label$47 
	
.LABEL $label$62
	$12 = [12]
	goto $label$47 
	
.LABEL $label$61
	$12 = [14]
	goto $label$47 
	
.LABEL $label$60
	$12 = [19]
	goto $label$47 
	
.LABEL $label$59
	$12 = [27]
	goto $label$47 
	
.LABEL $label$58
	$12 = [39]
	goto $label$47 
	
.LABEL $label$57
	$12 = [22]
	goto $label$47 
	
.LABEL $label$56
	$12 = [24]
	goto $label$47 
	
.LABEL $label$55
	$12 = [26]
	goto $label$47 
	
.LABEL $label$54
	$12 = [37]
	goto $label$47 
	
.LABEL $label$53
	$12 = [38]
	goto $label$47 
	
.LABEL $label$52
	$12 = [30]
	goto $label$47 
	
.LABEL $label$51
	$12 = [34]
	goto $label$47 
	
.LABEL $label$50
	$12 = [33]
	goto $label$47 
	
.LABEL $label$49
	$12 = [36]
	goto $label$47 
	
.LABEL $label$48
	$12 = [43]
	goto $label$47 
	(unreachable)
	(unreachable)
	(unreachable)
	$12
}

void .FUNC $125 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [20])) = $4
	*(($3 + [24])) = ($4 + $5)
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*(($3 + [68])) = [0]
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $4
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*(($3 + [120])) = $1
	*(($3 + [128])) = (int_64)-1
	*(($3 + [136])) = (int_64)0
	*(($3 + [144])) = [0]
	*(($3 + [160])) = $1
	*(($3 + [168])) = (int_64)-1
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*($3 + [112]) = $0
	*($3 + [152]) = $0
	CALL $101($3)
	CALL $112($3)
	$global$0 = ($3 + [192])
}

int_64 .FUNC $43 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $42 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $41($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $25($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [8672])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [8656]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [8688]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $24($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $41 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $37(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $30(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8640], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $37(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $37(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	$6 = ($global$0 - [48])
	$global$0 = $6
	CALL require_auth(*($0))
	$5 = CALL $32($6, $5)
	$4 = CALL $32(($6 + [16]), $4)
	$3 = CALL $32(($6 + [32]), $3)
	CALL $48($0, $2, $3, $4, $5)
	if ( (*($5) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $9(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $9(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$1
	CALL $9(*($3 + [8]))
	$global$0 = ($6 + [48])
}

void .FUNC $46 (int_32 $0)
{
	CALL prints([8254])
}

void .FUNC $45 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
}

void .FUNC $124 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [20])) = $4
	*(($3 + [24])) = ($4 + $5)
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*(($3 + [68])) = [0]
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $4
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*(($3 + [120])) = $1
	*(($3 + [128])) = (int_64)-1
	*(($3 + [136])) = (int_64)0
	*(($3 + [144])) = [0]
	*(($3 + [160])) = $1
	*(($3 + [168])) = (int_64)-1
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*($3 + [112]) = $0
	*($3 + [152]) = $0
	CALL $96($3)
	CALL $112($3)
	$global$0 = ($3 + [192])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [24])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [9435])
	$1 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	float_64 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	$7 = *($1)
	$8 = ((float_64)CALL $43(((float_64)((float_64)(CASTING float_64)(int_32 *(*($3))) / (float_64)*(*($3 + [4]))) * (float_64)*(*($3 + [8])))) + (float_64)CALL $43(((float_64)((float_64)(CASTING float_64)(int_32 *(*($3 + [12]))) / (float_64)*(*($3 + [16]))) * (float_64)*(*($3 + [20])))))
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)2147483648) ){ goto $label$4 }
	$9 = [-2147483648]
	goto $label$3 
	
.LABEL $label$4
	$9 = (CASTING int_32)(float_64 $8)
	
.LABEL $label$3
	*(*($3 + [24])) = $9
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)(CASTING int_64)(int_32 $9))
	$9 = ($1 + [48])
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$5 }
	CALL eosio_assert([0], [9704])
	
.LABEL $label$5
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-7])
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [68]) = $9
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [16])
	*($5 + [52]) = ($1 + [24])
	*($5 + [56]) = ($1 + [28])
	*($5 + [60]) = ($1 + [32])
	*($5 + [64]) = ($1 + [40])
	*($5 + [72]) = ($1 + [56])
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $3, [57])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($6)
	if ( (CALL $17(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [68])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5320316864482508800, ($5 + [32]), $7)
	*(($1 + [68])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $18($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9412])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([72])) + [56]) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [60]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	*($3 + [60]) = ($5 + [32])
	*($3 + [64]) = ($5 + [40])
	*($3 + [68]) = ($5 + [48])
	*($3 + [72]) = ($5 + [56])
	CALL $128(($3 + [40]), ($3 + [32]))
	*($5 + [68]) = [-1]
	*($5 + [64]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $82(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL $7(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $45($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $9($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)5573886407878901760, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $77($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $130(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9996])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1 + [16]) = (int_64)1
	*($1) = $7
	*($1 + [24]) = (int_64)50000
	*($1 + [32]) = (int_64)20000
	*($1 + [40]) = (int_64)0
	$8 = ($1 + [48])
	CALL $34($8, *($5 + [4]))
	*($1 + [60]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = *($1 + [48])
	$5 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [52])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [40])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	$11 = ($1 + [16])
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ($6 <= [513]) ){ goto $label$7 }
	$2 = CALL $1($6)
	goto $label$6 
	
.LABEL $label$7
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$6
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $11
	*($3 + [44]) = $10
	*($3 + [48]) = $9
	*($3 + [52]) = $5
	*($3 + [56]) = $8
	*($3 + [60]) = ($1 + [60])
	CALL $83(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)5573886407878901760, *(*($0 + [8])), $7, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL $2($2)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$9 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$7 = *(($4 + [8]))
	$12 = *(*(($0 + [8])))
	$13 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*($1 + [72]) = CALL db_idx64_store($7, (int_64)5573886407878901760, $12, $13, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $45($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [56])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ($3 + [1])
	$6 = ($1 + [1])
	$7 = [0]
	$9 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$3 }
	$10 = ($7 & [1])
	$7 = *($1)
	$7 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $10 )
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$2 }
	$11 = ( *($1 + [8]) ? $6 : $10 )
	$12 = ($11 + $7)
	$13 = ( *($3 + [8]) ? $5 : $9 )
	$10 = *($13)
	$9 = $11
	
.LOOP $label$4:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$2 }
	$7 = CALL $16($9, $10, $7)
	if ( ($7 == 0) ){ goto $label$2 }
	if ( (CALL $17($7, $13, $8) == 0) ){ goto $label$5 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$2 }
	$7 = ($7 - $11)
	if ( ((int_32)$7 == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = ($2 + [8])
	$15 = ($2 + [4])
	$10 = [0]
	
.LOOP $label$6:
	$9 = CALL $33($4, $1, $10, ($7 - $10), $1)
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)*($14)) ){ goto $label$8 }
	*($8) = *($4)
	$8 = ($4 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($15) = (*($15) + [12])
	*($4) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $80($2, $9)
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL $9(*(($4 + [8])))
	
.LABEL $label$7
	$11 = ($8 & [1])
	$8 = *($3)
	$8 = ( *(($3 + [4])) ? uint_32($8 >> [1]) : $11 )
	$10 = ($8 + $7)
	$9 = ($8 & [1])
	$8 = *($1)
	$13 = ( *(($1 + [4])) ? uint_32($8 >> [1]) : $9 )
	if ( ($13 <= $10) ){ goto $label$1 }
	$7 = $10
	if ( ($8 == 0) ){ goto $label$9 }
	$9 = ($16 + $10)
	$16 = ( *(($1 + [8])) ? $6 : $9 )
	$12 = ($16 + $13)
	$7 = ($12 - $9)
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$1 }
	$11 = ( *(($3 + [8])) ? $5 : $11 )
	$13 = *($11)
	
.LOOP $label$10:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $16($9, $13, $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $17($7, $11, $8) == 0) ){ goto $label$11 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$1 }
	$7 = ($7 - $16)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	$8 = *($1)
	if ( ((int_32)$10 == (int_32)( *(($1 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$12 }
	$8 = CALL $33($4, $1, $10, [-1], $1)
	$7 = *($2 + [4])
	if ( ((uint_32)$7 >= (uint_32)*($2 + [8])) ){ goto $label$13 }
	*($7) = *($4)
	*(($7 + [8])) = *(($4 + [8]))
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	*(($8 = ($2 + [4]))) = (*($8) + [12])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$13
	CALL $80($2, $8)
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*($8 + [8]))
	
.LABEL $label$12
	$global$0 = ($4 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9255])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9360])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9293])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9360])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$1 }
	$6 = (CASTING int_64)(int_32 $3)
	$3 = CALL $15([8730])
	if ( ($3 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9082])
	goto $label$4 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = (int_64)0
	
.LOOP $label$6:
	$8 = *(($3 + [8729]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9127])
	
.LABEL $label$7
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$2 }
	CALL eosio_assert([0], [9180])
	goto $label$2 
	
.LABEL $label$3
	$9 = (int_64)4
	
.LABEL $label$2
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$7 = $10
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$7 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$11 = ($3 + [1])
	$3 = $11
	if ( $8 ){ goto $label$12 }
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [9229])
	
.LABEL $label$8
	*(($5 + [24])) = $9
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [16]) = $6
	$8 = CALL $32(($5 + [32]), $4)
	*($5 + [56]) = (int_64)-3617168760277827584
	*($5 + [48]) = (int_64)6138663591592764928
	*(($3 = CALL $7([16]))) = $1
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [48]) + [36])) = [0]
	$11 = ($3 + [16])
	*((($5 + [48]) + [24])) = $11
	*(($5 + [68])) = $11
	*($5 + [64]) = $3
	*($5 + [76 align=4]) = (int_64)0
	$3 = *($8)
	$8 = ( *(($5 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [76])
	
.LOOP $label$13:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$13 }
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $70($8, $3)
	$8 = *(($5 + [80]))
	$3 = *(($5 + [76]))
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	$3 = [0]
	
.LABEL $label$14
	*($5 + [116]) = $3
	*($5 + [112]) = $3
	*($5 + [120]) = $8
	*($5 + [88]) = ($5 + [112])
	*($5 + [96]) = $5
	CALL $71(($5 + [96]), ($5 + [88]))
	*($5 + [104]) = [0]
	*($5 + [96]) = (int_64)0
	$3 = [16]
	$11 = *((($5 + [48]) + [16]))
	$8 = *(($5 + [68]))
	$4 = ($8 - $11)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$17 }
	$3 = (($4 & [-16]) + $3)
	
.LABEL $label$17
	$11 = *(($5 + [76]))
	$8 = *(($5 + [80]))
	$3 = (($3 + $8) - $11)
	$7 = (CASTING uint_64)(uint_32 ($8 - $11))
	
.LOOP $label$18:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$18 }
	if ( ($3 == 0) ){ goto $label$20 }
	CALL $70(($5 + [96]), $3)
	$8 = *($5 + [100])
	$3 = *($5 + [96])
	goto $label$19 
	
.LABEL $label$20
	$8 = [0]
	$3 = [0]
	
.LABEL $label$19
	*($5 + [116]) = $3
	*($5 + [112]) = $3
	*($5 + [120]) = $8
	CALL $72(($5 + [112]), ($5 + [48]))
	$3 = *($5 + [96])
	CALL send_inline($3, (*($5 + [100]) - $3))
	$3 = *($5 + [96])
	if ( ($3 == 0) ){ goto $label$21 }
	*($5 + [100]) = $3
	CALL $9($3)
	
.LABEL $label$21
	$3 = *($5 + [76])
	if ( ($3 == 0) ){ goto $label$22 }
	*(($5 + [80])) = $3
	CALL $9($3)
	
.LABEL $label$22
	$3 = *($5 + [64])
	if ( ($3 == 0) ){ goto $label$23 }
	*(($5 + [68])) = $3
	CALL $9($3)
	
.LABEL $label$23
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*(($5 + [40])))
	
.LABEL $label$1
	$global$0 = ($5 + [128])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $35($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)5573886407878901760, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $77($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $130(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9996])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1 + [16]) = (int_64)1
	*($1) = $7
	*($1 + [32]) = (int_64)20000
	$7 = *(*(*($5 + [4]) + [4]) + [40])
	*($1 + [40]) = (int_64)0
	*($1 + [24]) = $7
	$8 = ($1 + [48])
	CALL $34($8, *($5 + [8]))
	*($1 + [60]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = *($1 + [48])
	$5 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [52])
	$7 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [40])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = ($1 + [16])
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ($6 <= [513]) ){ goto $label$7 }
	$5 = CALL $1($6)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $12
	*($3 + [44]) = $11
	*($3 + [48]) = $10
	*($3 + [52]) = $9
	*($3 + [56]) = $8
	*($3 + [60]) = ($1 + [60])
	CALL $83(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)5573886407878901760, *(*($0 + [8])), $7, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL $2($5)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$9 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$7 = *(($4 + [8]))
	$13 = *(*(($0 + [8])))
	$14 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*($1 + [72]) = CALL db_idx64_store($7, (int_64)5573886407878901760, $13, $14, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [96])
	$global$0 = $1
	$2 = [0]
	*(($1 + [88])) = [0]
	*($1 + [72]) = (int_64)-1
	$3 = *($0)
	*($1 + [56]) = $3
	*($1 + [64]) = $3
	*($1 + [80]) = (int_64)0
	$4 = CALL db_find_i64($3, $3, (int_64)7235161911607853056, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $84(($1 + [56]), $4)
	if ( ((int_32)*($2 + [36]) == (int_32)($1 + [56])) ){ goto $label$1 }
	CALL eosio_assert([0], [10048])
	
.LABEL $label$1
	$3 = *($2 + [8])
	if ( (int_64)($3 == 0) ){ goto $label$3 }
	$5 = *($2 + [16])
	*(($1 + [48])) = [0]
	*($1 + [40]) = (int_64)0
	$4 = CALL $15([9046])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($1 + [40]) = ($4 << [1])
	$6 = (($1 + [40]) | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($4 + [16]) & [-16])
	$6 = CALL $7($7)
	*($1 + [40]) = ($7 | [1])
	*($1 + [48]) = $6
	*($1 + [44]) = $4
	
.LABEL $label$5
	CALL memcpy($6, [9046], $4)
	
.LABEL $label$4
	*(($6 + $4)) = [0]
	*($1 + [32]) = (int_64)0
	$4 = CALL $32(($1 + [16]), ($1 + [40]))
	CALL $54($2, (int_64)4157547406398120320, $5, (CASTING uint_32)(uint_64 $3), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL $9(*($4 + [8]))
	
.LABEL $label$7
	$3 = *($0)
	*($1 + [8]) = ($1 + [32])
	CALL $85(($1 + [56]), $2, $3, ($1 + [8]))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$3 }
	CALL $9(*($1 + [48]))
	
.LABEL $label$3
	$0 = *($1 + [80])
	if ( ($0 == 0) ){ goto $label$8 }
	$6 = (($1 + [56]) + [28])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $86(($4 + [24]), *(($4 + [28])))
	CALL $9($4)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($1 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $0
	
.LABEL $label$9
	*($6) = $0
	CALL $9($2)
	
.LABEL $label$8
	$global$0 = ($1 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $31(($1 + [40]))
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9435])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9435])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $119(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [20])) = $4
	*(($3 + [24])) = ($4 + $5)
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*(($3 + [68])) = [0]
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $4
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*(($3 + [120])) = $1
	*(($3 + [128])) = (int_64)-1
	*(($3 + [136])) = (int_64)0
	*(($3 + [144])) = [0]
	*(($3 + [160])) = $1
	*(($3 + [168])) = (int_64)-1
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*($3 + [112]) = $0
	*($3 + [152]) = $0
	CALL prints([8254])
	CALL $112($3)
	$global$0 = ($3 + [192])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $32(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $32(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $9(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $9($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $86(($4 + [24]), *(($4 + [28])))
	CALL $9($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL $9($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $9($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$21 }
	CALL $9(*(($4 + [56])))
	
.LABEL $label$21
	CALL $9($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$16
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9435])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9435])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $119(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9435])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9435])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	CALL $119(*($1), ($3 + [12]))
	CALL $119(*($1), ($3 + [24]))
	CALL $119(*($1), ($3 + [36]))
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $32($2, ($1 + [36]))
	$4 = CALL $32(($2 + [16]), ($1 + [24]))
	$3 = CALL $32(($2 + [32]), ($1 + [12]))
	CALL $136($0, *($1), *($1 + [8]), $3, $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $9(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $9(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL $9(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $118 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [384])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [324]) = $2
	*($3 + [320]) = $2
	$5 = ($2 + $4)
	*($3 + [328]) = $5
	*($3 + [312]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9435])
	$5 = *(($3 + [328]))
	$2 = *($3 + [324])
	
.LABEL $label$5
	CALL memcpy(($3 + [312]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [324]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9435])
	$2 = *($3 + [324])
	
.LABEL $label$6
	CALL memcpy(($3 + [308]), $2, [4])
	*($3 + [324]) = ($2 + [4])
	*($3 + [304]) = [0]
	*($3 + [296]) = (int_64)0
	CALL $119(($3 + [320]), ($3 + [296]))
	*($3 + [288]) = [0]
	*($3 + [280]) = (int_64)0
	CALL $119(($3 + [320]), ($3 + [280]))
	*($3 + [272]) = [0]
	*($3 + [264]) = (int_64)0
	CALL $119(($3 + [320]), ($3 + [264]))
	*(($2 = (($3 + [56]) + [8]))) = *((($3 + [320]) + [8]))
	*($3 + [56]) = *($3 + [320])
	$2 = *($2)
	*((($3 + [336]) + [8])) = $2
	*(($4 = (($3 + [352]) + [8]))) = $2
	$6 = *($3 + [56])
	*($3 + [352]) = $6
	*($3 + [336]) = $6
	$2 = *($4)
	*((($3 + [368]) + [8])) = $2
	*(($3 + [96])) = $2
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$6 = *($3 + [352])
	*($3 + [88]) = $6
	*($3 + [368]) = $6
	*(($3 + [112])) = $1
	*(($3 + [120])) = (int_64)-1
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = [0]
	*(($3 + [140])) = [0]
	*(($3 + [152])) = $1
	*(($3 + [160])) = (int_64)-1
	*(($3 + [168])) = (int_64)0
	*(($3 + [176])) = [0]
	*(($3 + [180])) = [0]
	*(($3 + [192])) = $1
	*(($3 + [200])) = (int_64)-1
	*(($3 + [208])) = (int_64)0
	*(($3 + [216])) = [0]
	*($3 + [104]) = $0
	*($3 + [144]) = $0
	*($3 + [184]) = $0
	*($3 + [224]) = $0
	*(($3 + [240])) = (int_64)-1
	*(($3 + [232])) = $1
	*(($3 + [248])) = (int_64)0
	*(($3 + [256])) = [0]
	$2 = CALL $32(($3 + [8]), ($3 + [264]))
	$5 = CALL $32(($3 + [24]), ($3 + [280]))
	$4 = CALL $32(($3 + [40]), ($3 + [296]))
	CALL $47(($3 + [72]), $0, *($3 + [308]), $4, $5, $2)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($5) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $9(*($2 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $9(*($5 + [8]))
	$2 = [1]
	if ( (*($4) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*($4 + [8]))
	
.LABEL $label$7
	CALL $112(($3 + [72]))
	if ( (*($3 + [264]) & $2) ){ goto $label$16 }
	$2 = [1]
	if ( (*($3 + [280]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $9(*(($3 + [272])))
	$2 = [1]
	if ( ((*($3 + [280]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $9(*(($3 + [288])))
	if ( ((*($3 + [296]) & $2) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($3 + [296]) & $2) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($3 + [384])
	return 
	
.LABEL $label$12
	CALL $9(*(($3 + [304])))
	$global$0 = ($3 + [384])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $120($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $36($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $36($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $31($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$6 = ($1 + [16])
	$7 = *($6)
	*($6) = (int_64)0
	*($5 + [16]) = $7
	*($1 + [8]) = *(*($3))
	$3 = *($1 + [48])
	$8 = ( *(($1 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [52])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [48])
	$9 = ($1 + [8])
	$10 = *($1)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $1($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [36]) = $9
	*($5 + [40]) = $6
	*($5 + [56]) = $8
	*($5 + [32]) = $1
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [32])
	*($5 + [52]) = ($1 + [40])
	*($5 + [60]) = ($1 + [60])
	CALL $83(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL $2($4)
	
.LABEL $label$6
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($5 + [32]) = *($6)
	if ( (CALL $17(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [72])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5573886407878901760, ($5 + [24]), $10)
	*($1) = $3
	
.LABEL $label$9
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

int_32 .FUNC $107 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $1
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $1
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($4 + [120])) = $1
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $1
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	CALL $112($4)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $106 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [248])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*((($4 + [232]) + [40])) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $110(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [304])
	*($4 + [40]) = $7
	*($4 + [320]) = $7
	*((($4 + [24]) + [40])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $1
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $1
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $111(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	CALL $112(($4 + [24]))
	if ( (*($4 + [268]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [256]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($4 + [276])))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($4 + [264])))
	$2 = [1]
	if ( ((*($4 + [244]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [244]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [336])
	return $2
	
.LABEL $label$5
	CALL $9(*(($4 + [252])))
	$global$0 = ($4 + [336])
	return $2
}

int_32 .FUNC $21 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $19($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $20($3, (int_64)0)
	$4 = CALL $22($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $21($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $4()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $21($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8289]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $20($0, (int_64)0)
	*(CALL $4()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $21($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $21($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $21($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $21($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8289])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $21($0)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $21($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8245]))
	$8 = (int_64)0
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $21($0)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $21($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $20($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8289]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8289]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $21($0) + [8289]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $4()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $4()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $4()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $25 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $24 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $28($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $28($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $28($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $28($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8560]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $28($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $28($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $28($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $109 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [9435])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $1
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $1
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($4 + [120])) = $1
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $1
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	CALL $112($4)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$9 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$3 }
	$1 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$4:
	$8 = $7
	$6 = ($8 + [16])
	if ( ((int_32)(*($1) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	$3 = *($5)
	
.LABEL $label$5
	CALL memcpy($3, $6, [8])
	$6 = (*($5) + [8])
	*($5) = $6
	$7 = ($8 + [24])
	if ( ((int_32)(*($1) - $6) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9249])
	$6 = *($5)
	
.LABEL $label$6
	CALL memcpy($6, $7, [8])
	$3 = (*($5) + [8])
	*($5) = $3
	$6 = *($8 + [4])
	if ( ($6 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = $6
	$6 = *($7)
	if ( $6 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$7 }
	$8 = ($8 + [8])
	
.LOOP $label$10:
	$6 = *($8)
	$8 = ($6 + [8])
	$7 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$10 }
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	*($1 + [28]) = [1]
	$5 = ($1 + [8])
	*($4 + [24]) = *($5)
	$6 = *($1)
	$7 = $3
	$3 = ($7 + [-64])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($7 + [-7])
	*($4 + [32]) = ($4 + [8])
	*($4 + [44]) = $5
	*($4 + [40]) = $1
	*($4 + [48]) = ($1 + [16])
	*($4 + [52]) = ($1 + [24])
	*($4 + [56]) = ($1 + [28])
	*($4 + [60]) = ($1 + [32])
	*($4 + [64]) = ($1 + [40])
	*($4 + [68]) = ($1 + [48])
	*($4 + [72]) = ($1 + [56])
	CALL $87(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $3, [57])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($4 + [40]) = *($5)
	if ( (CALL $17(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$4 }
	$3 = *($1 + [68])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5320316864482508800, ($4 + [32]), $6)
	*(($1 + [68])) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, $2, ($4 + [40]))
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	float_64 $8
	int_32 $9
	$7 = ($global$0 - [128])
	$global$0 = $7
	*($7 + [112]) = $2
	*($7 + [120]) = $1
	*($7 + [104]) = $3
	*($7 + [100]) = $5
	*(($7 + [88])) = [0]
	*($7 + [72]) = (int_64)-1
	*($7 + [92]) = [0]
	$3 = *($0)
	*($7 + [56]) = $3
	*($7 + [64]) = $3
	*($7 + [80]) = (int_64)0
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)5573886407878901760, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $77(($7 + [56]), $5)
	if ( ((int_64)*($5 + [16]) == (int_64)1) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = CALL db_next_i64(*($5 + [68]), ($7 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $77(($7 + [56]), $5)
	if ( ((int_64)*($5 + [16]) != (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	*($7 + [52]) = [0]
	if ( $4 ){ goto $label$5 }
	$8 = CALL $43(((float_64)(CASTING float_64)(uint_64 *($7 + [112])) * (float_64)(float_64)0.35))
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)2147483648) ){ goto $label$7 }
	$4 = [-2147483648]
	goto $label$6 
	
.LABEL $label$7
	$4 = (CASTING int_32)(float_64 $8)
	
.LABEL $label$6
	*($7 + [52]) = $4
	
.LABEL $label$5
	$3 = *($0)
	*($7 + [40]) = $0
	*($7 + [28]) = ($7 + [52])
	*($7 + [24]) = ($7 + [112])
	*($7 + [32]) = ($7 + [104])
	*($7 + [36]) = ($7 + [100])
	*($7 + [44]) = ($7 + [120])
	CALL $78(($7 + [56]), $5, $3, ($7 + [24]))
	$8 = ((float_64)CALL $43(((float_64)(CASTING float_64)(uint_64 *($7 + [112])) * (float_64)(float_64)0.45)) + (float_64)(CASTING float_64)(int_32 *($7 + [52])))
	if ( (((float_64)$8 < (float_64)(float_64)18446744073709551615) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$9 }
	$3 = (int_64)0
	goto $label$8 
	
.LABEL $label$9
	$3 = (Rounds 0)($8)
	
.LABEL $label$8
	CALL $79($0, $3, [1])
	$8 = CALL $43(((float_64)(CASTING float_64)(uint_64 *($7 + [112])) * (float_64)(float_64)0.05))
	*(($7 + [16])) = [0]
	*($7 + [8]) = (int_64)0
	$5 = CALL $15([9032])
	$0 = ($5 <= [-16])
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)2147483648) ){ goto $label$11 }
	$4 = [-2147483648]
	if ( $0 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	$4 = (CASTING int_32)(float_64 $8)
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$10
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$14 }
	*($7 + [8]) = ($5 << [1])
	$0 = (($7 + [8]) | [1])
	if ( $5 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (($5 + [16]) & [-16])
	$0 = CALL $7($9)
	*($7 + [8]) = ($9 | [1])
	*($7 + [16]) = $0
	*($7 + [12]) = $5
	
.LABEL $label$13
	CALL memcpy($0, [9032], $5)
	
.LABEL $label$12
	*(($0 + $5)) = [0]
	CALL $54($5, (int_64)4157547406398120320, (int_64)4157547406590006752, $4, ($7 + [8]))
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $9(*($7 + [16]))
	
.LABEL $label$2
	$4 = *($7 + [80])
	if ( ($4 == 0) ){ goto $label$15 }
	$9 = ($7 + [84])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$20 }
	CALL $9(*(($0 + [56])))
	
.LABEL $label$20
	CALL $9($0)
	
.LABEL $label$19
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($7 + [80]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $4
	
.LABEL $label$16
	*($9) = $4
	CALL $9($5)
	
.LABEL $label$15
	$global$0 = ($7 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $31(($7 + [8]))
}

int_32 .FUNC $108 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*((($4 + [232]) + [40])) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $113(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [304])
	*($4 + [40]) = $7
	*($4 + [320]) = $7
	*((($4 + [24]) + [40])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $1
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $1
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $114(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	CALL $112(($4 + [24]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$5 }
	CALL $9(*(($4 + [272])))
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9524])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5320316864482508800)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9470])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9470])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $58(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	float_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*(($4 + [80])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [84]) = [0]
	$6 = *($0)
	*($4 + [48]) = $6
	*($4 + [56]) = $6
	*($4 + [72]) = (int_64)0
	$7 = CALL db_lowerbound_i64($6, $6, (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL db_next_i64(*(CALL $58(($4 + [48]), $7) + [64]), ($4 + [88]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$5 = [0]
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = CALL db_next_i64(*(CALL $58(($4 + [48]), $7) + [64]), ($4 + [88]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$3
	*($4 + [44]) = [0]
	*($4 + [40]) = ($4 + [48])
	CALL $65(($4 + [40]))
	CALL eosio_assert((*(*($4 + [44]) + [28]) == 0), [8787])
	$7 = *($4 + [44])
	$6 = *($7 + [40])
	$8 = CALL $43(((float_64)CALL $42(((float_64)((float_64)(float_64)1 / (float_64)(CASTING float_64)(int_32 ([88] - *($7 + [24])))) * (float_64)(float_64)114), (float_64)3) * (float_64)(float_64)1e4))
	$9 = ($4 + [40])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	*($4 + [44]) = [0]
	*($4 + [40]) = ($4 + [48])
	$8 = CALL $43(((float_64)CALL $42((float_64)1.3103448275862069, (float_64)3) * (float_64)(float_64)1e4))
	$6 = (int_64)20000
	$9 = ($4 + [40])
	
.LABEL $label$1
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)2147483648) ){ goto $label$10 }
	$10 = [-2147483648]
	$7 = *($4 + [44])
	if ( ($3 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$10 = (CASTING int_32)(float_64 $8)
	$7 = *($4 + [44])
	if ( $3 ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$3 = *($7 + [40])
	$6 = *($7 + [32])
	$5 = CALL $15([8812])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$14 }
	*($4 + [8]) = ($5 << [1])
	$7 = (($4 + [8]) | [1])
	if ( $5 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$12 = (($5 + [16]) & [-16])
	$7 = CALL $7($12)
	*($4 + [8]) = ($12 | [1])
	*($4 + [16]) = $7
	*($4 + [12]) = $5
	
.LABEL $label$13
	CALL memcpy($7, [8812], $5)
	
.LABEL $label$12
	*(($7 + $5)) = [0]
	CALL $54($4, (int_64)6711845935059674272, $6, $3, ($4 + [8]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*($4 + [16]))
	
.LABEL $label$15
	$6 = *($4 + [40])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( $5) ){ goto $label$16 }
	CALL eosio_assert([0], [9763])
	CALL eosio_assert([0], [9440])
	
.LABEL $label$16
	$7 = ($0 + [72])
	$0 = CALL db_next_i64(*($5 + [64]), ($4 + [88]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$17 }
	CALL $58((CASTING uint_32)(uint_64 $6), $0)
	
.LABEL $label$17
	CALL $60($7, $5)
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	CALL $31(($4 + [8]))
	
.LABEL $label$8
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$11 = *($7 + [40])
	$7 = CALL $15([8800])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$20 }
	*($4 + [24]) = ($7 << [1])
	$12 = (($4 + [24]) | [1])
	if ( $7 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$13 = (($7 + [16]) & [-16])
	$12 = CALL $7($13)
	*($4 + [24]) = ($13 | [1])
	*($4 + [32]) = $12
	*($4 + [28]) = $7
	
.LABEL $label$19
	CALL memcpy($12, [8800], $7)
	
.LABEL $label$18
	*(($12 + $7)) = [0]
	CALL $54($4, (int_64)6711845935059674272, (int_64)4157547406398120320, $11, ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$21 }
	CALL $9(*($4 + [32]))
	
.LABEL $label$21
	CALL $66($0, $6, $5, $6)
	CALL $67($4, $6, $2, $6)
	CALL $68($0, *(*($4 + [44]) + [32]), $6, (CASTING int_64)(int_32 $10), $5, $3, $4)
	$6 = *($0)
	$5 = *($9 + [4])
	if ( $5 ){ goto $label$22 }
	CALL eosio_assert([0], [9572])
	
.LABEL $label$22
	CALL $69(($4 + [48]), $5, $6)
	$0 = *($4 + [72])
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$6
	$3 = ($4 + [76])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	CALL $9($7)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($4 + [72]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $0
	
.LABEL $label$23
	*($3) = $0
	CALL $9($5)
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$5
	CALL $31(($4 + [24]))
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	float_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = (CASTING float_64)(uint_64 $3)
	if ( (int_64)($2 == 0) ){ goto $label$9 }
	$6 = CALL $43(((float_64)$5 * (float_64)(float_64)0.08))
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$7 = CALL $15([9013])
	$8 = ($7 <= [-16])
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)2147483648) ){ goto $label$8 }
	$9 = [-2147483648]
	if ( $8 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$9
	$5 = CALL $43(((float_64)$5 * (float_64)(float_64)0.1))
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = CALL $15([9013])
	$8 = ($7 <= [-16])
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)2147483648) ){ goto $label$6 }
	$9 = [-2147483648]
	if ( $8 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$8
	$9 = (CASTING int_32)(float_64 $6)
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$7
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [32]) = ($7 << [1])
	$8 = (($4 + [32]) | [1])
	if ( $7 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$10 = (($7 + [16]) & [-16])
	$8 = CALL $7($10)
	*($4 + [32]) = ($10 | [1])
	*($4 + [40]) = $8
	*($4 + [36]) = $7
	
.LABEL $label$11
	CALL memcpy($8, [9013], $7)
	
.LABEL $label$10
	*(($8 + $7)) = [0]
	CALL $54($4, (int_64)4157547406398120320, (int_64)4157547406590006752, $9, ($4 + [32]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*($4 + [40]))
	
.LABEL $label$13
	$5 = CALL $43(((float_64)$5 * (float_64)(float_64)0.02))
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$7 = CALL $15([9021])
	$8 = ($7 <= [-16])
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)2147483648) ){ goto $label$15 }
	$9 = [-2147483648]
	if ( $8 ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$15
	$9 = (CASTING int_32)(float_64 $5)
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$14
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($4 + [16]) = ($7 << [1])
	$8 = (($4 + [16]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$10 = (($7 + [16]) & [-16])
	$8 = CALL $7($10)
	*($4 + [16]) = ($10 | [1])
	*($4 + [24]) = $8
	*($4 + [20]) = $7
	
.LABEL $label$17
	CALL memcpy($8, [9021], $7)
	
.LABEL $label$16
	*(($8 + $7)) = [0]
	CALL $54($4, (int_64)4157547406398120320, $2, $9, ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $9(*($4 + [24]))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$6
	$9 = (CASTING int_32)(float_64 $5)
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$5
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$21 }
	*($4) = ($7 << [1])
	$8 = ($4 | [1])
	if ( $7 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$10 = (($7 + [16]) & [-16])
	$8 = CALL $7($10)
	*($4) = ($10 | [1])
	*($4 + [8]) = $8
	*($4 + [4]) = $7
	
.LABEL $label$20
	CALL memcpy($8, [9013], $7)
	
.LABEL $label$19
	*(($8 + $7)) = [0]
	CALL $54($4, (int_64)4157547406398120320, (int_64)4157547406590006752, $9, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	CALL $9(*($4 + [8]))
	
.LABEL $label$4
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $31(($4 + [32]))
	
.LABEL $label$2
	CALL $31(($4 + [16]))
	
.LABEL $label$1
	CALL $31($4)
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [144])
	$global$0 = $4
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	*($4 + [140]) = [0]
	$5 = *($0)
	*($4 + [104]) = $5
	*($4 + [112]) = $5
	if ( ((int_32)$2 < (int_32)[2]) ){ goto $label$11 }
	$6 = (float_64)2e4
	$7 = [87]
	
.LOOP $label$12:
	$6 = (Rounds 0)(((float_64)$6 + (float_64)CALL $43(((float_64)CALL $42(((float_64)((float_64)(float_64)1 / (float_64)(CASTING float_64)(int_32 $7)) * (float_64)(float_64)114), (float_64)3) * (float_64)(float_64)1e4))))
	$8 = ($7 + [-1])
	$7 = $8
	if ( ((int_32)($2 + $8) != (int_32)[88]) ){ goto $label$12 }
	*($4 + [100]) = [0]
	*($4 + [96]) = [0]
	$9 = CALL $43(((float_64)$6 * (float_64)(float_64)0.9))
	*($4 + [88]) = $9
	*($4 + [80]) = (float_64))($6 - $9)
	$6 = ((float_64)(CASTING float_64)(uint_64 $3) * (float_64)(float_64)0.35)
	$9 = CALL $43(((float_64)$6 * (float_64)(float_64)0.8))
	*($4 + [72]) = $9
	*($4 + [64]) = (float_64))(CALL $43($6) - $9)
	$10 = [0]
	$7 = CALL db_lowerbound_i64($5, $5, (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$10 = [0]
	$7 = CALL $58(($4 + [104]), $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$11 = [0]
	$8 = [0]
	
.LOOP $label$13:
	$10 = $11
	$5 = *($7 + [40])
	$6 = *($4 + [88])
	if ( (((float_64)$6 > (float_64)(CASTING float_64)(uint_64 ((int_64)$5 + (int_64)(CASTING int_64)(int_32 $8)))) == 0) ){ goto $label$10 }
	$6 = CALL $43((CASTING float_64)(uint_64 $5))
	$7 = CALL db_next_i64(*($7 + [64]), ($4 + [32]))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	$11 = ($10 + [1])
	$12 = ((int_32)($11 + [-1]) < (int_32)$2)
	$6 = ((float_64)$6 + (float_64)(CASTING float_64)(int_32 $8))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)2147483648) ){ goto $label$15 }
	$8 = [-2147483648]
	$7 = CALL $58(($4 + [104]), $7)
	if ( $12 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$8 = (CASTING int_32)(float_64 $6)
	$7 = CALL $58(($4 + [104]), $7)
	if ( $12 ){ goto $label$13 }
	
.LABEL $label$14
	$10 = ($10 + [1])
	goto $label$6 
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$5 }
	*($4 + [88]) = CALL $43(((float_64)(CASTING float_64)(uint_64 $3) * (float_64)(float_64)0.35))
	$7 = CALL db_lowerbound_i64($5, $5, (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $58(($4 + [104]), $7)
	$5 = *($0)
	*($4 + [32]) = ($4 + [88])
	CALL $73(($4 + [104]), $2, $5, ($4 + [32]))
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$7 = CALL $15([9008])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($4 + [32]) = ($7 << [1])
	$8 = (($4 + [32]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$11 = (($7 + [16]) & [-16])
	$8 = CALL $7($11)
	*($4 + [32]) = ($11 | [1])
	*($4 + [40]) = $8
	*($4 + [36]) = $7
	
.LABEL $label$17
	CALL memcpy($8, [9008], $7)
	
.LABEL $label$16
	*(($8 + $7)) = [0]
	$5 = *($2 + [32])
	$6 = *($4 + [88])
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)2147483648) ){ goto $label$20 }
	$8 = [-2147483648]
	goto $label$19 
	
.LABEL $label$20
	$8 = (CASTING int_32)(float_64 $6)
	
.LABEL $label$19
	$7 = CALL $32($4, ($4 + [32]))
	CALL $54($4, (int_64)4157547406398120320, $5, $8, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$21 }
	CALL $9(*($7 + [8]))
	
.LABEL $label$21
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $9(*($4 + [40]))
	$2 = *($4 + [128])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$10
	$6 = (float_64)
	if ( ((float_64)(float_64)|$6($6 - (CASTING float_64)(int_32 $8)))| < (float_64)(float_64)2147483648) ){ goto $label$8 }
	$7 = [-2147483648]
	goto $label$7 
	
.LABEL $label$9
	$10 = ($10 + [1])
	goto $label$6 
	
.LABEL $label$8
	$7 = (CASTING int_32)(float_64 $6)
	
.LABEL $label$7
	*($4 + [100]) = $7
	$6 = CALL $43((CASTING float_64)(uint_64 (int_64))($5 - (CASTING int_64)(int_32 $7)))
	if ( ((float_64)(float_64)|$6)| < (float_64)(float_64)2147483648) ){ goto $label$22 }
	*($4 + [96]) = [-2147483648]
	goto $label$6 
	
.LABEL $label$22
	*($4 + [96]) = (CASTING int_32)(float_64 $6)
	
.LABEL $label$6
	$7 = CALL db_lowerbound_i64(*($4 + [104]), *(($4 + [112])), (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $58(($4 + [104]), $7)
	if ( ($2 == 0) ){ goto $label$5 }
	$13 = (($4 + [32]) | [1])
	$12 = (($4 + [32]) + [8])
	$14 = ($4 + [44])
	$15 = ($4 + [52])
	$16 = ($4 + [56])
	$11 = [0]
	
.LOOP $label$23:
	*($4 + [60]) = [0]
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$25 }
	$5 = *($0)
	*($12) = ($4 + [72])
	*($4 + [36]) = ($4 + [88])
	*($4 + [32]) = ($4 + [60])
	CALL $74(($4 + [104]), $8, $5, ($4 + [32]))
	goto $label$24 
	
.LABEL $label$25
	$5 = *($0)
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$26 }
	*($12) = ($4 + [72])
	*($14) = ($4 + [96])
	*((($4 + [32]) + [16])) = ($4 + [80])
	*($15) = ($4 + [64])
	*($16) = ($4 + [60])
	*($4 + [36]) = ($4 + [88])
	*($4 + [32]) = ($4 + [100])
	CALL $75(($4 + [104]), $8, $5, ($4 + [32]))
	goto $label$24 
	
.LABEL $label$26
	*($12) = ($4 + [64])
	*($4 + [36]) = ($4 + [80])
	*($4 + [32]) = ($4 + [60])
	CALL $76(($4 + [104]), $8, $5, ($4 + [32]))
	
.LABEL $label$24
	*($12) = [0]
	*($4 + [32]) = (int_64)0
	$7 = CALL $15([9008])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$29 }
	*($4 + [32]) = ($7 << [1])
	$17 = $13
	if ( $7 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$18 = (($7 + [16]) & [-16])
	$17 = CALL $7($18)
	*($12) = $17
	*($4 + [32]) = ($18 | [1])
	*($4 + [36]) = $7
	
.LABEL $label$28
	CALL memcpy($17, [9008], $7)
	
.LABEL $label$27
	*(($17 + $7)) = [0]
	CALL $54($4, (int_64)4157547406398120320, *($8 + [32]), *($4 + [60]), CALL $32(($4 + [16]), ($4 + [32])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$30 }
	CALL $9(*((($4 + [16]) + [8])))
	
.LABEL $label$30
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$31 }
	CALL $9(*($12))
	
.LABEL $label$31
	$7 = CALL db_next_i64(*($8 + [64]), ($4 + [32]))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $58(($4 + [104]), $7)
	$11 = ($11 + [1])
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$23 }
	
.LABEL $label$5
	$2 = *($4 + [128])
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$11 = ($4 + [132])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$33 }
	
.LOOP $label$34:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$35 }
	CALL $9($8)
	
.LABEL $label$35
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$34 }
	$7 = *(($4 + [128]))
	goto $label$32 
	
.LABEL $label$33
	$7 = $2
	
.LABEL $label$32
	*($11) = $2
	CALL $9($7)
	
.LABEL $label$3
	$global$0 = ($4 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $31(($4 + [32]))
	
.LABEL $label$1
	CALL $31(($4 + [32]))
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL require_auth($1)
	$6 = [0]
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8704])
	$9 = CALL $15([8730])
	if ( ($9 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9082])
	goto $label$8 
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($9 + [8729]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9127])
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$10 }
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$8 = (int_64)4
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [8734])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8760])
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$12 }
	$9 = CALL $32($5, $4)
	CALL $62($0, $1, $9, $7)
	if ( ((*($9) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*($9 + [8]))
	
.LABEL $label$12
	$global$0 = ($5 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9797])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9842])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9892])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $9($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
	$9 = *($1 + [68])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5320316864482508800, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	$4 = ($global$0 - [240])
	$global$0 = $4
	*($4 + [184]) = $2
	*($4 + [192]) = $1
	$5 = [0]
	*((($4 + [144]) + [32])) = [0]
	*($4 + [160]) = (int_64)-1
	*($4 + [168]) = (int_64)0
	*($4 + [180]) = [0]
	$1 = *($0)
	*($4 + [144]) = $1
	*($4 + [152]) = $1
	*((($4 + [104]) + [32])) = [0]
	*($4 + [112]) = $1
	*($4 + [104]) = $1
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	*($4 + [140]) = [0]
	CALL $40(($4 + [88]), $2)
	CALL $39(($4 + [72]), [8840], ($4 + [88]))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-1) <= (int_64)88), ( *($4 + [80]) ? (($4 + [72]) | [1]) : (*($4 + [72]) & [1]) ))
	*($4 + [64]) = ($4 + [144])
	*($4 + [208]) = (int_64)1
	CALL $49(($4 + [8]), ($4 + [64]), ($4 + [208]))
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_64)*($4 + [208]) != (int_64)*($6 + [16])) ){ goto $label$2 }
	$1 = *($4 + [8])
	*($4 + [56]) = $1
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))
	goto $label$1 
	
.LABEL $label$3
	*($4 + [60]) = [0]
	*($4 + [56]) = ($4 + [64])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	*($4 + [60]) = [0]
	*($4 + [56]) = ($4 + [64])
	
.LABEL $label$1
	$7 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8860])
	*($4 + [8]) = (int_64)0
	*($4 + [208]) = $2
	$8 = CALL db_idx64_lowerbound(*($4 + [104]), *(($4 + [112])), (int_64)5320316864482508800, ($4 + [208]), ($4 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = *($4 + [8])
	$6 = *(($4 + [132]))
	$9 = *(($4 + [128]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($6 + [-24])
	$7 = *($5)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$7 }
	$6 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$6 }
	if ( ((int_32)*($7 + [60]) == (int_32)($4 + [104])) ){ goto $label$5 }
	CALL eosio_assert([0], [10048])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$5 = CALL db_find_i64(*($4 + [104]), *(($4 + [112])), (int_64)5320316864482508800, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $58(($4 + [104]), $5)
	if ( ((int_32)*($7 + [60]) == (int_32)($4 + [104])) ){ goto $label$5 }
	CALL eosio_assert([0], [10048])
	
.LABEL $label$5
	*($7 + [68]) = $8
	
.LABEL $label$4
	if ( (int_64)(*($7 + [32]) == 0) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*($7 + [8]) != (int_64)*($4 + [184])), [8907])
	
.LABEL $label$9
	*($4 + [52]) = [0]
	$5 = CALL db_lowerbound_i64(*($4 + [104]), *(($4 + [112])), (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $58(($4 + [104]), $5)
	*($4 + [52]) = (*($4 + [52]) + [1])
	$5 = CALL db_next_i64(*($5 + [64]), ($4 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = CALL $58(($4 + [104]), $5)
	*($4 + [52]) = (*($4 + [52]) + [1])
	$5 = CALL db_next_i64(*($5 + [64]), ($4 + [8]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$10
	*($4 + [48]) = [0]
	*($4 + [44]) = [0]
	*($4 + [40]) = ($4 + [104])
	if ( (*($4 + [52]) == 0) ){ goto $label$15 }
	CALL $65(($4 + [40]))
	CALL eosio_assert(((int_32)*(*($4 + [44]) + [28]) == (int_32)[1]), [8923])
	$10 = CALL $43(((float_64)CALL $42(((float_64)((float_64)(float_64)1 / (float_64)(CASTING float_64)(int_32 ([88] - *(*($4 + [44]) + [24])))) * (float_64)(float_64)114), (float_64)3) * (float_64)(float_64)1e4))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)2147483648) ){ goto $label$14 }
	$5 = [-2147483648]
	goto $label$13 
	
.LABEL $label$15
	*($4 + [48]) = [20000]
	CALL $43(((float_64)CALL $42((float_64)1.3103448275862069, (float_64)3) * (float_64)(float_64)1e4))
	goto $label$12 
	
.LABEL $label$14
	$5 = (CASTING int_32)(float_64 $10)
	
.LABEL $label$13
	*($4 + [48]) = $5
	CALL $43(((float_64)CALL $42(((float_64)((float_64)(float_64)1 / (float_64)(CASTING float_64)(int_32 ([87] - *(*($4 + [44]) + [24])))) * (float_64)(float_64)114), (float_64)3) * (float_64)(float_64)1e4))
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($4 + [48]) == (int_64)$3), [8964])
	$2 = *($0)
	*($4 + [12]) = ($4 + [184])
	*($4 + [8]) = ($4 + [104])
	*($4 + [16]) = ($4 + [56])
	*($4 + [20]) = ($4 + [52])
	*($4 + [24]) = ($4 + [40])
	*($4 + [28]) = ($4 + [192])
	*($4 + [32]) = ($4 + [48])
	*($4 + [232]) = $2
	if ( ((int_64)*($4 + [104]) == (int_64)CALL current_receiver()) ){ goto $label$16 }
	CALL eosio_assert([0], [9945])
	
.LABEL $label$16
	*($4 + [212]) = ($4 + [8])
	*($4 + [208]) = ($4 + [104])
	*($4 + [216]) = ($4 + [232])
	*(($5 = CALL $7([72])) + [56]) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [60]) = ($4 + [104])
	CALL $81(($4 + [208]), $5)
	*($4 + [224]) = $5
	$2 = *($5)
	*($4 + [208]) = $2
	$7 = *($5 + [64])
	*($4 + [204]) = $7
	$9 = ($4 + [132])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($4 + [136]))) ){ goto $label$19 }
	*($6 + [8]) = $2
	*($6 + [16]) = $7
	*($4 + [224]) = [0]
	*($6) = $5
	*($9) = ($6 + [24])
	$5 = *($4 + [224])
	*($4 + [224]) = [0]
	if ( $5 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $82(($4 + [128]), ($4 + [224]), ($4 + [208]), ($4 + [204]))
	$5 = *($4 + [224])
	*($4 + [224]) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL $9($5)
	
.LABEL $label$17
	if ( (*($4 + [72]) & [1]) ){ goto $label$26 }
	if ( (*($4 + [88]) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $9(*(($4 + [80])))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL $9(*($4 + [96]))
	$7 = *($4 + [128])
	if ( ($7 == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$7 = *($4 + [128])
	if ( $7 ){ goto $label$22 }
	
.LABEL $label$23
	$7 = *($4 + [168])
	if ( $7 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$9 = ($4 + [132])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$29 }
	CALL $9($6)
	
.LABEL $label$29
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($4 + [128]))
	*($9) = $7
	CALL $9($5)
	$7 = *($4 + [168])
	if ( $7 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$27
	*($9) = $7
	CALL $9($7)
	$7 = *($4 + [168])
	if ( ($7 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$9 = ($4 + [172])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$33 }
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$34 }
	CALL $9(*(($6 + [56])))
	
.LABEL $label$34
	CALL $9($6)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$32 }
	$5 = *(($4 + [168]))
	goto $label$30 
	
.LABEL $label$31
	$5 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL $9($5)
	$global$0 = ($4 + [240])
	return 
	
.LABEL $label$20
	$global$0 = ($4 + [240])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth($1)
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$5 = CALL $15([8838])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($4) = ($5 << [1])
	$6 = ($4 | [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($5 + [16]) & [-16])
	$6 = CALL $7($7)
	*($4) = ($7 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $5
	
.LABEL $label$3
	CALL memcpy($6, [8838], $5)
	
.LABEL $label$2
	*(($6 + $5)) = [0]
	CALL $52($4, $2, ($4 + [16]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $9(*($4 + [8]))
	
.LABEL $label$5
	$2 = *($4 + [16])
	$5 = *($4 + [20])
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	$6 = [0]
	$7 = [0]
	
.LOOP $label$7:
	$5 = ($2 + $6)
	if ( (*($5) & [1]) ){ goto $label$9 }
	$5 = ($5 + [1])
	goto $label$8 
	
.LABEL $label$9
	$5 = *(($5 + [8]))
	
.LABEL $label$8
	CALL $63($0, $1, (CASTING int_64)(int_32 CALL $23($5, $4, [10])), $3)
	$6 = ($6 + [12])
	$2 = *($4 + [16])
	$5 = *($4 + [20])
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)((int_32)($5 - $2) / (int_32)[12])) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ($2 == 0) ){ goto $label$10 }
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($5 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $9(*(($5 + [-4])))
	
.LABEL $label$14
	$5 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$13 }
	$5 = *($4 + [16])
	goto $label$11 
	
.LABEL $label$12
	$5 = $2
	
.LABEL $label$11
	*($4 + [20]) = $2
	CALL $9($5)
	
.LABEL $label$10
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $31($4)
}

void .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0))
	*((($1 + [80]) + [32])) = [0]
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	*($1 + [116]) = [0]
	$2 = *($0)
	*($1 + [80]) = $2
	*($1 + [88]) = $2
	*((($1 + [40]) + [32])) = [0]
	*($1 + [48]) = $2
	*($1 + [40]) = $2
	*($1 + [56]) = (int_64)-1
	*($1 + [64]) = (int_64)0
	*($1 + [76]) = [0]
	*($1 + [32]) = [0]
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)5573886407878901760, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $77(($1 + [80]), $0)
	$4 = (($1 + [24]) + [8])
	$3 = *($1 + [28])
	if ( ((int_32)$3 != (int_32)*($4)) ){ goto $label$3 }
	$5 = [3]
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	$5 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$116 
	
.LABEL $label$117
	$0 = CALL $77(($1 + [80]), $0)
	$3 = *($1 + [28])
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$49 }
	$5 = [0]
	goto $label$4 
	
.LABEL $label$116
	*($3) = *($0)
	*($1 + [28]) = ($3 + [8])
	goto $label$48 
	
.LABEL $label$115
	CALL $59(($1 + [24]), $0)
	$5 = [1]
	goto $label$4 
	
.LABEL $label$114
	$0 = CALL db_next_i64(*($0 + [68]), ($1 + [8]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$47 }
	$5 = [4]
	goto $label$4 
	
.LABEL $label$113
	$7 = *($1 + [28])
	$6 = *($1 + [24])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$46 }
	$5 = [5]
	goto $label$4 
	
.LABEL $label$112
	$8 = ($1 + [108])
	$9 = ($1 + [104])
	$10 = (($1 + [80]) + [8])
	$5 = [6]
	goto $label$4 
	
.LABEL $label$111
	$2 = *($6)
	$3 = *($8)
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$42 }
	$5 = [7]
	goto $label$4 
	
.LABEL $label$110
	$0 = ($3 + [-24])
	$4 = *($0)
	if ( ((int_64)*($4) == (int_64)$2) ){ goto $label$41 }
	$5 = [8]
	goto $label$4 
	
.LABEL $label$109
	$3 = $0
	if ( ((int_32)$11 != (int_32)$0) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$108
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$40 }
	$5 = [65]
	goto $label$4 
	
.LABEL $label$107
	if ( ((int_32)*($4 + [64]) != (int_32)($1 + [80])) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$106
	$0 = CALL db_find_i64(*($1 + [80]), *($10), (int_64)5573886407878901760, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$39 }
	$5 = [10]
	goto $label$4 
	
.LABEL $label$105
	$4 = CALL $77(($1 + [80]), $0)
	if ( ((int_32)*($4 + [64]) == (int_32)($1 + [80])) ){ goto $label$38 }
	$5 = [11]
	goto $label$4 
	
.LABEL $label$104
	CALL eosio_assert([0], [10048])
	$5 = [12]
	goto $label$4 
	
.LABEL $label$103
	$0 = CALL db_next_i64(*($4 + [68]), ($1 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$35 }
	$5 = [13]
	goto $label$4 
	
.LABEL $label$102
	CALL $77(($1 + [80]), $0)
	$5 = [14]
	goto $label$4 
	
.LABEL $label$101
	CALL $102(($1 + [80]), $4)
	$5 = [15]
	goto $label$4 
	
.LABEL $label$100
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$45 }
	$5 = [16]
	goto $label$4 
	
.LABEL $label$99
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$0 = CALL db_lowerbound_i64(*($1 + [40]), *((($1 + [40]) + [8])), (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$34 }
	$5 = [17]
	goto $label$4 
	
.LABEL $label$98
	$0 = CALL $58(($1 + [40]), $0)
	$4 = (($1 + [8]) + [8])
	$3 = *($1 + [12])
	if ( ((int_32)$3 != (int_32)*($4)) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$97
	$0 = CALL $58(($1 + [40]), $0)
	$3 = *($1 + [12])
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$51 }
	$5 = [18]
	goto $label$4 
	
.LABEL $label$96
	*($3) = *($0)
	*($1 + [12]) = ($3 + [8])
	goto $label$50 
	
.LABEL $label$95
	CALL $59(($1 + [8]), $0)
	$5 = [19]
	goto $label$4 
	
.LABEL $label$94
	$0 = CALL db_next_i64(*($0 + [64]), ($1 + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$31 }
	$5 = [22]
	goto $label$4 
	
.LABEL $label$93
	$7 = *($1 + [12])
	$6 = *($1 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$30 }
	$5 = [23]
	goto $label$4 
	
.LABEL $label$92
	$8 = ($1 + [68])
	$9 = ($1 + [64])
	$10 = (($1 + [40]) + [8])
	$5 = [24]
	goto $label$4 
	
.LABEL $label$91
	$2 = *($6)
	$3 = *($8)
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$26 }
	$5 = [25]
	goto $label$4 
	
.LABEL $label$90
	$0 = ($3 + [-24])
	$4 = *($0)
	if ( ((int_64)*($4) == (int_64)$2) ){ goto $label$25 }
	$5 = [26]
	goto $label$4 
	
.LABEL $label$89
	$3 = $0
	if ( ((int_32)$11 != (int_32)$0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$88
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$24 }
	$5 = [61]
	goto $label$4 
	
.LABEL $label$87
	if ( ((int_32)*($4 + [60]) == (int_32)($1 + [40])) ){ goto $label$5 }
	$5 = [62]
	goto $label$4 
	
.LABEL $label$86
	CALL eosio_assert([0], [10048])
	$5 = [63]
	goto $label$4 
	
.LABEL $label$85
	if ( $4 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$84
	$0 = CALL db_find_i64(*($1 + [40]), *($10), (int_64)5320316864482508800, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$23 }
	$5 = [28]
	goto $label$4 
	
.LABEL $label$83
	$4 = CALL $58(($1 + [40]), $0)
	if ( ((int_32)*($4 + [60]) == (int_32)($1 + [40])) ){ goto $label$22 }
	$5 = [29]
	goto $label$4 
	
.LABEL $label$82
	CALL eosio_assert([0], [10048])
	$5 = [30]
	goto $label$4 
	
.LABEL $label$81
	$0 = CALL db_next_i64(*($4 + [64]), ($1 + [120]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$19 }
	$5 = [31]
	goto $label$4 
	
.LABEL $label$80
	CALL $58(($1 + [40]), $0)
	$5 = [32]
	goto $label$4 
	
.LABEL $label$79
	CALL $60(($1 + [40]), $4)
	$5 = [33]
	goto $label$4 
	
.LABEL $label$78
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$29 }
	$5 = [34]
	goto $label$4 
	
.LABEL $label$77
	$6 = *($1 + [8])
	$5 = [35]
	goto $label$4 
	
.LABEL $label$76
	if ( ($6 == 0) ){ goto $label$18 }
	$5 = [36]
	goto $label$4 
	
.LABEL $label$75
	*($1 + [12]) = $6
	CALL $9($6)
	$5 = [37]
	goto $label$4 
	
.LABEL $label$74
	$0 = *($1 + [24])
	if ( ($0 == 0) ){ goto $label$17 }
	$5 = [38]
	goto $label$4 
	
.LABEL $label$73
	*($1 + [28]) = $0
	CALL $9($0)
	$5 = [39]
	goto $label$4 
	
.LABEL $label$72
	$4 = *($1 + [64])
	if ( ($4 == 0) ){ goto $label$16 }
	$5 = [40]
	goto $label$4 
	
.LABEL $label$71
	$11 = ($1 + [68])
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$15 }
	$5 = [41]
	goto $label$4 
	
.LABEL $label$70
	$5 = [42]
	goto $label$4 
	
.LABEL $label$69
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	$5 = [43]
	goto $label$4 
	
.LABEL $label$68
	CALL $9($3)
	$5 = [44]
	goto $label$4 
	
.LABEL $label$67
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$14 }
	$5 = [45]
	goto $label$4 
	
.LABEL $label$66
	$0 = *(($1 + [64]))
	goto $label$12 
	
.LABEL $label$65
	$0 = $4
	$5 = [46]
	goto $label$4 
	
.LABEL $label$64
	*($11) = $4
	CALL $9($0)
	$5 = [47]
	goto $label$4 
	
.LABEL $label$63
	$4 = *($1 + [104])
	if ( ($4 == 0) ){ goto $label$11 }
	$5 = [48]
	goto $label$4 
	
.LABEL $label$62
	$11 = ($1 + [108])
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	$5 = [49]
	goto $label$4 
	
.LABEL $label$61
	$5 = [50]
	goto $label$4 
	
.LABEL $label$60
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$5 = [51]
	goto $label$4 
	
.LABEL $label$59
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$7 }
	$5 = [52]
	goto $label$4 
	
.LABEL $label$58
	CALL $9(*(($3 + [56])))
	$5 = [53]
	goto $label$4 
	
.LABEL $label$57
	CALL $9($3)
	$5 = [54]
	goto $label$4 
	
.LABEL $label$56
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	$5 = [55]
	goto $label$4 
	
.LABEL $label$55
	$0 = *(($1 + [104]))
	goto $label$6 
	
.LABEL $label$54
	$0 = $4
	$5 = [56]
	goto $label$4 
	
.LABEL $label$53
	*($11) = $4
	CALL $9($0)
	$5 = [57]
	goto $label$4 
	
.LABEL $label$52
	$global$0 = ($1 + [128])
	return 
	
.LABEL $label$51
	$5 = [21]
	goto $label$4 
	
.LABEL $label$50
	$5 = [19]
	goto $label$4 
	
.LABEL $label$49
	$5 = [3]
	goto $label$4 
	
.LABEL $label$48
	$5 = [1]
	goto $label$4 
	
.LABEL $label$47
	$5 = [2]
	goto $label$4 
	
.LABEL $label$46
	$5 = [16]
	goto $label$4 
	
.LABEL $label$45
	$5 = [6]
	goto $label$4 
	
.LABEL $label$44
	$5 = [9]
	goto $label$4 
	
.LABEL $label$43
	$5 = [7]
	goto $label$4 
	
.LABEL $label$42
	$5 = [9]
	goto $label$4 
	
.LABEL $label$41
	$5 = [64]
	goto $label$4 
	
.LABEL $label$40
	$5 = [9]
	goto $label$4 
	
.LABEL $label$39
	$5 = [15]
	goto $label$4 
	
.LABEL $label$38
	$5 = [12]
	goto $label$4 
	
.LABEL $label$37
	$5 = [12]
	goto $label$4 
	
.LABEL $label$36
	$5 = [11]
	goto $label$4 
	
.LABEL $label$35
	$5 = [14]
	goto $label$4 
	
.LABEL $label$34
	$5 = [22]
	goto $label$4 
	
.LABEL $label$33
	$5 = [21]
	goto $label$4 
	
.LABEL $label$32
	$5 = [18]
	goto $label$4 
	
.LABEL $label$31
	$5 = [20]
	goto $label$4 
	
.LABEL $label$30
	$5 = [35]
	goto $label$4 
	
.LABEL $label$29
	$5 = [24]
	goto $label$4 
	
.LABEL $label$28
	$5 = [27]
	goto $label$4 
	
.LABEL $label$27
	$5 = [25]
	goto $label$4 
	
.LABEL $label$26
	$5 = [27]
	goto $label$4 
	
.LABEL $label$25
	$5 = [60]
	goto $label$4 
	
.LABEL $label$24
	$5 = [27]
	goto $label$4 
	
.LABEL $label$23
	$5 = [33]
	goto $label$4 
	
.LABEL $label$22
	$5 = [30]
	goto $label$4 
	
.LABEL $label$21
	$5 = [33]
	goto $label$4 
	
.LABEL $label$20
	$5 = [30]
	goto $label$4 
	
.LABEL $label$19
	$5 = [32]
	goto $label$4 
	
.LABEL $label$18
	$5 = [37]
	goto $label$4 
	
.LABEL $label$17
	$5 = [39]
	goto $label$4 
	
.LABEL $label$16
	$5 = [47]
	goto $label$4 
	
.LABEL $label$15
	$5 = [59]
	goto $label$4 
	
.LABEL $label$14
	$5 = [42]
	goto $label$4 
	
.LABEL $label$13
	$5 = [44]
	goto $label$4 
	
.LABEL $label$12
	$5 = [46]
	goto $label$4 
	
.LABEL $label$11
	$5 = [57]
	goto $label$4 
	
.LABEL $label$10
	$5 = [58]
	goto $label$4 
	
.LABEL $label$9
	$5 = [50]
	goto $label$4 
	
.LABEL $label$8
	$5 = [54]
	goto $label$4 
	
.LABEL $label$7
	$5 = [53]
	goto $label$4 
	
.LABEL $label$6
	$5 = [56]
	goto $label$4 
	
.LABEL $label$5
	$5 = [63]
	goto $label$4 
	$5
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [16]) = *(*(*($0 + [4])))
	$4 = *(($1 + [32]))
	$5 = *($0)
	$6 = [24]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$8 = ($1 + [28])
	$7 = *($1 + [24])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = $7
	$10 = *($9 + [4])
	if ( ($10 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = $10
	$10 = *($7)
	if ( $10 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = *($9 + [8])
	if ( ((int_32)*($7) == (int_32)$9) ){ goto $label$4 }
	$9 = ($9 + [8])
	
.LOOP $label$7:
	$10 = *($9)
	$9 = ($10 + [8])
	$7 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$4
	$6 = ($6 + [16])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$9 }
	$10 = CALL $1($6)
	goto $label$8 
	
.LABEL $label$9
	$10 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$8
	*($3 + [12]) = $10
	*($3 + [8]) = $10
	*($3 + [16]) = ($10 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	CALL $95(($3 + [32]), ($3 + [24]))
	$4 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($5 + [8]), (int_64)7235161911607853056, *(*($0 + [8])), $4, $10, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$4 >= (uint_64)*($5 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $2($10)
	if ( (uint_64)($4 <= *($5 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)-2688781664649216001) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-2688959070239981568) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [16]) = *($3 + [152])
	CALL $104($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL $105(($3 + [72]))
	$4 = CALL $15([8730])
	if ( ($4 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9082])
	goto $label$8 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4994302105373474816) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3662653801801187328) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [4]
	*($3) = *($3 + [168])
	CALL $106($1, $1, $3)
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-2688781664649216000) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4923678602614013952) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [48]) = *($3 + [120])
	CALL $107($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$1 = (int_64)0
	
.LOOP $label$13:
	$5 = *(($4 + [8729]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9127])
	
.LABEL $label$14
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$13 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$7
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [8]) = *($3 + [160])
	CALL $108($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [32]) = *($3 + [136])
	CALL $109($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [40]) = *($3 + [128])
	CALL $107($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [24]) = *($3 + [144])
	CALL $107($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	$1 = (int_64)4
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*(($3 + [96])) == (int_64)$1), [9058])
	*($3 + [68]) = [0]
	*($3 + [64]) = [6]
	*($3 + [56]) = *($3 + [64])
	CALL $108($0, (int_64)6138663591592764928, ($3 + [56]))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*(($3 + [112])))
	
.LABEL $label$1
	CALL $44([0])
	$global$0 = ($3 + [176])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9797])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9842])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9892])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [56])))
	
.LABEL $label$13
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [56])))
	
.LABEL $label$16
	CALL $9($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	$9 = *(($1 + [72]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5573886407878901760, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $1($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $116(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $104 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = [0]
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $7)
	*($4 + [288]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $115(($4 + [24]), ($4 + [288]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($8 = (($4 + [272]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [272]) = $9
	*($4 + [256]) = $9
	$3 = *($8)
	*((($4 + [288]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$9 = *($4 + [272])
	*($4 + [40]) = $9
	*($4 + [288]) = $9
	*(($4 + [64])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $1
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $1
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = *($4 + [248])
	$0 = *($4 + [240])
	$1 = *($4 + [232])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	CALL $112(($4 + [24]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = ($1 + [8])
	$7 = *(($1 + [32]))
	$8 = *($1)
	$9 = [24]
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$11 = ($1 + [28])
	$10 = *($1 + [24])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = $10
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = $3
	$3 = *($10)
	if ( $3 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = *($12 + [8])
	if ( ((int_32)*($10) == (int_32)$12) ){ goto $label$6 }
	$12 = ($12 + [8])
	
.LOOP $label$9:
	$3 = *($12)
	$12 = ($3 + [8])
	$10 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($10)) ){ goto $label$9 }
	
.LABEL $label$6
	$9 = ($9 + [16])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$11 }
	$3 = CALL $1($9)
	goto $label$10 
	
.LABEL $label$11
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$10
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	CALL $95(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [40]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$14 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $2($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$12 }
	
.LABEL $label$13
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$12
	$global$0 = ($5 + [48])
}

void .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [48]) = $1
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$1 = *($0)
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*($2 + [32]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)7235161911607853056, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $84(($2 + [8]), $3)
	if ( ((int_32)*($3 + [36]) == (int_32)($2 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [10048])
	
.LABEL $label$4
	$1 = *($0)
	*($2 + [64]) = ($2 + [48])
	CALL $99(($2 + [8]), $3, $1, ($2 + [64]))
	$4 = *($2 + [32])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($2) = ($2 + [48])
	*($2 + [88]) = $5
	if ( ((int_64)$1 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [9945])
	
.LABEL $label$5
	*($2 + [68]) = $2
	*($2 + [64]) = ($2 + [8])
	*($2 + [72]) = ($2 + [88])
	*(($0 = CALL $7([48])) + [16]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*($0 + [24]) = ($0 + [28])
	*($0 + [36]) = ($2 + [8])
	CALL $100(($2 + [64]), $0)
	*($2 + [80]) = $0
	$1 = *($0)
	*($2 + [64]) = $1
	$4 = *($0 + [40])
	*($2 + [60]) = $4
	$6 = (($2 + [8]) + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($2 + [40]))) ){ goto $label$8 }
	*($3 + [8]) = $1
	*($3 + [16]) = $4
	*($2 + [80]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	$0 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($2 + [32]), ($2 + [80]), ($2 + [64]), ($2 + [60]))
	$0 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $86(($0 + [24]), *(($0 + [28])))
	CALL $9($0)
	
.LABEL $label$6
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (($2 + [8]) + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $86(($3 + [24]), *(($3 + [28])))
	CALL $9($3)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($2 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $4
	
.LABEL $label$9
	*($6) = $4
	CALL $9($0)
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [24])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [9249])
	$1 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $86($0, *($1))
	CALL $86($0, *($1 + [4]))
	CALL $9($1)
	
.LABEL $label$1
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = *(*($3))
	$6 = ($1 + [8])
	$7 = *(($1 + [32]))
	$8 = *($1)
	$9 = [24]
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$11 = ($1 + [28])
	$10 = *($1 + [24])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = $10
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = $3
	$3 = *($10)
	if ( $3 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = *($12 + [8])
	if ( ((int_32)*($10) == (int_32)$12) ){ goto $label$6 }
	$12 = ($12 + [8])
	
.LOOP $label$9:
	$3 = *($12)
	$12 = ($3 + [8])
	$10 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($10)) ){ goto $label$9 }
	
.LABEL $label$6
	$9 = ($9 + [16])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$11 }
	$3 = CALL $1($9)
	goto $label$10 
	
.LABEL $label$11
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$10
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	CALL $95(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [40]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$14 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $2($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$12 }
	
.LABEL $label$13
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$12
	$global$0 = ($5 + [48])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9412])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([48])) + [16]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36]) = $0
	*($5 + [24]) = ($5 + [28])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $132(($3 + [32]), ($3 + [24]))
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $91(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $86(($1 + [24]), *(($1 + [28])))
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9249])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $129(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9249])
	$1 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $45($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)5320316864482508800, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $58($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $65(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9996])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*(*($5 + [8]) + [4]))
	$8 = ($1 + [16])
	$9 = ($1 + [8])
	$6 = [1]
	if ( ((int_32)*(*($5 + [12])) < (int_32)[1]) ){ goto $label$5 }
	$6 = (*(*(*($5 + [16]) + [4]) + [24]) + [1])
	
.LABEL $label$5
	*($1 + [24]) = $6
	*($1 + [28]) = [0]
	*($1 + [32]) = *(*($5 + [20]))
	*($1 + [40]) = *(*($5 + [24]))
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = $2
	$5 = ($6 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-7])
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	*($3 + [32]) = $8
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [28])
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [48])
	*($3 + [56]) = ($1 + [56])
	CALL $87(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($4 + [8]), (int_64)5320316864482508800, *(*($0 + [8])), $7, $5, [57])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$7 = *(($4 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [68]) = CALL db_idx64_store($7, (int_64)5320316864482508800, $10, $11, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $7(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $45($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $9($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $127(CALL $126($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9249])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	$7 = ((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [48])))
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$8 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$8 = (Rounds 0)($7)
	
.LABEL $label$3
	*($1 + [48]) = $8
	$8 = *($1)
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-7])
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [16])
	*($5 + [52]) = ($1 + [24])
	*($5 + [56]) = ($1 + [28])
	*($5 + [60]) = ($1 + [32])
	*($5 + [64]) = ($1 + [40])
	*($5 + [68]) = ($1 + [48])
	*($5 + [72]) = ($1 + [56])
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [40]) = *($6)
	if ( (CALL $17(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$4 = *($1 + [68])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$7 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5320316864482508800, ($5 + [32]), $8)
	*(($1 + [68])) = $4
	
.LABEL $label$7
	CALL db_idx64_update($4, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [80])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $45($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9249])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9249])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9249])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $129(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	float_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	$7 = *($1)
	$8 = CALL $43(((float_64)((float_64)(CASTING float_64)(uint_64 *($1 + [40])) / (float_64)*(*($3 + [4]))) * (float_64)*(*($3 + [8]))))
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)2147483648) ){ goto $label$4 }
	$9 = [-2147483648]
	goto $label$3 
	
.LABEL $label$4
	$9 = (CASTING int_32)(float_64 $8)
	
.LABEL $label$3
	*(*($3)) = $9
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)(CASTING int_64)(int_32 $9))
	$9 = ($1 + [48])
	$10 = ($1 + [40])
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$5 }
	CALL eosio_assert([0], [9704])
	
.LABEL $label$5
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-7])
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [64]) = $10
	*($5 + [68]) = $9
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [16])
	*($5 + [52]) = ($1 + [24])
	*($5 + [56]) = ($1 + [28])
	*($5 + [60]) = ($1 + [32])
	*($5 + [72]) = ($1 + [56])
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $3, [57])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($6)
	if ( (CALL $17(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [68])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5320316864482508800, ($5 + [32]), $7)
	*(($1 + [68])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9412])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([80])) + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [60])
	CALL $131(($3 + [32]), ($3 + [24]))
	*($5 + [72]) = [-1]
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $51(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [56])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	float_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	$7 = *($1)
	$8 = CALL $43(((float_64)((float_64)(CASTING float_64)(uint_64 *($1 + [40])) / (float_64)*(*($3 + [4]))) * (float_64)*(*($3 + [8]))))
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)2147483648) ){ goto $label$4 }
	$9 = [-2147483648]
	goto $label$3 
	
.LABEL $label$4
	$9 = (CASTING int_32)(float_64 $8)
	
.LABEL $label$3
	*(*($3)) = $9
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)(CASTING int_64)(int_32 $9))
	$9 = ($1 + [48])
	$10 = ($1 + [40])
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$5 }
	CALL eosio_assert([0], [9704])
	
.LABEL $label$5
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-7])
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [64]) = $10
	*($5 + [68]) = $9
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [16])
	*($5 + [52]) = ($1 + [24])
	*($5 + [56]) = ($1 + [28])
	*($5 + [60]) = ($1 + [32])
	*($5 + [72]) = ($1 + [56])
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $3, [57])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($6)
	if ( (CALL $17(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [68])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5320316864482508800, ($5 + [32]), $7)
	*(($1 + [68])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $15($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL $7($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $35($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $38($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9607])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9653])
	
.LABEL $label$2
	$6 = ($1 + [16])
	*($5 + [16]) = *($6)
	$7 = *($1)
	$8 = *($3 + [16])
	$9 = *($1 + [24])
	$10 = ((float_64)((float_64)CALL $43(((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.45)) + (float_64)(CASTING float_64)(uint_64 $9)) + (float_64)(CASTING float_64)(int_32 *(*($3 + [4]))))
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$9 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$9 = (Rounds 0)($10)
	
.LABEL $label$3
	*($1 + [24]) = $9
	$9 = *($1 + [40])
	$10 = ((float_64)CALL $43(((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.05)) + (float_64)(CASTING float_64)(uint_64 $9))
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$9 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$9 = (Rounds 0)($10)
	
.LABEL $label$5
	*($1 + [40]) = $9
	*($1 + [32]) = *(*($3 + [8]))
	if ( ((int_32)*(*($3 + [12])) != (int_32)[1]) ){ goto $label$7 }
	CALL $88($8, *(*($3 + [20])))
	*($6) = (int_64)2
	
.LABEL $label$7
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$8 }
	CALL eosio_assert([0], [9704])
	
.LABEL $label$8
	$8 = ($1 + [32])
	$11 = ($1 + [40])
	$12 = ($1 + [24])
	$3 = *($1 + [48])
	$13 = ( *(($1 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($13 + [52])
	$9 = (CASTING uint_64)(uint_32 $13)
	$13 = ($1 + [48])
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$9 }
	if ( ($3 <= [513]) ){ goto $label$11 }
	$4 = CALL $1($3)
	goto $label$10 
	
.LABEL $label$11
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$10
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $6
	*($5 + [44]) = $12
	*($5 + [48]) = $8
	*($5 + [52]) = $11
	*($5 + [56]) = $13
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [60]) = ($1 + [60])
	CALL $83(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL $2($4)
	
.LABEL $label$12
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($5 + [32]) = *($6)
	if ( (CALL $17(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$14 }
	$1 = ($1 + [72])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$15 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5573886407878901760, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$15
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$14
	$global$0 = ($5 + [64])
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	*($3 + [40]) = (int_64)0
	$5 = CALL db_find_i64($4, $4, (int_64)7235161911607853056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $84(($3 + [16]), $5)
	if ( ((int_32)*($5 + [36]) == (int_32)($3 + [16])) ){ goto $label$4 }
	CALL eosio_assert([0], [10048])
	
.LABEL $label$4
	*($3 + [64]) = ((int_64)*($5 + [8]) + (int_64)( $1 ? (int_64))((int_64)0 - $1) : $2 ))
	$4 = *($0)
	*($3 + [88]) = ($3 + [64])
	CALL $89(($3 + [16]), $5, $4, ($3 + [88]))
	$2 = *($3 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($3 + [88]) = *($0)
	if ( ((int_64)$4 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [9945])
	
.LABEL $label$5
	*($3 + [68]) = ($3 + [8])
	*($3 + [64]) = ($3 + [16])
	*($3 + [72]) = ($3 + [88])
	*(($0 = CALL $7([48])) + [16]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*($0 + [24]) = ($0 + [28])
	*($0 + [36]) = ($3 + [16])
	CALL $90(($3 + [64]), $0)
	*($3 + [80]) = $0
	$4 = *($0)
	*($3 + [64]) = $4
	$2 = *($0 + [40])
	*($3 + [60]) = $2
	$6 = (($3 + [16]) + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [48]))) ){ goto $label$8 }
	*($5 + [8]) = $4
	*($5 + [16]) = $2
	*($3 + [80]) = [0]
	*($5) = $0
	*($6) = ($5 + [24])
	$0 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($3 + [40]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	$0 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $86(($0 + [24]), *(($0 + [28])))
	CALL $9($0)
	
.LABEL $label$6
	$2 = *($3 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (($3 + [16]) + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $86(($5 + [24]), *(($5 + [28])))
	CALL $9($5)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($3 + [40]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $2
	
.LABEL $label$9
	*($6) = $2
	CALL $9($0)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $7($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $26([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $31 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9249])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9249])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9249])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}