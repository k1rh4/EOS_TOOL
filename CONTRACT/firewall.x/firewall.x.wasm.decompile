(data (i32.const 4) "\b0i\00\00")
(data (i32.const 16) "invalid token\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "singleton does not exist\00")
(data (i32.const 128) "error reading iterator\00")
(data (i32.const 160) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 224) "invalid symbol name\00")
(data (i32.const 256) "read\00")
(data (i32.const 272) "cannot pass end iterator to modify\00")
(data (i32.const 320) "cannot create objects in table of another contract\00")
(data (i32.const 384) "write\00")
(data (i32.const 400) "object passed to modify is not in multi_index\00")
(data (i32.const 448) "cannot modify objects in table of another contract\00")
(data (i32.const 512) "updater cannot change primary key when modifying an object\00")
(data (i32.const 576) "config\00")
(data (i32.const 592) "cannot pass end iterator to erase\00")
(data (i32.const 640) "cannot increment end iterator\00")
(data (i32.const 672) "malicious\00")
(data (i32.const 688) "contractlst\00")
(data (i32.const 704) "blacklst\00")
(data (i32.const 720) "whitelst\00")
(data (i32.const 736) "loglst\00")
(data (i32.const 752) "member\00")
(data (i32.const 768) "extends\00")
(data (i32.const 784) "object passed to erase is not in multi_index\00")
(data (i32.const 832) "cannot erase objects in table of another contract\00")
(data (i32.const 896) "attempt to remove object that was not in multi_index\00")
(data (i32.const 960) "get\00")
(data (i32.const 976) "scope should be self\00")
(data (i32.const 1008) "you have not permission to manage this dapp\00")
(data (i32.const 1056) "send less account one time\00")
(data (i32.const 1088) "dapp no register\00")
(data (i32.const 1120) "you are not dapp manage\00")
(data (i32.const 1152) "read transaction failed\00")
(data (i32.const 1184) "unexpected error in fixed_key constructor\00")
(data (i32.const 1232) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1296) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1360) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1408) "\90\05\00\00")
(data (i32.const 1424) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1472) "dapp no exist\00")
(data (i32.const 1504) "don\'t allow account to directly transfer to contract\00")
(data (i32.const 1568) "can\'t transfer to self\00")
(data (i32.const 1600) "invalid quantity in transfer\00")
(data (i32.const 1632) "non positive quantity is disallowed in transfer\00")
(data (i32.const 1680) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1744) "donate amount should big than minimum\00")
(data (i32.const 1792) "eosio.token\00")
(data (i32.const 1808) "only alow EOS\00")
(data (i32.const 1824) "memo has more than 256 bytes\00")
(data (i32.const 1856) "account not existed\00")
(data (i32.const 1888) "manage account not existed\00")
(data (i32.const 1920) "attempt to add asset with different symbol\00")
(data (i32.const 1968) "addition underflow\00")
(data (i32.const 2000) "addition overflow\00")
(data (i32.const 2032) "init\00")
(data (i32.const 2048) "cleartable\00")
(data (i32.const 2064) "transfer\00")
(data (i32.const 2080) "onerror\00")
(data (i32.const 2096) "eosio\00")
(data (i32.const 2112) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 10576) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx256_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx256_store" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$17 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$18 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$19 (param i32)))
(import "env" "has_auth" (func $fimport$20 (param i64) (result i32)))
(import "env" "is_account" (func $fimport$21 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$27 (param i64)))
(import "env" "require_auth2" (func $fimport$28 (param i64 i64)))
(import "env" "sha256" (func $fimport$29 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$30 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN9firewallx8firewall4initEN5eosio14extended_assetEyyyy" (func $5))
(export "_ZN9firewallx8firewall10cleartableENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $14))
(export "_ZN9firewallx8firewall8addwhiteENSt3__16vectorIyNS1_9allocatorIyEEEEy" (func $41))
(export "_ZN9firewallx8firewall7rmwhiteENSt3__16vectorIyNS1_9allocatorIyEEEEy" (func $52))
(export "_ZN9firewallx8firewall8addblackENSt3__16vectorIyNS1_9allocatorIyEEEEy" (func $53))
(export "_ZN9firewallx8firewall7rmblackENSt3__16vectorIyNS1_9allocatorIyEEEEy" (func $54))
(export "_ZN9firewallx8firewall12addmaliciousENSt3__16vectorI11checksum256NS1_9allocatorIS3_EEEE" (func $55))
(export "_ZN9firewallx8firewall10rmaliciousENSt3__16vectorI11checksum256NS1_9allocatorIS3_EEEE" (func $59))
(export "_ZN9firewallx8firewall11addcontractENSt3__16vectorIyNS1_9allocatorIyEEEE" (func $61))
(export "_ZN9firewallx8firewall10rmcontractENSt3__16vectorIyNS1_9allocatorIyEEEE" (func $62))
(export "_ZN9firewallx8firewall10addextendsENSt3__16vectorIyNS1_9allocatorIyEEEENS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE" (func $63))
(export "_ZN9firewallx8firewall9pausedappEy" (func $68))
(export "_ZN9firewallx8firewall10resumedappEy" (func $73))
(export "_ZN9firewallx8firewall6trxlogE11checksum256" (func $74))
(export "_ZN9firewallx8firewall6inllogEy11checksum256" (func $75))
(export "_ZN9firewallx8firewall8clearlogEy" (func $79))
(export "_ZN9firewallx8firewall4statEv" (func $83))
(export "_ZN9firewallx8firewall7inlstatEy" (func $84))
(export "_ZN9firewallx8firewall8setrulesEybbbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $85))
(export "_ZN9firewallx8firewall2onERKN5eosio8currency8transferEy" (func $88))
(export "_ZN9firewallx8firewall5applyEyy" (func $93))
(export "apply" (func $117))
(export "malloc" (func $119))
(export "free" (func $122))
(export "memcmp" (func $136))
(export "strlen" (func $137))
(table $0 20 20 anyfunc)
(elem (i32.const 0) $138 $41 $74 $5 $73 $61 $52 $14 $54 $63 $55 $85 $83 $84 $75 $68 $53 $62 $79 $59)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $112(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [16]) = (int_64)0
	$1 = [0]
	*($5 + [24]) = [0]
	$6 = (*($5 + [4]) - *($5))
	$3 = int_32($6 >> [5])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$6 }
	$1 = CALL $123($6)
	*(($5 + [24])) = ($1 + ($3 << [5]))
	*($5 + [16]) = $1
	*($5 + [20]) = $1
	$6 = *($5)
	$3 = (*($5 + [4]) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $6, $3)
	$1 = (*($5 + [20]) + $3)
	*($5 + [20]) = $1
	
.LABEL $label$7
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$4 = *((*($3) + $4))
	
.LABEL $label$8
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	$1 = ($1 - *($5 + [16]))
	$2 = int_32($1 >> [5])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$5 }
	$1 = CALL $123($1)
	*(($5 + [40])) = ($1 + ($2 << [5]))
	*($5 + [32]) = $1
	*($5 + [36]) = $1
	$6 = *($5 + [16])
	$2 = (*($5 + [20]) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	*($5 + [36]) = ($1 + $2)
	
.LABEL $label$9
	CALL void $3((int_32 ($5 + [32])), (int_32 $4))
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$10 }
	*($5 + [36]) = $1
	CALL $124($1)
	
.LABEL $label$10
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$11 }
	*($5 + [20]) = $1
	CALL $124($1)
	
.LABEL $label$11
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$12 }
	*($5 + [4]) = $1
	CALL $124($1)
	
.LABEL $label$12
	*([0] + [4]) = ($5 + [48])
	return [1]
	
.LABEL $label$6
	CALL $133(($5 + [16]))
	
.LABEL $label$5
	CALL $133(($5 + [32]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $106(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [16]) = (int_64)0
	$1 = [0]
	*($5 + [24]) = [0]
	$6 = (*($5 + [4]) - *($5))
	$3 = int_32($6 >> [3])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$6 }
	$1 = CALL $123($6)
	*(($5 + [24])) = ($1 + ($3 << [3]))
	*($5 + [16]) = $1
	*($5 + [20]) = $1
	$6 = *($5)
	$3 = (*($5 + [4]) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $6, $3)
	$1 = (*($5 + [20]) + $3)
	*($5 + [20]) = $1
	
.LABEL $label$7
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$4 = *((*($3) + $4))
	
.LABEL $label$8
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	$1 = ($1 - *($5 + [16]))
	$2 = int_32($1 >> [3])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$5 }
	$1 = CALL $123($1)
	*(($5 + [40])) = ($1 + ($2 << [3]))
	*($5 + [32]) = $1
	*($5 + [36]) = $1
	$6 = *($5 + [16])
	$2 = (*($5 + [20]) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	*($5 + [36]) = ($1 + $2)
	
.LABEL $label$9
	CALL void $3((int_32 ($5 + [32])), (int_32 $4))
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$10 }
	*($5 + [36]) = $1
	CALL $124($1)
	
.LABEL $label$10
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$11 }
	*($5 + [20]) = $1
	CALL $124($1)
	
.LABEL $label$11
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$12 }
	*($5 + [4]) = $1
	CALL $124($1)
	
.LABEL $label$12
	*([0] + [4]) = ($5 + [48])
	return [1]
	
.LABEL $label$6
	CALL $133(($5 + [16]))
	
.LABEL $label$5
	CALL $133(($5 + [32]))
	(unreachable)
	return (unreachable)
}

void .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [224])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $116($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$11 = (*([0] + [4]) - [160])
	$13 = $11
	*([0] + [4]) = $11
	$2 = *($1 + [4])
	$12 = *($1)
	$1 = [0]
	$9 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	CALL read_action_data($9, $3)
	
.LABEL $label$1
	*($13 + [32]) = (int_64)0
	*($13 + [48]) = (int_64)0
	*($13 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$10 = (int_64)5462355
	
.LOOP $label$5:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($11, [224])
	*($13 + [64]) = (int_64)0
	*($13 + [56]) = (int_64)0
	*($13 + [72]) = (int_64)0
	*($13 + [80]) = (int_64)0
	*($13 + [140]) = $9
	*($13 + [136]) = $9
	*($13 + [144]) = ($9 + $3)
	*($13 + [88]) = ($13 + [136])
	*($13 + [112]) = ($13 + [32])
	CALL $115(($13 + [112]), ($13 + [88]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	*(($1 = (($13 + [88]) + [16]))) = *((($13 + [32]) + [16]))
	*(($11 = (($13 + [88]) + [8]))) = *((($13 + [32]) + [8]))
	*($13 + [88]) = *($13 + [32])
	$10 = *(($13 + [80]))
	$6 = *(($13 + [72]))
	$5 = *(($13 + [64]))
	$4 = *(($13 + [56]))
	*((($13 + [112]) + [16])) = *($1)
	*((($13 + [112]) + [8])) = *($11)
	*($13 + [112]) = *($13 + [88])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$12 = *((*($1) + $12))
	
.LABEL $label$9
	$7 = *((($13 + [112]) + [16]))
	*((($13 + [136]) + [16])) = $7
	$8 = *((($13 + [112]) + [8]))
	*((($13 + [136]) + [8])) = $8
	*((($13 + [8]) + [16])) = $7
	*((($13 + [8]) + [8])) = $8
	$7 = *($13 + [112])
	*($13 + [136]) = $7
	*($13 + [8]) = $7
	CALL void $1((int_32 ($13 + [8])), (int_32 $4), (int_64 $5), (int_64 $6), (int_64 $10), (int_64 $12))
	*([0] + [4]) = ($13 + [160])
	return [1]
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $33(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $114(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $124(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [52]) = $1
	*($6 + [48]) = $1
	*($6 + [56]) = ($1 + $3)
	CALL $106(($6 + [48]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*($6 + [56]) - *($6 + [52])) > (uint_32)[7]), [256])
	CALL memcpy(($6 + [24]), *($6 + [52]), [8])
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($6 + [32]) = (int_64)0
	$1 = [0]
	*($6 + [40]) = [0]
	$7 = (*($6 + [12]) - *($6 + [8]))
	$3 = int_32($7 >> [3])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$6 }
	$1 = CALL $123($7)
	*(($6 + [40])) = ($1 + ($3 << [3]))
	*($6 + [32]) = $1
	*($6 + [36]) = $1
	$7 = *($6 + [8])
	$3 = (*($6 + [12]) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $7, $3)
	$1 = (*($6 + [36]) + $3)
	*($6 + [36]) = $1
	
.LABEL $label$7
	$3 = ($0 + int_32($2 >> [1]))
	$4 = *(($6 + [24]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($3) + $5))
	
.LABEL $label$8
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	$1 = ($1 - *($6 + [32]))
	$2 = int_32($1 >> [3])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$5 }
	$1 = CALL $123($1)
	*(($6 + [56])) = ($1 + ($2 << [3]))
	*($6 + [48]) = $1
	*($6 + [52]) = $1
	$7 = *($6 + [32])
	$2 = (*($6 + [36]) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $7, $2)
	*($6 + [52]) = ($1 + $2)
	
.LABEL $label$9
	CALL void $3((int_32 ($6 + [48])), (int_32 $4), (int_64 $5))
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$10 }
	*($6 + [52]) = $1
	CALL $124($1)
	
.LABEL $label$10
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$11 }
	*($6 + [36]) = $1
	CALL $124($1)
	
.LABEL $label$11
	$1 = *($6 + [8])
	if ( ($1 == 0) ){ goto $label$12 }
	*($6 + [12]) = $1
	CALL $124($1)
	
.LABEL $label$12
	*([0] + [4]) = ($6 + [64])
	return [1]
	
.LABEL $label$6
	CALL $133(($6 + [32]))
	
.LABEL $label$5
	CALL $133(($6 + [48]))
	(unreachable)
	return (unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [448])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [1920])
	$6 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1968])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [2000])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [512])
	$3 = *($1 + [44])
	$5 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [52])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $71($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [320])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $123([80])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*($4 + [52]) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [64]) = $1
	CALL $92(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [68])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $32(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$9 }
	CALL $124(*(($3 + [52])))
	
.LABEL $label$9
	CALL $124($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = *($0)
	$5 = *($5 + [8])
	*($1 + [16]) = *($5)
	$6 = *(($5 + [8]))
	$3 = *(($5 + [16]))
	*($1 + [40]) = [0]
	*(($1 + [32])) = $3
	*(($1 + [24])) = $6
	*($1 + [56]) = CALL current_time()
	$5 = *($1 + [44])
	$4 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [52])
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $71($8, $1)
	$6 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-7880044409994084352, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN9firewallx8firewall5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [400])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2032]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)3) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2048]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$7 }
	*(($11 + [392])) = [0]
	*($11 + [376]) = (int_64)-1
	*($11 + [384]) = (int_64)0
	$8 = *($0)
	*($11 + [360]) = $8
	*($11 + [368]) = $8
	$6 = [0]
	$3 = CALL db_find_i64($8, $8, (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $7(($11 + [360]), $3)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [360])), [32])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [96])
	CALL memcpy(($11 + [304]), $6, [56])
	CALL memcpy(($0 + [72]), ($11 + [304]), [56])
	$4 = *($11 + [384])
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = ($11 + [388])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $124($3)
	
.LABEL $label$18
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($11 + [384]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $4
	
.LABEL $label$15
	*($5) = $4
	CALL $124($6)
	
.LABEL $label$7
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2064]
	$9 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$24 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$3 = ($3 + [165])
	goto $label$22 
	
.LABEL $label$24
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$20
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$19 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$26 }
	CALL $94(($11 + [304]))
	CALL _ZN9firewallx8firewall2onERKN5eosio8currency8transferEy($0, ($11 + [304]), $1)
	if ( ((*($11 + [336]) & [1]) == 0) ){ goto $label$25 }
	CALL $124(*(($11 + [344])))
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$25 }
	if ( ((int_64)$2 <= (int_64)3626093248780435455) ){ goto $label$44 }
	if ( ((int_64)$2 > (int_64)4923678793119301631) ){ goto $label$43 }
	if ( ((int_64)$2 <= (int_64)3626152949955035135) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)3626152949955035136) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)3626280907586221440) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)3626460632129208320) ){ goto $label$25 }
	*($11 + [284]) = [0]
	*($11 + [280]) = [1]
	*($11 + [16 align=4]) = *($11 + [280])
	CALL $97($0, ($11 + [16]))
	goto $label$25 
	
.LABEL $label$44
	if ( ((int_64)$2 <= (int_64)-4859021266901385217) ){ goto $label$42 }
	if ( ((int_64)$2 <= (int_64)-4417049072737714177) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)-4417049072737714176) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4157508551318700032) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)-3604258283319197696) ){ goto $label$25 }
	*($11 + [204]) = [0]
	*($11 + [200]) = [2]
	*($11 + [96 align=4]) = *($11 + [200])
	CALL $101($0, ($11 + [96]))
	goto $label$25 
	
.LABEL $label$43
	if ( ((int_64)$2 <= (int_64)8421045207927095295) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)8422730325997649920) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)8422604521573711872) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$25 }
	*($11 + [300]) = [0]
	*($11 + [296]) = [3]
	*($11) = *($11 + [296])
	CALL $95($0, $11)
	goto $label$25 
	
.LABEL $label$42
	if ( ((int_64)$2 > (int_64)-4860202988790743041) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)-6217917317265227776) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-4994024517569527808) ){ goto $label$25 }
	*($11 + [212]) = [0]
	*($11 + [208]) = [4]
	*($11 + [88 align=4]) = *($11 + [208])
	CALL $100($0, ($11 + [88]))
	goto $label$25 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)3626093248780435456) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)3626112722819756544) ){ goto $label$25 }
	*($11 + [236]) = [0]
	*($11 + [232]) = [5]
	*($11 + [64 align=4]) = *($11 + [232])
	CALL $99($0, ($11 + [64]))
	goto $label$25 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)-4859021266901385216) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-4847888168998928384) ){ goto $label$25 }
	*($11 + [276]) = [0]
	*($11 + [272]) = [6]
	*($11 + [24 align=4]) = *($11 + [272])
	CALL $97($0, ($11 + [24]))
	goto $label$25 
	
.LABEL $label$39
	if ( ((int_64)$2 == (int_64)4923678793119301632) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)4923678922967252992) ){ goto $label$25 }
	*($11 + [292]) = [0]
	*($11 + [288]) = [7]
	*($11 + [8 align=4]) = *($11 + [288])
	CALL $96($0, ($11 + [8]))
	goto $label$25 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)-4860202988790743040) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-4859644436159660032) ){ goto $label$25 }
	*($11 + [260]) = [0]
	*($11 + [256]) = [8]
	*($11 + [40 align=4]) = *($11 + [256])
	CALL $97($0, ($11 + [40]))
	goto $label$25 
	
.LABEL $label$37
	*($11 + [156]) = [0]
	*($11 + [152]) = [9]
	*($11 + [144 align=4]) = *($11 + [152])
	CALL $105($0, ($11 + [144]))
	goto $label$25 
	
.LABEL $label$36
	*($11 + [252]) = [0]
	*($11 + [248]) = [10]
	*($11 + [48 align=4]) = *($11 + [248])
	CALL $98($0, ($11 + [48]))
	goto $label$25 
	
.LABEL $label$35
	*($11 + [172]) = [0]
	*($11 + [168]) = [11]
	*($11 + [128 align=4]) = *($11 + [168])
	CALL $104($0, ($11 + [128]))
	goto $label$25 
	
.LABEL $label$34
	*($11 + [188]) = [0]
	*($11 + [184]) = [12]
	*($11 + [112 align=4]) = *($11 + [184])
	CALL $103($0, ($11 + [112]))
	goto $label$25 
	
.LABEL $label$33
	*($11 + [180]) = [0]
	*($11 + [176]) = [13]
	*($11 + [120 align=4]) = *($11 + [176])
	CALL $100($0, ($11 + [120]))
	goto $label$25 
	
.LABEL $label$32
	*($11 + [196]) = [0]
	*($11 + [192]) = [14]
	*($11 + [104 align=4]) = *($11 + [192])
	CALL $102($0, ($11 + [104]))
	goto $label$25 
	
.LABEL $label$31
	*($11 + [220]) = [0]
	*($11 + [216]) = [15]
	*($11 + [80 align=4]) = *($11 + [216])
	CALL $100($0, ($11 + [80]))
	goto $label$25 
	
.LABEL $label$30
	*($11 + [268]) = [0]
	*($11 + [264]) = [16]
	*($11 + [32 align=4]) = *($11 + [264])
	CALL $97($0, ($11 + [32]))
	goto $label$25 
	
.LABEL $label$29
	*($11 + [228]) = [0]
	*($11 + [224]) = [17]
	*($11 + [72 align=4]) = *($11 + [224])
	CALL $99($0, ($11 + [72]))
	goto $label$25 
	
.LABEL $label$28
	*($11 + [164]) = [0]
	*($11 + [160]) = [18]
	*($11 + [136 align=4]) = *($11 + [160])
	CALL $100($0, ($11 + [136]))
	goto $label$25 
	
.LABEL $label$27
	*($11 + [244]) = [0]
	*($11 + [240]) = [19]
	*($11 + [56 align=4]) = *($11 + [240])
	CALL $98($0, ($11 + [56]))
	
.LABEL $label$25
	*([0] + [4]) = ($11 + [400])
}

void .FUNC $138 ()
{
	(unreachable)
}

int_32 .FUNC $123 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10668])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($4, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($4 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($4 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [48]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10560])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10368]
	$1 = (((int_32)$2 * (int_32)[12]) + [10368])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	return CALL $131($0, $1, $2, $3, CALL $137($3))
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0)
	$8 = ($7 & [1])
	if ( $8 ){ goto $label$3 }
	$5 = uint_32($7 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($5 - $1)
	$2 = ( $6 ? $2 : ($6 <= $2) )
	if ( $8 ){ goto $label$5 }
	$8 = [10]
	goto $label$4 
	
.LABEL $label$5
	$7 = *($0)
	$8 = (($7 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)(($2 - $5) + $8) >= (uint_32)$4) ){ goto $label$6 }
	CALL $127($0, $8, ((($5 + $4) - $2) - $8), $5, $1, $2, $4, $3)
	return $0
	
.LABEL $label$6
	if ( ($7 & [1]) ){ goto $label$12 }
	$8 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = $4
	$7 = $4
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = ($6 - $2)
	if ( ($6 == 0) ){ goto $label$14 }
	$7 = ($8 + $1)
	if ( ((uint_32)$2 <= (uint_32)$4) ){ goto $label$13 }
	if ( ($4 == 0) ){ goto $label$15 }
	CALL memmove($7, $3, $4)
	
.LABEL $label$15
	CALL memmove(($7 + $4), ($7 + $2), $6)
	goto $label$7 
	
.LABEL $label$14
	$7 = $4
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$17 }
	if ( ((uint_32)($8 + $5) <= (uint_32)$3) ){ goto $label$17 }
	if ( ((uint_32)($7 + $2) <= (uint_32)$3) ){ goto $label$18 }
	if ( ($2 == 0) ){ goto $label$19 }
	CALL memmove($7, $3, $2)
	
.LABEL $label$19
	$7 = ($4 - $2)
	$3 = ($3 + $4)
	$1 = ($2 + $1)
	$2 = [0]
	goto $label$16 
	
.LABEL $label$18
	$3 = ($3 + ($4 - $2))
	
.LABEL $label$17
	$7 = $4
	
.LABEL $label$16
	$4 = ($8 + $1)
	CALL memmove(($4 + $7), ($4 + $2), $6)
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL memmove(($8 + $1), $3, $7)
	$4 = $7
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	$4 = (($4 - $2) + $5)
	if ( (*($0) & [1]) ){ goto $label$21 }
	*($0) = ($4 << [1])
	goto $label$20 
	
.LABEL $label$21
	*($0 + [4]) = $4
	
.LABEL $label$20
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $133 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $123($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10662]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10664])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10662]) = [1]
	$7 = ($7 << [16])
	*([0] + [10664]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10664])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10664]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10662]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10662]) = [1]
	$3 = ($3 << [16])
	*([0] + [10664]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10664])
	
.LABEL $label$8
	*([0] + [10664]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $121($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10576])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $127($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $123(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $124($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $124($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $124($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $123(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $124($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $124($1)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $125 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*(($8 + [40])) = [0]
	*($8 + [16]) = $2
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$6 = *($0)
	*($8 + [8]) = $6
	$0 = [0]
	$5 = CALL db_find_i64($6, $2, (int_64)-7880044409994084352, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $26(($8 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [64]) == (int_32)($8 + [8])), [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1088])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$2), [1120])
	$3 = CALL has_auth($2)
	$4 = *($8 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$7 = ($8 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $124(*(($5 + [52])))
	
.LABEL $label$7
	CALL $124($5)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($8 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($7) = $4
	CALL $124($0)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $3
}

int_64 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	$1 = CALL transaction_size()
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	CALL eosio_assert(((int_32)$1 == (int_32)CALL $fimport$26($2, $1)), [1152])
	$3 = CALL current_time()
	*((($4 = $4) + [28])) = [0]
	*(($4 + [32])) = [0]
	*($4 + [12]) = [0]
	*($4 + [16]) = [0]
	*($4 + [20]) = [0]
	*($4 + [24]) = [0]
	*($4) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [36]) = [0]
	*(($4 + [40])) = [0]
	*(($4 + [44])) = [0]
	*($4 + [48]) = [0]
	*(($4 + [52])) = [0]
	*(($4 + [56])) = [0]
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $1)
	CALL $44(($4 + [64]), $4)
	CALL $46(CALL $45(CALL $45(($4 + [64]), ($4 + [24])), ($4 + [36])), ($4 + [48]))
	$3 = *(*(*($4 + [36]) + [16]))
	CALL $47($4)
	*([0] + [4]) = ($4 + [80])
	return $3
}

void .FUNC _ZN9firewallx8firewall8addwhiteENSt3__16vectorIyNS1_9allocatorIyEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$3 = CALL $42($0)
	if ( ((int_64)$3 != (int_64)*($0)) ){ goto $label$2 }
	CALL require_auth($3)
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [976])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(CALL $43($0, $2, $3), [1008])
	
.LABEL $label$1
	$3 = *($0)
	CALL eosio_assert(((uint_64)*(($0 + [112])) >= (uint_64)(CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))), [1056])
	*(($7 = ($15 + [40]))) = [0]
	*($15 + [16]) = $2
	*($15 + [24]) = (int_64)-1
	*($15 + [32]) = (int_64)0
	*($15 + [8]) = *($0)
	$0 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$0) ){ goto $label$3 }
	$4 = (($15 + [8]) + [24])
	$8 = (($15 + [8]) + [8])
	$9 = ($15 + [24])
	$10 = ($15 + [36])
	$11 = ($1 + [4])
	$12 = [0]
	$14 = [0]
	$13 = [0]
	
.LOOP $label$4:
	$2 = *(($0 + ($13 << [3])))
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$5 }
	$0 = ($14 + [-24])
	$5 = ([0] - $12)
	
.LOOP $label$6:
	if ( ((int_64)*(*($0)) == (int_64)$2) ){ goto $label$5 }
	$14 = $0
	$6 = ($0 + [-24])
	$0 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$9 }
	$0 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)($15 + [8])), [32])
	if ( $0 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$0 = CALL db_find_i64(*($15 + [8]), *($8), (int_64)-2063328921671172096, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $22(($15 + [8]), $0) + [8]) == (int_32)($15 + [8])), [32])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($15 + [8]) == (int_64)CALL $fimport$2()), [320])
	*(($0 = CALL $123([24])) + [8]) = ($15 + [8])
	*($0) = $2
	CALL eosio_assert([1], [384])
	CALL memcpy(($15 + [64]), $0, [8])
	$2 = *($0)
	$14 = CALL db_store_i64(*($8), (int_64)-2063328921671172096, $3, $2, ($15 + [64]), [8])
	*($0 + [12]) = $14
	if ( (uint_64)($2 <= *($9)) ){ goto $label$10 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($15 + [56]) = $0
	$2 = *($0)
	*($15 + [64]) = $2
	*($15 + [52]) = $14
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$12 }
	*($6 + [8]) = $2
	*($6 + [16]) = $14
	*($15 + [56]) = [0]
	*($6) = $0
	*($10) = ($6 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $37($4, ($15 + [56]), ($15 + [64]), ($15 + [52]))
	
.LABEL $label$11
	$0 = *($15 + [56])
	*($15 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $124($0)
	
.LABEL $label$7
	$0 = *($1)
	$13 = ($13 + [1])
	if ( ((uint_32)$13 >= (uint_32)int_32((*($11) - $0) >> [3])) ){ goto $label$13 }
	$12 = *($4)
	$14 = *($10)
	goto $label$4 
	
.LABEL $label$13
	$14 = *($15 + [32])
	if ( ($14 == 0) ){ goto $label$3 }
	$5 = ($15 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$14) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL $124($6)
	
.LABEL $label$17
	if ( ((int_32)$14 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($15 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $14
	
.LABEL $label$14
	*($5) = $14
	CALL $124($0)
	
.LABEL $label$3
	*([0] + [4]) = ($15 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $124($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $124($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $124($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $124($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $124($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $124($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $124($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $124($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [960])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $48($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $124($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [256])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $34($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [960])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $49($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $124($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $124($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [256])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $34(CALL $50($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [256])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [256])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [960])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [256])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [960])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $124 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $123(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $124($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$0), [32])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $7($0, $3)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$0), [32])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [272])
	CALL $10($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $11($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [128])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $123([72])) + [8]) = (int_64)1398362884
	*($4) = (int_64)0
	CALL eosio_assert([1], [160])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [224])
	*($4 + [56]) = $0
	CALL $8(($8 + [32]), $4)
	*($4 + [60]) = $1
	*($8 + [24]) = $4
	*($8 + [16]) = (int_64)4982871454518345728
	$6 = *($4 + [60])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = (int_64)4982871454518345728
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $9($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $124($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN9firewallx8firewall4initEN5eosio14extended_assetEyyyy (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_64 _ZN9firewallx8firewall4initEN5eosio14extended_assetEyyyy)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$8 = [0]
	*(($6 + [88])) = [0]
	*($6 + [72]) = (int_64)-1
	*($6 + [80]) = (int_64)0
	$7 = *($0)
	*($6 + [56]) = $7
	*($6 + [64]) = $7
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [16])
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($6 + [24]) = $2
	*($6 + [32]) = $3
	*($6 + [40]) = $4
	*($6 + [48]) = $5
	CALL $6(($6 + [56]), $6, *($0))
	$9 = *(($6 + [84]))
	if ( ((int_32)$9 == (int_32)*(($6 + [80]))) ){ goto $label$7 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($6 + [56])), [32])
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	$1 = CALL db_find_i64(*($6 + [56]), *((($6 + [56]) + [8])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $7(($6 + [56]), $1)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($6 + [56])), [32])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [96])
	$0 = CALL memcpy($6, $9, [56])
	CALL memcpy(($0 + [72]), $0, [56])
	$1 = *($0 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	$8 = ($0 + [84])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $124($6)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$11 }
	$9 = *(($0 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$9 = $1
	
.LABEL $label$9
	*($8) = $1
	CALL $124($9)
	
.LABEL $label$8
	*([0] + [4]) = ($0 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN9firewallx8firewall10cleartableENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$1 }
	$2 = *($0)
	
.LABEL $label$1
	$6 = *($1)
	$5 = CALL strlen([576])
	if ( ((int_32)$5 != (int_32)( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$26 }
	if ( (CALL $132($1, [0], [-1], [576], $5) == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$6 = *($1)
	$5 = ($1 + [4])
	$3 = CALL strlen([672])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$27 }
	$6 = [0]
	if ( (CALL $132($1, [0], [-1], [672], $3) == 0) ){ goto $label$24 }
	
.LABEL $label$27
	$6 = *($1)
	$3 = CALL strlen([688])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$28 }
	$6 = [0]
	if ( (CALL $132($1, [0], [-1], [688], $3) == 0) ){ goto $label$23 }
	
.LABEL $label$28
	$6 = *($1)
	$5 = ($1 + [4])
	$3 = CALL strlen([704])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$29 }
	$6 = [0]
	if ( (CALL $132($1, [0], [-1], [704], $3) == 0) ){ goto $label$22 }
	
.LABEL $label$29
	$6 = *($1)
	$3 = CALL strlen([720])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$30 }
	$6 = [0]
	if ( (CALL $132($1, [0], [-1], [720], $3) == 0) ){ goto $label$21 }
	
.LABEL $label$30
	$6 = *($1)
	$5 = ($1 + [4])
	$3 = CALL strlen([736])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$31 }
	$6 = [0]
	if ( (CALL $132($1, [0], [-1], [736], $3) == 0) ){ goto $label$20 }
	
.LABEL $label$31
	$6 = *($1)
	$3 = CALL strlen([752])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$32 }
	$6 = [0]
	if ( (CALL $132($1, [0], [-1], [752], $3) == 0) ){ goto $label$19 }
	
.LABEL $label$32
	$6 = *($1)
	$5 = CALL strlen([768])
	if ( ((int_32)$5 != (int_32)( *(($1 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$6 = [0]
	if ( CALL $132($1, [0], [-1], [768], $5) ){ goto $label$2 }
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [36]) = [0]
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)6301285363369377792, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$33 }
	$6 = CALL $28($8, $1)
	
.LABEL $label$33
	$5 = ($0 + [96])
	
.LOOP $label$35:
	if ( ($6 == 0) ){ goto $label$34 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [52]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$36 }
	$1 = CALL $28($8, $0)
	
.LABEL $label$36
	CALL $29($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$35 }
	
.LABEL $label$34
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$37:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	CALL $124($6)
	
.LABEL $label$38
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$37 }
	$1 = *(($8 + [24]))
	goto $label$3 
	
.LABEL $label$25
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	*($8 + [24]) = (int_64)0
	$7 = *($0)
	*($8) = $7
	*($8 + [8]) = $2
	$1 = CALL db_find_i64($7, $2, (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$39 }
	$1 = CALL $7($8, $1)
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$8), [32])
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$6 = CALL db_next_i64(*($1 + [60]), ($8 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$40 }
	CALL $7($8, $6)
	
.LABEL $label$40
	CALL $15($8, $1)
	
.LABEL $label$39
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$41:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$42 }
	CALL $124($6)
	
.LABEL $label$42
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$41 }
	$1 = *(($8 + [24]))
	goto $label$17 
	
.LABEL $label$24
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [36]) = [0]
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)-7952543051627364352, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$43 }
	$6 = CALL $16($8, $1)
	
.LABEL $label$43
	$5 = ($0 + [96])
	
.LOOP $label$45:
	if ( ($6 == 0) ){ goto $label$44 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [52]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$46 }
	$1 = CALL $16($8, $0)
	
.LABEL $label$46
	CALL $17($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$45 }
	
.LABEL $label$44
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$47:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$48 }
	CALL $124($6)
	
.LABEL $label$48
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$47 }
	$1 = *(($8 + [24]))
	goto $label$15 
	
.LABEL $label$23
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)4983122594569794048, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$49 }
	$6 = CALL $18($8, $1)
	
.LABEL $label$49
	$5 = ($0 + [96])
	
.LOOP $label$51:
	if ( ($6 == 0) ){ goto $label$50 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [12]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$52 }
	$1 = CALL $18($8, $0)
	
.LABEL $label$52
	CALL $19($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$51 }
	
.LABEL $label$50
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$53:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$54 }
	CALL $124($6)
	
.LABEL $label$54
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$53 }
	$1 = *(($8 + [24]))
	goto $label$13 
	
.LABEL $label$22
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)4344997579449171968, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$55 }
	$6 = CALL $20($8, $1)
	
.LABEL $label$55
	$5 = ($0 + [96])
	
.LOOP $label$57:
	if ( ($6 == 0) ){ goto $label$56 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [12]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$58 }
	$1 = CALL $20($8, $0)
	
.LABEL $label$58
	CALL $21($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$57 }
	
.LABEL $label$56
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$59:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$60 }
	CALL $124($6)
	
.LABEL $label$60
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$59 }
	$1 = *(($8 + [24]))
	goto $label$11 
	
.LABEL $label$21
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)-2063328921671172096, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$61 }
	$6 = CALL $22($8, $1)
	
.LABEL $label$61
	$5 = ($0 + [96])
	
.LOOP $label$63:
	if ( ($6 == 0) ){ goto $label$62 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [12]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$64 }
	$1 = CALL $22($8, $0)
	
.LABEL $label$64
	CALL $23($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$63 }
	
.LABEL $label$62
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$65:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$66 }
	CALL $124($6)
	
.LABEL $label$66
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$65 }
	$1 = *(($8 + [24]))
	goto $label$9 
	
.LABEL $label$20
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)-8279555224121638912, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$67 }
	$6 = CALL $24($8, $1)
	
.LABEL $label$67
	$5 = ($0 + [96])
	
.LOOP $label$69:
	if ( ($6 == 0) ){ goto $label$68 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [68]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$70 }
	$1 = CALL $24($8, $0)
	
.LABEL $label$70
	CALL $25($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$69 }
	
.LABEL $label$68
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$71:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$72 }
	CALL $124($6)
	
.LABEL $label$72
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$71 }
	$1 = *(($8 + [24]))
	goto $label$7 
	
.LABEL $label$19
	*(($8 + [32])) = [0]
	*($8 + [16]) = (int_64)-1
	$4 = *($0)
	*($8) = $4
	*($8 + [8]) = $2
	$7 = (int_64)0
	*($8 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($4, $2, (int_64)-7880044409994084352, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$73 }
	$6 = CALL $26($8, $1)
	
.LABEL $label$73
	$5 = ($0 + [96])
	
.LOOP $label$75:
	if ( ($6 == 0) ){ goto $label$74 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$1 = [0]
	$0 = CALL db_next_i64(*($6 + [68]), ($8 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$76 }
	$1 = CALL $26($8, $0)
	
.LABEL $label$76
	CALL $27($8, $6)
	$6 = $1
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)((int_64)*($5) + (int_64)-1) >= (uint_64)$7) ){ goto $label$75 }
	
.LABEL $label$74
	$0 = *($8 + [24])
	if ( ($0 == 0) ){ goto $label$2 }
	$5 = ($8 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$77:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$78 }
	if ( ((*($6 + [44]) & [1]) == 0) ){ goto $label$79 }
	CALL $124(*(($6 + [52])))
	
.LABEL $label$79
	CALL $124($6)
	
.LABEL $label$78
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$77 }
	$1 = *(($8 + [24]))
	goto $label$5 
	
.LABEL $label$18
	$1 = $0
	
.LABEL $label$17
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$16
	$1 = $0
	
.LABEL $label$15
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$14
	$1 = $0
	
.LABEL $label$13
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$12
	$1 = $0
	
.LABEL $label$11
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$10
	$1 = $0
	
.LABEL $label$9
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$8
	$1 = $0
	
.LABEL $label$7
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$6
	$1 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL $124($1)
	goto $label$2 
	
.LABEL $label$4
	$1 = $0
	
.LABEL $label$3
	*($5) = $0
	CALL $124($1)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [896])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $124($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $124($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [256])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	*(($9 + [24])) = (int_64)0
	*(($9 + [16])) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	$7 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-7952543051627364352, $9, [2], *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx256_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [448])
	CALL memcpy($1, *($3), [56])
	CALL eosio_assert([1], [512])
	*($4 + [72]) = ($4 + [56])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $13(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [80])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [320])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $123([72])
	CALL $12($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)4982871454518345728
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)4982871454518345728
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $9(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $124($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [56]) = $1
	$5 = *($2)
	$4 = CALL memcpy($0, *(*($2 + [4])), [56])
	*($6 + [72]) = ($6 + [56])
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	CALL $13(($6 + [64]), $4)
	*($4 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($2 + [8])), (int_64)4982871454518345728, $6, [56])
	if ( ((uint_64)*($5 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$6 }
	*(($5 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [80])
	return $4
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN9firewallx8firewall6inllogEy11checksum256 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL require_auth($1)
	CALL eosio_assert(CALL $76($0, $1), [1472])
	*(($4 = ($7 + [48]))) = [0]
	*($7 + [24]) = $1
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [12]) = $2
	*($7 + [8]) = ($7 + [16])
	*($7 + [88]) = $1
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$2()), [320])
	*($7 + [68]) = ($7 + [8])
	*($7 + [64]) = ($7 + [16])
	*($7 + [72]) = ($7 + [88])
	*(($0 = CALL $123([80])) + [64]) = ($7 + [16])
	CALL $77(($7 + [64]), $0)
	*($7 + [80]) = $0
	$1 = *($0)
	*($7 + [64]) = $1
	$3 = *($0 + [68])
	*($7 + [60]) = $3
	$6 = ($7 + [44])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*($4)) ){ goto $label$2 }
	*($2 + [8]) = $1
	*($2 + [16]) = $3
	*($7 + [80]) = [0]
	*($2) = $0
	*($6) = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $36(($7 + [40]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$1
	$0 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $124($0)
	
.LABEL $label$3
	$4 = *($7 + [40])
	if ( ($4 == 0) ){ goto $label$4 }
	$3 = ($7 + [44])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $124($2)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($7 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($3) = $4
	CALL $124($0)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7952543051627364352)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1296])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN9firewallx8firewall10rmaliciousENSt3__16vectorI11checksum256NS1_9allocatorIS3_EEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$9 = [0]
	*((($11 + [48]) + [32])) = [0]
	*($11 + [64]) = (int_64)-1
	*($11 + [72]) = (int_64)0
	$2 = *($0)
	*($11 + [48]) = $2
	*($11 + [56]) = $2
	*($11 + [84]) = [0]
	$0 = *($1)
	$10 = *($1 + [4])
	*($11 + [40]) = ($11 + [48])
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$1 }
	$8 = ($1 + [4])
	$10 = [0]
	
.LOOP $label$2:
	$0 = ($0 + $9)
	$2 = *(($0 + [24]))
	$3 = *(($0 + [16]))
	$4 = *(($0 + [8]))
	$5 = *($0)
	CALL eosio_assert([1], [1184])
	*($11 + [8]) = $5
	*($11) = $4
	CALL eosio_assert([1], [1184])
	*(($6 = ($11 + [24]))) = $3
	*(($7 = ($11 + [16]))) = $2
	CALL $56(($11 + [88]), ($11 + [40]), $11)
	$0 = *($11 + [92])
	if ( ($0 == 0) ){ goto $label$3 }
	$4 = *(($0 + [40]))
	$5 = *(($0 + [32]))
	$2 = *(($0 + [24]))
	$3 = *($0 + [16])
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1184])
	if ( ((int_64)((int_64)((int_64)$2 ^ (int_64)*($11)) | (int_64)((int_64)$3 ^ (int_64)*($11 + [8]))) != (int_64)0) ){ goto $label$3 }
	if ( ((int_64)(((int_64)((int_64)*($7) ^ (int_64)$4) | (int_64)((int_64)*($6) ^ (int_64)$5)) == 0) == 0) ){ goto $label$3 }
	$0 = *($11 + [92])
	if ( ($0 == 0) ){ goto $label$3 }
	*($11) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)*($11 + [88]))
	CALL eosio_assert([1], [592])
	CALL $60($11)
	CALL $17(*($11 + [40]), $0)
	
.LABEL $label$3
	$9 = ($9 + [32])
	$0 = *($1)
	$10 = ($10 + [1])
	if ( ($10 <= int_32((*($8) - $0) >> [5])) ){ goto $label$2 }
	$10 = *($11 + [72])
	if ( ($10 == 0) ){ goto $label$1 }
	$6 = ($11 + [76])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$9 = *($0)
	*($0) = [0]
	if ( ($9 == 0) ){ goto $label$7 }
	CALL $124($9)
	
.LABEL $label$7
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($11 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $10
	
.LABEL $label$4
	*($6) = $10
	CALL $124($0)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [960])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $51($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [256])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $123(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $124($6)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC _ZN9firewallx8firewall7rmwhiteENSt3__16vectorIyNS1_9allocatorIyEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$3 = CALL $42($0)
	if ( ((int_64)$3 != (int_64)*($0)) ){ goto $label$2 }
	CALL require_auth($3)
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [976])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(CALL $43($0, $2, $3), [1008])
	
.LABEL $label$1
	*(($13 + [32])) = [0]
	*($13 + [8]) = $2
	*($13 + [16]) = (int_64)-1
	*($13 + [24]) = (int_64)0
	*($13) = *($0)
	$0 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$0) ){ goto $label$3 }
	$6 = ($13 + [8])
	$7 = ($1 + [4])
	$8 = ($13 + [24])
	$9 = ($13 + [28])
	$10 = [0]
	$12 = [0]
	$11 = [0]
	
.LOOP $label$4:
	$2 = *(($0 + ($11 << [3])))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$5 }
	$0 = ($12 + [-24])
	$4 = ([0] - $10)
	
.LOOP $label$6:
	if ( ((int_64)*(*($0)) == (int_64)$2) ){ goto $label$5 }
	$12 = $0
	$5 = ($0 + [-24])
	$0 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$9 }
	$0 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$13), [32])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$0 = CALL db_find_i64(*($13), *($6), (int_64)-2063328921671172096, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $22($13, $0)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$13), [32])
	
.LABEL $label$8
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$5 = CALL db_next_i64(*($0 + [12]), ($13 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $22($13, $5)
	
.LABEL $label$10
	CALL $23($13, $0)
	
.LABEL $label$7
	$0 = *($1)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 >= (uint_32)int_32((*($7) - $0) >> [3])) ){ goto $label$11 }
	$10 = *($8)
	$12 = *($9)
	goto $label$4 
	
.LABEL $label$11
	$12 = *($13 + [24])
	if ( ($12 == 0) ){ goto $label$3 }
	$4 = ($13 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$12) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $124($5)
	
.LABEL $label$15
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($13 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $12
	
.LABEL $label$12
	*($4) = $12
	CALL $124($0)
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [48])
}

void .FUNC _ZN9firewallx8firewall8addblackENSt3__16vectorIyNS1_9allocatorIyEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$3 = CALL $42($0)
	if ( ((int_64)$3 != (int_64)*($0)) ){ goto $label$2 }
	CALL require_auth($3)
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [976])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(CALL $43($0, $2, $3), [1008])
	
.LABEL $label$1
	$3 = *($0)
	CALL eosio_assert(((uint_64)*(($0 + [112])) >= (uint_64)(CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))), [1056])
	*(($7 = ($15 + [40]))) = [0]
	*($15 + [16]) = $2
	*($15 + [24]) = (int_64)-1
	*($15 + [32]) = (int_64)0
	*($15 + [8]) = *($0)
	$0 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$0) ){ goto $label$3 }
	$4 = (($15 + [8]) + [24])
	$8 = (($15 + [8]) + [8])
	$9 = ($15 + [24])
	$10 = ($15 + [36])
	$11 = ($1 + [4])
	$12 = [0]
	$14 = [0]
	$13 = [0]
	
.LOOP $label$4:
	$2 = *(($0 + ($13 << [3])))
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$5 }
	$0 = ($14 + [-24])
	$5 = ([0] - $12)
	
.LOOP $label$6:
	if ( ((int_64)*(*($0)) == (int_64)$2) ){ goto $label$5 }
	$14 = $0
	$6 = ($0 + [-24])
	$0 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$9 }
	$0 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)($15 + [8])), [32])
	if ( $0 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$0 = CALL db_find_i64(*($15 + [8]), *($8), (int_64)4344997579449171968, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $20(($15 + [8]), $0) + [8]) == (int_32)($15 + [8])), [32])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($15 + [8]) == (int_64)CALL $fimport$2()), [320])
	*(($0 = CALL $123([24])) + [8]) = ($15 + [8])
	*($0) = $2
	CALL eosio_assert([1], [384])
	CALL memcpy(($15 + [64]), $0, [8])
	$2 = *($0)
	$14 = CALL db_store_i64(*($8), (int_64)4344997579449171968, $3, $2, ($15 + [64]), [8])
	*($0 + [12]) = $14
	if ( (uint_64)($2 <= *($9)) ){ goto $label$10 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($15 + [56]) = $0
	$2 = *($0)
	*($15 + [64]) = $2
	*($15 + [52]) = $14
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$12 }
	*($6 + [8]) = $2
	*($6 + [16]) = $14
	*($15 + [56]) = [0]
	*($6) = $0
	*($10) = ($6 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $38($4, ($15 + [56]), ($15 + [64]), ($15 + [52]))
	
.LABEL $label$11
	$0 = *($15 + [56])
	*($15 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $124($0)
	
.LABEL $label$7
	$0 = *($1)
	$13 = ($13 + [1])
	if ( ((uint_32)$13 >= (uint_32)int_32((*($11) - $0) >> [3])) ){ goto $label$13 }
	$12 = *($4)
	$14 = *($10)
	goto $label$4 
	
.LABEL $label$13
	$14 = *($15 + [32])
	if ( ($14 == 0) ){ goto $label$3 }
	$5 = ($15 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$14) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL $124($6)
	
.LABEL $label$17
	if ( ((int_32)$14 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($15 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $14
	
.LABEL $label$14
	*($5) = $14
	CALL $124($0)
	
.LABEL $label$3
	*([0] + [4]) = ($15 + [80])
}

void .FUNC _ZN9firewallx8firewall7rmblackENSt3__16vectorIyNS1_9allocatorIyEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$3 = CALL $42($0)
	if ( ((int_64)$3 != (int_64)*($0)) ){ goto $label$2 }
	CALL require_auth($3)
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [976])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(CALL $43($0, $2, $3), [1008])
	
.LABEL $label$1
	*(($13 + [32])) = [0]
	*($13 + [8]) = $2
	*($13 + [16]) = (int_64)-1
	*($13 + [24]) = (int_64)0
	*($13) = *($0)
	$0 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$0) ){ goto $label$3 }
	$6 = ($13 + [8])
	$7 = ($1 + [4])
	$8 = ($13 + [24])
	$9 = ($13 + [28])
	$10 = [0]
	$12 = [0]
	$11 = [0]
	
.LOOP $label$4:
	$2 = *(($0 + ($11 << [3])))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$5 }
	$0 = ($12 + [-24])
	$4 = ([0] - $10)
	
.LOOP $label$6:
	if ( ((int_64)*(*($0)) == (int_64)$2) ){ goto $label$5 }
	$12 = $0
	$5 = ($0 + [-24])
	$0 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$9 }
	$0 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$13), [32])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$0 = CALL db_find_i64(*($13), *($6), (int_64)4344997579449171968, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $20($13, $0)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$13), [32])
	
.LABEL $label$8
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$5 = CALL db_next_i64(*($0 + [12]), ($13 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $20($13, $5)
	
.LABEL $label$10
	CALL $21($13, $0)
	
.LABEL $label$7
	$0 = *($1)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 >= (uint_32)int_32((*($7) - $0) >> [3])) ){ goto $label$11 }
	$10 = *($8)
	$12 = *($9)
	goto $label$4 
	
.LABEL $label$11
	$12 = *($13 + [24])
	if ( ($12 == 0) ){ goto $label$3 }
	$4 = ($13 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$12) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $124($5)
	
.LABEL $label$15
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($13 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $12
	
.LABEL $label$12
	*($4) = $12
	CALL $124($0)
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [48])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [960])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $35($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [256])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = (int_64)0
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx256_lowerbound(*($8), *($8 + [8]), (int_64)-7952543051627364352, $10, [2], ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [40])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [32])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $16($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-7952543051627364352, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [32])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	$14 = $15
	*([0] + [4]) = $15
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *($3)
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-7952543051627364352, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($5, $6)
	*($14 + [4]) = [0]
	*($14) = $5
	$4 = *(*(CALL $58($14) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1232])
	*($1) = *(($5 + [16]))
	$5 = *(*($3 + [4]))
	*($1 + [16]) = *($5)
	*(($3 = ($1 + [40]))) = *(($5 + [24]))
	*(($6 = ($1 + [32]))) = *(($5 + [16]))
	*(($7 = ($1 + [24]))) = *(($5 + [8]))
	$15 = $15
	$5 = ($15 + [-48])
	*([0] + [4]) = $5
	CALL eosio_assert([1], [384])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($15 + [-40]), ($1 + [16]), [32])
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-7952543051627364352, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = *(($2 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	$10 = *($3)
	$11 = *($6)
	$12 = *($7)
	$13 = *($1 + [16])
	CALL eosio_assert([1], [1184])
	*($14 + [8]) = $13
	*($14) = $12
	CALL eosio_assert([1], [1184])
	*(($14 + [24])) = $11
	*($14 + [16]) = $10
	*($1 + [56]) = CALL db_idx256_store($4, (int_64)-7952543051627364352, $8, $9, $14, [2])
	*([0] + [4]) = ($14 + [32])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $33($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2080]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2096]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2112])
	
.LABEL $label$7
	CALL _ZN9firewallx8firewall5applyEyy(CALL $118($9, $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL $134($4, $1)
	$2 = *($1 + [16])
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $134(($4 + [16]), $4)
	CALL void $1((int_32 ($4 + [16])), (int_32 $2), (int_64 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $124(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $124(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $123($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $124($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [960])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [5])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $113($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [5]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[31]), [256])
	CALL memcpy($4, *($5), [32])
	$7 = (*($5) + [32])
	*($5) = $7
	$4 = ($4 + [32])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [5])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($2 >> [4])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $123(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [32])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $133($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [5]))
	$5 = ($2 + ($3 << [5]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $124($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [256])
	CALL memcpy(($4 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = ((int_32)*($4 + [14]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [256])
	CALL memcpy(($4 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [9]) = ((int_32)*($4 + [15]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [256])
	CALL memcpy(($4 + [13]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [10]) = ((int_32)*($4 + [13]) != (int_32)[0])
	CALL $33(*($1), ($2 + [12]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$5 = *($1 + [10])
	$4 = *($1 + [9])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $134($7, ($1 + [12]))
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $134(($7 + [16]), $7)
	CALL void $0((int_32 $2), (int_64 ((int_32)($3 & [255]) != (int_32)[0])), (int_32 ((int_32)($4 & [255]) != (int_32)[0])), (int_32 ((int_32)($5 & [255]) != (int_32)[0])), (int_32 ($7 + [16])), (int_32 $1))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $124(*($7 + [24]))
	
.LABEL $label$2
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL $124(*($7 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $118 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	*($0) = $1
	$1 = CALL current_time()
	$2 = [0]
	*(($0 + [20])) = [0]
	*(($0 + [24])) = [0]
	*(($0 + [28])) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	*(($0 + [40])) = [0]
	*($0 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*(($0 + [52])) = [0]
	*(($0 + [56])) = [0]
	*(($0 + [60])) = [0]
	*(($0 + [64])) = [0]
	*($0 + [72]) = (int_64)0
	*(($3 = ($0 + [80]))) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [224])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $120([2176], $0)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	*(($9 + [24])) = (int_64)0
	*(($9 + [16])) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	$7 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)6301285363369377792, $9, [2], *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx256_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [256])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC _ZN9firewallx8firewall12addmaliciousENSt3__16vectorI11checksum256NS1_9allocatorIS3_EEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [128])
	*([0] + [4]) = $15
	CALL require_auth(*($0))
	$7 = *(($0 + [104]))
	CALL eosio_assert((((int_64)$7 != (int_64)0) & ((uint_64)$7 >= (uint_64)(CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5])))), [1056])
	*(($5 = (($15 + [64]) + [32]))) = [0]
	*($15 + [80]) = (int_64)-1
	*($15 + [88]) = (int_64)0
	$7 = *($0)
	*($15 + [64]) = $7
	*($15 + [72]) = $7
	*($15 + [100]) = [0]
	$6 = *($1)
	$13 = *($1 + [4])
	*($15 + [56]) = ($15 + [64])
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$1 }
	$2 = (($15 + [64]) + [24])
	$11 = ($15 + [92])
	$12 = ($1 + [4])
	$13 = [0]
	$14 = [0]
	
.LOOP $label$2:
	$6 = ($6 + $13)
	*($15 + [52]) = $6
	$7 = *(($6 + [24]))
	$8 = *(($6 + [16]))
	$9 = *(($6 + [8]))
	$10 = *($6)
	CALL eosio_assert([1], [1184])
	*($15 + [24]) = $10
	*($15 + [16]) = $9
	CALL eosio_assert([1], [1184])
	*(($4 = (($15 + [16]) + [24]))) = $8
	*(($3 = (($15 + [16]) + [16]))) = $7
	CALL $56(($15 + [120]), ($15 + [56]), ($15 + [16]))
	$6 = *($15 + [124])
	if ( ($6 == 0) ){ goto $label$4 }
	$9 = *(($6 + [40]))
	$10 = *(($6 + [32]))
	$7 = *(($6 + [24]))
	$8 = *($6 + [16])
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1184])
	if ( ((int_64)((int_64)((int_64)$7 ^ (int_64)*($15 + [16])) | (int_64)((int_64)$8 ^ (int_64)*($15 + [24]))) != (int_64)0) ){ goto $label$4 }
	if ( ((int_64)(((int_64)((int_64)*($3) ^ (int_64)$9) | (int_64)((int_64)*($4) ^ (int_64)$10)) == 0) == 0) ){ goto $label$4 }
	if ( *($15 + [124]) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = *($0)
	*($15 + [12]) = ($15 + [52])
	*($15 + [8]) = ($15 + [64])
	*($15 + [120]) = $7
	CALL eosio_assert(((int_64)*($15 + [64]) == (int_64)CALL $fimport$2()), [320])
	*((($15 + [16]) + [8])) = ($15 + [120])
	*($15 + [20]) = ($15 + [8])
	*($15 + [16]) = ($15 + [64])
	*(($6 = CALL $123([64])) + [48]) = ($15 + [64])
	CALL $57(($15 + [16]), $6)
	*($15 + [112]) = $6
	$7 = *($6)
	*($15 + [16]) = $7
	$3 = *($6 + [52])
	*($15 + [108]) = $3
	$4 = *($11)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$6 }
	*($4 + [8]) = $7
	*($4 + [16]) = $3
	*($15 + [112]) = [0]
	*($4) = $6
	*($11) = ($4 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $40($2, ($15 + [112]), ($15 + [16]), ($15 + [108]))
	
.LABEL $label$5
	$6 = *($15 + [112])
	*($15 + [112]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $124($6)
	
.LABEL $label$3
	$13 = ($13 + [32])
	$6 = *($1)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($12) - $6) >> [5])) ){ goto $label$2 }
	$4 = *($15 + [88])
	if ( ($4 == 0) ){ goto $label$1 }
	$14 = ($15 + [92])
	$6 = *($14)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$13 = *($6)
	*($6) = [0]
	if ( ($13 == 0) ){ goto $label$10 }
	CALL $124($13)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($15 + [88]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $4
	
.LABEL $label$7
	*($14) = $4
	CALL $124($6)
	
.LABEL $label$1
	*([0] + [4]) = ($15 + [128])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	$2 = int_32($3 >> [3])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL $123($3)
	*(($5 + [24])) = ($3 + ($2 << [3]))
	*($5 + [16]) = $3
	*($5 + [20]) = $3
	$4 = *($1)
	$2 = (*(($1 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $2)
	*($5 + [20]) = ($3 + $2)
	
.LABEL $label$2
	CALL $134($5, ($1 + [12]))
	CALL $108($0, ($5 + [16]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $124(*($5 + [8]))
	
.LABEL $label$3
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*($5 + [20]) = $1
	CALL $124($1)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $133(($5 + [16]))
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [960])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $109($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [256])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([80])) + [64]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [256])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[40]), [256])
	CALL memcpy(($6 + [48]), ($7 + [40]), [8])
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $124(*(($4 + [52])))
	
.LABEL $label$7
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL $124(*(($4 + [52])))
	
.LABEL $label$10
	CALL $124($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [128])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $123([80])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [224])
	*($4 + [52]) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [64]) = $0
	CALL $31(($8 + [32]), $4)
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $32($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$15 }
	CALL $124(*(($5 + [52])))
	
.LABEL $label$15
	CALL $124($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $123(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $124($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $123($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $69 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [63]) = $3
	*(($8 + [48])) = [0]
	*($8 + [32]) = (int_64)-1
	*($8 + [40]) = (int_64)0
	$6 = *($0)
	*($8 + [16]) = $6
	*($8 + [24]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($6, $4, (int_64)-7880044409994084352, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $26(($8 + [16]), $3)
	CALL eosio_assert(((int_32)*($0 + [64]) == (int_32)($8 + [16])), [32])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [1088])
	*($8 + [8]) = ($8 + [63])
	CALL eosio_assert($3, [272])
	CALL $70(($8 + [16]), $0, (int_64)0, ($8 + [8]))
	$5 = *($8 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($8 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $124(*(($3 + [52])))
	
.LABEL $label$7
	CALL $124($3)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($8 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL $124($0)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [64])
}

void .FUNC _ZN9firewallx8firewall9pausedappEy (int_32 $0, int_64 $1)
{
	int_64 $2
	$2 = CALL $42($0)
	CALL eosio_assert(CALL $43($0, $1, $2), [1008])
	CALL $69($0, $1, $2, [1], *($0))
	CALL $69($0, $1, $2, [1], $2)
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	$5 = (*($1 + [4]) - *($1))
	$4 = int_32($5 >> [3])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = CALL $123($5)
	*(($6 + [24])) = ($5 + ($4 << [3]))
	*($6 + [16]) = $5
	*($6 + [20]) = $5
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $4, $1)
	*($6 + [20]) = ($5 + $1)
	
.LABEL $label$3
	CALL $134($6, $2)
	CALL void $3((int_32 ($6 + [16])), (int_32 $6), (int_32 $0))
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL $124(*($6 + [8]))
	
.LABEL $label$4
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	*($6 + [20]) = $1
	CALL $124($1)
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $133(($6 + [16]))
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = (int_64)0
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx256_lowerbound(*($8), *($8 + [8]), (int_64)6301285363369377792, $10, [2], ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [40])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [32])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $28($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)6301285363369377792, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [32])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $123([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1408]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $135($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $128($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6301285363369377792)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1296])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $28(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	$14 = $15
	*([0] + [4]) = $15
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *($3)
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)6301285363369377792, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $28($5, $6)
	*($14 + [4]) = [0]
	*($14) = $5
	$4 = *(*(CALL $67($14) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1232])
	*($1) = *(($5 + [16]))
	$5 = *($3 + [4])
	*($1 + [16]) = *($5)
	*(($3 = ($1 + [40]))) = *(($5 + [24]))
	*(($6 = ($1 + [32]))) = *(($5 + [16]))
	*(($7 = ($1 + [24]))) = *(($5 + [8]))
	$15 = $15
	$5 = ($15 + [-48])
	*([0] + [4]) = $5
	CALL eosio_assert([1], [384])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($15 + [-40]), ($1 + [16]), [32])
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)6301285363369377792, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = *(($2 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	$10 = *($3)
	$11 = *($6)
	$12 = *($7)
	$13 = *($1 + [16])
	CALL eosio_assert([1], [1184])
	*($14 + [8]) = $13
	*($14) = $12
	CALL eosio_assert([1], [1184])
	*(($14 + [24])) = $11
	*($14 + [16]) = $10
	*($1 + [56]) = CALL db_idx256_store($4, (int_64)6301285363369377792, $8, $9, $14, [2])
	*([0] + [4]) = ($14 + [32])
}

void .FUNC _ZN9firewallx8firewall11addcontractENSt3__16vectorIyNS1_9allocatorIyEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL require_auth(*($0))
	$3 = *(($0 + [104]))
	CALL eosio_assert((((int_64)$3 != (int_64)0) & ((uint_64)$3 >= (uint_64)(CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3])))), [1056])
	*(($6 = ($16 + [40]))) = [0]
	*($16 + [24]) = (int_64)-1
	*($16 + [32]) = (int_64)0
	$3 = *($0)
	*($16 + [8]) = $3
	*($16 + [16]) = $3
	$14 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$14) ){ goto $label$1 }
	$2 = (($16 + [8]) + [24])
	$7 = (($16 + [8]) + [8])
	$9 = ($16 + [24])
	$10 = ($16 + [36])
	$11 = ($1 + [4])
	$12 = [0]
	$15 = [0]
	$13 = [0]
	
.LOOP $label$2:
	$3 = *(($14 + ($13 << [3])))
	if ( ((int_32)$15 == (int_32)$12) ){ goto $label$3 }
	$14 = ($15 + [-24])
	$4 = ([0] - $12)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)$3) ){ goto $label$3 }
	$15 = $14
	$5 = ($14 + [-24])
	$14 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$15 == (int_32)$12) ){ goto $label$7 }
	$14 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [8]) == (int_32)($16 + [8])), [32])
	if ( $14 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$14 = CALL db_find_i64(*($16 + [8]), *($7), (int_64)4983122594569794048, $3)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $18(($16 + [8]), $14) + [8]) == (int_32)($16 + [8])), [32])
	goto $label$5 
	
.LABEL $label$6
	$8 = *($0)
	CALL eosio_assert(((int_64)*($16 + [8]) == (int_64)CALL $fimport$2()), [320])
	*(($14 = CALL $123([24])) + [8]) = ($16 + [8])
	*($14) = $3
	CALL eosio_assert([1], [384])
	CALL memcpy(($16 + [64]), $14, [8])
	$3 = *($14)
	$15 = CALL db_store_i64(*($7), (int_64)4983122594569794048, $8, $3, ($16 + [64]), [8])
	*($14 + [12]) = $15
	if ( (uint_64)($3 <= *($9)) ){ goto $label$8 }
	*($9) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($16 + [56]) = $14
	$3 = *($14)
	*($16 + [64]) = $3
	*($16 + [52]) = $15
	$5 = *($10)
	if ( ((uint_32)$5 >= (uint_32)*($6)) ){ goto $label$10 }
	*($5 + [8]) = $3
	*($5 + [16]) = $15
	*($16 + [56]) = [0]
	*($5) = $14
	*($10) = ($5 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $39($2, ($16 + [56]), ($16 + [64]), ($16 + [52]))
	
.LABEL $label$9
	$14 = *($16 + [56])
	*($16 + [56]) = [0]
	if ( ($14 == 0) ){ goto $label$5 }
	CALL $124($14)
	
.LABEL $label$5
	$14 = *($1)
	$13 = ($13 + [1])
	if ( ((uint_32)$13 >= (uint_32)int_32((*($11) - $14) >> [3])) ){ goto $label$11 }
	$12 = *($2)
	$15 = *($10)
	goto $label$2 
	
.LABEL $label$11
	$15 = *($16 + [32])
	if ( ($15 == 0) ){ goto $label$1 }
	$4 = ($16 + [36])
	$14 = *($4)
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$13 }
	
.LOOP $label$14:
	$14 = ($14 + [-24])
	$5 = *($14)
	*($14) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $124($5)
	
.LABEL $label$15
	if ( ((int_32)$15 != (int_32)$14) ){ goto $label$14 }
	$14 = *(($16 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$14 = $15
	
.LABEL $label$12
	*($4) = $15
	CALL $124($14)
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [80])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [640])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	*(($9 + [24])) = (int_64)0
	*(($9 + [16])) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	$7 = *(*($0))
	$7 = CALL db_idx256_find_primary(*($7), *($7 + [8]), (int_64)-7952543051627364352, $9, [2], *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9) = (int_64)0
	$1 = CALL db_idx256_next($7, $9)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9)
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [32])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $16($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)-7952543051627364352, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [32])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC _ZN9firewallx8firewall10addextendsENSt3__16vectorIyNS1_9allocatorIyEEEENS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [176])
	*([0] + [4]) = $17
	CALL require_auth(*($0))
	$10 = *(($0 + [104]))
	CALL eosio_assert((((int_64)$10 != (int_64)0) & ((uint_64)$10 >= (uint_64)(CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3])))), [1056])
	*(($8 = (($17 + [112]) + [32]))) = [0]
	*($17 + [128]) = (int_64)-1
	*($17 + [136]) = (int_64)0
	$10 = *($0)
	*($17 + [112]) = $10
	*($17 + [120]) = $10
	*($17 + [148]) = [0]
	$5 = *($1)
	$15 = *($1 + [4])
	*($17 + [104]) = ($17 + [112])
	if ( ((int_32)$15 == (int_32)$5) ){ goto $label$1 }
	$3 = ($2 + [1])
	$4 = (($17 + [112]) + [24])
	$14 = ($17 + [140])
	$15 = [0]
	$16 = [0]
	
.LOOP $label$2:
	*($17 + [16]) = *(($5 + $15))
	CALL $64(($17 + [48]), ($17 + [16]))
	$5 = *($2)
	$7 = ($5 & [1])
	$5 = CALL $129(($17 + [48]), ( *(($2 + [8])) ? $3 : $7 ), ( *(($2 + [4])) ? uint_32($5 >> [1]) : $7 ))
	$7 = ($5 + [8])
	*(($9 = (($17 + [88]) + [8]))) = *($7)
	*($17 + [88]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($7) = [0]
	if ( ((*($17 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $124(*((($17 + [48]) + [8])))
	
.LABEL $label$3
	CALL sha256(($17 + [88]), [12], ($17 + [48]))
	$10 = *((($17 + [48]) + [24]))
	$11 = *((($17 + [48]) + [16]))
	$12 = *($17 + [56])
	$13 = *($17 + [48])
	CALL eosio_assert([1], [1184])
	*($17 + [24]) = $13
	*($17 + [16]) = $12
	CALL eosio_assert([1], [1184])
	*(($7 = (($17 + [16]) + [24]))) = $11
	*(($6 = (($17 + [16]) + [16]))) = $10
	CALL $65(($17 + [168]), ($17 + [104]), ($17 + [16]))
	$5 = *($17 + [172])
	if ( ($5 == 0) ){ goto $label$5 }
	$12 = *(($5 + [40]))
	$13 = *(($5 + [32]))
	$10 = *(($5 + [24]))
	$11 = *($5 + [16])
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1184])
	if ( ((int_64)((int_64)((int_64)$10 ^ (int_64)*($17 + [16])) | (int_64)((int_64)$11 ^ (int_64)*($17 + [24]))) != (int_64)0) ){ goto $label$5 }
	if ( ((int_64)(((int_64)((int_64)*($6) ^ (int_64)$12) | (int_64)((int_64)*($7) ^ (int_64)$13)) == 0) == 0) ){ goto $label$5 }
	if ( *($17 + [172]) ){ goto $label$4 }
	
.LABEL $label$5
	$10 = *($0)
	*($17 + [12]) = ($17 + [48])
	*($17 + [8]) = ($17 + [112])
	*($17 + [168]) = $10
	CALL eosio_assert(((int_64)*($17 + [112]) == (int_64)CALL $fimport$2()), [320])
	*((($17 + [16]) + [8])) = ($17 + [168])
	*($17 + [20]) = ($17 + [8])
	*($17 + [16]) = ($17 + [112])
	*(($5 = CALL $123([64])) + [48]) = ($17 + [112])
	CALL $66(($17 + [16]), $5)
	*($17 + [160]) = $5
	$10 = *($5)
	*($17 + [16]) = $10
	$6 = *($5 + [52])
	*($17 + [156]) = $6
	$7 = *($14)
	if ( ((uint_32)$7 >= (uint_32)*($8)) ){ goto $label$7 }
	*($7 + [8]) = $10
	*($7 + [16]) = $6
	*($17 + [160]) = [0]
	*($7) = $5
	*($14) = ($7 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $30($4, ($17 + [160]), ($17 + [16]), ($17 + [156]))
	
.LABEL $label$6
	$5 = *($17 + [160])
	*($17 + [160]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $124($5)
	
.LABEL $label$4
	if ( ((*($17 + [88]) & [1]) == 0) ){ goto $label$8 }
	CALL $124(*($9))
	
.LABEL $label$8
	$15 = ($15 + [8])
	$5 = *($1)
	$16 = ($16 + [1])
	if ( ($16 <= int_32((*(($1 + [4])) - $5) >> [3])) ){ goto $label$2 }
	$15 = *($17 + [136])
	if ( ($15 == 0) ){ goto $label$1 }
	$7 = ($17 + [140])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$15) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $124($2)
	
.LABEL $label$12
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($17 + [136]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $15
	
.LABEL $label$9
	*($7) = $15
	CALL $124($5)
	
.LABEL $label$1
	*([0] + [4]) = ($17 + [176])
}

void .FUNC _ZN9firewallx8firewall10rmcontractENSt3__16vectorIyNS1_9allocatorIyEEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	*($12 + [24]) = (int_64)0
	$2 = *($0)
	*($12) = $2
	*($12 + [8]) = $2
	$0 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$0) ){ goto $label$1 }
	$5 = ($12 + [8])
	$6 = ($1 + [4])
	$7 = ($12 + [24])
	$8 = ($12 + [28])
	$9 = [0]
	$11 = [0]
	$10 = [0]
	
.LOOP $label$2:
	$2 = *(($0 + ($10 << [3])))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$3 }
	$0 = ($11 + [-24])
	$3 = ([0] - $9)
	
.LOOP $label$4:
	if ( ((int_64)*(*($0)) == (int_64)$2) ){ goto $label$3 }
	$11 = $0
	$4 = ($0 + [-24])
	$0 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$7 }
	$0 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$12), [32])
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = CALL db_find_i64(*($12), *($5), (int_64)4983122594569794048, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $18($12, $0)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$12), [32])
	
.LABEL $label$6
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$4 = CALL db_next_i64(*($0 + [12]), ($12 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	CALL $18($12, $4)
	
.LABEL $label$8
	CALL $19($12, $0)
	
.LABEL $label$5
	$0 = *($1)
	$10 = ($10 + [1])
	if ( ((uint_32)$10 >= (uint_32)int_32((*($6) - $0) >> [3])) ){ goto $label$9 }
	$9 = *($7)
	$11 = *($8)
	goto $label$2 
	
.LABEL $label$9
	$11 = *($12 + [24])
	if ( ($11 == 0) ){ goto $label$1 }
	$3 = ($12 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$11) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $124($4)
	
.LABEL $label$13
	if ( ((int_32)$11 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($12 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $11
	
.LABEL $label$10
	*($3) = $11
	CALL $124($0)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [160])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*(($3 = (($7 + [32]) + [24]))) = (int_64)0
	*(($4 = (($7 + [32]) + [16]))) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[31]), [256])
	CALL memcpy(($7 + [32]), $5, [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [64]) + [24]))) = *($3)
	*(($5 = (($7 + [64]) + [16]))) = *($4)
	*($7 + [72]) = *($7 + [40])
	*($7 + [64]) = *($7 + [32])
	*((($7 + [96]) + [24])) = *($1)
	*((($7 + [96]) + [16])) = *($5)
	*($7 + [104]) = *($7 + [72])
	*($7 + [96]) = *($7 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	*(($5 = (($7 + [128]) + [24]))) = *((($7 + [96]) + [24]))
	*(($2 = (($7 + [128]) + [16]))) = *((($7 + [96]) + [16]))
	*($7 + [136]) = *($7 + [104])
	*($7 + [128]) = *($7 + [96])
	*(($7 + [24])) = *($5)
	*(($7 + [16])) = *($2)
	*($7) = *($7 + [128])
	*($7 + [8]) = *($7 + [136])
	CALL void $1((int_32 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [160])
	return [1]
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [256])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [176])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [72])) = (int_64)0
	*((($7 + [32]) + [32])) = (int_64)0
	*((($7 + [32]) + [24])) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [256])
	CALL memcpy(($7 + [32]), $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [256])
	$1 = (($7 + [32]) + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [80]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [80]) + [16]))) = *(($1 + [16]))
	$4 = *($7 + [32])
	*($7 + [80]) = *($1)
	*($7 + [92]) = *(($1 + [12]))
	*($7 + [88]) = *(($1 + [8]))
	*((($7 + [112]) + [24])) = *($3)
	*((($7 + [112]) + [16])) = *($5)
	*($7 + [120]) = *($7 + [88])
	*($7 + [112]) = *($7 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	*(($3 = (($7 + [144]) + [24]))) = *((($7 + [112]) + [24]))
	*(($5 = (($7 + [144]) + [16]))) = *((($7 + [112]) + [16]))
	*($7 + [152]) = *($7 + [120])
	*($7 + [144]) = *($7 + [112])
	*(($7 + [24])) = *($3)
	*(($7 + [16])) = *($5)
	*($7) = *($7 + [144])
	*($7 + [8]) = *($7 + [152])
	CALL void $1((int_32 $4), (int_64 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [176])
	return [1]
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $106(($2 + [48]), ($2 + [8]))
	CALL $33(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $107(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $124(*(($2 + [28])))
	
.LABEL $label$6
	$1 = *($2 + [8])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [12]) = $1
	CALL $124($1)
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [28])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [18]) = [0]
	*($2 + [20 align=4]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = ($2 + [8])
	CALL $110(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $111(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $124(*(($2 + [28])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $89 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [64]) = $2
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$2 = *($0)
	*($7 + [24]) = $2
	*($7 + [32]) = $4
	$5 = CALL db_find_i64($2, $4, (int_64)-7880044409994084352, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $26(($7 + [24]), $5)
	CALL eosio_assert(((int_32)*($0 + [64]) == (int_32)($7 + [24])), [32])
	*($7 + [12]) = $3
	*($7 + [8]) = ($7 + [64])
	CALL eosio_assert([1], [272])
	CALL $90(($7 + [24]), $0, (int_64)0, ($7 + [8]))
	$5 = *($7 + [48])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($7 + [16]) = $3
	*($7 + [12]) = ($7 + [64])
	*($7 + [8]) = ($7 + [72])
	CALL $91($7, ($7 + [24]), $4, ($7 + [8]))
	$5 = *($7 + [48])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$8 }
	CALL $124(*(($3 + [52])))
	
.LABEL $label$8
	CALL $124($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL $124($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC _ZN9firewallx8firewall2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [112])
	*([0] + [4]) = $14
	CALL eosio_assert(((int_64)*($0) != (int_64)$2), [1504])
	CALL eosio_assert(((int_64)*($1) != (int_64)*($1 + [8])), [1568])
	$12 = *($0)
	if ( ((int_64)*($1) == (int_64)$12) ){ goto $label$1 }
	if ( ((int_64)*(($1 + [8])) != (int_64)$12) ){ goto $label$1 }
	$4 = *(($1 + [24]))
	$10 = [0]
	$3 = *($1 + [16])
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$12 = (uint_64)$4 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$10 = [0]
	
.LABEL $label$2
	CALL eosio_assert($10, [1600])
	$12 = (int_64)0
	CALL eosio_assert(((int_64)$3 > (int_64)0), [1632])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [80]))), [1680])
	CALL eosio_assert(((int_64)$3 >= (int_64)*($0 + [72])), [1744])
	$8 = (int_64)59
	$11 = [1792]
	$13 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$12 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$10 = ($10 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$11 = ($11 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$7 }
	CALL eosio_assert(((int_64)$13 == (int_64)$2), [1808])
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [1808])
	$11 = ($1 + [32])
	$10 = *($1 + [32])
	if ( ($10 & [1]) ){ goto $label$14 }
	$10 = uint_32($10 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$10 = *(($1 + [36]))
	
.LABEL $label$13
	CALL eosio_assert(($10 <= [257]), [1824])
	CALL eosio_assert(CALL $fimport$21(*($1)), [1856])
	CALL $134(($14 + [96]), $11)
	$11 = CALL $130(($14 + [96]), [0], [20], [1488])
	$11 = ( *($11 + [8]) ? ($11 + [1]) : (*($11) & [1]) )
	$10 = [-1]
	
.LOOP $label$15:
	$7 = ($11 + $10)
	$5 = ($10 + [1])
	$10 = $5
	if ( *(($7 + [1])) ){ goto $label$15 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$12 = (int_64)0
	$9 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$16:
	$8 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$6) ){ goto $label$17 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$10 = ($10 + [165])
	goto $label$18 
	
.LABEL $label$19
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$21 }
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$8 = ((int_64)$8 & (int_64)15)
	
.LABEL $label$20
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$8 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$16 }
	CALL eosio_assert(CALL $fimport$21($13), [1888])
	*($14 + [80]) = $4
	$12 = *($1)
	$9 = *($0)
	*((($14 + [24]) + [8])) = $4
	*($14 + [88]) = $2
	*((($14 + [24]) + [16])) = $2
	*($14 + [72]) = $3
	*($14 + [24]) = $3
	CALL $89($0, $12, $13, ($14 + [24]), $9)
	*($14 + [56]) = $4
	*(($14 + [8])) = $4
	*($14 + [64]) = $2
	*(($14 + [16])) = $2
	*($14 + [48]) = $3
	*($14) = $3
	CALL $89($0, $12, $13, $14, $13)
	if ( ((*($14 + [96]) & [1]) == 0) ){ goto $label$1 }
	CALL $124(*($14 + [104]))
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [112])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [448])
	*($1 + [41]) = *(*($3))
	*($1 + [42]) = *(*($3 + [4]))
	$4 = *($1)
	*($1 + [43]) = *(*($3 + [8]))
	CALL $126(($1 + [44]), *($3 + [12]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [512])
	$3 = *($1 + [44])
	$5 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [52])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $71($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [63]) = $3
	*($8 + [62]) = $4
	*($8 + [61]) = $5
	*(($8 + [48])) = [0]
	*($8 + [32]) = (int_64)-1
	*($8 + [40]) = (int_64)0
	$7 = *($0)
	*($8 + [16]) = $7
	*($8 + [24]) = $2
	$0 = [0]
	$5 = CALL db_find_i64($7, $2, (int_64)-7880044409994084352, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $26(($8 + [16]), $5)
	CALL eosio_assert(((int_32)*($0 + [64]) == (int_32)($8 + [16])), [32])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [1088])
	*($8 + [12]) = $6
	*($8 + [4]) = ($8 + [62])
	*($8) = ($8 + [63])
	*($8 + [8]) = ($8 + [61])
	CALL eosio_assert($5, [272])
	CALL $87(($8 + [16]), $0, (int_64)0, $8)
	$5 = *($8 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ($8 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((*($6 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $124(*(($6 + [52])))
	
.LABEL $label$7
	CALL $124($6)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($8 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($4) = $5
	CALL $124($0)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [64])
}

void .FUNC _ZN9firewallx8firewall8setrulesEybbbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	$6 = CALL $42($0)
	CALL eosio_assert(CALL $43($0, $1, $6), [1008])
	*($11 + [20 align=4]) = (int_64)0
	*($11 + [16]) = [0]
	$7 = *($0)
	$8 = CALL strlen([1488])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($11 + [16]) = ($8 << [1])
	$10 = (($11 + [16]) | [1])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($8 + [16]) & [-16])
	$10 = CALL $123($9)
	*($11 + [16]) = ($9 | [1])
	*($11 + [24]) = $10
	*($11 + [20]) = $8
	
.LABEL $label$4
	CALL memcpy($10, [1488], $8)
	
.LABEL $label$3
	*(($10 + $8)) = [0]
	CALL $86($0, $1, $7, $2, $3, $4, ($11 + [16]))
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $124(*($11 + [24]))
	
.LABEL $label$6
	*(($11 + [8])) = [0]
	*($11) = (int_64)0
	$8 = CALL strlen([1488])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$9 }
	*($11) = ($8 << [1])
	$10 = ($11 | [1])
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = (($8 + [16]) & [-16])
	$10 = CALL $123($9)
	*($11) = ($9 | [1])
	*($11 + [8]) = $10
	*($11 + [4]) = $8
	
.LABEL $label$8
	CALL memcpy($10, [1488], $8)
	
.LABEL $label$7
	*(($10 + $8)) = [0]
	CALL $86($0, $1, $6, $2, $3, $4, $11)
	if ( ((*($11) & [1]) == 0) ){ goto $label$10 }
	CALL $124(*($11 + [8]))
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $125(($11 + [16]))
	
.LABEL $label$1
	CALL $125($11)
	(unreachable)
}

void .FUNC _ZN9firewallx8firewall7inlstatEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL require_auth($1)
	CALL eosio_assert(CALL $76($0, $1), [1472])
	*((($8 + [8]) + [32])) = [0]
	*($8 + [16]) = $1
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$7 = *($0)
	*($8 + [8]) = $7
	$0 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$2 = (CASTING uint_64)(uint_32 ($0 - ((uint_32)$0 % (uint_32)[3600])))
	$0 = CALL db_find_i64($7, $1, (int_64)-4157498779731230720, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $80(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($8 + [8])), [32])
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($8 + [8])), [400])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$2()), [448])
	*($0 + [8]) = ((int_64)*($0 + [8]) + (int_64)1)
	$1 = *($0)
	CALL eosio_assert([1], [512])
	CALL eosio_assert([1], [384])
	CALL memcpy(($8 + [64]), $0, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($8 + [64]) | [8]), ($0 + [8]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($8 + [64]), [16])
	$0 = (($8 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$1 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$2()), [320])
	*(($0 = CALL $123([32])) + [16]) = ($8 + [8])
	*($0 + [8]) = (int_64)1
	*($0) = $2
	CALL eosio_assert([1], [384])
	CALL memcpy(($8 + [64]), $0, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($8 + [64]) | [8]), ($0 + [8]), [8])
	$7 = *($0)
	$5 = CALL db_store_i64(*((($8 + [8]) + [8])), (int_64)-4157498779731230720, $1, $7, ($8 + [64]), [16])
	*($0 + [20]) = $5
	$6 = (($8 + [8]) + [16])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($8 + [56]) = $0
	$1 = *($0)
	*($8 + [64]) = $1
	*($8 + [52]) = $5
	$4 = ($8 + [36])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($8 + [40]))) ){ goto $label$5 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($8 + [56]) = [0]
	*($6) = $0
	*($4) = ($6 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $82(($8 + [32]), ($8 + [56]), ($8 + [64]), ($8 + [52]))
	
.LABEL $label$4
	$0 = *($8 + [56])
	*($8 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $124($0)
	
.LABEL $label$1
	$0 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$1 = (CASTING uint_64)(uint_32 (($0 + [-90000]) - ((uint_32)$0 % (uint_32)[3600])))
	$3 = *(($8 + [32]))
	$5 = *(($8 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	$0 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$7:
	if ( ((int_64)*(*($0)) == (int_64)$1) ){ goto $label$6 }
	$5 = $0
	$6 = ($0 + [-24])
	$0 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	$0 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($8 + [8])), [32])
	if ( $0 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = CALL db_find_i64(*($8 + [8]), *(($8 + [16])), (int_64)-4157498779731230720, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$0 = CALL $80(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($8 + [8])), [32])
	
.LABEL $label$9
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$6 = CALL db_next_i64(*($0 + [20]), ($8 + [64]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	CALL $80(($8 + [8]), $6)
	
.LABEL $label$11
	CALL $81(($8 + [8]), $0)
	
.LABEL $label$8
	$5 = *($8 + [32])
	if ( ($5 == 0) ){ goto $label$12 }
	$4 = ($8 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL $124($6)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($8 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $5
	
.LABEL $label$13
	*($4) = $5
	CALL $124($0)
	
.LABEL $label$12
	*([0] + [4]) = ($8 + [80])
}

void .FUNC _ZN9firewallx8firewall4statEv (int_32 $0)
{
	CALL _ZN9firewallx8firewall7inlstatEy($0, CALL $42($0))
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [256])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $82(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN9firewallx8firewall10resumedappEy (int_32 $0, int_64 $1)
{
	int_64 $2
	$2 = CALL $42($0)
	CALL eosio_assert(CALL $43($0, $1, $2), [1008])
	CALL $69($0, $1, $2, [0], *($0))
	CALL $69($0, $1, $2, [0], $2)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [400])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [448])
	*($1 + [40]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [512])
	$3 = *($1 + [44])
	$5 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [52])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $71($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [12]) = *($1 + [40])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [384])
	CALL memcpy(*($0 + [4]), ($3 + [12]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [13]) = *($1 + [41])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [384])
	CALL memcpy(*($0 + [4]), ($3 + [13]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [14]) = *($1 + [42])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [384])
	CALL memcpy(*($0 + [4]), ($3 + [14]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [43])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [384])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $72($0, ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [8]) = $4
	*($7 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-7880044409994084352, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $26(($7 + [8]), $0) + [64]) == (int_32)($7 + [8])), [32])
	$6 = [1]
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$6 }
	CALL $124(*(($3 + [52])))
	
.LABEL $label$6
	CALL $124($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($7 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($5) = $2
	CALL $124($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
	return $6
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-8279555224121638912, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $24($6, $4)
	*($7 + [12]) = [0]
	*($7 + [8]) = $6
	$5 = *(*(CALL $78(($7 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1232])
	*($1) = *(($6 + [16]))
	$6 = *($3 + [4])
	*($1 + [16]) = *($6)
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [48]) = CALL current_time()
	$6 = $8
	$8 = ($6 + [-48])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [384])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 + [-40]), ($1 + [16]), [32])
	CALL eosio_assert([1], [384])
	CALL memcpy(($6 + [-8]), ($1 + [48]), [8])
	$5 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-8279555224121638912, *(*($0 + [8])), $5, $8, [48])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN9firewallx8firewall6trxlogE11checksum256 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = CALL $42($0)
	*(($3 = (($5 + [32]) + [24]))) = *(($1 + [24]))
	*(($4 = (($5 + [32]) + [16]))) = *(($1 + [16]))
	*($5 + [40]) = *(($1 + [8]))
	*($5 + [32]) = *($1)
	*(($5 + [24])) = *($3)
	*(($5 + [16])) = *($4)
	*($5) = *($5 + [32])
	*($5 + [8]) = *($5 + [40])
	CALL _ZN9firewallx8firewall6inllogEy11checksum256($0, $2, $5)
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [68]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8279555224121638912)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1296])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $24(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN9firewallx8firewall8clearlogEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(CALL $43($0, $1, CALL $42($0)), [1008])
	$7 = [0]
	*(($8 + [80])) = [0]
	*($8 + [56]) = $1
	*($8 + [64]) = (int_64)-1
	$3 = *($0)
	*($8 + [48]) = $3
	$5 = (int_64)0
	*($8 + [72]) = (int_64)0
	$6 = CALL db_lowerbound_i64($3, $1, (int_64)-8279555224121638912, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $24(($8 + [48]), $6)
	
.LABEL $label$1
	$4 = ($0 + [96])
	
.LOOP $label$3:
	if ( ($7 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [640])
	$6 = [0]
	$2 = CALL db_next_i64(*($7 + [68]), ($8 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $24(($8 + [48]), $2)
	
.LABEL $label$4
	CALL $25(($8 + [48]), $7)
	$7 = $6
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((uint_64)((int_64)*($4) + (int_64)-1) >= (uint_64)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	$5 = *($0)
	*($8 + [8]) = $5
	*($8 + [16]) = $1
	*($8 + [32]) = (int_64)0
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = CALL db_lowerbound_i64($5, $1, (int_64)-4157498779731230720, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$5 = (CASTING uint_64)(uint_32 (($6 + [-90000]) - ((uint_32)$6 % (uint_32)[3600])))
	$7 = CALL $80(($8 + [8]), $7)
	
.LOOP $label$6:
	if ( ((uint_64)*($7) >= (uint_64)$5) ){ goto $label$7 }
	$6 = [0]
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [592])
	CALL eosio_assert($2, [640])
	$2 = CALL db_next_i64(*($7 + [20]), ($8 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $80(($8 + [8]), $2)
	
.LABEL $label$8
	CALL $81(($8 + [8]), $7)
	$7 = $6
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([1], [640])
	$6 = *($7 + [20])
	$7 = [0]
	$6 = CALL db_next_i64($6, ($8 + [88]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $80(($8 + [8]), $6)
	
.LABEL $label$9
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$5
	$2 = *($8 + [32])
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = ($8 + [36])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $124($6)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$13 }
	$7 = *(($8 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$7 = $2
	
.LABEL $label$11
	*($4) = $2
	CALL $124($7)
	
.LABEL $label$10
	$2 = *($8 + [72])
	if ( ($2 == 0) ){ goto $label$15 }
	$4 = ($8 + [76])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	CALL $124($6)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$18 }
	$7 = *(($8 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$7 = $2
	
.LABEL $label$16
	*($4) = $2
	CALL $124($7)
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $124(*(($1 + [52])))
	
.LABEL $label$11
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $124($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $128($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $123($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $128($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $124($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $125($7)
	return (unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [256])
	CALL memcpy(($3 + [12]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [40]) = ((int_32)*($3 + [12]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [256])
	CALL memcpy(($3 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [41]) = ((int_32)*($3 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [256])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [42]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [256])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [43]) = ((int_32)*($3 + [15]) != (int_32)[0])
	$0 = CALL $33($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $127($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $123($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $124($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}