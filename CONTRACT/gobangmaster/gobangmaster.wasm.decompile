(data (i32.const 8192) "Invalid token transfer\00invalid first pos\00eosio.token\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8254) "Only EOS token is allowed\00unable to find key\00")
(data (i32.const 8299) "Quantity must be positive\00object passed to iterator_to is not in multi_index\00")
(data (i32.const 8376) "Quantity too big\00error reading iterator\00")
(data (i32.const 8416) "Invalied memo\00")
(data (i32.const 8430) "Game not start\00magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8494) "msg-\00invalid symbol name\00")
(data (i32.const 8519) "Message price amount not valied\00read\00")
(data (i32.const 8556) "Game is not started\00")
(data (i32.const 8576) "Operation too ifrequently\00")
(data (i32.const 8602) "-")
(data (i32.const 8603) "Invalid memo\00")
(data (i32.const 8616) "No x coordinate\00")
(data (i32.const 8632) "x is not valied\00")
(data (i32.const 8648) "No y coordinate\00")
(data (i32.const 8664) "y is not valied\00")
(data (i32.const 8680) "No inviter\00")
(data (i32.const 8691) "Invalied inviter account\00")
(data (i32.const 8716) "No team\00")
(data (i32.const 8724) "horde\00")
(data (i32.const 8730) "alliance\00")
(data (i32.const 8739) "Invalid team!\00")
(data (i32.const 8753) "Wall no exists!\00")
(data (i32.const 8769) "Invalied team.\00")
(data (i32.const 8784) "Wrong quantity!\00")
(data (i32.const 8800) "remain_scale_aomunt < 0\00: no conversion\00")
(data (i32.const 8840) "Wrong quantity\00: out of range\00")
(data (i32.const 8870) "remain_scale_amount < 0\00")
(data (i32.const 8894) "x2 < x1\00")
(data (i32.const 8902) "y1<y2\00")
(data (i32.const 8908) "eosio.token\00")
(data (i32.const 8920) "transfer\00")
(data (i32.const 8929) "sendfee with unknown owner\00")
(data (i32.const 8956) "sendfee with unknown inviter\00")
(data (i32.const 8985) "Invlaied param. \00")
(data (i32.const 9002) "Game is already stop \00")
(data (i32.const 9024) "Game is already started\00")
(data (i32.const 9048) "Wrong authority\00")
(data (i32.const 9064) "Player does not exist\00")
(data (i32.const 9086) "Bonus is to small\00")
(data (i32.const 9104) "Bonus is to big\00")
(data (i32.const 9120) "Message is too long\00")
(data (i32.const 9140) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9189) "invalid symbol name\00")
(data (i32.const 9209) "Team Fee [http://gobangmaster.minority.games]\00")
(data (i32.const 9255) "Ram for Minority [http://gobangmaster.minority.games]\00")
(data (i32.const 9309) "Withdraw your bonus [http://gobangmaster.minority.games]\00")
(data (i32.const 9366) "For buy TouTiao [http://gobangmaster.minority.games]\00")
(data (i32.const 9419) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9470) "error reading iterator\00")
(data (i32.const 9493) "read\00")
(data (i32.const 9498) "get\00")
(data (i32.const 9502) "cannot create objects in table of another contract\00")
(data (i32.const 9553) "write\00")
(data (i32.const 9559) "singleton does not exist\00")
(data (i32.const 9584) "cannot pass end iterator to modify\00")
(data (i32.const 9619) "object passed to modify is not in multi_index\00")
(data (i32.const 9665) "cannot modify objects in table of another contract\00")
(data (i32.const 9716) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9775) "cannot pass end iterator to erase\00")
(data (i32.const 9809) "cannot increment end iterator\00")
(data (i32.const 9839) "object passed to erase is not in multi_index\00")
(data (i32.const 9884) "cannot erase objects in table of another contract\00")
(data (i32.const 9934) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9987) "parse memo error\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 18512) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$8 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$9 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "has_auth" (func $fimport$12 (param i64) (result i32)))
(import "env" "eosio_exit" (func $fimport$13 (param i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "tapos_block_prefix" (func $fimport$20 (result i32)))
(import "env" "tapos_block_num" (func $fimport$21 (result i32)))
(import "env" "sha256" (func $fimport$22 (param i32 i32 i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $62))
(export "_Znwj" (func $115))
(export "_ZdlPv" (func $117))
(export "_Znaj" (func $116))
(export "_ZdaPv" (func $118))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $8 $54 $27 $48 $47 $46 $55 $61)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18769))
(global $global$2 i32 (i32.const 18769))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9553])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9553])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9553])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9553])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9553])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9553])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $101(CALL $102($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [16]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	CALL memcpy(*($6), ($2 + [16]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$7 = ($2 + [28])
	$8 = ($2 + [36])
	$5 = ($2 + [44])
	
.LOOP $label$3:
	*($2 + [8]) = $0
	*($2 + [16]) = $6
	*((($2 + [16]) + [8])) = ($6 + [8])
	*($7) = ($6 + [16])
	*((($2 + [16]) + [16])) = ($6 + [17])
	*($8) = ($6 + [24])
	*((($2 + [16]) + [24])) = ($6 + [32])
	*($5) = ($6 + [36])
	*($2 + [20]) = ($6 + [2])
	CALL $95(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [9553])
	CALL memcpy(*($4 + [4]), $3, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [9553])
	CALL memcpy(*($4 + [4]), $3, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9553])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9553])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9553])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9553])
	CALL memcpy(*($0 + [4]), $4, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $134($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $134($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [9493])
	CALL memcpy($3, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [9493])
	CALL memcpy($3, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9493])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9493])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9493])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9493])
	CALL memcpy($4, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	$5 = ($1 + [8])
	$6 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$1 }
	CALL $30($5, *($4 + [8]), *(($4 + [12])))
	CALL $30(($1 + [20]), *($4 + [20]), *(($4 + [24])))
	
.LABEL $label$1
	$8 = *($1 + [8])
	$7 = *(($1 + [12]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	$4 = [38]
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	$4 = (((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $4)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 + [-30])
	
.LABEL $label$3
	$7 = ($1 + [20])
	$9 = *($1 + [20])
	$8 = *(($1 + [24]))
	$11 = ($8 - $9)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$11 / (int_32)[40]))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$6 }
	$4 = ((((int_32)((uint_32)($11 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $4) + [30])
	
.LABEL $label$6
	if ( ($4 <= [513]) ){ goto $label$8 }
	$2 = CALL $147($4)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$7
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9553])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $94($3, $5)
	CALL $94($3, $7)
	*($1 + [36]) = CALL db_store_i64(*($6 + [8]), (int_64)-2187887401785884672, *(*($0 + [8])), (int_64)-2187887401785884672, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($6 + [16]) <= (uint_64)(int_64)-2187887401785884672) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $150($2)
	if ( ((uint_64)*($6 + [16]) > (uint_64)(int_64)-2187887401785884672) ){ goto $label$9 }
	
.LABEL $label$10
	*(($6 + [16])) = (int_64)-2187887401785884671
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [16])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $147($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10096])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $147($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $123($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $130 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $131($1, $0, [8824])
	CALL $133()
	(unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $146($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $123($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $132 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $133 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $134 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $136 ()
{
	return [10100]
}

void .FUNC $137 (int_32 $0)
{
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_64 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	$7 = ($global$0 - [96])
	$global$0 = $7
	$8 = CALL current_time()
	*(($7 + [44])) = (int_64)0
	*(($7 + [60])) = (int_64)0
	*(($7 + [68])) = (int_64)0
	*($7 + [28]) = [0]
	*($7 + [32]) = [0]
	*($7 + [36 align=4]) = (int_64)0
	*($7 + [52 align=4]) = (int_64)0
	*($7 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	CALL $39(($7 + [52]), $3, $4, $5, $6)
	*($7 + [36]) = $1
	*($7 + [8]) = (int_64)0
	*($7) = $0
	CALL $40(($7 + [80]), ($7 + [16]))
	$1 = *($7 + [80])
	CALL send_deferred($7, $2, $1, (*($7 + [84]) - $1), [1])
	$1 = *($7 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	*($7 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	CALL $41(($7 + [16]))
	$global$0 = ($7 + [96])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $144(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [9839])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9884])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9934])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	$5 = *($3 + [136])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($3 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($3 + [124])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($3 + [128])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$5 = *($3 + [112])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($3 + [116])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$6 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = *($2 + [136])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($2 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$5 = *($2 + [124])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [128])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$5 = *($2 + [112])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($2 + [116])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [164]))
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [208])
	$global$0 = $1
	CALL require_auth(*($0))
	*((($1 + [160]) + [32])) = [0]
	*($1 + [176]) = (int_64)-1
	*($1 + [184]) = (int_64)0
	$2 = *($0)
	*($1 + [160]) = $2
	*($1 + [168]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)7035924439720001536, (int_64)7035924439720001536)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $6(($1 + [160]), $3)
	CALL eosio_assert(((int_32)*($3 + [160]) == (int_32)($1 + [160])), [9419])
	CALL eosio_assert([1], [9775])
	CALL eosio_assert([1], [9809])
	$4 = CALL db_next_i64(*($3 + [164]), ($1 + [120]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $6(($1 + [160]), $4)
	
.LABEL $label$2
	CALL $49(($1 + [160]), $3)
	
.LABEL $label$1
	*((($1 + [120]) + [32])) = [0]
	*($1 + [136]) = (int_64)-1
	*($1 + [144]) = (int_64)0
	$2 = *($0)
	*($1 + [120]) = $2
	*($1 + [128]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-2187887401785884672, (int_64)-2187887401785884672)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $19(($1 + [120]), $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [120])), [9419])
	CALL eosio_assert([1], [9775])
	CALL eosio_assert([1], [9809])
	$4 = CALL db_next_i64(*($3 + [36]), ($1 + [80]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $19(($1 + [120]), $4)
	
.LABEL $label$4
	CALL $50(($1 + [120]), $3)
	
.LABEL $label$3
	*((($1 + [80]) + [32])) = [0]
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = *($0)
	*($1 + [80]) = $2
	*($1 + [88]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-7876370025743908864, (int_64)-7876370025743908864)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $15(($1 + [80]), $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [80])), [9419])
	CALL eosio_assert([1], [9775])
	CALL eosio_assert([1], [9809])
	$4 = CALL db_next_i64(*($3 + [36]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	CALL $15(($1 + [80]), $4)
	
.LABEL $label$6
	CALL $51(($1 + [80]), $3)
	
.LABEL $label$5
	*((($1 + [40]) + [32])) = [0]
	*($1 + [56]) = (int_64)-1
	*($1 + [64]) = (int_64)0
	$2 = *($0)
	*($1 + [40]) = $2
	*($1 + [48]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $3(($1 + [40]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [40])), [9419])
	CALL eosio_assert([1], [9775])
	CALL eosio_assert([1], [9809])
	$4 = CALL db_next_i64(*($3 + [20]), $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	CALL $3(($1 + [40]), $4)
	
.LABEL $label$8
	CALL $52(($1 + [40]), $3)
	
.LABEL $label$7
	*(($5 = ($1 + [32]))) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$17 }
	$6 = ($1 + [24])
	$7 = ($1 + [16])
	$8 = ($1 + [8])
	$9 = ($1 + [28])
	
.LOOP $label$18:
	$3 = CALL $10($1, $3)
	CALL eosio_assert([1], [9775])
	CALL eosio_assert([1], [9809])
	$4 = CALL db_next_i64(*($3 + [100]), ($1 + [200]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	CALL $10($1, $4)
	
.LABEL $label$19
	CALL $53($1, $3)
	$10 = ($1 + [24])
	$11 = *($10)
	if ( ($11 == 0) ){ goto $label$20 }
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$23:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$23 }
	$3 = *($10)
	goto $label$21 
	
.LABEL $label$22
	$3 = $11
	
.LABEL $label$21
	*($9) = $11
	CALL _ZdlPv($3)
	
.LABEL $label$20
	*($7) = (int_64)-1
	*($10) = (int_64)0
	*($5) = [0]
	$2 = *($0)
	*($8) = $2
	*($1) = $2
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$18 }
	$11 = *(($1 + [24]))
	if ( $11 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = ($1 + [24])
	$11 = *(($1 + [24]))
	if ( ($11 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$10 = ($1 + [28])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$25 }
	
.LOOP $label$26:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$26 }
	$3 = *($6)
	*($10) = $11
	CALL _ZdlPv($3)
	$11 = *($1 + [64])
	if ( $11 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$25
	*($10) = $11
	CALL _ZdlPv($11)
	$11 = *($1 + [64])
	if ( ($11 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$11 = *($1 + [64])
	if ( $11 ){ goto $label$13 }
	
.LABEL $label$14
	$11 = *($1 + [104])
	if ( $11 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = ($1 + [68])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($1 + [64]))
	*($10) = $11
	CALL _ZdlPv($3)
	$11 = *($1 + [104])
	if ( $11 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$28
	*($10) = $11
	CALL _ZdlPv($11)
	$11 = *($1 + [104])
	if ( ($11 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = ($1 + [108])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$31 }
	
.LOOP $label$32:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$34
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$32 }
	$3 = *(($1 + [104]))
	*($10) = $11
	CALL _ZdlPv($3)
	$10 = *($1 + [144])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$31
	*($10) = $11
	CALL _ZdlPv($11)
	$10 = *($1 + [144])
	if ( ($10 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$10 = *($1 + [144])
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$0 = ($1 + [148])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$38 }
	$11 = *($3 + [20])
	if ( ($11 == 0) ){ goto $label$39 }
	*(($3 + [24])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$39
	$11 = *($3 + [8])
	if ( ($11 == 0) ){ goto $label$40 }
	*(($3 + [12])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$40
	CALL _ZdlPv($3)
	
.LABEL $label$38
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$37 }
	$3 = *(($1 + [144]))
	goto $label$35 
	
.LABEL $label$36
	$3 = $10
	
.LABEL $label$35
	*($0) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	CALL $4(($1 + [184]))
	$global$0 = ($1 + [208])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $96($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $103(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $42 (int_64 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	$7 = ($global$0 - [96])
	$global$0 = $7
	$8 = CALL current_time()
	*(($7 + [44])) = (int_64)0
	*(($7 + [60])) = (int_64)0
	*(($7 + [68])) = (int_64)0
	*($7 + [28]) = [0]
	*($7 + [32]) = [0]
	*($7 + [36 align=4]) = (int_64)0
	*($7 + [52 align=4]) = (int_64)0
	*($7 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	CALL $43(($7 + [52]), $3, $4, $5, $6)
	*($7 + [36]) = $1
	*($7 + [8]) = (int_64)0
	*($7) = $0
	CALL $40(($7 + [80]), ($7 + [16]))
	$1 = *($7 + [80])
	CALL send_deferred($7, $2, $1, (*($7 + [84]) - $1), [0])
	$1 = *($7 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	*($7 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	CALL $41(($7 + [16]))
	$global$0 = ($7 + [96])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $97($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $96($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $98($2, $1)
	CALL $100(CALL $99(CALL $99($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [18])
	CALL eosio_assert((*($4) == 0), [9024])
	CALL $32($0)
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $44($0)
	
.LABEL $label$1
	*($4) = [1]
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$5 = *($0)
	*($3 + [48]) = $5
	*($3 + [56]) = $5
	$5 = CALL current_time()
	*(($0 + [116])) = $2
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [112])) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*(($1 = CALL _Znwj([5])) + [4]) = [0]
	*($1) = [0]
	$4 = ($1 + [5])
	$6 = ($0 + [120])
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$3 }
	*(($0 + [124])) = $7
	CALL _ZdlPv($7)
	*(($7 = ($0 + [128]))) = [0]
	*($6) = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$7 = ($0 + [128])
	
.LABEL $label$2
	$6 = ($0 + [8])
	*($7) = $4
	*(($0 + [124])) = $4
	*(($0 + [120])) = $1
	*(($1 = CALL _Znwj([5])) + [4]) = [0]
	*($1) = [0]
	$4 = ($1 + [5])
	$8 = ($0 + [132])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$5 }
	*(($0 + [136])) = $7
	CALL _ZdlPv($7)
	*(($7 = ($0 + [140]))) = [0]
	*($8) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$7 = ($0 + [140])
	
.LABEL $label$4
	*($7) = $4
	*(($0 + [136])) = $4
	*(($0 + [132])) = $1
	CALL $25(($3 + [48]), $6, *($0))
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$2 = *($0)
	*($3 + [8]) = $2
	*($3 + [16]) = $2
	$5 = CALL current_time()
	$1 = CALL db_find_i64($2, $2, (int_64)-6030912142679474176, (int_64)6526922275382080480)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $10(($3 + [8]), $1) + [96]) == (int_32)($3 + [8])), [9419])
	$4 = *($3 + [32])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$5()), [9502])
	*(($0 = CALL _Znwj([112])) + [96]) = ($3 + [8])
	*($0 + [8]) = (int_64)6526922275382080480
	*($0) = (int_64)6526922275382080480
	*($0 + [16]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*($0 + [20 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($3 + [200]) = (($3 + [96]) + [92])
	*($3 + [196]) = ($3 + [96])
	*($3 + [192]) = ($3 + [96])
	CALL $12(($3 + [192]), $0)
	$2 = *($0)
	$4 = CALL db_store_i64(*(($3 + [16])), (int_64)-6030912142679474176, $9, $2, ($3 + [96]), [92])
	*($0 + [100]) = $4
	$1 = ($3 + [24])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$9 }
	*($1) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($3 + [192]) = $0
	$2 = *($0)
	*($3 + [96]) = $2
	*($3 + [92]) = $4
	$7 = ($3 + [36])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($3 + [40]))) ){ goto $label$12 }
	*($1 + [8]) = $2
	*($1 + [16]) = $4
	*($3 + [192]) = [0]
	*($1) = $0
	*($7) = ($1 + [24])
	$0 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $14(($3 + [32]), ($3 + [192]), ($3 + [96]), ($3 + [92]))
	$0 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$16 }
	CALL _ZdlPv($1)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($3 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $4
	
.LABEL $label$13
	*($7) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$6
	CALL $4(($3 + [72]))
	$global$0 = ($3 + [208])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(($1 <= [2]), [8985])
	$3 = ($0 + [18])
	CALL eosio_assert(((int_32)*($3) != (int_32)[0]), [9002])
	*($3) = $1
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	CALL $25(($2 + [8]), ($0 + [8]), $4)
	CALL $4(($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[40])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[40])
	if ( ((uint_32)$7 > (uint_32)[53687090]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[40])))) = *($1)
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	$6 = ($5 + ((int_32)$6 * (int_32)[40]))
	$4 = ($4 + [40])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [112])
	$global$0 = $1
	*((($1 + [72]) + [32])) = [0]
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	$2 = *($0)
	*($1 + [72]) = $2
	*($1 + [80]) = $2
	*($1 + [64]) = [0]
	*($1 + [56]) = (int_64)0
	$3 = (($1 + [16]) + [8])
	$4 = (($1 + [16]) + [16])
	$5 = (($1 + [16]) + [24])
	$6 = [0]
	$7 = [0]
	$8 = [0]
	
.LOOP $label$2:
	*($3) = (int_64)500
	*($4) = [0]
	*($5) = (int_64)6526922275382080480
	*(($9 = (($1 + [16]) + [32]))) = (int_64)0
	$10 = ((uint_32)($8 & [255]) / (uint_32)[10])
	*($1 + [16]) = $10
	*($1 + [18]) = (($8 - ((int_32)$10 * (int_32)[10])) & [255])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	*($7) = *($1 + [16])
	*(($7 + [32])) = *($9)
	*(($7 + [24])) = *($5)
	*(($7 + [16])) = *($4)
	*(($7 + [8])) = *($3)
	*($1 + [60]) = ($7 + [40])
	if ( ((int_32)$8 != (int_32)[99]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL $45(($1 + [56]), ($1 + [16]))
	if ( ((int_32)$8 == (int_32)[99]) ){ goto $label$1 }
	
.LABEL $label$3
	$8 = ($8 + [1])
	$6 = *((($1 + [56]) + [8]))
	$7 = *($1 + [60])
	goto $label$2 
	
.LABEL $label$1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = (($1 + [16]) + [8])
	$4 = (($1 + [16]) + [16])
	$5 = (($1 + [16]) + [24])
	$9 = (($1 + [16]) + [32])
	$6 = [0]
	$7 = [0]
	$8 = [0]
	
.LOOP $label$6:
	*($3) = (int_64)500
	*($4) = [0]
	*($5) = (int_64)6526922275382080480
	*($9) = (int_64)0
	$10 = ((uint_32)($8 & [255]) / (uint_32)[10])
	*($1 + [16]) = $10
	*($1 + [18]) = (($8 - ((int_32)$10 * (int_32)[10])) & [255])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	*($7) = *($1 + [16])
	*(($7 + [32])) = *($9)
	*(($7 + [24])) = *($5)
	*(($7 + [16])) = *($4)
	*(($7 + [8])) = *($3)
	*($1 + [4]) = ($7 + [40])
	if ( ((int_32)$8 != (int_32)[99]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	CALL $45($1, ($1 + [16]))
	if ( ((int_32)$8 == (int_32)[99]) ){ goto $label$5 }
	
.LABEL $label$7
	$8 = ($8 + [1])
	$6 = *(($1 + [8]))
	$7 = *($1 + [4])
	goto $label$6 
	
.LABEL $label$5
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$7 = (*($1 + [60]) - *($1 + [56]))
	$8 = ((int_32)$7 / (int_32)[40])
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$10 }
	$7 = CALL _Znwj($7)
	*(($1 + [24])) = $7
	*(($6 = ($1 + [28]))) = $7
	*(($1 + [32])) = ($7 + ((int_32)$8 * (int_32)[40]))
	$10 = *($1 + [56])
	$8 = (*($1 + [60]) - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($7, $10, $8)
	*($6) = (*($6) + ((int_32)((uint_32)$8 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$11
	*(($1 + [44])) = [0]
	*($1 + [36 align=4]) = (int_64)0
	$7 = (*($1 + [4]) - *($1))
	$8 = ((int_32)$7 / (int_32)[40])
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$9 }
	$7 = CALL _Znwj($7)
	*(($1 + [36])) = $7
	*(($6 = ($1 + [40]))) = $7
	*(($1 + [44])) = ($7 + ((int_32)$8 * (int_32)[40]))
	$10 = *($1)
	$8 = (*($1 + [4]) - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($7, $10, $8)
	*($6) = (*($6) + ((int_32)((uint_32)$8 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$12
	CALL $26(($1 + [72]), ($1 + [16]), *($0))
	$7 = *($1 + [36])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($1 + [40])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($1 + [24])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($1 + [28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$15 }
	*($1 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	$7 = *($1 + [56])
	if ( ($7 == 0) ){ goto $label$16 }
	*($1 + [60]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$10 = *($1 + [96])
	if ( ($10 == 0) ){ goto $label$17 }
	$3 = ($1 + [100])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	$6 = *($7 + [20])
	if ( ($6 == 0) ){ goto $label$22 }
	*(($7 + [24])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$6 = *($7 + [8])
	if ( ($6 == 0) ){ goto $label$23 }
	*(($7 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$23
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$20 }
	$7 = *(($1 + [96]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $10
	
.LABEL $label$18
	*($3) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$global$0 = ($1 + [112])
	return (unreachable)
	
.LABEL $label$10
	CALL $134(($1 + [24]))
	
.LABEL $label$9
	CALL $134(($1 + [36]))
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $146([10004])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [10004], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $136())
	*(CALL $136()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $143($4, ($3 + [12]), $2)
	$5 = CALL $136()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $129($3)
	
.LABEL $label$1
	CALL $130($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [208])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL require_auth($1)
	$7 = *($3 + [8])
	$8 = [0]
	$6 = *($3)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $9
	$8 = [1]
	$10 = $3
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$10 = ($3 + [1])
	$3 = $10
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8192])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [8254])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8299])
	CALL eosio_assert((uint_64)($6 <= (int_64)100000000), [8376])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$8 }
	$3 = uint_32($3 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$3 = *($4 + [4])
	
.LABEL $label$7
	CALL eosio_assert(($3 <= [154]), [8416])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = uint_32($3 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($4 + [4])
	
.LABEL $label$9
	CALL eosio_assert(((uint_32)$3 > (uint_32)[4]), [8416])
	$2 = CALL current_time()
	CALL eosio_assert(((uint_32)*(($0 + [116])) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000))), [8430])
	$8 = CALL $121(($5 + [96]), $4, [0], [4], $4)
	$3 = CALL $127($8, [8494])
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*(($0 + [18])) == (int_32)[1]), [8556])
	*($5 + [78]) = [0]
	*($5 + [76]) = [0]
	*($5 + [72]) = [1]
	$3 = CALL $120(($5 + [48]), $4)
	CALL $9($0, $3, ($5 + [78]), ($5 + [76]), ($5 + [72]), ($5 + [64]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$21
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$19 }
	$3 = CALL $10(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($5 + [8])), [9419])
	CALL memcpy(($0 + [168]), $3, [96])
	$8 = ($0 + [184])
	CALL eosio_assert(((int_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) - *($8)) > (int_32)[1]), [8576])
	*($8) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$2 = *($5 + [64])
	goto $label$18 
	
.LABEL $label$20
	CALL eosio_assert(((int_64)$6 == (int_64)5000), [8519])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$17 }
	$3 = uint_32($3 >> [1])
	goto $label$16 
	
.LABEL $label$19
	$2 = *($5 + [64])
	$9 = CALL current_time()
	*($0 + [168]) = $1
	*(($0 + [188])) = (int_64)0
	*(($0 + [200])) = (int_64)0
	*(($0 + [208])) = (int_64)0
	*(($0 + [216])) = (int_64)0
	*(($0 + [224])) = (int_64)0
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = (int_64)0
	*(($0 + [184])) = ((uint_64)$9 / (uint_64)(int_64)1000000)
	$3 = [0]
	
.LABEL $label$18
	*(($0 + [176])) = $2
	CALL $11($0, $1, $2, *($5 + [78]), *($5 + [76]), *($5 + [72]), $6)
	*(($8 = ($0 + [200]))) = ((int_64)*($8) + (int_64)$6)
	$2 = *($0)
	if ( ($3 == 0) ){ goto $label$22 }
	CALL eosio_assert([1], [9584])
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($5 + [8])), [9619])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [9665])
	$3 = CALL memcpy($3, ($0 + [168]), [96])
	$1 = *($3)
	CALL eosio_assert(((int_64)$1 == (int_64)*($3)), [9716])
	*($5 + [200]) = (($5 + [96]) + [92])
	*($5 + [196]) = ($5 + [96])
	*($5 + [192]) = ($5 + [96])
	CALL $12(($5 + [192]), $3)
	CALL db_update_i64(*($3 + [100]), $2, ($5 + [96]), [92])
	$3 = ($5 + [24])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$13 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$0 = *($5 + [32])
	if ( $0 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$22
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [9502])
	*(($3 = CALL _Znwj([112])) + [96]) = ($5 + [8])
	$3 = CALL memcpy($3, ($0 + [168]), [96])
	*($5 + [200]) = (($5 + [96]) + [92])
	*($5 + [196]) = ($5 + [96])
	*($5 + [192]) = ($5 + [96])
	CALL $12(($5 + [192]), $3)
	$1 = *($3)
	$0 = CALL db_store_i64(*(($5 + [16])), (int_64)-6030912142679474176, $2, $1, ($5 + [96]), [92])
	*($3 + [100]) = $0
	$8 = ($5 + [24])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$23 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($5 + [192]) = $3
	$2 = *($3)
	*($5 + [96]) = $2
	*($5 + [92]) = $0
	$10 = ($5 + [36])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [40]))) ){ goto $label$15 }
	*($8 + [8]) = $2
	*($8 + [16]) = $0
	*($5 + [192]) = [0]
	*($8) = $3
	*($10) = ($8 + [24])
	$3 = *($5 + [192])
	*($5 + [192]) = [0]
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$17
	$3 = *($4 + [4])
	
.LABEL $label$16
	$8 = CALL $121(($5 + [96]), $4, [4], $3, $4)
	$3 = CALL $120(($5 + [80]), $8)
	CALL $13($0, $1, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$24
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($8 + [8]))
	$global$0 = ($5 + [208])
	return 
	
.LABEL $label$15
	CALL $14(($5 + [32]), ($5 + [192]), ($5 + [96]), ($5 + [92]))
	$3 = *($5 + [192])
	*($5 + [192]) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$0 = *($5 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$12
	$10 = ($5 + [36])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$28 }
	CALL _ZdlPv($8)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$27 }
	$3 = *(($5 + [32]))
	goto $label$25 
	
.LABEL $label$26
	$3 = $0
	
.LABEL $label$25
	*($10) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($5 + [208])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$6 = ($global$0 - [64])
	$global$0 = $6
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$7 = uint_32($7 >> [1])
	$8 = ($1 + [1])
	$9 = ($8 + $7)
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($1 + [4])
	$8 = *($1 + [8])
	$9 = ($8 + $7)
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $135(*($8)) ){ goto $label$4 }
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$8 = $9
	$9 = [1]
	$10 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$7 = ($8 + [1])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $135(*($7)) == 0) ){ goto $label$10 }
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($8) = *($7)
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = [1]
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($1 + $9)
	$9 = ($7 + uint_32($10 >> $9))
	goto $label$1 
	
.LABEL $label$2
	$7 = *($1 + [8])
	$9 = ($7 + *($1 + [4]))
	
.LABEL $label$1
	CALL $125($1, ($8 - $7), ($9 - $8))
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$13 }
	$8 = ($1 + [1])
	$10 = [0]
	$7 = [0]
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($1 + [8])
	$10 = [0]
	$7 = [0]
	$9 = *($1 + [4])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = [0]
	
.LOOP $label$14:
	$7 = ($7 + ((int_32)*($8) == (int_32)[45]))
	$8 = ($8 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$14 }
	
.LABEL $label$11
	CALL eosio_assert(((int_32)($7 | [1]) == (int_32)[3]), [8603])
	*($6 + [56]) = $10
	*($6 + [48]) = (int_64)0
	*($6) = $10
	*($6 + [47]) = [1]
	*($6 + [60]) = CALL $109($1, ($6 + [48]), [8602], $6, ($6 + [47]))
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)$10), [8616])
	$8 = CALL $128(($6 + [48]), $10, [10])
	*($2) = $8
	CALL eosio_assert((($8 & [65534]) <= [10]), [8632])
	CALL eosio_assert([1], [8632])
	*($6 + [60]) = (*($6 + [60]) + [1])
	*($6) = [1]
	*($6 + [60]) = CALL $109($1, ($6 + [48]), [8602], ($6 + [60]), $6)
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)$10), [8648])
	$8 = CALL $128(($6 + [48]), $10, [10])
	*($3) = $8
	CALL eosio_assert((($8 & [65534]) <= [10]), [8664])
	CALL eosio_assert([1], [8664])
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$20 }
	*($6 + [60]) = (*($6 + [60]) + [1])
	*($6) = [1]
	*($6 + [60]) = CALL $109($1, ($6 + [48]), [8602], ($6 + [60]), $6)
	$7 = [0]
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [8680])
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[12]), [8691])
	$8 = ( *(($6 + [56])) ? (($6 + [48]) | [1]) : (*($6 + [48]) & [1]) )
	
.LOOP $label$21:
	$9 = ($8 + $7)
	$10 = ($7 + [1])
	$7 = $10
	if ( *($9) ){ goto $label$21 }
	$11 = (CASTING uint_64)(uint_32 ($10 + [-1]))
	$12 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$22:
	$15 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$23 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$27 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$26
	$8 = ($8 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$22 }
	*($5) = $14
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$12 = *($0)
	*($6) = $12
	*($6 + [8]) = $12
	$8 = CALL db_find_i64($12, $12, (int_64)-6030912142679474176, $14)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	$8 = CALL $10($6, $8)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [9419])
	$12 = *($8 + [8])
	if ( ((int_64)$12 != (int_64)6526922275382080480) ){ goto $label$18 }
	if ( ((int_64)*($5) == (int_64)*($0 + [168])) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	*($5) = (int_64)6526922275382080480
	goto $label$15 
	
.LABEL $label$19
	$12 = (int_64)6526922275382080480
	
.LABEL $label$18
	*($5) = $12
	if ( ((int_64)$12 != (int_64)*($0 + [168])) ){ goto $label$16 }
	
.LABEL $label$17
	*($5) = (int_64)6526922275382080480
	
.LABEL $label$16
	$9 = *($6 + [24])
	if ( ($9 == 0) ){ goto $label$15 }
	$10 = ($6 + [28])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$31 }
	CALL _ZdlPv($7)
	
.LABEL $label$31
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$30 }
	$8 = *(($6 + [24]))
	goto $label$28 
	
.LABEL $label$29
	$8 = $9
	
.LABEL $label$28
	*($10) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = (*($6 + [60]) + [1])
	*($6 + [60]) = $8
	CALL $121($6, $1, $8, [-1], $1)
	if ( (*($6 + [48]) & [1]) ){ goto $label$33 }
	*($6 + [48]) = [0]
	goto $label$32 
	
.LABEL $label$33
	*(*(($6 + [56]))) = [0]
	*($6 + [52]) = [0]
	
.LABEL $label$32
	CALL $124(($6 + [48]), [0])
	*((($6 + [48]) + [8])) = *(($6 + [8]))
	*($6 + [48]) = *($6)
	$8 = *($6 + [48])
	CALL eosio_assert(((int_32)( *($6 + [52]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [8716])
	if ( (CALL $127(($6 + [48]), [8724]) == 0) ){ goto $label$37 }
	if ( (CALL $127(($6 + [48]), [8730]) == 0) ){ goto $label$36 }
	CALL eosio_assert([0], [8739])
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$37
	*($4) = [1]
	if ( (*($6 + [48]) & [1]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	*($4) = [2]
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$34
	$global$0 = ($6 + [64])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9470])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [112 align=4]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128 align=4]) = (int_64)0
	*($5 + [136 align=4]) = (int_64)0
	*($5 + [144]) = [0]
	*($5 + [160]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [10])
	*($3 + [44]) = ($5 + [16])
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [80])
	*($3 + [80]) = ($5 + [88])
	*($3 + [84]) = ($5 + [96])
	*($3 + [88]) = ($5 + [104])
	*($3 + [92]) = ($5 + [108])
	*($3 + [96]) = ($5 + [112])
	*($3 + [100]) = ($5 + [124])
	*($3 + [104]) = ($5 + [136])
	*($3 + [108]) = ($5 + [152])
	CALL $75(($3 + [32]), ($3 + [24]))
	*($5 + [164]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)7035924439720001536
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7035924439720001536
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [136])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [140])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [124])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [128])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9502])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([176])) + [112 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128 align=4]) = (int_64)0
	*($3 + [136 align=4]) = (int_64)0
	*($3 + [144]) = [0]
	*($3 + [160]) = $1
	CALL $73(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7035924439720001536
	$5 = *($3 + [164])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7035924439720001536
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [140])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [124])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [128])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($3 + [112])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [116])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [136])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [140])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [124])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [128])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 = CALL memcpy($0, $1, [112])) + [112 align=4]) = (int_64)0
	*(($0 + [120])) = [0]
	$2 = (*(($1 + [116])) - *($1 + [112]))
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL _Znwj($2)
	*(($0 + [112])) = $3
	*(($0 + [120])) = ($3 + $2)
	*(($2 = ($0 + [116]))) = $3
	$4 = *(($1 + [112]))
	$5 = (*(($1 + [116])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$4
	*($0 + [124 align=4]) = (int_64)0
	*(($0 + [132])) = [0]
	$2 = (*(($1 + [128])) - *($1 + [124]))
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL _Znwj($2)
	*(($0 + [124])) = $3
	*(($0 + [132])) = ($3 + $2)
	*(($2 = ($0 + [128]))) = $3
	$4 = *(($1 + [124]))
	$5 = (*(($1 + [128])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$5
	*($0 + [136 align=4]) = (int_64)0
	*(($0 + [144])) = [0]
	$2 = (*(($1 + [140])) - *($1 + [136]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = int_32($2 >> [4])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [136])) = $2
	*(($0 + [144])) = ($2 + ($3 << [4]))
	*(($3 = ($0 + [140]))) = $2
	$4 = *(($1 + [136]))
	$5 = (*(($1 + [140])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + $5)
	
.LABEL $label$6
	*($0 + [152]) = *($1 + [152])
	return $0
	
.LABEL $label$3
	CALL $134(($0 + [112]))
	
.LABEL $label$2
	CALL $134(($0 + [124]))
	
.LABEL $label$1
	CALL $134(($0 + [136]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$1), [9419])
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $5($0, $5)
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7035924439720001536, (int_64)7035924439720001536)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $6($1, $5)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$1), [9419])
	CALL $5($0, $5)
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $7($4, $1, $2, ($4 + [8]))
	CALL $5($0, *($4 + [4]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9470])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9493])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9493])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [20]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)4982871454518345728
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982871454518345728
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [384])
	$global$0 = $2
	*($0) = $1
	*(($3 = ($0 + [120]))) = (int_64)0
	*(($4 = ($0 + [128]))) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = (int_64)0
	*(($0 + [152])) = [0]
	*(($2 + [376])) = [0]
	*($2 + [352]) = $1
	*($2 + [344]) = $1
	*($2 + [360]) = (int_64)-1
	*($2 + [368]) = (int_64)0
	*($2 + [192]) = [0]
	*($2 + [184]) = $1
	*($2 + [194]) = [0]
	*($2 + [200]) = (int_64)0
	*($2 + [208]) = (int_64)0
	*($2 + [216]) = (int_64)0
	*($2 + [224]) = (int_64)0
	*($2 + [232]) = (int_64)0
	*($2 + [240]) = (int_64)0
	*($2 + [248]) = (int_64)0
	*($2 + [256]) = (int_64)0
	*($2 + [264]) = (int_64)0
	*($2 + [272]) = (int_64)0
	*($2 + [280]) = (int_64)3
	*($2 + [288]) = (int_64)0
	*(($5 = CALL _Znwj([5]))) = [0]
	*($5 + [4]) = [0]
	$6 = ($5 + [5])
	*((($2 + [184]) + [120])) = $6
	*(($2 + [300])) = $6
	*($2 + [296]) = $5
	*(($5 = CALL _Znwj([5]))) = [0]
	*($5 + [4]) = [0]
	*((($2 + [184]) + [144])) = [0]
	$6 = ($5 + [5])
	*((($2 + [184]) + [132])) = $6
	*((($2 + [184]) + [128])) = $6
	*($2 + [308]) = $5
	*($2 + [320]) = (int_64)0
	*($2 + [336]) = (int_64)6526922275382080480
	CALL $2(($2 + [24]), ($2 + [344]), *($0), ($2 + [184]))
	CALL memcpy(($0 + [8]), ($2 + [24]), [112])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$1 }
	*(($0 + [124])) = $5
	CALL _ZdlPv($5)
	*($4) = [0]
	*($3) = (int_64)0
	
.LABEL $label$1
	$5 = (($2 + [24]) + [112])
	*($3) = *($5)
	$3 = (($2 + [24]) + [120])
	$6 = *($3)
	*($3) = [0]
	*($4) = $6
	*($5) = (int_64)0
	$5 = *(($0 + [132]))
	if ( ($5 == 0) ){ goto $label$2 }
	*(($0 + [136])) = $5
	CALL _ZdlPv($5)
	*(($0 + [140])) = [0]
	*(($0 + [132])) = (int_64)0
	
.LABEL $label$2
	$5 = ($2 + [148])
	*(($0 + [132])) = *($5)
	$3 = (($2 + [24]) + [132])
	$4 = *($3)
	*($3) = [0]
	*(($0 + [140])) = $4
	*($5) = (int_64)0
	$5 = ($0 + [144])
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($0 + [148])) = $3
	CALL _ZdlPv($3)
	*(($0 + [152])) = [0]
	*($5) = (int_64)0
	
.LABEL $label$3
	*(($0 + [160])) = *($2 + [176])
	$3 = ($2 + [160])
	*($5) = *($3)
	$5 = (($2 + [24]) + [144])
	$4 = *($5)
	*($5) = [0]
	*(($0 + [152])) = $4
	*($3) = (int_64)0
	$5 = *($2 + [148])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($2 + [152])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$5 = *($2 + [136])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($2 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$1 = *($0)
	*($2 + [24]) = $1
	*($2 + [32]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*(CALL $3(($2 + [24]), $5) + [16]) == (int_32)($2 + [24])), [9419])
	$5 = *(($2 + [52]))
	if ( ((int_32)$5 == (int_32)*(($2 + [48]))) ){ goto $label$9 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($2 + [24])), [9419])
	goto $label$8 
	
.LABEL $label$10
	*($0 + [264]) = (int_64)10000
	*(($0 + [272])) = (int_64)1000000000
	$5 = *(($2 + [320]))
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = [0]
	$3 = CALL db_find_i64(*($2 + [24]), *(($2 + [32])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $3(($2 + [24]), $3)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($2 + [24])), [9419])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9559])
	$1 = *(($5 + [8]))
	*((($2 + [8]) + [8])) = $1
	$7 = *($5)
	*($0 + [264]) = $7
	*(($0 + [272])) = $1
	*($2 + [8]) = $7
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$11 }
	$6 = ($2 + [52])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($2 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $4
	
.LABEL $label$12
	*($6) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$5 = *(($2 + [320]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($2 + [324])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *(($2 + [308]))
	if ( ($5 == 0) ){ goto $label$16 }
	*(($2 + [312])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *(($2 + [296]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($2 + [300])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	CALL $4(($2 + [368]))
	$global$0 = ($2 + [384])
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9470])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9493])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $105(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [9493])
	CALL memcpy(($5 + [24]), *($3 + [36]), [8])
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	*($3 + [16]) = (int_64)-7876370025743908864
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-7876370025743908864
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$1), [9419])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7876370025743908864, (int_64)-7876370025743908864)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $15($1, $3)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$1), [9419])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9559])
	*($0) = *($2)
	CALL $120(($0 + [8]), ($2 + [8]))
	*($0 + [24]) = *($2 + [24])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9419])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7876370025743908864, (int_64)-7876370025743908864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9419])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9584])
	CALL $59($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $60($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9470])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [96]) = $0
	CALL $87(($3 + [32]), $5)
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$7 = ($global$0 - [112])
	$global$0 = $7
	$8 = CALL $110()
	$9 = [0]
	*(($7 + [104])) = [0]
	*($7 + [88]) = (int_64)-1
	*($7 + [96]) = (int_64)0
	$10 = *($0)
	*($7 + [72]) = $10
	*($7 + [80]) = $10
	$11 = int_32($8 >> [31])
	$8 = (((int_32)($8 + $11) ^ (int_32)$11) & [3])
	$11 = CALL db_find_i64($10, $10, (int_64)-2187887401785884672, (int_64)-2187887401785884672)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $19(($7 + [72]), $11) + [32]) == (int_32)($7 + [72])), [9419])
	$9 = [1]
	
.LABEL $label$1
	$8 = ($8 + [1])
	CALL eosio_assert($9, [8753])
	$9 = (((int_32)$4 * (int_32)[10]) + $3)
	CALL $20(($7 + [40]), ($7 + [72]))
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$5 }
	$9 = *($9)
	*(($9 = (*(($11 = ($0 + [120]))) + *((*($7 + [48]) + ($5 = ((int_32)$9 * (int_32)[40]))) + [16])))) = ( ($9 + [-1]) ? [0] : $9 )
	*(($9 = (*($11) + $8))) = (*($9) + [1])
	$10 = *((*($7 + [48]) + $5) + [8])
	$12 = ((uint_64)((int_64)$10 * (int_64)135) / (uint_64)(int_64)100)
	CALL eosio_assert(((int_64)$12 == (int_64)$6), [8784])
	*(($5 = (*($7 + [48]) + $5)) + [16]) = $8
	*($5 + [17]) = [0]
	*($5 + [8]) = $12
	$12 = *($5 + [24])
	*($5 + [24]) = $1
	*($5 + [32]) = (*($5 + [32]) + [1])
	$6 = ((int_64)$10 * (int_64)100)
	$10 = ((int_64)((uint_64)((int_64)$10 * (int_64)1000) / (uint_64)(int_64)100) + (int_64)$6)
	$1 = ((int_64)$6 * (int_64)100)
	CALL eosio_assert(((uint_64)$1 >= (uint_64)$10), [8800])
	$10 = (int_64)
	*(($5 = ($0 + [24]))) = ((int_64)*($5) + (int_64)((uint_64)((int_64)$10($1 - $10)) * (int_64)10) / (uint_64)(int_64)100))
	*(($5 = ($0 + [32]))) = ((int_64)*($5) + (int_64)((uint_64)((int_64)$10 * (int_64)30) / (uint_64)(int_64)100))
	CALL $21($0, [1], ((uint_64)((int_64)$10 * (int_64)35) / (uint_64)(int_64)100))
	if ( (CALL $22($0, [1], $0, ($8 & [255])) == 0) ){ goto $label$4 }
	*(($0 + [18])) = [0]
	goto $label$2 
	
.LABEL $label$6
	$9 = *($9)
	*(($9 = (*(($11 = ($0 + [132]))) + *((*($7 + [60]) + ($5 = ((int_32)$9 * (int_32)[40]))) + [16])))) = ( ($9 + [-1]) ? [0] : $9 )
	*(($9 = (*($11) + $8))) = (*($9) + [1])
	$10 = *((*($7 + [60]) + $5) + [8])
	$12 = ((uint_64)((int_64)$10 * (int_64)135) / (uint_64)(int_64)100)
	CALL eosio_assert(((int_64)$12 == (int_64)$6), [8840])
	*(($5 = (*($7 + [60]) + $5)) + [16]) = $8
	*($5 + [17]) = [0]
	*($5 + [8]) = $12
	$12 = *($5 + [24])
	*($5 + [24]) = $1
	*($5 + [32]) = (*($5 + [32]) + [1])
	$6 = ((int_64)$10 * (int_64)100)
	$10 = ((int_64)((uint_64)((int_64)$10 * (int_64)1000) / (uint_64)(int_64)100) + (int_64)$6)
	$1 = ((int_64)$6 * (int_64)100)
	CALL eosio_assert(((uint_64)$1 >= (uint_64)$10), [8870])
	$10 = (int_64)
	*(($5 = ($0 + [40]))) = ((int_64)*($5) + (int_64)((uint_64)((int_64)$10($1 - $10)) * (int_64)10) / (uint_64)(int_64)100))
	*(($5 = ($0 + [48]))) = ((int_64)*($5) + (int_64)((uint_64)((int_64)$10 * (int_64)30) / (uint_64)(int_64)100))
	CALL $21($0, [2], ((uint_64)((int_64)$10 * (int_64)35) / (uint_64)(int_64)100))
	if ( (CALL $22($0, [2], $0, ($8 & [255])) == 0) ){ goto $label$3 }
	*(($0 + [18])) = [0]
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([0], [8739])
	$6 = (int_64)0
	$12 = (int_64)6526922275382080480
	$10 = (int_64)0
	goto $label$2 
	
.LABEL $label$4
	CALL $23($0, [1], ($7 + [48]), $3, $4)
	goto $label$2 
	
.LABEL $label$3
	CALL $23($0, [2], ($7 + [60]), $3, $4)
	
.LABEL $label$2
	CALL $24($0, $12, $10, $6)
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$10 = *($0)
	*($7) = $10
	*($7 + [8]) = $10
	CALL $25($7, ($0 + [8]), $10)
	CALL $26(($7 + [72]), ($7 + [40]), *($0))
	CALL $4(($7 + [24]))
	$0 = *($7 + [60])
	if ( ($0 == 0) ){ goto $label$7 }
	*((($7 + [40]) + [24])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$0 = *($7 + [48])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($7 + [52])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$9 = *($7 + [96])
	if ( ($9 == 0) ){ goto $label$9 }
	$3 = ($7 + [100])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	$5 = *($0 + [20])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($0 + [24])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($0 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$12 }
	$0 = *(($7 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $9
	
.LABEL $label$10
	*($3) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($7 + [112])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [150]), [9120])
	*($3 + [112]) = (int_64)0
	$5 = CALL $120((($3 + [112]) + [8]), $2)
	*($3 + [136]) = $1
	*(($3 + [104])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$1 = *($0)
	*($3 + [72]) = $1
	*($3 + [80]) = $1
	$2 = CALL db_find_i64($1, $1, (int_64)-7876370025743908864, (int_64)-7876370025743908864)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $15(($3 + [72]), $2) + [32]) == (int_32)($3 + [72])), [9419])
	CALL $16(($3 + [40]), ($3 + [72]))
	*($3 + [112]) = ((int_64)*($3 + [40]) + (int_64)1)
	$1 = *($3 + [64])
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [56])))
	goto $label$3 
	
.LABEL $label$4
	$1 = (int_64)6526922275382080480
	
.LABEL $label$3
	CALL $17(($3 + [72]), ($3 + [112]), *($0))
	*((($3 + [24]) + [8])) = [0]
	*($3 + [24]) = (int_64)0
	$2 = CALL $146([9366])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [24]) = ($2 << [1])
	$4 = (($3 + [24]) | [1])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($3 + [24]) = ($6 | [1])
	*($3 + [32]) = $4
	*($3 + [28]) = $2
	
.LABEL $label$8
	CALL memcpy($4, [9366], $2)
	
.LABEL $label$7
	*(($4 + $2)) = [0]
	CALL $18($0, $1, (int_64)2500, ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$10
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $146([9209])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$13 }
	*($3 + [8]) = ($2 << [1])
	$4 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($3 + [8]) = ($6 | [1])
	*($3 + [16]) = $4
	*($3 + [12]) = $2
	
.LABEL $label$12
	CALL memcpy($4, [9209], $2)
	
.LABEL $label$11
	*(($4 + $2)) = [0]
	CALL $18($0, (int_64)6526922275382080480, (int_64)2500, ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$14
	$4 = *($3 + [96])
	if ( ($4 == 0) ){ goto $label$15 }
	$6 = ($3 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$20
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$18 }
	$2 = *(($3 + [96]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $4
	
.LABEL $label$16
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$15
	if ( ((*($5) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($3 + [128])))
	
.LABEL $label$21
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$6
	CALL $119(($3 + [24]))
	
.LABEL $label$5
	CALL $119(($3 + [8]))
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [9493])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9493])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9493])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9493])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $76(*($1), *($0 + [64]))
	CALL $76(*($1), *($0 + [68]))
	CALL $77(*($1), *($0 + [72]))
	$3 = *($0 + [76])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($4 + [32])) = [0]
	$6 = *($5)
	*(($5 = ($0 + [104]))) = ((int_64)$6 + (int_64)1)
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$7 = *($0)
	*($4) = $7
	*($4 + [8]) = $7
	CALL $25($4, ($0 + [8]), $7)
	CALL $4(($4 + [24]))
	$8 = *($0)
	$7 = (int_64)6
	
.LOOP $label$1:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	*($4 + [72]) = (int_64)3617214756542218240
	*($4 + [64]) = $8
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [8908]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$7 }
	$11 = *($5)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$11 = ($11 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$12 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$2 }
	*($4 + [56]) = $10
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [8920]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$13 }
	$11 = *($5)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$11 = ($11 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$12 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$8 }
	*($4 + [48]) = $10
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9140])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$7 = $12
	$11 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$7 = $12
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $11 ){ goto $label$18 }
	$11 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$11 = [0]
	
.LABEL $label$14
	CALL eosio_assert($11, [9189])
	*(($4 + [24])) = (int_64)1397703940
	*($4 + [8]) = $1
	*($4 + [16]) = $2
	*($4) = *($0)
	CALL $120(($4 + [32]), $3)
	CALL $42($6, [0], $8, ($4 + [64]), ($4 + [56]), ($4 + [48]), $4)
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$19
	$global$0 = ($4 + [80])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9470])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9493])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $89(($3 + [32]), ($5 + [8]))
	CALL $89(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-2187887401785884672
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-2187887401785884672
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9502])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9553])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [9553])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4982871454518345728
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $86(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9665])
	$3 = *($3)
	*($1) = *($3)
	$6 = ($1 + [8])
	CALL $122($6, ($3 + [8]))
	*($1 + [24]) = *($3 + [24])
	CALL eosio_assert([1], [9716])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $147($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9553])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $104($5, $6)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($5 + [4]), $7, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-7876370025743908864) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($4)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7876370025743908864) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = (int_64)-7876370025743908863
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9839])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9884])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9934])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	$5 = *($3 + [20])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($3 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$6 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$8:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$5 = *($2 + [20])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($2 + [24])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = *($2 + [8])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($2 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9839])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9884])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9934])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$7 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9839])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9884])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9934])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9839])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9884])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9934])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
}

void .FUNC $54 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [176])
	$global$0 = $2
	$3 = [1]
	if ( CALL has_auth($1) ){ goto $label$1 }
	$3 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($3, [9048])
	$4 = CALL current_time()
	CALL eosio_assert(((uint_32)*(($0 + [116])) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))), [8430])
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$4 = *($0)
	*($2 + [24]) = $4
	*($2 + [32]) = $4
	$3 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $10(($2 + [24]), $5)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($2 + [24])), [9419])
	
.LABEL $label$2
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9064])
	$6 = CALL memcpy(($0 + [168]), $3, [96])
	$7 = *(($0 + [240]))
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$5 }
	$8 = *(($0 + [248]))
	$4 = *(($0 + [96]))
	if ( ((uint_64)$4 >= (uint_64)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = *(($0 + [96]))
	*(($0 + [248])) = $8
	$4 = $8
	
.LABEL $label$4
	*(($0 + [248])) = $4
	*(($9 = ($0 + [232]))) = ((int_64)*($9) + (int_64)((int_64))($4 - $8) * (int_64)$7))
	
.LABEL $label$3
	$7 = *(($0 + [216]))
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$8 }
	$8 = *(($0 + [224]))
	$4 = *(($0 + [72]))
	if ( ((uint_64)$4 >= (uint_64)$8) ){ goto $label$7 }
	$4 = *(($0 + [208]))
	goto $label$6 
	
.LABEL $label$8
	$8 = *(($0 + [72]))
	*(($0 + [224])) = $8
	$4 = $8
	
.LABEL $label$7
	*(($0 + [224])) = $4
	$4 = ((int_64)*($9) + (int_64)((int_64))($4 - $8) * (int_64)$7)
	*(($9 = ($0 + [208]))) = $4)
	
.LABEL $label$6
	$10 = ($0 + [256])
	$9 = ($0 + [232])
	$4 = ((int_64)((int_64)*($9) + (int_64)$4) + (int_64)*($10))
	CALL eosio_assert(((uint_64)$4 >= (uint_64)*($0 + [264])), [9086])
	CALL eosio_assert(((uint_64)$4 <= (uint_64)*(($0 + [272]))), [9104])
	*($9) = (int_64)0
	*(($0 + [208])) = (int_64)0
	*($10) = (int_64)0
	$7 = *($0)
	CALL eosio_assert($5, [9584])
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($2 + [24])), [9619])
	CALL eosio_assert(((int_64)*($2 + [24]) == (int_64)CALL $fimport$5()), [9665])
	$3 = CALL memcpy($3, $6, [96])
	$8 = *($3)
	CALL eosio_assert(((int_64)$8 == (int_64)*($3)), [9716])
	*($2 + [168]) = (($2 + [64]) + [92])
	*($2 + [164]) = ($2 + [64])
	*($2 + [160]) = ($2 + [64])
	CALL $12(($2 + [160]), $3)
	CALL db_update_i64(*($3 + [100]), $7, ($2 + [64]), [92])
	$3 = ($2 + [40])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$9 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = ((uint_64)$4 / (uint_64)(int_64)100)
	$3 = CALL $146([9309])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($2 + [8]) = ($3 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [8]) = ($6 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $3
	
.LABEL $label$12
	CALL memcpy($5, [9309], $3)
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	CALL $18($0, $1, $4, ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$14
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$15 }
	$6 = ($2 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$19 }
	CALL _ZdlPv($3)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($2 + [48]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $5
	
.LABEL $label$16
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$10
	CALL $119(($2 + [8]))
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	$7 = ($global$0 - [176])
	$global$0 = $7
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$2 }
	$8 = ((uint_64)((int_64)$8 * (int_64)5) / (uint_64)(int_64)100)
	$8 = *($1)
	*(($1 = ($0 + [32]))) = (int_64))($8 - $8)
	$9 = ((uint_64)((int_64)$9 * (int_64)10) / (uint_64)(int_64)100)
	$9 = *($1)
	*(($1 = ($0 + [48]))) = (int_64))($9 - $9)
	$8 = ((int_64)$9 + (int_64)$8)
	goto $label$1 
	
.LABEL $label$3
	$8 = ((uint_64)((int_64)$8 * (int_64)5) / (uint_64)(int_64)100)
	$8 = *($1)
	*(($1 = ($0 + [48]))) = (int_64))($8 - $8)
	$9 = ((uint_64)((int_64)$9 * (int_64)10) / (uint_64)(int_64)100)
	$9 = *($1)
	*(($1 = ($0 + [32]))) = (int_64))($9 - $9)
	$8 = ((int_64)$9 + (int_64)$8)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8739])
	$8 = (int_64)0
	
.LABEL $label$1
	$11 = ($0 + [144])
	*(($10 = ($0 + [148]))) = *($11)
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$9 = *($0)
	*($7 + [24]) = $9
	*($7 + [32]) = $9
	CALL eosio_assert(((int_32)$6 >= (int_32)$5), [8902])
	$9 = ((uint_64)((uint_64)((int_64)$8 * (int_64)40) / (uint_64)(int_64)100) / (uint_64)(CASTING int_64)(int_32 ($6 - $5)))
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$4 }
	$12 = (((int_32)$4 * (int_32)[10]) + $3)
	$13 = ((uint_64)((int_64)$8 * (int_64)60) / (uint_64)(int_64)100)
	$14 = (($7 + [64]) + [92])
	$15 = ($0 + [256])
	$16 = (($7 + [64]) + [8])
	$17 = ($0 + [168])
	$18 = ($0 + [152])
	$19 = ($7 + [52])
	$20 = ($7 + [48])
	
.LOOP $label$6:
	*(($1 = (($4 = *($2)) + ($22 = ((int_32)($5 = (((int_32)($21 = $5) * (int_32)[10]) + $3)) * (int_32)[40])))) + [17]) = [1]
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$13 }
	*($15) = ((int_64)*($15) + (int_64)$13)
	*($16) = *(($4 + ((int_32)$12 * (int_32)[40])) + [8])
	*($7 + [64]) = *($17)
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($18)) ){ goto $label$12 }
	*($5) = *($7 + [64])
	*(($5 + [8])) = *($16)
	*($10) = (*($10) + [16])
	$5 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$13
	$8 = *($1 + [24])
	if ( ((int_64)$8 != (int_64)*($17)) ){ goto $label$14 }
	*($16) = *($1 + [8])
	*($7 + [64]) = $8
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($18)) ){ goto $label$11 }
	*($5) = *($7 + [64])
	*(($5 + [8])) = *($16)
	*($10) = (*($10) + [16])
	goto $label$10 
	
.LABEL $label$14
	$1 = *($19)
	$23 = *($20)
	if ( ((int_32)$23 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$15:
	$5 = ($1 + [-24])
	$4 = *($5)
	if ( ((int_64)*($4) == (int_64)$8) ){ goto $label$9 }
	$1 = $5
	if ( ((int_32)$23 != (int_32)$5) ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$12
	CALL $37($11, ($7 + [64]))
	$5 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	CALL $37($11, ($7 + [64]))
	
.LABEL $label$10
	*($15) = ((int_64)*($15) + (int_64)$9)
	$5 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$23 == (int_32)$1) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($7 + [24])), [9419])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$5 = CALL db_find_i64(*($7 + [24]), *((($7 + [24]) + [8])), (int_64)-6030912142679474176, $8)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $10(($7 + [24]), $5)
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($7 + [24])), [9419])
	
.LABEL $label$7
	$5 = (*($2) + $22)
	*(($1 = (($7 + [8]) + [8]))) = *($5 + [8])
	*($7 + [8]) = *($5 + [24])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($18)) ){ goto $label$17 }
	*($5) = *($7 + [8])
	*(($5 + [8])) = *($1)
	*($10) = (*($10) + [16])
	goto $label$16 
	
.LABEL $label$17
	CALL $37($11, ($7 + [8]))
	
.LABEL $label$16
	$24 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9584])
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($7 + [24])), [9619])
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)CALL $fimport$5()), [9665])
	*($4 + [88]) = ((int_64)*($4 + [88]) + (int_64)$9)
	$8 = *($4)
	CALL eosio_assert([1], [9716])
	*((($7 + [160]) + [8])) = $14
	*($7 + [164]) = ($7 + [64])
	*($7 + [160]) = ($7 + [64])
	CALL $12(($7 + [160]), $4)
	CALL db_update_i64(*($4 + [100]), $24, ($7 + [64]), [92])
	$5 = (($7 + [24]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$18 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$5 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($7 + [48])
	if ( ($4 == 0) ){ goto $label$4 }
	$21 = ($7 + [52])
	$5 = *($21)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	CALL _ZdlPv($1)
	
.LABEL $label$22
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($7 + [48]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $4
	
.LABEL $label$19
	*($21) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($7 + [176])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [9419])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [9419])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9584])
	CALL $57($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $58($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9665])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9716])
	CALL eosio_assert([1], [9553])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9553])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9665])
	$3 = *($3)
	*($1) = *($3)
	$6 = ($1 + [8])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $30($6, *($3 + [8]), *(($3 + [12])))
	CALL $30(($1 + [20]), *($3 + [20]), *(($3 + [24])))
	
.LABEL $label$1
	CALL eosio_assert([1], [9716])
	$8 = *($1 + [8])
	$7 = *(($1 + [12]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	$3 = [38]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	$3 = (((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 + [-30])
	
.LABEL $label$3
	$7 = ($1 + [20])
	$9 = *($1 + [20])
	$8 = *(($1 + [24]))
	$11 = ($8 - $9)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$11 / (int_32)[40]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$6 }
	$3 = ((((int_32)((uint_32)($11 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $3) + [30])
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$4 = CALL $147($3)
	goto $label$7 
	
.LABEL $label$8
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$7
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9553])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $94($5, $6)
	CALL $94($5, $7)
	CALL db_update_i64(*($1 + [36]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-2187887401785884672) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $150($4)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2187887401785884672) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = (int_64)-2187887401785884671
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8393])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $147($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $113($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $114(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8445])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8499])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8551])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [8551])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $110 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$0 = ($global$0 - [64])
	$global$0 = $0
	$1 = (int_64)0
	$2 = (int_64)59
	$3 = [8233]
	$4 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$6 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$6 = (int_64)0
	if ( ((int_64)$2 == (int_64)47244640260) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$4 = ((int_64)$6 | (int_64)$4)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$1 }
	*(($0 + [48])) = [0]
	*($0 + [24]) = (int_64)6526922275382080480
	*($0 + [16]) = $4
	*($0 + [32]) = (int_64)-1
	*($0 + [40]) = (int_64)0
	$6 = *(CALL $111(($0 + [16]), (int_64)5459781, [8280]))
	$7 = *($0 + [40])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($0 + [44])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = CALL tapos_block_prefix()
	$5 = CALL tapos_block_num()
	*($0 + [8]) = ((int_64)((int_64)((int_64)$6 + (int_64)CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$5 * (int_32)$3))) + (int_64)74250)
	CALL sha256(($0 + [8]), [4], ($0 + [16]))
	$6 = *($0 + [16])
	$2 = *($0 + [24])
	$1 = *($0 + [32])
	$4 = *($0 + [40])
	$global$0 = ($0 + [64])
	return (CASTING uint_32)(uint_64 ((int_64)$4 + (int_64)((int_64)$1 + (int_64)((int_64)$2 + (int_64)$6))))
}

int_32 .FUNC $111 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8325])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $112($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8325])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $138($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $119 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18500])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18308]
	$3 = (((int_32)$1 * (int_32)[12]) + [18308])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9502])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([176])) + [112 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128 align=4]) = (int_64)0
	*($3 + [136 align=4]) = (int_64)0
	*($3 + [144]) = [0]
	*($3 + [160]) = $1
	CALL $88(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7035924439720001536
	$5 = *($3 + [164])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7035924439720001536
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [140])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [124])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [128])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($3 + [112])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [116])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [112])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [9619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9665])
	$3 = *($3)
	$1 = CALL memcpy($1, $3, [112])
	$6 = ($1 + [112])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $81($6, *($3 + [112]), *(($3 + [116])))
	CALL $81(($1 + [124]), *($3 + [124]), *(($3 + [128])))
	CALL $82(($1 + [136]), *($3 + [136]), *(($3 + [140])))
	
.LABEL $label$1
	*($1 + [152]) = *($3 + [152])
	CALL eosio_assert([1], [9716])
	$7 = ($1 + [152])
	$9 = *($1 + [112])
	$8 = *(($1 + [116]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 $10)
	$3 = [107]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($10 + $3) : ((int_32)$9 == (int_32)$8) )
	$9 = ($1 + [124])
	$10 = *($1 + [124])
	$8 = *(($1 + [128]))
	$12 = ($8 - $10)
	$11 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($12 + $3) : ((int_32)$10 == (int_32)$8) )
	$10 = ($1 + [136])
	$12 = *($1 + [136])
	$8 = *(($1 + [140]))
	$13 = ($8 - $12)
	$11 = (CASTING uint_64)(uint_32 int_32($13 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$5 }
	$3 = (($13 & [-16]) + $3)
	
.LABEL $label$5
	$8 = ($3 + [8])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$3 = CALL $147($8)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [96]) = $6
	*($5 + [100]) = $9
	*($5 + [104]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [10])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [32])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	*($5 + [64]) = ($1 + [56])
	*($5 + [68]) = ($1 + [64])
	*($5 + [72]) = ($1 + [72])
	*($5 + [76]) = ($1 + [80])
	*($5 + [80]) = ($1 + [88])
	*($5 + [84]) = ($1 + [96])
	*($5 + [88]) = ($1 + [104])
	*($5 + [92]) = ($1 + [108])
	*($5 + [108]) = $7
	CALL $83(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)7035924439720001536) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $150($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7035924439720001536) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = (int_64)7035924439720001537
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	*($3 + [56]) = $2
	*($3 + [48]) = $1
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $1
	CALL $56(($3 + [8]), ($3 + [48]), $1)
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($3 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9498])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $96($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9493])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = *(($0 + [240]))
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$3 }
	$5 = *(($0 + [248]))
	$4 = *(($0 + [96]))
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [96]))
	*(($0 + [248])) = $5
	$4 = $5
	
.LABEL $label$2
	*(($0 + [248])) = $4
	*(($6 = ($0 + [232]))) = ((int_64)*($6) + (int_64)((int_64))($4 - $5) * (int_64)$3))
	
.LABEL $label$1
	$7 = *(($0 + [216]))
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$11 }
	$8 = *(($0 + [224]))
	$5 = *(($0 + [72]))
	if ( ((uint_64)$5 >= (uint_64)$8) ){ goto $label$10 }
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = *(($0 + [72]))
	*(($0 + [224])) = $8
	$5 = $8
	
.LABEL $label$10
	*(($0 + [224])) = $5
	*(($6 = ($0 + [208]))) = ((int_64)*($6) + (int_64)((int_64))($5 - $8) * (int_64)$7))
	if ( ((int_32)$1 != (int_32)[2]) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [216])) = ((int_64)$7 + (int_64)1)
	$4 = ((int_64)*($1) + (int_64)1)
	*(($1 = ($0 + [64]))) = $4
	*(($1 = ($0 + [56]))) = ((int_64)*($1) + (int_64)$2)
	*(($0 + [72])) = ((int_64)$5 + (int_64)((uint_64)$2 / (uint_64)$4))
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$12 }
	$3 = ((int_64)$3 + (int_64)1)
	*(($0 + [240])) = $3
	$5 = ((int_64)*($1) + (int_64)1)
	*(($1 = ($0 + [88]))) = $5
	*(($1 = ($0 + [80]))) = ((int_64)*($1) + (int_64)$2)
	*(($0 + [96])) = ((int_64)$4 + (int_64)((uint_64)$2 / (uint_64)$5))
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$12
	CALL eosio_assert([0], [8739])
	$3 = *(($0 + [240]))
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($0 + [248]))
	$4 = *(($0 + [96]))
	if ( (uint_64)($4 <= $5) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($0 + [96]))
	*(($0 + [248])) = $5
	$4 = $5
	
.LABEL $label$5
	*(($0 + [248])) = $4
	*(($1 = ($0 + [232]))) = ((int_64)*($1) + (int_64)((int_64))($4 - $5) * (int_64)$3))
	
.LABEL $label$4
	$5 = *(($0 + [216]))
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$14 }
	$4 = *(($0 + [224]))
	$3 = *(($0 + [72]))
	if ( ((uint_64)$3 >= (uint_64)$4) ){ goto $label$13 }
	return 
	
.LABEL $label$14
	$4 = *(($0 + [72]))
	*(($0 + [224])) = $4
	$3 = $4
	
.LABEL $label$13
	*(($0 + [224])) = $3
	*(($0 = ($0 + [208]))) = ((int_64)*($0) + (int_64)((int_64))($3 - $4) * (int_64)$5))
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$1), [9419])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-2187887401785884672, (int_64)-2187887401785884672)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $19($1, $3)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$1), [9419])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9559])
	CALL $31($0, $2)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = (((int_32)$4 * (int_32)[10]) + $3)
	$6 = [0]
	$7 = [0]
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$8 = (*($2) + ((int_32)$5 * (int_32)[40]))
	$7 = ($8 + [16])
	$8 = ($8 + [17])
	$9 = [0]
	
.LOOP $label$5:
	if ( ($9 == 0) ){ goto $label$6 }
	if ( ((int_32)*(($8 + [-1])) != (int_32)*($7)) ){ goto $label$4 }
	if ( *($8) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = ($8 + [-40])
	$9 = ($9 + [-1])
	$10 = ($3 + $9)
	if ( ((int_32)($10 + [1]) > (int_32)[0]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$10 = (($3 + $9) + [1])
	
.LABEL $label$3
	$7 = ( $10 ? [0] : ((int_32)$10 > (int_32)[0]) )
	$9 = $3
	if ( ((int_32)$3 > (int_32)[9]) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = (*($2) + ((int_32)$5 * (int_32)[40]))
	$10 = ($8 + [16])
	$8 = ($8 + [17])
	
.LOOP $label$8:
	if ( ($6 == 0) ){ goto $label$9 }
	if ( ((int_32)*(($8 + [-1])) != (int_32)*($10)) ){ goto $label$7 }
	if ( *($8) ){ goto $label$7 }
	
.LABEL $label$9
	$8 = ($8 + [40])
	$6 = ($6 + [1])
	$9 = ($3 + $6)
	if ( ((int_32)($9 + [-1]) < (int_32)[9]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$7
	$9 = (($3 + $6) + [-1])
	
.LABEL $label$1
	$11 = [9]
	$8 = ( $9 ? [9] : ((int_32)$9 < (int_32)[9]) )
	if ( ((int_32)($8 - $7) < (int_32)[4]) ){ goto $label$10 }
	*(($6 = ($0 + [188]))) = (*($6) + [1])
	$12 = CALL current_time()
	*(($0 + [160])) = *($0 + [168])
	$6 = (CASTING uint_32)(uint_64 ((uint_64)$12 / (uint_64)(int_64)1000000))
	*(($0 + [112])) = $6
	*(($0 + [192])) = $6
	CALL $32($0)
	CALL $33($0, $1, $2, $3, $4, $7, $8)
	
.LABEL $label$10
	if ( ((int_32)$4 > (int_32)[9]) ){ goto $label$12 }
	$8 = *($2)
	$13 = (($8 + ((int_32)$5 * (int_32)[40])) + [16])
	$8 = (($8 + ((int_32)($3 + ((int_32)$4 * (int_32)[10])) * (int_32)[40])) + [17])
	$6 = [0]
	$9 = $4
	
.LOOP $label$15:
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((int_32)*(($8 + [-1])) != (int_32)*($13)) ){ goto $label$14 }
	if ( *($8) ){ goto $label$14 }
	
.LABEL $label$16
	$6 = ($6 + [-10])
	$8 = ($8 + [400])
	$10 = ((int_32)$9 < (int_32)[9])
	$7 = ($9 + [1])
	$9 = $7
	if ( $10 ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = ($9 + [-1])
	
.LABEL $label$13
	$11 = ( $7 ? [9] : ((int_32)$7 < (int_32)[9]) )
	$7 = $4
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	$8 = *($2)
	$13 = (($8 + ((int_32)$5 * (int_32)[40])) + [16])
	$8 = (($8 + ((int_32)($3 + ((int_32)$4 * (int_32)[10])) * (int_32)[40])) + [17])
	$6 = [0]
	$9 = $4
	
.LOOP $label$18:
	if ( ($6 == 0) ){ goto $label$19 }
	if ( ((int_32)*(($8 + [-1])) != (int_32)*($13)) ){ goto $label$17 }
	if ( *($8) ){ goto $label$17 }
	
.LABEL $label$19
	$6 = ($6 + [10])
	$8 = ($8 + [-400])
	$10 = ((int_32)$9 > (int_32)[0])
	$7 = ($9 + [-1])
	$9 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$11 
	
.LABEL $label$17
	$7 = ($9 + [1])
	
.LABEL $label$11
	$8 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	if ( ((int_32)($11 - $8) < (int_32)[4]) ){ goto $label$20 }
	*(($6 = ($0 + [188]))) = (*($6) + [1])
	$12 = CALL current_time()
	*(($0 + [160])) = *($0 + [168])
	$6 = (CASTING uint_32)(uint_64 ((uint_64)$12 / (uint_64)(int_64)1000000))
	*(($0 + [112])) = $6
	*(($0 + [192])) = $6
	CALL $32($0)
	CALL $34($0, $1, $2, $3, $4, $8, $11)
	
.LABEL $label$20
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	$5 = *($0)
	*($4 + [56]) = $5
	*($4 + [64]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-2187887401785884672, (int_64)-2187887401785884672)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $19(($4 + [56]), $7) + [32]) == (int_32)($4 + [56])), [9419])
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [8753])
	CALL $20(($4 + [24]), ($4 + [56]))
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$4 }
	CALL $30(($4 + [8]), *($4 + [32]), *(($4 + [36])))
	$7 = [0]
	if ( ((int_32)*((*(($0 + [120])) + $3)) == (int_32)[100]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $30(($4 + [8]), *($4 + [44]), *(($4 + [48])))
	$7 = [0]
	if ( ((int_32)*((*(($0 + [132])) + $3)) == (int_32)[100]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([0], [8769])
	
.LABEL $label$3
	$7 = [1]
	
.LABEL $label$2
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$6 }
	*($4 + [12]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$1 = *($4 + [44])
	if ( ($1 == 0) ){ goto $label$7 }
	*(($4 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$8 }
	*(($4 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$3 = *($4 + [80])
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = ($4 + [84])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	$6 = *($1 + [20])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($1 + [24])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($1 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	CALL _ZdlPv($1)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$1 = *(($4 + [80]))
	goto $label$10 
	
.LABEL $label$11
	$1 = $3
	
.LABEL $label$10
	*($8) = $3
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return $7
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [160]) == (int_32)$0), [9419])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035924439720001536, (int_64)7035924439720001536)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $6($0, $4)
	CALL eosio_assert(((int_32)*($4 + [160]) == (int_32)$0), [9419])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9584])
	CALL $28($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $29($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = [0]
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$6 = *($0)
	*($4 + [40]) = $6
	*($4 + [48]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $10(($4 + [40]), $7)
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)($4 + [40])), [9419])
	
.LABEL $label$1
	if ( ((int_64)*($0 + [168]) != (int_64)$1) ){ goto $label$3 }
	*(($5 = ($0 + [256]))) = ((int_64)((int_64)((uint_64)((int_64)$3 * (int_64)10) / (uint_64)(int_64)100) + (int_64)$3) + (int_64)*($5))
	goto $label$2 
	
.LABEL $label$3
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8929])
	$1 = *($0)
	CALL eosio_assert($7, [9584])
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)($4 + [40])), [9619])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$5()), [9665])
	*($5 + [88]) = ((int_64)((int_64)((uint_64)((int_64)$3 * (int_64)10) / (uint_64)(int_64)100) + (int_64)$3) + (int_64)*($5 + [88]))
	$6 = *($5)
	CALL eosio_assert([1], [9716])
	*($4 + [184]) = (($4 + [80]) + [92])
	*($4 + [180]) = ($4 + [80])
	*($4 + [176]) = ($4 + [80])
	CALL $12(($4 + [176]), $5)
	CALL db_update_i64(*($5 + [100]), $1, ($4 + [80]), [92])
	$5 = ($4 + [56])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$6 = *(($0 + [176]))
	$7 = *(($4 + [68]))
	$8 = *(($4 + [64]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($7 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$6 }
	$7 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($9 + [96]) == (int_32)($4 + [40])), [9419])
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	$5 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)-6030912142679474176, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $10(($4 + [40]), $5)
	CALL eosio_assert(((int_32)*($9 + [96]) == (int_32)($4 + [40])), [9419])
	
.LABEL $label$4
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [8956])
	$3 = *($0)
	CALL eosio_assert($5, [9584])
	CALL eosio_assert(((int_32)*($9 + [96]) == (int_32)($4 + [40])), [9619])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$5()), [9665])
	$1 = ((int_64)$2 * (int_64)5)
	*($9 + [88]) = ((int_64)*($9 + [88]) + (int_64)((uint_64)$1 / (uint_64)(int_64)100))
	$6 = *($9)
	CALL eosio_assert([1], [9716])
	*($4 + [184]) = (($4 + [80]) + [92])
	*($4 + [180]) = ($4 + [80])
	*($4 + [176]) = ($4 + [80])
	CALL $12(($4 + [176]), $9)
	CALL db_update_i64(*($9 + [100]), $3, ($4 + [80]), [92])
	$5 = ($4 + [56])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$8 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$6 = ((uint_64)((int_64)$2 * (int_64)15) / (uint_64)(int_64)10000)
	$5 = CALL $146([9209])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$13 }
	*($4 + [24]) = ($5 << [1])
	$7 = (($4 + [24]) | [1])
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4 + [24]) = ($9 | [1])
	*($4 + [32]) = $7
	*($4 + [28]) = $5
	
.LABEL $label$12
	CALL memcpy($7, [9209], $5)
	
.LABEL $label$11
	*(($7 + $5)) = [0]
	CALL $18($0, (int_64)6526922275382080480, $6, ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($4 + [32]))
	
.LABEL $label$14
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$6 = ((uint_64)$1 / (uint_64)(int_64)10000)
	$5 = CALL $146([9255])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$17 }
	*($4 + [8]) = ($5 << [1])
	$7 = (($4 + [8]) | [1])
	if ( $5 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4 + [8]) = ($9 | [1])
	*($4 + [16]) = $7
	*($4 + [12]) = $5
	
.LABEL $label$16
	CALL memcpy($7, [9255], $5)
	
.LABEL $label$15
	*(($7 + $5)) = [0]
	CALL $18($0, (int_64)6526922275382080480, $6, ($4 + [8]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($4 + [16]))
	
.LABEL $label$18
	$9 = *($4 + [64])
	if ( ($9 == 0) ){ goto $label$19 }
	$8 = ($4 + [68])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$23 }
	CALL _ZdlPv($7)
	
.LABEL $label$23
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($4 + [64]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $9
	
.LABEL $label$20
	*($8) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($4 + [192])
	return (unreachable)
	
.LABEL $label$10
	CALL $119(($4 + [24]))
	
.LABEL $label$9
	CALL $119(($4 + [8]))
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	$5 = ($global$0 - [48])
	$global$0 = $5
	*((($5 + [8]) + [32])) = [0]
	*(($0 + [24])) = $3
	*(($0 + [32])) = $1
	*(($0 + [40])) = $4
	*(($0 + [48])) = $2
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	CALL $25(($5 + [8]), ($0 + [8]), $2)
	CALL $4((($5 + [8]) + [24]))
	$global$0 = ($5 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9419])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2187887401785884672, (int_64)-2187887401785884672)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $19($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9419])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9584])
	CALL $35($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $36($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8215])
	$2 = CALL $126($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $121($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [9987])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $124($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

int_32 .FUNC $135 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9493])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9493])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $147($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [9493])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $150($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $122($6, ($4 + [8]))
	*($1 + [24]) = *($4 + [24])
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9553])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $104($3, $6)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $7, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)-7876370025743908864, *(*($0 + [8])), (int_64)-7876370025743908864, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($5 + [16]) <= (uint_64)(int_64)-7876370025743908864) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($2)
	if ( ((uint_64)*($5 + [16]) > (uint_64)(int_64)-7876370025743908864) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = (int_64)-7876370025743908863
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $147($6)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	*($3 + [48]) = ($3 + [32])
	*($3 + [56]) = $3
	CALL $72(($3 + [56]), ($3 + [48]))
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $150($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *(($3 + [24]))
	$8 = *(($3 + [16]))
	$9 = *(($3 + [8]))
	$10 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9493])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $147($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9493])
	CALL memcpy(($3 + [31]), $6, [1])
	*($3 + [8]) = ((int_32)*($3 + [31]) != (int_32)[0])
	CALL eosio_assert(((uint_32)($1 + [-1]) > (uint_32)[7]), [9493])
	$2 = (($3 + [8]) + [8])
	CALL memcpy($2, ($6 + [1]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $150($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($2)
	$6 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $7), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $147($5)
	CALL read_action_data($2, $5)
	CALL $150($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $61 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$4 = CALL current_time()
	$5 = CALL db_find_i64($3, $3, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $10($2, $5) + [96]) == (int_32)$2), [9419])
	$6 = *($2 + [24])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$5()), [9502])
	*(($0 = CALL _Znwj([112])) + [96]) = $2
	*($0 + [8]) = (int_64)6526922275382080480
	*($0) = $1
	*($0 + [16]) = ((uint_64)$4 / (uint_64)(int_64)1000000)
	*($0 + [20 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($2 + [152]) = (($2 + [48]) + [92])
	*($2 + [148]) = ($2 + [48])
	*($2 + [144]) = ($2 + [48])
	CALL $12(($2 + [144]), $0)
	$3 = *($0)
	$6 = CALL db_store_i64(*(($2 + [8])), (int_64)-6030912142679474176, $7, $3, ($2 + [48]), [92])
	*($0 + [100]) = $6
	$5 = ($2 + [16])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$4 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($2 + [144]) = $0
	$3 = *($0)
	*($2 + [48]) = $3
	*($2 + [44]) = $6
	$8 = ($2 + [28])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($2 + [32]))) ){ goto $label$7 }
	*($5 + [8]) = $3
	*($5 + [16]) = $6
	*($2 + [144]) = [0]
	*($5) = $0
	*($8) = ($5 + [24])
	$0 = *($2 + [144])
	*($2 + [144]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $14(($2 + [24]), ($2 + [144]), ($2 + [48]), ($2 + [44]))
	$0 = *($2 + [144])
	*($2 + [144]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($2 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($2 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $6
	
.LABEL $label$8
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [160])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9502])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $108(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-7876370025743908864
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-7876370025743908864
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9140])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9189])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $70(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $150($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $71(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memory()
	$4 = CALL $1(($3 + [136]), $0)
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8908]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$6 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$10 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8920]
	$8 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$16 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$9 = ($9 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$11 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$10 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [1]
	*($3 + [8]) = *($3 + [128])
	CALL $63($4, ($3 + [8]))
	$7 = *(($4 + [144]))
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	$7 = *(($4 + [144]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [148])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *(($4 + [132]))
	if ( ($7 == 0) ){ goto $label$17 }
	*(($4 + [136])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$7 = *(($4 + [120]))
	if ( ($7 == 0) ){ goto $label$18 }
	*(($4 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	CALL $137([0])
	$global$0 = ($3 + [416])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 <= (int_64)-4157529991795441665) ){ goto $label$25 }
	if ( ((int_64)$2 > (int_64)3626339551107612671) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$19 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [48]) = *($3 + [88])
	CALL $64($4, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)-4417321293536296960) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-4417087500749635584) ){ goto $label$19 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [64]) = *($3 + [72])
	CALL $65($4, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)3626339551107612672) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)4923678490122780672) ){ goto $label$19 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [4]
	*($3 + [40]) = *($3 + [96])
	CALL $66($4, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$23
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [16]) = *($3 + [120])
	CALL $67($4, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$22
	*($3 + [116]) = [0]
	*($3 + [112]) = [6]
	*($3 + [24]) = *($3 + [112])
	CALL $68($4, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$21
	*($3 + [108]) = [0]
	*($3 + [104]) = [7]
	*($3 + [32]) = *($3 + [104])
	CALL $69($4, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$20
	*($3 + [84]) = [0]
	*($3 + [80]) = [8]
	*($3 + [56]) = *($3 + [80])
	CALL $64($4, ($3 + [56]))
	
.LABEL $label$19
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9553])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9553])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $101($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $104(*($1), ($0 + [32]))
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9553])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9553])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $107($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $124($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $124($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $119($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9553])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9553])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9498])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$8 = *($1)
	$3 = *($1 + [4])
	$7 = ((int_32)($3 - $8) / (int_32)[40])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$4 }
	CALL $91($1, ($4 - $7))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($8 + ((int_32)$4 * (int_32)[40]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [28])
	$7 = ($2 + [36])
	$6 = ($2 + [44])
	
.LOOP $label$6:
	*($2 + [8]) = $0
	*($2 + [16]) = $8
	*((($2 + [16]) + [8])) = ($8 + [8])
	*($4) = ($8 + [16])
	*((($2 + [16]) + [16])) = ($8 + [17])
	*($7) = ($8 + [24])
	*((($2 + [16]) + [24])) = ($8 + [32])
	*($6) = ($8 + [36])
	*($2 + [20]) = ($8 + [2])
	CALL $92(($2 + [16]), ($2 + [8]))
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $5, [112])
	$6 = ($1 + [112])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $81($6, *($5 + [112]), *(($5 + [116])))
	CALL $81(($1 + [124]), *($5 + [124]), *(($5 + [128])))
	CALL $82(($1 + [136]), *($5 + [136]), *(($5 + [140])))
	
.LABEL $label$1
	*($1 + [152]) = *($5 + [152])
	$7 = ($1 + [152])
	$9 = *($1 + [112])
	$8 = *(($1 + [116]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 $10)
	$5 = [107]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	$5 = ( $5 ? ($10 + $5) : ((int_32)$9 == (int_32)$8) )
	$9 = ($1 + [124])
	$10 = *($1 + [124])
	$8 = *(($1 + [128]))
	$12 = ($8 - $10)
	$11 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	$5 = ( $5 ? ($12 + $5) : ((int_32)$10 == (int_32)$8) )
	$10 = ($1 + [136])
	$12 = *($1 + [136])
	$8 = *(($1 + [140]))
	$13 = ($8 - $12)
	$11 = (CASTING uint_64)(uint_32 int_32($13 >> [4]))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$5 }
	$5 = (($13 & [-16]) + $5)
	
.LABEL $label$5
	$8 = ($5 + [8])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$5 = CALL $147($8)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $8)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [10])
	*($3 + [44]) = ($1 + [16])
	*($3 + [48]) = ($1 + [24])
	*($3 + [52]) = ($1 + [32])
	*($3 + [56]) = ($1 + [40])
	*($3 + [60]) = ($1 + [48])
	*($3 + [64]) = ($1 + [56])
	*($3 + [68]) = ($1 + [64])
	*($3 + [72]) = ($1 + [72])
	*($3 + [76]) = ($1 + [80])
	*($3 + [80]) = ($1 + [88])
	*($3 + [84]) = ($1 + [96])
	*($3 + [88]) = ($1 + [104])
	*($3 + [92]) = ($1 + [108])
	*($3 + [96]) = $6
	*($3 + [100]) = $9
	*($3 + [104]) = $10
	*($3 + [108]) = $7
	CALL $83(($3 + [32]), ($3 + [24]))
	*($1 + [164]) = CALL db_store_i64(*($4 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), (int_64)7035924439720001536, $5, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)7035924439720001536) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $150($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)7035924439720001536) ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [16])) = (int_64)7035924439720001537
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [112])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9493])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9493])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9493])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9553])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9553])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9553])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [9553])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9553])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9553])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9553])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $84(*($1), *($0 + [64]))
	CALL $84(*($1), *($0 + [68]))
	CALL $85(*($1), *($0 + [72]))
	$3 = *($0 + [76])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9553])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [4])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = [268435455]
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [4])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [4]) << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $134($0)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $134($0)
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [136])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [140])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [124])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [128])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10108]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10112])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10108]) = [1]
	$2 = ($2 << [16])
	*([0] + [10112]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10112])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10112]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10108]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10108]) = [1]
	$3 = ($3 << [16])
	*([0] + [10112]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10112])
	
.LABEL $label$10
	*([0] + [10112]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $149($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [10009])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $147 (int_32 $0)
{
	return CALL $148([10116], $0)
}

int_32 .FUNC $146 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $141 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $139($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $140 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $140($3, (int_64)0)
	$4 = CALL $142($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $141($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $136()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $141($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18513]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $140($0, (int_64)0)
	*(CALL $136()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $141($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $141($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $141($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $141($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18513])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $141($0)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $141($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8245]))
	$8 = (int_64)0
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $141($0)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $141($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $140($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18513]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18513]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $141($0) + [18513]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $136()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $136()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $136()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $5, [112])
	$6 = ($1 + [112])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $81($6, *($5 + [112]), *(($5 + [116])))
	CALL $81(($1 + [124]), *($5 + [124]), *(($5 + [128])))
	CALL $82(($1 + [136]), *($5 + [136]), *(($5 + [140])))
	
.LABEL $label$1
	*($1 + [152]) = *($5 + [152])
	$7 = ($1 + [152])
	$9 = *($1 + [112])
	$8 = *(($1 + [116]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 $10)
	$5 = [107]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	$5 = ( $5 ? ($10 + $5) : ((int_32)$9 == (int_32)$8) )
	$9 = ($1 + [124])
	$10 = *($1 + [124])
	$8 = *(($1 + [128]))
	$12 = ($8 - $10)
	$11 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	$5 = ( $5 ? ($12 + $5) : ((int_32)$10 == (int_32)$8) )
	$10 = ($1 + [136])
	$12 = *($1 + [136])
	$8 = *(($1 + [140]))
	$13 = ($8 - $12)
	$11 = (CASTING uint_64)(uint_32 int_32($13 >> [4]))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$5 }
	$5 = (($13 & [-16]) + $5)
	
.LABEL $label$5
	$8 = ($5 + [8])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$5 = CALL $147($8)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $8)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [10])
	*($3 + [44]) = ($1 + [16])
	*($3 + [48]) = ($1 + [24])
	*($3 + [52]) = ($1 + [32])
	*($3 + [56]) = ($1 + [40])
	*($3 + [60]) = ($1 + [48])
	*($3 + [64]) = ($1 + [56])
	*($3 + [68]) = ($1 + [64])
	*($3 + [72]) = ($1 + [72])
	*($3 + [76]) = ($1 + [80])
	*($3 + [80]) = ($1 + [88])
	*($3 + [84]) = ($1 + [96])
	*($3 + [88]) = ($1 + [104])
	*($3 + [92]) = ($1 + [108])
	*($3 + [96]) = $6
	*($3 + [100]) = $9
	*($3 + [104]) = $10
	*($3 + [108]) = $7
	CALL $83(($3 + [32]), ($3 + [24]))
	*($1 + [164]) = CALL db_store_i64(*($4 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), (int_64)7035924439720001536, $5, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)7035924439720001536) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $150($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)7035924439720001536) ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [16])) = (int_64)7035924439720001537
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [112])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9493])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9493])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $105(*($1), ($0 + [32]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $120(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $120(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9498])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $78($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [9493])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9498])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $79($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9493])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9493])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $80(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $134($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $96(($6 + [28]), [4])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[3]), [9553])
	CALL memcpy($2, $4, [4])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9502])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $93(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-2187887401785884672
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-2187887401785884672
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $90(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $134($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $134($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$4 }
	$3 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$3 = int_32($2 >> [3])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [16])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $134($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [4]))
	$5 = ($2 + ($5 << [4]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [4]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = (int_64)1
	CALL cancel_deferred(($1 + [16]))
	$2 = *($0)
	$3 = (int_64)6
	
.LOOP $label$1:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	*($1 + [24]) = (int_64)3617214756542218240
	*($1 + [16]) = $2
	$3 = (int_64)5
	
.LOOP $label$2:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$2 }
	*($1 + [8]) = (int_64)-6217917475468607488
	*($1) = [0]
	CALL $38((int_64)1, [86400], $2, ($1 + [16]), $0, ($1 + [8]), $1)
	$global$0 = ($1 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	$7 = ($global$0 - [176])
	$global$0 = $7
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$2 }
	$8 = ((uint_64)((int_64)$8 * (int_64)5) / (uint_64)(int_64)100)
	$8 = *($1)
	*(($1 = ($0 + [32]))) = (int_64))($8 - $8)
	$9 = ((uint_64)((int_64)$9 * (int_64)10) / (uint_64)(int_64)100)
	$9 = *($1)
	*(($1 = ($0 + [48]))) = (int_64))($9 - $9)
	$8 = ((int_64)$9 + (int_64)$8)
	goto $label$1 
	
.LABEL $label$3
	$8 = ((uint_64)((int_64)$8 * (int_64)5) / (uint_64)(int_64)100)
	$8 = *($1)
	*(($1 = ($0 + [48]))) = (int_64))($8 - $8)
	$9 = ((uint_64)((int_64)$9 * (int_64)10) / (uint_64)(int_64)100)
	$9 = *($1)
	*(($1 = ($0 + [32]))) = (int_64))($9 - $9)
	$8 = ((int_64)$9 + (int_64)$8)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8739])
	$8 = (int_64)0
	
.LABEL $label$1
	$11 = ($0 + [144])
	*(($10 = ($0 + [148]))) = *($11)
	CALL eosio_assert(((int_32)$6 >= (int_32)$5), [8894])
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$9 = *($0)
	*($7 + [24]) = $9
	*($7 + [32]) = $9
	$9 = ((uint_64)((uint_64)((int_64)$8 * (int_64)40) / (uint_64)(int_64)100) / (uint_64)(CASTING int_64)(int_32 ($6 - $5)))
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$4 }
	$12 = ((int_32)$4 * (int_32)[10])
	$13 = ($12 + $3)
	$14 = ((uint_64)((int_64)$8 * (int_64)60) / (uint_64)(int_64)100)
	$15 = (($7 + [64]) + [92])
	$16 = ($0 + [256])
	$17 = (($7 + [64]) + [8])
	$18 = ($0 + [168])
	$19 = ($0 + [152])
	$20 = ($7 + [52])
	$21 = ($7 + [48])
	
.LOOP $label$6:
	*(($1 = (($3 = *($2)) + ($22 = ((int_32)($5 = (($4 = $5) + $12)) * (int_32)[40])))) + [17]) = [1]
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$13 }
	*($16) = ((int_64)*($16) + (int_64)$14)
	*($17) = *(($3 + ((int_32)$13 * (int_32)[40])) + [8])
	*($7 + [64]) = *($18)
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($19)) ){ goto $label$12 }
	*($5) = *($7 + [64])
	*(($5 + [8])) = *($17)
	*($10) = (*($10) + [16])
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$13
	$8 = *($1 + [24])
	if ( ((int_64)$8 != (int_64)*($18)) ){ goto $label$14 }
	*($17) = *($1 + [8])
	*($7 + [64]) = $8
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($19)) ){ goto $label$11 }
	*($5) = *($7 + [64])
	*(($5 + [8])) = *($17)
	*($10) = (*($10) + [16])
	goto $label$10 
	
.LABEL $label$14
	$1 = *($20)
	$23 = *($21)
	if ( ((int_32)$23 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$15:
	$5 = ($1 + [-24])
	$3 = *($5)
	if ( ((int_64)*($3) == (int_64)$8) ){ goto $label$9 }
	$1 = $5
	if ( ((int_32)$23 != (int_32)$5) ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$12
	CALL $37($11, ($7 + [64]))
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	CALL $37($11, ($7 + [64]))
	
.LABEL $label$10
	*($16) = ((int_64)*($16) + (int_64)$9)
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$23 == (int_32)$1) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($7 + [24])), [9419])
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	$5 = CALL db_find_i64(*($7 + [24]), *((($7 + [24]) + [8])), (int_64)-6030912142679474176, $8)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $10(($7 + [24]), $5)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($7 + [24])), [9419])
	
.LABEL $label$7
	$5 = (*($2) + $22)
	*(($1 = (($7 + [8]) + [8]))) = *($5 + [8])
	*($7 + [8]) = *($5 + [24])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($19)) ){ goto $label$17 }
	*($5) = *($7 + [8])
	*(($5 + [8])) = *($1)
	*($10) = (*($10) + [16])
	goto $label$16 
	
.LABEL $label$17
	CALL $37($11, ($7 + [8]))
	
.LABEL $label$16
	$24 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9584])
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($7 + [24])), [9619])
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)CALL $fimport$5()), [9665])
	*($3 + [88]) = ((int_64)*($3 + [88]) + (int_64)$9)
	$8 = *($3)
	CALL eosio_assert([1], [9716])
	*((($7 + [160]) + [8])) = $15
	*($7 + [164]) = ($7 + [64])
	*($7 + [160]) = ($7 + [64])
	CALL $12(($7 + [160]), $3)
	CALL db_update_i64(*($3 + [100]), $24, ($7 + [64]), [92])
	$5 = (($7 + [24]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$18 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = ($7 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	CALL _ZdlPv($1)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($7 + [48]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $3
	
.LABEL $label$19
	*($4) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($7 + [176])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[40])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[40])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = [107374182]
	$2 = ((int_32)$5 / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[40])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[40]) * (int_32)[40]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[40])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[40])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL $134($0)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [12])) = (int_64)0
	*($0 + [8]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [12])) - *($1 + [8]))
	$3 = ((int_32)$2 / (int_32)[40])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($0 + [8])) = $2
	*(($0 + [16])) = ($2 + ((int_32)$3 * (int_32)[40]))
	*(($3 = ($0 + [12]))) = $2
	$4 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$3
	*($0 + [20 align=4]) = (int_64)0
	*(($0 + [28])) = [0]
	$2 = (*(($1 + [24])) - *($1 + [20]))
	$3 = ((int_32)$2 / (int_32)[40])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [20])) = $2
	*(($0 + [28])) = ($2 + ((int_32)$3 * (int_32)[40]))
	*(($3 = ($0 + [24]))) = $2
	$5 = *(($1 + [20]))
	$1 = (*(($1 + [24])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $134(($0 + [8]))
	
.LABEL $label$1
	CALL $134(($0 + [20]))
	(unreachable)
	return (unreachable)
}

void .FUNC $129 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $131($1, $0, [8855])
	CALL $132()
	(unreachable)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $146($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $4 ){ goto $label$6 }
	$0 = ($0 + [1])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$0 = CALL $145($0, $1, $4)
	if ( ($0 == 0) ){ goto $label$1 }
	return $0
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $5 : ($3 <= $2) )
}