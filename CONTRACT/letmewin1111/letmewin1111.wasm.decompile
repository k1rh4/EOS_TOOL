(data (i32.const 8192) "-\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8203) "\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8295) "donate\00")
(data (i32.const 8302) "Bet amount should be greater than 0.1 EOS\00")
(data (i32.const 8344) "Invalid selection\00")
(data (i32.const 8362) "letmewin1111\00")
(data (i32.const 8375) "letmewin2222\00")
(data (i32.const 8388) "letmewin3333\00")
(data (i32.const 8401) "eosgamble111\00")
(data (i32.const 8414) "gamerzoneeos\00")
(data (i32.const 8427) "xxdicekingxx\00")
(data (i32.const 8440) "angelpie1234\00")
(data (i32.const 8453) "Payout for #1 Gaming Platform http://eosgames.info:\00")
(data (i32.const 8505) "0.2% referral transferred to \00")
(data (i32.const 8535) "WON\00")
(data (i32.const 8539) "LOST\00")
(data (i32.const 8544) "Got referral from : \00")
(data (i32.const 8565) "active\00")
(data (i32.const 8572) "startday\00")
(data (i32.const 8581) "EOS\00")
(data (i32.const 8585) "Daily Leaderboard Rank : 1\00")
(data (i32.const 8612) "Daily Leaderboard Rank : 2\00")
(data (i32.const 8639) "Daily Leaderboard added : 3\00")
(data (i32.const 8667) "eosio.token\00")
(data (i32.const 8679) "transfer\00")
(data (i32.const 8688) "notify\00: no conversion\00")
(data (i32.const 8712) "\0c\"\00\00")
(data (i32.const 8716) ".12345abcdefghijklmnopqrstuvwxyz\00: out of range\00")
(data (i32.const 8764) "write\00")
(data (i32.const 8770) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8819) "invalid symbol name\00")
(data (i32.const 8839) "string is too long to be a valid name\00")
(data (i32.const 8877) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8944) "character is not in allowed character set for names\00")
(data (i32.const 8996) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9047) "error reading iterator\00")
(data (i32.const 9070) "read\00")
(data (i32.const 9075) "string is too long to be a valid symbol_code\00")
(data (i32.const 9120) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9173) "get\00")
(data (i32.const 9177) "cannot create objects in table of another contract\00")
(data (i32.const 9228) "cannot pass end iterator to modify\00")
(data (i32.const 9263) "object passed to modify is not in multi_index\00")
(data (i32.const 9309) "cannot modify objects in table of another contract\00")
(data (i32.const 9360) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9419) "cannot increment end iterator\00")
(data (i32.const 9449) "cannot pass end iterator to erase\00")
(data (i32.const 9483) "object passed to erase is not in multi_index\00")
(data (i32.const 9528) "cannot erase objects in table of another contract\00")
(data (i32.const 9578) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9631) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9683) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9737) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18208) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$9 (result i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$11 (result i32)))
(import "env" "tapos_block_num" (func $fimport$12 (result i32)))
(import "env" "sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $37))
(export "_Znwj" (func $53))
(export "_ZdlPv" (func $55))
(export "_Znaj" (func $54))
(export "_ZdaPv" (func $56))
(export "_ZnwjSt11align_val_t" (func $57))
(export "_ZnajSt11align_val_t" (func $58))
(export "_ZdlPvSt11align_val_t" (func $59))
(export "_ZdaPvSt11align_val_t" (func $60))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $29 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18465))
(global $global$2 i32 (i32.const 18465))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $99($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8209])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9800]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9804])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9800]) = [1]
	$2 = ($2 << [16])
	*([0] + [9804]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9804])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9804]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9800]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9800]) = [1]
	$3 = ($3 << [16])
	*([0] + [9804]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9804])
	
.LABEL $label$10
	*([0] + [9804]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $83())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $96($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $97($1)
	
.LABEL $label$2
	*(CALL $83()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $97(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $100($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $97 (int_32 $0)
{
	return CALL $98([9808], $0)
}

int_64 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $89($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $83()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $89($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18209]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $88($0, (int_64)0)
	*(CALL $83()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $89($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $89($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $89($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $89($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18209])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $89($0)
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $89($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8194]))
	$8 = (int_64)0
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $89($0)
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $89($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18209]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $88($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18209]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18209]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $89($0) + [18209]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $83()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $83()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $83()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $88($3, (int_64)0)
	$4 = CALL $90($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $97($7)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $7)
	
.LABEL $label$1
	$2 = ($3 + $7)
	*(($4 + [16])) = $2
	*($4 + [28]) = $3
	*($4 + [24]) = $3
	*($4 + [32]) = $2
	*($4 + [8]) = *($4 + [24])
	$2 = CALL $39(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($8) + $6))
	
.LABEL $label$5
	CALL void $8((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $100($3)
	
.LABEL $label$6
	if ( ((*(($2 + [152])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [160])))
	
.LABEL $label$7
	if ( (*(($2 + [140])) & [1]) ){ goto $label$10 }
	$3 = [1]
	if ( (*($2 + [128]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($2 + [148])))
	$3 = [1]
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [136])))
	$global$0 = ($4 + [208])
	return $3
	
.LABEL $label$8
	$global$0 = ($4 + [208])
	return $3
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9070])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8764])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8764])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8764])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8764])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $44($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8764])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8764])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8764])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $44(CALL $45($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8764])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8764])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8764])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8764])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8764])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8764])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9173])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $22($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9070])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $47($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $66($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $66($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $61($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8764])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8764])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8764])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8764])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8764])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [9263])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9309])
	*($1 + [8]) = ((float_64)*($1 + [8]) + (float_64)(CASTING float_64)(int_64 (int_64))(*(*($3)) - *(*(($3 + [4]))))))
	$6 = *($1)
	CALL eosio_assert([1], [9360])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $97($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8764])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [8764])
	CALL memcpy(($4 + [8]), $9, [8])
	*($5 + [4]) = ($4 + [16])
	CALL $48($5, $7)
	CALL db_update_i64(*($1 + [32]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [72]) = [8565]
	*($5 + [76]) = CALL $94([8565])
	*($5 + [16]) = *($5 + [72])
	$6 = *(CALL $13(($5 + [24]), ($5 + [16])))
	*($5 + [72]) = [8667]
	*($5 + [76]) = CALL $94([8667])
	*($5 + [8]) = *($5 + [72])
	$7 = *(CALL $13(($5 + [24]), ($5 + [8])))
	*($5 + [72]) = [8679]
	*($5 + [76]) = CALL $94([8679])
	*($5) = *($5 + [72])
	$8 = *(CALL $13(($5 + [24]), $5))
	*((($5 + [24]) + [24])) = *(($3 + [8]))
	*($5 + [32]) = $2
	*($5 + [24]) = $1
	*($5 + [40]) = *($3)
	$4 = CALL $62((($5 + [24]) + [32]), $4)
	*($5 + [80]) = $8
	*($5 + [72]) = $7
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = $6
	*((($5 + [72]) + [36])) = [0]
	$9 = ($3 + [16])
	*((($5 + [72]) + [24])) = $9
	*(($5 + [92])) = $9
	*($5 + [88]) = $3
	*($5 + [100 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [24]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [100])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $22($4, $3)
	$4 = *(($5 + [104]))
	$3 = *(($5 + [100]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [132]) = $3
	*($5 + [128]) = $3
	*($5 + [136]) = $4
	*($5 + [112]) = ($5 + [128])
	*($5 + [120]) = ($5 + [24])
	CALL $23(($5 + [120]), ($5 + [112]))
	CALL $24(($5 + [128]), ($5 + [72]))
	$3 = *($5 + [128])
	CALL send_inline($3, (*($5 + [132]) - $3))
	$3 = *($5 + [128])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [132]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [100])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [104])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [88])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [92])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$7
	$global$0 = ($5 + [144])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $64($6, *($4 + [4]))
	*($1 + [8]) = (CASTING float_64)(int_64 (int_64))(*(*($4 + [8])) - *(*($4 + [12]))))
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8764])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [8764])
	CALL memcpy(($2 + [8]), $7, [8])
	*($3 + [4]) = ($2 + [16])
	CALL $48($3, $6)
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9047])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$6 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	CALL db_get_i64($1, $6, $4)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $4)
	*(($5 = CALL _Znwj([40])) + [16 align=4]) = (int_64)0
	*($5) = (int_64)0
	*(($5 + [24])) = [0]
	$7 = ($5 + [16])
	$2 = CALL $94([8203])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$9 }
	*(($5 + [16])) = ($2 << [1])
	$8 = ($5 + [17])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = (($2 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*(($5 + [16])) = ($9 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $2
	
.LABEL $label$8
	CALL memcpy($8, [8203], $2)
	
.LABEL $label$7
	*(($8 + $2)) = [0]
	*($5 + [28]) = $0
	$2 = *($3 + [36])
	$8 = *((($3 + [32]) + [8]))
	CALL eosio_assert(((uint_32)($8 - $2) > (uint_32)[7]), [9070])
	CALL memcpy($5, $2, [8])
	$9 = ($2 + [8])
	CALL eosio_assert(((uint_32)($8 - $9) > (uint_32)[7]), [9070])
	CALL memcpy(($5 + [8]), $9, [8])
	*($3 + [36]) = ($2 + [16])
	CALL $46(($3 + [32]), $7)
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$10 = *($5)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$12 }
	*($2 + [8]) = $10
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $100($6)
	
.LABEL $label$10
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$14
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$6
	CALL $61($7)
	return (unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [96])
	$global$0 = $4
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$5 = *($1)
	*($4 + [40]) = $5
	*($4 + [48]) = $5
	$1 = *($3)
	if ( ($1 & [1]) ){ goto $label$2 }
	$1 = uint_32($1 >> [1])
	$6 = ($3 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($3 + [4])
	$6 = *($3 + [8])
	
.LABEL $label$1
	*($4 + [36]) = $1
	*($4 + [32]) = $6
	*($4 + [8]) = *($4 + [32])
	$5 = *(CALL $13(($4 + [80]), ($4 + [8])))
	$6 = *(($4 + [68]))
	$7 = *(($4 + [64]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$1 = ($6 + [-24])
	$8 = *($1)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$11 }
	$6 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)($4 + [40])), [8996])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)-6030912129794572288, $5)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$8 }
	$8 = CALL $4(($4 + [40]), $1)
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)($4 + [40])), [8996])
	
.LABEL $label$9
	$9 = ($8 + [16])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$7 }
	$6 = [0]
	$7 = *([0] + [8712])
	
.LOOP $label$14:
	*((($4 + [80]) + ($1 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$6 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($4 + [16]) = ($6 << [1])
	$7 = (($4 + [16]) | [1])
	goto $label$5 
	
.LABEL $label$8
	CALL $67($3, [8203])
	goto $label$3 
	
.LABEL $label$7
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [16]) = [0]
	$7 = (($4 + [16]) | [1])
	$1 = $7
	goto $label$4 
	
.LABEL $label$6
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [16]) = ($10 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $6
	
.LABEL $label$5
	$10 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$15:
	*(($7 + $1)) = *((($4 + [80]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$15 }
	$1 = ($7 + $6)
	$7 = (($4 + [16]) | [1])
	
.LABEL $label$4
	*($1) = [0]
	$10 = ($1 & [1])
	$1 = *($4 + [16])
	$1 = ( *($4 + [20]) ? uint_32($1 >> [1]) : $10 )
	$11 = *($4 + [24])
	$6 = *($9)
	if ( ($6 & [1]) ){ goto $label$21 }
	$9 = ($9 + [1])
	$12 = ($1 <= $6)
	$6 = uint_32($6 >> [1])
	$8 = ( $1 ? $6 : $12 )
	if ( ($8 == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	$9 = *(($8 + [24]))
	$12 = ($1 <= $6)
	$6 = *(($8 + [20]))
	$8 = ( $1 ? $6 : $12 )
	if ( ($8 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$7 = CALL $93($9, ( $11 ? $7 : $10 ), $8)
	if ( ($7 == 0) ){ goto $label$19 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = ( [-1] ? $12 : ($6 <= $1) )
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($4 + [24])))
	if ( $7 ){ goto $label$3 }
	goto $label$16 
	
.LABEL $label$17
	if ( $7 ){ goto $label$3 }
	
.LABEL $label$16
	CALL $67($3, [8203])
	
.LABEL $label$3
	*($0) = *($3)
	*($3) = (int_64)0
	$1 = ($3 + [8])
	*(($0 + [8])) = *($1)
	*($1) = [0]
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$22 }
	$10 = ($4 + [68])
	$1 = *($10)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$27
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$25 }
	$1 = *(($4 + [64]))
	goto $label$23 
	
.LABEL $label$24
	$1 = $7
	
.LABEL $label$23
	*($10) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$global$0 = ($4 + [96])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $97($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $21(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_64 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [12]) = (((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$12()) + CALL $fimport$12())
	CALL sha256(($3 + [12]), [4], ($3 + [16]))
	$5 = *($2)
	$4 = CALL $94([8203])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$3 }
	$6 = [0]
	if ( (CALL $73($2, [0], [-1], [8203], $4) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	$5 = [0]
	$8 = ($2 + [4])
	$6 = [0]
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$4 }
	$9 = [3]
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [1]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$11 
	
.LABEL $label$13
	$6 = (((int_32)$6 * (int_32)[31]) + *(CALL $68($2, $5)))
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$9 }
	$9 = [3]
	goto $label$5 
	
.LABEL $label$12
	if ( (uint_64)($7 <= (CASTING uint_64)(uint_32 uint_32($4 >> [1]))) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	if ( (uint_64)($7 <= (CASTING uint_64)(uint_32 *($8))) ){ goto $label$8 }
	$9 = [1]
	goto $label$5 
	
.LABEL $label$10
	$7 = CALL $85(((int_64)((int_64)*($3 + [19]) + (int_64)(CASTING int_64)(int_32 $6)) + (int_64)*($3 + [20])))
	$global$0 = ($3 + [48])
	return ((int_64)((int_64)$7 % (int_64)99) + (int_64)1)
	
.LABEL $label$9
	$9 = [0]
	goto $label$5 
	
.LABEL $label$8
	$9 = [2]
	goto $label$5 
	
.LABEL $label$7
	$9 = [2]
	goto $label$5 
	
.LABEL $label$6
	$9 = [1]
	goto $label$5 
	return $9
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	float_64 $16
	float_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$1 = ($global$0 - [608])
	$global$0 = $1
	*(($1 + [584])) = [0]
	*($1 + [576]) = (int_64)0
	$2 = CALL $94([8192])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$11 }
	*($1 + [576]) = ($2 << [1])
	$3 = (($1 + [576]) | [1])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [576]) = ($4 | [1])
	*($1 + [584]) = $3
	*($1 + [580]) = $2
	
.LABEL $label$10
	CALL memcpy($3, [8192], $2)
	
.LABEL $label$9
	*(($3 + $2)) = [0]
	CALL $2(($1 + [528]))
	*($1 + [520]) = *($1 + [528])
	*((($1 + [504]) + [8])) = *(($1 + [552]))
	*($1 + [504]) = *($1 + [544])
	$5 = CALL $62(($1 + [488]), ($1 + [560]))
	*($1 + [480]) = (int_64)-1
	*((($1 + [464]) + [8])) = [0]
	*($1 + [464]) = (int_64)0
	$2 = CALL $94([8203])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$14 }
	*($1 + [464]) = ($2 << [1])
	$3 = (($1 + [464]) | [1])
	if ( $2 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [464]) = ($4 | [1])
	*($1 + [472]) = $3
	*($1 + [468]) = $2
	
.LABEL $label$13
	CALL memcpy($3, [8203], $2)
	
.LABEL $label$12
	*(($3 + $2)) = [0]
	*(($1 + [456])) = [0]
	*($1 + [448]) = (int_64)0
	$2 = CALL $94([8203])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$17 }
	*($1 + [448]) = ($2 << [1])
	$3 = (($1 + [448]) | [1])
	if ( $2 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [448]) = ($4 | [1])
	*($1 + [456]) = $3
	*($1 + [452]) = $2
	
.LABEL $label$16
	CALL memcpy($3, [8203], $2)
	
.LABEL $label$15
	*(($3 + $2)) = [0]
	*(($1 + [440])) = [0]
	*($1 + [432]) = (int_64)0
	$2 = CALL $94([8203])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$20 }
	*($1 + [432]) = ($2 << [1])
	$3 = (($1 + [432]) | [1])
	if ( $2 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [432]) = ($4 | [1])
	*($1 + [440]) = $3
	*($1 + [436]) = $2
	
.LABEL $label$19
	CALL memcpy($3, [8203], $2)
	
.LABEL $label$18
	*(($3 + $2)) = [0]
	CALL require_auth(*($1 + [520]))
	$6 = ($5 + [1])
	$7 = (($1 + [576]) | [1])
	$8 = ($5 + [4])
	$9 = [0]
	
.LOOP $label$22:
	$3 = [0]
	$4 = ($2 & [1])
	$2 = *($1 + [576])
	$2 = ( *($1 + [580]) ? uint_32($2 >> [1]) : $4 )
	if ( ($2 == 0) ){ goto $label$23 }
	$10 = ($3 & [1])
	$3 = *($1 + [488])
	$3 = ( *($8) ? uint_32($3 >> [1]) : $10 )
	if ( ((int_32)$3 < (int_32)$2) ){ goto $label$21 }
	$11 = ( *(($5 + [8])) ? $6 : $10 )
	$12 = ($11 + $3)
	$13 = ( *((($1 + [576]) + [8])) ? $7 : $4 )
	$10 = *($13)
	$4 = $11
	
.LOOP $label$24:
	$3 = (($3 - $2) + [1])
	if ( ($3 == 0) ){ goto $label$21 }
	$3 = CALL $92($4, $10, $3)
	if ( ($3 == 0) ){ goto $label$21 }
	if ( (CALL $93($3, $13, $2) == 0) ){ goto $label$25 }
	$4 = ($3 + [1])
	$3 = ($12 - $4)
	if ( ((int_32)$3 >= (int_32)$2) ){ goto $label$24 }
	goto $label$21 
	
.LABEL $label$25
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$21 }
	$3 = ($3 - $11)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$21 }
	
.LABEL $label$23
	$2 = CALL $63(($1 + [344]), $5, [0], $3, $5)
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$28 }
	goto $label$32 
	
.LABEL $label$32
	CALL $64(($1 + [432]), $2)
	if ( CALL $74(($1 + [432]), [8295]) ){ goto $label$28 }
	$2 = [0]
	$9 = [0]
	if ( (*($1 + [344]) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$31
	CALL $64(($1 + [448]), $2)
	goto $label$28 
	
.LABEL $label$30
	CALL $64(($1 + [464]), $2)
	goto $label$28 
	
.LABEL $label$29
	*($1 + [480]) = (CASTING int_64)(int_32 CALL $76($2, [0], [10]))
	
.LABEL $label$28
	$2 = [1]
	$4 = *($1 + [576])
	CALL $72($5, [0], (( *($1 + [580]) ? uint_32($4 >> [1]) : ($4 & [1]) ) + $3))
	$9 = ($9 + [1])
	if ( ((*($1 + [344]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*((($1 + [344]) + [8])))
	
.LABEL $label$26
	if ( $2 ){ goto $label$22 }
	goto $label$1 
	
.LABEL $label$21
	CALL eosio_assert(((float_64)*($0 + [72]) <= (float_64)(CASTING float_64)(int_64 *($1 + [504]))), [8302])
	$2 = [0]
	$14 = *($1 + [480])
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$33 }
	$2 = ((float_64)*($0 + [48]) >= (float_64)(CASTING float_64)(int_64 $14))
	
.LABEL $label$33
	CALL eosio_assert($2, [8344])
	*($1 + [424]) = ((float_64)(Rounds 0)(((float_64)((float_64)(float_64)100 / (float_64)(CASTING float_64)(uint_64 ((int_64)*($1 + [480]) + (int_64)-1))) * (float_64)(float_64)100)) / (float_64)(float_64)100)
	*(($1 + [416])) = [0]
	*($1 + [408]) = (int_64)0
	$2 = CALL $94([8203])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$36 }
	*($1 + [408]) = ($2 << [1])
	$4 = (($1 + [408]) | [1])
	if ( $2 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$3 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($3)
	*($1 + [408]) = ($3 | [1])
	*($1 + [416]) = $4
	*($1 + [412]) = $2
	
.LABEL $label$35
	CALL memcpy($4, [8203], $2)
	
.LABEL $label$34
	$3 = [0]
	*(($4 + $2)) = [0]
	$2 = CALL $62(($1 + [384]), ($1 + [448]))
	$14 = CALL $3($1, $14, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$37
	*($1 + [400]) = $14
	*(($1 + [376])) = [0]
	*($1 + [360]) = (int_64)-1
	*($1 + [368]) = (int_64)0
	$14 = *($0)
	*($1 + [344]) = $14
	*($1 + [352]) = $14
	$2 = CALL db_find_i64($14, $14, (int_64)-6030912129794572288, *($1 + [520]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$38 }
	$3 = CALL $4(($1 + [344]), $2)
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)($1 + [344])), [8996])
	
.LABEL $label$38
	*($1 + [340]) = $3
	$14 = *($1 + [480])
	$15 = *($1 + [400])
	*($1 + [336]) = ($1 + [344])
	$12 = [0]
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$41 }
	$16 = *($0 + [64])
	$17 = (CASTING float_64)(int_64 *($1 + [504]))
	if ( ($3 == 0) ){ goto $label$40 }
	$12 = (((int_32)((float_64)$16 < (float_64)$17) ^ (int_32)[-1]) & ((int_32)((float_64)((float_64)((float_64)*($1 + [424]) * (float_64)$17) + (float_64)*($3 + [8])) > (float_64)$17) ^ (int_32)[1]))
	
.LABEL $label$41
	$15 = (int_64)0
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$39 }
	goto $label$3 
	
.LABEL $label$40
	$12 = (((int_64)$14 > (int_64)39) & ((int_32)((float_64)$16 < (float_64)$17) ^ (int_32)[1]))
	$15 = (int_64)0
	$14 = *($1 + [520])
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$39
	*(($1 + [56])) = [0]
	*($1 + [48]) = $15
	*($1 + [48]) = [0]
	$2 = (($1 + [48]) | [1])
	goto $label$2 
	
.LABEL $label$8
	CALL $61(($1 + [576]))
	
.LABEL $label$7
	CALL $61(($1 + [464]))
	
.LABEL $label$6
	CALL $61(($1 + [448]))
	
.LABEL $label$5
	CALL $61(($1 + [432]))
	
.LABEL $label$4
	CALL $61(($1 + [408]))
	
.LABEL $label$3
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$43:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$42 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)$15) ){ goto $label$43 }
	
.LABEL $label$42
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$45 }
	*($1 + [48]) = ($3 << [1])
	$4 = (($1 + [48]) | [1])
	goto $label$44 
	
.LABEL $label$45
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [48]) = ($10 | [1])
	*($1 + [56]) = $4
	*($1 + [52]) = $3
	
.LABEL $label$44
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$46:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$46 }
	$2 = ($4 + $3)
	
.LABEL $label$2
	*($2) = [0]
	$2 = [1]
	if ( (CALL $74(($1 + [48]), [8362]) == 0) ){ goto $label$47 }
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$51 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$53:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$52 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$53 }
	
.LABEL $label$52
	*(($1 + [600])) = [0]
	*($1 + [592]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$50 }
	*($1 + [592]) = ($3 << [1])
	$4 = (($1 + [592]) | [1])
	goto $label$49 
	
.LABEL $label$51
	*(($1 + [600])) = [0]
	*($1 + [592]) = (int_64)0
	*($1 + [592]) = [0]
	$2 = (($1 + [592]) | [1])
	goto $label$48 
	
.LABEL $label$50
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [592]) = ($10 | [1])
	*($1 + [600]) = $4
	*($1 + [596]) = $3
	
.LABEL $label$49
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$54:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$54 }
	$2 = ($4 + $3)
	
.LABEL $label$48
	*($2) = [0]
	$2 = [1]
	if ( (CALL $74(($1 + [592]), [8375]) == 0) ){ goto $label$55 }
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$59 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$61:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$60 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$61 }
	
.LABEL $label$60
	*(($1 + [328])) = [0]
	*($1 + [320]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$58 }
	*($1 + [320]) = ($3 << [1])
	$4 = (($1 + [320]) | [1])
	goto $label$57 
	
.LABEL $label$59
	*(($1 + [328])) = [0]
	*($1 + [320]) = (int_64)0
	*($1 + [320]) = [0]
	$2 = (($1 + [320]) | [1])
	goto $label$56 
	
.LABEL $label$58
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [320]) = ($10 | [1])
	*($1 + [328]) = $4
	*($1 + [324]) = $3
	
.LABEL $label$57
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$62:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$62 }
	$2 = ($4 + $3)
	
.LABEL $label$56
	*($2) = [0]
	$2 = [1]
	if ( (CALL $74(($1 + [320]), [8388]) == 0) ){ goto $label$63 }
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$67 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$69:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$68 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$69 }
	
.LABEL $label$68
	*(($1 + [312])) = [0]
	*($1 + [304]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$66 }
	*($1 + [304]) = ($3 << [1])
	$4 = (($1 + [304]) | [1])
	goto $label$65 
	
.LABEL $label$67
	*(($1 + [312])) = [0]
	*($1 + [304]) = (int_64)0
	*($1 + [304]) = [0]
	$2 = (($1 + [304]) | [1])
	goto $label$64 
	
.LABEL $label$66
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [304]) = ($10 | [1])
	*($1 + [312]) = $4
	*($1 + [308]) = $3
	
.LABEL $label$65
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$70:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$70 }
	$2 = ($4 + $3)
	
.LABEL $label$64
	*($2) = [0]
	$2 = [1]
	if ( (CALL $74(($1 + [304]), [8401]) == 0) ){ goto $label$71 }
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$75 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$77:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$76 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$77 }
	
.LABEL $label$76
	*(($1 + [296])) = [0]
	*($1 + [288]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$74 }
	*($1 + [288]) = ($3 << [1])
	$4 = (($1 + [288]) | [1])
	goto $label$73 
	
.LABEL $label$75
	*(($1 + [296])) = [0]
	*($1 + [288]) = (int_64)0
	*($1 + [288]) = [0]
	$2 = (($1 + [288]) | [1])
	goto $label$72 
	
.LABEL $label$74
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [288]) = ($10 | [1])
	*($1 + [296]) = $4
	*($1 + [292]) = $3
	
.LABEL $label$73
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$78:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$78 }
	$2 = ($4 + $3)
	
.LABEL $label$72
	*($2) = [0]
	$2 = [1]
	if ( (CALL $74(($1 + [288]), [8414]) == 0) ){ goto $label$79 }
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$83 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$85:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$84 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$85 }
	
.LABEL $label$84
	*(($1 + [280])) = [0]
	*($1 + [272]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$82 }
	*($1 + [272]) = ($3 << [1])
	$4 = (($1 + [272]) | [1])
	goto $label$81 
	
.LABEL $label$83
	*(($1 + [280])) = [0]
	*($1 + [272]) = (int_64)0
	*($1 + [272]) = [0]
	$2 = (($1 + [272]) | [1])
	goto $label$80 
	
.LABEL $label$82
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [272]) = ($10 | [1])
	*($1 + [280]) = $4
	*($1 + [276]) = $3
	
.LABEL $label$81
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$86:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$86 }
	$2 = ($4 + $3)
	
.LABEL $label$80
	*($2) = [0]
	$2 = [1]
	if ( (CALL $74(($1 + [272]), [8427]) == 0) ){ goto $label$87 }
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$91 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$93:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$92 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$93 }
	
.LABEL $label$92
	*(($1 + [264])) = [0]
	*($1 + [256]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$90 }
	*($1 + [256]) = ($3 << [1])
	$4 = (($1 + [256]) | [1])
	goto $label$89 
	
.LABEL $label$91
	*(($1 + [264])) = [0]
	*($1 + [256]) = (int_64)0
	*($1 + [256]) = [0]
	$2 = (($1 + [256]) | [1])
	goto $label$88 
	
.LABEL $label$90
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [256]) = ($10 | [1])
	*($1 + [264]) = $4
	*($1 + [260]) = $3
	
.LABEL $label$89
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$94:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$94 }
	$2 = ($4 + $3)
	
.LABEL $label$88
	*($2) = [0]
	$2 = CALL $74(($1 + [256]), [8440])
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$95 }
	CALL _ZdlPv(*($1 + [264]))
	
.LABEL $label$95
	$2 = ($2 == 0)
	
.LABEL $label$87
	if ( ((*($1 + [272]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*($1 + [280]))
	
.LABEL $label$79
	if ( ((*($1 + [288]) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*($1 + [296]))
	
.LABEL $label$71
	if ( ((*($1 + [304]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*($1 + [312]))
	
.LABEL $label$63
	if ( ((*($1 + [320]) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*($1 + [328]))
	
.LABEL $label$55
	if ( ((*($1 + [592]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($1 + [600]))
	
.LABEL $label$47
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*($1 + [56]))
	
.LABEL $label$96
	if ( ($2 == 0) ){ goto $label$102 }
	$14 = *($1 + [504])
	if ( (int_64)($14 == 0) ){ goto $label$100 }
	$15 = (int_64)0
	
.LOOP $label$103:
	$18 = ((int_64)$14 / (int_64)10)
	$15 = ((int_64)$15 + (int_64))($14 - ((int_64)$18 * (int_64)10)))
	$19 = ((int_64)$14 + (int_64)9)
	$14 = $18
	if ( ((uint_64)$19 > (uint_64)(int_64)18) ){ goto $label$103 }
	$14 = *($1 + [480])
	$18 = *($1 + [400])
	$3 = (uint_64)($18 <= $14)
	if ( (int_64)(((int_64)$15 & (int_64)1) == 0) ){ goto $label$101 }
	goto $label$98 
	
.LABEL $label$102
	$14 = *($1 + [480])
	$18 = *($1 + [400])
	$3 = (uint_64)($18 <= $14)
	if ( ($12 == 0) ){ goto $label$98 }
	
.LABEL $label$101
	$2 = [1]
	if ( $3 ){ goto $label$97 }
	goto $label$99 
	
.LABEL $label$100
	$2 = [1]
	$14 = *($1 + [480])
	$18 = *($1 + [400])
	if ( (uint_64)($18 <= $14) ){ goto $label$97 }
	
.LABEL $label$99
	*($1 + [400]) = ((uint_64)$18 % (uint_64)$14)
	$2 = [1]
	goto $label$97 
	
.LABEL $label$98
	$2 = [0]
	if ( ($3 == 0) ){ goto $label$97 }
	*($1 + [400]) = ((int_64)((uint_64)$18 % (uint_64)(int_64))((int_64)100 - $14)) + (int_64)$14)
	
.LABEL $label$97
	$17 = ((float_64)*($0 + [40]) * (float_64)(CASTING float_64)(int_64 *($1 + [504])))
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$111 }
	$15 = (int_64)-9223372036854775808
	$19 = *($1 + [512])
	if ( $2 ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$111
	$15 = (Rounds 0)($17)
	$19 = *($1 + [512])
	if ( ($2 == 0) ){ goto $label$109 }
	
.LABEL $label$110
	*((($1 + [88]) + [8])) = *((($1 + [504]) + [8]))
	$17 = ((float_64)*($1 + [424]) * (float_64)(CASTING float_64)(int_64 *($1 + [504])))
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$115 }
	*($1 + [88]) = (int_64)-9223372036854775808
	$2 = *($1 + [340])
	if ( ($2 == 0) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	*($1 + [88]) = (Rounds 0)($17)
	$2 = *($1 + [340])
	if ( $2 ){ goto $label$113 }
	
.LABEL $label$114
	if ( (CALL $74(($1 + [464]), [8203]) == 0) ){ goto $label$116 }
	$2 = CALL $62(($1 + [240]), ($1 + [464]))
	CALL $5(($1 + [48]), $0, *($1 + [520]), $2)
	if ( (*($1 + [408]) & [1]) ){ goto $label$118 }
	*($1 + [408]) = [0]
	goto $label$117 
	
.LABEL $label$118
	*(*($1 + [416])) = [0]
	*($1 + [412]) = [0]
	
.LABEL $label$117
	CALL $66(($1 + [408]), [0])
	$3 = (($1 + [48]) + [8])
	*((($1 + [408]) + [8])) = *($3)
	*($3) = [0]
	*($1 + [408]) = *($1 + [48])
	*($1 + [48]) = (int_64)0
	if ( ((*($2) & [1]) == 0) ){ goto $label$116 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$116
	$14 = *($0)
	*($1 + [52]) = ($1 + [408])
	*($1 + [48]) = ($1 + [520])
	*($1 + [56]) = ($1 + [88])
	*($1 + [60]) = ($1 + [504])
	*($1 + [320]) = $14
	CALL eosio_assert(((int_64)*($1 + [344]) == (int_64)CALL $fimport$4()), [9177])
	*($1 + [596]) = ($1 + [48])
	*($1 + [592]) = ($1 + [344])
	*($1 + [600]) = ($1 + [320])
	*(($2 = CALL _Znwj([40])) + [16 align=4]) = (int_64)0
	*($2) = (int_64)0
	*(($2 + [24])) = [0]
	$3 = CALL $94([8203])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$121 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$124 }
	*(($2 + [16])) = ($3 << [1])
	$4 = ($2 + [17])
	if ( $3 ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$124
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*(($2 + [16])) = ($10 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $3
	
.LABEL $label$123
	CALL memcpy($4, [8203], $3)
	
.LABEL $label$122
	*(($4 + $3)) = [0]
	*($2 + [28]) = ($1 + [344])
	CALL $6(($1 + [592]), $2)
	*($1 + [304]) = $2
	$14 = *($2)
	*($1 + [592]) = $14
	$4 = *($2 + [32])
	*($1 + [288]) = $4
	$10 = ($1 + [372])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [376]))) ){ goto $label$125 }
	*($3 + [8]) = $14
	*($3 + [16]) = $4
	*($1 + [304]) = [0]
	*($3) = $2
	*($10) = ($3 + [24])
	$3 = *($1 + [304])
	*($1 + [304]) = [0]
	if ( ($3 == 0) ){ goto $label$119 }
	goto $label$120 
	
.LABEL $label$125
	CALL $7(($1 + [368]), ($1 + [304]), ($1 + [592]), ($1 + [288]))
	$3 = *($1 + [304])
	*($1 + [304]) = [0]
	if ( $3 ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$121
	CALL $61(($2 + [16]))
	
.LABEL $label$120
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$126
	CALL _ZdlPv($3)
	
.LABEL $label$119
	*($1 + [340]) = $2
	*($1 + [336]) = ($1 + [344])
	goto $label$112 
	
.LABEL $label$113
	CALL $64(($1 + [408]), ($2 + [16]))
	$2 = *($1 + [340])
	$14 = *($0)
	*($1 + [52]) = ($1 + [504])
	*($1 + [48]) = ($1 + [88])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9228])
	CALL $8(($1 + [344]), $2, $14, ($1 + [48]))
	
.LABEL $label$112
	$14 = *($1 + [504])
	$18 = *($1 + [88])
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	$2 = CALL $94([8453])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$128 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$131 }
	*($1 + [48]) = ($2 << [1])
	$3 = (($1 + [48]) | [1])
	if ( $2 ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$131
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [48]) = ($4 | [1])
	*($1 + [56]) = $3
	*($1 + [52]) = $2
	
.LABEL $label$130
	CALL memcpy($3, [8453], $2)
	
.LABEL $label$129
	*(($3 + $2)) = [0]
	if ( (CALL $74(($1 + [408]), [8203]) == 0) ){ goto $label$132 }
	*($1 + [88]) = (int_64))(*($1 + [88]) - $15)
	CALL $75(($1 + [592]), [8505], ($1 + [408]))
	$2 = *($1 + [592])
	$3 = ($2 & [1])
	CALL $69(($1 + [48]), ( *($1 + [600]) ? (($1 + [592]) | [1]) : $3 ), ( *($1 + [596]) ? uint_32($2 >> [1]) : $3 ))
	if ( ((*($1 + [592]) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*(($1 + [600])))
	
.LABEL $label$132
	*(($3 = (($1 + [224]) + [8]))) = *((($1 + [88]) + [8]))
	*($1 + [224]) = *($1 + [88])
	$20 = *($0)
	$21 = *($1 + [520])
	$2 = CALL $62(($1 + [208]), ($1 + [48]))
	*((($1 + [32]) + [8])) = *($3)
	*($1 + [32]) = *($1 + [224])
	CALL $9($1, $20, $21, ($1 + [32]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$133
	*((($1 + [192]) + [8])) = [0]
	*($1 + [192]) = (int_64)0
	$20 = *($1 + [520])
	$2 = CALL $94([8535])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$127 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$136 }
	*($1 + [192]) = ($2 << [1])
	$3 = (($1 + [192]) | [1])
	if ( $2 ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$136
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [192]) = ($4 | [1])
	*($1 + [200]) = $3
	*($1 + [196]) = $2
	
.LABEL $label$135
	CALL memcpy($3, [8535], $2)
	
.LABEL $label$134
	*(($3 + $2)) = [0]
	CALL $10($0, $20, ($1 + [192]))
	if ( ((*($1 + [192]) & [1]) == 0) ){ goto $label$137 }
	CALL _ZdlPv(*($1 + [200]))
	
.LABEL $label$137
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$138 }
	CALL _ZdlPv(*($1 + [56]))
	
.LABEL $label$138
	$18 = (int_64))($14 - $18)
	goto $label$108 
	
.LABEL $label$128
	CALL $61(($1 + [48]))
	
.LABEL $label$127
	CALL $61(($1 + [192]))
	
.LABEL $label$109
	$2 = *($1 + [340])
	if ( ($2 == 0) ){ goto $label$140 }
	CALL $64(($1 + [408]), ($2 + [16]))
	$2 = *($1 + [340])
	$14 = *($0)
	*($1 + [88]) = ($1 + [504])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9228])
	CALL $11(($1 + [344]), $2, $14, ($1 + [88]))
	goto $label$139 
	
.LABEL $label$140
	if ( (CALL $74(($1 + [464]), [8203]) == 0) ){ goto $label$141 }
	$2 = CALL $62(($1 + [176]), ($1 + [464]))
	CALL $5(($1 + [88]), $0, *($1 + [520]), $2)
	if ( (*($1 + [408]) & [1]) ){ goto $label$143 }
	*($1 + [408]) = [0]
	goto $label$142 
	
.LABEL $label$143
	*(*($1 + [416])) = [0]
	*($1 + [412]) = [0]
	
.LABEL $label$142
	CALL $66(($1 + [408]), [0])
	$3 = (($1 + [88]) + [8])
	*((($1 + [408]) + [8])) = *($3)
	*($3) = [0]
	*($1 + [408]) = *($1 + [88])
	*($1 + [88]) = (int_64)0
	if ( ((*($2) & [1]) == 0) ){ goto $label$141 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$141
	$14 = *($0)
	*($1 + [52]) = ($1 + [408])
	*($1 + [48]) = ($1 + [520])
	*($1 + [56]) = ($1 + [504])
	*($1 + [592]) = $14
	CALL eosio_assert(((int_64)*($1 + [344]) == (int_64)CALL $fimport$4()), [9177])
	*($1 + [92]) = ($1 + [48])
	*($1 + [88]) = ($1 + [344])
	*($1 + [96]) = ($1 + [592])
	*(($2 = CALL _Znwj([40])) + [16 align=4]) = (int_64)0
	*($2) = (int_64)0
	*(($2 + [24])) = [0]
	$3 = CALL $94([8203])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$146 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$149 }
	*(($2 + [16])) = ($3 << [1])
	$4 = ($2 + [17])
	if ( $3 ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$149
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*(($2 + [16])) = ($10 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $3
	
.LABEL $label$148
	CALL memcpy($4, [8203], $3)
	
.LABEL $label$147
	*(($4 + $3)) = [0]
	*($2 + [28]) = ($1 + [344])
	CALL $12(($1 + [88]), $2)
	*($1 + [320]) = $2
	$14 = *($2)
	*($1 + [88]) = $14
	$4 = *($2 + [32])
	*($1 + [304]) = $4
	$10 = ($1 + [372])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [376]))) ){ goto $label$150 }
	*($3 + [8]) = $14
	*($3 + [16]) = $4
	*($1 + [320]) = [0]
	*($3) = $2
	*($10) = ($3 + [24])
	$3 = *($1 + [320])
	*($1 + [320]) = [0]
	if ( ($3 == 0) ){ goto $label$144 }
	goto $label$145 
	
.LABEL $label$150
	CALL $7(($1 + [368]), ($1 + [320]), ($1 + [88]), ($1 + [304]))
	$3 = *($1 + [320])
	*($1 + [320]) = [0]
	if ( $3 ){ goto $label$145 }
	goto $label$144 
	
.LABEL $label$146
	CALL $61(($2 + [16]))
	
.LABEL $label$145
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$151 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$151
	CALL _ZdlPv($3)
	
.LABEL $label$144
	*($1 + [340]) = $2
	*($1 + [336]) = ($1 + [344])
	
.LABEL $label$139
	*(($1 + [168])) = [0]
	*($1 + [160]) = (int_64)0
	$14 = *($1 + [520])
	$18 = *($1 + [504])
	$2 = CALL $94([8539])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$107 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$154 }
	*($1 + [160]) = ($2 << [1])
	$3 = (($1 + [160]) | [1])
	if ( $2 ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$154
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [160]) = ($4 | [1])
	*($1 + [168]) = $3
	*($1 + [164]) = $2
	
.LABEL $label$153
	CALL memcpy($3, [8539], $2)
	
.LABEL $label$152
	*(($3 + $2)) = [0]
	CALL $10($0, $14, ($1 + [160]))
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*($1 + [168]))
	
.LABEL $label$108
	$12 = CALL $62(($1 + [144]), ($1 + [408]))
	$14 = *($1 + [520])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$158 }
	$3 = [0]
	$4 = *([0] + [8712])
	
.LOOP $label$160:
	*((($1 + [88]) + ($2 = $3))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$14 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$159 }
	$14 = ((int_64)$14 << (int_64)5)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$160 }
	
.LABEL $label$159
	*(($1 + [600])) = [0]
	*($1 + [592]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$157 }
	*($1 + [592]) = ($3 << [1])
	$4 = (($1 + [592]) | [1])
	goto $label$156 
	
.LABEL $label$158
	*(($1 + [600])) = [0]
	*($1 + [592]) = (int_64)0
	*($1 + [592]) = [0]
	$2 = (($1 + [592]) | [1])
	goto $label$155 
	
.LABEL $label$157
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1 + [592]) = ($10 | [1])
	*($1 + [600]) = $4
	*($1 + [596]) = $3
	
.LABEL $label$156
	$10 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$161:
	*(($4 + $2)) = *((($1 + [88]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$161 }
	$2 = ($4 + $3)
	
.LABEL $label$155
	*($2) = [0]
	$2 = CALL $71(($1 + [592]), [0], [8544])
	$3 = ($2 + [8])
	*((($1 + [128]) + [8])) = *($3)
	*($1 + [128]) = *($2)
	*($2) = (int_64)0
	*($3) = [0]
	if ( (CALL $74($12, [8203]) == 0) ){ goto $label$162 }
	$2 = *($12)
	$3 = ($2 & [1])
	*($1 + [304]) = ( *($12 + [8]) ? ($12 + [1]) : $3 )
	*($1 + [308]) = ( *($12 + [4]) ? uint_32($2 >> [1]) : $3 )
	$14 = *($0)
	*($1 + [24]) = *($1 + [304])
	$3 = CALL $13(($1 + [320]), ($1 + [24]))
	*($1 + [96]) = $19
	*($1 + [88]) = $15
	$2 = CALL $62(($1 + [48]), ($1 + [128]))
	$15 = *($3)
	*((($1 + [8]) + [8])) = *($1 + [96])
	*($1 + [8]) = *($1 + [88])
	CALL $9($1, $14, $15, ($1 + [8]), $2)
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$162 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$162
	if ( (*($1 + [128]) & [1]) ){ goto $label$164 }
	if ( (*($1 + [592]) & [1]) ){ goto $label$163 }
	goto $label$106 
	
.LABEL $label$164
	CALL _ZdlPv(*($1 + [136]))
	if ( ((*($1 + [592]) & [1]) == 0) ){ goto $label$106 }
	
.LABEL $label$163
	CALL _ZdlPv(*($1 + [600]))
	if ( (*($12) & [1]) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	CALL $61(($1 + [160]))
	
.LABEL $label$106
	if ( ((*($12) & [1]) == 0) ){ goto $label$104 }
	
.LABEL $label$105
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$104
	*(($1 + [120])) = [0]
	*($1 + [104]) = (int_64)-1
	$14 = (int_64)0
	*($1 + [112]) = (int_64)0
	$15 = *($0)
	*($1 + [88]) = $15
	*($1 + [96]) = $15
	$2 = CALL db_lowerbound_i64($15, $15, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$168 }
	$2 = CALL $14(($1 + [88]), $2)
	CALL eosio_assert([1], [9419])
	$2 = CALL db_next_i64(*($2 + [60]), ($1 + [48]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$167 }
	$14 = (int_64)1
	
.LOOP $label$169:
	$2 = CALL $14(($1 + [88]), $2)
	CALL eosio_assert([1], [9419])
	$14 = ((int_64)$14 + (int_64)1)
	$2 = CALL db_next_i64(*($2 + [60]), ($1 + [48]))
	if ( ((int_32)$2 >= (int_32)[0]) ){ goto $label$169 }
	
.LABEL $label$168
	if ( (uint_64)($14 <= *($0 + [80])) ){ goto $label$165 }
	goto $label$166 
	
.LABEL $label$167
	$14 = (int_64)1
	if ( (uint_64)((int_64)1 <= *($0 + [80])) ){ goto $label$165 }
	
.LABEL $label$166
	$4 = ($1 + [96])
	$10 = ($0 + [80])
	
.LOOP $label$170:
	$2 = [0]
	$3 = CALL db_lowerbound_i64(*($1 + [88]), *($4), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$171 }
	$2 = CALL $14(($1 + [88]), $3)
	
.LABEL $label$171
	$3 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($3, [9449])
	CALL eosio_assert($3, [9419])
	$3 = CALL db_next_i64(*($2 + [60]), ($1 + [48]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$172 }
	CALL $14(($1 + [88]), $3)
	
.LABEL $label$172
	CALL $15(($1 + [88]), $2)
	$14 = ((int_64)$14 + (int_64)-1)
	if ( ((uint_64)$14 >= (uint_64)*($10)) ){ goto $label$170 }
	
.LABEL $label$165
	$14 = *($0)
	*($1 + [52]) = ($1 + [336])
	*($1 + [48]) = ($1 + [88])
	*($1 + [56]) = ($1 + [504])
	*($1 + [60]) = ($1 + [424])
	*($1 + [64]) = ($1 + [480])
	*($1 + [68]) = ($1 + [400])
	*($1 + [320]) = $14
	CALL eosio_assert(((int_64)*($1 + [88]) == (int_64)CALL $fimport$4()), [9177])
	*($1 + [596]) = ($1 + [48])
	*($1 + [592]) = ($1 + [88])
	*($1 + [600]) = ($1 + [320])
	*(($2 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($2 + [8]) = [0]
	*($2 + [56]) = ($1 + [88])
	CALL $16(($1 + [592]), $2)
	*($1 + [304]) = $2
	$14 = *($2)
	*($1 + [592]) = $14
	$4 = *($2 + [60])
	*($1 + [288]) = $4
	$10 = ($1 + [116])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [120]))) ){ goto $label$175 }
	*($3 + [8]) = $14
	*($3 + [16]) = $4
	*($1 + [304]) = [0]
	*($3) = $2
	*($10) = ($3 + [24])
	$3 = *($1 + [304])
	$2 = [0]
	*($1 + [304]) = [0]
	if ( $3 ){ goto $label$174 }
	goto $label$173 
	
.LABEL $label$175
	CALL $17(($1 + [112]), ($1 + [304]), ($1 + [592]), ($1 + [288]))
	$3 = *($1 + [304])
	$2 = [0]
	*($1 + [304]) = [0]
	if ( ($3 == 0) ){ goto $label$173 }
	
.LABEL $label$174
	CALL _ZdlPv($3)
	
.LABEL $label$173
	*((($1 + [48]) + [32])) = $2
	*($1 + [64]) = (int_64)-1
	*($1 + [72]) = (int_64)0
	$14 = *($0)
	*($1 + [48]) = $14
	*($1 + [56]) = $14
	$3 = CALL db_find_i64($14, $14, (int_64)5304430390993399296, *($1 + [520]))
	if ( ((int_32)$3 < (int_32)$2) ){ goto $label$179 }
	$2 = CALL $18(($1 + [48]), $3)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($1 + [48])), [8996])
	$15 = *($0)
	CALL eosio_assert([1], [9228])
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($1 + [48])), [9263])
	CALL eosio_assert(((int_64)*($1 + [48]) == (int_64)CALL $fimport$4()), [9309])
	*($2 + [8]) = ((int_64)*($2 + [8]) + (int_64)*($1 + [504]))
	$14 = *($2)
	CALL eosio_assert([1], [9360])
	CALL eosio_assert([1], [8764])
	CALL memcpy(($1 + [592]), $2, [8])
	CALL eosio_assert([1], [8764])
	CALL memcpy((($1 + [592]) | [8]), ($2 + [8]), [8])
	CALL db_update_i64(*($2 + [20]), $15, ($1 + [592]), [16])
	$2 = (($1 + [48]) + [16])
	if ( (uint_64)($14 <= *($2)) ){ goto $label$178 }
	*($2) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	CALL $19($0, $18)
	$4 = *($1 + [72])
	if ( $4 ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$179
	$15 = *($0)
	CALL eosio_assert(((int_64)*($1 + [48]) == (int_64)CALL $fimport$4()), [9177])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [48])
	*($2) = *($1 + [520])
	*($2 + [8]) = *($1 + [504])
	CALL eosio_assert([1], [8764])
	CALL memcpy(($1 + [592]), $2, [8])
	CALL eosio_assert([1], [8764])
	CALL memcpy((($1 + [592]) | [8]), ($2 + [8]), [8])
	$14 = *($2)
	$4 = CALL db_store_i64(*((($1 + [48]) + [8])), (int_64)5304430390993399296, $15, $14, ($1 + [592]), [16])
	*($2 + [20]) = $4
	$3 = (($1 + [48]) + [16])
	if ( (uint_64)($14 <= *($3)) ){ goto $label$180 }
	*($3) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$180
	*($1 + [320]) = $2
	$14 = *($2)
	*($1 + [592]) = $14
	*($1 + [304]) = $4
	$10 = ($1 + [76])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [80]))) ){ goto $label$182 }
	*($3 + [8]) = $14
	*($3 + [16]) = $4
	*($1 + [320]) = [0]
	*($3) = $2
	*($10) = ($3 + [24])
	$2 = *($1 + [320])
	*($1 + [320]) = [0]
	if ( $2 ){ goto $label$181 }
	goto $label$178 
	
.LABEL $label$182
	CALL $20(($1 + [72]), ($1 + [320]), ($1 + [592]), ($1 + [304]))
	$2 = *($1 + [320])
	*($1 + [320]) = [0]
	if ( ($2 == 0) ){ goto $label$178 }
	
.LABEL $label$181
	CALL _ZdlPv($2)
	
.LABEL $label$178
	CALL $19($0, $18)
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$176 }
	
.LABEL $label$177
	$10 = ($1 + [76])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$184 }
	
.LOOP $label$185:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$186 }
	CALL _ZdlPv($3)
	
.LABEL $label$186
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$185 }
	$2 = *(($1 + [72]))
	goto $label$183 
	
.LABEL $label$184
	$2 = $4
	
.LABEL $label$183
	*($10) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$176
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$187 }
	$10 = ($1 + [116])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$189 }
	
.LOOP $label$190:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$191 }
	CALL _ZdlPv($3)
	
.LABEL $label$191
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$190 }
	$2 = *(($1 + [112]))
	goto $label$188 
	
.LABEL $label$189
	$2 = $4
	
.LABEL $label$188
	*($10) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$187
	$4 = *($1 + [368])
	if ( ($4 == 0) ){ goto $label$192 }
	$10 = ($1 + [372])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$194 }
	
.LOOP $label$195:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$196 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$197 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$197
	CALL _ZdlPv($3)
	
.LABEL $label$196
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$195 }
	$2 = *(($1 + [368]))
	goto $label$193 
	
.LABEL $label$194
	$2 = $4
	
.LABEL $label$193
	*($10) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$192
	if ( ((*($1 + [408]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [416]))
	
.LABEL $label$1
	if ( (*($1 + [432]) & [1]) ){ goto $label$204 }
	if ( (*($1 + [448]) & [1]) ){ goto $label$203 }
	goto $label$202 
	
.LABEL $label$204
	CALL _ZdlPv(*($1 + [440]))
	if ( ((*($1 + [448]) & [1]) == 0) ){ goto $label$202 }
	
.LABEL $label$203
	CALL _ZdlPv(*($1 + [456]))
	$2 = [1]
	if ( ((*($1 + [464]) & [1]) == 0) ){ goto $label$201 }
	goto $label$200 
	
.LABEL $label$202
	$2 = [1]
	if ( (*($1 + [464]) & [1]) ){ goto $label$200 }
	
.LABEL $label$201
	if ( ((*($1 + [488]) & $2) == 0) ){ goto $label$198 }
	goto $label$199 
	
.LABEL $label$200
	CALL _ZdlPv(*($1 + [472]))
	if ( ((*($1 + [488]) & $2) == 0) ){ goto $label$198 }
	
.LABEL $label$199
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$198
	if ( (*(($1 + [560])) & [1]) ){ goto $label$207 }
	if ( (*($1 + [576]) & [1]) ){ goto $label$206 }
	goto $label$205 
	
.LABEL $label$207
	CALL _ZdlPv(*(($1 + [568])))
	if ( ((*($1 + [576]) & [1]) == 0) ){ goto $label$205 }
	
.LABEL $label$206
	CALL _ZdlPv(*(($1 + [584])))
	$global$0 = ($1 + [608])
	return 
	
.LABEL $label$205
	$global$0 = ($1 + [608])
	$9
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9047])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = [0]
	*($5 + [56]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $49(($3 + [32]), ($3 + [24]))
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9483])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9528])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9578])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $14($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $50(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9631])
	*($1) = *(($6 + [16]))
	*($1 + [16]) = *(*(*($5 + [4]) + [4]))
	$7 = CALL current_time()
	*($1 + [40]) = *(*($5 + [16]))
	*($1 + [24]) = (CASTING float_64)(int_64 *(*($5 + [8])))
	*($1 + [8]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	*($1 + [48]) = *(*($5 + [20]))
	*($1 + [32]) = *(*($5 + [12]))
	$6 = $2
	$5 = ($6 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-12])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [40])
	*($3 + [56]) = ($1 + [48])
	CALL $51(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $7, $5, [52])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($0)
	*($3 + [16]) = [8565]
	*($3 + [20]) = CALL $94([8565])
	*($3 + [8]) = *($3 + [16])
	$5 = *(CALL $13(($3 + [40]), ($3 + [8])))
	$6 = *($0)
	*($3 + [16]) = [8688]
	*($3 + [20]) = CALL $94([8688])
	*($3) = *($3 + [16])
	$7 = *(CALL $13(($3 + [40]), $3))
	*($3 + [16]) = $1
	CALL $62(($3 + [24]), $2)
	*($3 + [48]) = $7
	*($3 + [40]) = $6
	*(($0 = CALL _Znwj([16]))) = $4
	*($0 + [8]) = $5
	$2 = ($0 + [16])
	*(($3 + [64])) = $2
	*(($3 + [60])) = $2
	*($3 + [56]) = $0
	CALL $25(($3 + [68]), ($3 + [16]))
	CALL $24(($3 + [80]), ($3 + [40]))
	$0 = *($3 + [80])
	CALL send_inline($0, (*($3 + [84]) - $0))
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($3 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$0 = *($3 + [68])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($3 + [72])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0 = *($3 + [56])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($3 + [60])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	$global$0 = ($3 + [96])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [9263])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9309])
	*($1 + [8]) = (float_64))(*($1 + [8]) - (CASTING float_64)(int_64 *(*($3))))
	$6 = *($1)
	CALL eosio_assert([1], [9360])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $97($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8764])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [8764])
	CALL memcpy(($4 + [8]), $9, [8])
	*($5 + [4]) = ($4 + [16])
	CALL $48($5, $7)
	CALL db_update_i64(*($1 + [32]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $64($6, *($4 + [4]))
	*($1 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($4 + [8]))))
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8764])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [8764])
	CALL memcpy(($2 + [8]), $7, [8])
	*($3 + [4]) = ($2 + [16])
	CALL $48($3, $6)
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8839])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8944])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8877])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8944])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $94($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $65($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9047])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9070])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9070])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)4983122594568132416, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $26(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [8])), [8996])
	$5 = *($0)
	CALL eosio_assert([1], [9228])
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [8])), [9263])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$4()), [9309])
	*($4 + [16]) = ((int_64)*($4 + [16]) + (int_64)$1)
	$3 = *($4)
	CALL eosio_assert([1], [9360])
	*($2 + [96]) = (($2 + [48]) + [28])
	*($2 + [92]) = ($2 + [48])
	*($2 + [88]) = ($2 + [48])
	*($2 + [104]) = ($2 + [88])
	*($2 + [116]) = ($4 + [8])
	*($2 + [112]) = $4
	*($2 + [120]) = ($4 + [16])
	*($2 + [124]) = ($4 + [24])
	CALL $27(($2 + [112]), ($2 + [104]))
	CALL db_update_i64(*($4 + [36]), $5, ($2 + [48]), [28])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$3 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$6 = *($2 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [9177])
	*(($4 = CALL _Znwj([48])) + [24]) = (int_64)1
	*($4 + [32]) = ($2 + [8])
	*($4) = *($0)
	$3 = CALL current_time()
	*($4 + [16]) = $1
	*($4 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + *($0 + [32]))
	*($2 + [96]) = (($2 + [48]) + [28])
	*($2 + [92]) = ($2 + [48])
	*($2 + [88]) = ($2 + [48])
	*($2 + [104]) = ($2 + [88])
	*($2 + [116]) = ($4 + [8])
	*($2 + [112]) = $4
	*($2 + [120]) = ($4 + [16])
	*($2 + [124]) = ($4 + [24])
	CALL $27(($2 + [112]), ($2 + [104]))
	$3 = *($4)
	$6 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)4983122594568132416, $5, $3, ($2 + [48]), [28])
	*($4 + [36]) = $6
	$0 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [112]) = $4
	$3 = *($4)
	*($2 + [48]) = $3
	*($2 + [88]) = $6
	$0 = *((($2 + [8]) + [28]))
	if ( ((uint_32)$0 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $3
	*($0 + [16]) = $6
	*($2 + [112]) = [0]
	*($0) = $4
	*(($2 + [36])) = ($0 + [24])
	$4 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $28(($2 + [32]), ($2 + [112]), ($2 + [48]), ($2 + [88]))
	$4 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $6
	
.LABEL $label$8
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $100($0)
	
.LABEL $label$1
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9737])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9683])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9683])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $14(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [8764])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9070])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $97($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9788])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $97($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $40($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $22($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $41($2, $1)
	CALL $43(CALL $42(CALL $42($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $95(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9788])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $95(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0))
	CALL $30($0)
	CALL $31($0)
	CALL $32($0)
	$2 = CALL current_time()
	*(($1 + [68])) = (int_64)0
	*(($1 + [84])) = (int_64)0
	*(($1 + [92])) = (int_64)0
	*($1 + [52]) = [0]
	*($1 + [56]) = [0]
	*($1 + [60 align=4]) = (int_64)0
	*($1 + [76 align=4]) = (int_64)0
	*($1 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [104]) = [8565]
	*($1 + [108]) = CALL $94([8565])
	*($1 + [8]) = *($1 + [104])
	*($1 + [24]) = *(CALL $13(($1 + [16]), ($1 + [8])))
	*($1 + [16]) = $2
	*($1 + [120]) = [8572]
	*($1 + [124]) = CALL $94([8572])
	*($1) = *($1 + [120])
	*($1 + [104]) = *(CALL $13(($1 + [104]), $1))
	CALL $33(($1 + [76]), ($1 + [16]), $0, ($1 + [104]), ($1 + [120]))
	*($1 + [60]) = *($0 + [32])
	$2 = CALL current_time()
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$2 = *($0)
	CALL $34(($1 + [104]), ($1 + [40]))
	$0 = *($1 + [104])
	CALL send_deferred(($1 + [16]), $2, $0, (*($1 + [108]) - $0), [1])
	$0 = *($1 + [104])
	if ( ($0 == 0) ){ goto $label$1 }
	*($1 + [108]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $35(($1 + [40]))
	$global$0 = ($1 + [128])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $100($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9070])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9070])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8764])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $48(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $22($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2) = $3
	*($2 + [8]) = $4
	CALL eosio_assert(((int_32)($4 - $3) > (int_32)[7]), [8764])
	CALL memcpy($3, $1, [8])
	*($2 + [4]) = ($3 + [8])
	CALL $48($2, $6)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8764])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8764])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $44(CALL $45($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [8764])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8764])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9047])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)1
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $52(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $28(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $65($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ($2 & [1])
	if ( $3 ){ goto $label$3 }
	if ( ((uint_32)uint_32($2 >> [1]) > (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)*($0 + [4]) <= (uint_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $3 ){ goto $label$4 }
	return (($0 + [1]) + $1)
	
.LABEL $label$4
	return (*($0 + [8]) + $1)
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $65($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $94($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $65($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $65($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $61 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18192])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18000]
	$3 = (((int_32)$1 * (int_32)[12]) + [18000])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $89 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $87($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $86($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_64 .FUNC $85 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $84 (int_32 $0)
{
}

int_32 .FUNC $83 ()
{
	return [9792]
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $81 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $80 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $93(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $65($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $70($0, $1, $2, CALL $94($2))
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $94([8204])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8204], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $83())
	*(CALL $83()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $91($4, ($3 + [12]), $2)
	$5 = CALL $83()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $77($3)
	
.LABEL $label$1
	CALL $78($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $77 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $79($1, $0, [8749])
	CALL $80()
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $94($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $4 ){ goto $label$6 }
	$0 = ($0 + [1])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$0 = CALL $93($0, $1, $4)
	if ( ($0 == 0) ){ goto $label$1 }
	return $0
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $5 : ($3 <= $2) )
}

int_32 .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = $1
	*($0 + [8]) = $2
	$2 = *($3)
	*($0 + [16]) = $2
	$3 = *(($3 + [8]))
	*(($4 + [8])) = $3
	*(($0 + [24])) = $3
	*($4) = $2
	*($0 + [40]) = (int_64)4566758108544739836
	*($0 + [32]) = (int_64)86400
	*($0 + [48]) = (int_64)4636526185122103296
	*($0 + [56]) = (int_64)4611686018427387904
	*($0 + [64]) = (int_64)4688897573220515840
	*($0 + [72]) = (int_64)4591870180066957722
	*($0 + [80]) = (int_64)50
	*($0 + [88]) = (int_64)80
	*($0 + [96]) = (int_64)4596373779694328218
	*($0 + [104]) = (int_64)4602678819172646912
	*($0 + [112]) = (int_64)4598175219545276416
	*($0 + [120]) = (int_64)4598175219545276416
	*(($0 + [136])) = [0]
	*($0 + [128 align=4]) = (int_64)0
	$5 = ($0 + [128])
	$3 = CALL $94([8362])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [128]) = ($6 | [1])
	*(($0 + [136])) = $5
	*(($0 + [132])) = $3
	
.LABEL $label$5
	CALL memcpy($5, [8362], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*(($0 + [148])) = [0]
	*(($5 = ($0 + [140]))) = (int_64)0
	$3 = CALL $94([8375])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($0 + [140])) = ($6 | [1])
	*(($0 + [148])) = $5
	*(($0 + [144])) = $3
	
.LABEL $label$8
	CALL memcpy($5, [8375], $3)
	
.LABEL $label$7
	*(($5 + $3)) = [0]
	*(($0 + [160])) = [0]
	*(($5 = ($0 + [152]))) = (int_64)0
	$3 = CALL $94([8388])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$12 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($0 + [152])) = ($6 | [1])
	*(($0 + [160])) = $5
	*(($0 + [156])) = $3
	
.LABEL $label$11
	CALL memcpy($5, [8388], $3)
	
.LABEL $label$10
	*(($5 + $3)) = [0]
	$global$0 = ($4 + [16])
	return $0
	
.LABEL $label$3
	CALL $61($5)
	
.LABEL $label$2
	CALL $61($5)
	
.LABEL $label$1
	CALL $61($5)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9483])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9528])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9578])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	*($3 + [104]) = [8667]
	*($3 + [108]) = CALL $94([8667])
	*($3 + [32]) = *($3 + [104])
	CALL $13(($3 + [56]), ($3 + [32]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$5 }
	*($3 + [104]) = [8679]
	*($3 + [108]) = CALL $94([8679])
	*($3 + [24]) = *($3 + [104])
	CALL $13(($3 + [56]), ($3 + [24]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$5 }
	CALL $2(($3 + [56]))
	$4 = ($3 + [88])
	if ( ((int_64)*($3 + [56]) == (int_64)$0) ){ goto $label$2 }
	$5 = *($4)
	$6 = *(($3 + [96]))
	$7 = *(($3 + [92]))
	$8 = CALL $94([8295])
	if ( ($8 == 0) ){ goto $label$2 }
	$9 = ($5 & [1])
	$5 = ( $7 ? uint_32($5 >> [1]) : $9 )
	if ( ((int_32)$5 < (int_32)$8) ){ goto $label$3 }
	$9 = ( $6 ? ($4 + [1]) : $9 )
	$6 = ($9 + $5)
	$7 = $9
	
.LOOP $label$6:
	$5 = (($5 - $8) + [1])
	if ( ($5 == 0) ){ goto $label$3 }
	$5 = CALL $92($7, [100], $5)
	if ( ($5 == 0) ){ goto $label$3 }
	if ( (CALL $93($5, [8295], $8) == 0) ){ goto $label$4 }
	$7 = ($5 + [1])
	$5 = ($6 - $7)
	if ( ((int_32)$5 >= (int_32)$8) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*($3 + [104]) = [8572]
	*($3 + [108]) = CALL $94([8572])
	*($3 + [16]) = *($3 + [104])
	CALL $13(($3 + [56]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)-4157529833452077056) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3 + [8]) = *($3 + [40])
	CALL $38($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3) = *($3 + [48])
	CALL $38($0, $0, $3)
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [96])))
	
.LABEL $label$1
	CALL $84([0])
	$global$0 = ($3 + [112])
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $79($1, $0, [8695])
	CALL $81()
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $94($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $65($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [128])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)4983122594568132416, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $26(($1 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [8])), [8996])
	$4 = *($0)
	CALL eosio_assert([1], [9228])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [8])), [9263])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$4()), [9309])
	$2 = *($3)
	$5 = CALL current_time()
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = ((int_64)*($3 + [24]) + (int_64)1)
	*($3 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + *($0 + [32]))
	CALL eosio_assert(((int_64)$2 == (int_64)*($3)), [9360])
	*($1 + [96]) = (($1 + [48]) + [28])
	*($1 + [92]) = ($1 + [48])
	*($1 + [88]) = ($1 + [48])
	*($1 + [104]) = ($1 + [88])
	*($1 + [116]) = ($3 + [8])
	*($1 + [112]) = $3
	*($1 + [120]) = ($3 + [16])
	*($1 + [124]) = ($3 + [24])
	CALL $27(($1 + [112]), ($1 + [104]))
	CALL db_update_i64(*($3 + [36]), $4, ($1 + [48]), [28])
	$3 = (($1 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$3 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$6 = *($1 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$4()), [9177])
	*(($3 = CALL _Znwj([48])) + [24]) = (int_64)1
	*($3 + [32]) = ($1 + [8])
	*($3) = *($0)
	$2 = CALL current_time()
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + *($0 + [32]))
	*($1 + [96]) = (($1 + [48]) + [28])
	*($1 + [92]) = ($1 + [48])
	*($1 + [88]) = ($1 + [48])
	*($1 + [104]) = ($1 + [88])
	*($1 + [116]) = ($3 + [8])
	*($1 + [112]) = $3
	*($1 + [120]) = ($3 + [16])
	*($1 + [124]) = ($3 + [24])
	CALL $27(($1 + [112]), ($1 + [104]))
	$2 = *($3)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)4983122594568132416, $4, $2, ($1 + [48]), [28])
	*($3 + [36]) = $6
	$0 = (($1 + [8]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($1 + [112]) = $3
	$2 = *($3)
	*($1 + [48]) = $2
	*($1 + [88]) = $6
	$0 = *((($1 + [8]) + [28]))
	if ( ((uint_32)$0 >= (uint_32)*(($1 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $2
	*($0 + [16]) = $6
	*($1 + [112]) = [0]
	*($0) = $3
	*(($1 + [36])) = ($0 + [24])
	$3 = *($1 + [112])
	*($1 + [112]) = [0]
	if ( $3 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $28(($1 + [32]), ($1 + [112]), ($1 + [48]), ($1 + [88]))
	$3 = *($1 + [112])
	*($1 + [112]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($1 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($1 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($7) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($1 + [128])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	int_64 $5
	int_64 $6
	float_64 $7
	float_64 $8
	float_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$1 = ($global$0 - [240])
	$global$0 = $1
	*(($1 + [224])) = [0]
	*($1 + [208]) = (int_64)-1
	*($1 + [216]) = (int_64)0
	$2 = *($0)
	*($1 + [192]) = $2
	*($1 + [200]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)4983122594568132416, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $26(($1 + [192]), $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [192])), [8996])
	$4 = ((float_64)*($0 + [96]) * (float_64)(CASTING float_64)(int_64 *($3 + [16])))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$5 = (int_64)-9223372036854775808
	$6 = (int_64)0
	if ( ((int_64)-9223372036854775808 >= (int_64)0) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	$6 = (int_64)0
	$5 = (Rounds 0)($4)
	if ( ((int_64)$5 < (int_64)0) ){ goto $label$3 }
	
.LABEL $label$5
	$7 = *($0 + [104])
	$8 = *($0 + [112])
	$9 = *($0 + [120])
	*(($1 + [184])) = [0]
	*($1 + [168]) = (int_64)-1
	$2 = *($0)
	*($1 + [152]) = $2
	*($1 + [160]) = $2
	*($1 + [176]) = $6
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)5304430390993399296, $6)
	$4 = (CASTING float_64)(int_64 $5)
	$9 = ((float_64)$9 * (float_64)$4)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$8 }
	$10 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$8
	$10 = (Rounds 0)($9)
	
.LABEL $label$7
	$8 = ((float_64)$8 * (float_64)$4)
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)9223372036854775808) ){ goto $label$10 }
	$11 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$10
	$11 = (Rounds 0)($8)
	
.LABEL $label$9
	$12 = ((int_32)$3 < (int_32)[0])
	$4 = ((float_64)$7 * (float_64)$4)
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$13 = (int_64)-9223372036854775808
	if ( ($12 == 0) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$13 = (Rounds 0)($4)
	if ( $12 ){ goto $label$12 }
	
.LABEL $label$13
	$14 = (int_64)0
	$5 = (int_64)-1
	$15 = (int_64)-1
	$6 = (int_64)-1
	$16 = (int_64)0
	$17 = (int_64)0
	$3 = CALL $18(($1 + [152]), $3)
	$2 = *($3 + [8])
	if ( ((int_64)$2 > (int_64)-1) ){ goto $label$15 }
	$18 = [3]
	goto $label$1 
	
.LABEL $label$15
	$18 = [8]
	goto $label$1 
	
.LABEL $label$12
	$18 = [27]
	goto $label$1 
	
.LABEL $label$11
	$18 = [27]
	goto $label$1 
	
.LABEL $label$4
	$18 = [35]
	goto $label$1 
	
.LABEL $label$3
	$18 = [35]
	goto $label$1 
	
.LABEL $label$2
	$18 = [35]
	
.LABEL $label$1
	
.LOOP $label$16:
	goto $label$197 
	
.LABEL $label$202
	if ( ((int_64)$2 <= (int_64)$6) ){ goto $label$88 }
	$18 = [7]
	goto $label$16 
	
.LABEL $label$201
	$19 = *($3)
	$17 = $16
	$20 = $14
	$14 = $2
	goto $label$90 
	
.LABEL $label$200
	if ( ((int_64)$2 <= (int_64)$15) ){ goto $label$87 }
	$18 = [6]
	goto $label$16 
	
.LABEL $label$199
	$17 = *($3)
	$19 = $16
	$20 = $14
	$14 = $6
	$6 = $2
	goto $label$91 
	
.LABEL $label$198
	$19 = $16
	$20 = $14
	$14 = $6
	$6 = $15
	$18 = [0]
	goto $label$16 
	
.LABEL $label$197
	$2 = $5
	goto $label$92 
	
.LABEL $label$196
	$5 = $2
	$15 = $6
	$6 = $14
	$14 = $20
	$16 = $19
	$3 = CALL $18(($1 + [152]), $3)
	$2 = *($3 + [8])
	if ( ((int_64)$2 <= (int_64)$5) ){ goto $label$93 }
	$18 = [8]
	goto $label$16 
	
.LABEL $label$195
	$20 = *($3)
	$17 = $16
	$19 = $14
	$14 = $5
	$18 = [1]
	goto $label$16 
	
.LABEL $label$194
	CALL eosio_assert([1], [9419])
	$3 = CALL db_next_i64(*($3 + [20]), ($1 + [232]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$89 }
	$18 = [9]
	goto $label$16 
	
.LABEL $label$193
	if ( ((int_64)$2 == (int_64)-1) ){ goto $label$86 }
	$18 = [10]
	goto $label$16 
	
.LABEL $label$192
	$16 = *($0)
	$3 = CALL $94([8581])
	if ( ($3 <= [8]) ){ goto $label$85 }
	$18 = [108]
	goto $label$16 
	
.LABEL $label$191
	CALL eosio_assert([0], [9075])
	goto $label$83 
	
.LABEL $label$190
	if ( ($3 == 0) ){ goto $label$84 }
	$18 = [12]
	goto $label$16 
	
.LABEL $label$189
	$2 = (int_64)0
	$18 = [13]
	goto $label$16 
	
.LABEL $label$188
	$12 = *(($3 + [8580]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$81 }
	$18 = [106]
	goto $label$16 
	
.LABEL $label$187
	CALL eosio_assert([0], [9120])
	$18 = [14]
	goto $label$16 
	
.LABEL $label$186
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$82 }
	$18 = [15]
	goto $label$16 
	
.LABEL $label$185
	$2 = ((int_64)$2 << (int_64)8)
	$18 = [16]
	goto $label$16 
	
.LABEL $label$184
	*($1 + [144]) = ((int_64)$2 | (int_64)4)
	*($1 + [136]) = $13
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8770])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = [0]
	$18 = [17]
	goto $label$16 
	
.LABEL $label$183
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$18 = [100]
	goto $label$16 
	
.LABEL $label$182
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$18 = [101]
	goto $label$16 
	
.LABEL $label$181
	$2 = $5
	$12 = [1]
	$21 = $3
	$3 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$180
	$2 = $5
	$18 = [103]
	goto $label$16 
	
.LABEL $label$179
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$75 }
	$18 = [104]
	goto $label$16 
	
.LABEL $label$178
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$12 = ((int_32)$3 < (int_32)[6])
	$21 = ($3 + [1])
	$3 = $21
	if ( $12 ){ goto $label$17 }
	$18 = [105]
	goto $label$16 
	
.LABEL $label$177
	$12 = [1]
	$3 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$176
	$12 = [0]
	$18 = [19]
	goto $label$16 
	
.LABEL $label$175
	CALL eosio_assert($12, [8819])
	*(($1 + [128])) = [0]
	*($1 + [120]) = (int_64)0
	$3 = CALL $94([8585])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$73 }
	$18 = [20]
	goto $label$16 
	
.LABEL $label$174
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$72 }
	$18 = [98]
	goto $label$16 
	
.LABEL $label$173
	*($1 + [120]) = ($3 << [1])
	$12 = (($1 + [120]) | [1])
	if ( $3 ){ goto $label$70 }
	goto $label$71 
	
.LABEL $label$172
	$21 = (($3 + [16]) & [-16])
	$12 = CALL _Znwj($21)
	*($1 + [120]) = ($21 | [1])
	*($1 + [128]) = $12
	*($1 + [124]) = $3
	$18 = [22]
	goto $label$16 
	
.LABEL $label$171
	CALL memcpy($12, [8585], $3)
	$18 = [23]
	goto $label$16 
	
.LABEL $label$170
	*(($12 + $3)) = [0]
	*((($1 + [40]) + [8])) = *((($1 + [136]) + [8]))
	*($1 + [40]) = *($1 + [136])
	CALL $9($3, $16, $20, ($1 + [40]), ($1 + [120]))
	if ( ((*($1 + [120]) & [1]) == 0) ){ goto $label$69 }
	$18 = [24]
	goto $label$16 
	
.LABEL $label$169
	CALL _ZdlPv(*($1 + [128]))
	$18 = [25]
	goto $label$16 
	
.LABEL $label$168
	if ( ((int_64)$14 < (int_64)0) ){ goto $label$68 }
	$18 = [72]
	goto $label$16 
	
.LABEL $label$167
	$14 = *($0)
	$3 = CALL $94([8581])
	if ( ($3 <= [8]) ){ goto $label$36 }
	$18 = [97]
	goto $label$16 
	
.LABEL $label$166
	CALL eosio_assert([0], [9075])
	goto $label$34 
	
.LABEL $label$165
	if ( ($3 == 0) ){ goto $label$35 }
	$18 = [74]
	goto $label$16 
	
.LABEL $label$164
	$2 = (int_64)0
	$18 = [75]
	goto $label$16 
	
.LABEL $label$163
	$12 = *(($3 + [8580]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	$18 = [95]
	goto $label$16 
	
.LABEL $label$162
	CALL eosio_assert([0], [9120])
	$18 = [76]
	goto $label$16 
	
.LABEL $label$161
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$33 }
	$18 = [77]
	goto $label$16 
	
.LABEL $label$160
	$2 = ((int_64)$2 << (int_64)8)
	$18 = [78]
	goto $label$16 
	
.LABEL $label$159
	*($1 + [112]) = ((int_64)$2 | (int_64)4)
	*($1 + [104]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8770])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = [0]
	$18 = [79]
	goto $label$16 
	
.LABEL $label$158
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$18 = [89]
	goto $label$16 
	
.LABEL $label$157
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$18 = [90]
	goto $label$16 
	
.LABEL $label$156
	$2 = $5
	$12 = [1]
	$21 = $3
	$3 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$155
	$2 = $5
	$18 = [92]
	goto $label$16 
	
.LABEL $label$154
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$18 = [93]
	goto $label$16 
	
.LABEL $label$153
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$12 = ((int_32)$3 < (int_32)[6])
	$21 = ($3 + [1])
	$3 = $21
	if ( $12 ){ goto $label$19 }
	$18 = [94]
	goto $label$16 
	
.LABEL $label$152
	$12 = [1]
	$3 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$151
	$12 = [0]
	$18 = [81]
	goto $label$16 
	
.LABEL $label$150
	CALL eosio_assert($12, [8819])
	*(($1 + [96])) = [0]
	*($1 + [88]) = (int_64)0
	$3 = CALL $94([8612])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$24 }
	$18 = [82]
	goto $label$16 
	
.LABEL $label$149
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$23 }
	$18 = [87]
	goto $label$16 
	
.LABEL $label$148
	*($1 + [88]) = ($3 << [1])
	$12 = (($1 + [88]) | [1])
	if ( $3 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$147
	$21 = (($3 + [16]) & [-16])
	$12 = CALL _Znwj($21)
	*($1 + [88]) = ($21 | [1])
	*($1 + [96]) = $12
	*($1 + [92]) = $3
	$18 = [84]
	goto $label$16 
	
.LABEL $label$146
	CALL memcpy($12, [8612], $3)
	$18 = [85]
	goto $label$16 
	
.LABEL $label$145
	*(($12 + $3)) = [0]
	*((($1 + [24]) + [8])) = *((($1 + [104]) + [8]))
	*($1 + [24]) = *($1 + [104])
	CALL $9($3, $14, $19, ($1 + [24]), ($1 + [88]))
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$67 }
	$18 = [86]
	goto $label$16 
	
.LABEL $label$144
	CALL _ZdlPv(*($1 + [96]))
	$18 = [26]
	goto $label$16 
	
.LABEL $label$143
	if ( ((int_64)$6 < (int_64)0) ){ goto $label$66 }
	$18 = [46]
	goto $label$16 
	
.LABEL $label$142
	$5 = *($0)
	$3 = CALL $94([8581])
	if ( ($3 <= [8]) ){ goto $label$54 }
	$18 = [71]
	goto $label$16 
	
.LABEL $label$141
	CALL eosio_assert([0], [9075])
	goto $label$52 
	
.LABEL $label$140
	if ( ($3 == 0) ){ goto $label$53 }
	$18 = [48]
	goto $label$16 
	
.LABEL $label$139
	$2 = (int_64)0
	$18 = [49]
	goto $label$16 
	
.LABEL $label$138
	$12 = *(($3 + [8580]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	$18 = [69]
	goto $label$16 
	
.LABEL $label$137
	CALL eosio_assert([0], [9120])
	$18 = [50]
	goto $label$16 
	
.LABEL $label$136
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$51 }
	$18 = [51]
	goto $label$16 
	
.LABEL $label$135
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$18 = [52]
	goto $label$16 
	
.LABEL $label$134
	*($1 + [72]) = $10
	*($1 + [80]) = $2
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8770])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = [0]
	$18 = [53]
	goto $label$16 
	
.LABEL $label$133
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$18 = [63]
	goto $label$16 
	
.LABEL $label$132
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$18 = [64]
	goto $label$16 
	
.LABEL $label$131
	$2 = $6
	$12 = [1]
	$0 = $3
	$3 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$130
	$2 = $6
	$18 = [66]
	goto $label$16 
	
.LABEL $label$129
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$44 }
	$18 = [67]
	goto $label$16 
	
.LABEL $label$128
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$12 = ((int_32)$3 < (int_32)[6])
	$0 = ($3 + [1])
	$3 = $0
	if ( $12 ){ goto $label$37 }
	$18 = [68]
	goto $label$16 
	
.LABEL $label$127
	$12 = [1]
	$3 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$126
	$12 = [0]
	$18 = [55]
	goto $label$16 
	
.LABEL $label$125
	CALL eosio_assert($12, [8819])
	*(($1 + [64])) = [0]
	*($1 + [56]) = (int_64)0
	$3 = CALL $94([8639])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$42 }
	$18 = [56]
	goto $label$16 
	
.LABEL $label$124
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$41 }
	$18 = [61]
	goto $label$16 
	
.LABEL $label$123
	*($1 + [56]) = ($3 << [1])
	$12 = (($1 + [56]) | [1])
	if ( $3 ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$122
	$0 = (($3 + [16]) & [-16])
	$12 = CALL _Znwj($0)
	*($1 + [56]) = ($0 | [1])
	*($1 + [64]) = $12
	*($1 + [60]) = $3
	$18 = [58]
	goto $label$16 
	
.LABEL $label$121
	CALL memcpy($12, [8639], $3)
	$18 = [59]
	goto $label$16 
	
.LABEL $label$120
	*(($12 + $3)) = [0]
	*((($1 + [8]) + [8])) = *((($1 + [72]) + [8]))
	*($1 + [8]) = *($1 + [72])
	CALL $9($3, $5, $17, ($1 + [8]), ($1 + [56]))
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$65 }
	$18 = [60]
	goto $label$16 
	
.LABEL $label$119
	CALL _ZdlPv(*($1 + [64]))
	$18 = [27]
	goto $label$16 
	
.LABEL $label$118
	$0 = *($1 + [176])
	if ( ($0 == 0) ){ goto $label$64 }
	$18 = [28]
	goto $label$16 
	
.LABEL $label$117
	$21 = ($1 + [180])
	$3 = *($21)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$63 }
	$18 = [29]
	goto $label$16 
	
.LABEL $label$116
	$18 = [30]
	goto $label$16 
	
.LABEL $label$115
	$3 = ($3 + [-24])
	$12 = *($3)
	*($3) = [0]
	if ( ($12 == 0) ){ goto $label$61 }
	$18 = [31]
	goto $label$16 
	
.LABEL $label$114
	CALL _ZdlPv($12)
	$18 = [32]
	goto $label$16 
	
.LABEL $label$113
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$62 }
	$18 = [33]
	goto $label$16 
	
.LABEL $label$112
	$3 = *(($1 + [176]))
	goto $label$60 
	
.LABEL $label$111
	$3 = $0
	$18 = [34]
	goto $label$16 
	
.LABEL $label$110
	*($21) = $0
	CALL _ZdlPv($3)
	$18 = [35]
	goto $label$16 
	
.LABEL $label$109
	$0 = *($1 + [216])
	if ( ($0 == 0) ){ goto $label$59 }
	$18 = [36]
	goto $label$16 
	
.LABEL $label$108
	$21 = ($1 + [220])
	$3 = *($21)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$58 }
	$18 = [37]
	goto $label$16 
	
.LABEL $label$107
	$18 = [38]
	goto $label$16 
	
.LABEL $label$106
	$3 = ($3 + [-24])
	$12 = *($3)
	*($3) = [0]
	if ( ($12 == 0) ){ goto $label$56 }
	$18 = [39]
	goto $label$16 
	
.LABEL $label$105
	CALL _ZdlPv($12)
	$18 = [40]
	goto $label$16 
	
.LABEL $label$104
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$57 }
	$18 = [41]
	goto $label$16 
	
.LABEL $label$103
	$3 = *(($1 + [216]))
	goto $label$55 
	
.LABEL $label$102
	$3 = $0
	$18 = [42]
	goto $label$16 
	
.LABEL $label$101
	*($21) = $0
	CALL _ZdlPv($3)
	$18 = [43]
	goto $label$16 
	
.LABEL $label$100
	$global$0 = ($1 + [240])
	return (unreachable)
	
.LABEL $label$99
	$2 = (int_64)0
	goto $label$80 
	
.LABEL $label$98
	$2 = (int_64)0
	goto $label$31 
	
.LABEL $label$97
	$2 = (int_64)4
	goto $label$49 
	
.LABEL $label$96
	CALL $61(($1 + [120]))
	
.LABEL $label$95
	CALL $61(($1 + [88]))
	
.LABEL $label$94
	CALL $61(($1 + [56]))
	
.LABEL $label$93
	$18 = [3]
	goto $label$16 
	
.LABEL $label$92
	$18 = [1]
	goto $label$16 
	
.LABEL $label$91
	$18 = [0]
	goto $label$16 
	
.LABEL $label$90
	$18 = [0]
	goto $label$16 
	
.LABEL $label$89
	$18 = [2]
	goto $label$16 
	
.LABEL $label$88
	$18 = [4]
	goto $label$16 
	
.LABEL $label$87
	$18 = [5]
	goto $label$16 
	
.LABEL $label$86
	$18 = [25]
	goto $label$16 
	
.LABEL $label$85
	$18 = [11]
	goto $label$16 
	
.LABEL $label$84
	$18 = [107]
	goto $label$16 
	
.LABEL $label$83
	$18 = [12]
	goto $label$16 
	
.LABEL $label$82
	$18 = [13]
	goto $label$16 
	
.LABEL $label$81
	$18 = [14]
	goto $label$16 
	
.LABEL $label$80
	$18 = [16]
	goto $label$16 
	
.LABEL $label$79
	$18 = [17]
	goto $label$16 
	
.LABEL $label$78
	$18 = [19]
	goto $label$16 
	
.LABEL $label$77
	$18 = [17]
	goto $label$16 
	
.LABEL $label$76
	$18 = [19]
	goto $label$16 
	
.LABEL $label$75
	$18 = [18]
	goto $label$16 
	
.LABEL $label$74
	$18 = [18]
	goto $label$16 
	
.LABEL $label$73
	$18 = [99]
	goto $label$16 
	
.LABEL $label$72
	$18 = [21]
	goto $label$16 
	
.LABEL $label$71
	$18 = [23]
	goto $label$16 
	
.LABEL $label$70
	$18 = [22]
	goto $label$16 
	
.LABEL $label$69
	$18 = [25]
	goto $label$16 
	
.LABEL $label$68
	$18 = [26]
	goto $label$16 
	
.LABEL $label$67
	$18 = [26]
	goto $label$16 
	
.LABEL $label$66
	$18 = [27]
	goto $label$16 
	
.LABEL $label$65
	$18 = [27]
	goto $label$16 
	
.LABEL $label$64
	$18 = [35]
	goto $label$16 
	
.LABEL $label$63
	$18 = [45]
	goto $label$16 
	
.LABEL $label$62
	$18 = [30]
	goto $label$16 
	
.LABEL $label$61
	$18 = [32]
	goto $label$16 
	
.LABEL $label$60
	$18 = [34]
	goto $label$16 
	
.LABEL $label$59
	$18 = [43]
	goto $label$16 
	
.LABEL $label$58
	$18 = [44]
	goto $label$16 
	
.LABEL $label$57
	$18 = [38]
	goto $label$16 
	
.LABEL $label$56
	$18 = [40]
	goto $label$16 
	
.LABEL $label$55
	$18 = [42]
	goto $label$16 
	
.LABEL $label$54
	$18 = [47]
	goto $label$16 
	
.LABEL $label$53
	$18 = [70]
	goto $label$16 
	
.LABEL $label$52
	$18 = [48]
	goto $label$16 
	
.LABEL $label$51
	$18 = [49]
	goto $label$16 
	
.LABEL $label$50
	$18 = [50]
	goto $label$16 
	
.LABEL $label$49
	$18 = [52]
	goto $label$16 
	
.LABEL $label$48
	$18 = [53]
	goto $label$16 
	
.LABEL $label$47
	$18 = [55]
	goto $label$16 
	
.LABEL $label$46
	$18 = [53]
	goto $label$16 
	
.LABEL $label$45
	$18 = [55]
	goto $label$16 
	
.LABEL $label$44
	$18 = [54]
	goto $label$16 
	
.LABEL $label$43
	$18 = [54]
	goto $label$16 
	
.LABEL $label$42
	$18 = [62]
	goto $label$16 
	
.LABEL $label$41
	$18 = [57]
	goto $label$16 
	
.LABEL $label$40
	$18 = [59]
	goto $label$16 
	
.LABEL $label$39
	$18 = [58]
	goto $label$16 
	
.LABEL $label$38
	$18 = [65]
	goto $label$16 
	
.LABEL $label$37
	$18 = [66]
	goto $label$16 
	
.LABEL $label$36
	$18 = [73]
	goto $label$16 
	
.LABEL $label$35
	$18 = [96]
	goto $label$16 
	
.LABEL $label$34
	$18 = [74]
	goto $label$16 
	
.LABEL $label$33
	$18 = [75]
	goto $label$16 
	
.LABEL $label$32
	$18 = [76]
	goto $label$16 
	
.LABEL $label$31
	$18 = [78]
	goto $label$16 
	
.LABEL $label$30
	$18 = [79]
	goto $label$16 
	
.LABEL $label$29
	$18 = [81]
	goto $label$16 
	
.LABEL $label$28
	$18 = [79]
	goto $label$16 
	
.LABEL $label$27
	$18 = [81]
	goto $label$16 
	
.LABEL $label$26
	$18 = [80]
	goto $label$16 
	
.LABEL $label$25
	$18 = [80]
	goto $label$16 
	
.LABEL $label$24
	$18 = [88]
	goto $label$16 
	
.LABEL $label$23
	$18 = [83]
	goto $label$16 
	
.LABEL $label$22
	$18 = [85]
	goto $label$16 
	
.LABEL $label$21
	$18 = [84]
	goto $label$16 
	
.LABEL $label$20
	$18 = [91]
	goto $label$16 
	
.LABEL $label$19
	$18 = [92]
	goto $label$16 
	
.LABEL $label$18
	$18 = [102]
	goto $label$16 
	
.LABEL $label$17
	$18 = [103]
	goto $label$16 
	$18
	(unreachable)
	(unreachable)
}

void .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)5304430390993399296, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $18($1, $0)
	$3 = ($1 + [8])
	
.LOOP $label$2:
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9419])
	$4 = CALL db_next_i64(*($0 + [20]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $18($1, $4)
	
.LABEL $label$3
	CALL $36($1, $0)
	$0 = CALL db_lowerbound_i64(*($1), *($3), (int_64)5304430390993399296, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $18($1, $0)
	goto $label$2 
	
.LABEL $label$1
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$4 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($5) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}