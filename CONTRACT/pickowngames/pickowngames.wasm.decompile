(data (i32.const 8192) "cannot transfer from self to self.\00")
(data (i32.const 8227) "create:\00")
(data (i32.const 8235) "Transfered amount illegal. refunding: \00")
(data (i32.const 8274) "Pickown Refund.\00")
(data (i32.const 8290) "select:\00")
(data (i32.const 8298) "Cannot find Packet: \00")
(data (i32.const 8319) "Packet size not equal to transfer amount: \00")
(data (i32.const 8362) "=========== Initializing data base ===========\n\00")
(data (i32.const 8410) "=========== End of initializing ==============\n\00%lld\00")
(data (i32.const 8463) "The bomb number should be one digit !!\00%llu\00")
(data (i32.const 8507) "{\"host\" : \"%s\", \00")
(data (i32.const 8525) "\"bomb\" : \"%d\", \00")
(data (i32.const 8541) "\"packet_id\" : \"%d\", \00")
(data (i32.const 8562) "\"total_amount\" : \"%d\"}\00")
(data (i32.const 8585) "\", \00")
(data (i32.const 8589) "{\"ERROR\": \"NO_ROOM\"}\00")
(data (i32.const 8610) "{\"ERROR\": \"ALREADY_PICKED\"}\00")
(data (i32.const 8638) "{\"packet_id\":\"%d\",\00")
(data (i32.const 8657) "\"user\":\"%s\",\00")
(data (i32.const 8670) "\"own_mined\":\"%d\",\00")
(data (i32.const 8688) "\"bomb\":\"1\",\00")
(data (i32.const 8700) "Bomb reward.\00")
(data (i32.const 8713) "\"bomb\":\"0\",\00")
(data (i32.const 8725) "\"ref\":\"%s\",\00")
(data (i32.const 8737) "\"reffee\":\"%d\",\00")
(data (i32.const 8752) "\"luck\":\"%d\",\00")
(data (i32.const 8765) "\"prize_amount\":\"%d\",\00")
(data (i32.const 8786) "\"is_last\":\"1\",\"platform_reserve\":\"%d\",\00")
(data (i32.const 8825) "ROOM does not exist\00")
(data (i32.const 8845) "\"is_last\":\"0\",\00")
(data (i32.const 8860) "\"new_prize_pool\":\"%d\",\00")
(data (i32.const 8883) "\"packet_amount\":\"%d\",\00")
(data (i32.const 8905) "\"txid\":\"%d\"}\00")
(data (i32.const 8918) "Printing length exceeds 256.\00")
(data (i32.const 8947) "Pickown mining reward.\00")
(data (i32.const 8970) "remaining amount must be greater than zero.\00")
(data (i32.const 9014) "remaining packets must be greater than 1\00")
(data (i32.const 9055) "random result is wrong!\00")
(data (i32.const 9079) "\"\00")
(data (i32.const 9081) "}\00")
(data (i32.const 9083) "{\00")
(data (i32.const 9085) "[\"REF_NAME\":\"\00")
(data (i32.const 9099) "\", \"balance\": \"\00")
(data (i32.const 9115) "\"], \00")
(data (i32.const 9120) "{\"ERROR\" : \"NO_REF\"}\00")
(data (i32.const 9141) "{\"ERROR\" : \"WITHDRAW_VAL_IS_ZERO\"}\00")
(data (i32.const 9176) "{\"referral\": \"\00")
(data (i32.const 9191) "\", \"value\" : \"\00")
(data (i32.const 9206) "\"}\00")
(data (i32.const 9209) "Withdraw referral fees.\00")
(data (i32.const 9233) "{ \"TYPE\": \"AIRDROP\", \"data\": [\00")
(data (i32.const 9264) ", \00")
(data (i32.const 9267) "{\"user\": \"\00")
(data (i32.const 9278) "\"balance\": \"\00")
(data (i32.const 9291) "\"prize\": \"\00")
(data (i32.const 9302) "], \"AIRDROP_TOTOAL\": \"\00")
(data (i32.const 9325) "\"PRIZEPOOL_AFTER\": \"\00")
(data (i32.const 9346) "{ \"TYPE\": \"PRINT\", \"data\": [\00")
(data (i32.const 9375) "]}\n\00")
(data (i32.const 9379) "{\"packet_id\":\"%d\",\"type\":\"refund\"}\00")
(data (i32.const 9414) "{\"packet_id\":\"%d\"}\00")
(data (i32.const 9433) "{\"packet_id\":\"%d\",\"type\":\"refund_pending\"}\00")
(data (i32.const 9476) "The transaction ID does not exist!\00")
(data (i32.const 9511) "{\"packet_id\":\"%d\",\"user\":%s,\"type\":\"refund_pending\"}\00")
(data (i32.const 9564) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9628) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9679) "error reading iterator\00")
(data (i32.const 9702) "read\00")
(data (i32.const 9707) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9756) "invalid symbol name\00")
(data (i32.const 9776) "write\00")
(data (i32.const 9782) "string is too long to be a valid name\00")
(data (i32.const 9820) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9887) "character is not in allowed character set for names\00")
(data (i32.const 9940) "\d8&\00\00")
(data (i32.const 9944) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9977) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 10031) "cannot decrement iterator at beginning of index\00")
(data (i32.const 10079) "get\00")
(data (i32.const 10083) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10135) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10189) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10237) "cannot create objects in table of another contract\00")
(data (i32.const 10288) "cannot pass end iterator to erase\00")
(data (i32.const 10322) "cannot increment end iterator\00")
(data (i32.const 10352) "object passed to erase is not in multi_index\00")
(data (i32.const 10397) "cannot erase objects in table of another contract\00")
(data (i32.const 10447) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10500) "object passed to modify is not in multi_index\00")
(data (i32.const 10546) "cannot modify objects in table of another contract\00")
(data (i32.const 10597) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10656) "singleton does not exist\00")
(data (i32.const 19104) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19184) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$2 (param i32 i32)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "printi" (func $fimport$4 (param i64)))
(import "env" "printui" (func $fimport$5 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$12 (result i32)))
(import "env" "tapos_block_num" (func $fimport$13 (result i32)))
(import "env" "sha256" (func $fimport$14 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$19 (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$22 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$23 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$28 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$29 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$30 (param i32)))
(import "env" "db_update_i64" (func $fimport$31 (param i32 i64 i32 i32)))
(import "env" "db_idx64_update" (func $fimport$32 (param i32 i64 i32)))
(import "env" "memset" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$43 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$44 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$45 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$46 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$49 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$51 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$52 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$53 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $59))
(export "_ZdlPv" (func $95))
(export "_Znwj" (func $93))
(export "_Znaj" (func $94))
(export "_ZdaPv" (func $96))
(export "_ZnwjSt11align_val_t" (func $97))
(export "_ZnajSt11align_val_t" (func $98))
(export "_ZdlPvSt11align_val_t" (func $99))
(export "_ZdaPvSt11align_val_t" (func $100))
(table $0 19 19 anyfunc)
(elem (i32.const 1) $45 $46 $6 $27 $57 $56 $52 $38 $36 $51 $54 $48 $55 $58 $41 $32 $114 $117)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19270))
(global $global$2 i32 (i32.const 19270))


int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $123(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10684])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $123(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [24])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [32])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [40])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [48])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [56])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [64])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$8
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$1 = ($1 + [16])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $92($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $104($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $104($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $101($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10079])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $2($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $125($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10684])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $125($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $110())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $124($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [192])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = CALL current_time()
	*((($6 + [96]) + [28])) = (int_64)0
	*(($8 = ($6 + [140]))) = (int_64)0
	*(($6 + [148])) = (int_64)0
	*($6 + [108]) = [0]
	*($6 + [112]) = [0]
	*($6 + [132 align=4]) = (int_64)0
	*($6 + [116 align=4]) = (int_64)0
	*($6 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [80])) = (int_64)0
	*(($9 = ($6 + [88]))) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [64]) = (int_64)-4421791123341306480
	*($6 + [56]) = *($0)
	*($6) = (int_64)3617214756542218240
	CALL $1(($6 + [72]), $0, $6)
	*($6 + [8]) = $2
	*($6) = $1
	*($6 + [16]) = $3
	*($6 + [24]) = $4
	*($6 + [32]) = $5
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = [0]
	CALL $2(($6 + [40]), [40])
	$10 = *($6 + [44])
	$11 = *($6 + [40])
	*($6 + [164]) = $11
	*($6 + [160]) = $11
	*($6 + [168]) = $10
	*($6 + [176]) = ($6 + [160])
	*($6 + [184]) = $6
	CALL $21(($6 + [184]), ($6 + [176]))
	$10 = *($6 + [84])
	if ( ($10 == 0) ){ goto $label$1 }
	*($9) = $10
	CALL _ZdlPv($10)
	*(($6 + [92])) = [0]
	*((($6 + [56]) + [28])) = (int_64)0
	
.LABEL $label$1
	*((($6 + [56]) + [28])) = *($6 + [40])
	*((($6 + [56]) + [36])) = *(($6 + [48]))
	$10 = *((($6 + [96]) + [40]))
	if ( ((uint_32)$10 >= (uint_32)*($8)) ){ goto $label$3 }
	CALL $22($10, ($6 + [56]))
	*(($10 = (($6 + [96]) + [40]))) = (*($10) + [40])
	goto $label$2 
	
.LABEL $label$3
	CALL $23((($6 + [96]) + [36]), ($6 + [56]))
	
.LABEL $label$2
	*($6 + [8]) = (int_64)0
	*($6) = ((int_64)$2 + (int_64)$1)
	CALL $24(($6 + [96]), $6, *($0), [0])
	$0 = *(($6 + [84]))
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = *(($6 + [72]))
	if ( ($0 == 0) ){ goto $label$5 }
	*(($6 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$5
	CALL $25(($6 + [96]))
	$global$0 = ($6 + [192])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $127($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [19184])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020380634279804928, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [16]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $18($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)-3020380634279804928, $6))
	if ( ((int_32)*($4 + [16]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$2
	*(($4 + [24])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	float_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	CALL prints([9233])
	*($1 + [40]) = ($0 + [184])
	$2 = *($0 + [112])
	*(($1 + [24])) = [0]
	*(($1 + [32])) = [0]
	*($1 + [20]) = ($1 + [40])
	*($1 + [28]) = ($1 + [40])
	$3 = (int_64)0
	*($1 + [48]) = (int_64)0
	CALL $49($1, ($1 + [40]), ($1 + [48]))
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ((uint_64)$2 / (uint_64)(int_64)100)
	$6 = ((uint_64)$2 / (uint_64)(int_64)5)
	$7 = ((float_64)(CASTING float_64)(uint_64 $2) * (float_64)(float_64)0.0055)
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$3 }
	$8 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$8 = (Rounds 0)($7)
	
.LABEL $label$2
	$9 = ($1 + [28])
	$10 = ($1 | [1])
	$11 = (($1 + [16]) + [12])
	$12 = ($1 + [8])
	$13 = (($1 + [16]) + [16])
	$14 = (int_64)0
	$3 = (int_64)0
	
.LOOP $label$4:
	*($1 + [48]) = *($11)
	$15 = *(CALL $50(($1 + [48])) + [4])
	if ( ((int_64)$14 == (int_64)0) ){ goto $label$11 }
	CALL prints([9264])
	$16 = ((int_64)$14 + (int_64)1)
	$2 = *($15)
	if ( ((uint_64)((int_64)$14 + (int_64)-1) >= (uint_64)(int_64)9) ){ goto $label$10 }
	$14 = $16
	$16 = $5
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$14 = (int_64)1
	$16 = $6
	$2 = *($15)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$17 = ((int_64)$14 + (int_64)-10)
	$14 = $16
	$16 = $8
	if ( ((uint_64)$17 > (uint_64)(int_64)19) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$8 }
	
.LABEL $label$9
	$18 = [0]
	$19 = *([0] + [9940])
	
.LOOP $label$13:
	*((($1 + [48]) + ($20 = $18))) = *(($19 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$20 == (int_32)[12]) )))))
	$18 = ($20 + [1])
	if ( ((uint_32)$20 > (uint_32)[11]) ){ goto $label$12 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = [0]
	*($1) = (int_64)0
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$7 }
	*($1) = ($18 << [1])
	$19 = $10
	goto $label$6 
	
.LABEL $label$8
	*($12) = [0]
	*($1) = (int_64)0
	*($1) = [0]
	$20 = $10
	goto $label$5 
	
.LABEL $label$7
	$21 = (($18 + [16]) & [-16])
	$19 = CALL _Znwj($21)
	*($12) = $19
	*($1) = ($21 | [1])
	*($1 + [4]) = $18
	
.LABEL $label$6
	$21 = ($20 + [1])
	$20 = [0]
	
.LOOP $label$14:
	*(($19 + $20)) = *((($1 + [48]) + $20))
	$20 = ($20 + [1])
	if ( ((int_32)$21 != (int_32)$20) ){ goto $label$14 }
	$20 = ($19 + $18)
	
.LABEL $label$5
	*($20) = [0]
	$20 = *($12)
	$18 = *($1)
	CALL prints([9267])
	CALL prints(( $20 ? $10 : ($18 & [1]) ))
	CALL prints([8585])
	CALL prints([9278])
	CALL printui(*($15 + [8]))
	CALL prints([8585])
	CALL prints([9291])
	CALL printui($16)
	CALL prints([9206])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$15
	$3 = ((int_64)$16 + (int_64)$3)
	CALL $50($9)
	if ( ((int_32)*($13) != (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$1
	*(($20 = ($0 + [112]))) = (int_64))(*($20) - $3)
	CALL prints([9302])
	CALL printui($3)
	CALL prints([8585])
	CALL prints([9325])
	CALL printi(*($20))
	CALL prints([9079])
	CALL prints([9081])
	CALL $32($0)
	$global$0 = ($1 + [64])
}

int_32 .FUNC $125 (int_32 $0)
{
	return CALL $126([10704], $0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10500])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10546])
	
.LABEL $label$2
	$6 = *(*($3))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	*($1 + [24]) = (int_64))(*($1 + [24]) - $6)
	$7 = *($1)
	*((($8 = *($1 + [48])) + (*(*(($3 + [4]))) << [3]))) = *(*(($3 + [8])))
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10597])
	$8 = *($1 + [48])
	
.LABEL $label$3
	$9 = *(($1 + [52]))
	$10 = ($9 - $8)
	$6 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [48]
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$5 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$5
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL $125($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$6
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $82($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $128($8)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10500])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10546])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	float_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	$6 = ($global$0 - [640])
	$global$0 = $6
	*($6 + [584]) = $1
	CALL require_auth(*($0))
	$7 = ($0 + [304])
	$9 = *(($0 + [332]))
	$8 = *(($0 + [328]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$4 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($11 + [48]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	goto $label$2 
	
.LABEL $label$3
	$10 = CALL db_find_i64(*($7), *(($0 + [312])), (int_64)-6150061881978519552, $4)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $9($7, $10)
	if ( ((int_32)*($11 + [48]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$2
	$12 = ($0 + [32])
	$9 = *(($0 + [60]))
	$13 = *(($0 + [56]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$29 }
	
.LOOP $label$31:
	$10 = ($9 + [-24])
	$8 = *($10)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$30 }
	$9 = $10
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$29 }
	if ( ((int_32)*($8 + [60]) == (int_32)$12) ){ goto $label$32 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$32
	if ( $8 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = CALL db_find_i64(*($12), *(($0 + [40])), (int_64)-3922893626312491008, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$27 }
	$8 = CALL $7($12, $10)
	if ( ((int_32)*($8 + [60]) == (int_32)$12) ){ goto $label$28 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$28
	$9 = *(($8 + [52]))
	$10 = *($8 + [48])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$26 }
	$10 = ($10 + [8])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$34 }
	
.LABEL $label$33
	*($6 + [192]) = $2
	$14 = CALL $116(($6 + [320]), [8638], ($6 + [192]))
	$15 = (($6 + [320]) + $14)
	$4 = *($6 + [584])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$22 }
	$9 = [0]
	$13 = *([0] + [9940])
	
.LOOP $label$36:
	*((($6 + [592]) + ($10 = $9))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$9 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$35 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$36 }
	
.LABEL $label$35
	*(($6 + [280])) = [0]
	*($6 + [272]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$21 }
	*($6 + [272]) = ($9 << [1])
	$13 = (($6 + [272]) | [1])
	goto $label$20 
	
.LABEL $label$27
	$5 = *($11 + [8])
	*(($6 + [312])) = [0]
	*($6 + [304]) = (int_64)0
	$4 = *($0)
	$2 = *($11 + [32])
	$10 = CALL $122([8589])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$25 }
	*($6 + [304]) = ($10 << [1])
	$9 = (($6 + [304]) | [1])
	if ( $10 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$5 = *($11 + [8])
	*(($6 + [296])) = [0]
	*($6 + [288]) = (int_64)0
	$4 = *($0)
	$2 = *($11 + [32])
	$10 = CALL $122([8610])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$18 }
	*($6 + [288]) = ($10 << [1])
	$9 = (($6 + [288]) | [1])
	if ( $10 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$25
	$0 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($0)
	*($6 + [304]) = ($0 | [1])
	*($6 + [312]) = $9
	*($6 + [308]) = $10
	
.LABEL $label$24
	CALL memcpy($9, [8589], $10)
	
.LABEL $label$23
	*(($9 + $10)) = [0]
	CALL $11($6, $4, $5, $2, ($6 + [304]))
	if ( ((*($6 + [304]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($6 + [312]))
	
.LABEL $label$37
	$10 = CALL db_next_i64(*($11 + [52]), ($6 + [320]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$38 }
	CALL $9($7, $10)
	
.LABEL $label$38
	CALL $31($7, $11)
	$global$0 = ($6 + [640])
	return (unreachable)
	
.LABEL $label$22
	*(($6 + [280])) = [0]
	*($6 + [272]) = (int_64)0
	*($6 + [272]) = [0]
	$10 = (($6 + [272]) | [1])
	$9 = $10
	goto $label$19 
	
.LABEL $label$21
	$16 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($16)
	*($6 + [272]) = ($16 | [1])
	*($6 + [280]) = $13
	*($6 + [276]) = $9
	
.LABEL $label$20
	$16 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$39:
	*(($13 + $10)) = *((($6 + [592]) + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$16 != (int_32)$10) ){ goto $label$39 }
	$9 = ($13 + $9)
	$10 = (($6 + [272]) | [1])
	
.LABEL $label$19
	*($9) = [0]
	*($6 + [176]) = ( *($6 + [280]) ? $10 : (*($6 + [272]) & [1]) )
	$10 = CALL $116($15, [8657], ($6 + [176]))
	if ( ((*($6 + [272]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($6 + [280])))
	
.LABEL $label$40
	$9 = ($10 + $14)
	$1 = *($8 + [40])
	*($6 + [264]) = $1
	$4 = *($6 + [584])
	$10 = CALL tapos_block_prefix()
	$13 = CALL tapos_block_num()
	$10 = ($0 + [120])
	*($6 + [272]) = ((int_64)((int_64))($4 - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$13 * (int_32)$10))) + (int_64)*($10))
	CALL sha256(($6 + [272]), [4], ($6 + [592]))
	$17 = *($6 + [592])
	*($10) = $17
	$4 = *($8 + [24])
	*($6 + [272]) = $17
	CALL eosio_assert(((int_64)$4 > (int_64)0), [8970])
	$1 = (int_64)
	CALL eosio_assert(((uint_64)$1((int_64)11 - $1)) > (uint_64)(int_64)1), [9014])
	CALL sha256(($6 + [272]), [8], ($6 + [592]))
	$10 = *($6 + [592])
	$18 = ((float_64)(CASTING float_64)(uint_32 ((($10 << [24]) | (($10 << [8]) & [16711680])) | ((uint_32($10 >> [8]) & [65280]) | uint_32($10 >> [24])))) / (float_64)(float_64)4294967295)
	CALL eosio_assert((((float_64)$18 < (float_64)(float_64)1) & ((float_64)$18 >= (float_64)(float_64)0)), [9055])
	$18 = ((float_64)CALL $112(((float_64)max ( (float_64)((float_64)$18 * (float_64)(CASTING float_64)(uint_64 ((int_64)((uint_64)$4 / (uint_64)$1) << (int_64)1))) , (float_64)(float_64)1 ) * (float_64)(float_64)1e4)) / (float_64)(float_64)1e4)
	if ( ((float_64)(float_64)|$18| < (float_64)(float_64)9223372036854775808) ){ goto $label$42 }
	$4 = (int_64)-9223372036854775808
	goto $label$41 
	
.LABEL $label$42
	$4 = (Rounds 0)($18)
	
.LABEL $label$41
	*($6 + [256]) = $4
	$19 = ((int_64)*($8 + [16]) * (int_64)3)
	*($6 + [160]) = $19
	$10 = (CALL $116((($6 + [320]) + $9), [8670], ($6 + [160])) + $9)
	if ( ((int_64)((int_64)*($6 + [256]) % (int_64)10) != (int_64)*($8 + [32])) ){ goto $label$47 }
	$16 = CALL $116((($6 + [320]) + $10), [8688], [0])
	$4 = *(($8 + [16]))
	$17 = *($8 + [8])
	*(($6 + [248])) = [0]
	*($6 + [240]) = (int_64)0
	$20 = *($0)
	$9 = CALL $122([8700])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$46 }
	*($6 + [240]) = ($9 << [1])
	$13 = (($6 + [240]) | [1])
	if ( $9 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$21 = *(($8 + [16]))
	$14 = (CALL $116((($6 + [320]) + $10), [8713], [0]) + $10)
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$46
	$14 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($6 + [240]) = ($14 | [1])
	*($6 + [248]) = $13
	*($6 + [244]) = $9
	
.LABEL $label$45
	CALL memcpy($13, [8700], $9)
	
.LABEL $label$44
	*(($13 + $9)) = [0]
	CALL $11($6, $20, $17, $4, ($6 + [240]))
	$21 = (int_64)0
	if ( ((*($6 + [240]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*($6 + [248]))
	
.LABEL $label$48
	$14 = ($16 + $10)
	if ( (int_64)($5 == 0) ){ goto $label$6 }
	
.LABEL $label$43
	$15 = ($0 + [224])
	$17 = ((int_64)((int_64)*(($8 + [16])) * (int_64)9) / (int_64)10000)
	$9 = *(($0 + [252]))
	$16 = *(($0 + [248]))
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$49:
	$10 = ($9 + [-24])
	$13 = *($10)
	if ( ((int_64)*($13) == (int_64)$5) ){ goto $label$15 }
	$9 = $10
	if ( ((int_32)$16 != (int_32)$10) ){ goto $label$49 }
	goto $label$14 
	
.LABEL $label$18
	$0 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($0)
	*($6 + [288]) = ($0 | [1])
	*($6 + [296]) = $9
	*($6 + [292]) = $10
	
.LABEL $label$17
	CALL memcpy($9, [8610], $10)
	
.LABEL $label$16
	*(($9 + $10)) = [0]
	CALL $11($6, $4, $5, $2, ($6 + [288]))
	if ( ((*($6 + [288]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($6 + [296]))
	
.LABEL $label$50
	$10 = CALL db_next_i64(*($11 + [52]), ($6 + [320]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$51 }
	CALL $9($7, $10)
	
.LABEL $label$51
	CALL $31($7, $11)
	$global$0 = ($6 + [640])
	return (unreachable)
	
.LABEL $label$15
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$14 }
	if ( ((int_32)*($13 + [16]) == (int_32)$15) ){ goto $label$13 }
	CALL eosio_assert([0], [9628])
	goto $label$13 
	
.LABEL $label$14
	$10 = CALL db_find_i64(*($15), *(($0 + [232])), (int_64)-5001621371259715584, $5)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$13 = CALL $29($15, $10)
	if ( ((int_32)*($13 + [16]) == (int_32)$15) ){ goto $label$13 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$13
	*($6 + [592]) = ((int_64)*($13 + [8]) + (int_64)$17)
	$4 = *($0)
	*($6 + [272]) = ($6 + [592])
	CALL $42($15, $13, $4, ($6 + [272]))
	goto $label$7 
	
.LABEL $label$12
	$20 = *($0)
	if ( ((int_64)*(($0 + [224])) == (int_64)CALL current_receiver()) ){ goto $label$52 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$52
	*(($10 = CALL _Znwj([32])) + [16]) = $15
	*($10 + [8]) = $17
	*($10) = $5
	CALL memcpy(($6 + [592]), $10, [8])
	CALL memcpy((($6 + [592]) | [8]), ($10 + [8]), [8])
	$4 = *($10)
	$13 = CALL db_store_i64(*(($0 + [232])), (int_64)-5001621371259715584, $20, $4, ($6 + [592]), [16])
	*($10 + [20]) = $13
	$9 = ($0 + [240])
	if ( (uint_64)($4 <= *($9)) ){ goto $label$53 }
	*($9) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$53
	*($6 + [272]) = $10
	$4 = *($10)
	*($6 + [592]) = $4
	*($6 + [636]) = $13
	$16 = ($0 + [252])
	$9 = *($16)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [256]))) ){ goto $label$54 }
	*($9 + [8]) = $4
	*($9 + [16]) = $13
	*($6 + [272]) = [0]
	*($9) = $10
	*($16) = ($9 + [24])
	$10 = *($6 + [272])
	*($6 + [272]) = [0]
	if ( ($10 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$54
	CALL $37(($0 + [248]), ($6 + [272]), ($6 + [592]), ($6 + [636]))
	$10 = *($6 + [272])
	*($6 + [272]) = [0]
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$11
	CALL $101(($6 + [304]))
	
.LABEL $label$10
	CALL $101(($6 + [240]))
	
.LABEL $label$9
	CALL $101(($6 + [288]))
	
.LABEL $label$8
	CALL _ZdlPv($10)
	
.LABEL $label$7
	$15 = (($6 + [320]) + $14)
	$9 = [0]
	$13 = *([0] + [9940])
	$4 = $5
	
.LOOP $label$56:
	*((($6 + [592]) + ($10 = $9))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$9 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$55 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$56 }
	
.LABEL $label$55
	*(($6 + [280])) = [0]
	*($6 + [272]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$58 }
	*($6 + [272]) = ($9 << [1])
	$13 = (($6 + [272]) | [1])
	goto $label$57 
	
.LABEL $label$58
	$16 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($16)
	*($6 + [272]) = ($16 | [1])
	*($6 + [280]) = $13
	*($6 + [276]) = $9
	
.LABEL $label$57
	$16 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$59:
	*(($13 + $10)) = *((($6 + [592]) + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$16 != (int_32)$10) ){ goto $label$59 }
	*(($13 + $9)) = [0]
	*($6 + [144]) = ( *($6 + [280]) ? (($6 + [272]) | [1]) : (*($6 + [272]) & [1]) )
	$10 = (CALL $116($15, [8725], ($6 + [144])) + $14)
	if ( ((*($6 + [272]) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($6 + [280])))
	
.LABEL $label$60
	*($6 + [128]) = $17
	$14 = (CALL $116((($6 + [320]) + $10), [8737], ($6 + [128])) + $10)
	
.LABEL $label$6
	$4 = *($0)
	*($6 + [596]) = ($6 + [264])
	*($6 + [592]) = ($6 + [256])
	*($6 + [600]) = ($6 + [584])
	CALL $43($12, $8, $4, ($6 + [592]))
	$4 = *($6 + [256])
	$20 = ((int_64)((int_64)$4 / (int_64)1000) % (int_64)10)
	$4 = ((int_64)((int_64)$4 / (int_64)100) % (int_64)10)
	$17 = ((int_64)$17 % (int_64)10)
	$17 = ((int_64)$4 / (int_64)10)
	$22 = (int_64)
	$9 = ((int_64)$22($4 - ((int_64)$17 * (int_64)10))) == (int_64)$17
	$10 = ($9) & ((int_64)$17 == (int_64)$4)
	if ( ($10) == 0) ){ goto $label$68 }
	$9 = ( ( [5] ? [2] : $10 ) ? [2] : ((int_64)$4 == (int_64)$20) )
	goto $label$67 
	
.LABEL $label$68
	if ( ((int_64))($4 - $20) != (int_64)1) ){ goto $label$71 }
	if ( ((int_64))($22 - $17) != (int_64)1) ){ goto $label$71 }
	if ( ((int_64))($17 - $4) == (int_64)1) ){ goto $label$70 }
	
.LABEL $label$71
	if ( ((int_64))($17 - $22) != (int_64)1) ){ goto $label$69 }
	if ( ((int_64))($20 - $4) != (int_64)1) ){ goto $label$69 }
	if ( ((int_64))($4 - $17) != (int_64)1) ){ goto $label$69 }
	
.LABEL $label$70
	*($6 + [112]) = [4]
	$10 = (CALL $116((($6 + [320]) + $14), [8752], ($6 + [112])) + $14)
	goto $label$66 
	
.LABEL $label$69
	$9 = ( ( [3] ? $9 : (int_64)(((int_64)((int_64)$17 | (int_64)$22) | (int_64)$4) == 0) ) ? $9 : ((int_64)$20 != (int_64)0) )
	
.LABEL $label$67
	*($6 + [96]) = $9
	$10 = (CALL $116((($6 + [320]) + $14), [8752], ($6 + [96])) + $14)
	$9 = ($9 + [-1])
	if ( ((uint_32)$9 > (uint_32)[4]) ){ goto $label$62 }
	goto $label$72 
	
.LABEL $label$72
	$16 = ($0 + [112])
	$4 = *($0 + [112])
	$17 = ((int_64)$4 / (int_64)200)
	goto $label$61 
	
.LABEL $label$66
	$16 = ($0 + [112])
	$4 = *($0 + [112])
	$17 = ((int_64)$4 / (int_64)50)
	goto $label$61 
	
.LABEL $label$65
	$16 = ($0 + [112])
	$4 = *($0 + [112])
	$17 = ((int_64)((int_64)$4 * (int_64)3) / (int_64)100)
	goto $label$61 
	
.LABEL $label$64
	$16 = ($0 + [112])
	$4 = *($0 + [112])
	$17 = ((int_64)$4 / (int_64)100)
	goto $label$61 
	
.LABEL $label$63
	$16 = ($0 + [112])
	$4 = *($0 + [112])
	$17 = ((int_64)$4 / (int_64)100)
	goto $label$61 
	
.LABEL $label$62
	$16 = ($0 + [112])
	$4 = *($0 + [112])
	$17 = (int_64)0
	
.LABEL $label$61
	*($16) = (int_64))($4 - $17)
	*($6 + [80]) = $17
	$14 = (CALL $116((($6 + [320]) + $10), [8765], ($6 + [80])) + $10)
	$10 = (($6 + [320]) + $14)
	if ( ((int_64)$1 != (int_64)2) ){ goto $label$76 }
	$9 = ($8 + [24])
	*($6 + [64]) = *($9)
	$15 = CALL $116($10, [8786], ($6 + [64]))
	$4 = *($9)
	*(($10 = ($0 + [112]))) = ((int_64)*($10) + (int_64)((int_64)$4 / (int_64)20))
	CALL $44($0, $4, $2, ($8 + [8]))
	CALL eosio_assert([1], [8825])
	$10 = CALL db_next_i64(*($8 + [64]), ($6 + [592]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$77 }
	CALL $7($12, $10)
	
.LABEL $label$77
	CALL $28($12, $8)
	$20 = *($6 + [256])
	$4 = (int_64)0
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$15 = CALL $116($10, [8845], [0])
	$20 = *($6 + [256])
	$4 = (int_64)0
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$74 }
	
.LABEL $label$75
	*(($6 + [280])) = [0]
	*($6 + [272]) = $4
	$10 = CALL $122([8524])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$78 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$81 }
	*($6 + [272]) = ($10 << [1])
	$9 = (($6 + [272]) | [1])
	if ( $10 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$8 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($6 + [272]) = ($8 | [1])
	*($6 + [280]) = $9
	*($6 + [276]) = $10
	
.LABEL $label$80
	CALL memcpy($9, [8524], $10)
	
.LABEL $label$79
	*(($9 + $10)) = [0]
	goto $label$73 
	
.LABEL $label$78
	CALL $101(($6 + [272]))
	
.LABEL $label$74
	$9 = [0]
	$8 = *([0] + [9940])
	
.LOOP $label$83:
	*((($6 + [592]) + ($10 = $9))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$9 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$82 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)$4) ){ goto $label$83 }
	
.LABEL $label$82
	*(($6 + [280])) = [0]
	*($6 + [272]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$85 }
	*($6 + [272]) = ($9 << [1])
	$8 = (($6 + [272]) | [1])
	goto $label$84 
	
.LABEL $label$85
	$13 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($13)
	*($6 + [272]) = ($13 | [1])
	*($6 + [280]) = $8
	*($6 + [276]) = $9
	
.LABEL $label$84
	$13 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$86:
	*(($8 + $10)) = *((($6 + [592]) + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$86 }
	*(($8 + $9)) = [0]
	
.LABEL $label$73
	*($6 + [48]) = ( *($6 + [280]) ? (($6 + [272]) | [1]) : (*($6 + [272]) & [1]) )
	$10 = ($15 + $14)
	$9 = CALL $116((($6 + [320]) + $10), [8725], ($6 + [48]))
	*($6 + [32]) = *($16)
	$10 = ($9 + $10)
	$9 = CALL $116((($6 + [320]) + $10), [8860], ($6 + [32]))
	*($6 + [16]) = *($6 + [256])
	$10 = ($9 + $10)
	$9 = CALL $116((($6 + [320]) + $10), [8883], ($6 + [16]))
	*($6) = (int_64))(((int_64)((int_64)$2 * (int_64)1000000) | (int_64)11) - $1)
	$10 = ($9 + $10)
	CALL eosio_assert(((int_32)($10 + CALL $116(($10 + ($6 + [320])), [8905], $6)) < (int_32)[256]), [8918])
	$10 = CALL db_next_i64(*($11 + [52]), ($6 + [592]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$87 }
	CALL $9($7, $10)
	
.LABEL $label$87
	CALL $31($7, $11)
	CALL prints(($6 + [320]))
	*(($6 + [600])) = [0]
	*($6 + [592]) = (int_64)0
	$10 = CALL $122(($6 + [320]))
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$91 }
	$5 = ((int_64)((int_64)$17 + (int_64)$21) + (int_64)$20)
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$94 }
	*($6 + [592]) = ($10 << [1])
	$9 = (($6 + [592]) | [1])
	if ( $10 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$11 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($6 + [592]) = ($11 | [1])
	*($6 + [600]) = $9
	*($6 + [596]) = $10
	
.LABEL $label$93
	CALL memcpy($9, ($6 + [320]), $10)
	
.LABEL $label$92
	*(($9 + $10)) = [0]
	$10 = CALL $102(($6 + [224]), ($6 + [592]))
	CALL $11($6, *($0), *($6 + [584]), $5, $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$95 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$95
	*(($6 + [216])) = [0]
	*($6 + [208]) = (int_64)0
	$5 = *($0)
	$4 = *($6 + [584])
	$10 = CALL $122([8947])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$90 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$98 }
	*($6 + [208]) = ($10 << [1])
	$9 = (($6 + [208]) | [1])
	if ( $10 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$11 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($6 + [208]) = ($11 | [1])
	*($6 + [216]) = $9
	*($6 + [212]) = $10
	
.LABEL $label$97
	CALL memcpy($9, [8947], $10)
	
.LABEL $label$96
	*(($9 + $10)) = [0]
	CALL $26($6, $5, $4, $19, ($6 + [208]))
	if ( (*($6 + [208]) & [1]) ){ goto $label$100 }
	if ( (*($6 + [592]) & [1]) ){ goto $label$99 }
	goto $label$89 
	
.LABEL $label$100
	CALL _ZdlPv(*($6 + [216]))
	if ( ((*($6 + [592]) & [1]) == 0) ){ goto $label$89 }
	
.LABEL $label$99
	CALL _ZdlPv(*($6 + [600]))
	if ( (*($6 + [272]) & [1]) ){ goto $label$88 }
	goto $label$1 
	
.LABEL $label$91
	CALL $101(($6 + [592]))
	
.LABEL $label$90
	CALL $101(($6 + [208]))
	
.LABEL $label$89
	if ( ((*($6 + [272]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$88
	CALL _ZdlPv(*(($6 + [280])))
	
.LABEL $label$1
	$global$0 = ($6 + [640])
	(unreachable)
	$9
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $75($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $4($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9776])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $4($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $76($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = $global$0
	$4 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10500])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10546])
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	$5 = *($1)
	$6 = $3
	$3 = ($6 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($6 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $4
}

void .FUNC $46 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [224])
	$5 = *(($0 + [252]))
	$4 = *(($0 + [248]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$11:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$10 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	if ( ((int_32)*($7 + [16]) == (int_32)$3) ){ goto $label$8 }
	CALL eosio_assert([0], [9628])
	$8 = (int_64)0
	$9 = *($7 + [8])
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$9
	$6 = CALL db_find_i64(*($3), *(($0 + [232])), (int_64)-5001621371259715584, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $29($3, $6)
	if ( ((int_32)*($7 + [16]) == (int_32)$3) ){ goto $label$8 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$8
	$8 = (int_64)0
	$9 = *($7 + [8])
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$5 }
	
.LABEL $label$7
	CALL $47($3, $7, *($0))
	if ( ((int_64)$1 == (int_64)$8) ){ goto $label$4 }
	$5 = [0]
	$7 = *([0] + [9940])
	$8 = $1
	
.LOOP $label$13:
	*((($2 + [32]) + ($6 = $5))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$5 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$12 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($2 + [16]) = ($5 << [1])
	$7 = (($2 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$6
	CALL prints([9120])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$5
	CALL prints([9141])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$4
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [16]) = [0]
	$6 = (($2 + [16]) | [1])
	$5 = $6
	goto $label$1 
	
.LABEL $label$3
	$4 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($4)
	*($2 + [16]) = ($4 | [1])
	*($2 + [24]) = $7
	*($2 + [20]) = $5
	
.LABEL $label$2
	$4 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$14:
	*(($7 + $6)) = *((($2 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$14 }
	$5 = ($7 + $5)
	$6 = (($2 + [16]) | [1])
	
.LABEL $label$1
	*($5) = [0]
	$5 = *($2 + [24])
	$7 = *($2 + [16])
	CALL $107(($2 + [32]), $9)
	CALL prints([9176])
	CALL prints(( $5 ? $6 : ($7 & [1]) ))
	CALL prints([9191])
	$6 = *($2 + [32])
	$5 = ($6 & [1])
	CALL prints_l(( *($2 + [40]) ? (($2 + [32]) | [1]) : $5 ), ( *($2 + [36]) ? uint_32($6 >> [1]) : $5 ))
	CALL prints([9206])
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$15
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$16
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$8 = *($0)
	$6 = CALL $122([9209])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$20 }
	*($2) = ($6 << [1])
	$5 = ($2 | [1])
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $6
	
.LABEL $label$19
	CALL memcpy($5, [9209], $6)
	
.LABEL $label$18
	*(($5 + $6)) = [0]
	CALL $11($6, $8, $1, $9, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$21
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$17
	CALL $101($2)
}

void .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL prints([9083])
	$2 = CALL db_lowerbound_i64(*($0 + [224]), *(($0 + [232])), (int_64)-5001621371259715584, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = (($1 + [16]) | [1])
	$4 = ($1 | [1])
	$5 = ($1 + [8])
	$6 = ($0 + [224])
	$7 = CALL $29($6, $2)
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$3 }
	$9 = [15]
	goto $label$1 
	
.LABEL $label$3
	$9 = [7]
	goto $label$1 
	
.LABEL $label$2
	$9 = [16]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$21 
	
.LABEL $label$31
	$7 = CALL $29($6, $0)
	$8 = *($7)
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$14 }
	$9 = [7]
	goto $label$4 
	
.LABEL $label$30
	$2 = [0]
	$10 = *([0] + [9940])
	$9 = [8]
	goto $label$4 
	
.LABEL $label$29
	*((($1 + [16]) + ($0 = $2))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$2 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$7 }
	$9 = [9]
	goto $label$4 
	
.LABEL $label$28
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$8 }
	$9 = [10]
	goto $label$4 
	
.LABEL $label$27
	*($5) = [0]
	*($1) = (int_64)0
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	$9 = [14]
	goto $label$4 
	
.LABEL $label$26
	*($1) = ($2 << [1])
	$10 = $4
	goto $label$5 
	
.LABEL $label$25
	*($5) = [0]
	*($1) = (int_64)0
	*($1) = [0]
	$0 = $4
	goto $label$12 
	
.LABEL $label$24
	$11 = (($2 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5) = $10
	*($1) = ($11 | [1])
	*($1 + [4]) = $2
	$9 = [12]
	goto $label$4 
	
.LABEL $label$23
	$11 = ($0 + [1])
	$0 = [0]
	$9 = [13]
	goto $label$4 
	
.LABEL $label$22
	*(($10 + $0)) = *((($1 + [16]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$11 != (int_32)$0) ){ goto $label$13 }
	$9 = [0]
	goto $label$4 
	
.LABEL $label$21
	$0 = ($10 + $2)
	$9 = [1]
	goto $label$4 
	
.LABEL $label$20
	*($0) = [0]
	$0 = *($5)
	$2 = *($1)
	CALL prints([9085])
	CALL prints(( $0 ? $4 : ($2 & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	$9 = [2]
	goto $label$4 
	
.LABEL $label$19
	CALL _ZdlPv(*($5))
	$9 = [3]
	goto $label$4 
	
.LABEL $label$18
	CALL $107(($1 + [16]), *($7 + [8]))
	CALL prints([9099])
	$0 = *($1 + [16])
	$2 = ($0 & [1])
	$10 = (($1 + [16]) + [8])
	CALL prints_l(( *($10) ? $3 : $2 ), ( *($1 + [20]) ? uint_32($0 >> [1]) : $2 ))
	CALL prints([9115])
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	$9 = [4]
	goto $label$4 
	
.LABEL $label$17
	CALL _ZdlPv(*($10))
	$9 = [5]
	goto $label$4 
	
.LABEL $label$16
	$0 = CALL db_next_i64(*($7 + [20]), ($1 + [16]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$9 }
	$9 = [16]
	goto $label$4 
	
.LABEL $label$15
	CALL prints([9081])
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$14
	$9 = [15]
	goto $label$4 
	
.LABEL $label$13
	$9 = [13]
	goto $label$4 
	
.LABEL $label$12
	$9 = [1]
	goto $label$4 
	
.LABEL $label$11
	$9 = [3]
	goto $label$4 
	
.LABEL $label$10
	$9 = [5]
	goto $label$4 
	
.LABEL $label$9
	$9 = [6]
	goto $label$4 
	
.LABEL $label$8
	$9 = [8]
	goto $label$4 
	
.LABEL $label$7
	$9 = [10]
	goto $label$4 
	
.LABEL $label$6
	$9 = [11]
	goto $label$4 
	
.LABEL $label$5
	$9 = [12]
	goto $label$4 
	$9
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = ($0 + [264])
	$6 = *($3)
	$8 = *(($0 + [292]))
	$7 = *(($0 + [288]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$9:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$8 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	if ( ((int_32)*($10 + [8]) == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [9628])
	goto $label$6 
	
.LABEL $label$7
	$9 = CALL db_find_i64(*($5), *(($0 + [272])), (int_64)-2063328927043518464, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $33($5, $9) + [8]) == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$6
	*($4 + [16]) = $2
	CALL $116(($4 + [80]), [9379], ($4 + [16]))
	*(($4 + [72])) = [0]
	*($4 + [64]) = (int_64)0
	$6 = *($3)
	$2 = *($0)
	$9 = CALL $122(($4 + [80]))
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [64]) = ($9 << [1])
	$8 = (($4 + [64]) | [1])
	if ( $9 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [64]) = ($7 | [1])
	*($4 + [72]) = $8
	*($4 + [68]) = $9
	
.LABEL $label$11
	CALL memcpy($8, ($4 + [80]), $9)
	
.LABEL $label$10
	*(($8 + $9)) = [0]
	CALL $11($9, $2, $6, $1, ($4 + [64]))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4 + [72]))
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$5
	*($4) = $2
	CALL $116(($4 + [80]), [9414], $4)
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	$6 = ((int_64)$1 / (int_64)5)
	$2 = *($0)
	$9 = CALL $122(($4 + [80]))
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$15 }
	*($4 + [48]) = ($9 << [1])
	$8 = (($4 + [48]) | [1])
	if ( $9 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$7 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [48]) = ($7 | [1])
	*($4 + [56]) = $8
	*($4 + [52]) = $9
	
.LABEL $label$14
	CALL memcpy($8, ($4 + [80]), $9)
	
.LABEL $label$13
	*(($8 + $9)) = [0]
	CALL $11($9, $2, (int_64)-6084070135119415936, $6, ($4 + [48]))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$16
	*(($4 + [40])) = [0]
	$6 = ((int_64)((int_64)$1 * (int_64)6) / (int_64)10)
	*(($9 = ($0 + [144]))) = ((int_64)*($9) + (int_64)$6)
	*($4 + [32]) = (int_64)0
	$1 = *($0)
	$9 = CALL $122(($4 + [80]))
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [32]) = ($9 << [1])
	$8 = (($4 + [32]) | [1])
	if ( $9 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [32]) = ($7 | [1])
	*($4 + [40]) = $8
	*($4 + [36]) = $9
	
.LABEL $label$18
	CALL memcpy($8, ($4 + [80]), $9)
	
.LABEL $label$17
	*(($8 + $9)) = [0]
	CALL $11($9, $1, (int_64)7372206918919832080, $6, ($4 + [32]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$4
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$3
	CALL $101(($4 + [64]))
	
.LABEL $label$2
	CALL $101(($4 + [48]))
	
.LABEL $label$1
	CALL $101(($4 + [32]))
	(unreachable)
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $125($1)
	
.LABEL $label$2
	*(CALL $110()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $125(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $128($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19088])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18896]
	$3 = (((int_32)$1 * (int_32)[12]) + [18896])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9782])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9887])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9820])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9887])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9679])
	
.LABEL $label$5
	$4 = CALL $125($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([64])) + [40]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [48]) = $0
	CALL $81(($3 + [32]), $5)
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $128($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8192])
	$6 = *($0)
	
.LABEL $label$1
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$3 }
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$6 }
	$8 = uint_32($7 >> [1])
	$9 = ($4 + [1])
	$7 = CALL $122([8227])
	if ( ($7 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$8 = *($4 + [4])
	$9 = *($4 + [8])
	$7 = CALL $122([8227])
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$7 }
	$10 = ($9 + $8)
	$11 = $9
	
.LOOP $label$8:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$7 }
	$8 = CALL $120($11, [99], $8)
	if ( ($8 == 0) ){ goto $label$7 }
	if ( (CALL $121($8, [8227], $7) == 0) ){ goto $label$9 }
	$11 = ($8 + [1])
	$8 = ($10 - $11)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$7 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$7
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$12 }
	$8 = uint_32($7 >> [1])
	$9 = ($4 + [1])
	$7 = CALL $122([8290])
	if ( ($7 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$8 = *($4 + [4])
	$9 = *($4 + [8])
	$7 = CALL $122([8290])
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$3 }
	$10 = ($9 + $8)
	$11 = $9
	
.LOOP $label$13:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$3 }
	$8 = CALL $120($11, [115], $8)
	if ( ($8 == 0) ){ goto $label$3 }
	if ( (CALL $121($8, [8290], $7) == 0) ){ goto $label$14 }
	$11 = ($8 + [1])
	$8 = ($10 - $11)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$13 }
	goto $label$3 
	
.LABEL $label$14
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$10
	$12 = CALL $103(($5 + [80]), $4, [7], [13], $4)
	$6 = (CASTING int_64)(int_32 CALL $119(( *($12 + [8]) ? ($12 + [1]) : (*($5 + [80]) & [1]) )))
	$9 = ($0 + [32])
	$8 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$36 }
	
.LOOP $label$38:
	$7 = ($8 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$6) ){ goto $label$37 }
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$36 }
	if ( ((int_32)*($11 + [60]) == (int_32)$9) ){ goto $label$35 }
	CALL eosio_assert([0], [9628])
	$2 = *($3)
	$13 = *($11 + [16])
	if ( ((int_64)$13 == (int_64)$2) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$7 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)-3922893626312491008, $6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$32 }
	$11 = CALL $7($9, $7)
	if ( ((int_32)*($11 + [60]) == (int_32)$9) ){ goto $label$35 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$35
	$2 = *($3)
	$13 = *($11 + [16])
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$33 }
	
.LABEL $label$34
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$31 }
	if ( ((uint_32)uint_32($7 >> [1]) <= (uint_32)[13]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$33
	CALL prints([8319])
	CALL printi($2)
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	$6 = *($0)
	$0 = CALL $122([8274])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$27 }
	*($5 + [48]) = ($0 << [1])
	$4 = (($5 + [48]) | [1])
	if ( $0 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$32
	CALL prints([8298])
	CALL printui($6)
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$6 = *($3)
	$2 = *($0)
	$0 = CALL $122([8274])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [64]) = ($0 << [1])
	$4 = (($5 + [64]) | [1])
	if ( $0 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$31
	if ( ((uint_32)*($4 + [4]) > (uint_32)[13]) ){ goto $label$29 }
	
.LABEL $label$30
	*($5 + [40]) = (int_64)0
	goto $label$28 
	
.LABEL $label$29
	$7 = *($4)
	$8 = ($7 & [1])
	$4 = CALL $103(($5 + [16]), $4, [14], [-1], $4)
	*($5 + [32]) = ( *($4 + [8]) ? ($4 + [1]) : $8 )
	*($5 + [36]) = ( *($4 + [4]) ? uint_32($7 >> [1]) : $8 )
	*($5 + [8]) = *($5 + [32])
	CALL $8(($5 + [40]), ($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$28
	$7 = ($0 + [304])
	$2 = *(($0 + [320]))
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$39 }
	$2 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($7), *(($0 + [312])), (int_64)-6150061881978519552, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$21 }
	CALL $9($7, $4)
	*($5 + [116]) = [0]
	*($5 + [112]) = $7
	$2 = *(*(CALL $10(($5 + [112])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	*(($0 + [320])) = $2
	
.LABEL $label$39
	if ( (uint_64)($2 <= (int_64)-2) ){ goto $label$20 }
	CALL eosio_assert([0], [10083])
	$2 = *(($0 + [320]))
	goto $label$20 
	
.LABEL $label$27
	$7 = (($0 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($5 + [48]) = ($7 | [1])
	*($5 + [56]) = $4
	*($5 + [52]) = $0
	
.LABEL $label$26
	CALL memcpy($4, [8274], $0)
	
.LABEL $label$25
	*(($4 + $0)) = [0]
	CALL $11($5, $6, $1, $2, ($5 + [48]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5 + [56]))
	if ( (*($5 + [80]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$7 = (($0 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($5 + [64]) = ($7 | [1])
	*($5 + [72]) = $4
	*($5 + [68]) = $0
	
.LABEL $label$23
	CALL memcpy($4, [8274], $0)
	
.LABEL $label$22
	*(($4 + $0)) = [0]
	CALL $11($5, $2, $1, $6, ($5 + [64]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5 + [72]))
	if ( (*($5 + [80]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$21
	*(($0 + [320])) = (int_64)0
	
.LABEL $label$20
	$14 = *($0)
	if ( ((int_64)*(($0 + [304])) == (int_64)CALL current_receiver()) ){ goto $label$40 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$40
	*(($4 = CALL _Znwj([64])) + [48]) = $7
	*($4) = $2
	$15 = CALL current_time()
	*($4 + [8]) = $1
	*($4 + [16]) = $15
	*($4 + [32]) = $13
	*($4 + [24]) = $6
	*($4 + [40]) = *($5 + [40])
	*($5 + [176]) = (($5 + [112]) + [48])
	*($5 + [172]) = ($5 + [112])
	*($5 + [168]) = ($5 + [112])
	CALL $12(($5 + [168]), $4)
	$15 = *($4)
	$7 = ($0 + [312])
	*($4 + [52]) = CALL db_store_i64(*($7), (int_64)-6150061881978519552, $14, $15, ($5 + [112]), [48])
	$8 = ($0 + [320])
	if ( (uint_64)($15 <= *($8)) ){ goto $label$41 }
	*($8) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$41
	$15 = *($7)
	$16 = *($4)
	*($5 + [184]) = *(($4 + [8]))
	*($4 + [56]) = CALL db_idx64_store($15, (int_64)-6150061881978519552, $14, $16, ($5 + [184]))
	*($5 + [168]) = $4
	$14 = *($4)
	*($5 + [112]) = $14
	$8 = *(($4 + [52]))
	*($5 + [184]) = $8
	$3 = ($0 + [332])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [336]))) ){ goto $label$44 }
	*($7 + [8]) = $14
	*($7 + [16]) = $8
	*($5 + [168]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	$4 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( $4 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	CALL $13(($0 + [328]), ($5 + [168]), ($5 + [112]), ($5 + [184]))
	$4 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	CALL _ZdlPv($4)
	
.LABEL $label$42
	CALL $14($0, $1, $6, $13, $2, *($5 + [40]))
	
.LABEL $label$19
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($12 + [8])))
	
.LABEL $label$17
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$16
	CALL $101(($5 + [48]))
	
.LABEL $label$15
	CALL $101(($5 + [64]))
	
.LABEL $label$4
	$6 = *($3)
	if ( ((int_64)$6 <= (int_64)99999) ){ goto $label$48 }
	if ( ((int_64)$6 > (int_64)499999) ){ goto $label$47 }
	if ( ((int_64)$6 == (int_64)100000) ){ goto $label$46 }
	if ( ((int_64)$6 == (int_64)200000) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	if ( ((int_64)$6 == (int_64)1000) ){ goto $label$46 }
	if ( ((int_64)$6 == (int_64)10000) ){ goto $label$46 }
	if ( ((int_64)$6 == (int_64)50000) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	if ( ((int_64)$6 == (int_64)500000) ){ goto $label$46 }
	if ( ((int_64)$6 != (int_64)1000000) ){ goto $label$45 }
	
.LABEL $label$46
	if ( (*($4) & [1]) ){ goto $label$50 }
	$4 = ($4 + [1])
	goto $label$49 
	
.LABEL $label$50
	$4 = *($4 + [8])
	
.LABEL $label$49
	*($5 + [112]) = *($4 + [7])
	CALL $15($0, $1, $6, (CASTING int_64)(int_32 CALL $119(($5 + [112]))))
	$global$0 = ($5 + [192])
	return 
	
.LABEL $label$45
	CALL prints([8235])
	CALL printi($6)
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$2 = *($0)
	$0 = CALL $122([8274])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$53 }
	*($5 + [96]) = ($0 << [1])
	$4 = (($5 + [96]) | [1])
	if ( $0 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$7 = (($0 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($5 + [96]) = ($7 | [1])
	*($5 + [104]) = $4
	*($5 + [100]) = $0
	
.LABEL $label$52
	CALL memcpy($4, [8274], $0)
	
.LABEL $label$51
	*(($4 + $0)) = [0]
	CALL $11($5, $2, $1, $6, ($5 + [96]))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5 + [104]))
	
.LABEL $label$3
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $101(($5 + [96]))
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9679])
	
.LABEL $label$5
	$2 = CALL $125($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $5)
	*(($4 = CALL _Znwj([72])) + [8]) = (int_64)0
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($4 + [48]) = $5
	*($4 + [60]) = $0
	$5 = ($5 + [72])
	*($4 + [52]) = $5
	*($4 + [56]) = $5
	CALL $78(($3 + [32]), $4)
	*($4 + [64]) = $1
	*($3 + [24]) = $4
	$7 = *($4)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $4
	*($8) = ($5 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $128($2)
	
.LABEL $label$7
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $4
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $74(CALL $73($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $77(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $109($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $2($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $4(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$3 = *($0 + [4])
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	$7 = [268435455]
	$8 = (*($0 + [8]) - $4)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$7 = int_32($8 >> [3])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL _Znwj(($7 << [4]))
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $109($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($5 = ($6 + ($5 << [4])))) = *($1)
	*($5 + [8]) = *($2)
	$3 = ($3 - $4)
	$1 = ($5 - $3)
	$7 = ($6 + ($7 << [4]))
	$5 = ($5 + [16])
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $4, $3)
	$4 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $7
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [192])
	$global$0 = $6
	$7 = CALL current_time()
	*((($6 + [96]) + [28])) = (int_64)0
	*(($8 = ($6 + [140]))) = (int_64)0
	*(($6 + [148])) = (int_64)0
	*($6 + [108]) = [0]
	*($6 + [112]) = [0]
	*($6 + [132 align=4]) = (int_64)0
	*($6 + [116 align=4]) = (int_64)1
	*($6 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*(($6 + [80])) = (int_64)0
	*(($9 = ($6 + [88]))) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [64]) = (int_64)-4157529991795441664
	*($6 + [56]) = *($0)
	*($6) = (int_64)3617214756542218240
	CALL $1(($6 + [72]), $0, $6)
	*($6 + [8]) = $2
	*($6) = $1
	*($6 + [16]) = $3
	*($6 + [24]) = $4
	*($6 + [32]) = $5
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = [0]
	CALL $2(($6 + [40]), [40])
	$10 = *($6 + [44])
	$11 = *($6 + [40])
	*($6 + [164]) = $11
	*($6 + [160]) = $11
	*($6 + [168]) = $10
	*($6 + [176]) = ($6 + [160])
	*($6 + [184]) = $6
	CALL $21(($6 + [184]), ($6 + [176]))
	$10 = *($6 + [84])
	if ( ($10 == 0) ){ goto $label$1 }
	*($9) = $10
	CALL _ZdlPv($10)
	*(($6 + [92])) = [0]
	*((($6 + [56]) + [28])) = (int_64)0
	
.LABEL $label$1
	*((($6 + [56]) + [28])) = *($6 + [40])
	*((($6 + [56]) + [36])) = *(($6 + [48]))
	$10 = *((($6 + [96]) + [40]))
	if ( ((uint_32)$10 >= (uint_32)*($8)) ){ goto $label$3 }
	CALL $22($10, ($6 + [56]))
	*(($10 = (($6 + [96]) + [40]))) = (*($10) + [40])
	goto $label$2 
	
.LABEL $label$3
	CALL $23((($6 + [96]) + [36]), ($6 + [56]))
	
.LABEL $label$2
	*($6 + [8]) = (int_64)0
	$5 = *($0)
	*($6) = ((int_64)((int_64)((int_64)$2 + (int_64)$1) + (int_64)$5) + (int_64)$5)
	CALL $24(($6 + [96]), $6, $5, [0])
	$0 = *(($6 + [84]))
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = *(($6 + [72]))
	if ( ($0 == 0) ){ goto $label$5 }
	*(($6 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$5
	CALL $25(($6 + [96]))
	$global$0 = ($6 + [192])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [448])
	$global$0 = $4
	*($4 + [352]) = $2
	*($4 + [360]) = $1
	*($4 + [344]) = $3
	CALL eosio_assert((uint_64)($3 <= (int_64)10), [8463])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$5 = [0]
	$6 = *([0] + [9940])
	
.LOOP $label$6:
	*((($4 + [80]) + ($7 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$5 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($4 + [376])) = [0]
	*($4 + [368]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($4 + [368]) = ($5 << [1])
	$6 = (($4 + [368]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($4 + [376])) = [0]
	*($4 + [368]) = (int_64)0
	*($4 + [368]) = [0]
	$7 = (($4 + [368]) | [1])
	$5 = $7
	goto $label$1 
	
.LABEL $label$3
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($4 + [368]) = ($8 | [1])
	*($4 + [376]) = $6
	*($4 + [372]) = $5
	
.LABEL $label$2
	$8 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$7:
	*(($6 + $7)) = *((($4 + [80]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	$5 = ($6 + $5)
	$7 = (($4 + [368]) | [1])
	
.LABEL $label$1
	*($5) = [0]
	*($4 + [48]) = ( *($4 + [376]) ? $7 : (*($4 + [368]) & [1]) )
	$6 = CALL $116(($4 + [80]), [8507], ($4 + [48]))
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [376])))
	
.LABEL $label$8
	if ( ((int_64)*($4 + [344]) != (int_64)9999) ){ goto $label$9 }
	$1 = *($4 + [360])
	$7 = CALL tapos_block_prefix()
	$5 = CALL tapos_block_num()
	$7 = ($0 + [120])
	*($4 + [416]) = ((int_64)((int_64))($1 - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$5 * (int_32)$7))) + (int_64)*($7))
	CALL sha256(($4 + [416]), [4], ($4 + [368]))
	$1 = *($4 + [368])
	*($7) = $1
	*($4 + [344]) = ((uint_64)$1 % (uint_64)(int_64)10)
	
.LABEL $label$9
	*(($4 + [72])) = [0]
	*($4 + [64]) = (int_64)0
	$7 = CALL $122([8524])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$15 }
	*($4 + [64]) = ($7 << [1])
	$5 = (($4 + [64]) | [1])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$8 = (($7 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($4 + [64]) = ($8 | [1])
	*($4 + [72]) = $5
	*($4 + [68]) = $7
	
.LABEL $label$14
	CALL memcpy($5, [8524], $7)
	
.LABEL $label$13
	*(($5 + $7)) = [0]
	*($4 + [32]) = *($4 + [344])
	$7 = CALL $116((($4 + [80]) + $6), [8525], ($4 + [32]))
	$1 = *($4 + [360])
	$5 = CALL tapos_block_prefix()
	$8 = CALL tapos_block_num()
	$5 = ($0 + [120])
	*($4 + [416]) = ((int_64)((int_64))($1 - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$8 * (int_32)$5))) + (int_64)*($5))
	CALL sha256(($4 + [416]), [4], ($4 + [368]))
	*($5) = *($4 + [368])
	$1 = *($5)
	*(($5 = ($0 + [136]))) = ((int_64)$1 + (int_64)1)
	*($4 + [56]) = $1
	*($4 + [16]) = $1
	$7 = ($7 + $6)
	$5 = CALL $116((($4 + [80]) + $7), [8541], ($4 + [16]))
	*($4) = *($4 + [352])
	CALL $116((($4 + [80]) + ($5 + $7)), [8562], $4)
	$1 = *($0)
	*($4 + [372]) = ($4 + [360])
	*($4 + [368]) = ($4 + [56])
	*($4 + [376]) = ($4 + [352])
	*($4 + [380]) = ($4 + [344])
	*($4 + [440]) = $1
	$6 = ($0 + [32])
	if ( ((int_64)*($0 + [32]) == (int_64)CALL current_receiver()) ){ goto $label$16 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$16
	*($4 + [416]) = $6
	*($4 + [420]) = ($4 + [368])
	*($4 + [424]) = ($4 + [440])
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*(($7 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = (int_64)0
	*($7 + [64]) = (int_64)0
	*($5 + [48]) = $7
	*($5 + [60]) = $6
	$7 = ($7 + [72])
	*($5 + [52]) = $7
	*($5 + [56]) = $7
	CALL $16(($4 + [416]), $5)
	*($4 + [432]) = $5
	$1 = *($5)
	*($4 + [416]) = $1
	$6 = *($5 + [64])
	*($4 + [412]) = $6
	$8 = ($0 + [60])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$17 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($4 + [432]) = [0]
	*($7) = $5
	*($8) = ($7 + [24])
	$7 = *($4 + [432])
	*($4 + [432]) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$17
	CALL $17(($0 + [56]), ($4 + [432]), ($4 + [416]), ($4 + [412]))
	$7 = *($4 + [432])
	*($4 + [432]) = [0]
	if ( $7 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $101(($4 + [64]))
	
.LABEL $label$11
	$5 = *($7 + [48])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($7 + [52])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$9 = ($0 + [184])
	$1 = *($4 + [360])
	$5 = *(($0 + [212]))
	$8 = *(($0 + [208]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$24:
	$7 = ($5 + [-24])
	$6 = *($7)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$23 }
	$5 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$22 }
	if ( ((int_32)*($6 + [16]) == (int_32)$9) ){ goto $label$21 }
	CALL eosio_assert([0], [9628])
	goto $label$21 
	
.LABEL $label$22
	$7 = CALL db_find_i64(*($9), *(($0 + [192])), (int_64)-3020380634279804928, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	$6 = CALL $18($9, $7)
	if ( ((int_32)*($6 + [16]) == (int_32)$9) ){ goto $label$21 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$21
	$1 = *($0)
	*($4 + [368]) = ($4 + [352])
	CALL $19($9, $6, $1, ($4 + [368]))
	goto $label$19 
	
.LABEL $label$20
	$3 = *($0)
	if ( ((int_64)*(($0 + [184])) == (int_64)CALL current_receiver()) ){ goto $label$25 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$25
	*(($7 = CALL _Znwj([32])) + [16]) = $9
	*($7) = *($4 + [360])
	*($7 + [8]) = *($4 + [352])
	CALL memcpy(($4 + [368]), $7, [8])
	$5 = ($7 + [8])
	CALL memcpy((($4 + [368]) | [8]), $5, [8])
	$1 = *($7)
	$6 = ($0 + [192])
	*($7 + [20]) = CALL db_store_i64(*($6), (int_64)-3020380634279804928, $3, $1, ($4 + [368]), [16])
	$8 = ($0 + [200])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$26 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	$1 = *($6)
	$2 = *($7)
	*($4 + [416]) = *($5)
	*($7 + [24]) = CALL db_idx64_store($1, (int_64)-3020380634279804928, $3, $2, ($4 + [416]))
	*($4 + [416]) = $7
	$1 = *($7)
	*($4 + [368]) = $1
	$6 = *(($7 + [20]))
	*($4 + [440]) = $6
	$8 = ($0 + [212])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [216]))) ){ goto $label$28 }
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($4 + [416]) = [0]
	*($5) = $7
	*($8) = ($5 + [24])
	$7 = *($4 + [416])
	*($4 + [416]) = [0]
	if ( $7 ){ goto $label$27 }
	goto $label$19 
	
.LABEL $label$28
	CALL $20(($0 + [208]), ($4 + [416]), ($4 + [368]), ($4 + [440]))
	$7 = *($4 + [416])
	*($4 + [416]) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	
.LABEL $label$27
	CALL _ZdlPv($7)
	
.LABEL $label$19
	CALL prints(($4 + [80]))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($4 + [72]))
	
.LABEL $label$29
	$global$0 = ($4 + [448])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($4 + [8])
	*($1 + [16]) = *($5)
	*($1 + [32]) = *(*($4 + [12]))
	$6 = *($5)
	*($1 + [40]) = (int_64)0
	*($1 + [24]) = $6
	$8 = *($1 + [48])
	$7 = *(($1 + [52]))
	$9 = ($7 - $8)
	$6 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$5 = *($0)
	$4 = [48]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$4 = (($9 & [-8]) + $4)
	
.LABEL $label$2
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $125($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $82($3, $1)
	$6 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)-3922893626312491008, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $128($2)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10189])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6150061881978519552)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10135])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10135])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [104]) = $1
	$6 = ((int_64)$3 + (int_64)4611686018427387903)
	if ( (uint_64)($6 <= (int_64)9223372036854775807) ){ goto $label$1 }
	CALL eosio_assert([0], [9707])
	
.LABEL $label$1
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $8
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$1 = $8
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$8 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (uint_64)($6 <= (int_64)9223372036854775807) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [9756])
	if ( (uint_64)($6 <= (int_64)9223372036854775807) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9707])
	
.LABEL $label$2
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$1 = $8
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$1 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$13 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [9756])
	
.LABEL $label$9
	*((($5 + [64]) + [24])) = (int_64)0
	*((($5 + [64]) + [32])) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [64]) = (int_64)6138663591592764928
	*($5 + [72]) = (int_64)-3617168760277827584
	*($5) = (int_64)3617214756542218240
	CALL $1(($5 + [80]), ($5 + [104]), $5)
	$1 = *($5 + [104])
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [16]) = $3
	$7 = CALL $102(($5 + [32]), $4)
	*($5 + [56]) = [0]
	*($5 + [48]) = (int_64)0
	$7 = *($7)
	$9 = ( *(($5 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [32])
	$1 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$14:
	$7 = ($7 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$14 }
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $2(($5 + [48]), $7)
	$9 = *($5 + [52])
	$7 = *($5 + [48])
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	$7 = [0]
	
.LABEL $label$15
	*($5 + [116]) = $7
	*($5 + [112]) = $7
	*($5 + [120]) = $9
	*($5 + [128]) = ($5 + [112])
	*($5 + [136]) = $5
	CALL $5(($5 + [136]), ($5 + [128]))
	$7 = *($5 + [92])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($5 + [96])) = $7
	CALL _ZdlPv($7)
	*(($5 + [100])) = [0]
	*(($5 + [92])) = (int_64)0
	
.LABEL $label$17
	*(($7 = ($5 + [92]))) = *($5 + [48])
	$9 = ($5 + [56])
	$10 = *($9)
	*($9) = [0]
	*(($5 + [100])) = $10
	*($5 + [48]) = (int_64)0
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$18
	CALL $3(($5 + [64]))
	$7 = *($7)
	if ( ($7 == 0) ){ goto $label$19 }
	*(($5 + [96])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *(($5 + [80]))
	if ( ($7 == 0) ){ goto $label$20 }
	*(($5 + [84])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$global$0 = ($5 + [144])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [32])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$1 = ($1 + [40])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($3, $1, [8])
	*($2) = (*($2) + [8])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [9776])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9679])
	
.LABEL $label$5
	$2 = CALL $125($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $128($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10500])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10546])
	
.LABEL $label$2
	$6 = ($1 + [8])
	$7 = *($6)
	*($5 + [8]) = $7
	*($6) = ((int_64)$7 + (int_64)*(*($3)))
	$7 = *($1)
	$3 = $4
	$4 = ($3 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	CALL memcpy(($3 + [-8]), $6, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [24]) = *($6)
	if ( (CALL $121(($5 + [8]), ($5 + [24]), [8]) == 0) ){ goto $label$4 }
	$6 = ($1 + [24])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380634279804928, ($5 + [16]), $7)
	*($6) = $1
	
.LABEL $label$5
	CALL db_idx64_update($1, $2, ($5 + [24]))
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = ($0 + [304])
	$6 = *(($0 + [320]))
	if ( ((int_64)$6 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$6 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *(($0 + [312])), (int_64)-6150061881978519552, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $9($5, $7)
	*($4 + [4]) = [0]
	*($4) = $5
	$6 = *(*(CALL $10($4) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	*(($0 + [320])) = $6
	if ( (uint_64)($6 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10083])
	$6 = *(($0 + [320]))
	goto $label$1 
	
.LABEL $label$2
	*(($0 + [320])) = (int_64)0
	
.LABEL $label$1
	$8 = *($0)
	if ( ((int_64)*(($0 + [304])) == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$5
	*(($7 = CALL _Znwj([64])) + [48]) = $5
	*($7) = $6
	$6 = CALL current_time()
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($7 + [32]) = $3
	*($7 + [24]) = $2
	*($7 + [40]) = (int_64)-6084070135042894464
	*($4 + [64]) = ($4 + [48])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $12(($4 + [56]), $7)
	$6 = *($7)
	$5 = ($0 + [312])
	*($7 + [52]) = CALL db_store_i64(*($5), (int_64)-6150061881978519552, $8, $6, $4, [48])
	$9 = ($0 + [320])
	if ( (uint_64)($6 <= *($9)) ){ goto $label$6 }
	*($9) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *($5)
	$1 = *($7)
	*($4 + [72]) = *(($7 + [8]))
	*($7 + [56]) = CALL db_idx64_store($6, (int_64)-6150061881978519552, $8, $1, ($4 + [72]))
	*($4 + [56]) = $7
	$6 = *($7)
	*($4) = $6
	$9 = *(($7 + [52]))
	*($4 + [72]) = $9
	$10 = ($0 + [332])
	$5 = *($10)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [336]))) ){ goto $label$9 }
	*($5 + [8]) = $6
	*($5 + [16]) = $9
	*($4 + [56]) = [0]
	*($5) = $7
	*($10) = ($5 + [24])
	$7 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $13(($0 + [328]), ($4 + [56]), $4, ($4 + [72]))
	$7 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [9564])
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$17 }
	if ( ((int_64)$2 > (int_64)-4997502812222508545) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-5001342327772413953) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-5918507683732111360) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-5918507414138650624) ){ goto $label$2 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [1]
	*($3 + [56]) = *($3 + [192])
	CALL $60($1, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)3724085271214424063) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)3626339431742439423) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-2039333636184304128) ){ goto $label$2 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [2]
	*($3 + [48]) = *($3 + [208])
	CALL $61($1, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$16
	if ( ((int_64)$1 == (int_64)-6084070134817483472) ){ goto $label$19 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$18 }
	goto $label$2 
	
.LABEL $label$19
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$18
	*($3 + [204]) = [0]
	*($3 + [200]) = [3]
	*($3) = *($3 + [200])
	CALL $62($0, $1, $3)
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)-4421791123341306481) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4997502812222508544) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4994302320998088704) ){ goto $label$2 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [4]
	*($3 + [8]) = *($3 + [248])
	CALL $63($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$14
	if ( ((int_64)$2 > (int_64)4923678930713251192) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3724085271214424064) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678860026839040) ){ goto $label$2 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [104]) = *($3 + [144])
	CALL $60($1, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-5001342327772413952) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-5001342327771365376) ){ goto $label$2 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [120]) = *($3 + [128])
	CALL $64($1, $1, ($3 + [120]))
	goto $label$2 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)3626339431742439424) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)3626462830867251200) ){ goto $label$2 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [72]) = *($3 + [176])
	CALL $61($1, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4421791123341306480) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4157529991795441664) ){ goto $label$2 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [8]
	*($3 + [40]) = *($3 + [216])
	CALL $65($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4923678930713251193) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4923678980533796864) ){ goto $label$2 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [9]
	*($3 + [80]) = *($3 + [168])
	CALL $60($1, $1, ($3 + [80]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [188]) = [0]
	*($3 + [184]) = [10]
	*($3 + [64]) = *($3 + [184])
	CALL $60($1, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [11]
	*($3 + [88]) = *($3 + [160])
	CALL $61($1, $1, ($3 + [88]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [236]) = [0]
	*($3 + [232]) = [12]
	*($3 + [24]) = *($3 + [232])
	CALL $60($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [156]) = [0]
	*($3 + [152]) = [13]
	*($3 + [96]) = *($3 + [152])
	CALL $60($1, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [140]) = [0]
	*($3 + [136]) = [14]
	*($3 + [112]) = *($3 + [136])
	CALL $66($1, $1, ($3 + [112]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [228]) = [0]
	*($3 + [224]) = [15]
	*($3 + [32]) = *($3 + [224])
	CALL $65($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [244]) = [0]
	*($3 + [240]) = [16]
	*($3 + [16]) = *($3 + [240])
	CALL $60($1, $1, ($3 + [16]))
	
.LABEL $label$2
	CALL $111([0])
	$global$0 = ($3 + [256])
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [24])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3020380634279804928, $1, *($2))
	*(*(($0 + [4])) + [24]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10031])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)-3020380634279804928)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	CALL eosio_assert([0], [9977])
	
.LABEL $label$4
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9977])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$8:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$7 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	if ( ((int_32)*($8 + [16]) == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert([0], [9628])
	goto $label$5 
	
.LABEL $label$6
	$8 = CALL $18($6, CALL $fimport$1(*($6), *($6 + [8]), (int_64)-3020380634279804928, $5))
	if ( ((int_32)*($8 + [16]) == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$5
	*(($0 + [4])) = $8
	*(($8 + [24])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL prints([9346])
	*($1 + [56]) = ($0 + [184])
	$2 = *($0 + [112])
	*(($1 + [40])) = [0]
	*(($1 + [48])) = [0]
	*($1 + [36]) = ($1 + [56])
	*($1 + [44]) = ($1 + [56])
	*($1 + [64]) = (int_64)0
	CALL $49(($1 + [16]), ($1 + [56]), ($1 + [64]))
	$3 = *($1 + [20])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ((uint_64)$2 / (uint_64)(int_64)100)
	$5 = ((uint_64)$2 / (uint_64)(int_64)5)
	$6 = ((float_64)(CASTING float_64)(uint_64 $2) * (float_64)(float_64)0.0055)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$3 }
	$7 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$7 = (Rounds 0)($6)
	
.LABEL $label$2
	$8 = ($1 + [44])
	$9 = ($1 | [1])
	$10 = (($1 + [64]) | [1])
	$11 = (($1 + [16]) | [1])
	$12 = (($1 + [32]) + [12])
	$13 = (($1 + [16]) + [8])
	$14 = (($1 + [32]) + [16])
	$15 = (int_64)0
	
.LOOP $label$4:
	*($1 + [64]) = *($12)
	$16 = *(CALL $50(($1 + [64])) + [4])
	if ( ((int_64)$15 == (int_64)0) ){ goto $label$11 }
	CALL prints([9264])
	$17 = ((int_64)$15 + (int_64)1)
	$2 = *($16)
	if ( ((uint_64)((int_64)$15 + (int_64)-1) >= (uint_64)(int_64)9) ){ goto $label$10 }
	$15 = $17
	$17 = $4
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$15 = (int_64)1
	$17 = $5
	$2 = *($16)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$18 = ((int_64)$15 + (int_64)-10)
	$15 = $17
	$17 = $7
	if ( ((uint_64)$18 > (uint_64)(int_64)19) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$8 }
	
.LABEL $label$9
	$19 = [0]
	$20 = *([0] + [9940])
	
.LOOP $label$13:
	*((($1 + [64]) + ($0 = $19))) = *(($20 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$19 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$12 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*($13) = [0]
	*($1 + [16]) = (int_64)0
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$7 }
	*($1 + [16]) = ($19 << [1])
	$20 = $11
	goto $label$6 
	
.LABEL $label$8
	*($13) = [0]
	*($1 + [16]) = (int_64)0
	*($1 + [16]) = [0]
	$0 = $11
	goto $label$5 
	
.LABEL $label$7
	$21 = (($19 + [16]) & [-16])
	$20 = CALL _Znwj($21)
	*($13) = $20
	*($1 + [16]) = ($21 | [1])
	*($1 + [20]) = $19
	
.LABEL $label$6
	$21 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$14:
	*(($20 + $0)) = *((($1 + [64]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$21 != (int_32)$0) ){ goto $label$14 }
	$0 = ($20 + $19)
	
.LABEL $label$5
	*($0) = [0]
	$0 = *($13)
	$19 = *($1 + [16])
	CALL $108(($1 + [64]), *($16 + [8]))
	CALL $108($1, $17)
	CALL prints([9267])
	CALL prints(( $0 ? $11 : ($19 & [1]) ))
	CALL prints([8585])
	CALL prints([9278])
	$0 = *($1 + [64])
	$19 = ($0 & [1])
	$20 = (($1 + [64]) + [8])
	CALL prints_l(( *($20) ? $10 : $19 ), ( *($1 + [68]) ? uint_32($0 >> [1]) : $19 ))
	CALL prints([8585])
	CALL prints([9291])
	$0 = *($1)
	$19 = ($0 & [1])
	$21 = ($1 + [8])
	CALL prints_l(( *($21) ? $9 : $19 ), ( *($1 + [4]) ? uint_32($0 >> [1]) : $19 ))
	CALL prints([9206])
	if ( (*($1) & [1]) ){ goto $label$19 }
	if ( (*($1 + [64]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*($21))
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($20))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( (*($1 + [16]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $50($8)
	if ( ((int_32)*($14) != (int_32)$3) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$15
	CALL _ZdlPv(*($13))
	CALL $50($8)
	if ( ((int_32)*($14) != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$1
	CALL prints([9375])
	$global$0 = ($1 + [80])
}

void .FUNC $52 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [264])
	$5 = *(($0 + [292]))
	$4 = *(($0 + [288]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [8]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [272])), (int_64)-2063328927043518464, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	if ( ((int_32)*(CALL $33($3, $6) + [8]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$2
	$8 = *($0)
	if ( ((int_64)*(($0 + [264])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$6
	*(($6 = CALL _Znwj([24])) + [8]) = $3
	*($6) = (int_64)0
	CALL memcpy(($2 + [16]), $6, [8])
	$1 = *($6)
	$4 = CALL db_store_i64(*(($0 + [272])), (int_64)-2063328927043518464, $8, $1, ($2 + [16]), [8])
	*($6 + [12]) = $4
	$5 = ($0 + [280])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $4
	$7 = ($0 + [292])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [296]))) ){ goto $label$9 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($2 + [8]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $53(($0 + [288]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [264])
	$5 = *(($0 + [292]))
	$4 = *(($0 + [288]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [8]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [272])), (int_64)-2063328927043518464, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $33($3, $6)
	if ( ((int_32)*($7 + [8]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$2
	$6 = CALL db_next_i64(*($7 + [12]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $33($3, $6)
	
.LABEL $label$6
	CALL $34($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10352])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10397])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10447])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $56 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = ($0 + [304])
	$5 = *(($0 + [332]))
	$4 = *(($0 + [328]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [48]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9628])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [312])), (int_64)-6150061881978519552, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $9($3, $6)
	if ( ((int_32)*($7 + [48]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9476])
	$1 = *($7 + [24])
	$8 = *($7 + [8])
	*($2 + [8]) = $8
	*($2) = $1
	CALL $116(($2 + [32]), [9511], $2)
	if ( $7 ){ goto $label$5 }
	CALL eosio_assert([0], [10288])
	CALL eosio_assert([0], [10322])
	
.LABEL $label$5
	$6 = CALL db_next_i64(*($7 + [52]), ($2 + [104]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $9($3, $6)
	
.LABEL $label$6
	CALL $31($3, $7)
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$1 = *($7 + [32])
	$9 = *($0)
	$6 = CALL $122(($2 + [32]))
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2 + [16]) = ($7 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [32]), $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	CALL $11($6, $9, $8, $1, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$11
	$global$0 = ($2 + [112])
	return (unreachable)
	
.LABEL $label$7
	CALL $101(($2 + [16]))
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [304]), *(($0 + [312])), (int_64)-6150061881978519552, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [304])
	$2 = CALL $9($3, $2)
	
.LOOP $label$2:
	$0 = [0]
	$4 = CALL db_next_i64(*($2 + [52]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $9($3, $4)
	
.LABEL $label$3
	CALL $31($3, $2)
	$2 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $113([18], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10352])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10397])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10447])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
	$9 = *(($1 + [24]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380634279804928, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_64 .FUNC $112 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [17] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $115($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $115($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19104]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $110 ()
{
	return [10688]
}

void .FUNC $111 (int_32 $0)
{
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $113([18], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9679])
	
.LABEL $label$5
	$2 = CALL $125($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $128($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10352])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10397])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10447])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = *($5 + [48])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [52])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$2 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	$7 = *($8 + [48])
	if ( ($7 == 0) ){ goto $label$16 }
	*(($8 + [52])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $2
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [112])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0 + [304]), *(($0 + [312])), (int_64)-6150061881978519552, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = ($0 + [304])
	$2 = CALL $9($3, $2)
	$4 = (($1 + [16]) | [1])
	$5 = ($1 + [24])
	
.LOOP $label$3:
	$6 = *($2 + [8])
	*($1) = *($2 + [24])
	CALL $116(($1 + [32]), [9433], $1)
	*($5) = [0]
	*($1 + [16]) = (int_64)0
	$7 = *($2 + [32])
	$8 = *($0)
	$9 = CALL $122(($1 + [32]))
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$6 }
	*($1 + [16]) = ($9 << [1])
	$10 = $4
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$11 = (($9 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5) = $10
	*($1 + [16]) = ($11 | [1])
	*($1 + [20]) = $9
	
.LABEL $label$5
	CALL memcpy($10, ($1 + [32]), $9)
	
.LABEL $label$4
	*(($10 + $9)) = [0]
	CALL $11($1, $8, $6, $7, ($1 + [16]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$7
	if ( $2 ){ goto $label$8 }
	CALL eosio_assert([0], [10288])
	CALL eosio_assert([0], [10322])
	
.LABEL $label$8
	$9 = [0]
	$10 = CALL db_next_i64(*($2 + [52]), ($1 + [104]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $9($3, $10)
	
.LABEL $label$9
	CALL $31($3, $2)
	$2 = $9
	if ( $9 ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($1 + [112])
	return (unreachable)
	
.LABEL $label$1
	CALL $101(($1 + [16]))
}

void .FUNC $107 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $105(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $118(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8458], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $105(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $105(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($3 + [32])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$3 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $22($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $109(($0 + [16]))
	
.LABEL $label$1
	CALL $109(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $39(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $2($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $40(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth($1)
	CALL prints([8362])
	*(($0 + [120])) = $2
	*($0 + [112]) = (int_64)0
	$4 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-3922893626312491008, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($0 + [32])
	$6 = CALL $7($5, $4)
	
.LOOP $label$2:
	$4 = [0]
	$7 = CALL db_next_i64(*($6 + [64]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $7($5, $7)
	
.LABEL $label$3
	CALL $28($5, $6)
	$6 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($0 + [224]), *(($0 + [232])), (int_64)-5001621371259715584, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = ($0 + [224])
	$6 = CALL $29($5, $4)
	
.LOOP $label$5:
	$4 = [0]
	$7 = CALL db_next_i64(*($6 + [20]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $29($5, $7)
	
.LABEL $label$6
	CALL $30($5, $6)
	$6 = $4
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = CALL db_lowerbound_i64(*($0 + [304]), *(($0 + [312])), (int_64)-6150061881978519552, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$5 = ($0 + [304])
	$6 = CALL $9($5, $4)
	
.LOOP $label$8:
	$4 = [0]
	$7 = CALL db_next_i64(*($6 + [52]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $9($5, $7)
	
.LABEL $label$9
	CALL $31($5, $6)
	$6 = $4
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$7
	CALL $32($0)
	$4 = CALL db_lowerbound_i64(*($0 + [264]), *(($0 + [272])), (int_64)-2063328927043518464, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$5 = ($0 + [264])
	$6 = CALL $33($5, $4)
	
.LOOP $label$11:
	$4 = [0]
	$7 = CALL db_next_i64(*($6 + [12]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $33($5, $7)
	
.LABEL $label$12
	CALL $34($5, $6)
	$6 = $4
	if ( $4 ){ goto $label$11 }
	
.LABEL $label$10
	CALL prints([8410])
	$global$0 = ($3 + [16])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [120]) = $1
	if ( (uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$1 }
	CALL eosio_assert([0], [9707])
	
.LABEL $label$1
	$1 = (int_64)5134159
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$6 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9756])
	
.LABEL $label$2
	*((($5 + [80]) + [24])) = (int_64)0
	*((($5 + [80]) + [32])) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [80]) = (int_64)-6084070134817483472
	*($5 + [88]) = (int_64)-3617168760277827584
	*($5 + [16]) = (int_64)3617214756542218240
	CALL $1(($5 + [96]), ($5 + [120]), ($5 + [16]))
	$8 = CALL $102($5, $4)
	*((($5 + [16]) + [24])) = (int_64)1314344708
	$6 = *(($5 + [8]))
	$1 = *($5)
	*($8) = (int_64)0
	*($8 + [8]) = [0]
	*(($5 + [56])) = $6
	*($5 + [48]) = $1
	*($5 + [24]) = $2
	*($5 + [32]) = $3
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [16]) = *($5 + [120])
	$6 = *($5 + [48])
	$9 = ( *(($5 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($9 + [32])
	$1 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$7 }
	if ( ($6 == 0) ){ goto $label$9 }
	CALL $2(($5 + [64]), $6)
	$9 = *($5 + [68])
	$6 = *($5 + [64])
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	$6 = [0]
	
.LABEL $label$8
	*($5 + [132]) = $6
	*($5 + [128]) = $6
	*($5 + [136]) = $9
	*($5 + [144]) = ($5 + [128])
	*($5 + [152]) = ($5 + [16])
	CALL $5(($5 + [152]), ($5 + [144]))
	$6 = *($5 + [108])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($5 + [112])) = $6
	CALL _ZdlPv($6)
	*(($5 + [116])) = [0]
	*(($5 + [108])) = (int_64)0
	
.LABEL $label$10
	*(($5 + [108])) = *($5 + [64])
	$6 = ($5 + [72])
	$9 = *($6)
	*($6) = [0]
	*(($5 + [116])) = $9
	*($5 + [64]) = (int_64)0
	if ( ((*(($5 + [48])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$11
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$12
	CALL $3(($5 + [80]))
	$6 = *(($5 + [108]))
	if ( ($6 == 0) ){ goto $label$13 }
	*(($5 + [112])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$6 = *(($5 + [96]))
	if ( ($6 == 0) ){ goto $label$14 }
	*(($5 + [100])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$global$0 = ($5 + [160])
}

void .FUNC $109 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9702])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9702])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9702])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9702])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($3 + [32])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	$3 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $85(($0 + [72]), ($0 + [112]), *($0))
	$1 = *(($0 + [328]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [332])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [328]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [288]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [292])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [288]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [252])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [248]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [212])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [208]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$2 = *(($0 + [56]))
	if ( ($2 == 0) ){ goto $label$26 }
	$5 = ($0 + [60])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	$1 = *($4 + [48])
	if ( ($1 == 0) ){ goto $label$31 }
	*(($4 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$31
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [56]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $2
	
.LABEL $label$27
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

void .FUNC $108 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $105(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $118(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8502], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $105(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $105(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [440]) = ($4 + [384])
	*($4 + [40]) = ($4 + [400])
	CALL $69(($4 + [40]), ($4 + [440]))
	$3 = *($4 + [392])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [384])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [432])
	$1 = *($4 + [424])
	$8 = *($4 + [416])
	$10 = *($4 + [408])
	$11 = *($4 + [400])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	CALL $68($9)
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	CALL memcpy(($4 + [376]), $2, [8])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $67(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [376])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $128($2)
	
.LABEL $label$7
	CALL $68($8)
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	$2 = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = (int_64)0
	*(($6 = ($0 + [120]))) = (int_64)0
	*(($7 = ($0 + [128]))) = (int_64)0
	*(($8 = ($0 + [136]))) = (int_64)0
	*(($9 = ($0 + [144]))) = (int_64)0
	*(($10 = ($0 + [152]))) = (int_64)0
	*(($11 = ($0 + [160]))) = (int_64)0
	*(($12 = ($0 + [176]))) = (int_64)0
	*(($13 = ($0 + [168]))) = (int_64)0
	*($0 + [184]) = $1
	*(($0 + [192])) = $1
	*(($0 + [200])) = (int_64)-1
	*(($0 + [208])) = (int_64)0
	*(($0 + [216])) = [0]
	*(($0 + [220])) = [0]
	*($0 + [224]) = $1
	*(($0 + [232])) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = [0]
	*($0 + [264]) = $1
	*(($0 + [272])) = $1
	*(($0 + [280])) = (int_64)-1
	*(($0 + [288])) = [0]
	*($0 + [304]) = $1
	*(($0 + [292])) = (int_64)0
	*(($0 + [312])) = $1
	*(($0 + [320])) = (int_64)-1
	*(($0 + [328])) = (int_64)0
	*(($0 + [336])) = [0]
	*(($0 + [340])) = [0]
	$14 = (int_64)0
	$15 = (int_64)0
	$16 = (int_64)0
	$17 = (int_64)0
	$18 = (int_64)0
	$19 = (int_64)0
	$20 = (int_64)0
	$21 = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)-4157493844276936704, (int_64)-4157493844276936704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$5 = ($0 + [72])
	if ( ((int_32)*(CALL $84($5, $3) + [72]) == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$3
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$5 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [72]) == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$6
	if ( $3 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$3 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-4157493844276936704, (int_64)-4157493844276936704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $84($5, $3)
	if ( ((int_32)*($3 + [72]) == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$4
	$2 = *($3 + [64])
	$14 = *($3 + [56])
	$15 = *($3 + [48])
	$16 = *($3 + [40])
	$17 = *($3 + [32])
	$18 = *($3 + [24])
	$19 = *($3 + [16])
	$20 = *($3 + [8])
	$21 = *($3)
	
.LABEL $label$2
	*($6) = $20
	*(($0 + [112])) = $21
	*($7) = $19
	*($8) = $18
	*($9) = $17
	*($10) = $16
	*($11) = $15
	*($13) = $14
	*($12) = $2
	$global$0 = ($4 + [32])
	return $0
	
.LABEL $label$1
	CALL eosio_assert([0], [10656])
	return (unreachable)
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [424]) = ($4 + [384])
	*($4 + [40]) = ($4 + [400])
	CALL $72(($4 + [40]), ($4 + [424]))
	$3 = *($4 + [392])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [384])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [416])
	$1 = *($4 + [408])
	$8 = *($4 + [400])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	CALL $68($9)
	$global$0 = ($4 + [432])
	return [1]
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	CALL memcpy(($4 + [376]), $2, [8])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $67(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [376])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $128($2)
	
.LABEL $label$7
	CALL $68($8)
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [392]) = (int_64)0
	*($4 + [384]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [384]) + [8])
	CALL memcpy(($4 + [384]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*((($4 + [8]) + [8])) = $3
	*($4 + [24]) = $2
	*($4 + [28]) = ($2 + [16])
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *((($4 + [384]) + [8]))
	$1 = *($4 + [384])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $128($2)
	
.LABEL $label$8
	CALL $68($8)
	$global$0 = ($4 + [400])
	return [1]
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [456]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [432])) = (int_64)0
	*(($4 + [448])) = [0]
	*($4 + [416]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [396]) = $2
	*($4 + [392]) = $2
	*($4 + [400]) = ($2 + $5)
	*($4 + [24]) = ($4 + [392])
	*($4 + [48]) = ($4 + [408])
	CALL $70(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [400])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [392])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $67(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [456])
	CALL $71(($4 + [24]), ($4 + [408]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $128($2)
	
.LABEL $label$4
	CALL $68($3)
	if ( ((*($4 + [440]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [448])))
	
.LABEL $label$5
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $106($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [112])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10237])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([88])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $1
	$5 = CALL memcpy($5, *($3), [72])
	*($4 + [104]) = (($4 + [16]) + [72])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $90(($4 + [96]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157493844276936704, $2, (int_64)-4157493844276936704, ($4 + [16]), [72])
	*($5 + [76]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4157493844276936704) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-4157493844276936703
	
.LABEL $label$2
	*($4 + [96]) = $5
	*($4 + [16]) = (int_64)-4157493844276936704
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-4157493844276936704
	*($3 + [16]) = $6
	*($4 + [96]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $87(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [112])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [72]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10500])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10546])
	
.LABEL $label$2
	$3 = CALL memcpy($1, *($3), [72])
	$4 = $4
	$1 = ($4 + [-80])
	$global$0 = $1
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = ($4 + [-8])
	CALL $90($5, $3)
	CALL db_update_i64(*($3 + [76]), $2, $1, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4157493844276936704) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-4157493844276936703
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9702])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [24])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [32])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [40])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [48])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [56])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [64])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$8
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$1 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($1, $3, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [72]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157493844276936704, (int_64)-4157493844276936704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $84($0, $4)
	if ( ((int_32)*($4 + [72]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [9628])
	
.LABEL $label$2
	*($3) = $1
	CALL $88($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $89($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9679])
	
.LABEL $label$5
	$4 = CALL $125($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([88])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	CALL $86(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4157493844276936704
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)-4157493844276936704
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $87(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $128($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$4 = *($7)
	
.LABEL $label$5
	CALL memcpy($4, $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $83($0, ($1 + [48]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [32])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [40])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9776])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9702])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [32])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$1 = ($1 + [40])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($1, $3, [8])
	*($2) = (*($2) + [8])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $109($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9702])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9702])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9702])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9776])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9702])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9702])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9702])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9702])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $91(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $102(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $102(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [9776])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $74($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0 + [264]), *(($0 + [272])), (int_64)-2063328927043518464, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [264])
	$2 = CALL $33($3, $2)
	
.LOOP $label$2:
	$0 = [0]
	$4 = CALL db_next_i64(*($2 + [12]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $33($3, $4)
	
.LABEL $label$3
	CALL $34($3, $2)
	$2 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $79($0, ($1 + [48]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9702])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [32])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9702])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [40])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9702])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10079])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $80($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9702])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [184]), *(($0 + [192])), (int_64)-3020380634279804928, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [184])
	$2 = CALL $18($3, $2)
	
.LOOP $label$2:
	$0 = [0]
	$4 = CALL db_next_i64(*($2 + [20]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $18($3, $4)
	
.LABEL $label$3
	CALL $35($3, $2)
	$2 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9679])
	
.LABEL $label$5
	$2 = CALL $125($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9702])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $128($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10352])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10397])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10447])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10352])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10397])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10447])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$9 = *(($1 + [56]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6150061881978519552, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10696]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10700])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10696]) = [1]
	$2 = ($2 << [16])
	*([0] + [10700]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10700])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10700]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10696]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10696]) = [1]
	$3 = ($3 << [16])
	*([0] + [10700]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10700])
	
.LABEL $label$10
	*([0] + [10700]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}