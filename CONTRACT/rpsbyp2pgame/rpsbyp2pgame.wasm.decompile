(data (i32.const 16936) "`a`:`play`,`p`:`\00")
(data (i32.const 16953) ",`h`:`\00")
(data (i32.const 16960) ",`m`:`\00")
(data (i32.const 16967) "Memo 256 characters exceeded!\00")
(data (i32.const 16997) "{`game`:`\00")
(data (i32.const 17007) "`,`player`:`\00")
(data (i32.const 17020) "`}\00")
(data (i32.const 17024) "Invalid reward amount!\00")
(data (i32.const 17047) "unable to find key\00")
(data (i32.const 17066) "EOS\00")
(data (i32.const 17070) "reward\00")
(data (i32.const 17077) "refund\00")
(data (i32.const 17084) "Pending too much!\00")
(data (i32.const 17102) "commission\00")
(data (i32.const 17113) "RPS\00")
(data (i32.const 17117) "Not involved!\00")
(data (i32.const 17131) "Invalid quantity!\00")
(data (i32.const 17149) "EOS tokens only!\00")
(data (i32.const 17166) "Minimum 0.1 EOS!\00")
(data (i32.const 17183) "Missing hash!\00")
(data (i32.const 17197) "Deleted players, \00")
(data (i32.const 17215) "Deleted games, \00")
(data (i32.const 17231) "Deleted status, \00")
(data (i32.const 17248) "Deleted history, \00")
(data (i32.const 17266) "Cannot play without staking EOS!\00")
(data (i32.const 17299) "Max EOS exceeded!\00")
(data (i32.const 17317) "Not your turn!\00")
(data (i32.const 17332) "Invalid hand!\00")
(data (i32.const 17346) "Cannot reveal yet!\00")
(data (i32.const 17365) "Already revealed!\00")
(data (i32.const 17383) "Cannot claim yet!\00")
(data (i32.const 17401) "Cannot pause!\00")
(data (i32.const 17415) "Player not found!\00")
(data (i32.const 17433) "Game started!\00")
(data (i32.const 17447) "Limit exceeded!\00")
(data (i32.const 17463) "Already requested!\00")
(data (i32.const 17482) "Blocked by player!\00")
(data (i32.const 17501) "Already stopped!\00")
(data (i32.const 17518) "Player stopped!\00")
(data (i32.const 17534) "Cannot stop!\00")
(data (i32.const 17547) "Invalid avatar!\00")
(data (i32.const 17563) "Invalid referrer!\00")
(data (i32.const 17581) "Referrer not found!\00")
(data (i32.const 17601) "Already registered!\00")
(data (i32.const 17621) "Not your game!\00")
(data (i32.const 17636) "\e8D\00\00")
(data (i32.const 17640) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 17673) "string is too long to be a valid symbol_code\00")
(data (i32.const 17718) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17771) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17820) "invalid symbol name\00")
(data (i32.const 17840) "write\00")
(data (i32.const 17846) "string is too long to be a valid name\00")
(data (i32.const 17884) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17951) "character is not in allowed character set for names\00")
(data (i32.const 18003) "unable to find secondary key\00")
(data (i32.const 18032) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 18076) "read\00")
(data (i32.const 18081) "get\00")
(data (i32.const 18085) "object passed to modify is not in multi_index\00")
(data (i32.const 18131) "cannot modify objects in table of another contract\00")
(data (i32.const 18182) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18241) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18292) "error reading iterator\00")
(data (i32.const 18315) "cannot pass end iterator to erase\00")
(data (i32.const 18349) "cannot increment end iterator\00")
(data (i32.const 18379) "object passed to erase is not in multi_index\00")
(data (i32.const 18424) "cannot erase objects in table of another contract\00")
(data (i32.const 18474) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18527) "cannot create objects in table of another contract\00")
(data (i32.const 18578) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18630) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18684) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18732) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "__ashlti3" (func $fimport$1 (param i32 i64 i64 i32)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$11 (param i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$14 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$15 (param i32 i64 i32)))
(import "env" "db_idx128_find_primary" (func $fimport$16 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$17 (param i32 i64 i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$20 (param i32)))
(import "env" "db_idx128_remove" (func $fimport$21 (param i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$22 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$23 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$28 (result i64)))
(import "env" "abort" (func $fimport$29))
(import "env" "memset" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$31 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$32 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$43 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$44 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$45 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$47 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$49 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$50 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$51 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$52 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$53 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$54 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$55 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$56 (param i32 i32 i32)))
(import "env" "sha1" (func $fimport$57 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$58 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$59 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$60 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$61 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $8))
(export "_ZdlPv" (func $107))
(export "_Znwj" (func $105))
(export "_Znaj" (func $106))
(export "_ZdaPv" (func $108))
(export "_ZnwjSt11align_val_t" (func $109))
(export "_ZnajSt11align_val_t" (func $110))
(export "_ZdlPvSt11align_val_t" (func $111))
(export "_ZdaPvSt11align_val_t" (func $112))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $9 $11 $13 $15 $17 $18 $20 $22 $24 $25 $26 $1 $2 $3 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18818))
(global $global$2 i32 (i32.const 18818))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18076])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18076])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [84])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035931840378960896, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [88]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035931840378960897, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [92]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035931840378960898, $4, *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx128_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $33(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [64]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18076])
	CALL memcpy(($2 + [64]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [64])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [64]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18076])
	CALL memcpy(($2 + [64]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [64])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18076])
	CALL memcpy(($2 + [64]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = [16]
	$3 = [0]
	$8 = ($2 + [32])
	$9 = (int_64)0
	
.LOOP $label$2:
	$5 = (($2 + [64]) + $3)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [18032])
	*($8 + [8]) = $9
	*($8) = ((int_64)$6 | (int_64)*($5))
	$4 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$9 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = [16]
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3(($2 + [16]), $6, $9, (($4 << [3]) + [-8]))
	$9 = *(($2 + [24]))
	$6 = *($2 + [16])
	
.LABEL $label$5
	*($8) = $6
	*($8 + [8]) = $9
	
.LABEL $label$4
	*($7) = *($2 + [32])
	*(($7 + [8])) = *($2 + [40])
	*(($7 + [24])) = *((($2 + [32]) + [24]))
	*(($7 + [16])) = *((($2 + [32]) + [16]))
	$7 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18076])
	CALL memcpy(($2 + [64]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [0]
	$8 = ($2 + [32])
	$9 = (int_64)0
	
.LOOP $label$7:
	$5 = (($2 + [64]) + $4)
	if ( ($3 <= [2]) ){ goto $label$8 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$3 == (int_32)[1]), [18032])
	*($8 + [8]) = $9
	*($8) = ((int_64)$6 | (int_64)*($5))
	$3 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$9 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$9 }
	if ( ($3 <= [2]) ){ goto $label$10 }
	CALL __ashlti3($2, $6, $9, (($3 << [3]) + [-8]))
	$9 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$10
	*($8) = $6
	*($8 + [8]) = $9
	
.LABEL $label$9
	*($7) = *($2 + [32])
	*(($7 + [8])) = *($2 + [40])
	*(($7 + [24])) = *((($2 + [32]) + [24]))
	*(($7 + [16])) = *((($2 + [32]) + [16]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18076])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18076])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18076])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [96])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [160])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035937633859534848, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [164]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035937633859534849, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [168]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534850, $4, *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx128_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18076])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18076])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17840])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17840])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18081])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $64($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18076])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18076])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18076])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8532]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8536])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8532]) = [1]
	$2 = ($2 << [16])
	*([0] + [8536]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8536])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8536]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8532]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8532]) = [1]
	$3 = ($3 << [16])
	*([0] + [8536]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8536])
	
.LABEL $label$10
	*([0] + [8536]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $123 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $131($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $117($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $132 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $133 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $125())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $135($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $129(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $136 (int_32 $0)
{
	return CALL $137([8540], $0)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $138($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18732])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $117($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [272])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$9 = ((uint_64)$8 > (uint_64)$6)
	$7 = ($1 + [8])
	$8 = *($7)
	$5 = ($1 + [16])
	$6 = *($5)
	*((($4 + [160]) + [24])) = ( $6 ? $8 : $9 )
	*($4 + [160]) = $8
	*($4 + [168]) = $6
	*($4 + [176]) = ( $8 ? $6 : $9 )
	$6 = *($1)
	*(($1 + ( [128] ? [129] : *(*($3)) ))) = *(*(($3 + [4])))
	*($1 + [144]) = *([0] + [8192])
	CALL eosio_assert([1], [18182])
	*($4 + [152]) = ($4 + [139])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [192]) = ($4 + [144])
	*($4 + [212]) = $7
	*($4 + [208]) = $1
	*($4 + [216]) = $5
	*($4 + [220]) = ($1 + [24])
	*($4 + [224]) = ($1 + [40])
	*($4 + [228]) = ($1 + [64])
	*($4 + [232]) = ($1 + [96])
	*($4 + [236]) = ($1 + [128])
	*($4 + [240]) = ($1 + [129])
	*($4 + [244]) = ($1 + [132])
	*($4 + [248]) = ($1 + [136])
	*($4 + [252]) = ($1 + [140])
	*($4 + [256]) = ($1 + [144])
	*($4 + [260]) = ($1 + [148])
	CALL $73(($4 + [208]), ($4 + [192]))
	CALL db_update_i64(*(($1 + [156])), $2, $4, [139])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = (($4 + [160]) | [8])
	*($4 + [208]) = *($7)
	if ( (CALL $130(($4 + [160]), ($4 + [208]), [8]) == 0) ){ goto $label$2 }
	$7 = *($1 + [160])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($4 + [192]), $6)
	*(($1 + [160])) = $7
	
.LABEL $label$3
	CALL db_idx64_update($7, $2, ($4 + [208]))
	
.LABEL $label$2
	$7 = (($4 + [160]) + [16])
	$5 = ($1 + [16])
	*($4 + [208]) = *($5)
	if ( (CALL $130($3, ($4 + [208]), [8]) == 0) ){ goto $label$4 }
	$9 = ($1 + [164])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($4 + [192]), $6)
	*($9) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, $2, ($4 + [208]))
	
.LABEL $label$4
	$3 = ((uint_64)$10 > (uint_64)$8)
	$10 = *(($1 + [8]))
	$8 = *($5)
	*($4 + [216]) = ( $8 ? $10 : $3 )
	*($4 + [208]) = ( $10 ? $8 : $3 )
	if ( (CALL $130($7, ($4 + [208]), [16]) == 0) ){ goto $label$6 }
	$3 = ($1 + [168])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534850, ($4 + [192]), $6)
	*($3) = $1
	
.LABEL $label$7
	CALL db_idx128_update($1, $2, ($4 + [208]))
	
.LABEL $label$6
	$global$0 = ($4 + [272])
}

void .FUNC $126 (int_32 $0)
{
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $39($0, $1)
	$3 = ($0 + [72])
	$4 = *($1)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$3), [18241])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)7035937633859534848, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $55($3, $1)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$3), [18241])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [18315])
	CALL eosio_assert($1, [18349])
	$1 = CALL db_next_i64(*($7 + [156]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $55($3, $1)
	
.LABEL $label$5
	CALL $56($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$5 = ($1 + [8])
	$6 = *($5)
	*($4 + [48]) = $6
	$7 = ($1 + [16])
	$8 = *($7)
	*($4 + [56]) = $8
	*($5) = *(*($3))
	*($1 + [24]) = [3]
	*($1 + [28]) = *([0] + [8192])
	$9 = ((uint_64)$6 > (uint_64)$8)
	*((($4 + [48]) + [24])) = ( $8 ? $6 : $9 )
	*($7) = *(*($3 + [4]))
	*($4 + [64]) = ( $6 ? $8 : $9 )
	$6 = *($1)
	CALL eosio_assert([1], [18182])
	*($4 + [40]) = ($4 + [29])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [80]) = ($4 + [32])
	*($4 + [100]) = $5
	*($4 + [96]) = $1
	*($4 + [104]) = $7
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [28])
	CALL $81(($4 + [96]), ($4 + [80]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [29])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = (($4 + [48]) | [8])
	*($4 + [96]) = *($5)
	if ( (CALL $130(($4 + [48]), ($4 + [96]), [8]) == 0) ){ goto $label$2 }
	$7 = ($1 + [40])
	$5 = *($7)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945024, ($4 + [80]), $6)
	*($7) = $5
	
.LABEL $label$3
	CALL db_idx64_update($5, $2, ($4 + [96]))
	
.LABEL $label$2
	$5 = (($4 + [48]) + [16])
	$7 = ($1 + [16])
	*($4 + [96]) = *($7)
	if ( (CALL $130($3, ($4 + [96]), [8]) == 0) ){ goto $label$4 }
	$9 = ($1 + [44])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945025, ($4 + [80]), $6)
	*($9) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, $2, ($4 + [96]))
	
.LABEL $label$4
	$3 = ((uint_64)$10 > (uint_64)$8)
	$10 = *(($1 + [8]))
	$8 = *($7)
	*($4 + [104]) = ( $8 ? $10 : $3 )
	*($4 + [96]) = ( $10 ? $8 : $3 )
	if ( (CALL $130($5, ($4 + [96]), [16]) == 0) ){ goto $label$6 }
	$5 = ($1 + [48])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945026, ($4 + [80]), $6)
	*($5) = $1
	
.LABEL $label$7
	CALL db_idx128_update($1, $2, ($4 + [96]))
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

int_32 .FUNC $125 ()
{
	return [8248]
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)7035938067010945026, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [18241])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $57($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)7035938067010945024, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [18241])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	float_64 $9
	float_64 $10
	float_64 $11
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL $35(($0 + [32]), *($1), [17047])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = [0]
	$7 = *($1)
	$6 = ($0 + [72])
	$0 = CALL $55($6, $5)
	if ( ((int_64)*($0 + [8]) != (int_64)$7) ){ goto $label$3 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$26 
	
.LABEL $label$27
	$7 = *($1)
	$0 = CALL $55($6, $0)
	if ( ((int_64)*($0 + [8]) == (int_64)$7) ){ goto $label$14 }
	$8 = [0]
	goto $label$4 
	
.LABEL $label$26
	if ( ((int_64)*($0 + [16]) != (int_64)$7) ){ goto $label$13 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$25
	$4 = ($4 + [1])
	$8 = [1]
	goto $label$4 
	
.LABEL $label$24
	CALL eosio_assert([1], [18349])
	$0 = CALL db_next_i64(*($0 + [156]), ($2 + [8]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$12 }
	$8 = [4]
	goto $label$4 
	
.LABEL $label$23
	$0 = [5]
	$10 = (CASTING float_64)(uint_32 (*($3 + [12]) + *($3 + [8])))
	$1 = *([0] + [8196])
	$9 = (CASTING float_64)(uint_32 *($1))
	if ( ((int_32)((float_64)$9 <= (float_64)$10) ^ (int_32)[1]) ){ goto $label$11 }
	$8 = [5]
	goto $label$4 
	
.LABEL $label$22
	$6 = ((*([0] + [8200]) - $1) & [65535])
	$0 = [0]
	$11 = $9
	$8 = [6]
	goto $label$4 
	
.LABEL $label$21
	$0 = ($0 + [1])
	$1 = ($0 & [65535])
	if ( ((uint_32)$6 <= (uint_32)$1) ){ goto $label$7 }
	$8 = [12]
	goto $label$4 
	
.LABEL $label$20
	$9 = (CASTING float_64)(uint_32 *((*([0] + [8196]) + $1)))
	$11 = ((float_64)$11 + (float_64)$9)
	if ( ((float_64)$11 <= (float_64)$10) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$19
	$9 = ((float_64)$9 * (float_64)((float_64)((float_64)CALL $128($9) / (float_64)CALL $128((CASTING float_64)(uint_32 $1))) / (float_64)(float_64)1.895189))
	$11 = ((float_64)$11 + (float_64)$9)
	if ( ((float_64)$11 <= (float_64)$10) ){ goto $label$10 }
	$8 = [8]
	goto $label$4 
	
.LABEL $label$18
	$9 = ((float_64)((float_64)(CASTING float_64)(uint_32 ($0 & [65535])) * (float_64)(float_64)1.5) + (float_64)(float_64)5)
	if ( (((float_64)$9 < (float_64)(float_64)4294967296) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$8 = [11]
	goto $label$4 
	
.LABEL $label$17
	$0 = [0]
	goto $label$5 
	
.LABEL $label$16
	$0 = (CASTING uint_32)(float_64 $9)
	$8 = [10]
	goto $label$4 
	
.LABEL $label$15
	$global$0 = ($2 + [16])
	return ((uint_32)($4 & [65535]) <= (uint_32)$0)
	
.LABEL $label$14
	$8 = [3]
	goto $label$4 
	
.LABEL $label$13
	$8 = [1]
	goto $label$4 
	
.LABEL $label$12
	$8 = [2]
	goto $label$4 
	
.LABEL $label$11
	$8 = [10]
	goto $label$4 
	
.LABEL $label$10
	$8 = [6]
	goto $label$4 
	
.LABEL $label$9
	$8 = [8]
	goto $label$4 
	
.LABEL $label$8
	$8 = [6]
	goto $label$4 
	
.LABEL $label$7
	$8 = [7]
	goto $label$4 
	
.LABEL $label$6
	$8 = [9]
	goto $label$4 
	
.LABEL $label$5
	$8 = [10]
	goto $label$4 
	return $8
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18292])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([104]))) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [12])
	*($3 + [44]) = ($5 + [16])
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [60])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [80])
	CALL $94(($3 + [32]), ($3 + [24]))
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $51(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $140($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$8 = ((uint_64)$7 > (uint_64)$6)
	$7 = *(($1 + [8]))
	$6 = *(($1 + [16]))
	*((($5 = $4) + [40])) = ( $6 ? $7 : $8 )
	*($5 + [16]) = $7
	*($5 + [24]) = $6
	*($5 + [32]) = ( $7 ? $6 : $8 )
	$6 = *($1)
	if ( *(*($3)) ){ goto $label$1 }
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [132 align=4]) = (int_64)0
	*(($1 + [32])) = (int_64)0
	*(($1 + [48])) = (int_64)0
	
.LABEL $label$1
	$8 = ($1 + [140])
	$3 = *(*($3 + [4]))
	if ( ($3 == 0) ){ goto $label$2 }
	*($8) = $3
	
.LABEL $label$2
	*($1 + [64]) = (int_64)0
	*($1 + [96]) = (int_64)0
	*($1 + [128]) = [0]
	*(($1 + [88])) = (int_64)0
	*(($1 + [80])) = (int_64)0
	*(($1 + [72])) = (int_64)0
	*(($1 + [120])) = (int_64)0
	*(($1 + [112])) = (int_64)0
	*(($1 + [104])) = (int_64)0
	*($1 + [144]) = *([0] + [8192])
	CALL eosio_assert([1], [18182])
	$4 = $4
	$3 = ($4 + [-144])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-5])
	*($5 + [48]) = $5
	$4 = ($1 + [8])
	*($5 + [68]) = $4
	*($5 + [64]) = $1
	*($5 + [72]) = ($1 + [16])
	*($5 + [76]) = ($1 + [24])
	*($5 + [80]) = ($1 + [40])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [96])
	*($5 + [92]) = ($1 + [128])
	*($5 + [96]) = ($1 + [129])
	*($5 + [100]) = ($1 + [132])
	*($5 + [104]) = ($1 + [136])
	*($5 + [108]) = $8
	*($5 + [112]) = ($1 + [144])
	*($5 + [116]) = ($1 + [148])
	CALL $73(($5 + [64]), ($5 + [48]))
	CALL db_update_i64(*(($1 + [156])), $2, $3, [139])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = (($5 + [16]) | [8])
	*($5 + [64]) = *($4)
	if ( (CALL $130(($5 + [16]), ($5 + [64]), [8]) == 0) ){ goto $label$4 }
	$4 = *($1 + [160])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($5 + [48]), $6)
	*(($1 + [160])) = $4
	
.LABEL $label$5
	CALL db_idx64_update($4, $2, ($5 + [64]))
	
.LABEL $label$4
	$4 = (($5 + [16]) + [16])
	$8 = ($1 + [16])
	*($5 + [64]) = *($8)
	if ( (CALL $130($3, ($5 + [64]), [8]) == 0) ){ goto $label$6 }
	$9 = ($1 + [164])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($5 + [48]), $6)
	*($9) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$6
	$3 = ((uint_64)$10 > (uint_64)$7)
	$10 = *(($1 + [8]))
	$7 = *($8)
	*($5 + [72]) = ( $7 ? $10 : $3 )
	*($5 + [64]) = ( $10 ? $7 : $3 )
	if ( (CALL $130($4, ($5 + [64]), [16]) == 0) ){ goto $label$8 }
	$3 = ($1 + [168])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534850, ($5 + [48]), $6)
	*($3) = $1
	
.LABEL $label$9
	CALL db_idx128_update($1, $2, ($5 + [64]))
	
.LABEL $label$8
	$global$0 = ($5 + [128])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [27]) = ((uint_64)*($1) > (uint_64)*($2))
	$4 = *($0)
	*($3 + [8]) = $0
	*($3 + [16]) = $2
	*($3 + [20]) = $1
	*($3 + [12]) = ($3 + [27])
	*($3 + [56]) = $4
	CALL eosio_assert(((int_64)*($0 + [72]) == (int_64)CALL $fimport$7()), [18527])
	$2 = ($0 + [72])
	*($3 + [32]) = $2
	*($3 + [36]) = ($3 + [8])
	*($3 + [40]) = ($3 + [56])
	*(($1 = CALL _Znwj([176])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [96]) = (int_64)0
	*($1 + [152]) = $2
	*(($1 + [88])) = (int_64)0
	*(($1 + [80])) = (int_64)0
	*(($1 + [72])) = (int_64)0
	*(($1 + [120])) = (int_64)0
	*(($1 + [112])) = (int_64)0
	*(($1 + [104])) = (int_64)0
	CALL $83(($3 + [32]), $1)
	*($3 + [48]) = $1
	$4 = *($1)
	*($3 + [32]) = $4
	$5 = *($1 + [156])
	*($3 + [28]) = $5
	$6 = ($0 + [100])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [104]))) ){ goto $label$3 }
	*($2 + [8]) = $4
	*($2 + [16]) = $5
	*($3 + [48]) = [0]
	*($2) = $1
	*($6) = ($2 + [24])
	$1 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $84(($0 + [96]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$1 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18424])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18474])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $82(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [59]) = $3
	*(($3 = ($4 + [48]))) = [0]
	*(($4 + [54])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [52]) = [0]
	$5 = *($0)
	*($4 + [16]) = $5
	*($4 + [24]) = $5
	$6 = *($1)
	*($4 + [4]) = $1
	*($4 + [8]) = $2
	*($4) = ($4 + [16])
	*($4 + [12]) = ($4 + [59])
	*($4 + [88]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$7()), [18527])
	*($4 + [68]) = $4
	*($4 + [64]) = ($4 + [16])
	*($4 + [72]) = ($4 + [88])
	*(($1 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [32]) = ($4 + [16])
	CALL $85(($4 + [64]), $1)
	*($4 + [80]) = $1
	$5 = *($1)
	*($4 + [64]) = $5
	$0 = *($1 + [36])
	*($4 + [60]) = $0
	$7 = ($4 + [44])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($3)) ){ goto $label$3 }
	*($2 + [8]) = $5
	*($2 + [16]) = $0
	*($4 + [80]) = [0]
	*($2) = $1
	*($7) = ($2 + [24])
	$1 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $86(($4 + [40]), ($4 + [80]), ($4 + [64]), ($4 + [60]))
	$1 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$0 = *($4 + [40])
	if ( ($0 == 0) ){ goto $label$4 }
	$3 = ($4 + [44])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($4 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $0
	
.LABEL $label$5
	*($3) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$5 = ($1 + [8])
	$6 = *($5)
	*($4 + [48]) = $6
	$7 = ($1 + [16])
	$8 = *($7)
	*($4 + [56]) = $8
	*($5) = *(*($3))
	*($1 + [24]) = [1]
	*($1 + [28]) = *([0] + [8192])
	$9 = ((uint_64)$6 > (uint_64)$8)
	*((($4 + [48]) + [24])) = ( $8 ? $6 : $9 )
	*($7) = *(*($3 + [4]))
	*($4 + [64]) = ( $6 ? $8 : $9 )
	$6 = *($1)
	CALL eosio_assert([1], [18182])
	*($4 + [40]) = ($4 + [29])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [80]) = ($4 + [32])
	*($4 + [100]) = $5
	*($4 + [96]) = $1
	*($4 + [104]) = $7
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [28])
	CALL $81(($4 + [96]), ($4 + [80]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [29])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = (($4 + [48]) | [8])
	*($4 + [96]) = *($5)
	if ( (CALL $130(($4 + [48]), ($4 + [96]), [8]) == 0) ){ goto $label$2 }
	$7 = ($1 + [40])
	$5 = *($7)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945024, ($4 + [80]), $6)
	*($7) = $5
	
.LABEL $label$3
	CALL db_idx64_update($5, $2, ($4 + [96]))
	
.LABEL $label$2
	$5 = (($4 + [48]) + [16])
	$7 = ($1 + [16])
	*($4 + [96]) = *($7)
	if ( (CALL $130($3, ($4 + [96]), [8]) == 0) ){ goto $label$4 }
	$9 = ($1 + [44])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945025, ($4 + [80]), $6)
	*($9) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, $2, ($4 + [96]))
	
.LABEL $label$4
	$3 = ((uint_64)$10 > (uint_64)$8)
	$10 = *(($1 + [8]))
	$8 = *($7)
	*($4 + [104]) = ( $8 ? $10 : $3 )
	*($4 + [96]) = ( $10 ? $8 : $3 )
	if ( (CALL $130($5, ($4 + [96]), [16]) == 0) ){ goto $label$6 }
	$5 = ($1 + [48])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945026, ($4 + [80]), $6)
	*($5) = $1
	
.LABEL $label$7
	CALL db_idx128_update($1, $2, ($4 + [96]))
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

int_32 .FUNC $124 (int_32 $0)
{
	return ((($0 + [-48]) <= [10]) | ((($0 | [32]) + [-97]) <= [26]))
}

int_64 .FUNC $128 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	float_64 $5
	float_64 $6
	$1 = (CASTING int_64)(float_64 $0)
	if ( ((int_64)$1 < (int_64)0) ){ goto $label$4 }
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((uint_32)$2) <= (uint_32)[1048575]) ){ goto $label$4 }
	if ( ((uint_32)$2 > (uint_32)[2146435071]) ){ goto $label$5 }
	$3 = [-1023]
	$1 = ((int_64)$1 & (int_64)4294967295)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$3 }
	$0 = (float_64)0
	if ( ((int_32)$2 != (int_32)[1072693248]) ){ goto $label$3 }
	
.LABEL $label$5
	return $0
	
.LABEL $label$4
	if ( ((int_64)((int_64)$1 & (int_64)9223372036854775807) == (int_64)0) ){ goto $label$2 }
	if ( ((int_64)$1 <= (int_64)-1) ){ goto $label$1 }
	$4 = (CASTING int_64)(float_64 ((float_64)$0 * (float_64)(float_64)18014398509481984))
	$1 = ((int_64)$4 & (int_64)4294967295)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32))
	$3 = [-1077]
	
.LABEL $label$3
	$5 = ((float_64)$5 * (float_64)$5)
	$0 = ((float_64)$5 * (float_64)$5)
	$6 = ((float_64)$0 * (float_64)((float_64)$0 * (float_64)(float_64)0.5))
	$5 = ((float_64)$0 / (float_64)((float_64)$0 + (float_64)(float_64)2))
	$0 = ((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 (($2 & [1048575]) + [1072079006])) << (int_64)32) | (int_64)$1)) + (float_64)(float_64)-1)
	$2 = ($2 + [614242])
	$5 = (CASTING float_64)(int_32 ($3 + uint_32($2 >> [20])))
	return ((float_64)((float_64)$5 * (float_64)(float_64)0.6931471803691238) + (float_64)((float_64)$0 + (float_64)(float_64))(((float_64)((float_64)$5 * (float_64)(float_64)1.9082149292705877e-10) + (float_64)((float_64)$5 * (float_64)((float_64)$6 + (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.15313837699209373) + (float_64)(float_64)0.22222198432149784)) + (float_64)(float_64)0.3999999999940942)) + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.14798198605116586) + (float_64)(float_64)0.1818357216161805)) + (float_64)(float_64)0.2857142874366239)) + (float_64)(float_64)0.6666666666666735)))))) - $6)))
	
.LABEL $label$2
	return ((float_64)(float_64)-1 / (float_64)((float_64)$0 * (float_64)$0))
	
.LABEL $label$1
	return ((float_64)(float_64))($0 - $0) / (float_64)(float_64)0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3) = *($3 + [168])
	CALL $10($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4352380133890326529) ){ goto $label$11 }
	if ( ((int_64)$2 <= (int_64)-4994302320998088705) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4994302320998088704) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [16]) = *($3 + [152])
	CALL $12($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-3075276126730321921) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3075276126730321920) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5662449698674311168) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [40]) = *($3 + [128])
	CALL $14($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-6030918035374604288) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [8]) = *($3 + [160])
	CALL $16($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4352380133890326528) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4149697620714979328) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [48]) = *($3 + [120])
	CALL $14($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [92]) = [0]
	*($3 + [88]) = [6]
	*($3 + [80]) = *($3 + [88])
	CALL $19($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [72]) = *($3 + [96])
	CALL $21($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [64]) = *($3 + [104])
	CALL $23($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [24]) = *($3 + [144])
	CALL $14($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [32]) = *($3 + [136])
	CALL $14($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = [11]
	*($3 + [56]) = *($3 + [112])
	CALL $27($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $126([0])
	$global$0 = ($3 + [176])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$5 = ($global$0 - [112])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($2) == (int_64)$6), [17117])
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [17131])
	$2 = CALL $131([17066])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [17673])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = (int_64)0
	
.LOOP $label$11:
	$7 = *(($2 + [17065]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$12
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)4
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [17149])
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [17166])
	CALL $7(($5 + [88]), $4)
	$2 = *($5 + [88])
	if ( (( *($5 + [92]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == 0) ){ goto $label$13 }
	$2 = ($5 + [100])
	$7 = *($2)
	CALL eosio_assert(((int_32)( *(($5 + [104])) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [17183])
	$7 = *($5 + [88])
	$9 = ($7 & [1])
	*($5 + [72]) = ( *($5 + [96]) ? (($5 + [88]) | [1]) : $9 )
	*($5 + [76]) = ( *($5 + [92]) ? uint_32($7 >> [1]) : $9 )
	*($5 + [8]) = *($5 + [72])
	$7 = CALL $29(($5 + [80]), ($5 + [8]))
	$2 = CALL $114(($5 + [16]), $2)
	CALL $6(($5 + [32]), $2)
	CALL $30($0, $1, $7, $3, ($5 + [32]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$13
	if ( ((*($5 + [100]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [108])))
	
.LABEL $label$14
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$1
	$global$0 = ($5 + [112])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [47]) = [0]
	*($2 + [45 align=1]) = [0]
	*($2 + [41 align=1]) = [0]
	*($2 + [33 align=1]) = (int_64)0
	*($2 + [32]) = [0]
	$3 = ($1 + [1])
	$4 = ($1 + [8])
	$5 = [4]
	$6 = [0]
	$7 = *($1)
	$8 = uint_32($7 >> [1])
	$9 = $8
	$10 = ($7 & [1])
	if ( $10 ){ goto $label$2 }
	$11 = [1]
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$33 
	
.LABEL $label$34
	*(($7 = (($2 + [16]) + uint_32($6 >> [1])))) = (*($7) + ($9 << ($5 & [4])))
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	$9 = $8
	if ( ($10 == 0) ){ goto $label$16 }
	$11 = [0]
	goto $label$3 
	
.LABEL $label$33
	$9 = *(($1 + [4]))
	$11 = [1]
	goto $label$3 
	
.LABEL $label$32
	if ( ((uint_32)$6 >= (uint_32)$9) ){ goto $label$15 }
	$11 = [11]
	goto $label$3 
	
.LABEL $label$31
	$9 = $3
	if ( ($10 == 0) ){ goto $label$8 }
	$11 = [12]
	goto $label$3 
	
.LABEL $label$30
	$9 = *($4)
	$11 = [13]
	goto $label$3 
	
.LABEL $label$29
	$7 = *(($9 + $6))
	$9 = ($7 + [-48])
	if ( ((uint_32)($9 & [255]) <= (uint_32)[9]) ){ goto $label$7 }
	$11 = [14]
	goto $label$3 
	
.LABEL $label$28
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	$11 = [17]
	goto $label$3 
	
.LABEL $label$27
	$9 = ($7 + [-87])
	goto $label$4 
	
.LABEL $label$26
	$9 = ( ($7 + [-55]) ? [0] : ((($7 + [-65]) & [255]) <= [6]) )
	goto $label$5 
	
.LABEL $label$25
	$12 = (int_64)0
	$6 = [16]
	$5 = [0]
	$13 = (int_64)0
	$11 = [3]
	goto $label$3 
	
.LABEL $label$24
	$9 = (($2 + [16]) + $5)
	if ( ($6 <= [2]) ){ goto $label$11 }
	$11 = [10]
	goto $label$3 
	
.LABEL $label$23
	$12 = ((int_64)$12 | (int_64)*($9))
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)(uint_64)$12 >> (uint_64)(int_64)56))
	$6 = ($6 + [-1])
	$12 = ((int_64)$12 << (int_64)8)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$22
	CALL eosio_assert(((int_32)$6 == (int_32)[1]), [18032])
	*($0 + [8]) = $13
	*($0) = ((int_64)$12 | (int_64)*($9))
	$6 = [16]
	$0 = ($0 + [16])
	$12 = (int_64)0
	$13 = (int_64)0
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$14 }
	$11 = [5]
	goto $label$3 
	
.LABEL $label$21
	if ( ((int_32)$6 == (int_32)[16]) ){ goto $label$10 }
	$11 = [6]
	goto $label$3 
	
.LABEL $label$20
	if ( ($6 <= [2]) ){ goto $label$9 }
	$11 = [9]
	goto $label$3 
	
.LABEL $label$19
	CALL __ashlti3($2, $12, $13, (($6 << [3]) + [-8]))
	$13 = *(($2 + [8]))
	$12 = *($2)
	$11 = [7]
	goto $label$3 
	
.LABEL $label$18
	*($0) = $12
	*($0 + [8]) = $13
	$11 = [8]
	goto $label$3 
	
.LABEL $label$17
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$16
	$11 = [1]
	goto $label$3 
	
.LABEL $label$15
	$11 = [2]
	goto $label$3 
	
.LABEL $label$14
	$11 = [3]
	goto $label$3 
	
.LABEL $label$13
	$11 = [5]
	goto $label$3 
	
.LABEL $label$12
	$11 = [3]
	goto $label$3 
	
.LABEL $label$11
	$11 = [4]
	goto $label$3 
	
.LABEL $label$10
	$11 = [8]
	goto $label$3 
	
.LABEL $label$9
	$11 = [7]
	goto $label$3 
	
.LABEL $label$8
	$11 = [13]
	goto $label$3 
	
.LABEL $label$7
	$11 = [16]
	goto $label$3 
	
.LABEL $label$6
	$11 = [15]
	goto $label$3 
	
.LABEL $label$5
	$11 = [16]
	goto $label$3 
	
.LABEL $label$4
	$11 = [16]
	goto $label$3 
	$11
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = [0]
	$4 = ($1 + [1])
	$5 = *($1)
	$6 = ($5 & [1])
	$7 = *($1 + [8])
	$9 = ($8 & [1])
	$8 = *([0] + [8208])
	$8 = ( *([0] + [8212]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$7 }
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ((int_32)$5 < (int_32)$8) ){ goto $label$5 }
	$10 = ( $7 ? $4 : $6 )
	$11 = ($10 + $5)
	$9 = ( *([0] + [8216]) ? [8209] : $9 )
	$7 = *($9)
	$6 = $10
	
.LOOP $label$8:
	$5 = (($5 - $8) + [1])
	if ( ($5 == 0) ){ goto $label$5 }
	$5 = CALL $129($6, $7, $5)
	if ( ($5 == 0) ){ goto $label$5 }
	if ( (CALL $130($5, $9, $8) == 0) ){ goto $label$6 }
	$6 = ($5 + [1])
	$5 = ($11 - $6)
	if ( ((int_32)$5 >= (int_32)$8) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	$10 = [0]
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$5 }
	$10 = ($5 - $10)
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1)
	$6 = ($5 & [1])
	$7 = *(($1 + [8]))
	goto $label$4 
	
.LABEL $label$5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$8 = CALL $131([17023])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($8 << [1])
	$5 = ($0 + [1])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($0) = ($1 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $8
	
.LABEL $label$10
	CALL memcpy($5, [17023], $8)
	
.LABEL $label$9
	*(($5 + $8)) = [0]
	*(($0 + [20])) = [0]
	*($0 + [12 align=4]) = (int_64)0
	$5 = ($0 + [12])
	$8 = CALL $131([17023])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$15 }
	*($5) = ($8 << [1])
	$5 = ($5 + [1])
	if ( $8 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($0 + [12]) = ($1 | [1])
	*(($0 + [20])) = $5
	*(($0 + [16])) = $8
	
.LABEL $label$14
	CALL memcpy($5, [17023], $8)
	
.LABEL $label$13
	*(($5 + $8)) = [0]
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$12
	CALL $113($5)
	
.LABEL $label$4
	$9 = ($8 & [1])
	$8 = *([0] + [8220])
	$8 = ( *([0] + [8224]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$20 }
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ((int_32)$5 < (int_32)$8) ){ goto $label$19 }
	$3 = ( $7 ? $4 : $6 )
	$11 = ($3 + $5)
	$9 = ( *([0] + [8228]) ? [8221] : $9 )
	$7 = *($9)
	$6 = $3
	
.LOOP $label$21:
	$5 = (($5 - $8) + [1])
	if ( ($5 == 0) ){ goto $label$19 }
	$5 = CALL $129($6, $7, $5)
	if ( ($5 == 0) ){ goto $label$19 }
	if ( (CALL $130($5, $9, $8) == 0) ){ goto $label$22 }
	$6 = ($5 + [1])
	$5 = ($11 - $6)
	if ( ((int_32)$5 >= (int_32)$8) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$19 }
	$3 = ($5 - $3)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$19 }
	$5 = *($1)
	$6 = ($5 & [1])
	$7 = *(($1 + [8]))
	
.LABEL $label$20
	$11 = [0]
	$9 = ($8 & [1])
	$8 = *([0] + [8232])
	$8 = ( *([0] + [8236]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$16 }
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ((int_32)$5 < (int_32)$8) ){ goto $label$17 }
	$4 = ( $7 ? $4 : $6 )
	$11 = ($4 + $5)
	$9 = ( *([0] + [8240]) ? [8233] : $9 )
	$7 = *($9)
	$6 = $4
	
.LOOP $label$23:
	$5 = (($5 - $8) + [1])
	if ( ($5 == 0) ){ goto $label$17 }
	$5 = CALL $129($6, $7, $5)
	if ( ($5 == 0) ){ goto $label$17 }
	if ( (CALL $130($5, $9, $8) == 0) ){ goto $label$18 }
	$6 = ($5 + [1])
	$5 = ($11 - $6)
	if ( ((int_32)$5 >= (int_32)$8) ){ goto $label$23 }
	goto $label$17 
	
.LABEL $label$19
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$8 = CALL $131([17023])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$26 }
	*($0) = ($8 << [1])
	$5 = ($0 + [1])
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$1 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($0) = ($1 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $8
	
.LABEL $label$25
	CALL memcpy($5, [17023], $8)
	
.LABEL $label$24
	*(($5 + $8)) = [0]
	*(($0 + [20])) = [0]
	*($0 + [12 align=4]) = (int_64)0
	$5 = ($0 + [12])
	$8 = CALL $131([17023])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$29 }
	*($5) = ($8 << [1])
	$5 = ($5 + [1])
	if ( $8 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$1 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($0 + [12]) = ($1 | [1])
	*(($0 + [20])) = $5
	*(($0 + [16])) = $8
	
.LABEL $label$28
	CALL memcpy($5, [17023], $8)
	
.LABEL $label$27
	*(($5 + $8)) = [0]
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$18
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$17 }
	$11 = ($5 - $4)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$16 }
	
.LABEL $label$17
	$11 = CALL $121($1, [125], [0])
	
.LABEL $label$16
	$8 = *([0] + [8208])
	$8 = (( *([0] + [8212]) ? uint_32($8 >> [1]) : ($8 & [1]) ) + $10)
	$8 = CALL $115(($2 + [16]), $1, $8, (($3 + [-1]) - $8), $1)
	$5 = *([0] + [8220])
	$5 = (( *([0] + [8224]) ? uint_32($5 >> [1]) : ($5 & [1]) ) + $3)
	$5 = CALL $115($2, $1, $5, (($11 + [-1]) - $5), $1)
	CALL $114($0, $8)
	CALL $114(($0 + [12]), $5)
	if ( (*($2) & [1]) ){ goto $label$31 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$30 }
	goto $label$1 
	
.LABEL $label$31
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$30
	CALL _ZdlPv(*($8 + [8]))
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	CALL $113($5)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $4 (int_32 $0)
{
	if ( ((*([0] + [8232]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8240]))
	
.LABEL $label$1
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $122(($3 + [16]), [16997], $2)
	$2 = CALL $119(($3 + [16]), [17007])
	$4 = ($2 + [8])
	*((($3 + [32]) + [8])) = *($4)
	*($3 + [32]) = *($2)
	*($2) = (int_64)0
	$5 = [0]
	*($4) = [0]
	$6 = *($1)
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$4 }
	$1 = *([0] + [17636])
	
.LOOP $label$6:
	*((($3 + [48]) + ($2 = $5))) = *(($1 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$5 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$5 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($3) = ($5 << [1])
	$1 = ($3 | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$2 = ($3 | [1])
	$5 = $2
	goto $label$1 
	
.LABEL $label$3
	$4 = (($5 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($3) = ($4 | [1])
	*($3 + [8]) = $1
	*($3 + [4]) = $5
	
.LABEL $label$2
	$4 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$7:
	*(($1 + $2)) = *((($3 + [48]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$7 }
	$5 = ($1 + $5)
	$2 = ($3 | [1])
	
.LABEL $label$1
	*($5) = [0]
	$5 = *($3)
	$1 = ($5 & [1])
	$2 = CALL $120(($3 + [32]), ( *($3 + [8]) ? $2 : $1 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $1 ))
	$5 = ($2 + [8])
	*((($3 + [48]) + [8])) = *($5)
	*($3 + [48]) = *($2)
	*($2) = (int_64)0
	*($5) = [0]
	$2 = CALL $119(($3 + [48]), [17020])
	$6 = *($2)
	*($2) = (int_64)0
	*($0) = $6
	$2 = ($2 + [8])
	*(($0 + [8])) = *($2)
	*($2) = [0]
	if ( (*($3 + [48]) & [1]) ){ goto $label$14 }
	if ( (*($3) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*($3 + [56]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [8])))
	$2 = [1]
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = [1]
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($3 + [16]) & $2) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [40]))
	if ( ((*($3 + [16]) & $2) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($3 + [24]))
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [64])
}

void .FUNC $2 (int_32 $0)
{
	if ( ((*([0] + [8208]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8216]))
	
.LABEL $label$1
}

void .FUNC $3 (int_32 $0)
{
	if ( ((*([0] + [8220]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8228]))
	
.LABEL $label$1
}

void .FUNC memory ()
{
	CALL $104()
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	$1 = *([0] + [8196])
	if ( ($1 == 0) ){ goto $label$1 }
	*([0] + [8200]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*((($4 + [144]) + [24])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [136]) = ($2 + $7)
	*($4 + [128]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18076])
	CALL memcpy(($4 + [144]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18076])
	CALL memcpy((($4 + [144]) + [8]), ($2 + [8]), [8])
	*($4 + [132]) = ($2 + [16])
	$3 = (($4 + [144]) + [16])
	CALL $33(($4 + [128]), $3)
	*(($8 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$8 = *($8)
	*((($4 + [176]) + [8])) = $8
	*(($9 = (($4 + [192]) + [8]))) = $8
	$10 = *($4)
	*($4 + [192]) = $10
	*($4 + [176]) = $10
	$8 = *($9)
	*((($4 + [208]) + [8])) = $8
	*((($4 + [16]) + [24])) = $8
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [192])
	*($4 + [32]) = $1
	*($4 + [208]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [126])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	$0 = *($4 + [144])
	$1 = *($4 + [152])
	$3 = CALL $114(($4 + [208]), $3)
	*($4 + [176]) = $1
	*($4 + [192]) = $0
	$8 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [192])), (int_32 ($4 + [176])), (int_32 $3), (int_32 $6))
	if ( (*($4 + [208]) & [1]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $140($2)
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = *(($4 + [112]))
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *(($4 + [72]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = ($4 + [116])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$22
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $5
	
.LABEL $label$18
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [160]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return $2
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [192])
	$global$0 = $5
	$8 = ((uint_64)$7 > (uint_64)$6)
	$7 = *($1)
	$6 = *($2)
	*($5 + [184]) = ( $6 ? $7 : $8 )
	*($5 + [176]) = ( $7 ? $6 : $8 )
	*($5 + [168]) = ($0 + [72])
	CALL $32($5, ($5 + [168]), ($5 + [176]))
	$8 = [0]
	$9 = *($5 + [4])
	if ( ($9 == 0) ){ goto $label$1 }
	$8 = ((uint_64)$6 > (uint_64)$7)
	$7 = *($9 + [16])
	$6 = *($9 + [8])
	$8 = ( $9 ? [0] : (int_64)(((int_64)((int_64)*($5 + [176]) ^ (int_64)( $6 ? $7 : $8 )) | (int_64)((int_64)*($5 + [184]) ^ (int_64)( $7 ? $6 : $8 ))) == 0) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18003])
	$5 = CALL memcpy($5, $8, [160])
	$8 = ( ($5 + [24]) ? ($5 + [40]) : ((int_64)*($1) == (int_64)*($5 + [8])) )
	CALL eosio_assert(((int_64)*($8) > (int_64)0), [17266])
	CALL $30($0, $1, $2, $8, $3)
	$global$0 = ($5 + [192])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [144]) + [40]))) = (int_64)0
	*(($8 = ($4 + [176]))) = (int_64)0
	*(($9 = (($4 + [144]) + [24]))) = (int_64)0
	*((($4 + [144]) + [56])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [256]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $31(($4 + [16]), ($4 + [256]))
	*(($10 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$10 = *($10)
	*((($4 + [208]) + [8])) = $10
	*(($11 = (($4 + [224]) + [8]))) = $10
	$12 = *($4)
	*($4 + [224]) = $12
	*($4 + [208]) = $12
	$10 = *($11)
	*((($4 + [256]) + [8])) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [224])
	*($4 + [32]) = $1
	*($4 + [256]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [126])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($10 = (($4 + [224]) + [16]))) = *($8)
	*(($8 = (($4 + [224]) + [24]))) = *($3)
	*($4 + [224]) = *($4 + [160])
	*($4 + [232]) = *($9)
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	$3 = CALL $114(($4 + [208]), (($4 + [144]) + [48]))
	*((($4 + [256]) + [24])) = *($8)
	*((($4 + [256]) + [16])) = *($10)
	*($4 + [296]) = $1
	*($4 + [288]) = $0
	*($4 + [264]) = *($4 + [232])
	*($4 + [256]) = *($4 + [224])
	$8 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [296])), (int_32 ($4 + [288])), (int_32 ($4 + [256])), (int_32 $3), (int_32 $6))
	if ( (*($4 + [208]) & [1]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $140($2)
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = *(($4 + [112]))
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *(($4 + [72]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = ($4 + [116])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$22
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $5
	
.LABEL $label$18
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [200])))
	
.LABEL $label$5
	$global$0 = ($4 + [304])
	return $2
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [336])
	$global$0 = $4
	CALL require_auth(*($1))
	$6 = CALL $35($5, *($1), [17047])
	$5 = ($0 + [32])
	CALL $36($5, $6, *($0))
	*((($4 + [224]) + [56])) = *(($6 + [56]))
	*((($4 + [224]) + [48])) = *(($6 + [48]))
	*((($4 + [224]) + [40])) = *(($6 + [40]))
	*((($4 + [224]) + [32])) = *(($6 + [32]))
	*((($4 + [224]) + [24])) = *(($6 + [24]))
	*((($4 + [224]) + [16])) = *(($6 + [16]))
	*((($4 + [224]) + [8])) = *(($6 + [8]))
	*($4 + [224]) = *($6)
	$7 = CALL $114((($4 + [224]) + [64]), ($6 + [64]))
	*($4 + [304]) = *($6 + [80])
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [296])))
	
.LABEL $label$1
	$6 = *($3)
	CALL eosio_assert((( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= [257]), [16967])
	$8 = *($2)
	$3 = *(($0 + [60]))
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($3 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$8) ){ goto $label$4 }
	$3 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$5), [18241])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-6030912129794572288, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $41($5, $6)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$5), [18241])
	
.LABEL $label$2
	$3 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17415])
	*(($4 + [216])) = [0]
	*(($4 + [222])) = [0]
	*($4 + [200]) = (int_64)-1
	*($4 + [208]) = (int_64)0
	*($4 + [220]) = [0]
	$8 = *($0)
	*($4 + [184]) = $8
	*($4 + [192]) = $8
	*($4 + [176]) = ($4 + [184])
	$6 = ((uint_64)$10 > (uint_64)$8)
	$10 = *($2)
	$8 = *($1)
	*($4 + [168]) = ( $8 ? $10 : $6 )
	*($4 + [160]) = ( $10 ? $8 : $6 )
	CALL $43($4, ($4 + [176]), ($4 + [160]))
	$6 = *($4 + [4])
	if ( ($6 == 0) ){ goto $label$8 }
	$7 = ((uint_64)$8 > (uint_64)$10)
	$10 = *($6 + [16])
	$8 = *($6 + [8])
	if ( ((int_64)((int_64)((int_64)*($4 + [160]) ^ (int_64)( $8 ? $10 : $7 )) | (int_64)((int_64)*($4 + [168]) ^ (int_64)( $10 ? $8 : $7 ))) != (int_64)0) ){ goto $label$8 }
	CALL eosio_assert(((int_64)*($6 + [8]) != (int_64)*($1)), [17501])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)[1]), [17518])
	$8 = *($1)
	*($4 + [4]) = $2
	*($4) = $1
	CALL $48(($4 + [184]), $6, $8, $4)
	$7 = *($4 + [208])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = ((uint_64)$10 > (uint_64)$8)
	$10 = *($1)
	$8 = *($2)
	*($4 + [328]) = ( $8 ? $10 : $6 )
	*($4 + [320]) = ( $10 ? $8 : $6 )
	*($4 + [312]) = ($0 + [72])
	CALL $32($4, ($4 + [312]), ($4 + [320]))
	$6 = *($4 + [4])
	if ( ($6 == 0) ){ goto $label$9 }
	$3 = ((uint_64)$8 > (uint_64)$10)
	$10 = *($6 + [16])
	$8 = *($6 + [8])
	$3 = ( $6 ? [0] : (int_64)(((int_64)((int_64)*($4 + [320]) ^ (int_64)( $8 ? $10 : $3 )) | (int_64)((int_64)*($4 + [328]) ^ (int_64)( $10 ? $8 : $3 ))) == 0) )
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [18003])
	$6 = CALL memcpy($4, $3, [160])
	CALL eosio_assert((*(( ($6 + [129]) ? ($6 + [128]) : ((int_64)*($6 + [8]) == (int_64)*($1)) )) == 0), [17534])
	CALL $49($0, $6)
	CALL $45($0, $1, $2, [3])
	$7 = *($6 + [208])
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$9 = ($4 + [212])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($4 + [208]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $7
	
.LABEL $label$10
	*($9) = $7
	CALL _ZdlPv($6)
	$global$0 = ($4 + [336])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [336])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [144]) + [24]))) = (int_64)0
	*((($4 + [144]) + [40])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [224]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $28(($4 + [16]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$9 = *($3)
	*((($4 + [192]) + [8])) = $9
	*(($3 = (($4 + [208]) + [8]))) = $9
	$10 = *($4)
	*($4 + [208]) = $10
	*($4 + [192]) = $10
	$11 = *($3)
	*(($9 = (($4 + [224]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [208])
	*($4 + [32]) = $1
	*($4 + [224]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [126])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($3) = *($8)
	*($4 + [208]) = *($4 + [160])
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	$8 = CALL $114(($4 + [192]), ($4 + [176]))
	*($9) = *($3)
	*($4 + [248]) = $1
	*($4 + [240]) = $0
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [248])), (int_32 ($4 + [240])), (int_32 ($4 + [224])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [192]) & [1]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $140($2)
	$3 = *(($4 + [112]))
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = *(($4 + [112]))
	if ( $3 ){ goto $label$9 }
	
.LABEL $label$10
	$3 = *(($4 + [72]))
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = ($4 + [116])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($5) = $3
	CALL _ZdlPv($2)
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = ($4 + [76])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$22
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $3
	
.LABEL $label$18
	*($5) = $3
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [176]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$5
	$global$0 = ($4 + [256])
	return $2
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$5 = ($global$0 - [288])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = CALL $35($6, *($1), [17047])
	$6 = ($0 + [32])
	CALL $36($6, $6, *($0))
	*((($5 + [176]) + [56])) = *(($6 + [56]))
	*((($5 + [176]) + [48])) = *(($6 + [48]))
	*((($5 + [176]) + [40])) = *(($6 + [40]))
	*((($5 + [176]) + [32])) = *(($6 + [32]))
	*((($5 + [176]) + [24])) = *(($6 + [24]))
	*((($5 + [176]) + [16])) = *(($6 + [16]))
	*((($5 + [176]) + [8])) = *(($6 + [8]))
	*($5 + [176]) = *($6)
	$7 = CALL $114((($5 + [176]) + [64]), ($6 + [64]))
	*($5 + [256]) = *($6 + [80])
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [248])))
	
.LABEL $label$1
	$6 = *($4)
	CALL eosio_assert((( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= [257]), [16967])
	$8 = ($3 + [1])
	$6 = *(( *($3 + [8]) ? $8 : (*($3) & [1]) ))
	$7 = ($6 + [-48])
	*($5 + [175]) = $7
	CALL eosio_assert((((($6 + [-49]) & [255]) <= [2]) | ((int_32)($7 & [255]) == (int_32)[3])), [17332])
	$6 = ((uint_64)$10 > (uint_64)$9)
	$10 = *($1)
	$9 = *($2)
	*($5 + [280]) = ( $9 ? $10 : $6 )
	*($5 + [272]) = ( $10 ? $9 : $6 )
	$11 = ($0 + [72])
	*($5 + [264]) = $11
	CALL $32($5, ($5 + [264]), ($5 + [272]))
	$2 = [0]
	$6 = [0]
	$4 = *($5 + [4])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ((uint_64)$9 > (uint_64)$10)
	$10 = *($4 + [16])
	$9 = *($4 + [8])
	$6 = ( $4 ? [0] : (int_64)(((int_64)((int_64)*($5 + [272]) ^ (int_64)( $9 ? $10 : $6 )) | (int_64)((int_64)*($5 + [280]) ^ (int_64)( $10 ? $9 : $6 ))) == 0) )
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18003])
	$5 = CALL memcpy($5, $6, [160])
	$9 = *($5 + [16])
	$10 = *($1)
	$6 = ((int_64)$10 == (int_64)*($5 + [8]))
	*($5 + [264]) = $6
	CALL eosio_assert(($6 | ((int_64)$10 == (int_64)$9)), [17621])
	$12 = [1]
	$4 = ($5 + [96])
	$3 = ($5 + [64])
	$4 = *($3)
	$13 = ($4 & [1])
	CALL $141(( *(($3 + [8])) ? $8 : $13 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $13 ), ( $3 ? $4 : $6 ))
	if ( *($5 + [140]) ){ goto $label$3 }
	$9 = *($5 + [40])
	$10 = *($5 + [24])
	$14 = *($1)
	$8 = ((int_64)*(($5 + [16])) == (int_64)$14)
	$15 = ((int_64)*($5 + [8]) == (int_64)$14)
	$13 = ( $3 ? $4 : $15 )
	if ( ((int_64)((int_64)*($13) | (int_64)*(($13 + [8]))) != (int_64)0) ){ goto $label$4 }
	$12 = ((int_64)((int_64)*($13 + [16]) | (int_64)*(($13 + [24]))) != (int_64)0)
	
.LABEL $label$4
	$14 = ( $10 ? $9 : $15 )
	$13 = [1]
	$3 = ( $3 ? $4 : $8 )
	if ( ((int_64)((int_64)*($3) | (int_64)*(($3 + [8]))) != (int_64)0) ){ goto $label$5 }
	$13 = ((int_64)((int_64)*($3 + [16]) | (int_64)*(($3 + [24]))) != (int_64)0)
	
.LABEL $label$5
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$3 }
	if ( ((int_64)( $10 ? $9 : $8 ) < (int_64)1) ){ goto $label$3 }
	$2 = ($12 & $13)
	
.LABEL $label$3
	CALL eosio_assert($2, [17346])
	$4 = ($5 + [129])
	$3 = ($5 + [128])
	CALL eosio_assert((*(( $3 ? $4 : $6 )) == 0), [17365])
	if ( (*(( $4 ? $3 : $6 )) == 0) ){ goto $label$6 }
	CALL $37($0, $5, $1, ($7 & [255]))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$6
	$9 = *($0)
	*($5 + [276]) = ($5 + [175])
	*($5 + [272]) = ($5 + [264])
	CALL $38($11, $5, $9, ($5 + [272]))
	$global$0 = ($5 + [288])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [144]) + [24])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [136]) = ($2 + $5)
	*($4 + [128]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18076])
	CALL memcpy(($4 + [144]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [18076])
	CALL memcpy((($4 + [144]) + [8]), ($2 + [8]), [8])
	*($4 + [132]) = ($2 + [16])
	CALL $33(($4 + [128]), (($4 + [144]) + [16]))
	CALL $33(($4 + [128]), ($4 + [172]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4)
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [208])
	*($4 + [32]) = $1
	*($4 + [224]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($3 = ($4 + [112]))) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [126])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [16])
	CALL $34(($4 + [224]), ($4 + [144]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $140($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [116])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [112]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$10 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $3
	
.LABEL $label$11
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((*($4 + [172]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [180])))
	
.LABEL $label$16
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$17
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth(*($1))
	$6 = CALL $35($5, *($1), [17047])
	$5 = ($0 + [32])
	CALL $36($5, $6, *($0))
	*((($4 + [80]) + [56])) = *(($6 + [56]))
	*((($4 + [80]) + [48])) = *(($6 + [48]))
	*((($4 + [80]) + [40])) = *(($6 + [40]))
	*((($4 + [80]) + [32])) = *(($6 + [32]))
	*((($4 + [80]) + [24])) = *(($6 + [24]))
	*((($4 + [80]) + [16])) = *(($6 + [16]))
	*((($4 + [80]) + [8])) = *(($6 + [8]))
	*($4 + [80]) = *($6)
	$7 = CALL $114((($4 + [80]) + [64]), ($6 + [64]))
	*($4 + [160]) = *($6 + [80])
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$1
	$6 = *($3)
	CALL eosio_assert((( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= [257]), [16967])
	$8 = *($2)
	$3 = *(($0 + [60]))
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($3 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$8) ){ goto $label$4 }
	$3 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$5), [18241])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-6030912129794572288, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $41($5, $6)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$5), [18241])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17415])
	*($4 + [168]) = ($0 + [72])
	$6 = ((uint_64)$10 > (uint_64)$8)
	$10 = *($1)
	$8 = *($2)
	*($4 + [40]) = ( $8 ? $10 : $6 )
	*($4 + [32]) = ( $10 ? $8 : $6 )
	CALL $32($4, ($4 + [168]), ($4 + [32]))
	$6 = *($4 + [4])
	if ( ($6 == 0) ){ goto $label$7 }
	$6 = ((uint_64)$8 > (uint_64)$10)
	$10 = *($6 + [16])
	$8 = *($6 + [8])
	$6 = ((int_64)((int_64)((int_64)*($4 + [32]) ^ (int_64)( $8 ? $10 : $6 )) | (int_64)((int_64)*($4 + [40]) ^ (int_64)( $10 ? $8 : $6 ))) != (int_64)0)
	goto $label$6 
	
.LABEL $label$7
	$6 = [1]
	
.LABEL $label$6
	CALL eosio_assert($6, [17433])
	CALL eosio_assert(CALL $42($0, $1), [17447])
	*(($4 + [64])) = [0]
	*(($4 + [70])) = [0]
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	*($4 + [68]) = [0]
	$8 = *($0)
	*($4 + [32]) = $8
	*($4 + [40]) = $8
	*($4 + [24]) = ($4 + [32])
	$6 = ((uint_64)$10 > (uint_64)$8)
	$10 = *($2)
	$8 = *($1)
	*($4 + [8]) = ( $8 ? $10 : $6 )
	*($4) = ( $10 ? $8 : $6 )
	CALL $43(($4 + [168]), ($4 + [24]), $4)
	$6 = *($4 + [172])
	if ( ($6 == 0) ){ goto $label$11 }
	$3 = ((uint_64)$8 > (uint_64)$10)
	$10 = *($6 + [16])
	$8 = *($6 + [8])
	if ( ((int_64)((int_64)((int_64)*($4) ^ (int_64)( $8 ? $10 : $3 )) | (int_64)((int_64)*($4 + [8]) ^ (int_64)( $10 ? $8 : $3 ))) != (int_64)0) ){ goto $label$11 }
	$3 = *($6 + [24])
	if ( ((int_64)*($6 + [8]) != (int_64)*($1)) ){ goto $label$10 }
	CALL eosio_assert(((int_32)($3 & [255]) == (int_32)[3]), [17463])
	$8 = *($1)
	*($4 + [172]) = $2
	*($4 + [168]) = $1
	CALL $44(($4 + [32]), $6, $8, ($4 + [168]))
	$7 = *($4 + [56])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $45($0, $1, $2, [1])
	$7 = *($4 + [56])
	if ( ($7 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert(((int_32)($3 & [255]) == (int_32)[1]), [17482])
	CALL $46(($4 + [32]), $6)
	CALL $47($0, $1, $2)
	$7 = *($4 + [56])
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$9 = ($4 + [60])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($4 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $7
	
.LABEL $label$12
	*($9) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$global$0 = ($4 + [176])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$8 = ((uint_64)$7 > (uint_64)$6)
	$7 = *(($1 + [8]))
	$6 = *(($1 + [16]))
	*((($5 = $4) + [40])) = ( $6 ? $7 : $8 )
	*($5 + [16]) = $7
	*($5 + [24]) = $6
	*($5 + [32]) = ( $7 ? $6 : $8 )
	$9 = *($3 + [20])
	$8 = *($3 + [16])
	$6 = *($1)
	$10 = *(*($3 + [12]))
	$3 = *(*($3 + [8]))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$1 }
	*($1 + [24]) = (*($1 + [24]) + [1])
	$11 = ($1 + [32])
	goto $label$2 
	
.LABEL $label$3
	*($1 + [28]) = (*($1 + [28]) + [1])
	$11 = ($1 + [40])
	
.LABEL $label$2
	*($11) = ((int_64)*($11) + (int_64)*($8))
	
.LABEL $label$1
	*($1 + [56]) = *($8)
	*($1 + [49]) = $10
	*($1 + [48]) = $3
	*($1 + [72]) = *([0] + [8192])
	$7 = *($9)
	*($1 + [64]) = ( $7 ? (int_64)0 : ((uint_64)$7 > (uint_64)(int_64)999) )
	CALL eosio_assert([1], [18182])
	$4 = $4
	$3 = ($4 + [-80])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-10])
	*($5 + [48]) = $5
	$4 = ($1 + [8])
	*($5 + [68]) = $4
	*($5 + [64]) = $1
	*($5 + [72]) = ($1 + [16])
	*($5 + [76]) = ($1 + [24])
	*($5 + [80]) = ($1 + [28])
	*($5 + [84]) = ($1 + [32])
	*($5 + [88]) = ($1 + [40])
	*($5 + [92]) = ($1 + [48])
	*($5 + [96]) = ($1 + [49])
	*($5 + [100]) = ($1 + [56])
	*($5 + [104]) = ($1 + [64])
	*($5 + [108]) = ($1 + [72])
	CALL $87(($5 + [64]), ($5 + [48]))
	CALL db_update_i64(*($1 + [80]), $2, $3, [70])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$3 = (($5 + [16]) | [8])
	*($5 + [64]) = *($4)
	if ( (CALL $130(($5 + [16]), ($5 + [64]), [8]) == 0) ){ goto $label$5 }
	$4 = *($1 + [84])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035931840378960896, ($5 + [48]), $6)
	*(($1 + [84])) = $4
	
.LABEL $label$6
	CALL db_idx64_update($4, $2, ($5 + [64]))
	
.LABEL $label$5
	$4 = (($5 + [16]) + [16])
	$8 = ($1 + [16])
	*($5 + [64]) = *($8)
	if ( (CALL $130($3, ($5 + [64]), [8]) == 0) ){ goto $label$7 }
	$9 = ($1 + [88])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035931840378960897, ($5 + [48]), $6)
	*($9) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$7
	$3 = ((uint_64)$12 > (uint_64)$7)
	$12 = *(($1 + [8]))
	$7 = *($8)
	*($5 + [72]) = ( $7 ? $12 : $3 )
	*($5 + [64]) = ( $12 ? $7 : $3 )
	if ( (CALL $130($4, ($5 + [64]), [16]) == 0) ){ goto $label$9 }
	$3 = ($1 + [92])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035931840378960898, ($5 + [48]), $6)
	*($3) = $1
	
.LABEL $label$10
	CALL db_idx128_update($1, $2, ($5 + [64]))
	
.LABEL $label$9
	$global$0 = ($5 + [112])
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [32])
	$4 = CALL $41($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [18315])
	CALL eosio_assert([1], [18349])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [92]), ($1 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $41($3, $5)
	
.LABEL $label$3
	CALL $54($3, $4)
	CALL prints([17197])
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [72])
	$4 = CALL $55($3, $2)
	
.LOOP $label$5:
	CALL eosio_assert([1], [18315])
	CALL eosio_assert([1], [18349])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [156]), ($1 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $55($3, $5)
	
.LABEL $label$6
	CALL $56($3, $4)
	CALL prints([17215])
	$4 = $2
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	*((($1 + [48]) + [32])) = [0]
	*((($1 + [48]) + [38])) = [0]
	*($1 + [64]) = (int_64)-1
	*($1 + [84]) = [0]
	$6 = *($0)
	*($1 + [48]) = $6
	*($1 + [56]) = $6
	*($1 + [72]) = (int_64)0
	$2 = CALL db_lowerbound_i64($6, $6, (int_64)7035938067010945024, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $57(($1 + [48]), $2)
	
.LOOP $label$8:
	CALL eosio_assert([1], [18315])
	CALL eosio_assert([1], [18349])
	$2 = [0]
	$3 = CALL db_next_i64(*($4 + [36]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $57(($1 + [48]), $3)
	
.LABEL $label$9
	CALL $46(($1 + [48]), $4)
	CALL prints([17231])
	$4 = $2
	if ( $2 ){ goto $label$8 }
	
.LABEL $label$7
	*((($1 + [8]) + [32])) = [0]
	*((($1 + [8]) + [38])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [44]) = [0]
	$6 = *($0)
	*($1 + [8]) = $6
	*($1 + [16]) = $6
	*($1 + [32]) = (int_64)0
	$2 = CALL db_lowerbound_i64($6, $6, (int_64)7035931840378960896, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $58(($1 + [8]), $2)
	
.LOOP $label$11:
	CALL eosio_assert([1], [18315])
	CALL eosio_assert([1], [18349])
	$2 = [0]
	$3 = CALL db_next_i64(*($4 + [80]), ($1 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $58(($1 + [8]), $3)
	
.LABEL $label$12
	CALL $59(($1 + [8]), $4)
	CALL prints([17248])
	$4 = $2
	if ( $2 ){ goto $label$11 }
	
.LABEL $label$10
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$13 }
	$5 = ($1 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($1 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($5) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$3 = *($1 + [72])
	if ( ($3 == 0) ){ goto $label$18 }
	$5 = ($1 + [76])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [72]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $3
	
.LABEL $label$19
	*($5) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$18
	$global$0 = ($1 + [96])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [110])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $140($2)
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [96]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [56]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [100])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [96]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [56]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18292])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [76]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [28])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [49])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $98(($3 + [32]), ($3 + [24]))
	*($5 + [80]) = $1
	*($5 + [84 align=4]) = (int_64)-1
	*($5 + [92]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $140($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [18379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18424])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18474])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [80]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $99(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *([0] + [8192])
	*($1 + [56]) = $4
	*($1 + [60]) = $4
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [64])
	CALL $116($6, *($4 + [4]))
	$7 = *(*($4 + [8]))
	if ( (int_64)($7 == 0) ){ goto $label$1 }
	*($1 + [80]) = $7
	
.LABEL $label$1
	$8 = ($1 + [60])
	$9 = ($1 + [56])
	$4 = *($6)
	$10 = ( *(($1 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($10 + [72])
	$7 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $136($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [12])
	*($3 + [44]) = ($1 + [16])
	*($3 + [48]) = ($1 + [24])
	*($3 + [52]) = ($1 + [32])
	*($3 + [56]) = ($1 + [40])
	*($3 + [60]) = ($1 + [48])
	*($3 + [64]) = $9
	*($3 + [68]) = $8
	*($3 + [72]) = $6
	*($3 + [76]) = ($1 + [80])
	CALL $67(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $140($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [80])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	*($1 + [56]) = *([0] + [8192])
	$6 = *($1)
	$7 = ($1 + [64])
	CALL $116($7, *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18182])
	$3 = *($1 + [64])
	$8 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [72])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [56])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $136($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [64]) = $8
	*($5 + [72]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [32])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	*($5 + [68]) = ($1 + [60])
	*($5 + [76]) = ($1 + [80])
	CALL $67(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $140($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [80])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18076])
	CALL memcpy(($4 + [16]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18076])
	CALL memcpy(($4 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy(($4 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [18076])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18424])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18474])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = *($1 + [8])
	$5 = CALL $114(($2 + [16]), ($1 + [16]))
	$1 = CALL $114($2, ($1 + [28]))
	*($2 + [32]) = $4
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	CALL void $7((int_32 ($2 + [40])), (int_32 ($2 + [32])), (int_32 $5), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18424])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18474])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [156])))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $96(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18292])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	CALL $97(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($5 + [40 align=4]) = (int_64)-1
	*($5 + [48]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $140($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $117($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)$0), [18241])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $41($0, $4)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$0), [18241])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $140($0)
	
.LABEL $label$1
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $137([8540], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $131($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $117($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17846])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17951])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17884])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17951])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18076])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18292])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [152]) = $0
	*(($5 + [88])) = (int_64)0
	*(($5 + [80])) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*(($5 + [120])) = (int_64)0
	*(($5 + [112])) = (int_64)0
	*(($5 + [104])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [96])
	*($3 + [68]) = ($5 + [128])
	*($3 + [72]) = ($5 + [129])
	*($3 + [76]) = ($5 + [132])
	*($3 + [80]) = ($5 + [136])
	*($3 + [84]) = ($5 + [140])
	*($3 + [88]) = ($5 + [144])
	*($3 + [92]) = ($5 + [148])
	CALL $95(($3 + [40]), ($3 + [32]))
	*($5 + [156]) = $1
	*($5 + [160 align=4]) = (int_64)-1
	*($5 + [168]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $140($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $140($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [200]))) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [156]) = $2
	*($4 + [152]) = $2
	*($4 + [160]) = ($2 + $7)
	*($4 + [240]) = ($4 + [152])
	*($4 + [40]) = ($4 + [168])
	CALL $53(($4 + [40]), ($4 + [240]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [160])
	*($4 + [24]) = *($4 + [152])
	$10 = *($9)
	*(($3 = (($4 + [208]) + [8]))) = $10
	*(($9 = (($4 + [224]) + [8]))) = $10
	$11 = *($4 + [24])
	*($4 + [224]) = $11
	*($4 + [208]) = $11
	$10 = *($9)
	*((($4 + [240]) + [8])) = $10
	*(($4 + [64])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [224])
	*($4 + [56]) = $1
	*($4 + [240]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [150])) = [0]
	*(($4 + [148])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($3) = *($8)
	*($4 + [208]) = *($4 + [192])
	$8 = *($4 + [185])
	$10 = *($4 + [184])
	$0 = *($4 + [176])
	$1 = *($4 + [168])
	*($9) = *($3)
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [224]) + [8]))
	*((($4 + [240]) + [8])) = $11
	*((($4 + [8]) + [8])) = $11
	$11 = *($4 + [224])
	*($4 + [8]) = $11
	*($4 + [240]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($10 & [255])), (int_32 ($8 & [255])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $140($2)
	
.LABEL $label$5
	$5 = *(($4 + [136]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [140])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [144]) = ($2 + $7)
	*($4 + [136]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18076])
	CALL memcpy(($4 + [152]), $2, [8])
	*($4 + [140]) = ($2 + [8])
	$3 = (($4 + [152]) + [8])
	CALL $33(($4 + [136]), $3)
	*(($8 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$8 = *($8)
	*((($4 + [176]) + [8])) = $8
	*(($9 = (($4 + [192]) + [8]))) = $8
	$10 = *($4 + [8])
	*($4 + [192]) = $10
	*($4 + [176]) = $10
	$8 = *($9)
	*((($4 + [208]) + [8])) = $8
	*(($4 + [48])) = $8
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [192])
	*($4 + [40]) = $1
	*($4 + [208]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [134])) = [0]
	*(($4 + [132])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	$0 = *($4 + [152])
	$3 = CALL $114(($4 + [208]), $3)
	*($4 + [192]) = $0
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [192])), (int_32 $3), (int_32 $6))
	if ( (*($4 + [208]) & [1]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $140($2)
	$5 = *(($4 + [120]))
	if ( ($5 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = *(($4 + [120]))
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *(($4 + [80]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [120]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$22
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [80]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $5
	
.LABEL $label$18
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [160]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return $2
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($1))
	$4 = [1]
	$5 = *($2)
	if ( ((uint_32)( *($2 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ) > (uint_32)[12]) ){ goto $label$4 }
	$5 = ($5 & [1])
	$5 = *($6)
	$6 = CALL $114(($3 + [16]), $2)
	$7 = ( *($6 + [4]) ? uint_32($5 >> [1]) : $5 )
	if ( ($7 == 0) ){ goto $label$2 }
	$5 = ( *($6 + [8]) ? ($6 + [1]) : $5 )
	
.LOOP $label$5:
	$4 = *($5)
	$8 = CALL $124($4)
	if ( ((int_32)$4 == (int_32)[46]) ){ goto $label$6 }
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$4 = [1]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([0], [17547])
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [17547])
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$1
	$5 = ($0 + [32])
	$7 = CALL $35($5, *($1), [17047])
	$9 = *($0)
	*($3 + [8]) = $2
	CALL $52($5, $7, $9, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [288])
	$global$0 = $4
	CALL require_auth(*($1))
	$5 = CALL $35($5, *($1), [17047])
	$5 = ($0 + [32])
	CALL $36($5, $5, *($0))
	*((($4 + [160]) + [56])) = *(($5 + [56]))
	*((($4 + [160]) + [48])) = *(($5 + [48]))
	*((($4 + [160]) + [40])) = *(($5 + [40]))
	*((($4 + [160]) + [32])) = *(($5 + [32]))
	*((($4 + [160]) + [24])) = *(($5 + [24]))
	*((($4 + [160]) + [16])) = *(($5 + [16]))
	*((($4 + [160]) + [8])) = *(($5 + [8]))
	*($4 + [160]) = *($5)
	$6 = CALL $114((($4 + [160]) + [64]), ($5 + [64]))
	*($4 + [240]) = *($5 + [80])
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$1
	$5 = *($3)
	CALL eosio_assert((( *($3 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ) <= [257]), [16967])
	$5 = ((uint_64)$8 > (uint_64)$7)
	$8 = *($1)
	$7 = *($2)
	*($4 + [264]) = ( $7 ? $8 : $5 )
	*($4 + [256]) = ( $8 ? $7 : $5 )
	$2 = ($0 + [72])
	*($4 + [248]) = $2
	CALL $32($4, ($4 + [248]), ($4 + [256]))
	$5 = [0]
	$3 = *($4 + [4])
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ((uint_64)$7 > (uint_64)$8)
	$8 = *($3 + [16])
	$7 = *($3 + [8])
	$5 = ( $3 ? [0] : (int_64)(((int_64)((int_64)*($4 + [256]) ^ (int_64)( $7 ? $8 : $5 )) | (int_64)((int_64)*($4 + [264]) ^ (int_64)( $8 ? $7 : $5 ))) == 0) )
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18003])
	$7 = *($4 + [8])
	$4 = CALL memcpy($4, $5, [160])
	CALL eosio_assert((*(( ($4 + [129]) ? ($4 + [128]) : ((int_64)$7 == (int_64)*($1)) )) == 0), [17401])
	$8 = *($1)
	CALL eosio_assert((((int_64)$7 == (int_64)$8) | ((int_64)$8 == (int_64)*($4 + [16]))), [17621])
	CALL $39($0, $4)
	*($4 + [287]) = ( [1] ? [2] : ((int_64)$7 == (int_64)*($1)) )
	*($4 + [248]) = [0]
	$7 = *($0)
	*($4 + [260]) = ($4 + [287])
	*($4 + [256]) = ($4 + [248])
	CALL $40($2, $4, $7, ($4 + [256]))
	$global$0 = ($4 + [288])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [272])
	$global$0 = $4
	CALL require_auth(*($1))
	$5 = CALL $35($5, *($1), [17047])
	$5 = ($0 + [32])
	CALL $36($5, $5, *($0))
	*((($4 + [160]) + [56])) = *(($5 + [56]))
	*((($4 + [160]) + [48])) = *(($5 + [48]))
	*((($4 + [160]) + [40])) = *(($5 + [40]))
	*((($4 + [160]) + [32])) = *(($5 + [32]))
	*((($4 + [160]) + [24])) = *(($5 + [24]))
	*((($4 + [160]) + [16])) = *(($5 + [16]))
	*((($4 + [160]) + [8])) = *(($5 + [8]))
	*($4 + [160]) = *($5)
	$6 = CALL $114((($4 + [160]) + [64]), ($5 + [64]))
	*($4 + [240]) = *($5 + [80])
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$1
	$5 = *($3)
	CALL eosio_assert((( *($3 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ) <= [257]), [16967])
	$5 = ((uint_64)$8 > (uint_64)$7)
	$8 = *($1)
	$7 = *($2)
	*($4 + [264]) = ( $7 ? $8 : $5 )
	*($4 + [256]) = ( $8 ? $7 : $5 )
	*($4 + [248]) = ($0 + [72])
	CALL $32($4, ($4 + [248]), ($4 + [256]))
	$2 = [0]
	$5 = [0]
	$3 = *($4 + [4])
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ((uint_64)$7 > (uint_64)$8)
	$8 = *($3 + [16])
	$7 = *($3 + [8])
	$5 = ( $3 ? [0] : (int_64)(((int_64)((int_64)*($4 + [256]) ^ (int_64)( $7 ? $8 : $5 )) | (int_64)((int_64)*($4 + [264]) ^ (int_64)( $8 ? $7 : $5 ))) == 0) )
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18003])
	$4 = CALL memcpy($4, $5, [160])
	if ( ((*([0] + [8192]) - *($4 + [144])) <= [86401]) ){ goto $label$3 }
	if ( ((int_64)*($4 + [24]) < (int_64)1) ){ goto $label$3 }
	if ( ((int_64)*($4 + [40]) < (int_64)1) ){ goto $label$3 }
	if ( ((int_64)((int_64)*($4 + [64]) | (int_64)*(($4 + [72]))) != (int_64)0) ){ goto $label$4 }
	if ( (int_64)(((int_64)*(($4 + [80])) | (int_64)*(($4 + [88]))) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_64)((int_64)*($4 + [96]) | (int_64)*(($4 + [104]))) != (int_64)0) ){ goto $label$5 }
	if ( (int_64)(((int_64)*(($4 + [112])) | (int_64)*(($4 + [120]))) == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = ((int_32)(*($4 + [128]) == 0) ^ (int_32)(*($4 + [129]) == 0))
	
.LABEL $label$3
	CALL eosio_assert($2, [17383])
	$7 = *($1)
	CALL eosio_assert((((int_64)$7 == (int_64)*($4 + [8])) | ((int_64)$7 == (int_64)*($4 + [16]))), [17621])
	$5 = *($4 + [128])
	$5 = ( $5 ? *($4 + [129]) : $5 )
	$3 = ($5 & [255])
	if ( ($3 == 0) ){ goto $label$7 }
	$5 = (( [2] ? [-1] : ((int_32)$3 == (int_32)[1]) ) + $5)
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL $37($0, $4, $1, ($5 & [255]))
	$global$0 = ($4 + [272])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [160])) = [0]
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [136]) = ($2 + $7)
	*($4 + [128]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18076])
	CALL memcpy(($4 + [144]), $2, [8])
	*($4 + [132]) = ($2 + [8])
	$3 = (($4 + [144]) + [8])
	CALL $33(($4 + [128]), $3)
	CALL eosio_assert(((uint_32)(*($4 + [136]) - *($4 + [132])) > (uint_32)[7]), [18076])
	CALL memcpy((($4 + [144]) + [24]), *($4 + [132]), [8])
	*($4 + [132]) = (*($4 + [132]) + [8])
	*(($8 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$8 = *($8)
	*((($4 + [176]) + [8])) = $8
	*(($9 = (($4 + [192]) + [8]))) = $8
	$10 = *($4)
	*($4 + [192]) = $10
	*($4 + [176]) = $10
	$8 = *($9)
	*((($4 + [208]) + [8])) = $8
	*((($4 + [16]) + [24])) = $8
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [192])
	*($4 + [32]) = $1
	*($4 + [208]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [126])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	$0 = *($4 + [144])
	$3 = CALL $114(($4 + [208]), $3)
	*($4 + [176]) = *($4 + [168])
	*($4 + [192]) = $0
	$8 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [192])), (int_32 $3), (int_32 ($4 + [176])), (int_32 $6))
	if ( (*($4 + [208]) & [1]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $140($2)
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = *(($4 + [112]))
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *(($4 + [72]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = ($4 + [116])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$22
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $5
	
.LABEL $label$18
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return $2
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL require_auth(*($1))
	$5 = [1]
	$6 = *($2)
	if ( ((uint_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) > (uint_32)[12]) ){ goto $label$4 }
	$6 = ($6 & [1])
	$6 = *($7)
	$7 = CALL $114(($4 + [16]), $2)
	$8 = ( *($7 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($8 == 0) ){ goto $label$2 }
	$6 = ( *($7 + [8]) ? ($7 + [1]) : $6 )
	
.LOOP $label$5:
	$5 = *($6)
	$9 = CALL $124($5)
	if ( ((int_32)$5 == (int_32)[46]) ){ goto $label$6 }
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$6 = ($6 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$5 = [1]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([0], [17547])
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [17547])
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($3) != (int_64)*($1)), [17563])
	$7 = ($0 + [32])
	$10 = *($3)
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$11 }
	$8 = *(($0 + [60]))
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$12:
	$6 = ($8 + [-24])
	$5 = *($6)
	if ( ((int_64)*($5) == (int_64)$10) ){ goto $label$10 }
	$8 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	$6 = [1]
	goto $label$7 
	
.LABEL $label$10
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$7), [18241])
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-6030912129794572288, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $41($7, $6)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$7), [18241])
	
.LABEL $label$8
	$6 = ((int_32)$5 != (int_32)[0])
	
.LABEL $label$7
	CALL eosio_assert($6, [17581])
	$10 = *($1)
	$8 = *(($0 + [60]))
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$16:
	$6 = ($8 + [-24])
	$5 = *($6)
	if ( ((int_64)*($5) == (int_64)$10) ){ goto $label$15 }
	$8 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$7), [18241])
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	$6 = CALL db_find_i64(*($0 + [32]), *(($0 + [40])), (int_64)-6030912129794572288, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $41($7, $6)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$7), [18241])
	
.LABEL $label$13
	CALL eosio_assert(($5 == 0), [17601])
	$10 = *($0)
	*($4 + [4]) = $2
	*($4) = $1
	*($4 + [8]) = $3
	*($4 + [56]) = $10
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [18527])
	*($4 + [32]) = $7
	*($4 + [36]) = $4
	*($4 + [40]) = ($4 + [56])
	*(($6 = CALL _Znwj([104]))) = (int_64)0
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [72]) = [0]
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = $7
	CALL $50(($4 + [32]), $6)
	*($4 + [48]) = $6
	$10 = *($6)
	*($4 + [32]) = $10
	$5 = *($6 + [92])
	*($4 + [28]) = $5
	$9 = ($0 + [60])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$19 }
	*($8 + [8]) = $10
	*($8 + [16]) = $5
	*($4 + [48]) = [0]
	*($8) = $6
	*($9) = ($8 + [24])
	$6 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $51(($0 + [56]), ($4 + [48]), ($4 + [32]), ($4 + [28]))
	$6 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( $6 ){ goto $label$17 }
	
.LABEL $label$18
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$17
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$20
	CALL _ZdlPv($6)
	$global$0 = ($4 + [64])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $134(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8244])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $134(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $136($1)
	
.LABEL $label$2
	*(CALL $125()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $136(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $140($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$4 = ($global$0 - [272])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$9 = ((uint_64)$8 > (uint_64)$6)
	$7 = ($1 + [8])
	$8 = *($7)
	$5 = ($1 + [16])
	$6 = *($5)
	*((($4 + [160]) + [24])) = ( $6 ? $8 : $9 )
	*($4 + [160]) = $8
	*($4 + [168]) = $6
	*($4 + [176]) = ( $8 ? $6 : $9 )
	$12 = *($3 + [4])
	*(($9 = ( ($10 = ($1 + [24])) ? ($11 = ($1 + [40])) : *(*($3)) ))) = *($12)
	*(($9 + [8])) = *(($12 + [8]))
	$6 = *($1)
	$12 = *($3 + [8])
	*(($9 = ( ($13 = ($1 + [64])) ? ($14 = ($1 + [96])) : *(*($3)) ))) = *($12)
	*(($9 + [24])) = *(($12 + [24]))
	*(($9 + [16])) = *(($12 + [16]))
	*(($9 + [8])) = *(($12 + [8]))
	$3 = *([0] + [8192])
	*(($1 + ( [132] ? [136] : *(*($3)) ))) = $3
	*($1 + [144]) = $3
	*($1 + [140]) = [0]
	CALL eosio_assert([1], [18182])
	*($4 + [152]) = ($4 + [139])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [192]) = ($4 + [144])
	*($4 + [212]) = $7
	*($4 + [208]) = $1
	*($4 + [216]) = $5
	*($4 + [220]) = $10
	*($4 + [224]) = $11
	*($4 + [228]) = $13
	*($4 + [232]) = $14
	*($4 + [236]) = ($1 + [128])
	*($4 + [240]) = ($1 + [129])
	*($4 + [244]) = ($1 + [132])
	*($4 + [248]) = ($1 + [136])
	*($4 + [252]) = ($1 + [140])
	*($4 + [256]) = ($1 + [144])
	*($4 + [260]) = ($1 + [148])
	CALL $73(($4 + [208]), ($4 + [192]))
	CALL db_update_i64(*(($1 + [156])), $2, $4, [139])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = (($4 + [160]) | [8])
	*($4 + [208]) = *($7)
	if ( (CALL $130(($4 + [160]), ($4 + [208]), [8]) == 0) ){ goto $label$2 }
	$9 = *($1 + [160])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$3 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($4 + [192]), $6)
	*(($1 + [160])) = $9
	
.LABEL $label$3
	CALL db_idx64_update($9, $2, ($4 + [208]))
	
.LABEL $label$2
	$9 = (($4 + [160]) + [16])
	$12 = ($1 + [16])
	*($4 + [208]) = *($12)
	if ( (CALL $130($3, ($4 + [208]), [8]) == 0) ){ goto $label$4 }
	$7 = ($1 + [164])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($4 + [192]), $6)
	*($7) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, $2, ($4 + [208]))
	
.LABEL $label$4
	$3 = ((uint_64)$15 > (uint_64)$8)
	$15 = *(($1 + [8]))
	$8 = *($12)
	*($4 + [216]) = ( $8 ? $15 : $3 )
	*($4 + [208]) = ( $15 ? $8 : $3 )
	if ( (CALL $130($9, ($4 + [208]), [16]) == 0) ){ goto $label$6 }
	$3 = ($1 + [168])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534850, ($4 + [192]), $6)
	*($3) = $1
	
.LABEL $label$7
	CALL db_idx128_update($1, $2, ($4 + [208]))
	
.LABEL $label$6
	$global$0 = ($4 + [272])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17840])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17840])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $123($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $68(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $64($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17840])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17840])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $90(CALL $89($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [8]) = $6
	*($5 + [16]) = *($2)
	*($5 + [24]) = *($3)
	$4 = CALL $114((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = (int_64)6138663591592764928
	*(($3 = CALL _Znwj([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$2 = ($3 + [16])
	*((($5 + [56]) + [24])) = $2
	*(($5 + [76])) = $2
	*($5 + [72]) = $3
	*($5 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $64($4, $3)
	$4 = *(($5 + [88]))
	$3 = *(($5 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [100]) = $3
	*($5 + [96]) = $3
	*($5 + [104]) = $4
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $65(($5 + [120]), ($5 + [112]))
	CALL $66(($5 + [96]), ($5 + [56]))
	$3 = *($5 + [96])
	CALL send_inline($3, (*($5 + [100]) - $3))
	$3 = *($5 + [96])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [100]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [84])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL eosio_assert(((uint_64)*($1 + [24]) >= (uint_64)*($3)), [17024])
	$8 = ($1 + [16])
	$7 = ($1 + [8])
	$9 = ( $7 ? $8 : $2 )
	$6 = ($0 + [32])
	$10 = CALL $35($6, *($9), [17047])
	$11 = ((uint_64)((int_64)((int_64)*($3) * (int_64)( (int_64)970 ? (int_64)975 : (int_64)(*($10 + [80]) == 0) )) << (int_64)1) / (uint_64)(int_64)1000)
	$12 = CALL $131([17066])
	if ( ($12 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17673])
	goto $label$3 
	
.LABEL $label$4
	if ( ($12 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = (int_64)0
	
.LOOP $label$5:
	$14 = *(($12 + [17065]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$6
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$5 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$13 = (int_64)0
	
.LABEL $label$1
	$15 = ( $8 ? $7 : $2 )
	*($5 + [48]) = $11
	*($5 + [56]) = ((int_64)$13 | (int_64)4)
	CALL eosio_assert([1], [17771])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$13 = $11
	$14 = [1]
	$2 = $12
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$13 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$2 = ($12 + [1])
	$12 = $2
	if ( $14 ){ goto $label$11 }
	$14 = [1]
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$14 = [0]
	
.LABEL $label$7
	CALL eosio_assert($14, [17820])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$12 = CALL $131([17070])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [16]) = ($12 << [1])
	$14 = (($5 + [16]) | [1])
	if ( $12 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$2 = (($12 + [16]) & [-16])
	$14 = CALL _Znwj($2)
	*($5 + [16]) = ($2 | [1])
	*($5 + [24]) = $14
	*($5 + [20]) = $12
	
.LABEL $label$23
	CALL memcpy($14, [17070], $12)
	
.LABEL $label$22
	*(($14 + $12)) = [0]
	CALL $5(($5 + [32]), $15, ($5 + [16]))
	CALL $61($0, $12, $9, ($5 + [48]), ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$25
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$26
	$11 = *($3)
	$12 = ((int_64)$11 < (int_64)$13)
	$11 = *(($1 + [24]))
	$13 = *($1 + [40])
	$13 = ( $13 ? $11 : $12 )
	if ( ((uint_64)$13 <= (uint_64)$11) ){ goto $label$19 }
	$1 = ( $8 ? $7 : $12 )
	$2 = ((int_64)*($1) == (int_64)*($8))
	$11 = (int_64))($13 - $11)
	$12 = CALL $131([17066])
	if ( ($12 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [17673])
	goto $label$28 
	
.LABEL $label$29
	if ( ($12 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$13 = (int_64)0
	
.LOOP $label$30:
	$14 = *(($12 + [17065]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$31
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$30 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$20 
	
.LABEL $label$27
	$13 = (int_64)0
	goto $label$20 
	
.LABEL $label$21
	CALL $113(($5 + [16]))
	
.LABEL $label$20
	$8 = ( $7 ? $8 : $2 )
	*($5 + [56]) = ((int_64)$13 | (int_64)4)
	*($5 + [48]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17771])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$13 = $11
	$14 = [1]
	$2 = $12
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$13 = $11
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$2 = ($12 + [1])
	$12 = $2
	if ( $14 ){ goto $label$36 }
	$14 = [1]
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$14 = [0]
	
.LABEL $label$32
	CALL eosio_assert($14, [17820])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$12 = CALL $131([17077])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$39 }
	*($5 + [16]) = ($12 << [1])
	$14 = (($5 + [16]) | [1])
	if ( $12 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$2 = (($12 + [16]) & [-16])
	$14 = CALL _Znwj($2)
	*($5 + [16]) = ($2 | [1])
	*($5 + [24]) = $14
	*($5 + [20]) = $12
	
.LABEL $label$38
	CALL memcpy($14, [17077], $12)
	
.LABEL $label$37
	*(($14 + $12)) = [0]
	CALL $5(($5 + [32]), $8, ($5 + [16]))
	CALL $61($0, $12, $1, ($5 + [48]), ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$40
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$19
	$13 = *($10 + [80])
	if ( (int_64)($13 == 0) ){ goto $label$16 }
	$12 = CALL $35($6, $13, [17047])
	CALL eosio_assert((uint_64)(*($12 + [48]) <= (int_64)1000), [17084])
	$13 = ((int_64)((uint_64)*($3) / (uint_64)(int_64)100) + (int_64)*($12 + [48]))
	*($5 + [8]) = $13
	*($5 + [7]) = ((uint_64)$13 > (uint_64)(int_64)999)
	$13 = *($0)
	*($5 + [52]) = ($5 + [8])
	*($5 + [48]) = ($5 + [7])
	CALL $62($6, $12, $13, ($5 + [48]))
	if ( (*($5 + [7]) == 0) ){ goto $label$16 }
	$11 = *($5 + [8])
	$12 = CALL $131([17066])
	if ( ($12 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [17673])
	goto $label$42 
	
.LABEL $label$43
	if ( ($12 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$13 = (int_64)0
	
.LOOP $label$44:
	$14 = *(($12 + [17065]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$45
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$44 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$17 
	
.LABEL $label$41
	$13 = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	CALL $113(($5 + [16]))
	
.LABEL $label$17
	$1 = ($10 + [80])
	*($5 + [56]) = ((int_64)$13 | (int_64)4)
	*($5 + [48]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17771])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$13 = $11
	$14 = [1]
	$2 = $12
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$13 = $11
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$2 = ($12 + [1])
	$12 = $2
	if ( $14 ){ goto $label$50 }
	$14 = [1]
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$14 = [0]
	
.LABEL $label$46
	CALL eosio_assert($14, [17820])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$12 = CALL $131([17102])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$53 }
	*($5 + [16]) = ($12 << [1])
	$14 = (($5 + [16]) | [1])
	if ( $12 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$2 = (($12 + [16]) & [-16])
	$14 = CALL _Znwj($2)
	*($5 + [16]) = ($2 | [1])
	*($5 + [24]) = $14
	*($5 + [20]) = $12
	
.LABEL $label$52
	CALL memcpy($14, [17102], $12)
	
.LABEL $label$51
	*(($14 + $12)) = [0]
	CALL $5(($5 + [32]), $9, ($5 + [16]))
	CALL $61($0, $12, $1, ($5 + [48]), ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$54
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$16
	$11 = *($4)
	if ( (uint_64)($11 <= (int_64)1000) ){ goto $label$13 }
	$12 = CALL $131([17113])
	if ( ($12 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [17673])
	goto $label$56 
	
.LABEL $label$57
	if ( ($12 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$13 = (int_64)0
	
.LOOP $label$58:
	$14 = *(($12 + [17112]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$59
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$58 }
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	goto $label$14 
	
.LABEL $label$55
	$13 = (int_64)4
	goto $label$14 
	
.LABEL $label$15
	CALL $113(($5 + [16]))
	
.LABEL $label$14
	*($5 + [48]) = $11
	*($5 + [56]) = $13
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17771])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$13 = $11
	$14 = [1]
	$2 = $12
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$13 = $11
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$2 = ($12 + [1])
	$12 = $2
	if ( $14 ){ goto $label$64 }
	$14 = [1]
	$12 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$14 = [0]
	
.LABEL $label$60
	CALL eosio_assert($14, [17820])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$12 = CALL $131([17070])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$67 }
	*($5 + [16]) = ($12 << [1])
	$14 = (($5 + [16]) | [1])
	if ( $12 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$2 = (($12 + [16]) & [-16])
	$14 = CALL _Znwj($2)
	*($5 + [16]) = ($2 | [1])
	*($5 + [24]) = $14
	*($5 + [20]) = $12
	
.LABEL $label$66
	CALL memcpy($14, [17070], $12)
	
.LABEL $label$65
	*(($14 + $12)) = [0]
	CALL $5(($5 + [32]), $15, ($5 + [16]))
	CALL $63($0, $9, ($5 + [48]), ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$68
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$13
	$global$0 = ($5 + [64])
	return (unreachable)
	
.LABEL $label$12
	CALL $113(($5 + [16]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *($0)
	*((($4 + [8]) + [16])) = *(($2 + [8]))
	*($4 + [8]) = *($1)
	*($4 + [16]) = *($2)
	$3 = CALL $114((($4 + [8]) + [24]), $3)
	*($4 + [56]) = (int_64)-4992121834821386240
	*($4 + [48]) = (int_64)-6293002809492892368
	*(($2 = CALL _Znwj([16]))) = $5
	*($2 + [8]) = (int_64)3617214756542218240
	*(($4 + [84])) = [0]
	$1 = ($2 + [16])
	*((($4 + [48]) + [24])) = $1
	*(($4 + [68])) = $1
	*($4 + [64]) = $2
	*($4 + [76 align=4]) = (int_64)0
	$2 = *($3)
	$1 = ( *((($4 + [8]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [24])
	$5 = (CASTING uint_64)(uint_32 $1)
	$1 = (($4 + [48]) + [28])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $64($1, $2)
	$1 = *(($4 + [80]))
	$2 = *(($4 + [76]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$2 = [0]
	
.LABEL $label$2
	*($4 + [88]) = $2
	*($4 + [96]) = $1
	$1 = ($1 - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [17840])
	CALL memcpy($2, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [17840])
	CALL memcpy(($2 + [8]), (($4 + [8]) + [8]), [8])
	*($4 + [104]) = *((($4 + [8]) + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [17840])
	CALL memcpy(($2 + [16]), ($4 + [104]), [8])
	*($4 + [92]) = ($2 + [24])
	CALL $68(($4 + [88]), $3)
	CALL $66(($4 + [88]), ($4 + [48]))
	$2 = *($4 + [88])
	CALL send_inline($2, (*($4 + [92]) - $2))
	$2 = *($4 + [88])
	if ( ($2 == 0) ){ goto $label$4 }
	*($4 + [92]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($4 + [76])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [80])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$7
	$global$0 = ($4 + [112])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	$6 = *(*(($3 + [4])))
	$7 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$1 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)$6)
	$6 = (int_64)0
	
.LABEL $label$1
	*($1 + [48]) = $6
	CALL eosio_assert([1], [18182])
	$3 = *($1 + [64])
	$8 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [72])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [64])
	$9 = ($1 + [48])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $136($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [60]) = $9
	*($5 + [72]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [32])
	*($5 + [56]) = ($1 + [40])
	*($5 + [64]) = ($1 + [56])
	*($5 + [68]) = ($1 + [60])
	*($5 + [76]) = ($1 + [80])
	CALL $67(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $140($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18684])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035938067010945024)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18630])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18630])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $57(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [17840])
	CALL memcpy(*($0 + [4]), $2, [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18684])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035931840378960896)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18630])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18630])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $58(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [156]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18684])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18630])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18630])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $55(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $136($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8244])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $136($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $104 ()
{
	int_64 $0
	int_32 $1
	int_32 $2
	int_32 $3
	$0 = CALL current_time()
	*([0] + [8196 align=4]) = (int_64)0
	*([0] + [8192]) = ((uint_64)$0 / (uint_64)(int_64)1000000)
	*([0] + [8204]) = [0]
	$1 = CALL _Znwj([5])
	*([0] + [8196]) = $1
	*($1) = [588515841]
	*($1 + [4]) = [55]
	$1 = ($1 + [5])
	*([0] + [8204]) = $1
	*([0] + [8200]) = $1
	CALL $127([12], [0], [8192])
	*([0] + [8208 align=4]) = (int_64)0
	*([0] + [8216]) = [0]
	$1 = CALL $131([16936])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*([0] + [8208]) = ($1 << [1])
	$2 = [8209]
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*([0] + [8208]) = ($3 | [1])
	*([0] + [8216]) = $2
	*([0] + [8212]) = $1
	
.LABEL $label$5
	CALL memcpy($2, [16936], $1)
	
.LABEL $label$4
	*(($2 + $1)) = [0]
	CALL $127([13], [0], [8192])
	*([0] + [8220 align=4]) = (int_64)0
	*([0] + [8228]) = [0]
	$1 = CALL $131([16953])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$9 }
	*([0] + [8220]) = ($1 << [1])
	$2 = [8221]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*([0] + [8220]) = ($3 | [1])
	*([0] + [8228]) = $2
	*([0] + [8224]) = $1
	
.LABEL $label$8
	CALL memcpy($2, [16953], $1)
	
.LABEL $label$7
	*(($2 + $1)) = [0]
	CALL $127([14], [0], [8192])
	*([0] + [8232 align=4]) = (int_64)0
	*([0] + [8240]) = [0]
	$1 = CALL $131([16960])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$12 }
	*([0] + [8232]) = ($1 << [1])
	$2 = [8233]
	if ( $1 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*([0] + [8232]) = ($3 | [1])
	*([0] + [8240]) = $2
	*([0] + [8236]) = $1
	
.LABEL $label$11
	CALL memcpy($2, [16960], $1)
	
.LABEL $label$10
	*(($2 + $1)) = [0]
	CALL $127([15], [0], [8192])
	return (unreachable)
	
.LABEL $label$3
	CALL $113([8208])
	
.LABEL $label$2
	CALL $113([8220])
	
.LABEL $label$1
	CALL $113([8232])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17840])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17840])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17840])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($0 + [4]), ($4 + [17]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($1 + [4]), ($4 + [24]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = *(($4 + [32]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $0) > (int_32)[7]), [17840])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7035938067010945024, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $57($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $101(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18578])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [28]) = *([0] + [8192])
	*($1 + [24]) = *(*($5 + [12]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = $2
	$5 = ($6 + [-32])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-3])
	*($3 + [24]) = ($3 + [8])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [28])
	CALL $81(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)7035938067010945024, *(*($0 + [8])), $7, $5, [29])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$7 = *($4)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [32]) = *($6)
	*($1 + [40]) = CALL db_idx64_store($7, (int_64)7035938067010945024, $9, $10, ($3 + [32]))
	$7 = *($0)
	$9 = *($4)
	$10 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [44])) = CALL db_idx64_store($9, (int_64)7035938067010945025, $7, $10, ($3 + [32]))
	$10 = *($0)
	$11 = *($4)
	$12 = *($1)
	$0 = ((uint_64)$9 > (uint_64)$7)
	$9 = *($6)
	$7 = *($2)
	*($3 + [40]) = ( $7 ? $9 : $0 )
	*($3 + [32]) = ( $9 ? $7 : $0 )
	*(($1 + [48])) = CALL db_idx128_store($11, (int_64)7035938067010945026, $10, $12, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [88])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [72])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $55($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $102(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [88])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18578])
	*($1) = *($7)
	$5 = *(*($5 + [4]))
	$7 = ($5 + [12])
	$6 = ($5 + [8])
	*($1 + [8]) = *(*(( $6 ? $7 : $5 )))
	$9 = *([0] + [8192])
	*($1 + [144]) = $9
	*($1 + [148]) = $9
	*($1 + [16]) = *(*(( $7 ? $6 : $5 )))
	$2 = $2
	$5 = ($2 + [-144])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-5])
	*($3 + [24]) = ($3 + [8])
	$2 = ($1 + [8])
	*($3 + [36]) = $2
	*($3 + [32]) = $1
	$6 = ($1 + [16])
	*($3 + [40]) = $6
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [96])
	*($3 + [60]) = ($1 + [128])
	*($3 + [64]) = ($1 + [129])
	*($3 + [68]) = ($1 + [132])
	*($3 + [72]) = ($1 + [136])
	*($3 + [76]) = ($1 + [140])
	*($3 + [80]) = ($1 + [144])
	*($3 + [84]) = ($1 + [148])
	CALL $73(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($4 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $8, $5, [139])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$8 = *($4)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [32]) = *($2)
	*($1 + [160]) = CALL db_idx64_store($8, (int_64)7035937633859534848, $11, $12, ($3 + [32]))
	$8 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [32]) = *($6)
	*(($1 + [164])) = CALL db_idx64_store($11, (int_64)7035937633859534849, $8, $12, ($3 + [32]))
	$12 = *($0)
	$13 = *($4)
	$14 = *($1)
	$0 = ((uint_64)$11 > (uint_64)$8)
	$11 = *($2)
	$8 = *($6)
	*($3 + [40]) = ( $8 ? $11 : $0 )
	*($3 + [32]) = ( $11 ? $8 : $0 )
	*(($1 + [168])) = CALL db_idx128_store($13, (int_64)7035937633859534850, $12, $14, ($3 + [32]))
	$global$0 = ($3 + [96])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [40])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035938067010945024, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [44]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035938067010945025, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [48]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035938067010945026, $4, *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx128_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [112])
	$global$0 = $6
	$7 = *($0)
	*(($6 + [32])) = *(($5 + [8]))
	*($6 + [16]) = $3
	*($6 + [17]) = $4
	*($6 + [40]) = $7
	*($6 + [48]) = (int_64)-4994024814571159552
	*($6) = *($1)
	*($6 + [8]) = *($2)
	*($6 + [24]) = *($5)
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = (int_64)3617214756542218240
	*(($6 + [76])) = [0]
	$9 = ($8 + [16])
	*(($6 + [64])) = $9
	*(($6 + [60])) = $9
	*($6 + [56]) = $8
	*($6 + [68 align=4]) = (int_64)0
	CALL $64(($6 + [68]), [34])
	$8 = *((($6 + [40]) + [32]))
	$9 = *($6 + [68])
	*($6 + [84]) = $9
	*($6 + [80]) = $9
	*($6 + [88]) = $8
	*($6 + [96]) = ($6 + [80])
	*($6 + [104]) = $6
	CALL $88(($6 + [104]), ($6 + [96]))
	CALL $66(($6 + [80]), ($6 + [40]))
	$8 = *($6 + [80])
	CALL send_inline($8, (*($6 + [84]) - $8))
	$8 = *($6 + [80])
	if ( ($8 == 0) ){ goto $label$1 }
	*($6 + [84]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$8 = *($6 + [68])
	if ( ($8 == 0) ){ goto $label$2 }
	*(($6 + [72])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$8 = *($6 + [56])
	if ( ($8 == 0) ){ goto $label$3 }
	*(($6 + [60])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$7 = *($0)
	*(($6 + [32])) = *(($5 + [8]))
	*($6 + [16]) = $4
	*($6 + [17]) = $3
	*($6 + [40]) = $7
	*($6 + [48]) = (int_64)-4994024814571159552
	*($6) = *($2)
	*($6 + [8]) = *($1)
	*($6 + [24]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = (int_64)3617214756542218240
	*(($6 + [76])) = [0]
	$8 = ($5 + [16])
	*(($6 + [64])) = $8
	*(($6 + [60])) = $8
	*($6 + [56]) = $5
	*($6 + [68 align=4]) = (int_64)0
	CALL $64(($6 + [68]), [34])
	$5 = *((($6 + [40]) + [32]))
	$8 = *($6 + [68])
	*($6 + [84]) = $8
	*($6 + [80]) = $8
	*($6 + [88]) = $5
	*($6 + [96]) = ($6 + [80])
	*($6 + [104]) = $6
	CALL $88(($6 + [104]), ($6 + [96]))
	CALL $66(($6 + [80]), ($6 + [40]))
	$5 = *($6 + [80])
	CALL send_inline($5, (*($6 + [84]) - $5))
	$5 = *($6 + [80])
	if ( ($5 == 0) ){ goto $label$4 }
	*($6 + [84]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$5 = *($6 + [68])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($6 + [72])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$5 = *($6 + [56])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($6 + [60])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$global$0 = ($6 + [112])
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	*($3 + [11]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [10]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [9]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [8]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = *(($2 + [8]))
	*($3 + [3]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [2]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [1]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = (CASTING uint_32)(uint_64 $4)
	*($3 + [15]) = $6
	*($3 + [14]) = uint_32($6 >> [8])
	*($3 + [13]) = uint_32($6 >> [16])
	*($3 + [12]) = uint_32($6 >> [24])
	$6 = (CASTING uint_32)(uint_64 $5)
	*($3 + [7]) = $6
	*($3 + [6]) = uint_32($6 >> [8])
	*($3 + [5]) = uint_32($6 >> [16])
	*($3 + [4]) = uint_32($6 >> [24])
	$4 = *(($2 + [24]))
	*($3 + [23]) = $4
	$5 = *($2 + [16])
	*($3 + [27]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [26]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [25]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [24]) = (uint_64)$5 >> (uint_64)(int_64)56)
	*($3 + [19]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [18]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [17]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [16]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$2 = (CASTING uint_32)(uint_64 $4)
	*($3 + [22]) = uint_32($2 >> [8])
	*($3 + [21]) = uint_32($2 >> [16])
	*($3 + [20]) = uint_32($2 >> [24])
	$2 = (CASTING uint_32)(uint_64 $5)
	*($3 + [31]) = $2
	*($3 + [30]) = uint_32($2 >> [8])
	*($3 + [29]) = uint_32($2 >> [16])
	*($3 + [28]) = uint_32($2 >> [24])
	CALL assert_sha256($0, $1, $3)
	$global$0 = ($3 + [32])
}

void .FUNC $140 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16924])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16732]
	$3 = (((int_32)$1 * (int_32)[12]) + [16732])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18292])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $92(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $140($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17840])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $100(*($1), *($0 + [20]))
	CALL $100(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17840])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17840])
	CALL memcpy(*($0 + [4]), $4, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL $131([17113])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17673])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [17112]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [8]) = (int_64)-6293002809492892368
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [16]) = $5
	$4 = CALL $71(($3 + [8]), $5, [17047])
	$5 = *($4 + [16])
	$5 = ((uint_64)*($1) / (uint_64)((uint_64)((int_64)$5 * (int_64)1000) / (uint_64)((int_64))($5 - *($4)) * (int_64)((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)$2 / (uint_32)[5])) * (int_64)5) + (int_64)100) & (int_64)255))))
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $71 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [18241])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $72($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [18241])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	$8 = *($6 + [8])
	$6 = *($5 + [4])
	$9 = *($6 + [16])
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$10 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7035931840378960896, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $58($6, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$9 = *(*(CALL $103(($3 + [32])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [18578])
	*($1) = *(($6 + [16]))
	$11 = ((uint_64)$8 > (uint_64)$7)
	$6 = ($6 + [8])
	$6 = *($5)
	$10 = ($6 + [16])
	*($1 + [8]) = *(( $10 ? $6 : $11 ))
	*($1 + [16]) = *(( $6 ? $10 : $11 ))
	$10 = *($5 + [24])
	$6 = *($5 + [20])
	$11 = *(*($5 + [16]))
	$5 = *(*($5 + [12]))
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$3 }
	*($1 + [24]) = (*($1 + [24]) + [1])
	$12 = ($1 + [32])
	goto $label$4 
	
.LABEL $label$5
	*($1 + [28]) = (*($1 + [28]) + [1])
	$12 = ($1 + [40])
	
.LABEL $label$4
	*($12) = ((int_64)*($12) + (int_64)*($6))
	
.LABEL $label$3
	*($1 + [56]) = *($6)
	*($1 + [49]) = $11
	*($1 + [48]) = $5
	*($1 + [72]) = *([0] + [8192])
	$9 = *($10)
	*($1 + [64]) = ( $9 ? (int_64)0 : ((uint_64)$9 > (uint_64)(int_64)999) )
	$6 = $2
	$5 = ($6 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-10])
	*($3 + [24]) = ($3 + [8])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [28])
	*($3 + [52]) = ($1 + [32])
	*($3 + [56]) = ($1 + [40])
	*($3 + [60]) = ($1 + [48])
	*($3 + [64]) = ($1 + [49])
	*($3 + [68]) = ($1 + [56])
	*($3 + [72]) = ($1 + [64])
	*($3 + [76]) = ($1 + [72])
	CALL $87(($3 + [32]), ($3 + [24]))
	$9 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($4 + [8]), (int_64)7035931840378960896, *(*($0 + [8])), $9, $5, [70])
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = ($4 + [8])
	$9 = *($5)
	$0 = *(($0 + [8]))
	$7 = *($0)
	$8 = *($1)
	*($3 + [32]) = *($6)
	*($1 + [84]) = CALL db_idx64_store($9, (int_64)7035931840378960896, $7, $8, ($3 + [32]))
	$9 = *($0)
	$7 = *($5)
	$8 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [88])) = CALL db_idx64_store($7, (int_64)7035931840378960897, $9, $8, ($3 + [32]))
	$8 = *($0)
	$13 = *($5)
	$14 = *($1)
	$5 = ((uint_64)$7 > (uint_64)$9)
	$7 = *($6)
	$9 = *($2)
	*($3 + [40]) = ( $9 ? $7 : $5 )
	*($3 + [32]) = ( $7 ? $9 : $5 )
	*(($1 + [92])) = CALL db_idx128_store($13, (int_64)7035931840378960898, $8, $14, ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)7035931840378960898, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)$7), [18241])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $58($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)7035931840378960896, $6))
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)$7), [18241])
	
.LABEL $label$2
	*(($4 + [92])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_64)*($1 + [24]) < (int_64)1) ){ goto $label$2 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $131([17077])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$4 = ($1 + [24])
	$5 = ($1 + [16])
	$6 = ($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2) = ($3 << [1])
	$7 = ($2 | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2) = ($8 | [1])
	*($2 + [8]) = $7
	*($2 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($7, [17077], $3)
	
.LABEL $label$3
	*(($7 + $3)) = [0]
	CALL $5(($2 + [16]), $5, $2)
	CALL $61($0, $2, $6, $4, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$6
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$2
	if ( ((int_64)*($1 + [40]) < (int_64)1) ){ goto $label$7 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $131([17077])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = ($1 + [40])
	$4 = ($1 + [8])
	$5 = ($1 + [16])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($2) = ($3 << [1])
	$1 = ($2 | [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($3 + [16]) & [-16])
	$1 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $1
	*($2 + [4]) = $3
	
.LABEL $label$9
	CALL memcpy($1, [17077], $3)
	
.LABEL $label$8
	*(($1 + $3)) = [0]
	CALL $5(($2 + [16]), $4, $2)
	CALL $61($0, $2, $5, $7, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$11
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$7
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $113($2)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	*($1 + [56]) = *([0] + [8192])
	$5 = *($1)
	CALL eosio_assert([1], [18182])
	$6 = *($1 + [64])
	$7 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [64])
	$9 = ($1 + [56])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $136($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [64]) = $9
	*($4 + [72]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [32])
	*($4 + [56]) = ($1 + [40])
	*($4 + [60]) = ($1 + [48])
	*($4 + [68]) = ($1 + [60])
	*($4 + [76]) = ($1 + [80])
	CALL $67(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $140($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	float_64 $15
	float_64 $16
	int_32 $17
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = [0]
	$6 = *($1 + [129])
	$8 = ( $6 ? $3 : $6 )
	$6 = *($1 + [128])
	$7 = ( $6 ? $3 : $6 )
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$6 = ($7 - $8)
	$5 = ( [1] ? ( [1] ? [2] : ((int_32)$6 == (int_32)[-2]) ) : ((int_32)$6 == (int_32)[1]) )
	
.LABEL $label$1
	*($4 + [123]) = $5
	$6 = ((int_32)$5 == (int_32)[1])
	*($4 + [122]) = ( ( $7 ? $8 : $6 ) ? $3 : $5 )
	if ( ($5 == 0) ){ goto $label$3 }
	$10 = *($1 + [24])
	$9 = *($1 + [40])
	*($4 + [112]) = ( $9 ? $10 : ((int_64)$9 < (int_64)$10) )
	$12 = ($1 + [16])
	$11 = ($1 + [8])
	$6 = CALL $35(($0 + [32]), *(( $11 ? $12 : $6 )), [17047])
	$3 = [0]
	$15 = (CASTING float_64)(uint_32 (*($6 + [12]) + *($6 + [8])))
	$13 = *([0] + [8196])
	$14 = (CASTING float_64)(uint_32 *($13))
	if ( ((int_32)((float_64)$14 <= (float_64)$15) ^ (int_32)[1]) ){ goto $label$4 }
	$13 = ((*([0] + [8200]) - $13) & [65535])
	$3 = [0]
	$16 = $14
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$6 = ($3 & [65535])
	if ( ((uint_32)$13 <= (uint_32)$6) ){ goto $label$6 }
	$14 = (CASTING float_64)(uint_32 *((*([0] + [8196]) + $6)))
	$16 = ((float_64)$16 + (float_64)$14)
	if ( ((float_64)$16 <= (float_64)$15) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$14 = ((float_64)$14 * (float_64)((float_64)((float_64)CALL $128($14) / (float_64)CALL $128((CASTING float_64)(uint_32 $6))) / (float_64)(float_64)1.895189))
	$16 = ((float_64)$16 + (float_64)$14)
	if ( ((float_64)$16 <= (float_64)$15) ){ goto $label$5 }
	
.LABEL $label$4
	*($4 + [104]) = CALL $70($3, ($4 + [112]), ($3 & [65535]))
	CALL $60($0, $1, ((int_32)$5 == (int_32)[1]), ($4 + [112]), ($4 + [104]))
	goto $label$2 
	
.LABEL $label$3
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	$12 = ($1 + [16])
	$11 = ($1 + [8])
	
.LABEL $label$2
	*(($13 = ($4 + [96]))) = [0]
	*(($4 + [102])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	*($4 + [100]) = [0]
	$9 = *($0)
	*($4 + [64]) = $9
	*($4 + [72]) = $9
	*($4 + [56]) = ($4 + [64])
	$3 = ((uint_64)$10 > (uint_64)$9)
	$10 = *($1 + [8])
	$9 = *($1 + [16])
	*($4 + [40]) = ( $9 ? $10 : $3 )
	*($4 + [32]) = ( $10 ? $9 : $3 )
	CALL $74($4, ($4 + [56]), ($4 + [32]))
	$3 = *($4 + [4])
	if ( ($3 == 0) ){ goto $label$9 }
	$6 = ((uint_64)$9 > (uint_64)$10)
	$10 = *($3 + [16])
	$9 = *($3 + [8])
	if ( ((int_64)(((int_64)((int_64)*($4 + [32]) ^ (int_64)( $9 ? $10 : $6 )) | (int_64)((int_64)*($4 + [40]) ^ (int_64)( $10 ? $9 : $6 ))) == 0) == 0) ){ goto $label$9 }
	$9 = *($2)
	*($4 + [4]) = $1
	*($4) = $0
	*($4 + [8]) = ($4 + [123])
	*($4 + [12]) = ($4 + [122])
	*($4 + [16]) = ($4 + [112])
	*($4 + [20]) = ($4 + [104])
	CALL $75(($4 + [64]), $3, $9, $4)
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = *($2)
	*($4) = $1
	*($4 + [8]) = $0
	*($4 + [4]) = ($4 + [64])
	*($4 + [12]) = ($4 + [123])
	*($4 + [16]) = ($4 + [122])
	*($4 + [20]) = ($4 + [112])
	*($4 + [24]) = ($4 + [104])
	*($4 + [152]) = $9
	CALL eosio_assert(((int_64)*($4 + [64]) == (int_64)CALL $fimport$7()), [18527])
	*($4 + [132]) = $4
	*($4 + [128]) = ($4 + [64])
	*($4 + [136]) = ($4 + [152])
	*(($3 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [76]) = ($4 + [64])
	CALL $76(($4 + [128]), $3)
	*($4 + [144]) = $3
	$9 = *($3)
	*($4 + [128]) = $9
	$2 = *($3 + [80])
	*($4 + [124]) = $2
	$17 = ($4 + [92])
	$6 = *($17)
	if ( ((uint_32)$6 >= (uint_32)*($13)) ){ goto $label$12 }
	*($6 + [8]) = $9
	*($6 + [16]) = $2
	*($4 + [144]) = [0]
	*($6) = $3
	*($17) = ($6 + [24])
	$3 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $77(($4 + [88]), ($4 + [144]), ($4 + [128]), ($4 + [124]))
	$3 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ((int_32)$5 == (int_32)[1])
	$3 = ($0 + [32])
	$13 = CALL $35($3, *(( $11 ? $12 : $6 )), [17047])
	$9 = *($0)
	*($4) = ($4 + [112])
	CALL $78($3, $13, $9, $4)
	$6 = CALL $35($3, *(( $12 ? $11 : $6 )), [17047])
	$9 = *($0)
	*($4) = ($4 + [112])
	CALL $79($3, $6, $9, $4)
	
.LABEL $label$7
	*($4 + [152]) = [0]
	*($4 + [128]) = ($5 == 0)
	$9 = *($0)
	*($4 + [4]) = ($4 + [152])
	*($4) = ($4 + [128])
	CALL $40(($0 + [72]), $1, $9, $4)
	$10 = *($4 + [112])
	$3 = CALL $131([17066])
	if ( ($3 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [17673])
	goto $label$15 
	
.LABEL $label$16
	if ( ($3 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = (int_64)0
	
.LOOP $label$17:
	$6 = *(($3 + [17065]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [17718])
	
.LABEL $label$18
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$17 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$13 
	
.LABEL $label$14
	$9 = (int_64)4
	
.LABEL $label$13
	*($4) = $10
	*($4 + [8]) = $9
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17771])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$9 = $10
	$6 = [1]
	$1 = $3
	$3 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$9 = $10
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$1 = ($3 + [1])
	$3 = $1
	if ( $6 ){ goto $label$23 }
	$6 = [1]
	$3 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$6 = [0]
	
.LABEL $label$19
	CALL eosio_assert($6, [17820])
	CALL $80($0, $11, $12, $7, $8, $4)
	$1 = *($4 + [88])
	if ( ($1 == 0) ){ goto $label$24 }
	$13 = ($4 + [92])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$26 }
	
.LOOP $label$27:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$28 }
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$27 }
	$3 = *(($4 + [88]))
	goto $label$25 
	
.LABEL $label$26
	$3 = $1
	
.LABEL $label$25
	*($13) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$24
	$global$0 = ($4 + [160])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	*($1 + [8]) = (*($1 + [8]) + [1])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [18182])
	$3 = *($1 + [64])
	$7 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [64])
	$9 = ($1 + [16])
	$10 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $136($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [44]) = $9
	*($5 + [72]) = $7
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [12])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [32])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	*($5 + [64]) = ($1 + [56])
	*($5 + [68]) = ($1 + [60])
	*($5 + [76]) = ($1 + [80])
	CALL $67(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $140($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [80])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18085])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18131])
	*($1 + [12]) = (*($1 + [12]) + [1])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [18182])
	$3 = *($1 + [64])
	$7 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [64])
	$9 = ($1 + [24])
	$10 = ($1 + [12])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $136($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $10
	*($5 + [48]) = $9
	*($5 + [72]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [44]) = ($1 + [16])
	*($5 + [52]) = ($1 + [32])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	*($5 + [64]) = ($1 + [56])
	*($5 + [68]) = ($1 + [60])
	*($5 + [76]) = ($1 + [80])
	CALL $67(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $140($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [80])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)7035937633859534850, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)$7), [18241])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $55($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)7035937633859534848, $6))
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)$7), [18241])
	
.LABEL $label$2
	*(($4 + [168])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $91($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $118($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $118($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $113($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	float_64 $12
	float_64 $13
	float_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$5 = ($global$0 - [272])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = CALL $35($6, *($1), [17047])
	$6 = ($0 + [32])
	CALL $36($6, $6, *($0))
	*((($5 + [160]) + [56])) = *(($6 + [56]))
	*((($5 + [160]) + [48])) = *(($6 + [48]))
	*((($5 + [160]) + [40])) = *(($6 + [40]))
	*((($5 + [160]) + [32])) = *(($6 + [32]))
	*((($5 + [160]) + [24])) = *(($6 + [24]))
	*((($5 + [160]) + [16])) = *(($6 + [16]))
	*(($7 = (($5 + [160]) + [8]))) = *(($6 + [8]))
	*($5 + [160]) = *($6)
	$8 = CALL $114((($5 + [160]) + [64]), ($6 + [64]))
	*($5 + [240]) = *($6 + [80])
	$6 = [0]
	$9 = *($3)
	$10 = [0]
	$13 = (CASTING float_64)(uint_32 (*($5 + [172]) + *($7)))
	$11 = *([0] + [8196])
	$12 = (CASTING float_64)(uint_32 *($11))
	if ( ((int_32)((float_64)$12 <= (float_64)$13) ^ (int_32)[1]) ){ goto $label$1 }
	$11 = ((*([0] + [8200]) - $11) & [65535])
	$10 = [0]
	$14 = $12
	
.LOOP $label$2:
	$10 = ($10 + [1])
	$7 = ($10 & [65535])
	if ( ((uint_32)$11 <= (uint_32)$7) ){ goto $label$3 }
	$12 = (CASTING float_64)(uint_32 *((*([0] + [8196]) + $7)))
	$14 = ((float_64)$14 + (float_64)$12)
	if ( ((float_64)$14 <= (float_64)$13) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$12 = ((float_64)$12 * (float_64)((float_64)((float_64)CALL $128($12) / (float_64)CALL $128((CASTING float_64)(uint_32 $7))) / (float_64)(float_64)1.895189))
	$14 = ((float_64)$14 + (float_64)$12)
	if ( ((float_64)$14 <= (float_64)$13) ){ goto $label$2 }
	
.LABEL $label$1
	$15 = (int_64)1000000
	$7 = ($10 & [65535])
	
.LOOP $label$4:
	$10 = ((uint_32)($6 & [65535]) % (uint_32)[3])
	$15 = ((int_64)$15 + (int_64)((int_64)((int_64)( (int_64)1440000 ? ( (int_64)2000000 ? (int_64)2640000 : ((int_32)$10 == (int_32)[2]) ) : ((int_32)$10 == (int_32)[1]) ) * (int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)65535)) & (int_64)4294967168))
	$6 = ($6 + [1])
	if ( ((uint_32)($6 & [65535]) <= (uint_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((uint_64)$9 <= (uint_64)$15), [17299])
	$6 = ((uint_64)$9 > (uint_64)$15)
	$9 = *($1)
	$15 = *($2)
	*($5 + [264]) = ( $15 ? $9 : $6 )
	*($5 + [256]) = ( $9 ? $15 : $6 )
	$7 = ($0 + [72])
	*($5 + [248]) = $7
	CALL $32($5, ($5 + [248]), ($5 + [256]))
	$6 = [0]
	$10 = *($5 + [4])
	if ( ($10 == 0) ){ goto $label$5 }
	$6 = ((uint_64)$15 > (uint_64)$9)
	$9 = *($10 + [16])
	$15 = *($10 + [8])
	$6 = ( $10 ? [0] : (int_64)(((int_64)((int_64)*($5 + [256]) ^ (int_64)( $15 ? $9 : $6 )) | (int_64)((int_64)*($5 + [264]) ^ (int_64)( $9 ? $15 : $6 ))) == 0) )
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18003])
	$6 = CALL memcpy($5, $6, [160])
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$8 }
	$10 = [1]
	$15 = *($6 + [8])
	if ( ((int_32)( [1] ? [2] : ((int_64)*($1) == (int_64)$15) ) != (int_32)$5) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = *($1)
	$10 = ((int_64)*($6 + [16]) == (int_64)$16)
	$9 = *($6 + [40])
	$17 = *($6 + [24])
	$2 = [1]
	$11 = [1]
	$15 = *($6 + [8])
	$20 = ((int_64)$15 == (int_64)$16)
	$19 = ($6 + [96])
	$18 = ($6 + [64])
	$5 = ( $18 ? $19 : $20 )
	if ( ((int_64)((int_64)*($5) | (int_64)*($5 + [8])) != (int_64)0) ){ goto $label$9 }
	$11 = ((int_64)((int_64)*($5 + [16]) | (int_64)*(($5 + [24]))) != (int_64)0)
	
.LABEL $label$9
	$16 = ( $17 ? $9 : $20 )
	$5 = ( $18 ? $19 : $10 )
	if ( ((int_64)((int_64)*($5) | (int_64)*(($5 + [8]))) == (int_64)0) ){ goto $label$12 }
	$9 = ( $17 ? $9 : $10 )
	$17 = (int_64)1
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$2 = ((int_64)((int_64)*($5 + [16]) | (int_64)*(($5 + [24]))) != (int_64)0)
	$9 = ( $17 ? $9 : $10 )
	$17 = (int_64)1
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_64)$9 < (int_64)$17) ){ goto $label$10 }
	if ( ($11 & $2) ){ goto $label$7 }
	$10 = [1]
	if ( ((int_32)($11 | $2) != (int_32)[1]) ){ goto $label$6 }
	
.LABEL $label$10
	$10 = [1]
	if ( ((int_32)($11 & ((int_64)$16 > (int_64)0)) != (int_32)[1]) ){ goto $label$6 }
	if ( ((((int_64)$9 < (int_64)$17) | ((int_32)$2 ^ (int_32)[1])) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [17317])
	$9 = *($1)
	CALL eosio_assert((((int_64)$9 == (int_64)$15) | ((int_64)$9 == (int_64)*($6 + [16]))), [17621])
	*($6 + [248]) = ((int_64)*($1) == (int_64)$15)
	$15 = *($0)
	*($6 + [260]) = $3
	*($6 + [264]) = $4
	*($6 + [256]) = ($6 + [248])
	CALL $69($7, $6, $15, ($6 + [256]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [232])))
	
.LABEL $label$13
	$global$0 = ($6 + [272])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18076])
	CALL memcpy(($5 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18076])
	CALL memcpy(($2 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [16]
	$0 = [0]
	$7 = ($2 + [16])
	$8 = (int_64)0
	
.LOOP $label$2:
	$3 = (($2 + [48]) + $0)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$6 = ((int_64)$6 | (int_64)*($3))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [18032])
	*($7 + [8]) = $8
	*($7) = ((int_64)$6 | (int_64)*($3))
	$4 = [16]
	$7 = ($7 + [16])
	$6 = (int_64)0
	$8 = (int_64)0
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$0 = ($5 + [16])
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($2, $6, $8, (($4 << [3]) + [-8]))
	$8 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$5
	*($7) = $6
	*($7 + [8]) = $8
	
.LABEL $label$4
	*($0) = *($2 + [16])
	*(($0 + [8])) = *($2 + [24])
	*(($0 + [24])) = *((($2 + [16]) + [24]))
	*(($0 + [16])) = *((($2 + [16]) + [16]))
	CALL $33(*($1), ($5 + [48]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $132([8256])
	$3 = *([0] + [8264])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8268])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8272]
	*([0] + [8264]) = [8272]
	$4 = *([0] + [8268])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $139([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8264])
	*([0] + [8264]) = $3
	*([0] + [8268]) = [0]
	
.LABEL $label$2
	*([0] + [8268]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $133([8256])
	return [0]
	
.LABEL $label$1
	CALL $133([8256])
	return [-1]
}